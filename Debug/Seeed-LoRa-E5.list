
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e4c0  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec4  0801e5f8  0801e5f8  0002e5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801f4bc  0801f4bc  0002f4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801f57c  0801f57c  00030178  2**0
                  CONTENTS
  5 .ARM          00000008  0801f57c  0801f57c  0002f57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801f584  0801f584  00030178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801f584  0801f584  0002f584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801f58c  0801f58c  0002f58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000178  20000000  0801f590  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000025fc  20000178  0801f708  00030178  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002774  0801f708  00032774  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301a2  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004c062  00000000  00000000  000301e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b930  00000000  00000000  0007c247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003e50  00000000  00000000  00087b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002f63  00000000  00000000  0008b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b19b  00000000  00000000  0008e92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004c717  00000000  00000000  000b9ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d93b7  00000000  00000000  001061dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000104dc  00000000  00000000  001df594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  001efa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000178 	.word	0x20000178
 8000154:	00000000 	.word	0x00000000
 8000158:	0801e5e0 	.word	0x0801e5e0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000017c 	.word	0x2000017c
 8000174:	0801e5e0 	.word	0x0801e5e0

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2iz>:
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30f      	bcc.n	8000d6a <__aeabi_f2iz+0x2a>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d90d      	bls.n	8000d70 <__aeabi_f2iz+0x30>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	bf18      	it	ne
 8000d66:	4240      	negne	r0, r0
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr
 8000d70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d74:	d101      	bne.n	8000d7a <__aeabi_f2iz+0x3a>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	d105      	bne.n	8000d86 <__aeabi_f2iz+0x46>
 8000d7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	bf08      	it	eq
 8000d80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_uldivmod>:
 8000d8c:	b953      	cbnz	r3, 8000da4 <__aeabi_uldivmod+0x18>
 8000d8e:	b94a      	cbnz	r2, 8000da4 <__aeabi_uldivmod+0x18>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	bf08      	it	eq
 8000d94:	2800      	cmpeq	r0, #0
 8000d96:	bf1c      	itt	ne
 8000d98:	f04f 31ff 	movne.w	r1, #4294967295
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000da0:	f000 b970 	b.w	8001084 <__aeabi_idiv0>
 8000da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dac:	f000 f806 	bl	8000dbc <__udivmoddi4>
 8000db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <__udivmoddi4>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	9e08      	ldr	r6, [sp, #32]
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	460f      	mov	r7, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14a      	bne.n	8000e62 <__udivmoddi4+0xa6>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	4694      	mov	ip, r2
 8000dd0:	d965      	bls.n	8000e9e <__udivmoddi4+0xe2>
 8000dd2:	fab2 f382 	clz	r3, r2
 8000dd6:	b143      	cbz	r3, 8000dea <__udivmoddi4+0x2e>
 8000dd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ddc:	f1c3 0220 	rsb	r2, r3, #32
 8000de0:	409f      	lsls	r7, r3
 8000de2:	fa20 f202 	lsr.w	r2, r0, r2
 8000de6:	4317      	orrs	r7, r2
 8000de8:	409c      	lsls	r4, r3
 8000dea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dee:	fa1f f58c 	uxth.w	r5, ip
 8000df2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000df6:	0c22      	lsrs	r2, r4, #16
 8000df8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e00:	fb01 f005 	mul.w	r0, r1, r5
 8000e04:	4290      	cmp	r0, r2
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x62>
 8000e08:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e10:	f080 811b 	bcs.w	800104a <__udivmoddi4+0x28e>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f240 8118 	bls.w	800104a <__udivmoddi4+0x28e>
 8000e1a:	3902      	subs	r1, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a12      	subs	r2, r2, r0
 8000e20:	b2a4      	uxth	r4, r4
 8000e22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2e:	fb00 f505 	mul.w	r5, r0, r5
 8000e32:	42a5      	cmp	r5, r4
 8000e34:	d90a      	bls.n	8000e4c <__udivmoddi4+0x90>
 8000e36:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3e:	f080 8106 	bcs.w	800104e <__udivmoddi4+0x292>
 8000e42:	42a5      	cmp	r5, r4
 8000e44:	f240 8103 	bls.w	800104e <__udivmoddi4+0x292>
 8000e48:	4464      	add	r4, ip
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	2100      	movs	r1, #0
 8000e54:	b11e      	cbz	r6, 8000e5e <__udivmoddi4+0xa2>
 8000e56:	40dc      	lsrs	r4, r3
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0xbc>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	f000 80ec 	beq.w	8001044 <__udivmoddi4+0x288>
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000e72:	4608      	mov	r0, r1
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	fab3 f183 	clz	r1, r3
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	d149      	bne.n	8000f14 <__udivmoddi4+0x158>
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	d302      	bcc.n	8000e8a <__udivmoddi4+0xce>
 8000e84:	4282      	cmp	r2, r0
 8000e86:	f200 80f7 	bhi.w	8001078 <__udivmoddi4+0x2bc>
 8000e8a:	1a84      	subs	r4, r0, r2
 8000e8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	4617      	mov	r7, r2
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d0e2      	beq.n	8000e5e <__udivmoddi4+0xa2>
 8000e98:	e9c6 4700 	strd	r4, r7, [r6]
 8000e9c:	e7df      	b.n	8000e5e <__udivmoddi4+0xa2>
 8000e9e:	b902      	cbnz	r2, 8000ea2 <__udivmoddi4+0xe6>
 8000ea0:	deff      	udf	#255	; 0xff
 8000ea2:	fab2 f382 	clz	r3, r2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 808f 	bne.w	8000fca <__udivmoddi4+0x20e>
 8000eac:	1a8a      	subs	r2, r1, r2
 8000eae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ebc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ec0:	0c22      	lsrs	r2, r4, #16
 8000ec2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ec6:	fb0e f005 	mul.w	r0, lr, r5
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x124>
 8000ece:	eb1c 0202 	adds.w	r2, ip, r2
 8000ed2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed6:	d202      	bcs.n	8000ede <__udivmoddi4+0x122>
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	f200 80ca 	bhi.w	8001072 <__udivmoddi4+0x2b6>
 8000ede:	4645      	mov	r5, r8
 8000ee0:	1a12      	subs	r2, r2, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ee8:	fb07 2210 	mls	r2, r7, r0, r2
 8000eec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ef0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ef4:	45a6      	cmp	lr, r4
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x14e>
 8000ef8:	eb1c 0404 	adds.w	r4, ip, r4
 8000efc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f00:	d202      	bcs.n	8000f08 <__udivmoddi4+0x14c>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f200 80ba 	bhi.w	800107c <__udivmoddi4+0x2c0>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f12:	e79f      	b.n	8000e54 <__udivmoddi4+0x98>
 8000f14:	f1c1 0720 	rsb	r7, r1, #32
 8000f18:	408b      	lsls	r3, r1
 8000f1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f22:	fa05 f401 	lsl.w	r4, r5, r1
 8000f26:	fa20 f307 	lsr.w	r3, r0, r7
 8000f2a:	40fd      	lsrs	r5, r7
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	fa00 f901 	lsl.w	r9, r0, r1
 8000f32:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000f36:	fa1f fe8c 	uxth.w	lr, ip
 8000f3a:	fbb5 f8f0 	udiv	r8, r5, r0
 8000f3e:	0c1c      	lsrs	r4, r3, #16
 8000f40:	fb00 5518 	mls	r5, r0, r8, r5
 8000f44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f48:	fb08 f50e 	mul.w	r5, r8, lr
 8000f4c:	42a5      	cmp	r5, r4
 8000f4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f52:	d90b      	bls.n	8000f6c <__udivmoddi4+0x1b0>
 8000f54:	eb1c 0404 	adds.w	r4, ip, r4
 8000f58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f5c:	f080 8087 	bcs.w	800106e <__udivmoddi4+0x2b2>
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	f240 8084 	bls.w	800106e <__udivmoddi4+0x2b2>
 8000f66:	f1a8 0802 	sub.w	r8, r8, #2
 8000f6a:	4464      	add	r4, ip
 8000f6c:	1b64      	subs	r4, r4, r5
 8000f6e:	b29d      	uxth	r5, r3
 8000f70:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f74:	fb00 4413 	mls	r4, r0, r3, r4
 8000f78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f80:	45a6      	cmp	lr, r4
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x1da>
 8000f84:	eb1c 0404 	adds.w	r4, ip, r4
 8000f88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f8c:	d26b      	bcs.n	8001066 <__udivmoddi4+0x2aa>
 8000f8e:	45a6      	cmp	lr, r4
 8000f90:	d969      	bls.n	8001066 <__udivmoddi4+0x2aa>
 8000f92:	3b02      	subs	r3, #2
 8000f94:	4464      	add	r4, ip
 8000f96:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000f9a:	fba0 8302 	umull	r8, r3, r0, r2
 8000f9e:	eba4 040e 	sub.w	r4, r4, lr
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	46c6      	mov	lr, r8
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	d355      	bcc.n	8001056 <__udivmoddi4+0x29a>
 8000faa:	d052      	beq.n	8001052 <__udivmoddi4+0x296>
 8000fac:	b156      	cbz	r6, 8000fc4 <__udivmoddi4+0x208>
 8000fae:	ebb9 030e 	subs.w	r3, r9, lr
 8000fb2:	eb64 0405 	sbc.w	r4, r4, r5
 8000fb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000fba:	40cb      	lsrs	r3, r1
 8000fbc:	40cc      	lsrs	r4, r1
 8000fbe:	431f      	orrs	r7, r3
 8000fc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	f1c3 0120 	rsb	r1, r3, #32
 8000fce:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fd2:	fa20 f201 	lsr.w	r2, r0, r1
 8000fd6:	fa25 f101 	lsr.w	r1, r5, r1
 8000fda:	409d      	lsls	r5, r3
 8000fdc:	432a      	orrs	r2, r5
 8000fde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe2:	fa1f fe8c 	uxth.w	lr, ip
 8000fe6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fea:	fb07 1510 	mls	r5, r7, r0, r1
 8000fee:	0c11      	lsrs	r1, r2, #16
 8000ff0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ff4:	fb00 f50e 	mul.w	r5, r0, lr
 8000ff8:	428d      	cmp	r5, r1
 8000ffa:	fa04 f403 	lsl.w	r4, r4, r3
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x256>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f100 38ff 	add.w	r8, r0, #4294967295
 8001008:	d22f      	bcs.n	800106a <__udivmoddi4+0x2ae>
 800100a:	428d      	cmp	r5, r1
 800100c:	d92d      	bls.n	800106a <__udivmoddi4+0x2ae>
 800100e:	3802      	subs	r0, #2
 8001010:	4461      	add	r1, ip
 8001012:	1b49      	subs	r1, r1, r5
 8001014:	b292      	uxth	r2, r2
 8001016:	fbb1 f5f7 	udiv	r5, r1, r7
 800101a:	fb07 1115 	mls	r1, r7, r5, r1
 800101e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001022:	fb05 f10e 	mul.w	r1, r5, lr
 8001026:	4291      	cmp	r1, r2
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x280>
 800102a:	eb1c 0202 	adds.w	r2, ip, r2
 800102e:	f105 38ff 	add.w	r8, r5, #4294967295
 8001032:	d216      	bcs.n	8001062 <__udivmoddi4+0x2a6>
 8001034:	4291      	cmp	r1, r2
 8001036:	d914      	bls.n	8001062 <__udivmoddi4+0x2a6>
 8001038:	3d02      	subs	r5, #2
 800103a:	4462      	add	r2, ip
 800103c:	1a52      	subs	r2, r2, r1
 800103e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001042:	e739      	b.n	8000eb8 <__udivmoddi4+0xfc>
 8001044:	4631      	mov	r1, r6
 8001046:	4630      	mov	r0, r6
 8001048:	e709      	b.n	8000e5e <__udivmoddi4+0xa2>
 800104a:	4639      	mov	r1, r7
 800104c:	e6e7      	b.n	8000e1e <__udivmoddi4+0x62>
 800104e:	4610      	mov	r0, r2
 8001050:	e6fc      	b.n	8000e4c <__udivmoddi4+0x90>
 8001052:	45c1      	cmp	r9, r8
 8001054:	d2aa      	bcs.n	8000fac <__udivmoddi4+0x1f0>
 8001056:	ebb8 0e02 	subs.w	lr, r8, r2
 800105a:	eb63 050c 	sbc.w	r5, r3, ip
 800105e:	3801      	subs	r0, #1
 8001060:	e7a4      	b.n	8000fac <__udivmoddi4+0x1f0>
 8001062:	4645      	mov	r5, r8
 8001064:	e7ea      	b.n	800103c <__udivmoddi4+0x280>
 8001066:	4603      	mov	r3, r0
 8001068:	e795      	b.n	8000f96 <__udivmoddi4+0x1da>
 800106a:	4640      	mov	r0, r8
 800106c:	e7d1      	b.n	8001012 <__udivmoddi4+0x256>
 800106e:	46d0      	mov	r8, sl
 8001070:	e77c      	b.n	8000f6c <__udivmoddi4+0x1b0>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	e733      	b.n	8000ee0 <__udivmoddi4+0x124>
 8001078:	4608      	mov	r0, r1
 800107a:	e70b      	b.n	8000e94 <__udivmoddi4+0xd8>
 800107c:	4464      	add	r4, ip
 800107e:	3802      	subs	r0, #2
 8001080:	e743      	b.n	8000f0a <__udivmoddi4+0x14e>
 8001082:	bf00      	nop

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <CS_Select>:
#define NRF24_CSN_PORT  GPIOB
#define NRF24_CSN_PIN   GPIO_PIN_9


void CS_Select (void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001092:	4802      	ldr	r0, [pc, #8]	; (800109c <CS_Select+0x14>)
 8001094:	f004 ffe0 	bl	8006058 <HAL_GPIO_WritePin>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	48000400 	.word	0x48000400

080010a0 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010aa:	4802      	ldr	r0, [pc, #8]	; (80010b4 <CS_UnSelect+0x14>)
 80010ac:	f004 ffd4 	bl	8006058 <HAL_GPIO_WritePin>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	48000400 	.word	0x48000400

080010b8 <CE_Enable>:


void CE_Enable (void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c2:	4802      	ldr	r0, [pc, #8]	; (80010cc <CE_Enable+0x14>)
 80010c4:	f004 ffc8 	bl	8006058 <HAL_GPIO_WritePin>
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	48000400 	.word	0x48000400

080010d0 <CE_Disable>:

void CE_Disable (void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010da:	4802      	ldr	r0, [pc, #8]	; (80010e4 <CE_Disable+0x14>)
 80010dc:	f004 ffbc 	bl	8006058 <HAL_GPIO_WritePin>
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	48000400 	.word	0x48000400

080010e8 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	71bb      	strb	r3, [r7, #6]
	//HAL_StatusTypeDef checkOK;
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f043 0320 	orr.w	r3, r3, #32
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001106:	f7ff ffbf 	bl	8001088 <CS_Select>

//	checkOK = HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800110a:	f7ff ffc9 	bl	80010a0 <CS_UnSelect>
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	f043 0320 	orr.w	r3, r3, #32
 800112c:	b2db      	uxtb	r3, r3
 800112e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001130:	f7ff ffaa 	bl	8001088 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8001134:	f107 0114 	add.w	r1, r7, #20
 8001138:	2364      	movs	r3, #100	; 0x64
 800113a:	2201      	movs	r2, #1
 800113c:	4808      	ldr	r0, [pc, #32]	; (8001160 <nrf24_WriteRegMulti+0x48>)
 800113e:	f007 fd3d 	bl	8008bbc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	b29a      	uxth	r2, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	68b9      	ldr	r1, [r7, #8]
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <nrf24_WriteRegMulti+0x48>)
 800114e:	f007 fd35 	bl	8008bbc <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001152:	f7ff ffa5 	bl	80010a0 <CS_UnSelect>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000334 	.word	0x20000334

08001164 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001172:	f7ff ff89 	bl	8001088 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8001176:	1df9      	adds	r1, r7, #7
 8001178:	2364      	movs	r3, #100	; 0x64
 800117a:	2201      	movs	r2, #1
 800117c:	4808      	ldr	r0, [pc, #32]	; (80011a0 <nrf24_ReadReg+0x3c>)
 800117e:	f007 fd1d 	bl	8008bbc <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8001182:	f107 010f 	add.w	r1, r7, #15
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	2201      	movs	r2, #1
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <nrf24_ReadReg+0x3c>)
 800118c:	f007 fea6 	bl	8008edc <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001190:	f7ff ff86 	bl	80010a0 <CS_UnSelect>

	return data;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000334 	.word	0x20000334

080011a4 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80011b2:	f7ff ff69 	bl	8001088 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80011b6:	f107 010f 	add.w	r1, r7, #15
 80011ba:	2364      	movs	r3, #100	; 0x64
 80011bc:	2201      	movs	r2, #1
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <nrf24_ReadReg_Multi+0x3c>)
 80011c0:	f007 fcfc 	bl	8008bbc <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	4804      	ldr	r0, [pc, #16]	; (80011e0 <nrf24_ReadReg_Multi+0x3c>)
 80011d0:	f007 fe84 	bl	8008edc <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80011d4:	f7ff ff64 	bl	80010a0 <CS_UnSelect>
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000334 	.word	0x20000334

080011e4 <nrf24_reset>:
	// Pull the CS HIGH to release the device
	CS_UnSelect();
}

void nrf24_reset(uint8_t REG)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b07      	cmp	r3, #7
 80011f2:	d104      	bne.n	80011fe <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2007      	movs	r0, #7
 80011f8:	f7ff ff76 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80011fc:	e090      	b.n	8001320 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b17      	cmp	r3, #23
 8001202:	d104      	bne.n	800120e <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001204:	2111      	movs	r1, #17
 8001206:	2017      	movs	r0, #23
 8001208:	f7ff ff6e 	bl	80010e8 <nrf24_WriteReg>
}
 800120c:	e088      	b.n	8001320 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800120e:	2108      	movs	r1, #8
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff ff69 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8001216:	213f      	movs	r1, #63	; 0x3f
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff ff65 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800121e:	2103      	movs	r1, #3
 8001220:	2002      	movs	r0, #2
 8001222:	f7ff ff61 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8001226:	2103      	movs	r1, #3
 8001228:	2003      	movs	r0, #3
 800122a:	f7ff ff5d 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 800122e:	2103      	movs	r1, #3
 8001230:	2004      	movs	r0, #4
 8001232:	f7ff ff59 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8001236:	2102      	movs	r1, #2
 8001238:	2005      	movs	r0, #5
 800123a:	f7ff ff55 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800123e:	210e      	movs	r1, #14
 8001240:	2006      	movs	r0, #6
 8001242:	f7ff ff51 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8001246:	2100      	movs	r1, #0
 8001248:	2007      	movs	r0, #7
 800124a:	f7ff ff4d 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800124e:	2100      	movs	r1, #0
 8001250:	2008      	movs	r0, #8
 8001252:	f7ff ff49 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8001256:	2100      	movs	r1, #0
 8001258:	2009      	movs	r0, #9
 800125a:	f7ff ff45 	bl	80010e8 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800125e:	4a32      	ldr	r2, [pc, #200]	; (8001328 <nrf24_reset+0x144>)
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001268:	6018      	str	r0, [r3, #0]
 800126a:	3304      	adds	r3, #4
 800126c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	2205      	movs	r2, #5
 8001274:	4619      	mov	r1, r3
 8001276:	200a      	movs	r0, #10
 8001278:	f7ff ff4e 	bl	8001118 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800127c:	4a2b      	ldr	r2, [pc, #172]	; (800132c <nrf24_reset+0x148>)
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001286:	6018      	str	r0, [r3, #0]
 8001288:	3304      	adds	r3, #4
 800128a:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2205      	movs	r2, #5
 8001292:	4619      	mov	r1, r3
 8001294:	200b      	movs	r0, #11
 8001296:	f7ff ff3f 	bl	8001118 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800129a:	21c3      	movs	r1, #195	; 0xc3
 800129c:	200c      	movs	r0, #12
 800129e:	f7ff ff23 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80012a2:	21c4      	movs	r1, #196	; 0xc4
 80012a4:	200d      	movs	r0, #13
 80012a6:	f7ff ff1f 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80012aa:	21c5      	movs	r1, #197	; 0xc5
 80012ac:	200e      	movs	r0, #14
 80012ae:	f7ff ff1b 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80012b2:	21c6      	movs	r1, #198	; 0xc6
 80012b4:	200f      	movs	r0, #15
 80012b6:	f7ff ff17 	bl	80010e8 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80012ba:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <nrf24_reset+0x144>)
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c4:	6018      	str	r0, [r3, #0]
 80012c6:	3304      	adds	r3, #4
 80012c8:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	2205      	movs	r2, #5
 80012d0:	4619      	mov	r1, r3
 80012d2:	2010      	movs	r0, #16
 80012d4:	f7ff ff20 	bl	8001118 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80012d8:	2100      	movs	r1, #0
 80012da:	2011      	movs	r0, #17
 80012dc:	f7ff ff04 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80012e0:	2100      	movs	r1, #0
 80012e2:	2012      	movs	r0, #18
 80012e4:	f7ff ff00 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80012e8:	2100      	movs	r1, #0
 80012ea:	2013      	movs	r0, #19
 80012ec:	f7ff fefc 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80012f0:	2100      	movs	r1, #0
 80012f2:	2014      	movs	r0, #20
 80012f4:	f7ff fef8 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80012f8:	2100      	movs	r1, #0
 80012fa:	2015      	movs	r0, #21
 80012fc:	f7ff fef4 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8001300:	2100      	movs	r1, #0
 8001302:	2016      	movs	r0, #22
 8001304:	f7ff fef0 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001308:	2111      	movs	r1, #17
 800130a:	2017      	movs	r0, #23
 800130c:	f7ff feec 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8001310:	2100      	movs	r1, #0
 8001312:	201c      	movs	r0, #28
 8001314:	f7ff fee8 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8001318:	2100      	movs	r1, #0
 800131a:	201d      	movs	r0, #29
 800131c:	f7ff fee4 	bl	80010e8 <nrf24_WriteReg>
}
 8001320:	bf00      	nop
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	0801e5f8 	.word	0x0801e5f8
 800132c:	0801e600 	.word	0x0801e600

08001330 <NRF24_Init>:




void NRF24_Init (void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8001334:	f7ff fecc 	bl	80010d0 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff ff53 	bl	80011e4 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 800133e:	2100      	movs	r1, #0
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff fed1 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8001346:	2100      	movs	r1, #0
 8001348:	2001      	movs	r0, #1
 800134a:	f7ff fecd 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800134e:	2100      	movs	r1, #0
 8001350:	2002      	movs	r0, #2
 8001352:	f7ff fec9 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8001356:	2103      	movs	r1, #3
 8001358:	2003      	movs	r0, #3
 800135a:	f7ff fec5 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800135e:	2100      	movs	r1, #0
 8001360:	2004      	movs	r0, #4
 8001362:	f7ff fec1 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8001366:	2100      	movs	r1, #0
 8001368:	2005      	movs	r0, #5
 800136a:	f7ff febd 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800136e:	210e      	movs	r1, #14
 8001370:	2006      	movs	r0, #6
 8001372:	f7ff feb9 	bl	80010e8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001376:	f7ff fe9f 	bl	80010b8 <CE_Enable>

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}

0800137e <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800138a:	f7ff fea1 	bl	80010d0 <CE_Disable>

	nrf24_reset (STATUS);
 800138e:	2007      	movs	r0, #7
 8001390:	f7ff ff28 	bl	80011e4 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	4619      	mov	r1, r3
 8001398:	2005      	movs	r0, #5
 800139a:	f7ff fea5 	bl	80010e8 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800139e:	2002      	movs	r0, #2
 80013a0:	f7ff fee0 	bl	8001164 <nrf24_ReadReg>
 80013a4:	4603      	mov	r3, r0
 80013a6:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	4619      	mov	r1, r3
 80013b4:	2002      	movs	r0, #2
 80013b6:	f7ff fe97 	bl	80010e8 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80013ba:	2205      	movs	r2, #5
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	200b      	movs	r0, #11
 80013c0:	f7ff feaa 	bl	8001118 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 80013c4:	21ee      	movs	r1, #238	; 0xee
 80013c6:	200c      	movs	r0, #12
 80013c8:	f7ff fe8e 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 80013cc:	2120      	movs	r1, #32
 80013ce:	2013      	movs	r0, #19
 80013d0:	f7ff fe8a 	bl	80010e8 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fec5 	bl	8001164 <nrf24_ReadReg>
 80013da:	4603      	mov	r3, r0
 80013dc:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 80013de:	7bbb      	ldrb	r3, [r7, #14]
 80013e0:	f043 0303 	orr.w	r3, r3, #3
 80013e4:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 80013e6:	7bbb      	ldrb	r3, [r7, #14]
 80013e8:	4619      	mov	r1, r3
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff fe7c 	bl	80010e8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80013f0:	f7ff fe62 	bl	80010b8 <CE_Enable>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8001404:	2007      	movs	r0, #7
 8001406:	f7ff fead 	bl	8001164 <nrf24_ReadReg>
 800140a:	4603      	mov	r3, r0
 800140c:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00b      	beq.n	8001430 <isDataAvailable+0x34>
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4013      	ands	r3, r2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8001424:	2140      	movs	r1, #64	; 0x40
 8001426:	2007      	movs	r0, #7
 8001428:	f7ff fe5e 	bl	80010e8 <nrf24_WriteReg>

		return 1;
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <isDataAvailable+0x36>
	}

	return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 800143a:	b590      	push	{r4, r7, lr}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	e00c      	b.n	8001462 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	b2d9      	uxtb	r1, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	18d4      	adds	r4, r2, r3
 8001452:	4608      	mov	r0, r1
 8001454:	f7ff fe86 	bl	8001164 <nrf24_ReadReg>
 8001458:	4603      	mov	r3, r0
 800145a:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3301      	adds	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b09      	cmp	r3, #9
 8001466:	ddef      	ble.n	8001448 <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	330a      	adds	r3, #10
 800146c:	2205      	movs	r2, #5
 800146e:	4619      	mov	r1, r3
 8001470:	200a      	movs	r0, #10
 8001472:	f7ff fe97 	bl	80011a4 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	330f      	adds	r3, #15
 800147a:	2205      	movs	r2, #5
 800147c:	4619      	mov	r1, r3
 800147e:	200b      	movs	r0, #11
 8001480:	f7ff fe90 	bl	80011a4 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f103 0414 	add.w	r4, r3, #20
 800148a:	200c      	movs	r0, #12
 800148c:	f7ff fe6a 	bl	8001164 <nrf24_ReadReg>
 8001490:	4603      	mov	r3, r0
 8001492:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f103 0415 	add.w	r4, r3, #21
 800149a:	200d      	movs	r0, #13
 800149c:	f7ff fe62 	bl	8001164 <nrf24_ReadReg>
 80014a0:	4603      	mov	r3, r0
 80014a2:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f103 0416 	add.w	r4, r3, #22
 80014aa:	200e      	movs	r0, #14
 80014ac:	f7ff fe5a 	bl	8001164 <nrf24_ReadReg>
 80014b0:	4603      	mov	r3, r0
 80014b2:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f103 0417 	add.w	r4, r3, #23
 80014ba:	200f      	movs	r0, #15
 80014bc:	f7ff fe52 	bl	8001164 <nrf24_ReadReg>
 80014c0:	4603      	mov	r3, r0
 80014c2:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3318      	adds	r3, #24
 80014c8:	2205      	movs	r2, #5
 80014ca:	4619      	mov	r1, r3
 80014cc:	200a      	movs	r0, #10
 80014ce:	f7ff fe69 	bl	80011a4 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 80014d2:	231d      	movs	r3, #29
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	e00e      	b.n	80014f6 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	3b0c      	subs	r3, #12
 80014de:	b2d9      	uxtb	r1, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	18d4      	adds	r4, r2, r3
 80014e6:	4608      	mov	r0, r1
 80014e8:	f7ff fe3c 	bl	8001164 <nrf24_ReadReg>
 80014ec:	4603      	mov	r3, r0
 80014ee:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	3301      	adds	r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	2b25      	cmp	r3, #37	; 0x25
 80014fa:	dded      	ble.n	80014d8 <NRF24_ReadAll+0x9e>
	}

}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}

08001506 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001506:	b480      	push	{r7}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800150e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001512:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001514:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4313      	orrs	r3, r2
 800151c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800151e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001522:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4013      	ands	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800153e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001542:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	43db      	mvns	r3, r3
 8001548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800154c:	4013      	ands	r3, r2
 800154e:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
	...

0800155c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <MX_ADC_Init+0x94>)
 8001562:	4a24      	ldr	r2, [pc, #144]	; (80015f4 <MX_ADC_Init+0x98>)
 8001564:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <MX_ADC_Init+0x94>)
 8001568:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800156c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <MX_ADC_Init+0x94>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <MX_ADC_Init+0x94>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_ADC_Init+0x94>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_ADC_Init+0x94>)
 8001582:	2204      	movs	r2, #4
 8001584:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_ADC_Init+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_ADC_Init+0x94>)
 800158e:	2200      	movs	r2, #0
 8001590:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_ADC_Init+0x94>)
 8001594:	2200      	movs	r2, #0
 8001596:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_ADC_Init+0x94>)
 800159a:	2201      	movs	r2, #1
 800159c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_ADC_Init+0x94>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_ADC_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_ADC_Init+0x94>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_ADC_Init+0x94>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_ADC_Init+0x94>)
 80015bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_ADC_Init+0x94>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_ADC_Init+0x94>)
 80015ca:	2207      	movs	r2, #7
 80015cc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_ADC_Init+0x94>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_ADC_Init+0x94>)
 80015d8:	2200      	movs	r2, #0
 80015da:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_ADC_Init+0x94>)
 80015de:	f002 fc23 	bl	8003e28 <HAL_ADC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80015e8:	f000 fda2 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000194 	.word	0x20000194
 80015f4:	40012400 	.word	0x40012400

080015f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a05      	ldr	r2, [pc, #20]	; (800161c <HAL_ADC_MspInit+0x24>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d103      	bne.n	8001612 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800160a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800160e:	f7ff ff7a 	bl	8001506 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40012400 	.word	0x40012400

08001620 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a05      	ldr	r2, [pc, #20]	; (8001644 <HAL_ADC_MspDeInit+0x24>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d103      	bne.n	800163a <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001632:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001636:	f7ff ff7e 	bl	8001536 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40012400 	.word	0x40012400

08001648 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <SYS_InitMeasurement+0x14>)
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <SYS_InitMeasurement+0x18>)
 8001650:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000194 	.word	0x20000194
 8001660:	40012400 	.word	0x40012400

08001664 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001672:	4813      	ldr	r0, [pc, #76]	; (80016c0 <SYS_GetBatteryLevel+0x5c>)
 8001674:	f000 f82a 	bl	80016cc <ADC_ReadChannels>
 8001678:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	80fb      	strh	r3, [r7, #6]
 8001684:	e016      	b.n	80016b4 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <SYS_GetBatteryLevel+0x60>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800168e:	4293      	cmp	r3, r2
 8001690:	d00b      	beq.n	80016aa <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <SYS_GetBatteryLevel+0x60>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	f640 43e4 	movw	r3, #3300	; 0xce4
 800169c:	fb03 f202 	mul.w	r2, r3, r2
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	80fb      	strh	r3, [r7, #6]
 80016a8:	e004      	b.n	80016b4 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <SYS_GetBatteryLevel+0x64>)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80016b4:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	b4002000 	.word	0xb4002000
 80016c4:	1fff75aa 	.word	0x1fff75aa
 80016c8:	004c08d8 	.word	0x004c08d8

080016cc <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80016e4:	f7ff ff3a 	bl	800155c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80016e8:	481a      	ldr	r0, [pc, #104]	; (8001754 <ADC_ReadChannels+0x88>)
 80016ea:	f003 f9cc 	bl	8004a86 <HAL_ADCEx_Calibration_Start>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80016f4:	f000 fd1c 	bl	8002130 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	4619      	mov	r1, r3
 800170a:	4812      	ldr	r0, [pc, #72]	; (8001754 <ADC_ReadChannels+0x88>)
 800170c:	f002 fed8 	bl	80044c0 <HAL_ADC_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001716:	f000 fd0b 	bl	8002130 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800171a:	480e      	ldr	r0, [pc, #56]	; (8001754 <ADC_ReadChannels+0x88>)
 800171c:	f002 fdb4 	bl	8004288 <HAL_ADC_Start>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001726:	f000 fd03 	bl	8002130 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800172a:	f04f 31ff 	mov.w	r1, #4294967295
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <ADC_ReadChannels+0x88>)
 8001730:	f002 fe22 	bl	8004378 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001734:	4807      	ldr	r0, [pc, #28]	; (8001754 <ADC_ReadChannels+0x88>)
 8001736:	f002 fded 	bl	8004314 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <ADC_ReadChannels+0x88>)
 800173c:	f002 feb3 	bl	80044a6 <HAL_ADC_GetValue>
 8001740:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <ADC_ReadChannels+0x88>)
 8001744:	f002 fd24 	bl	8004190 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001748:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000194 	.word	0x20000194

08001758 <LL_AHB1_GRP1_EnableClock>:
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4313      	orrs	r3, r2
 800176e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800177c:	68fb      	ldr	r3, [r7, #12]
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800178c:	2004      	movs	r0, #4
 800178e:	f7ff ffe3 	bl	8001758 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001792:	2001      	movs	r0, #1
 8001794:	f7ff ffe0 	bl	8001758 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2102      	movs	r1, #2
 800179c:	200b      	movs	r0, #11
 800179e:	f003 fb18 	bl	8004dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017a2:	200b      	movs	r0, #11
 80017a4:	f003 fb2f 	bl	8004e06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	200c      	movs	r0, #12
 80017ae:	f003 fb10 	bl	8004dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80017b2:	200c      	movs	r0, #12
 80017b4:	f003 fb27 	bl	8004e06 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2100      	movs	r1, #0
 80017bc:	203d      	movs	r0, #61	; 0x3d
 80017be:	f003 fb08 	bl	8004dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 80017c2:	203d      	movs	r0, #61	; 0x3d
 80017c4:	f003 fb1f 	bl	8004e06 <HAL_NVIC_EnableIRQ>

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017dc:	d101      	bne.n	80017e2 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 80017e2:	2300      	movs	r3, #0
#endif
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	58004000 	.word	0x58004000

080017f0 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	; 0x30
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001808:	4b56      	ldr	r3, [pc, #344]	; (8001964 <FLASH_IF_Write+0x174>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0299      	lsls	r1, r3, #10
 800180e:	4b56      	ldr	r3, [pc, #344]	; (8001968 <FLASH_IF_Write+0x178>)
 8001810:	400b      	ands	r3, r1
 8001812:	fbb2 f1f3 	udiv	r1, r2, r3
 8001816:	fb01 f303 	mul.w	r3, r1, r3
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	0adb      	lsrs	r3, r3, #11
 800181e:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800182a:	3b01      	subs	r3, #1
 800182c:	4a4d      	ldr	r2, [pc, #308]	; (8001964 <FLASH_IF_Write+0x174>)
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	0291      	lsls	r1, r2, #10
 8001832:	4a4d      	ldr	r2, [pc, #308]	; (8001968 <FLASH_IF_Write+0x178>)
 8001834:	400a      	ands	r2, r1
 8001836:	fbb3 f1f2 	udiv	r1, r3, r2
 800183a:	fb01 f202 	mul.w	r2, r1, r2
 800183e:	1a9b      	subs	r3, r3, r2
 8001840:	0adb      	lsrs	r3, r3, #11
 8001842:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <FLASH_IF_Write+0x7a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	2b00      	cmp	r3, #0
 800185e:	d104      	bne.n	800186a <FLASH_IF_Write+0x7a>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 800186a:	f06f 0304 	mvn.w	r3, #4
 800186e:	e074      	b.n	800195a <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001870:	4b3e      	ldr	r3, [pc, #248]	; (800196c <FLASH_IF_Write+0x17c>)
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	2b00      	cmp	r3, #0
 8001876:	da02      	bge.n	800187e <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 8001878:	f06f 0303 	mvn.w	r3, #3
 800187c:	e06d      	b.n	800195a <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	429a      	cmp	r2, r3
 8001884:	d005      	beq.n	8001892 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800188c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	e05b      	b.n	8001950 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f8f8 	bl	8001a92 <FLASH_IF_IsEmpty>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d037      	beq.n	8001918 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 80018ae:	f06f 0304 	mvn.w	r3, #4
 80018b2:	e052      	b.n	800195a <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018ba:	02db      	lsls	r3, r3, #11
 80018bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018c0:	4619      	mov	r1, r3
 80018c2:	6838      	ldr	r0, [r7, #0]
 80018c4:	f01b fab6 	bl	801ce34 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	6a39      	ldr	r1, [r7, #32]
 80018d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018d6:	b292      	uxth	r2, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f01b faab 	bl	801ce34 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 80018de:	2200      	movs	r2, #0
 80018e0:	2101      	movs	r1, #1
 80018e2:	69f8      	ldr	r0, [r7, #28]
 80018e4:	f000 f865 	bl	80019b2 <FLASH_IF_EraseByPages>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 80018ee:	f06f 0301 	mvn.w	r3, #1
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 80018f4:	e030      	b.n	8001958 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018fc:	02db      	lsls	r3, r3, #11
 80018fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001902:	6839      	ldr	r1, [r7, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f000 f88a 	bl	8001a1e <FLASH_IF_Write_Buffer>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d010      	beq.n	8001932 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 8001910:	f06f 0302 	mvn.w	r3, #2
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 8001916:	e01f      	b.n	8001958 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800191c:	4619      	mov	r1, r3
 800191e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001920:	f000 f87d 	bl	8001a1e <FLASH_IF_Write_Buffer>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 800192a:	f06f 0302 	mvn.w	r3, #2
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001930:	e012      	b.n	8001958 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 8001932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001936:	4413      	add	r3, r2
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 800193a:	6a3a      	ldr	r2, [r7, #32]
 800193c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193e:	4413      	add	r3, r2
 8001940:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3301      	adds	r3, #1
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	429a      	cmp	r2, r3
 8001956:	d99f      	bls.n	8001898 <FLASH_IF_Write+0xa8>
  }

  return status;
 8001958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 800195a:	4618      	mov	r0, r3
 800195c:	3730      	adds	r7, #48	; 0x30
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	1fff75e0 	.word	0x1fff75e0
 8001968:	03fffc00 	.word	0x03fffc00
 800196c:	58004000 	.word	0x58004000

08001970 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 800197c:	e00b      	b.n	8001996 <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 800197e:	bf00      	nop
 8001980:	f7ff ff24 	bl	80017cc <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1fa      	bne.n	8001980 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 800198a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800198e:	68f9      	ldr	r1, [r7, #12]
 8001990:	2001      	movs	r0, #1
 8001992:	f003 fed1 	bl	8005738 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019a0:	4299      	cmp	r1, r3
 80019a2:	bf08      	it	eq
 80019a4:	4290      	cmpeq	r0, r2
 80019a6:	d1ea      	bne.n	800197e <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 80019a8:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b08a      	sub	sp, #40	; 0x28
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	460b      	mov	r3, r1
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 80019c8:	897b      	ldrh	r3, [r7, #10]
 80019ca:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d008      	beq.n	80019e4 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 80019d2:	f107 0318 	add.w	r3, r7, #24
 80019d6:	4618      	mov	r0, r3
 80019d8:	f004 f84c 	bl	8005a74 <HAL_FLASHEx_Erase_IT>
 80019dc:	4603      	mov	r3, r0
 80019de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019e2:	e00a      	b.n	80019fa <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 80019e4:	f107 0214 	add.w	r2, r7, #20
 80019e8:	f107 0318 	add.w	r3, r7, #24
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 ffe8 	bl	80059c4 <HAL_FLASHEx_Erase>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 80019fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d008      	beq.n	8001a14 <FLASH_IF_EraseByPages+0x62>
 8001a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d101      	bne.n	8001a0e <FLASH_IF_EraseByPages+0x5c>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e003      	b.n	8001a16 <FLASH_IF_EraseByPages+0x64>
 8001a0e:	f06f 0301 	mvn.w	r3, #1
 8001a12:	e000      	b.n	8001a16 <FLASH_IF_EraseByPages+0x64>
 8001a14:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3728      	adds	r7, #40	; 0x28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b08a      	sub	sp, #40	; 0x28
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	e020      	b.n	8001a7a <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a40:	4618      	mov	r0, r3
 8001a42:	f01b f9f7 	bl	801ce34 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 8001a46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4e:	bf08      	it	eq
 8001a50:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001a54:	d005      	beq.n	8001a62 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 8001a56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff ff88 	bl	8001970 <FLASH_IF_Write64>
 8001a60:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3308      	adds	r3, #8
 8001a66:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	3308      	adds	r3, #8
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d108      	bne.n	8001a86 <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	3301      	adds	r3, #1
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	08db      	lsrs	r3, r3, #3
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d3d9      	bcc.n	8001a38 <FLASH_IF_Write_Buffer+0x1a>
 8001a84:	e000      	b.n	8001a88 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 8001a86:	bf00      	nop
    }
  }

  return status;
 8001a88:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3728      	adds	r7, #40	; 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001a9c:	e00a      	b.n	8001ab4 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2bff      	cmp	r3, #255	; 0xff
 8001aa8:	d001      	beq.n	8001aae <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e039      	b.n	8001b22 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ef      	bne.n	8001a9e <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	e010      	b.n	8001aea <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f103 0208 	add.w	r2, r3, #8
 8001ace:	60fa      	str	r2, [r7, #12]
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad8:	bf08      	it	eq
 8001ada:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001ade:	d001      	beq.n	8001ae4 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e01e      	b.n	8001b22 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	08db      	lsrs	r3, r3, #3
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d3e9      	bcc.n	8001ac8 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	607b      	str	r3, [r7, #4]
  while (size != 0)
 8001b02:	e00a      	b.n	8001b1a <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2bff      	cmp	r3, #255	; 0xff
 8001b0e:	d001      	beq.n	8001b14 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e006      	b.n	8001b22 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	603b      	str	r3, [r7, #0]
  while (size != 0)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f1      	bne.n	8001b04 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 8001b20:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <LL_AHB2_GRP1_EnableClock>:
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b50:	68fb      	ldr	r3, [r7, #12]
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	2001      	movs	r0, #1
 8001b72:	f7ff ffdb 	bl	8001b2c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	2002      	movs	r0, #2
 8001b78:	f7ff ffd8 	bl	8001b2c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7c:	2004      	movs	r0, #4
 8001b7e:	f7ff ffd5 	bl	8001b2c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|SPI_CSN_Pin|SPI_CEN_Pin, GPIO_PIN_RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8001b88:	4825      	ldr	r0, [pc, #148]	; (8001c20 <MX_GPIO_Init+0xc4>)
 8001b8a:	f004 fa65 	bl	8006058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2120      	movs	r1, #32
 8001b92:	4823      	ldr	r0, [pc, #140]	; (8001c20 <MX_GPIO_Init+0xc4>)
 8001b94:	f004 fa60 	bl	8006058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f240 2131 	movw	r1, #561	; 0x231
 8001b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba2:	f004 fa59 	bl	8006058 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin;
 8001ba6:	2338      	movs	r3, #56	; 0x38
 8001ba8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4819      	ldr	r0, [pc, #100]	; (8001c20 <MX_GPIO_Init+0xc4>)
 8001bbc:	f004 f81e 	bl	8005bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CEN_Pin;
 8001bc0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bc4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4812      	ldr	r0, [pc, #72]	; (8001c20 <MX_GPIO_Init+0xc4>)
 8001bd8:	f004 f810 	bl	8005bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001bdc:	2331      	movs	r3, #49	; 0x31
 8001bde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf4:	f004 f802 	bl	8005bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 8001bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001bfe:	2311      	movs	r3, #17
 8001c00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c06:	2303      	movs	r3, #3
 8001c08:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c12:	f003 fff3 	bl	8005bfc <HAL_GPIO_Init>

}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	48000400 	.word	0x48000400

08001c24 <LL_AHB2_GRP1_EnableClock>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4013      	ands	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c48:	68fb      	ldr	r3, [r7, #12]
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <LL_APB1_GRP1_EnableClock>:
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c78:	68fb      	ldr	r3, [r7, #12]
}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <MX_I2C2_Init+0x78>)
 8001c8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001c90:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <MX_I2C2_Init+0x7c>)
 8001c92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c94:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ca0:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cbe:	480e      	ldr	r0, [pc, #56]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001cc0:	f004 f9fa 	bl	80060b8 <HAL_I2C_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001cca:	f000 fa31 	bl	8002130 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4809      	ldr	r0, [pc, #36]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001cd2:	f004 fee1 	bl	8006a98 <HAL_I2CEx_ConfigAnalogFilter>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001cdc:	f000 fa28 	bl	8002130 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001ce4:	f004 ff22 	bl	8006b2c <HAL_I2CEx_ConfigDigitalFilter>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001cee:	f000 fa1f 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200001f8 	.word	0x200001f8
 8001cfc:	40005800 	.word	0x40005800
 8001d00:	00707cbb 	.word	0x00707cbb

08001d04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b096      	sub	sp, #88	; 0x58
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	2238      	movs	r2, #56	; 0x38
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f01c fb49 	bl	801e3bc <memset>
  if(i2cHandle->Instance==I2C2)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a21      	ldr	r2, [pc, #132]	; (8001db4 <HAL_I2C_MspInit+0xb0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d13b      	bne.n	8001dac <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d38:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	4618      	mov	r0, r3
 8001d44:	f006 f9c8 	bl	80080d8 <HAL_RCCEx_PeriphCLKConfig>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d4e:	f000 f9ef 	bl	8002130 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	2001      	movs	r0, #1
 8001d54:	f7ff ff66 	bl	8001c24 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d58:	2002      	movs	r0, #2
 8001d5a:	f7ff ff63 	bl	8001c24 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d62:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d64:	2312      	movs	r3, #18
 8001d66:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d70:	2304      	movs	r3, #4
 8001d72:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d7e:	f003 ff3d 	bl	8005bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d86:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d88:	2312      	movs	r3, #18
 8001d8a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001d90:	2301      	movs	r3, #1
 8001d92:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d94:	2304      	movs	r3, #4
 8001d96:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4806      	ldr	r0, [pc, #24]	; (8001db8 <HAL_I2C_MspInit+0xb4>)
 8001da0:	f003 ff2c 	bl	8005bfc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001da4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001da8:	f7ff ff54 	bl	8001c54 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001dac:	bf00      	nop
 8001dae:	3758      	adds	r7, #88	; 0x58
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40005800 	.word	0x40005800
 8001db8:	48000400 	.word	0x48000400

08001dbc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dcc:	f023 0218 	bic.w	r2, r3, #24
 8001dd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
	...

08001de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dee:	f001 fe2d 	bl	8003a4c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df2:	f000 f8e3 	bl	8001fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001df6:	f7ff feb1 	bl	8001b5c <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001dfa:	f00a ffcd 	bl	800cd98 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001dfe:	f001 fa7b 	bl	80032f8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001e02:	f7ff ff3f 	bl	8001c84 <MX_I2C2_Init>
  MX_TIM16_Init();
 8001e06:	f000 fed1 	bl	8002bac <MX_TIM16_Init>
  MX_TIM17_Init();
 8001e0a:	f000 ff03 	bl	8002c14 <MX_TIM17_Init>
  MX_SPI2_Init();
 8001e0e:	f000 faf3 	bl	80023f8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  UART2_SET =0;
 8001e12:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <main+0x190>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]

  NRF24_Init();
 8001e18:	f7ff fa8a 	bl	8001330 <NRF24_Init>

  NRF24_RxMode(RxAddress, 10);
 8001e1c:	210a      	movs	r1, #10
 8001e1e:	4857      	ldr	r0, [pc, #348]	; (8001f7c <main+0x194>)
 8001e20:	f7ff faad 	bl	800137e <NRF24_RxMode>


   NRF24_ReadAll(data);
 8001e24:	4856      	ldr	r0, [pc, #344]	; (8001f80 <main+0x198>)
 8001e26:	f7ff fb08 	bl	800143a <NRF24_ReadAll>

  F1_QueueIni(); // init Function queue
 8001e2a:	f000 f98d 	bl	8002148 <F1_QueueIni>

  HAL_UART_Receive_IT(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 8001e2e:	2220      	movs	r2, #32
 8001e30:	4954      	ldr	r1, [pc, #336]	; (8001f84 <main+0x19c>)
 8001e32:	4855      	ldr	r0, [pc, #340]	; (8001f88 <main+0x1a0>)
 8001e34:	f008 fe5e 	bl	800aaf4 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e42:	f004 f909 	bl	8006058 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim16);
 8001e46:	4851      	ldr	r0, [pc, #324]	; (8001f8c <main+0x1a4>)
 8001e48:	f008 fbd6 	bl	800a5f8 <HAL_TIM_Base_Start_IT>


  while (1)
  {
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8001e4c:	2364      	movs	r3, #100	; 0x64
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	2301      	movs	r3, #1
 8001e52:	4a4f      	ldr	r2, [pc, #316]	; (8001f90 <main+0x1a8>)
 8001e54:	2188      	movs	r1, #136	; 0x88
 8001e56:	484f      	ldr	r0, [pc, #316]	; (8001f94 <main+0x1ac>)
 8001e58:	f004 f9be 	bl	80061d8 <HAL_I2C_Master_Transmit>


    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001e5c:	f00a ffa4 	bl	800cda8 <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */


    F1_pull()();
 8001e60:	f000 f9b6 	bl	80021d0 <F1_pull>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4798      	blx	r3


    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(0x44 << 1),SHT40_dataRX, 6, 100);
 8001e68:	2364      	movs	r3, #100	; 0x64
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2306      	movs	r3, #6
 8001e6e:	4a4a      	ldr	r2, [pc, #296]	; (8001f98 <main+0x1b0>)
 8001e70:	2188      	movs	r1, #136	; 0x88
 8001e72:	4848      	ldr	r0, [pc, #288]	; (8001f94 <main+0x1ac>)
 8001e74:	f004 faa4 	bl	80063c0 <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 8001e78:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <main+0x1b0>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	4b45      	ldr	r3, [pc, #276]	; (8001f98 <main+0x1b0>)
 8001e84:	785b      	ldrb	r3, [r3, #1]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b43      	ldr	r3, [pc, #268]	; (8001f9c <main+0x1b4>)
 8001e8e:	801a      	strh	r2, [r3, #0]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 8001e90:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <main+0x1b0>)
 8001e92:	78db      	ldrb	r3, [r3, #3]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	4b3f      	ldr	r3, [pc, #252]	; (8001f98 <main+0x1b0>)
 8001e9c:	791b      	ldrb	r3, [r3, #4]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	4b3e      	ldr	r3, [pc, #248]	; (8001fa0 <main+0x1b8>)
 8001ea6:	801a      	strh	r2, [r3, #0]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 8001ea8:	4b3c      	ldr	r3, [pc, #240]	; (8001f9c <main+0x1b4>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe feef 	bl	8000c90 <__aeabi_ui2f>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe facb 	bl	8000450 <__aeabi_f2d>
 8001eba:	a32b      	add	r3, pc, #172	; (adr r3, 8001f68 <main+0x180>)
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	f7fe fb1e 	bl	8000500 <__aeabi_dmul>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	a328      	add	r3, pc, #160	; (adr r3, 8001f70 <main+0x188>)
 8001ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed2:	f7fe fc3f 	bl	8000754 <__aeabi_ddiv>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <main+0x1bc>)
 8001ee4:	f7fe f954 	bl	8000190 <__aeabi_dsub>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f7fe fdc8 	bl	8000a84 <__aeabi_d2f>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <main+0x1c0>)
 8001ef8:	6013      	str	r3, [r2, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 8001efa:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <main+0x1b8>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fec6 	bl	8000c90 <__aeabi_ui2f>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe faa2 	bl	8000450 <__aeabi_f2d>
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <main+0x1c4>)
 8001f12:	f7fe faf5 	bl	8000500 <__aeabi_dmul>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	a314      	add	r3, pc, #80	; (adr r3, 8001f70 <main+0x188>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	f7fe fc16 	bl	8000754 <__aeabi_ddiv>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <main+0x1c8>)
 8001f36:	f7fe f92b 	bl	8000190 <__aeabi_dsub>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f7fe fd9f 	bl	8000a84 <__aeabi_d2f>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4a1a      	ldr	r2, [pc, #104]	; (8001fb4 <main+0x1cc>)
 8001f4a:	6013      	str	r3, [r2, #0]
    if(UART2_SET)MeasurePM_sens();
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <main+0x190>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <main+0x170>
 8001f54:	f000 f89c 	bl	8002090 <MeasurePM_sens>
    if (isDataAvailable(2) == 1)
 8001f58:	2002      	movs	r0, #2
 8001f5a:	f7ff fa4f 	bl	80013fc <isDataAvailable>
   	  {
 //  		  NRF24_Receive(RxData);
//   		  HAL_UART_Transmit(&huart2, RxData, strlen((char *)RxData), 1000);
   	  }

    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);///DBG
 8001f5e:	2120      	movs	r1, #32
 8001f60:	4815      	ldr	r0, [pc, #84]	; (8001fb8 <main+0x1d0>)
 8001f62:	f004 f890 	bl	8006086 <HAL_GPIO_TogglePin>
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8001f66:	e771      	b.n	8001e4c <main+0x64>
 8001f68:	00000000 	.word	0x00000000
 8001f6c:	4065e000 	.word	0x4065e000
 8001f70:	00000000 	.word	0x00000000
 8001f74:	40efffe0 	.word	0x40efffe0
 8001f78:	20000010 	.word	0x20000010
 8001f7c:	20000004 	.word	0x20000004
 8001f80:	20000274 	.word	0x20000274
 8001f84:	20000244 	.word	0x20000244
 8001f88:	200004e0 	.word	0x200004e0
 8001f8c:	200003b0 	.word	0x200003b0
 8001f90:	20000009 	.word	0x20000009
 8001f94:	200001f8 	.word	0x200001f8
 8001f98:	200002a8 	.word	0x200002a8
 8001f9c:	200002ae 	.word	0x200002ae
 8001fa0:	200002b0 	.word	0x200002b0
 8001fa4:	40468000 	.word	0x40468000
 8001fa8:	20000268 	.word	0x20000268
 8001fac:	405f4000 	.word	0x405f4000
 8001fb0:	40180000 	.word	0x40180000
 8001fb4:	2000026c 	.word	0x2000026c
 8001fb8:	48000400 	.word	0x48000400

08001fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b09a      	sub	sp, #104	; 0x68
 8001fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fc2:	f107 0320 	add.w	r3, r7, #32
 8001fc6:	2248      	movs	r2, #72	; 0x48
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f01c f9f6 	bl	801e3bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd0:	f107 0308 	add.w	r3, r7, #8
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
 8001fe0:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001fe2:	f004 fdef 	bl	8006bc4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff fee8 	bl	8001dbc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fec:	4b21      	ldr	r3, [pc, #132]	; (8002074 <SystemClock_Config+0xb8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ff4:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <SystemClock_Config+0xb8>)
 8001ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <SystemClock_Config+0xb8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002008:	2307      	movs	r3, #7
 800200a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 800200c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002012:	2381      	movs	r3, #129	; 0x81
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800201a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800201c:	2340      	movs	r3, #64	; 0x40
 800201e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8002020:	2300      	movs	r3, #0
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002024:	2300      	movs	r3, #0
 8002026:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002028:	f107 0320 	add.w	r3, r7, #32
 800202c:	4618      	mov	r0, r3
 800202e:	f005 f915 	bl	800725c <HAL_RCC_OscConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002038:	f000 f87a 	bl	8002130 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800203c:	234f      	movs	r3, #79	; 0x4f
 800203e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002040:	2302      	movs	r3, #2
 8002042:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002044:	2300      	movs	r3, #0
 8002046:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002054:	f107 0308 	add.w	r3, r7, #8
 8002058:	2101      	movs	r1, #1
 800205a:	4618      	mov	r0, r3
 800205c:	f005 fc9a 	bl	8007994 <HAL_RCC_ClockConfig>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002066:	f000 f863 	bl	8002130 <Error_Handler>
  }
}
 800206a:	bf00      	nop
 800206c:	3768      	adds	r7, #104	; 0x68
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	58000400 	.word	0x58000400

08002078 <EnablePM_sens>:

/* USER CODE BEGIN 4 */



void EnablePM_sens(void){
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800207c:	2200      	movs	r2, #0
 800207e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002086:	f003 ffe7 	bl	8006058 <HAL_GPIO_WritePin>

}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <MeasurePM_sens>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);


}

void MeasurePM_sens(void){
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0

	       HAL_UART_Receive_IT(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 8002094:	2220      	movs	r2, #32
 8002096:	4903      	ldr	r1, [pc, #12]	; (80020a4 <MeasurePM_sens+0x14>)
 8002098:	4803      	ldr	r0, [pc, #12]	; (80020a8 <MeasurePM_sens+0x18>)
 800209a:	f008 fd2b 	bl	800aaf4 <HAL_UART_Receive_IT>


}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000244 	.word	0x20000244
 80020a8:	200004e0 	.word	0x200004e0

080020ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
   if (htim == &htim16)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a19      	ldr	r2, [pc, #100]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d12b      	bne.n	8002114 <HAL_TIM_PeriodElapsedCallback+0x68>
   {
	  counter++;
 80020bc:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a17      	ldr	r2, [pc, #92]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80020c4:	6013      	str	r3, [r2, #0]
      switch(counter){
 80020c6:	4b16      	ldr	r3, [pc, #88]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 80020ce:	d007      	beq.n	80020e0 <HAL_TIM_PeriodElapsedCallback+0x34>
 80020d0:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 80020d4:	dc0f      	bgt.n	80020f6 <HAL_TIM_PeriodElapsedCallback+0x4a>
 80020d6:	2b05      	cmp	r3, #5
 80020d8:	d006      	beq.n	80020e8 <HAL_TIM_PeriodElapsedCallback+0x3c>
 80020da:	2b0a      	cmp	r3, #10
 80020dc:	d008      	beq.n	80020f0 <HAL_TIM_PeriodElapsedCallback+0x44>
 80020de:	e00a      	b.n	80020f6 <HAL_TIM_PeriodElapsedCallback+0x4a>
      case 820:
    	  F1_push(EnablePM_sens);
 80020e0:	4810      	ldr	r0, [pc, #64]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80020e2:	f000 f841 	bl	8002168 <F1_push>

    	  break;
 80020e6:	e006      	b.n	80020f6 <HAL_TIM_PeriodElapsedCallback+0x4a>
      case 5:
     	  PM_measure_flag = 1;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
    	//  F1_push(MeasurePM_sens);
    	  break;
 80020ee:	e002      	b.n	80020f6 <HAL_TIM_PeriodElapsedCallback+0x4a>
      case 10:
    	//  F1_push(DisablePM_sens);
    	  PM_measure_flag = 0;
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
      }

      counter %= 20;
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80020f8:	6819      	ldr	r1, [r3, #0]
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80020fc:	fb83 2301 	smull	r2, r3, r3, r1
 8002100:	10da      	asrs	r2, r3, #3
 8002102:	17cb      	asrs	r3, r1, #31
 8002104:	1ad2      	subs	r2, r2, r3
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	1aca      	subs	r2, r1, r3
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002112:	601a      	str	r2, [r3, #0]
   }
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	200003b0 	.word	0x200003b0
 8002120:	20000270 	.word	0x20000270
 8002124:	08002079 	.word	0x08002079
 8002128:	20000000 	.word	0x20000000
 800212c:	66666667 	.word	0x66666667

08002130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002134:	b672      	cpsid	i
}
 8002136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002138:	e7fe      	b.n	8002138 <Error_Handler+0x8>

0800213a <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
	...

08002148 <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  F1_last = 0;
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <F1_QueueIni+0x18>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 8002152:	4b04      	ldr	r3, [pc, #16]	; (8002164 <F1_QueueIni+0x1c>)
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	200002b4 	.word	0x200002b4
 8002164:	200002b8 	.word	0x200002b8

08002168 <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <F1_push+0x5c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3301      	adds	r3, #1
 8002176:	425a      	negs	r2, r3
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	f002 020f 	and.w	r2, r2, #15
 8002180:	bf58      	it	pl
 8002182:	4253      	negpl	r3, r2
 8002184:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <F1_push+0x60>)
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	4293      	cmp	r3, r2
 800218a:	d101      	bne.n	8002190 <F1_push+0x28>
 800218c:	2301      	movs	r3, #1
 800218e:	e014      	b.n	80021ba <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <F1_push+0x5c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	490b      	ldr	r1, [pc, #44]	; (80021c4 <F1_push+0x5c>)
 8002198:	600a      	str	r2, [r1, #0]
 800219a:	490c      	ldr	r1, [pc, #48]	; (80021cc <F1_push+0x64>)
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <F1_push+0x5c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	425a      	negs	r2, r3
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	f002 020f 	and.w	r2, r2, #15
 80021b0:	bf58      	it	pl
 80021b2:	4253      	negpl	r3, r2
 80021b4:	4a03      	ldr	r2, [pc, #12]	; (80021c4 <F1_push+0x5c>)
 80021b6:	6013      	str	r3, [r2, #0]
  return 0;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	200002b4 	.word	0x200002b4
 80021c8:	200002b8 	.word	0x200002b8
 80021cc:	200002bc 	.word	0x200002bc

080021d0 <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <F1_pull+0x4c>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <F1_pull+0x50>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d101      	bne.n	80021e6 <F1_pull+0x16>
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <F1_pull+0x54>)
 80021e4:	e014      	b.n	8002210 <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <F1_pull+0x50>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	490c      	ldr	r1, [pc, #48]	; (8002220 <F1_pull+0x50>)
 80021ee:	600a      	str	r2, [r1, #0]
 80021f0:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <F1_pull+0x58>)
 80021f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f6:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <F1_pull+0x50>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	425a      	negs	r2, r3
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	f002 020f 	and.w	r2, r2, #15
 8002206:	bf58      	it	pl
 8002208:	4253      	negpl	r3, r2
 800220a:	4a05      	ldr	r2, [pc, #20]	; (8002220 <F1_pull+0x50>)
 800220c:	6013      	str	r3, [r2, #0]
  return pullVar;
 800220e:	687b      	ldr	r3, [r7, #4]
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	200002b4 	.word	0x200002b4
 8002220:	200002b8 	.word	0x200002b8
 8002224:	0800213b 	.word	0x0800213b
 8002228:	200002bc 	.word	0x200002bc

0800222c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800223c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <LL_APB1_GRP1_EnableClock>:
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002258:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800225a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4313      	orrs	r3, r2
 8002262:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002268:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4013      	ands	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002270:	68fb      	ldr	r3, [r7, #12]
}
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	; 0x30
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	222c      	movs	r2, #44	; 0x2c
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f01c f897 	bl	801e3bc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800228e:	4b22      	ldr	r3, [pc, #136]	; (8002318 <MX_RTC_Init+0x9c>)
 8002290:	4a22      	ldr	r2, [pc, #136]	; (800231c <MX_RTC_Init+0xa0>)
 8002292:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8002294:	4b20      	ldr	r3, [pc, #128]	; (8002318 <MX_RTC_Init+0x9c>)
 8002296:	221f      	movs	r2, #31
 8002298:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800229a:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <MX_RTC_Init+0x9c>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80022a0:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <MX_RTC_Init+0x9c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022a6:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <MX_RTC_Init+0x9c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80022ac:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <MX_RTC_Init+0x9c>)
 80022ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022b2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <MX_RTC_Init+0x9c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <MX_RTC_Init+0x9c>)
 80022bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022c2:	4815      	ldr	r0, [pc, #84]	; (8002318 <MX_RTC_Init+0x9c>)
 80022c4:	f006 f822 	bl	800830c <HAL_RTC_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80022ce:	f7ff ff2f 	bl	8002130 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80022d2:	4811      	ldr	r0, [pc, #68]	; (8002318 <MX_RTC_Init+0x9c>)
 80022d4:	f006 fb10 	bl	80088f8 <HAL_RTCEx_SetSSRU_IT>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80022de:	f7ff ff27 	bl	8002130 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80022ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80022f2:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80022f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80022fa:	1d3b      	adds	r3, r7, #4
 80022fc:	2200      	movs	r2, #0
 80022fe:	4619      	mov	r1, r3
 8002300:	4805      	ldr	r0, [pc, #20]	; (8002318 <MX_RTC_Init+0x9c>)
 8002302:	f006 f87d 	bl	8008400 <HAL_RTC_SetAlarm_IT>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800230c:	f7ff ff10 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002310:	bf00      	nop
 8002312:	3730      	adds	r7, #48	; 0x30
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	200002fc 	.word	0x200002fc
 800231c:	40002800 	.word	0x40002800

08002320 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b090      	sub	sp, #64	; 0x40
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002328:	f107 0308 	add.w	r3, r7, #8
 800232c:	2238      	movs	r2, #56	; 0x38
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f01c f843 	bl	801e3bc <memset>
  if(rtcHandle->Instance==RTC)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a16      	ldr	r2, [pc, #88]	; (8002394 <HAL_RTC_MspInit+0x74>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d125      	bne.n	800238c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002340:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002344:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800234a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800234c:	f107 0308 	add.w	r3, r7, #8
 8002350:	4618      	mov	r0, r3
 8002352:	f005 fec1 	bl	80080d8 <HAL_RCCEx_PeriphCLKConfig>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800235c:	f7ff fee8 	bl	8002130 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002360:	f7ff ff64 	bl	800222c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002364:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002368:	f7ff ff70 	bl	800224c <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	2100      	movs	r1, #0
 8002370:	2002      	movs	r0, #2
 8002372:	f002 fd2e 	bl	8004dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8002376:	2002      	movs	r0, #2
 8002378:	f002 fd45 	bl	8004e06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800237c:	2200      	movs	r2, #0
 800237e:	2100      	movs	r1, #0
 8002380:	202a      	movs	r0, #42	; 0x2a
 8002382:	f002 fd26 	bl	8004dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002386:	202a      	movs	r0, #42	; 0x2a
 8002388:	f002 fd3d 	bl	8004e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800238c:	bf00      	nop
 800238e:	3740      	adds	r7, #64	; 0x40
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40002800 	.word	0x40002800

08002398 <LL_AHB2_GRP1_EnableClock>:
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023bc:	68fb      	ldr	r3, [r7, #12]
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <LL_APB1_GRP1_EnableClock>:
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80023d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4313      	orrs	r3, r2
 80023de:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80023e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4013      	ands	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ec:	68fb      	ldr	r3, [r7, #12]
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <MX_SPI2_Init+0x74>)
 80023fe:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <MX_SPI2_Init+0x78>)
 8002400:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002402:	4b1a      	ldr	r3, [pc, #104]	; (800246c <MX_SPI2_Init+0x74>)
 8002404:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002408:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800240a:	4b18      	ldr	r3, [pc, #96]	; (800246c <MX_SPI2_Init+0x74>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002410:	4b16      	ldr	r3, [pc, #88]	; (800246c <MX_SPI2_Init+0x74>)
 8002412:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002416:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <MX_SPI2_Init+0x74>)
 800241a:	2200      	movs	r2, #0
 800241c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800241e:	4b13      	ldr	r3, [pc, #76]	; (800246c <MX_SPI2_Init+0x74>)
 8002420:	2200      	movs	r2, #0
 8002422:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <MX_SPI2_Init+0x74>)
 8002426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800242a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <MX_SPI2_Init+0x74>)
 800242e:	2218      	movs	r2, #24
 8002430:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <MX_SPI2_Init+0x74>)
 8002434:	2200      	movs	r2, #0
 8002436:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <MX_SPI2_Init+0x74>)
 800243a:	2200      	movs	r2, #0
 800243c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <MX_SPI2_Init+0x74>)
 8002440:	2200      	movs	r2, #0
 8002442:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <MX_SPI2_Init+0x74>)
 8002446:	2207      	movs	r2, #7
 8002448:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <MX_SPI2_Init+0x74>)
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <MX_SPI2_Init+0x74>)
 8002452:	2208      	movs	r2, #8
 8002454:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002456:	4805      	ldr	r0, [pc, #20]	; (800246c <MX_SPI2_Init+0x74>)
 8002458:	f006 fadc 	bl	8008a14 <HAL_SPI_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002462:	f7ff fe65 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000334 	.word	0x20000334
 8002470:	40003800 	.word	0x40003800

08002474 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b096      	sub	sp, #88	; 0x58
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	2238      	movs	r2, #56	; 0x38
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f01b ff91 	bl	801e3bc <memset>
  if(spiHandle->Instance==SPI2)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a21      	ldr	r2, [pc, #132]	; (8002524 <HAL_SPI_MspInit+0xb0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d13b      	bne.n	800251c <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 80024a4:	2310      	movs	r3, #16
 80024a6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 80024a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ac:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ae:	f107 030c 	add.w	r3, r7, #12
 80024b2:	4618      	mov	r0, r3
 80024b4:	f005 fe10 	bl	80080d8 <HAL_RCCEx_PeriphCLKConfig>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80024be:	f7ff fe37 	bl	8002130 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024c6:	f7ff ff7f 	bl	80023c8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ca:	2002      	movs	r0, #2
 80024cc:	f7ff ff64 	bl	8002398 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d0:	2001      	movs	r0, #1
 80024d2:	f7ff ff61 	bl	8002398 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 80024d6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80024da:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024e8:	2305      	movs	r3, #5
 80024ea:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024f0:	4619      	mov	r1, r3
 80024f2:	480d      	ldr	r0, [pc, #52]	; (8002528 <HAL_SPI_MspInit+0xb4>)
 80024f4:	f003 fb82 	bl	8005bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024fc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002506:	2300      	movs	r3, #0
 8002508:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800250a:	2305      	movs	r3, #5
 800250c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002512:	4619      	mov	r1, r3
 8002514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002518:	f003 fb70 	bl	8005bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800251c:	bf00      	nop
 800251e:	3758      	adds	r7, #88	; 0x58
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40003800 	.word	0x40003800
 8002528:	48000400 	.word	0x48000400

0800252c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002530:	4b03      	ldr	r3, [pc, #12]	; (8002540 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8002532:	2201      	movs	r2, #1
 8002534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	58000400 	.word	0x58000400

08002544 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002560:	f001 fa94 	bl	8003a8c <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8002564:	f7ff ffe2 	bl	800252c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002568:	2001      	movs	r0, #1
 800256a:	f004 fbbd 	bl	8006ce8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}

08002572 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8002576:	f001 fa97 	bl	8003aa8 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800257a:	f001 f905 	bl	8003788 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}

08002582 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8002586:	f001 fa81 	bl	8003a8c <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800258a:	2101      	movs	r1, #1
 800258c:	2000      	movs	r0, #0
 800258e:	f004 fb27 	bl	8006be0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}

08002596 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800259a:	f001 fa85 	bl	8003aa8 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025b2:	e7fe      	b.n	80025b2 <NMI_Handler+0x4>

080025b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025b8:	e7fe      	b.n	80025b8 <HardFault_Handler+0x4>

080025ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025be:	e7fe      	b.n	80025be <MemManage_Handler+0x4>

080025c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025c4:	e7fe      	b.n	80025c4 <BusFault_Handler+0x4>

080025c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ca:	e7fe      	b.n	80025ca <UsageFault_Handler+0x4>

080025cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002600:	4802      	ldr	r0, [pc, #8]	; (800260c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8002602:	f006 f9b5 	bl	8008970 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	200002fc 	.word	0x200002fc

08002610 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002614:	4802      	ldr	r0, [pc, #8]	; (8002620 <DMA1_Channel1_IRQHandler+0x10>)
 8002616:	f002 fe8d 	bl	8005334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000570 	.word	0x20000570

08002624 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002628:	4802      	ldr	r0, [pc, #8]	; (8002634 <DMA1_Channel2_IRQHandler+0x10>)
 800262a:	f002 fe83 	bl	8005334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200005d0 	.word	0x200005d0

08002638 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	static int counter = 0;
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800263c:	4804      	ldr	r0, [pc, #16]	; (8002650 <TIM16_IRQHandler+0x18>)
 800263e:	f008 f827 	bl	800a690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  counter++;
 8002642:	4b04      	ldr	r3, [pc, #16]	; (8002654 <TIM16_IRQHandler+0x1c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	3301      	adds	r3, #1
 8002648:	4a02      	ldr	r2, [pc, #8]	; (8002654 <TIM16_IRQHandler+0x1c>)
 800264a:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM16_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}
 8002650:	200003b0 	.word	0x200003b0
 8002654:	20000398 	.word	0x20000398

08002658 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
static int counter = 0;
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800265c:	4804      	ldr	r0, [pc, #16]	; (8002670 <TIM17_IRQHandler+0x18>)
 800265e:	f008 f817 	bl	800a690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  counter++;
 8002662:	4b04      	ldr	r3, [pc, #16]	; (8002674 <TIM17_IRQHandler+0x1c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3301      	adds	r3, #1
 8002668:	4a02      	ldr	r2, [pc, #8]	; (8002674 <TIM17_IRQHandler+0x1c>)
 800266a:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM17_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	200003fc 	.word	0x200003fc
 8002674:	2000039c 	.word	0x2000039c

08002678 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <USART1_IRQHandler+0x10>)
 800267e:	f008 fb21 	bl	800acc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000450 	.word	0x20000450

0800268c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <USART2_IRQHandler+0x10>)
 8002692:	f008 fb17 	bl	800acc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	200004e0 	.word	0x200004e0

080026a0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80026a4:	4802      	ldr	r0, [pc, #8]	; (80026b0 <RTC_Alarm_IRQHandler+0x10>)
 80026a6:	f006 f813 	bl	80086d0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200002fc 	.word	0x200002fc

080026b4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80026b8:	4802      	ldr	r0, [pc, #8]	; (80026c4 <SUBGHZ_Radio_IRQHandler+0x10>)
 80026ba:	f007 fdaf 	bl	800a21c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200003a0 	.word	0x200003a0

080026c8 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 80026cc:	4802      	ldr	r0, [pc, #8]	; (80026d8 <DMAMUX1_OVR_IRQHandler+0x10>)
 80026ce:	f002 ffe1 	bl	8005694 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	200005d0 	.word	0x200005d0

080026dc <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80026e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80026f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4013      	ands	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002700:	68fb      	ldr	r3, [r7, #12]
}
 8002702:	bf00      	nop
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <MX_SUBGHZ_Init+0x20>)
 8002712:	2208      	movs	r2, #8
 8002714:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002716:	4805      	ldr	r0, [pc, #20]	; (800272c <MX_SUBGHZ_Init+0x20>)
 8002718:	f007 fb04 	bl	8009d24 <HAL_SUBGHZ_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002722:	f7ff fd05 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200003a0 	.word	0x200003a0

08002730 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002738:	2001      	movs	r0, #1
 800273a:	f7ff ffcf 	bl	80026dc <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	2100      	movs	r1, #0
 8002742:	2032      	movs	r0, #50	; 0x32
 8002744:	f002 fb45 	bl	8004dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002748:	2032      	movs	r0, #50	; 0x32
 800274a:	f002 fb5c 	bl	8004e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800275e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002768:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002780:	4b02      	ldr	r3, [pc, #8]	; (800278c <LL_FLASH_GetUDN+0x10>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	1fff7580 	.word	0x1fff7580

08002790 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <LL_FLASH_GetDeviceID+0x14>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	b2db      	uxtb	r3, r3
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	1fff7584 	.word	0x1fff7584

080027a8 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80027ac:	4b03      	ldr	r3, [pc, #12]	; (80027bc <LL_FLASH_GetSTCompanyID+0x14>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	0a1b      	lsrs	r3, r3, #8
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	1fff7584 	.word	0x1fff7584

080027c0 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7ff ffc6 	bl	8002756 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80027ca:	f01b f8c1 	bl	801d950 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <SystemApp_Init+0x50>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 80027d4:	f000 f988 	bl	8002ae8 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 80027d8:	f01b fb4a 	bl	801de70 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80027dc:	480d      	ldr	r0, [pc, #52]	; (8002814 <SystemApp_Init+0x54>)
 80027de:	f01b fbf5 	bl	801dfcc <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <SystemApp_Init+0x58>)
 80027e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027e8:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80027ea:	2002      	movs	r0, #2
 80027ec:	f01b fbfc 	bl	801dfe8 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 80027f0:	f7fe ff2a 	bl	8001648 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 80027f4:	f000 f9b0 	bl	8002b58 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80027f8:	f01a fa76 	bl	801cce8 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80027fc:	2101      	movs	r1, #1
 80027fe:	2001      	movs	r0, #1
 8002800:	f01a fab2 	bl	801cd68 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002804:	2101      	movs	r1, #1
 8002806:	2001      	movs	r0, #1
 8002808:	f01a fa7e 	bl	801cd08 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}
 8002810:	200003ac 	.word	0x200003ac
 8002814:	080029e1 	.word	0x080029e1
 8002818:	58004000 	.word	0x58004000

0800281c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002820:	f01a fad2 	bl	801cdc8 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}

08002828 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002832:	f7fe ff17 	bl	8001664 <SYS_GetBatteryLevel>
 8002836:	4603      	mov	r3, r0
 8002838:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800283a:	88bb      	ldrh	r3, [r7, #4]
 800283c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002840:	4293      	cmp	r3, r2
 8002842:	d902      	bls.n	800284a <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002844:	23fe      	movs	r3, #254	; 0xfe
 8002846:	71fb      	strb	r3, [r7, #7]
 8002848:	e014      	b.n	8002874 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 800284a:	88bb      	ldrh	r3, [r7, #4]
 800284c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002850:	d202      	bcs.n	8002858 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	71fb      	strb	r3, [r7, #7]
 8002856:	e00d      	b.n	8002874 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002858:	88bb      	ldrh	r3, [r7, #4]
 800285a:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800285e:	461a      	mov	r2, r3
 8002860:	4613      	mov	r3, r2
 8002862:	01db      	lsls	r3, r3, #7
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	461a      	mov	r2, r3
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <GetBatteryLevel+0x58>)
 800286c:	fba3 2302 	umull	r2, r3, r3, r2
 8002870:	09db      	lsrs	r3, r3, #7
 8002872:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002874:	79fb      	ldrb	r3, [r7, #7]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	1b4e81b5 	.word	0x1b4e81b5

08002884 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	4618      	mov	r0, r3
 8002892:	f000 f937 	bl	8002b04 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe fa51 	bl	8000d40 <__aeabi_f2iz>
 800289e:	4603      	mov	r3, r0
 80028a0:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80028a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3720      	adds	r7, #32
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80028ae:	b590      	push	{r4, r7, lr}
 80028b0:	b087      	sub	sp, #28
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80028ba:	f7ff ff5f 	bl	800277c <LL_FLASH_GetUDN>
 80028be:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c6:	d138      	bne.n	800293a <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80028c8:	f001 f8fc 	bl	8003ac4 <HAL_GetUIDw0>
 80028cc:	4604      	mov	r4, r0
 80028ce:	f001 f90d 	bl	8003aec <HAL_GetUIDw2>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4423      	add	r3, r4
 80028d6:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 80028d8:	f001 f8fe 	bl	8003ad8 <HAL_GetUIDw1>
 80028dc:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	0e1a      	lsrs	r2, r3, #24
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3307      	adds	r3, #7
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	0c1a      	lsrs	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3306      	adds	r3, #6
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	0a1a      	lsrs	r2, r3, #8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3305      	adds	r3, #5
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3304      	adds	r3, #4
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	0e1a      	lsrs	r2, r3, #24
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3303      	adds	r3, #3
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	0c1a      	lsrs	r2, r3, #16
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3302      	adds	r3, #2
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	0a1a      	lsrs	r2, r3, #8
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3301      	adds	r3, #1
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	b2da      	uxtb	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002938:	e031      	b.n	800299e <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3307      	adds	r3, #7
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	0a1a      	lsrs	r2, r3, #8
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3306      	adds	r3, #6
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	0c1a      	lsrs	r2, r3, #16
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3305      	adds	r3, #5
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	0e1a      	lsrs	r2, r3, #24
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3304      	adds	r3, #4
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002968:	f7ff ff12 	bl	8002790 <LL_FLASH_GetDeviceID>
 800296c:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3303      	adds	r3, #3
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002978:	f7ff ff16 	bl	80027a8 <LL_FLASH_GetSTCompanyID>
 800297c:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3302      	adds	r3, #2
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	0a1a      	lsrs	r2, r3, #8
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3301      	adds	r3, #1
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	0c1b      	lsrs	r3, r3, #16
 8002998:	b2da      	uxtb	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	701a      	strb	r2, [r3, #0]
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd90      	pop	{r4, r7, pc}

080029a6 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 80029a6:	b590      	push	{r4, r7, lr}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 80029b0:	f7ff fee4 	bl	800277c <LL_FLASH_GetUDN>
 80029b4:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d10b      	bne.n	80029d6 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80029be:	f001 f881 	bl	8003ac4 <HAL_GetUIDw0>
 80029c2:	4604      	mov	r4, r0
 80029c4:	f001 f888 	bl	8003ad8 <HAL_GetUIDw1>
 80029c8:	4603      	mov	r3, r0
 80029ca:	405c      	eors	r4, r3
 80029cc:	f001 f88e 	bl	8003aec <HAL_GetUIDw2>
 80029d0:	4603      	mov	r3, r0
 80029d2:	4063      	eors	r3, r4
 80029d4:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 80029d6:	687b      	ldr	r3, [r7, #4]

}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd90      	pop	{r4, r7, pc}

080029e0 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 80029ea:	f107 0308 	add.w	r3, r7, #8
 80029ee:	4618      	mov	r0, r3
 80029f0:	f01a fafa 	bl	801cfe8 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80029fa:	9200      	str	r2, [sp, #0]
 80029fc:	4a07      	ldr	r2, [pc, #28]	; (8002a1c <TimestampNow+0x3c>)
 80029fe:	2110      	movs	r1, #16
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f81d 	bl	8002a40 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fd fbb6 	bl	8000178 <strlen>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	0801e608 	.word	0x0801e608

08002a20 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002a24:	2101      	movs	r1, #1
 8002a26:	2002      	movs	r0, #2
 8002a28:	f01a f96e 	bl	801cd08 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002a34:	2100      	movs	r1, #0
 8002a36:	2002      	movs	r0, #2
 8002a38:	f01a f966 	bl	801cd08 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002a40:	b40c      	push	{r2, r3}
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002a4c:	f107 031c 	add.w	r3, r7, #28
 8002a50:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002a52:	6839      	ldr	r1, [r7, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f01a fc97 	bl	801d38c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a68:	b002      	add	sp, #8
 8002a6a:	4770      	bx	lr

08002a6c <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_GetTick+0x24>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002a92:	f000 f9dd 	bl	8002e50 <TIMER_IF_GetTimerValue>
 8002a96:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002a98:	687b      	ldr	r3, [r7, #4]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200003ac 	.word	0x200003ac

08002aa8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fa53 	bl	8002f5e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <LL_EXTI_EnableIT_32_63+0x24>)
 8002aca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002ace:	4905      	ldr	r1, [pc, #20]	; (8002ae4 <LL_EXTI_EnableIT_32_63+0x24>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	58000800 	.word	0x58000800

08002ae8 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002aec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002af0:	f7ff ffe6 	bl	8002ac0 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002af4:	f001 f804 	bl	8003b00 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002af8:	f001 f808 	bl	8003b0c <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002afc:	f001 f80c 	bl	8003b18 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002b0c:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <EnvSensors_Read+0x40>)
 8002b0e:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002b10:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <EnvSensors_Read+0x44>)
 8002b12:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002b14:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <EnvSensors_Read+0x48>)
 8002b16:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <EnvSensors_Read+0x4c>)
 8002b2e:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a08      	ldr	r2, [pc, #32]	; (8002b54 <EnvSensors_Read+0x50>)
 8002b34:	611a      	str	r2, [r3, #16]

  return 0;
 8002b36:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	371c      	adds	r7, #28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	42480000 	.word	0x42480000
 8002b48:	41900000 	.word	0x41900000
 8002b4c:	447a0000 	.word	0x447a0000
 8002b50:	003e090d 	.word	0x003e090d
 8002b54:	000503ab 	.word	0x000503ab

08002b58 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002b62:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002b72:	bf00      	nop
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <LL_APB2_GRP1_EnableClock>:
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ba0:	bf00      	nop
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
	...

08002bac <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002bb0:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <MX_TIM16_Init+0x60>)
 8002bb2:	4a17      	ldr	r2, [pc, #92]	; (8002c10 <MX_TIM16_Init+0x64>)
 8002bb4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <MX_TIM16_Init+0x60>)
 8002bb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bbc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bbe:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <MX_TIM16_Init+0x60>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32000;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <MX_TIM16_Init+0x60>)
 8002bc6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002bca:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <MX_TIM16_Init+0x60>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <MX_TIM16_Init+0x60>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <MX_TIM16_Init+0x60>)
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002bde:	480b      	ldr	r0, [pc, #44]	; (8002c0c <MX_TIM16_Init+0x60>)
 8002be0:	f007 fcb2 	bl	800a548 <HAL_TIM_Base_Init>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002bea:	f7ff faa1 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002bee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002bf2:	f7ff ffc2 	bl	8002b7a <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	201c      	movs	r0, #28
 8002bfc:	f002 f8e9 	bl	8004dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002c00:	201c      	movs	r0, #28
 8002c02:	f002 f900 	bl	8004e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM16_Init 2 */

}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200003b0 	.word	0x200003b0
 8002c10:	40014400 	.word	0x40014400

08002c14 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002c18:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <MX_TIM17_Init+0x5c>)
 8002c1a:	4a16      	ldr	r2, [pc, #88]	; (8002c74 <MX_TIM17_Init+0x60>)
 8002c1c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002c1e:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <MX_TIM17_Init+0x5c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <MX_TIM17_Init+0x5c>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002c2a:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <MX_TIM17_Init+0x5c>)
 8002c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c30:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c32:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <MX_TIM17_Init+0x5c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002c38:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <MX_TIM17_Init+0x5c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <MX_TIM17_Init+0x5c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002c44:	480a      	ldr	r0, [pc, #40]	; (8002c70 <MX_TIM17_Init+0x5c>)
 8002c46:	f007 fc7f 	bl	800a548 <HAL_TIM_Base_Init>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002c50:	f7ff fa6e 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002c54:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002c58:	f7ff ff8f 	bl	8002b7a <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2100      	movs	r1, #0
 8002c60:	201d      	movs	r0, #29
 8002c62:	f002 f8b6 	bl	8004dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002c66:	201d      	movs	r0, #29
 8002c68:	f002 f8cd 	bl	8004e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM17_Init 2 */

}
 8002c6c:	bf00      	nop
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	200003fc 	.word	0x200003fc
 8002c74:	40014800 	.word	0x40014800

08002c78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <HAL_TIM_Base_MspInit+0x58>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d10c      	bne.n	8002ca4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002c8a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c8e:	f7ff ff74 	bl	8002b7a <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002c92:	2200      	movs	r2, #0
 8002c94:	2100      	movs	r1, #0
 8002c96:	201c      	movs	r0, #28
 8002c98:	f002 f89b 	bl	8004dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002c9c:	201c      	movs	r0, #28
 8002c9e:	f002 f8b2 	bl	8004e06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002ca2:	e010      	b.n	8002cc6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <HAL_TIM_Base_MspInit+0x5c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d10b      	bne.n	8002cc6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002cae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002cb2:	f7ff ff62 	bl	8002b7a <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2100      	movs	r1, #0
 8002cba:	201d      	movs	r0, #29
 8002cbc:	f002 f889 	bl	8004dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002cc0:	201d      	movs	r0, #29
 8002cc2:	f002 f8a0 	bl	8004e06 <HAL_NVIC_EnableIRQ>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40014400 	.word	0x40014400
 8002cd4:	40014800 	.word	0x40014800

08002cd8 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
	...

08002cf0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002cfa:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <TIMER_IF_Init+0x5c>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	f083 0301 	eor.w	r3, r3, #1
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01b      	beq.n	8002d40 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <TIMER_IF_Init+0x60>)
 8002d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002d10:	f7ff fab4 	bl	800227c <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002d14:	f000 f856 	bl	8002dc4 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002d18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d1c:	480c      	ldr	r0, [pc, #48]	; (8002d50 <TIMER_IF_Init+0x60>)
 8002d1e:	f005 fc7b 	bl	8008618 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <TIMER_IF_Init+0x60>)
 8002d24:	f04f 32ff 	mov.w	r2, #4294967295
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002d2a:	4809      	ldr	r0, [pc, #36]	; (8002d50 <TIMER_IF_Init+0x60>)
 8002d2c:	f005 fdb2 	bl	8008894 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002d30:	2000      	movs	r0, #0
 8002d32:	f000 f9d3 	bl	80030dc <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002d36:	f000 f85f 	bl	8002df8 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002d3a:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <TIMER_IF_Init+0x5c>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002d40:	79fb      	ldrb	r3, [r7, #7]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000448 	.word	0x20000448
 8002d50:	200002fc 	.word	0x200002fc

08002d54 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08e      	sub	sp, #56	; 0x38
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002d62:	f107 0308 	add.w	r3, r7, #8
 8002d66:	222c      	movs	r2, #44	; 0x2c
 8002d68:	2100      	movs	r1, #0
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f01b fb26 	bl	801e3bc <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002d70:	f000 f828 	bl	8002dc4 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <TIMER_IF_StartTimer+0x68>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002d8c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002d90:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002d98:	f107 0308 	add.w	r3, r7, #8
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4807      	ldr	r0, [pc, #28]	; (8002dc0 <TIMER_IF_StartTimer+0x6c>)
 8002da2:	f005 fb2d 	bl	8008400 <HAL_RTC_SetAlarm_IT>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002dac:	f7ff f9c0 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002db0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3738      	adds	r7, #56	; 0x38
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	2000044c 	.word	0x2000044c
 8002dc0:	200002fc 	.word	0x200002fc

08002dc4 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <TIMER_IF_StopTimer+0x2c>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002dd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dd8:	4806      	ldr	r0, [pc, #24]	; (8002df4 <TIMER_IF_StopTimer+0x30>)
 8002dda:	f005 fc1d 	bl	8008618 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002dde:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <TIMER_IF_StopTimer+0x30>)
 8002de0:	f04f 32ff 	mov.w	r2, #4294967295
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002de6:	79fb      	ldrb	r3, [r7, #7]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40002800 	.word	0x40002800
 8002df4:	200002fc 	.word	0x200002fc

08002df8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002dfc:	f000 f98e 	bl	800311c <GetTimerTicks>
 8002e00:	4603      	mov	r3, r0
 8002e02:	4a03      	ldr	r2, [pc, #12]	; (8002e10 <TIMER_IF_SetTimerContext+0x18>)
 8002e04:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002e06:	4b02      	ldr	r3, [pc, #8]	; (8002e10 <TIMER_IF_SetTimerContext+0x18>)
 8002e08:	681b      	ldr	r3, [r3, #0]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	2000044c 	.word	0x2000044c

08002e14 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002e18:	4b02      	ldr	r3, [pc, #8]	; (8002e24 <TIMER_IF_GetTimerContext+0x10>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr
 8002e24:	2000044c 	.word	0x2000044c

08002e28 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002e32:	f000 f973 	bl	800311c <GetTimerTicks>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002e40:	687b      	ldr	r3, [r7, #4]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	2000044c 	.word	0x2000044c

08002e50 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <TIMER_IF_GetTimerValue+0x24>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002e62:	f000 f95b 	bl	800311c <GetTimerTicks>
 8002e66:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002e68:	687b      	ldr	r3, [r7, #4]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000448 	.word	0x20000448

08002e78 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002e82:	2303      	movs	r3, #3
 8002e84:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002e86:	687b      	ldr	r3, [r7, #4]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002e92:	b5b0      	push	{r4, r5, r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	460a      	mov	r2, r1
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	0d95      	lsrs	r5, r2, #22
 8002ea8:	0294      	lsls	r4, r2, #10
 8002eaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	f7fd ff69 	bl	8000d8c <__aeabi_uldivmod>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bdb0      	pop	{r4, r5, r7, pc}

08002ecc <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002ecc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ed0:	b085      	sub	sp, #20
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	2000      	movs	r0, #0
 8002ede:	460c      	mov	r4, r1
 8002ee0:	4605      	mov	r5, r0
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	f04f 0a00 	mov.w	sl, #0
 8002eea:	f04f 0b00 	mov.w	fp, #0
 8002eee:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002ef2:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002ef6:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002efa:	4650      	mov	r0, sl
 8002efc:	4659      	mov	r1, fp
 8002efe:	1b02      	subs	r2, r0, r4
 8002f00:	eb61 0305 	sbc.w	r3, r1, r5
 8002f04:	f04f 0000 	mov.w	r0, #0
 8002f08:	f04f 0100 	mov.w	r1, #0
 8002f0c:	0099      	lsls	r1, r3, #2
 8002f0e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002f12:	0090      	lsls	r0, r2, #2
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	eb12 0804 	adds.w	r8, r2, r4
 8002f1c:	eb43 0905 	adc.w	r9, r3, r5
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f34:	4690      	mov	r8, r2
 8002f36:	4699      	mov	r9, r3
 8002f38:	4640      	mov	r0, r8
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	0a82      	lsrs	r2, r0, #10
 8002f46:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002f4a:	0a8b      	lsrs	r3, r1, #10
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002f50:	68fb      	ldr	r3, [r7, #12]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f5c:	4770      	bx	lr

08002f5e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ff93 	bl	8002e92 <TIMER_IF_Convert_ms2Tick>
 8002f6c:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002f6e:	f000 f8d5 	bl	800311c <GetTimerTicks>
 8002f72:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002f74:	e000      	b.n	8002f78 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002f76:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002f78:	f000 f8d0 	bl	800311c <GetTimerTicks>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d8f6      	bhi.n	8002f76 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002f9a:	f01a fe27 	bl	801dbec <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002fae:	f000 f8a5 	bl	80030fc <TIMER_IF_BkUp_Read_MSBticks>
 8002fb2:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 f88f 	bl	80030dc <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002fbe:	bf00      	nop
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002fc6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fca:	b08c      	sub	sp, #48	; 0x30
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002fd4:	f000 f8a2 	bl	800311c <GetTimerTicks>
 8002fd8:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002fda:	f000 f88f 	bl	80030fc <TIMER_IF_BkUp_Read_MSBticks>
 8002fde:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	60fa      	str	r2, [r7, #12]
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	000b      	movs	r3, r1
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	460c      	mov	r4, r1
 8002ffc:	4605      	mov	r5, r0
 8002ffe:	eb12 0804 	adds.w	r8, r2, r4
 8003002:	eb43 0905 	adc.w	r9, r3, r5
 8003006:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800300a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	0a82      	lsrs	r2, r0, #10
 8003018:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800301c:	0a8b      	lsrs	r3, r1, #10
 800301e:	4613      	mov	r3, r2
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	2200      	movs	r2, #0
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8003030:	f04f 0b00 	mov.w	fp, #0
 8003034:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ff46 	bl	8002ecc <TIMER_IF_Convert_Tick2ms>
 8003040:	4603      	mov	r3, r0
 8003042:	b29a      	uxth	r2, r3
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8003048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800304a:	4618      	mov	r0, r3
 800304c:	3730      	adds	r7, #48	; 0x30
 800304e:	46bd      	mov	sp, r7
 8003050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003054 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	2100      	movs	r1, #0
 8003060:	4803      	ldr	r0, [pc, #12]	; (8003070 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8003062:	f005 fca9 	bl	80089b8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	200002fc 	.word	0x200002fc

08003074 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	2101      	movs	r1, #1
 8003080:	4803      	ldr	r0, [pc, #12]	; (8003090 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8003082:	f005 fc99 	bl	80089b8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	200002fc 	.word	0x200002fc

08003094 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800309e:	2100      	movs	r1, #0
 80030a0:	4804      	ldr	r0, [pc, #16]	; (80030b4 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80030a2:	f005 fca1 	bl	80089e8 <HAL_RTCEx_BKUPRead>
 80030a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80030a8:	687b      	ldr	r3, [r7, #4]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	200002fc 	.word	0x200002fc

080030b8 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80030c2:	2101      	movs	r1, #1
 80030c4:	4804      	ldr	r0, [pc, #16]	; (80030d8 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80030c6:	f005 fc8f 	bl	80089e8 <HAL_RTCEx_BKUPRead>
 80030ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80030cc:	687b      	ldr	r3, [r7, #4]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	200002fc 	.word	0x200002fc

080030dc <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	2102      	movs	r1, #2
 80030e8:	4803      	ldr	r0, [pc, #12]	; (80030f8 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80030ea:	f005 fc65 	bl	80089b8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	200002fc 	.word	0x200002fc

080030fc <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8003102:	2102      	movs	r1, #2
 8003104:	4804      	ldr	r0, [pc, #16]	; (8003118 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8003106:	f005 fc6f 	bl	80089e8 <HAL_RTCEx_BKUPRead>
 800310a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 800310c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200002fc 	.word	0x200002fc

0800311c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8003122:	480b      	ldr	r0, [pc, #44]	; (8003150 <GetTimerTicks+0x34>)
 8003124:	f7ff fdd8 	bl	8002cd8 <LL_RTC_TIME_GetSubSecond>
 8003128:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800312a:	e003      	b.n	8003134 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800312c:	4808      	ldr	r0, [pc, #32]	; (8003150 <GetTimerTicks+0x34>)
 800312e:	f7ff fdd3 	bl	8002cd8 <LL_RTC_TIME_GetSubSecond>
 8003132:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8003134:	4806      	ldr	r0, [pc, #24]	; (8003150 <GetTimerTicks+0x34>)
 8003136:	f7ff fdcf 	bl	8002cd8 <LL_RTC_TIME_GetSubSecond>
 800313a:	4602      	mov	r2, r0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4293      	cmp	r3, r2
 8003140:	d1f4      	bne.n	800312c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40002800 	.word	0x40002800

08003154 <LL_AHB2_GRP1_EnableClock>:
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800315c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003160:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003162:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4313      	orrs	r3, r2
 800316a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800316c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003170:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4013      	ands	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003178:	68fb      	ldr	r3, [r7, #12]
}
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <LL_APB1_GRP1_EnableClock>:
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003190:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4313      	orrs	r3, r2
 800319a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800319c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4013      	ands	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031a8:	68fb      	ldr	r3, [r7, #12]
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <LL_APB1_GRP1_DisableClock>:
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80031bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ca:	4013      	ands	r3, r2
 80031cc:	658b      	str	r3, [r1, #88]	; 0x58
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <LL_APB2_GRP1_EnableClock>:
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80031e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80031f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4013      	ands	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031fc:	68fb      	ldr	r3, [r7, #12]
}
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <LL_APB2_GRP1_DisableClock>:
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003214:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	43db      	mvns	r3, r3
 800321a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800321e:	4013      	ands	r3, r2
 8003220:	660b      	str	r3, [r1, #96]	; 0x60
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <LL_SYSCFG_EnableFastModePlus>:
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <LL_SYSCFG_EnableFastModePlus+0x20>)
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	4904      	ldr	r1, [pc, #16]	; (800324c <LL_SYSCFG_EnableFastModePlus+0x20>)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40010000 	.word	0x40010000

08003250 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003254:	4b26      	ldr	r3, [pc, #152]	; (80032f0 <MX_USART1_UART_Init+0xa0>)
 8003256:	4a27      	ldr	r2, [pc, #156]	; (80032f4 <MX_USART1_UART_Init+0xa4>)
 8003258:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800325a:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <MX_USART1_UART_Init+0xa0>)
 800325c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003260:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003262:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <MX_USART1_UART_Init+0xa0>)
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003268:	4b21      	ldr	r3, [pc, #132]	; (80032f0 <MX_USART1_UART_Init+0xa0>)
 800326a:	2200      	movs	r2, #0
 800326c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <MX_USART1_UART_Init+0xa0>)
 8003270:	2200      	movs	r2, #0
 8003272:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003274:	4b1e      	ldr	r3, [pc, #120]	; (80032f0 <MX_USART1_UART_Init+0xa0>)
 8003276:	220c      	movs	r2, #12
 8003278:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800327a:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <MX_USART1_UART_Init+0xa0>)
 800327c:	2200      	movs	r2, #0
 800327e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003280:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <MX_USART1_UART_Init+0xa0>)
 8003282:	2200      	movs	r2, #0
 8003284:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003286:	4b1a      	ldr	r3, [pc, #104]	; (80032f0 <MX_USART1_UART_Init+0xa0>)
 8003288:	2200      	movs	r2, #0
 800328a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800328c:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <MX_USART1_UART_Init+0xa0>)
 800328e:	2200      	movs	r2, #0
 8003290:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8003292:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <MX_USART1_UART_Init+0xa0>)
 8003294:	2240      	movs	r2, #64	; 0x40
 8003296:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8003298:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <MX_USART1_UART_Init+0xa0>)
 800329a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800329e:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 80032a0:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <MX_USART1_UART_Init+0xa0>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032a6:	4812      	ldr	r0, [pc, #72]	; (80032f0 <MX_USART1_UART_Init+0xa0>)
 80032a8:	f007 fbd4 	bl	800aa54 <HAL_UART_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 80032b2:	f7fe ff3d 	bl	8002130 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032b6:	2100      	movs	r1, #0
 80032b8:	480d      	ldr	r0, [pc, #52]	; (80032f0 <MX_USART1_UART_Init+0xa0>)
 80032ba:	f009 fc82 	bl	800cbc2 <HAL_UARTEx_SetTxFifoThreshold>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 80032c4:	f7fe ff34 	bl	8002130 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032c8:	2100      	movs	r1, #0
 80032ca:	4809      	ldr	r0, [pc, #36]	; (80032f0 <MX_USART1_UART_Init+0xa0>)
 80032cc:	f009 fcb7 	bl	800cc3e <HAL_UARTEx_SetRxFifoThreshold>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80032d6:	f7fe ff2b 	bl	8002130 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80032da:	4805      	ldr	r0, [pc, #20]	; (80032f0 <MX_USART1_UART_Init+0xa0>)
 80032dc:	f009 fbfe 	bl	800cadc <HAL_UARTEx_EnableFifoMode>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 80032e6:	f7fe ff23 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000450 	.word	0x20000450
 80032f4:	40013800 	.word	0x40013800

080032f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032fc:	4b23      	ldr	r3, [pc, #140]	; (800338c <MX_USART2_UART_Init+0x94>)
 80032fe:	4a24      	ldr	r2, [pc, #144]	; (8003390 <MX_USART2_UART_Init+0x98>)
 8003300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003302:	4b22      	ldr	r3, [pc, #136]	; (800338c <MX_USART2_UART_Init+0x94>)
 8003304:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800330a:	4b20      	ldr	r3, [pc, #128]	; (800338c <MX_USART2_UART_Init+0x94>)
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003310:	4b1e      	ldr	r3, [pc, #120]	; (800338c <MX_USART2_UART_Init+0x94>)
 8003312:	2200      	movs	r2, #0
 8003314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003316:	4b1d      	ldr	r3, [pc, #116]	; (800338c <MX_USART2_UART_Init+0x94>)
 8003318:	2200      	movs	r2, #0
 800331a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800331c:	4b1b      	ldr	r3, [pc, #108]	; (800338c <MX_USART2_UART_Init+0x94>)
 800331e:	220c      	movs	r2, #12
 8003320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003322:	4b1a      	ldr	r3, [pc, #104]	; (800338c <MX_USART2_UART_Init+0x94>)
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8003328:	4b18      	ldr	r3, [pc, #96]	; (800338c <MX_USART2_UART_Init+0x94>)
 800332a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800332e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003330:	4b16      	ldr	r3, [pc, #88]	; (800338c <MX_USART2_UART_Init+0x94>)
 8003332:	2200      	movs	r2, #0
 8003334:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <MX_USART2_UART_Init+0x94>)
 8003338:	2200      	movs	r2, #0
 800333a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800333c:	4b13      	ldr	r3, [pc, #76]	; (800338c <MX_USART2_UART_Init+0x94>)
 800333e:	2200      	movs	r2, #0
 8003340:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003342:	4812      	ldr	r0, [pc, #72]	; (800338c <MX_USART2_UART_Init+0x94>)
 8003344:	f007 fb86 	bl	800aa54 <HAL_UART_Init>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800334e:	f7fe feef 	bl	8002130 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003352:	2100      	movs	r1, #0
 8003354:	480d      	ldr	r0, [pc, #52]	; (800338c <MX_USART2_UART_Init+0x94>)
 8003356:	f009 fc34 	bl	800cbc2 <HAL_UARTEx_SetTxFifoThreshold>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8003360:	f7fe fee6 	bl	8002130 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003364:	2100      	movs	r1, #0
 8003366:	4809      	ldr	r0, [pc, #36]	; (800338c <MX_USART2_UART_Init+0x94>)
 8003368:	f009 fc69 	bl	800cc3e <HAL_UARTEx_SetRxFifoThreshold>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8003372:	f7fe fedd 	bl	8002130 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003376:	4805      	ldr	r0, [pc, #20]	; (800338c <MX_USART2_UART_Init+0x94>)
 8003378:	f009 fbeb 	bl	800cb52 <HAL_UARTEx_DisableFifoMode>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8003382:	f7fe fed5 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	200004e0 	.word	0x200004e0
 8003390:	40004400 	.word	0x40004400

08003394 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b09a      	sub	sp, #104	; 0x68
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 80033ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033ba:	f107 030c 	add.w	r3, r7, #12
 80033be:	2238      	movs	r2, #56	; 0x38
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f01a fffa 	bl	801e3bc <memset>
  if(uartHandle->Instance==USART1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a6f      	ldr	r2, [pc, #444]	; (800358c <HAL_UART_MspInit+0x1f8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	f040 80a3 	bne.w	800351a <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80033d4:	2301      	movs	r3, #1
 80033d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80033d8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80033dc:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033de:	f107 030c 	add.w	r3, r7, #12
 80033e2:	4618      	mov	r0, r3
 80033e4:	f004 fe78 	bl	80080d8 <HAL_RCCEx_PeriphCLKConfig>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 80033ee:	f7fe fe9f 	bl	8002130 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80033f6:	f7ff feef 	bl	80031d8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fa:	2002      	movs	r0, #2
 80033fc:	f7ff feaa 	bl	8003154 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8003400:	23c0      	movs	r3, #192	; 0xc0
 8003402:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003404:	2302      	movs	r3, #2
 8003406:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003408:	2301      	movs	r3, #1
 800340a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800340c:	2301      	movs	r3, #1
 800340e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003410:	2307      	movs	r3, #7
 8003412:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003414:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003418:	4619      	mov	r1, r3
 800341a:	485d      	ldr	r0, [pc, #372]	; (8003590 <HAL_UART_MspInit+0x1fc>)
 800341c:	f002 fbee 	bl	8005bfc <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8003420:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003424:	f7ff ff02 	bl	800322c <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8003428:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800342c:	f7ff fefe 	bl	800322c <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8003430:	4b58      	ldr	r3, [pc, #352]	; (8003594 <HAL_UART_MspInit+0x200>)
 8003432:	4a59      	ldr	r2, [pc, #356]	; (8003598 <HAL_UART_MspInit+0x204>)
 8003434:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003436:	4b57      	ldr	r3, [pc, #348]	; (8003594 <HAL_UART_MspInit+0x200>)
 8003438:	2212      	movs	r2, #18
 800343a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800343c:	4b55      	ldr	r3, [pc, #340]	; (8003594 <HAL_UART_MspInit+0x200>)
 800343e:	2210      	movs	r2, #16
 8003440:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003442:	4b54      	ldr	r3, [pc, #336]	; (8003594 <HAL_UART_MspInit+0x200>)
 8003444:	2200      	movs	r2, #0
 8003446:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003448:	4b52      	ldr	r3, [pc, #328]	; (8003594 <HAL_UART_MspInit+0x200>)
 800344a:	2280      	movs	r2, #128	; 0x80
 800344c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800344e:	4b51      	ldr	r3, [pc, #324]	; (8003594 <HAL_UART_MspInit+0x200>)
 8003450:	2200      	movs	r2, #0
 8003452:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003454:	4b4f      	ldr	r3, [pc, #316]	; (8003594 <HAL_UART_MspInit+0x200>)
 8003456:	2200      	movs	r2, #0
 8003458:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800345a:	4b4e      	ldr	r3, [pc, #312]	; (8003594 <HAL_UART_MspInit+0x200>)
 800345c:	2200      	movs	r2, #0
 800345e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003460:	4b4c      	ldr	r3, [pc, #304]	; (8003594 <HAL_UART_MspInit+0x200>)
 8003462:	2200      	movs	r2, #0
 8003464:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003466:	484b      	ldr	r0, [pc, #300]	; (8003594 <HAL_UART_MspInit+0x200>)
 8003468:	f001 fcea 	bl	8004e40 <HAL_DMA_Init>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8003472:	f7fe fe5d 	bl	8002130 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a46      	ldr	r2, [pc, #280]	; (8003594 <HAL_UART_MspInit+0x200>)
 800347a:	679a      	str	r2, [r3, #120]	; 0x78
 800347c:	4a45      	ldr	r2, [pc, #276]	; (8003594 <HAL_UART_MspInit+0x200>)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8003482:	4b46      	ldr	r3, [pc, #280]	; (800359c <HAL_UART_MspInit+0x208>)
 8003484:	4a46      	ldr	r2, [pc, #280]	; (80035a0 <HAL_UART_MspInit+0x20c>)
 8003486:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003488:	4b44      	ldr	r3, [pc, #272]	; (800359c <HAL_UART_MspInit+0x208>)
 800348a:	2211      	movs	r2, #17
 800348c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800348e:	4b43      	ldr	r3, [pc, #268]	; (800359c <HAL_UART_MspInit+0x208>)
 8003490:	2200      	movs	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003494:	4b41      	ldr	r3, [pc, #260]	; (800359c <HAL_UART_MspInit+0x208>)
 8003496:	2200      	movs	r2, #0
 8003498:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800349a:	4b40      	ldr	r3, [pc, #256]	; (800359c <HAL_UART_MspInit+0x208>)
 800349c:	2280      	movs	r2, #128	; 0x80
 800349e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034a0:	4b3e      	ldr	r3, [pc, #248]	; (800359c <HAL_UART_MspInit+0x208>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034a6:	4b3d      	ldr	r3, [pc, #244]	; (800359c <HAL_UART_MspInit+0x208>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80034ac:	4b3b      	ldr	r3, [pc, #236]	; (800359c <HAL_UART_MspInit+0x208>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034b2:	4b3a      	ldr	r3, [pc, #232]	; (800359c <HAL_UART_MspInit+0x208>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80034b8:	4838      	ldr	r0, [pc, #224]	; (800359c <HAL_UART_MspInit+0x208>)
 80034ba:	f001 fcc1 	bl	8004e40 <HAL_DMA_Init>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 80034c4:	f7fe fe34 	bl	8002130 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80034cc:	2300      	movs	r3, #0
 80034ce:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 80034dc:	2301      	movs	r3, #1
 80034de:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 80034e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80034e4:	4619      	mov	r1, r3
 80034e6:	482d      	ldr	r0, [pc, #180]	; (800359c <HAL_UART_MspInit+0x208>)
 80034e8:	f002 f894 	bl	8005614 <HAL_DMAEx_ConfigMuxSync>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80034f2:	f7fe fe1d 	bl	8002130 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a28      	ldr	r2, [pc, #160]	; (800359c <HAL_UART_MspInit+0x208>)
 80034fa:	67da      	str	r2, [r3, #124]	; 0x7c
 80034fc:	4a27      	ldr	r2, [pc, #156]	; (800359c <HAL_UART_MspInit+0x208>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003502:	2200      	movs	r2, #0
 8003504:	2102      	movs	r1, #2
 8003506:	2024      	movs	r0, #36	; 0x24
 8003508:	f001 fc63 	bl	8004dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800350c:	2024      	movs	r0, #36	; 0x24
 800350e:	f001 fc7a 	bl	8004e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003512:	200c      	movs	r0, #12
 8003514:	f001 fc77 	bl	8004e06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003518:	e033      	b.n	8003582 <HAL_UART_MspInit+0x1ee>
  else if(uartHandle->Instance==USART2)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a21      	ldr	r2, [pc, #132]	; (80035a4 <HAL_UART_MspInit+0x210>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d12e      	bne.n	8003582 <HAL_UART_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003524:	2302      	movs	r3, #2
 8003526:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003528:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800352c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800352e:	f107 030c 	add.w	r3, r7, #12
 8003532:	4618      	mov	r0, r3
 8003534:	f004 fdd0 	bl	80080d8 <HAL_RCCEx_PeriphCLKConfig>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 800353e:	f7fe fdf7 	bl	8002130 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003542:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003546:	f7ff fe1d 	bl	8003184 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800354a:	2001      	movs	r0, #1
 800354c:	f7ff fe02 	bl	8003154 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8003550:	230c      	movs	r3, #12
 8003552:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003554:	2302      	movs	r3, #2
 8003556:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003558:	2301      	movs	r3, #1
 800355a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800355c:	2301      	movs	r3, #1
 800355e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003560:	2307      	movs	r3, #7
 8003562:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003564:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003568:	4619      	mov	r1, r3
 800356a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800356e:	f002 fb45 	bl	8005bfc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003572:	2200      	movs	r2, #0
 8003574:	2100      	movs	r1, #0
 8003576:	2025      	movs	r0, #37	; 0x25
 8003578:	f001 fc2b 	bl	8004dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800357c:	2025      	movs	r0, #37	; 0x25
 800357e:	f001 fc42 	bl	8004e06 <HAL_NVIC_EnableIRQ>
}
 8003582:	bf00      	nop
 8003584:	3768      	adds	r7, #104	; 0x68
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40013800 	.word	0x40013800
 8003590:	48000400 	.word	0x48000400
 8003594:	20000570 	.word	0x20000570
 8003598:	40020008 	.word	0x40020008
 800359c:	200005d0 	.word	0x200005d0
 80035a0:	4002001c 	.word	0x4002001c
 80035a4:	40004400 	.word	0x40004400

080035a8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a16      	ldr	r2, [pc, #88]	; (8003610 <HAL_UART_MspDeInit+0x68>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d115      	bne.n	80035e6 <HAL_UART_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80035ba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035be:	f7ff fe23 	bl	8003208 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 80035c2:	21c0      	movs	r1, #192	; 0xc0
 80035c4:	4813      	ldr	r0, [pc, #76]	; (8003614 <HAL_UART_MspDeInit+0x6c>)
 80035c6:	f002 fc79 	bl	8005ebc <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ce:	4618      	mov	r0, r3
 80035d0:	f001 fcde 	bl	8004f90 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d8:	4618      	mov	r0, r3
 80035da:	f001 fcd9 	bl	8004f90 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80035de:	2024      	movs	r0, #36	; 0x24
 80035e0:	f001 fc1f 	bl	8004e22 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80035e4:	e010      	b.n	8003608 <HAL_UART_MspDeInit+0x60>
  else if(uartHandle->Instance==USART2)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a0b      	ldr	r2, [pc, #44]	; (8003618 <HAL_UART_MspDeInit+0x70>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d10b      	bne.n	8003608 <HAL_UART_MspDeInit+0x60>
    __HAL_RCC_USART2_CLK_DISABLE();
 80035f0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80035f4:	f7ff fdde 	bl	80031b4 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 80035f8:	210c      	movs	r1, #12
 80035fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035fe:	f002 fc5d 	bl	8005ebc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003602:	2025      	movs	r0, #37	; 0x25
 8003604:	f001 fc0d 	bl	8004e22 <HAL_NVIC_DisableIRQ>
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40013800 	.word	0x40013800
 8003614:	48000400 	.word	0x48000400
 8003618:	40004400 	.word	0x40004400

0800361c <LL_APB2_GRP1_ForceReset>:
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800362a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4313      	orrs	r3, r2
 8003632:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr

0800363e <LL_APB2_GRP1_ReleaseReset>:
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8003646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	43db      	mvns	r3, r3
 8003650:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003654:	4013      	ands	r3, r2
 8003656:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr
	...

08003664 <LL_EXTI_EnableIT_0_31>:
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <LL_EXTI_EnableIT_0_31+0x24>)
 800366e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003672:	4905      	ldr	r1, [pc, #20]	; (8003688 <LL_EXTI_EnableIT_0_31+0x24>)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	58000800 	.word	0x58000800

0800368c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003694:	4a07      	ldr	r2, [pc, #28]	; (80036b4 <vcom_Init+0x28>)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800369a:	f7fe f875 	bl	8001788 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800369e:	f7ff fdd7 	bl	8003250 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80036a2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80036a6:	f7ff ffdd 	bl	8003664 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80036aa:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000634 	.word	0x20000634

080036b8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80036bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80036c0:	f7ff ffac 	bl	800361c <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80036c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80036c8:	f7ff ffb9 	bl	800363e <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80036cc:	4804      	ldr	r0, [pc, #16]	; (80036e0 <vcom_DeInit+0x28>)
 80036ce:	f7ff ff6b 	bl	80035a8 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80036d2:	200f      	movs	r0, #15
 80036d4:	f001 fba5 	bl	8004e22 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80036d8:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80036da:	4618      	mov	r0, r3
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20000450 	.word	0x20000450

080036e4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	461a      	mov	r2, r3
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4804      	ldr	r0, [pc, #16]	; (8003708 <vcom_Trace_DMA+0x24>)
 80036f8:	f007 fa52 	bl	800aba0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80036fc:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000450 	.word	0x20000450

0800370c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003714:	4a19      	ldr	r2, [pc, #100]	; (800377c <vcom_ReceiveInit+0x70>)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800371a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800371e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003720:	f107 0308 	add.w	r3, r7, #8
 8003724:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003728:	4815      	ldr	r0, [pc, #84]	; (8003780 <vcom_ReceiveInit+0x74>)
 800372a:	f009 f94a 	bl	800c9c2 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800372e:	bf00      	nop
 8003730:	4b13      	ldr	r3, [pc, #76]	; (8003780 <vcom_ReceiveInit+0x74>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373e:	d0f7      	beq.n	8003730 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8003740:	bf00      	nop
 8003742:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <vcom_ReceiveInit+0x74>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003750:	d1f7      	bne.n	8003742 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <vcom_ReceiveInit+0x74>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <vcom_ReceiveInit+0x74>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003760:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8003762:	4807      	ldr	r0, [pc, #28]	; (8003780 <vcom_ReceiveInit+0x74>)
 8003764:	f009 f988 	bl	800ca78 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003768:	2201      	movs	r2, #1
 800376a:	4906      	ldr	r1, [pc, #24]	; (8003784 <vcom_ReceiveInit+0x78>)
 800376c:	4804      	ldr	r0, [pc, #16]	; (8003780 <vcom_ReceiveInit+0x74>)
 800376e:	f007 f9c1 	bl	800aaf4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8003772:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20000638 	.word	0x20000638
 8003780:	20000450 	.word	0x20000450
 8003784:	20000630 	.word	0x20000630

08003788 <vcom_Resume>:

void vcom_Resume(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800378c:	4808      	ldr	r0, [pc, #32]	; (80037b0 <vcom_Resume+0x28>)
 800378e:	f007 f961 	bl	800aa54 <HAL_UART_Init>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <vcom_Resume+0x14>
  {
    Error_Handler();
 8003798:	f7fe fcca 	bl	8002130 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800379c:	4805      	ldr	r0, [pc, #20]	; (80037b4 <vcom_Resume+0x2c>)
 800379e:	f001 fb4f 	bl	8004e40 <HAL_DMA_Init>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <vcom_Resume+0x24>
  {
    Error_Handler();
 80037a8:	f7fe fcc2 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80037ac:	bf00      	nop
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000450 	.word	0x20000450
 80037b4:	20000570 	.word	0x20000570

080037b8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a05      	ldr	r2, [pc, #20]	; (80037dc <HAL_UART_TxCpltCallback+0x24>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d103      	bne.n	80037d2 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_UART_TxCpltCallback+0x28>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2000      	movs	r0, #0
 80037d0:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40013800 	.word	0x40013800
 80037e0:	20000634 	.word	0x20000634

080037e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a13      	ldr	r2, [pc, #76]	; (8003840 <HAL_UART_RxCpltCallback+0x5c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d113      	bne.n	800381e <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80037f6:	4b13      	ldr	r3, [pc, #76]	; (8003844 <HAL_UART_RxCpltCallback+0x60>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_UART_RxCpltCallback+0x30>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003804:	2b00      	cmp	r3, #0
 8003806:	d105      	bne.n	8003814 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003808:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <HAL_UART_RxCpltCallback+0x60>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2200      	movs	r2, #0
 800380e:	2101      	movs	r1, #1
 8003810:	480d      	ldr	r0, [pc, #52]	; (8003848 <HAL_UART_RxCpltCallback+0x64>)
 8003812:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8003814:	2201      	movs	r2, #1
 8003816:	490c      	ldr	r1, [pc, #48]	; (8003848 <HAL_UART_RxCpltCallback+0x64>)
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f007 f96b 	bl	800aaf4 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a0a      	ldr	r2, [pc, #40]	; (800384c <HAL_UART_RxCpltCallback+0x68>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d106      	bne.n	8003836 <HAL_UART_RxCpltCallback+0x52>
    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
 8003828:	4b09      	ldr	r3, [pc, #36]	; (8003850 <HAL_UART_RxCpltCallback+0x6c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2210      	movs	r2, #16
 800382e:	621a      	str	r2, [r3, #32]
    	  UART2_SET = 1;
 8003830:	4b08      	ldr	r3, [pc, #32]	; (8003854 <HAL_UART_RxCpltCallback+0x70>)
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40013800 	.word	0x40013800
 8003844:	20000638 	.word	0x20000638
 8003848:	20000630 	.word	0x20000630
 800384c:	40004400 	.word	0x40004400
 8003850:	200004e0 	.word	0x200004e0
 8003854:	20000010 	.word	0x20000010

08003858 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003858:	480d      	ldr	r0, [pc, #52]	; (8003890 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800385a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800385c:	f7ff f987 	bl	8002b6e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003860:	480c      	ldr	r0, [pc, #48]	; (8003894 <LoopForever+0x6>)
  ldr r1, =_edata
 8003862:	490d      	ldr	r1, [pc, #52]	; (8003898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003864:	4a0d      	ldr	r2, [pc, #52]	; (800389c <LoopForever+0xe>)
  movs r3, #0
 8003866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003868:	e002      	b.n	8003870 <LoopCopyDataInit>

0800386a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800386a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800386c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800386e:	3304      	adds	r3, #4

08003870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003874:	d3f9      	bcc.n	800386a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003876:	4a0a      	ldr	r2, [pc, #40]	; (80038a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003878:	4c0a      	ldr	r4, [pc, #40]	; (80038a4 <LoopForever+0x16>)
  movs r3, #0
 800387a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800387c:	e001      	b.n	8003882 <LoopFillZerobss>

0800387e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800387e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003880:	3204      	adds	r2, #4

08003882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003884:	d3fb      	bcc.n	800387e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003886:	f01a fda1 	bl	801e3cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800388a:	f7fe faad 	bl	8001de8 <main>

0800388e <LoopForever>:

LoopForever:
    b LoopForever
 800388e:	e7fe      	b.n	800388e <LoopForever>
  ldr   r0, =_estack
 8003890:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003898:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 800389c:	0801f590 	.word	0x0801f590
  ldr r2, =_sbss
 80038a0:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 80038a4:	20002774 	.word	0x20002774

080038a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038a8:	e7fe      	b.n	80038a8 <ADC_IRQHandler>

080038aa <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b086      	sub	sp, #24
 80038ae:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80038b0:	1d3b      	adds	r3, r7, #4
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	605a      	str	r2, [r3, #4]
 80038b8:	609a      	str	r2, [r3, #8]
 80038ba:	60da      	str	r2, [r3, #12]
 80038bc:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80038be:	2310      	movs	r3, #16
 80038c0:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80038c2:	2301      	movs	r3, #1
 80038c4:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ca:	2303      	movs	r3, #3
 80038cc:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80038ce:	1d3b      	adds	r3, r7, #4
 80038d0:	4619      	mov	r1, r3
 80038d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038d6:	f002 f991 	bl	8005bfc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80038da:	2320      	movs	r3, #32
 80038dc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80038de:	1d3b      	adds	r3, r7, #4
 80038e0:	4619      	mov	r1, r3
 80038e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038e6:	f002 f989 	bl	8005bfc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80038ea:	2200      	movs	r2, #0
 80038ec:	2120      	movs	r1, #32
 80038ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038f2:	f002 fbb1 	bl	8006058 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80038f6:	2200      	movs	r2, #0
 80038f8:	2110      	movs	r1, #16
 80038fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038fe:	f002 fbab 	bl	8006058 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d83f      	bhi.n	800399c <BSP_RADIO_ConfigRFSwitch+0x90>
 800391c:	a201      	add	r2, pc, #4	; (adr r2, 8003924 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800391e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003922:	bf00      	nop
 8003924:	08003935 	.word	0x08003935
 8003928:	0800394f 	.word	0x0800394f
 800392c:	08003969 	.word	0x08003969
 8003930:	08003983 	.word	0x08003983
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003934:	2200      	movs	r2, #0
 8003936:	2110      	movs	r1, #16
 8003938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800393c:	f002 fb8c 	bl	8006058 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003940:	2200      	movs	r2, #0
 8003942:	2120      	movs	r1, #32
 8003944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003948:	f002 fb86 	bl	8006058 <HAL_GPIO_WritePin>
      break;      
 800394c:	e027      	b.n	800399e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800394e:	2201      	movs	r2, #1
 8003950:	2110      	movs	r1, #16
 8003952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003956:	f002 fb7f 	bl	8006058 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800395a:	2200      	movs	r2, #0
 800395c:	2120      	movs	r1, #32
 800395e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003962:	f002 fb79 	bl	8006058 <HAL_GPIO_WritePin>
      break;
 8003966:	e01a      	b.n	800399e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003968:	2201      	movs	r2, #1
 800396a:	2110      	movs	r1, #16
 800396c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003970:	f002 fb72 	bl	8006058 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003974:	2201      	movs	r2, #1
 8003976:	2120      	movs	r1, #32
 8003978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800397c:	f002 fb6c 	bl	8006058 <HAL_GPIO_WritePin>
      break;
 8003980:	e00d      	b.n	800399e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003982:	2200      	movs	r2, #0
 8003984:	2110      	movs	r1, #16
 8003986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800398a:	f002 fb65 	bl	8006058 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800398e:	2201      	movs	r2, #1
 8003990:	2120      	movs	r1, #32
 8003992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003996:	f002 fb5f 	bl	8006058 <HAL_GPIO_WritePin>
      break;
 800399a:	e000      	b.n	800399e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 800399c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80039ac:	2302      	movs	r3, #2
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80039b6:	b480      	push	{r7}
 80039b8:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80039ba:	2301      	movs	r3, #1
}
 80039bc:	4618      	mov	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80039c8:	2301      	movs	r3, #1
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	4603      	mov	r3, r0
 80039da:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d102      	bne.n	80039e8 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80039e2:	230f      	movs	r3, #15
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	e001      	b.n	80039ec <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80039e8:	2316      	movs	r3, #22
 80039ea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80039ec:	68fb      	ldr	r3, [r7, #12]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <LL_DBGMCU_EnableDBGSleepMode>:
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80039fc:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	4a03      	ldr	r2, [pc, #12]	; (8003a10 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	6053      	str	r3, [r2, #4]
}
 8003a08:	bf00      	nop
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	e0042000 	.word	0xe0042000

08003a14 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003a18:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	4a03      	ldr	r2, [pc, #12]	; (8003a2c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003a1e:	f043 0302 	orr.w	r3, r3, #2
 8003a22:	6053      	str	r3, [r2, #4]
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr
 8003a2c:	e0042000 	.word	0xe0042000

08003a30 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4a03      	ldr	r2, [pc, #12]	; (8003a48 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003a3a:	f043 0304 	orr.w	r3, r3, #4
 8003a3e:	6053      	str	r3, [r2, #4]
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr
 8003a48:	e0042000 	.word	0xe0042000

08003a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a56:	2003      	movs	r0, #3
 8003a58:	f001 f9b0 	bl	8004dbc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003a5c:	f004 f95e 	bl	8007d1c <HAL_RCC_GetHCLKFreq>
 8003a60:	4603      	mov	r3, r0
 8003a62:	4a09      	ldr	r2, [pc, #36]	; (8003a88 <HAL_Init+0x3c>)
 8003a64:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a66:	200f      	movs	r0, #15
 8003a68:	f7ff f800 	bl	8002a6c <HAL_InitTick>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	71fb      	strb	r3, [r7, #7]
 8003a76:	e001      	b.n	8003a7c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a78:	f7fe fd93 	bl	80025a2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	2000000c 	.word	0x2000000c

08003a8c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <HAL_SuspendTick+0x18>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a03      	ldr	r2, [pc, #12]	; (8003aa4 <HAL_SuspendTick+0x18>)
 8003a96:	f023 0302 	bic.w	r3, r3, #2
 8003a9a:	6013      	str	r3, [r2, #0]
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	e000e010 	.word	0xe000e010

08003aa8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003aac:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <HAL_ResumeTick+0x18>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a03      	ldr	r2, [pc, #12]	; (8003ac0 <HAL_ResumeTick+0x18>)
 8003ab2:	f043 0302 	orr.w	r3, r3, #2
 8003ab6:	6013      	str	r3, [r2, #0]
}
 8003ab8:	bf00      	nop
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr
 8003ac0:	e000e010 	.word	0xe000e010

08003ac4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003ac8:	4b02      	ldr	r3, [pc, #8]	; (8003ad4 <HAL_GetUIDw0+0x10>)
 8003aca:	681b      	ldr	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr
 8003ad4:	1fff7590 	.word	0x1fff7590

08003ad8 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003adc:	4b02      	ldr	r3, [pc, #8]	; (8003ae8 <HAL_GetUIDw1+0x10>)
 8003ade:	681b      	ldr	r3, [r3, #0]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	1fff7594 	.word	0x1fff7594

08003aec <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003af0:	4b02      	ldr	r3, [pc, #8]	; (8003afc <HAL_GetUIDw2+0x10>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	1fff7598 	.word	0x1fff7598

08003b00 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003b04:	f7ff ff78 	bl	80039f8 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003b08:	bf00      	nop
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003b10:	f7ff ff80 	bl	8003a14 <LL_DBGMCU_EnableDBGStopMode>
}
 8003b14:	bf00      	nop
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003b1c:	f7ff ff88 	bl	8003a30 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003b20:	bf00      	nop
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	601a      	str	r2, [r3, #0]
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr

08003b48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr

08003b62 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2107      	movs	r1, #7
 8003b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	401a      	ands	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr

08003b9e <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2107      	movs	r1, #7
 8003bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb8:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr

08003bf2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	210f      	movs	r1, #15
 8003c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	401a      	ands	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	0e9b      	lsrs	r3, r3, #26
 8003c16:	f003 010f 	and.w	r1, r3, #15
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f003 031f 	and.w	r3, r3, #31
 8003c20:	fa01 f303 	lsl.w	r3, r1, r3
 8003c24:	431a      	orrs	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	401a      	ands	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr

08003c7e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	43db      	mvns	r3, r3
 8003c94:	401a      	ands	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	0219      	lsls	r1, r3, #8
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	400b      	ands	r3, r1
 8003c9e:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003ca2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr

08003cb6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003cc6:	f023 0317 	bic.w	r3, r3, #23
 8003cca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003cec:	f023 0317 	bic.w	r3, r3, #23
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6093      	str	r3, [r2, #8]
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr

08003cfe <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d12:	d101      	bne.n	8003d18 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr

08003d24 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d34:	f023 0317 	bic.w	r3, r3, #23
 8003d38:	f043 0201 	orr.w	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr

08003d4a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d5a:	f023 0317 	bic.w	r3, r3, #23
 8003d5e:	f043 0202 	orr.w	r2, r3, #2
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr

08003d70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <LL_ADC_IsEnabled+0x18>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <LL_ADC_IsEnabled+0x1a>
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr

08003d94 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d101      	bne.n	8003dac <LL_ADC_IsDisableOngoing+0x18>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <LL_ADC_IsDisableOngoing+0x1a>
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr

08003db8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dc8:	f023 0317 	bic.w	r3, r3, #23
 8003dcc:	f043 0204 	orr.w	r2, r3, #4
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc80      	pop	{r7}
 8003ddc:	4770      	bx	lr

08003dde <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dee:	f023 0317 	bic.w	r3, r3, #23
 8003df2:	f043 0210 	orr.w	r2, r3, #16
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d101      	bne.n	8003e1c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr

08003e28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e19e      	b.n	8004188 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d109      	bne.n	8003e6c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7fd fbcd 	bl	80015f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff ff44 	bl	8003cfe <LL_ADC_IsInternalRegulatorEnabled>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d115      	bne.n	8003ea8 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff ff18 	bl	8003cb6 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e86:	4b99      	ldr	r3, [pc, #612]	; (80040ec <HAL_ADC_Init+0x2c4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	099b      	lsrs	r3, r3, #6
 8003e8c:	4a98      	ldr	r2, [pc, #608]	; (80040f0 <HAL_ADC_Init+0x2c8>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	099b      	lsrs	r3, r3, #6
 8003e94:	3301      	adds	r3, #1
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e9a:	e002      	b.n	8003ea2 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f9      	bne.n	8003e9c <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff ff26 	bl	8003cfe <LL_ADC_IsInternalRegulatorEnabled>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10d      	bne.n	8003ed4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebc:	f043 0210 	orr.w	r2, r3, #16
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec8:	f043 0201 	orr.w	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff ff93 	bl	8003e04 <LL_ADC_REG_IsConversionOngoing>
 8003ede:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f040 8144 	bne.w	8004176 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f040 8140 	bne.w	8004176 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003efe:	f043 0202 	orr.w	r2, r3, #2
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff ff30 	bl	8003d70 <LL_ADC_IsEnabled>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f040 80a7 	bne.w	8004066 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	7e1b      	ldrb	r3, [r3, #24]
 8003f20:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f22:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	7e5b      	ldrb	r3, [r3, #25]
 8003f28:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f2a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	7e9b      	ldrb	r3, [r3, #26]
 8003f30:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f32:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f38:	2a00      	cmp	r2, #0
 8003f3a:	d002      	beq.n	8003f42 <HAL_ADC_Init+0x11a>
 8003f3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f40:	e000      	b.n	8003f44 <HAL_ADC_Init+0x11c>
 8003f42:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f44:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f4a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	da04      	bge.n	8003f5e <HAL_ADC_Init+0x136>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f5c:	e001      	b.n	8003f62 <HAL_ADC_Init+0x13a>
 8003f5e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003f62:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f6a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f6c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d114      	bne.n	8003fa8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	7e9b      	ldrb	r3, [r3, #26]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d104      	bne.n	8003f90 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8c:	61bb      	str	r3, [r7, #24]
 8003f8e:	e00b      	b.n	8003fa8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f94:	f043 0220 	orr.w	r2, r3, #32
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa0:	f043 0201 	orr.w	r2, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d009      	beq.n	8003fc4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003fce:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6812      	ldr	r2, [r2, #0]
 8003fd6:	69b9      	ldr	r1, [r7, #24]
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d111      	bne.n	800401e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004006:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800400c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004012:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	4b33      	ldr	r3, [pc, #204]	; (80040f4 <HAL_ADC_Init+0x2cc>)
 8004026:	4013      	ands	r3, r2
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	6979      	ldr	r1, [r7, #20]
 800402e:	430b      	orrs	r3, r1
 8004030:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800403a:	d014      	beq.n	8004066 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004044:	d00f      	beq.n	8004066 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800404a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800404e:	d00a      	beq.n	8004066 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8004050:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <HAL_ADC_Init+0x2d0>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004060:	4925      	ldr	r1, [pc, #148]	; (80040f8 <HAL_ADC_Init+0x2d0>)
 8004062:	4313      	orrs	r3, r2
 8004064:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406e:	461a      	mov	r2, r3
 8004070:	2100      	movs	r1, #0
 8004072:	f7ff fd76 	bl	8003b62 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	461a      	mov	r2, r3
 8004080:	491e      	ldr	r1, [pc, #120]	; (80040fc <HAL_ADC_Init+0x2d4>)
 8004082:	f7ff fd6e 	bl	8003b62 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d108      	bne.n	80040a0 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f062 020f 	orn	r2, r2, #15
 800409c:	629a      	str	r2, [r3, #40]	; 0x28
 800409e:	e042      	b.n	8004126 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040a8:	d13d      	bne.n	8004126 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80040aa:	2300      	movs	r3, #0
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	e00c      	b.n	80040ca <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	2b0f      	cmp	r3, #15
 80040c2:	d006      	beq.n	80040d2 <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	3301      	adds	r3, #1
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b07      	cmp	r3, #7
 80040ce:	d9ef      	bls.n	80040b0 <HAL_ADC_Init+0x288>
 80040d0:	e000      	b.n	80040d4 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 80040d2:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d112      	bne.n	8004100 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f062 020f 	orn	r2, r2, #15
 80040e8:	629a      	str	r2, [r3, #40]	; 0x28
 80040ea:	e01c      	b.n	8004126 <HAL_ADC_Init+0x2fe>
 80040ec:	2000000c 	.word	0x2000000c
 80040f0:	053e2d63 	.word	0x053e2d63
 80040f4:	1ffffc02 	.word	0x1ffffc02
 80040f8:	40012708 	.word	0x40012708
 80040fc:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	3b01      	subs	r3, #1
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	f003 031c 	and.w	r3, r3, #28
 8004112:	f06f 020f 	mvn.w	r2, #15
 8004116:	fa02 f103 	lsl.w	r1, r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff fd36 	bl	8003b9e <LL_ADC_GetSamplingTimeCommonChannels>
 8004132:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004138:	429a      	cmp	r2, r3
 800413a:	d10b      	bne.n	8004154 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	f043 0201 	orr.w	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004152:	e018      	b.n	8004186 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004158:	f023 0312 	bic.w	r3, r3, #18
 800415c:	f043 0210 	orr.w	r2, r3, #16
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004168:	f043 0201 	orr.w	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004174:	e007      	b.n	8004186 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417a:	f043 0210 	orr.w	r2, r3, #16
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8004186:	7ffb      	ldrb	r3, [r7, #31]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3720      	adds	r7, #32
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e06a      	b.n	8004278 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	f043 0202 	orr.w	r2, r3, #2
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fabe 	bl	8004730 <ADC_ConversionStop>
 80041b4:	4603      	mov	r3, r0
 80041b6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10f      	bne.n	80041de <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fb82 	bl	80048c8 <ADC_Disable>
 80041c4:	4603      	mov	r3, r0
 80041c6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d102      	bne.n	80041d4 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff fd7f 	bl	8003cdc <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80041ec:	f023 0303 	bic.w	r3, r3, #3
 80041f0:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f240 329f 	movw	r2, #927	; 0x39f
 80041fa:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68d9      	ldr	r1, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4b1e      	ldr	r3, [pc, #120]	; (8004280 <HAL_ADC_DeInit+0xf0>)
 8004208:	400b      	ands	r3, r1
 800420a:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800421a:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695a      	ldr	r2, [r3, #20]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0207 	bic.w	r2, r2, #7
 800422a:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6a1a      	ldr	r2, [r3, #32]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800423a:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2200      	movs	r2, #0
 8004248:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800424a:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <HAL_ADC_DeInit+0xf4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a0d      	ldr	r2, [pc, #52]	; (8004284 <HAL_ADC_DeInit+0xf4>)
 8004250:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8004254:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fd f9e2 	bl	8001620 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004276:	7bfb      	ldrb	r3, [r7, #15]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	833e0200 	.word	0x833e0200
 8004284:	40012708 	.word	0x40012708

08004288 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fdb5 	bl	8003e04 <LL_ADC_REG_IsConversionOngoing>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d132      	bne.n	8004306 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_ADC_Start+0x26>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e02e      	b.n	800430c <HAL_ADC_Start+0x84>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fa80 	bl	80047bc <ADC_Enable>
 80042bc:	4603      	mov	r3, r0
 80042be:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d11a      	bne.n	80042fc <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	221c      	movs	r2, #28
 80042e6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fd5f 	bl	8003db8 <LL_ADC_REG_StartConversion>
 80042fa:	e006      	b.n	800430a <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004304:	e001      	b.n	800430a <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004306:	2302      	movs	r3, #2
 8004308:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800430a:	7bfb      	ldrb	r3, [r7, #15]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_ADC_Stop+0x16>
 8004326:	2302      	movs	r3, #2
 8004328:	e022      	b.n	8004370 <HAL_ADC_Stop+0x5c>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f9fc 	bl	8004730 <ADC_ConversionStop>
 8004338:	4603      	mov	r3, r0
 800433a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d111      	bne.n	8004366 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fac0 	bl	80048c8 <ADC_Disable>
 8004348:	4603      	mov	r3, r0
 800434a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	f043 0201 	orr.w	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800436e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	2b08      	cmp	r3, #8
 8004388:	d102      	bne.n	8004390 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800438a:	2308      	movs	r3, #8
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	e010      	b.n	80043b2 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d007      	beq.n	80043ae <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a2:	f043 0220 	orr.w	r2, r3, #32
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e077      	b.n	800449e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80043ae:	2304      	movs	r3, #4
 80043b0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80043b2:	f7fe fb65 	bl	8002a80 <HAL_GetTick>
 80043b6:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80043b8:	e021      	b.n	80043fe <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c0:	d01d      	beq.n	80043fe <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80043c2:	f7fe fb5d 	bl	8002a80 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d302      	bcc.n	80043d8 <HAL_ADC_PollForConversion+0x60>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d112      	bne.n	80043fe <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10b      	bne.n	80043fe <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ea:	f043 0204 	orr.w	r2, r3, #4
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e04f      	b.n	800449e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4013      	ands	r3, r2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0d6      	beq.n	80043ba <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004410:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fbd6 	bl	8003bce <LL_ADC_REG_IsTriggerSourceSWStart>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d031      	beq.n	800448c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	7e9b      	ldrb	r3, [r3, #26]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d12d      	bne.n	800448c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b08      	cmp	r3, #8
 800443c:	d126      	bne.n	800448c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff fcde 	bl	8003e04 <LL_ADC_REG_IsConversionOngoing>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d112      	bne.n	8004474 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 020c 	bic.w	r2, r2, #12
 800445c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004462:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004466:	f023 0301 	bic.w	r3, r3, #1
 800446a:	f043 0201 	orr.w	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	659a      	str	r2, [r3, #88]	; 0x58
 8004472:	e00b      	b.n	800448c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004478:	f043 0220 	orr.w	r2, r3, #32
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004484:	f043 0201 	orr.w	r2, r3, #1
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	7e1b      	ldrb	r3, [r3, #24]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d103      	bne.n	800449c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	220c      	movs	r2, #12
 800449a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr
	...

080044c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x28>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e110      	b.n	800470a <HAL_ADC_ConfigChannel+0x24a>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff fc85 	bl	8003e04 <LL_ADC_REG_IsConversionOngoing>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f040 80f7 	bne.w	80046f0 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b02      	cmp	r3, #2
 8004508:	f000 80b1 	beq.w	800466e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004514:	d004      	beq.n	8004520 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800451a:	4a7e      	ldr	r2, [pc, #504]	; (8004714 <HAL_ADC_ConfigChannel+0x254>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d108      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f7ff fb82 	bl	8003c34 <LL_ADC_REG_SetSequencerChAdd>
 8004530:	e041      	b.n	80045b6 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	210f      	movs	r1, #15
 8004540:	fa01 f303 	lsl.w	r3, r1, r3
 8004544:	43db      	mvns	r3, r3
 8004546:	401a      	ands	r2, r3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004550:	2b00      	cmp	r3, #0
 8004552:	d105      	bne.n	8004560 <HAL_ADC_ConfigChannel+0xa0>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	0e9b      	lsrs	r3, r3, #26
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	e011      	b.n	8004584 <HAL_ADC_ConfigChannel+0xc4>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	fa93 f3a3 	rbit	r3, r3
 800456c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004578:	2320      	movs	r3, #32
 800457a:	e003      	b.n	8004584 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	fab3 f383 	clz	r3, r3
 8004582:	b2db      	uxtb	r3, r3
 8004584:	6839      	ldr	r1, [r7, #0]
 8004586:	6849      	ldr	r1, [r1, #4]
 8004588:	f001 011f 	and.w	r1, r1, #31
 800458c:	408b      	lsls	r3, r1
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	089b      	lsrs	r3, r3, #2
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d808      	bhi.n	80045b6 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	6859      	ldr	r1, [r3, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	f7ff fb1e 	bl	8003bf2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	6819      	ldr	r1, [r3, #0]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	461a      	mov	r2, r3
 80045c4:	f7ff fb5b 	bl	8003c7e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f280 8097 	bge.w	8004700 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045d2:	4851      	ldr	r0, [pc, #324]	; (8004718 <HAL_ADC_ConfigChannel+0x258>)
 80045d4:	f7ff fab8 	bl	8003b48 <LL_ADC_GetCommonPathInternalCh>
 80045d8:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a4f      	ldr	r2, [pc, #316]	; (800471c <HAL_ADC_ConfigChannel+0x25c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d120      	bne.n	8004626 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d11b      	bne.n	8004626 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045f4:	4619      	mov	r1, r3
 80045f6:	4848      	ldr	r0, [pc, #288]	; (8004718 <HAL_ADC_ConfigChannel+0x258>)
 80045f8:	f7ff fa94 	bl	8003b24 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045fc:	4b48      	ldr	r3, [pc, #288]	; (8004720 <HAL_ADC_ConfigChannel+0x260>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	099b      	lsrs	r3, r3, #6
 8004602:	4a48      	ldr	r2, [pc, #288]	; (8004724 <HAL_ADC_ConfigChannel+0x264>)
 8004604:	fba2 2303 	umull	r2, r3, r2, r3
 8004608:	099b      	lsrs	r3, r3, #6
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	4613      	mov	r3, r2
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004616:	e002      	b.n	800461e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	3b01      	subs	r3, #1
 800461c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1f9      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004624:	e06c      	b.n	8004700 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a3f      	ldr	r2, [pc, #252]	; (8004728 <HAL_ADC_ConfigChannel+0x268>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d10c      	bne.n	800464a <HAL_ADC_ConfigChannel+0x18a>
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d107      	bne.n	800464a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004640:	4619      	mov	r1, r3
 8004642:	4835      	ldr	r0, [pc, #212]	; (8004718 <HAL_ADC_ConfigChannel+0x258>)
 8004644:	f7ff fa6e 	bl	8003b24 <LL_ADC_SetCommonPathInternalCh>
 8004648:	e05a      	b.n	8004700 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a37      	ldr	r2, [pc, #220]	; (800472c <HAL_ADC_ConfigChannel+0x26c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d155      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800465a:	2b00      	cmp	r3, #0
 800465c:	d150      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004664:	4619      	mov	r1, r3
 8004666:	482c      	ldr	r0, [pc, #176]	; (8004718 <HAL_ADC_ConfigChannel+0x258>)
 8004668:	f7ff fa5c 	bl	8003b24 <LL_ADC_SetCommonPathInternalCh>
 800466c:	e048      	b.n	8004700 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004676:	d004      	beq.n	8004682 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800467c:	4a25      	ldr	r2, [pc, #148]	; (8004714 <HAL_ADC_ConfigChannel+0x254>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d107      	bne.n	8004692 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4619      	mov	r1, r3
 800468c:	4610      	mov	r0, r2
 800468e:	f7ff fae3 	bl	8003c58 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	da32      	bge.n	8004700 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800469a:	481f      	ldr	r0, [pc, #124]	; (8004718 <HAL_ADC_ConfigChannel+0x258>)
 800469c:	f7ff fa54 	bl	8003b48 <LL_ADC_GetCommonPathInternalCh>
 80046a0:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1d      	ldr	r2, [pc, #116]	; (800471c <HAL_ADC_ConfigChannel+0x25c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d107      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80046b2:	4619      	mov	r1, r3
 80046b4:	4818      	ldr	r0, [pc, #96]	; (8004718 <HAL_ADC_ConfigChannel+0x258>)
 80046b6:	f7ff fa35 	bl	8003b24 <LL_ADC_SetCommonPathInternalCh>
 80046ba:	e021      	b.n	8004700 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a19      	ldr	r2, [pc, #100]	; (8004728 <HAL_ADC_ConfigChannel+0x268>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d107      	bne.n	80046d6 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046cc:	4619      	mov	r1, r3
 80046ce:	4812      	ldr	r0, [pc, #72]	; (8004718 <HAL_ADC_ConfigChannel+0x258>)
 80046d0:	f7ff fa28 	bl	8003b24 <LL_ADC_SetCommonPathInternalCh>
 80046d4:	e014      	b.n	8004700 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a14      	ldr	r2, [pc, #80]	; (800472c <HAL_ADC_ConfigChannel+0x26c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d10f      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80046e6:	4619      	mov	r1, r3
 80046e8:	480b      	ldr	r0, [pc, #44]	; (8004718 <HAL_ADC_ConfigChannel+0x258>)
 80046ea:	f7ff fa1b 	bl	8003b24 <LL_ADC_SetCommonPathInternalCh>
 80046ee:	e007      	b.n	8004700 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	f043 0220 	orr.w	r2, r3, #32
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004708:	7ffb      	ldrb	r3, [r7, #31]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3720      	adds	r7, #32
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	80000004 	.word	0x80000004
 8004718:	40012708 	.word	0x40012708
 800471c:	b0001000 	.word	0xb0001000
 8004720:	2000000c 	.word	0x2000000c
 8004724:	053e2d63 	.word	0x053e2d63
 8004728:	b8004000 	.word	0xb8004000
 800472c:	b4002000 	.word	0xb4002000

08004730 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff fb61 	bl	8003e04 <LL_ADC_REG_IsConversionOngoing>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d033      	beq.n	80047b0 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff fb21 	bl	8003d94 <LL_ADC_IsDisableOngoing>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d104      	bne.n	8004762 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff fb3e 	bl	8003dde <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004762:	f7fe f98d 	bl	8002a80 <HAL_GetTick>
 8004766:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004768:	e01b      	b.n	80047a2 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800476a:	f7fe f989 	bl	8002a80 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d914      	bls.n	80047a2 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00d      	beq.n	80047a2 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478a:	f043 0210 	orr.w	r2, r3, #16
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004796:	f043 0201 	orr.w	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e007      	b.n	80047b2 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1dc      	bne.n	800476a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff facf 	bl	8003d70 <LL_ADC_IsEnabled>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d169      	bne.n	80048ac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	4b36      	ldr	r3, [pc, #216]	; (80048b8 <ADC_Enable+0xfc>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00d      	beq.n	8004802 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ea:	f043 0210 	orr.w	r2, r3, #16
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f6:	f043 0201 	orr.w	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e055      	b.n	80048ae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fa8c 	bl	8003d24 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800480c:	482b      	ldr	r0, [pc, #172]	; (80048bc <ADC_Enable+0x100>)
 800480e:	f7ff f99b 	bl	8003b48 <LL_ADC_GetCommonPathInternalCh>
 8004812:	4603      	mov	r3, r0
 8004814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00f      	beq.n	800483c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800481c:	4b28      	ldr	r3, [pc, #160]	; (80048c0 <ADC_Enable+0x104>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	099b      	lsrs	r3, r3, #6
 8004822:	4a28      	ldr	r2, [pc, #160]	; (80048c4 <ADC_Enable+0x108>)
 8004824:	fba2 2303 	umull	r2, r3, r2, r3
 8004828:	099b      	lsrs	r3, r3, #6
 800482a:	3301      	adds	r3, #1
 800482c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800482e:	e002      	b.n	8004836 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	3b01      	subs	r3, #1
 8004834:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f9      	bne.n	8004830 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	7e5b      	ldrb	r3, [r3, #25]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d033      	beq.n	80048ac <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004844:	f7fe f91c 	bl	8002a80 <HAL_GetTick>
 8004848:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800484a:	e028      	b.n	800489e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff fa8d 	bl	8003d70 <LL_ADC_IsEnabled>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff fa5f 	bl	8003d24 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004866:	f7fe f90b 	bl	8002a80 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d914      	bls.n	800489e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b01      	cmp	r3, #1
 8004880:	d00d      	beq.n	800489e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004886:	f043 0210 	orr.w	r2, r3, #16
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004892:	f043 0201 	orr.w	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e007      	b.n	80048ae <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d1cf      	bne.n	800484c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	80000017 	.word	0x80000017
 80048bc:	40012708 	.word	0x40012708
 80048c0:	2000000c 	.word	0x2000000c
 80048c4:	053e2d63 	.word	0x053e2d63

080048c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff fa5d 	bl	8003d94 <LL_ADC_IsDisableOngoing>
 80048da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff fa45 	bl	8003d70 <LL_ADC_IsEnabled>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d047      	beq.n	800497c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d144      	bne.n	800497c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 0305 	and.w	r3, r3, #5
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d10c      	bne.n	800491a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fa20 	bl	8003d4a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2203      	movs	r2, #3
 8004910:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004912:	f7fe f8b5 	bl	8002a80 <HAL_GetTick>
 8004916:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004918:	e029      	b.n	800496e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491e:	f043 0210 	orr.w	r2, r3, #16
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492a:	f043 0201 	orr.w	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e023      	b.n	800497e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004936:	f7fe f8a3 	bl	8002a80 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d914      	bls.n	800496e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00d      	beq.n	800496e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004956:	f043 0210 	orr.w	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004962:	f043 0201 	orr.w	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e007      	b.n	800497e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1dc      	bne.n	8004936 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <LL_ADC_SetCalibrationFactor>:
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004996:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	4770      	bx	lr

080049ae <LL_ADC_GetCalibrationFactor>:
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr

080049ca <LL_ADC_Enable>:
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049da:	f023 0317 	bic.w	r3, r3, #23
 80049de:	f043 0201 	orr.w	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	609a      	str	r2, [r3, #8]
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <LL_ADC_Disable>:
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a00:	f023 0317 	bic.w	r3, r3, #23
 8004a04:	f043 0202 	orr.w	r2, r3, #2
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	609a      	str	r2, [r3, #8]
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr

08004a16 <LL_ADC_IsEnabled>:
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d101      	bne.n	8004a2e <LL_ADC_IsEnabled+0x18>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <LL_ADC_IsEnabled+0x1a>
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bc80      	pop	{r7}
 8004a38:	4770      	bx	lr

08004a3a <LL_ADC_StartCalibration>:
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a4a:	f023 0317 	bic.w	r3, r3, #23
 8004a4e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	609a      	str	r2, [r3, #8]
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr

08004a60 <LL_ADC_IsCalibrationOnGoing>:
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a74:	d101      	bne.n	8004a7a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr

08004a86 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b088      	sub	sp, #32
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_ADCEx_Calibration_Start+0x1e>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e0b9      	b.n	8004c18 <HAL_ADCEx_Calibration_Start+0x192>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff ff0b 	bl	80048c8 <ADC_Disable>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff ffab 	bl	8004a16 <LL_ADC_IsEnabled>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f040 809d 	bne.w	8004c02 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004acc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004ad0:	f043 0202 	orr.w	r2, r3, #2
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	f248 0303 	movw	r3, #32771	; 0x8003
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6812      	ldr	r2, [r2, #0]
 8004af0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004af4:	f023 0303 	bic.w	r3, r3, #3
 8004af8:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
 8004afe:	e02e      	b.n	8004b5e <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff ff98 	bl	8004a3a <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b0a:	e014      	b.n	8004b36 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004b18:	d30d      	bcc.n	8004b36 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	f023 0312 	bic.w	r3, r3, #18
 8004b22:	f043 0210 	orr.w	r2, r3, #16
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e070      	b.n	8004c18 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff ff90 	bl	8004a60 <LL_ADC_IsCalibrationOnGoing>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e2      	bne.n	8004b0c <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff ff2f 	bl	80049ae <LL_ADC_GetCalibrationFactor>
 8004b50:	4602      	mov	r2, r0
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	4413      	add	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	61fb      	str	r3, [r7, #28]
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	2b07      	cmp	r3, #7
 8004b62:	d9cd      	bls.n	8004b00 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff ff29 	bl	80049ca <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69b9      	ldr	r1, [r7, #24]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff ff01 	bl	8004986 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff ff31 	bl	80049f0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b8e:	f7fd ff77 	bl	8002a80 <HAL_GetTick>
 8004b92:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b94:	e01c      	b.n	8004bd0 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b96:	f7fd ff73 	bl	8002a80 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d915      	bls.n	8004bd0 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff ff34 	bl	8004a16 <LL_ADC_IsEnabled>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00d      	beq.n	8004bd0 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb8:	f043 0210 	orr.w	r2, r3, #16
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc4:	f043 0201 	orr.w	r2, r3, #1
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e023      	b.n	8004c18 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff ff1e 	bl	8004a16 <LL_ADC_IsEnabled>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1da      	bne.n	8004b96 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68d9      	ldr	r1, [r3, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf4:	f023 0303 	bic.w	r3, r3, #3
 8004bf8:	f043 0201 	orr.w	r2, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	659a      	str	r2, [r3, #88]	; 0x58
 8004c00:	e005      	b.n	8004c0e <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c06:	f043 0210 	orr.w	r2, r3, #16
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3720      	adds	r7, #32
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c30:	4b0c      	ldr	r3, [pc, #48]	; (8004c64 <__NVIC_SetPriorityGrouping+0x44>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c52:	4a04      	ldr	r2, [pc, #16]	; (8004c64 <__NVIC_SetPriorityGrouping+0x44>)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	60d3      	str	r3, [r2, #12]
}
 8004c58:	bf00      	nop
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	e000ed00 	.word	0xe000ed00

08004c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c6c:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <__NVIC_GetPriorityGrouping+0x18>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	0a1b      	lsrs	r3, r3, #8
 8004c72:	f003 0307 	and.w	r3, r3, #7
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	e000ed00 	.word	0xe000ed00

08004c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	db0b      	blt.n	8004cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	f003 021f 	and.w	r2, r3, #31
 8004c9c:	4906      	ldr	r1, [pc, #24]	; (8004cb8 <__NVIC_EnableIRQ+0x34>)
 8004c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8004caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc80      	pop	{r7}
 8004cb6:	4770      	bx	lr
 8004cb8:	e000e100 	.word	0xe000e100

08004cbc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	db12      	blt.n	8004cf4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	f003 021f 	and.w	r2, r3, #31
 8004cd4:	490a      	ldr	r1, [pc, #40]	; (8004d00 <__NVIC_DisableIRQ+0x44>)
 8004cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	2001      	movs	r0, #1
 8004cde:	fa00 f202 	lsl.w	r2, r0, r2
 8004ce2:	3320      	adds	r3, #32
 8004ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ce8:	f3bf 8f4f 	dsb	sy
}
 8004cec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004cee:	f3bf 8f6f 	isb	sy
}
 8004cf2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	e000e100 	.word	0xe000e100

08004d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	6039      	str	r1, [r7, #0]
 8004d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	db0a      	blt.n	8004d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	490c      	ldr	r1, [pc, #48]	; (8004d50 <__NVIC_SetPriority+0x4c>)
 8004d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d22:	0112      	lsls	r2, r2, #4
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	440b      	add	r3, r1
 8004d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d2c:	e00a      	b.n	8004d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	4908      	ldr	r1, [pc, #32]	; (8004d54 <__NVIC_SetPriority+0x50>)
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	3b04      	subs	r3, #4
 8004d3c:	0112      	lsls	r2, r2, #4
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	440b      	add	r3, r1
 8004d42:	761a      	strb	r2, [r3, #24]
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bc80      	pop	{r7}
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	e000e100 	.word	0xe000e100
 8004d54:	e000ed00 	.word	0xe000ed00

08004d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b089      	sub	sp, #36	; 0x24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	f1c3 0307 	rsb	r3, r3, #7
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	bf28      	it	cs
 8004d76:	2304      	movcs	r3, #4
 8004d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	2b06      	cmp	r3, #6
 8004d80:	d902      	bls.n	8004d88 <NVIC_EncodePriority+0x30>
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3b03      	subs	r3, #3
 8004d86:	e000      	b.n	8004d8a <NVIC_EncodePriority+0x32>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	43da      	mvns	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004da0:	f04f 31ff 	mov.w	r1, #4294967295
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	fa01 f303 	lsl.w	r3, r1, r3
 8004daa:	43d9      	mvns	r1, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004db0:	4313      	orrs	r3, r2
         );
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3724      	adds	r7, #36	; 0x24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr

08004dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff ff2b 	bl	8004c20 <__NVIC_SetPriorityGrouping>
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b086      	sub	sp, #24
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	4603      	mov	r3, r0
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	607a      	str	r2, [r7, #4]
 8004dde:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004de0:	f7ff ff42 	bl	8004c68 <__NVIC_GetPriorityGrouping>
 8004de4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	6978      	ldr	r0, [r7, #20]
 8004dec:	f7ff ffb4 	bl	8004d58 <NVIC_EncodePriority>
 8004df0:	4602      	mov	r2, r0
 8004df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004df6:	4611      	mov	r1, r2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff ff83 	bl	8004d04 <__NVIC_SetPriority>
}
 8004dfe:	bf00      	nop
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff ff35 	bl	8004c84 <__NVIC_EnableIRQ>
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	4603      	mov	r3, r0
 8004e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff ff43 	bl	8004cbc <__NVIC_DisableIRQ>
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e08e      	b.n	8004f70 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	4b47      	ldr	r3, [pc, #284]	; (8004f78 <HAL_DMA_Init+0x138>)
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d80f      	bhi.n	8004e7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	4b45      	ldr	r3, [pc, #276]	; (8004f7c <HAL_DMA_Init+0x13c>)
 8004e66:	4413      	add	r3, r2
 8004e68:	4a45      	ldr	r2, [pc, #276]	; (8004f80 <HAL_DMA_Init+0x140>)
 8004e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6e:	091b      	lsrs	r3, r3, #4
 8004e70:	009a      	lsls	r2, r3, #2
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a42      	ldr	r2, [pc, #264]	; (8004f84 <HAL_DMA_Init+0x144>)
 8004e7a:	641a      	str	r2, [r3, #64]	; 0x40
 8004e7c:	e00e      	b.n	8004e9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	4b40      	ldr	r3, [pc, #256]	; (8004f88 <HAL_DMA_Init+0x148>)
 8004e86:	4413      	add	r3, r2
 8004e88:	4a3d      	ldr	r2, [pc, #244]	; (8004f80 <HAL_DMA_Init+0x140>)
 8004e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8e:	091b      	lsrs	r3, r3, #4
 8004e90:	009a      	lsls	r2, r3, #2
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a3c      	ldr	r2, [pc, #240]	; (8004f8c <HAL_DMA_Init+0x14c>)
 8004e9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6819      	ldr	r1, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fb24 	bl	800553c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004efc:	d102      	bne.n	8004f04 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f10:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f1a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d010      	beq.n	8004f46 <HAL_DMA_Init+0x106>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d80c      	bhi.n	8004f46 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fb4d 	bl	80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f42:	605a      	str	r2, [r3, #4]
 8004f44:	e008      	b.n	8004f58 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40020407 	.word	0x40020407
 8004f7c:	bffdfff8 	.word	0xbffdfff8
 8004f80:	cccccccd 	.word	0xcccccccd
 8004f84:	40020000 	.word	0x40020000
 8004f88:	bffdfbf8 	.word	0xbffdfbf8
 8004f8c:	40020400 	.word	0x40020400

08004f90 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e07b      	b.n	800509a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0201 	bic.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	4b3a      	ldr	r3, [pc, #232]	; (80050a4 <HAL_DMA_DeInit+0x114>)
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d80f      	bhi.n	8004fde <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	4b38      	ldr	r3, [pc, #224]	; (80050a8 <HAL_DMA_DeInit+0x118>)
 8004fc6:	4413      	add	r3, r2
 8004fc8:	4a38      	ldr	r2, [pc, #224]	; (80050ac <HAL_DMA_DeInit+0x11c>)
 8004fca:	fba2 2303 	umull	r2, r3, r2, r3
 8004fce:	091b      	lsrs	r3, r3, #4
 8004fd0:	009a      	lsls	r2, r3, #2
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a35      	ldr	r2, [pc, #212]	; (80050b0 <HAL_DMA_DeInit+0x120>)
 8004fda:	641a      	str	r2, [r3, #64]	; 0x40
 8004fdc:	e00e      	b.n	8004ffc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	4b33      	ldr	r3, [pc, #204]	; (80050b4 <HAL_DMA_DeInit+0x124>)
 8004fe6:	4413      	add	r3, r2
 8004fe8:	4a30      	ldr	r2, [pc, #192]	; (80050ac <HAL_DMA_DeInit+0x11c>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	091b      	lsrs	r3, r3, #4
 8004ff0:	009a      	lsls	r2, r3, #2
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a2f      	ldr	r2, [pc, #188]	; (80050b8 <HAL_DMA_DeInit+0x128>)
 8004ffa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005008:	f003 021c 	and.w	r2, r3, #28
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	2101      	movs	r1, #1
 8005012:	fa01 f202 	lsl.w	r2, r1, r2
 8005016:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fa8f 	bl	800553c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800502e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00f      	beq.n	8005058 <HAL_DMA_DeInit+0xc8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b04      	cmp	r3, #4
 800503e:	d80b      	bhi.n	8005058 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fac3 	bl	80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005056:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	40020407 	.word	0x40020407
 80050a8:	bffdfff8 	.word	0xbffdfff8
 80050ac:	cccccccd 	.word	0xcccccccd
 80050b0:	40020000 	.word	0x40020000
 80050b4:	bffdfbf8 	.word	0xbffdfbf8
 80050b8:	40020400 	.word	0x40020400

080050bc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_DMA_Start_IT+0x20>
 80050d8:	2302      	movs	r3, #2
 80050da:	e069      	b.n	80051b0 <HAL_DMA_Start_IT+0xf4>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d155      	bne.n	800519c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0201 	bic.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f9d3 	bl	80054c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	2b00      	cmp	r3, #0
 8005120:	d008      	beq.n	8005134 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f042 020e 	orr.w	r2, r2, #14
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	e00f      	b.n	8005154 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0204 	bic.w	r2, r2, #4
 8005142:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 020a 	orr.w	r2, r2, #10
 8005152:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d007      	beq.n	8005172 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005170:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005176:	2b00      	cmp	r3, #0
 8005178:	d007      	beq.n	800518a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005188:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f042 0201 	orr.w	r2, r2, #1
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	e008      	b.n	80051ae <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2280      	movs	r2, #128	; 0x80
 80051a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80051ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e04f      	b.n	800526a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d008      	beq.n	80051e8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2204      	movs	r2, #4
 80051da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e040      	b.n	800526a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 020e 	bic.w	r2, r2, #14
 80051f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005202:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005206:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0201 	bic.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521c:	f003 021c 	and.w	r2, r3, #28
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	2101      	movs	r1, #1
 8005226:	fa01 f202 	lsl.w	r2, r1, r2
 800522a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005234:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00c      	beq.n	8005258 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005248:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800524c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005256:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr

08005274 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d005      	beq.n	8005298 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2204      	movs	r2, #4
 8005290:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	73fb      	strb	r3, [r7, #15]
 8005296:	e047      	b.n	8005328 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 020e 	bic.w	r2, r2, #14
 80052a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0201 	bic.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052cc:	f003 021c 	and.w	r2, r3, #28
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d4:	2101      	movs	r1, #1
 80052d6:	fa01 f202 	lsl.w	r2, r1, r2
 80052da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80052e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00c      	beq.n	8005308 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005306:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	4798      	blx	r3
    }
  }
  return status;
 8005328:	7bfb      	ldrb	r3, [r7, #15]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005350:	f003 031c 	and.w	r3, r3, #28
 8005354:	2204      	movs	r2, #4
 8005356:	409a      	lsls	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4013      	ands	r3, r2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d027      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x7c>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	2b00      	cmp	r3, #0
 8005368:	d022      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b00      	cmp	r3, #0
 8005376:	d107      	bne.n	8005388 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0204 	bic.w	r2, r2, #4
 8005386:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538c:	f003 021c 	and.w	r2, r3, #28
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	2104      	movs	r1, #4
 8005396:	fa01 f202 	lsl.w	r2, r1, r2
 800539a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 8081 	beq.w	80054a8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80053ae:	e07b      	b.n	80054a8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b4:	f003 031c 	and.w	r3, r3, #28
 80053b8:	2202      	movs	r2, #2
 80053ba:	409a      	lsls	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4013      	ands	r3, r2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d03d      	beq.n	8005440 <HAL_DMA_IRQHandler+0x10c>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d038      	beq.n	8005440 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0320 	and.w	r3, r3, #32
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10b      	bne.n	80053f4 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 020a 	bic.w	r2, r2, #10
 80053ea:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	461a      	mov	r2, r3
 80053fa:	4b2e      	ldr	r3, [pc, #184]	; (80054b4 <HAL_DMA_IRQHandler+0x180>)
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d909      	bls.n	8005414 <HAL_DMA_IRQHandler+0xe0>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005404:	f003 031c 	and.w	r3, r3, #28
 8005408:	4a2b      	ldr	r2, [pc, #172]	; (80054b8 <HAL_DMA_IRQHandler+0x184>)
 800540a:	2102      	movs	r1, #2
 800540c:	fa01 f303 	lsl.w	r3, r1, r3
 8005410:	6053      	str	r3, [r2, #4]
 8005412:	e008      	b.n	8005426 <HAL_DMA_IRQHandler+0xf2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005418:	f003 031c 	and.w	r3, r3, #28
 800541c:	4a27      	ldr	r2, [pc, #156]	; (80054bc <HAL_DMA_IRQHandler+0x188>)
 800541e:	2102      	movs	r1, #2
 8005420:	fa01 f303 	lsl.w	r3, r1, r3
 8005424:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d038      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800543e:	e033      	b.n	80054a8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005444:	f003 031c 	and.w	r3, r3, #28
 8005448:	2208      	movs	r2, #8
 800544a:	409a      	lsls	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4013      	ands	r3, r2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d02a      	beq.n	80054aa <HAL_DMA_IRQHandler+0x176>
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b00      	cmp	r3, #0
 800545c:	d025      	beq.n	80054aa <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 020e 	bic.w	r2, r2, #14
 800546c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005472:	f003 021c 	and.w	r2, r3, #28
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	2101      	movs	r1, #1
 800547c:	fa01 f202 	lsl.w	r2, r1, r2
 8005480:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549c:	2b00      	cmp	r3, #0
 800549e:	d004      	beq.n	80054aa <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80054a8:	bf00      	nop
 80054aa:	bf00      	nop
}
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40020080 	.word	0x40020080
 80054b8:	40020400 	.word	0x40020400
 80054bc:	40020000 	.word	0x40020000

080054c0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80054d6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d004      	beq.n	80054ea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80054e8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ee:	f003 021c 	and.w	r2, r3, #28
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	2101      	movs	r1, #1
 80054f8:	fa01 f202 	lsl.w	r2, r1, r2
 80054fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	2b10      	cmp	r3, #16
 800550c:	d108      	bne.n	8005520 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800551e:	e007      	b.n	8005530 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	60da      	str	r2, [r3, #12]
}
 8005530:	bf00      	nop
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr
	...

0800553c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	4b1c      	ldr	r3, [pc, #112]	; (80055bc <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800554c:	429a      	cmp	r2, r3
 800554e:	d813      	bhi.n	8005578 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005554:	089b      	lsrs	r3, r3, #2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800555c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	3b08      	subs	r3, #8
 800556c:	4a14      	ldr	r2, [pc, #80]	; (80055c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	091b      	lsrs	r3, r3, #4
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	e011      	b.n	800559c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557c:	089b      	lsrs	r3, r3, #2
 800557e:	009a      	lsls	r2, r3, #2
 8005580:	4b10      	ldr	r3, [pc, #64]	; (80055c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8005582:	4413      	add	r3, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	b2db      	uxtb	r3, r3
 800558e:	3b08      	subs	r3, #8
 8005590:	4a0b      	ldr	r2, [pc, #44]	; (80055c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	091b      	lsrs	r3, r3, #4
 8005598:	3307      	adds	r3, #7
 800559a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a0a      	ldr	r2, [pc, #40]	; (80055c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80055a0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	2201      	movs	r2, #1
 80055aa:	409a      	lsls	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055b0:	bf00      	nop
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bc80      	pop	{r7}
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40020407 	.word	0x40020407
 80055c0:	cccccccd 	.word	0xcccccccd
 80055c4:	4002081c 	.word	0x4002081c
 80055c8:	40020880 	.word	0x40020880

080055cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055dc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4b0a      	ldr	r3, [pc, #40]	; (800560c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	461a      	mov	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a08      	ldr	r2, [pc, #32]	; (8005610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80055f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	2201      	movs	r2, #1
 80055fc:	409a      	lsls	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005602:	bf00      	nop
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr
 800560c:	1000823f 	.word	0x1000823f
 8005610:	40020940 	.word	0x40020940

08005614 <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b01      	cmp	r3, #1
 8005628:	d12b      	bne.n	8005682 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_DMAEx_ConfigMuxSync+0x24>
 8005634:	2302      	movs	r3, #2
 8005636:	e028      	b.n	800568a <HAL_DMAEx_ConfigMuxSync+0x76>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	3b01      	subs	r3, #1
 8005654:	04db      	lsls	r3, r3, #19
 8005656:	431a      	orrs	r2, r3
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	431a      	orrs	r2, r3
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	7a1b      	ldrb	r3, [r3, #8]
 8005662:	041b      	lsls	r3, r3, #16
 8005664:	431a      	orrs	r2, r3
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	7a5b      	ldrb	r3, [r3, #9]
 800566a:	025b      	lsls	r3, r3, #9
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005672:	430a      	orrs	r2, r1
 8005674:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	e003      	b.n	800568a <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2280      	movs	r2, #128	; 0x80
 8005686:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
  }
}
 800568a:	4618      	mov	r0, r3
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr

08005694 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a6:	4013      	ands	r3, r2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01a      	beq.n	80056e2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80056c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d022      	beq.n	8005730 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f4:	4013      	ands	r3, r2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01a      	beq.n	8005730 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005704:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005708:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005712:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005718:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	4798      	blx	r3
      }
    }
  }
}
 8005730:	bf00      	nop
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005746:	4b1c      	ldr	r3, [pc, #112]	; (80057b8 <HAL_FLASH_Program+0x80>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <HAL_FLASH_Program+0x1a>
 800574e:	2302      	movs	r3, #2
 8005750:	e02d      	b.n	80057ae <HAL_FLASH_Program+0x76>
 8005752:	4b19      	ldr	r3, [pc, #100]	; (80057b8 <HAL_FLASH_Program+0x80>)
 8005754:	2201      	movs	r2, #1
 8005756:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005758:	4b17      	ldr	r3, [pc, #92]	; (80057b8 <HAL_FLASH_Program+0x80>)
 800575a:	2200      	movs	r2, #0
 800575c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800575e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005762:	f000 f869 	bl	8005838 <FLASH_WaitForLastOperation>
 8005766:	4603      	mov	r3, r0
 8005768:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800576a:	7dfb      	ldrb	r3, [r7, #23]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d11a      	bne.n	80057a6 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d105      	bne.n	8005782 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005776:	e9d7 2300 	ldrd	r2, r3, [r7]
 800577a:	68b8      	ldr	r0, [r7, #8]
 800577c:	f000 f8be 	bl	80058fc <FLASH_Program_DoubleWord>
 8005780:	e004      	b.n	800578c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	4619      	mov	r1, r3
 8005786:	68b8      	ldr	r0, [r7, #8]
 8005788:	f000 f8de 	bl	8005948 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800578c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005790:	f000 f852 	bl	8005838 <FLASH_WaitForLastOperation>
 8005794:	4603      	mov	r3, r0
 8005796:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005798:	4b08      	ldr	r3, [pc, #32]	; (80057bc <HAL_FLASH_Program+0x84>)
 800579a:	695a      	ldr	r2, [r3, #20]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	43db      	mvns	r3, r3
 80057a0:	4906      	ldr	r1, [pc, #24]	; (80057bc <HAL_FLASH_Program+0x84>)
 80057a2:	4013      	ands	r3, r2
 80057a4:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80057a6:	4b04      	ldr	r3, [pc, #16]	; (80057b8 <HAL_FLASH_Program+0x80>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80057ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	2000063c 	.word	0x2000063c
 80057bc:	58004000 	.word	0x58004000

080057c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80057ca:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <HAL_FLASH_Unlock+0x38>)
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	da0b      	bge.n	80057ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80057d2:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <HAL_FLASH_Unlock+0x38>)
 80057d4:	4a09      	ldr	r2, [pc, #36]	; (80057fc <HAL_FLASH_Unlock+0x3c>)
 80057d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80057d8:	4b07      	ldr	r3, [pc, #28]	; (80057f8 <HAL_FLASH_Unlock+0x38>)
 80057da:	4a09      	ldr	r2, [pc, #36]	; (8005800 <HAL_FLASH_Unlock+0x40>)
 80057dc:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <HAL_FLASH_Unlock+0x38>)
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	da01      	bge.n	80057ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80057ea:	79fb      	ldrb	r3, [r7, #7]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	58004000 	.word	0x58004000
 80057fc:	45670123 	.word	0x45670123
 8005800:	cdef89ab 	.word	0xcdef89ab

08005804 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800580e:	4b09      	ldr	r3, [pc, #36]	; (8005834 <HAL_FLASH_Lock+0x30>)
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	4a08      	ldr	r2, [pc, #32]	; (8005834 <HAL_FLASH_Lock+0x30>)
 8005814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005818:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800581a:	4b06      	ldr	r3, [pc, #24]	; (8005834 <HAL_FLASH_Lock+0x30>)
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	2b00      	cmp	r3, #0
 8005820:	db01      	blt.n	8005826 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005826:	79fb      	ldrb	r3, [r7, #7]
}
 8005828:	4618      	mov	r0, r3
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	bc80      	pop	{r7}
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	58004000 	.word	0x58004000

08005838 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005840:	f7fd f91e 	bl	8002a80 <HAL_GetTick>
 8005844:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005846:	e009      	b.n	800585c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005848:	f7fd f91a 	bl	8002a80 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	429a      	cmp	r2, r3
 8005856:	d801      	bhi.n	800585c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e047      	b.n	80058ec <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800585c:	4b25      	ldr	r3, [pc, #148]	; (80058f4 <FLASH_WaitForLastOperation+0xbc>)
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005868:	d0ee      	beq.n	8005848 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800586a:	4b22      	ldr	r3, [pc, #136]	; (80058f4 <FLASH_WaitForLastOperation+0xbc>)
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800587a:	4b1e      	ldr	r3, [pc, #120]	; (80058f4 <FLASH_WaitForLastOperation+0xbc>)
 800587c:	2201      	movs	r2, #1
 800587e:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005886:	4013      	ands	r3, r2
 8005888:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d007      	beq.n	80058a4 <FLASH_WaitForLastOperation+0x6c>
 8005894:	4b17      	ldr	r3, [pc, #92]	; (80058f4 <FLASH_WaitForLastOperation+0xbc>)
 8005896:	699a      	ldr	r2, [r3, #24]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800589e:	4915      	ldr	r1, [pc, #84]	; (80058f4 <FLASH_WaitForLastOperation+0xbc>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	618b      	str	r3, [r1, #24]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d004      	beq.n	80058b8 <FLASH_WaitForLastOperation+0x80>
 80058ae:	4a11      	ldr	r2, [pc, #68]	; (80058f4 <FLASH_WaitForLastOperation+0xbc>)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80058b6:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00e      	beq.n	80058dc <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80058be:	4a0e      	ldr	r2, [pc, #56]	; (80058f8 <FLASH_WaitForLastOperation+0xc0>)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e011      	b.n	80058ec <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80058c8:	f7fd f8da 	bl	8002a80 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d801      	bhi.n	80058dc <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e007      	b.n	80058ec <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80058dc:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <FLASH_WaitForLastOperation+0xbc>)
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058e8:	d0ee      	beq.n	80058c8 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	58004000 	.word	0x58004000
 80058f8:	2000063c 	.word	0x2000063c

080058fc <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005908:	4b0e      	ldr	r3, [pc, #56]	; (8005944 <FLASH_Program_DoubleWord+0x48>)
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	4a0d      	ldr	r2, [pc, #52]	; (8005944 <FLASH_Program_DoubleWord+0x48>)
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800591a:	f3bf 8f6f 	isb	sy
}
 800591e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005920:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	f04f 0300 	mov.w	r3, #0
 800592c:	000a      	movs	r2, r1
 800592e:	2300      	movs	r3, #0
 8005930:	68f9      	ldr	r1, [r7, #12]
 8005932:	3104      	adds	r1, #4
 8005934:	4613      	mov	r3, r2
 8005936:	600b      	str	r3, [r1, #0]
}
 8005938:	bf00      	nop
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	bc80      	pop	{r7}
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	58004000 	.word	0x58004000

08005948 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005948:	b480      	push	{r7}
 800594a:	b089      	sub	sp, #36	; 0x24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005952:	2340      	movs	r3, #64	; 0x40
 8005954:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800595e:	4b18      	ldr	r3, [pc, #96]	; (80059c0 <FLASH_Program_Fast+0x78>)
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	4a17      	ldr	r2, [pc, #92]	; (80059c0 <FLASH_Program_Fast+0x78>)
 8005964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005968:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800596a:	f3ef 8310 	mrs	r3, PRIMASK
 800596e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005970:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8005972:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005974:	b672      	cpsid	i
}
 8005976:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	3304      	adds	r3, #4
 8005984:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	3304      	adds	r3, #4
 800598a:	617b      	str	r3, [r7, #20]
    row_index--;
 800598c:	7ffb      	ldrb	r3, [r7, #31]
 800598e:	3b01      	subs	r3, #1
 8005990:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005992:	7ffb      	ldrb	r3, [r7, #31]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1ef      	bne.n	8005978 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005998:	bf00      	nop
 800599a:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <FLASH_Program_Fast+0x78>)
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a6:	d0f8      	beq.n	800599a <FLASH_Program_Fast+0x52>
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f383 8810 	msr	PRIMASK, r3
}
 80059b2:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80059b4:	bf00      	nop
 80059b6:	3724      	adds	r7, #36	; 0x24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bc80      	pop	{r7}
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	58004000 	.word	0x58004000

080059c4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80059ce:	4b28      	ldr	r3, [pc, #160]	; (8005a70 <HAL_FLASHEx_Erase+0xac>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_FLASHEx_Erase+0x16>
 80059d6:	2302      	movs	r3, #2
 80059d8:	e046      	b.n	8005a68 <HAL_FLASHEx_Erase+0xa4>
 80059da:	4b25      	ldr	r3, [pc, #148]	; (8005a70 <HAL_FLASHEx_Erase+0xac>)
 80059dc:	2201      	movs	r2, #1
 80059de:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80059e0:	4b23      	ldr	r3, [pc, #140]	; (8005a70 <HAL_FLASHEx_Erase+0xac>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80059e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059ea:	f7ff ff25 	bl	8005838 <FLASH_WaitForLastOperation>
 80059ee:	4603      	mov	r3, r0
 80059f0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d133      	bne.n	8005a60 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d108      	bne.n	8005a12 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005a00:	f000 f880 	bl	8005b04 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a08:	f7ff ff16 	bl	8005838 <FLASH_WaitForLastOperation>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	73fb      	strb	r3, [r7, #15]
 8005a10:	e024      	b.n	8005a5c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	f04f 32ff 	mov.w	r2, #4294967295
 8005a18:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	60bb      	str	r3, [r7, #8]
 8005a20:	e012      	b.n	8005a48 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8005a22:	68b8      	ldr	r0, [r7, #8]
 8005a24:	f000 f87e 	bl	8005b24 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a2c:	f7ff ff04 	bl	8005838 <FLASH_WaitForLastOperation>
 8005a30:	4603      	mov	r3, r0
 8005a32:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	601a      	str	r2, [r3, #0]
          break;
 8005a40:	e00a      	b.n	8005a58 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	3301      	adds	r3, #1
 8005a46:	60bb      	str	r3, [r7, #8]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	4413      	add	r3, r2
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d3e4      	bcc.n	8005a22 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005a58:	f000 f8c0 	bl	8005bdc <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005a5c:	f000 f87a 	bl	8005b54 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a60:	4b03      	ldr	r3, [pc, #12]	; (8005a70 <HAL_FLASHEx_Erase+0xac>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	701a      	strb	r2, [r3, #0]

  return status;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	2000063c 	.word	0x2000063c

08005a74 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005a7c:	4b1f      	ldr	r3, [pc, #124]	; (8005afc <HAL_FLASHEx_Erase_IT+0x88>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_FLASHEx_Erase_IT+0x14>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e034      	b.n	8005af2 <HAL_FLASHEx_Erase_IT+0x7e>
 8005a88:	4b1c      	ldr	r3, [pc, #112]	; (8005afc <HAL_FLASHEx_Erase_IT+0x88>)
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a8e:	4b1b      	ldr	r3, [pc, #108]	; (8005afc <HAL_FLASHEx_Erase_IT+0x88>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a18      	ldr	r2, [pc, #96]	; (8005afc <HAL_FLASHEx_Erase_IT+0x88>)
 8005a9a:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005aa0:	f7ff feca 	bl	8005838 <FLASH_WaitForLastOperation>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005aae:	4b13      	ldr	r3, [pc, #76]	; (8005afc <HAL_FLASHEx_Erase_IT+0x88>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	e01c      	b.n	8005af0 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8005ab6:	4b12      	ldr	r3, [pc, #72]	; (8005b00 <HAL_FLASHEx_Erase_IT+0x8c>)
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	4a11      	ldr	r2, [pc, #68]	; (8005b00 <HAL_FLASHEx_Erase_IT+0x8c>)
 8005abc:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8005ac0:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d105      	bne.n	8005ad6 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 8005aca:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <HAL_FLASHEx_Erase_IT+0x88>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8005ad0:	f000 f818 	bl	8005b04 <FLASH_MassErase>
 8005ad4:	e00c      	b.n	8005af0 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	4a08      	ldr	r2, [pc, #32]	; (8005afc <HAL_FLASHEx_Erase_IT+0x88>)
 8005adc:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	4a06      	ldr	r2, [pc, #24]	; (8005afc <HAL_FLASHEx_Erase_IT+0x88>)
 8005ae4:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 f81a 	bl	8005b24 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	2000063c 	.word	0x2000063c
 8005b00:	58004000 	.word	0x58004000

08005b04 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005b08:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <FLASH_MassErase+0x1c>)
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	4a04      	ldr	r2, [pc, #16]	; (8005b20 <FLASH_MassErase+0x1c>)
 8005b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b12:	f043 0304 	orr.w	r3, r3, #4
 8005b16:	6153      	str	r3, [r2, #20]
#endif
}
 8005b18:	bf00      	nop
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr
 8005b20:	58004000 	.word	0x58004000

08005b24 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005b2c:	4b08      	ldr	r3, [pc, #32]	; (8005b50 <FLASH_PageErase+0x2c>)
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	4a05      	ldr	r2, [pc, #20]	; (8005b50 <FLASH_PageErase+0x2c>)
 8005b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b40:	f043 0302 	orr.w	r3, r3, #2
 8005b44:	6153      	str	r3, [r2, #20]
#endif
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr
 8005b50:	58004000 	.word	0x58004000

08005b54 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005b58:	4b1f      	ldr	r3, [pc, #124]	; (8005bd8 <FLASH_FlushCaches+0x84>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d117      	bne.n	8005b94 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005b64:	4b1c      	ldr	r3, [pc, #112]	; (8005bd8 <FLASH_FlushCaches+0x84>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a1b      	ldr	r2, [pc, #108]	; (8005bd8 <FLASH_FlushCaches+0x84>)
 8005b6a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b6e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005b70:	4b19      	ldr	r3, [pc, #100]	; (8005bd8 <FLASH_FlushCaches+0x84>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a18      	ldr	r2, [pc, #96]	; (8005bd8 <FLASH_FlushCaches+0x84>)
 8005b76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	4b16      	ldr	r3, [pc, #88]	; (8005bd8 <FLASH_FlushCaches+0x84>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a15      	ldr	r2, [pc, #84]	; (8005bd8 <FLASH_FlushCaches+0x84>)
 8005b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b86:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b88:	4b13      	ldr	r3, [pc, #76]	; (8005bd8 <FLASH_FlushCaches+0x84>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a12      	ldr	r2, [pc, #72]	; (8005bd8 <FLASH_FlushCaches+0x84>)
 8005b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b92:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005b94:	4b10      	ldr	r3, [pc, #64]	; (8005bd8 <FLASH_FlushCaches+0x84>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d117      	bne.n	8005bd0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005ba0:	4b0d      	ldr	r3, [pc, #52]	; (8005bd8 <FLASH_FlushCaches+0x84>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a0c      	ldr	r2, [pc, #48]	; (8005bd8 <FLASH_FlushCaches+0x84>)
 8005ba6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005baa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005bac:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <FLASH_FlushCaches+0x84>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a09      	ldr	r2, [pc, #36]	; (8005bd8 <FLASH_FlushCaches+0x84>)
 8005bb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	4b07      	ldr	r3, [pc, #28]	; (8005bd8 <FLASH_FlushCaches+0x84>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a06      	ldr	r2, [pc, #24]	; (8005bd8 <FLASH_FlushCaches+0x84>)
 8005bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bc2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005bc4:	4b04      	ldr	r3, [pc, #16]	; (8005bd8 <FLASH_FlushCaches+0x84>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a03      	ldr	r2, [pc, #12]	; (8005bd8 <FLASH_FlushCaches+0x84>)
 8005bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bce:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005bd0:	bf00      	nop
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr
 8005bd8:	58004000 	.word	0x58004000

08005bdc <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005be0:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <FLASH_AcknowledgePageErase+0x1c>)
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	4a04      	ldr	r2, [pc, #16]	; (8005bf8 <FLASH_AcknowledgePageErase+0x1c>)
 8005be6:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005bea:	f023 0302 	bic.w	r3, r3, #2
 8005bee:	6153      	str	r3, [r2, #20]
#endif
}
 8005bf0:	bf00      	nop
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr
 8005bf8:	58004000 	.word	0x58004000

08005bfc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c06:	2300      	movs	r3, #0
 8005c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c0a:	e140      	b.n	8005e8e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	2101      	movs	r1, #1
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	fa01 f303 	lsl.w	r3, r1, r3
 8005c18:	4013      	ands	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 8132 	beq.w	8005e88 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f003 0303 	and.w	r3, r3, #3
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d005      	beq.n	8005c3c <HAL_GPIO_Init+0x40>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f003 0303 	and.w	r3, r3, #3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d130      	bne.n	8005c9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	2203      	movs	r2, #3
 8005c48:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	4013      	ands	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c72:	2201      	movs	r2, #1
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	43db      	mvns	r3, r3
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	091b      	lsrs	r3, r3, #4
 8005c88:	f003 0201 	and.w	r2, r3, #1
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f003 0303 	and.w	r3, r3, #3
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d017      	beq.n	8005cda <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	43db      	mvns	r3, r3
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d123      	bne.n	8005d2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	08da      	lsrs	r2, r3, #3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3208      	adds	r2, #8
 8005cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	220f      	movs	r2, #15
 8005cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005d02:	43db      	mvns	r3, r3
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	4013      	ands	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f003 0307 	and.w	r3, r3, #7
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	08da      	lsrs	r2, r3, #3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3208      	adds	r2, #8
 8005d28:	6939      	ldr	r1, [r7, #16]
 8005d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	2203      	movs	r2, #3
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	43db      	mvns	r3, r3
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4013      	ands	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f003 0203 	and.w	r2, r3, #3
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	fa02 f303 	lsl.w	r3, r2, r3
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 808c 	beq.w	8005e88 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005d70:	4a4e      	ldr	r2, [pc, #312]	; (8005eac <HAL_GPIO_Init+0x2b0>)
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	089b      	lsrs	r3, r3, #2
 8005d76:	3302      	adds	r3, #2
 8005d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f003 0303 	and.w	r3, r3, #3
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	2207      	movs	r2, #7
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	4013      	ands	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005d9a:	d00d      	beq.n	8005db8 <HAL_GPIO_Init+0x1bc>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a44      	ldr	r2, [pc, #272]	; (8005eb0 <HAL_GPIO_Init+0x2b4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d007      	beq.n	8005db4 <HAL_GPIO_Init+0x1b8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a43      	ldr	r2, [pc, #268]	; (8005eb4 <HAL_GPIO_Init+0x2b8>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d101      	bne.n	8005db0 <HAL_GPIO_Init+0x1b4>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e004      	b.n	8005dba <HAL_GPIO_Init+0x1be>
 8005db0:	2307      	movs	r3, #7
 8005db2:	e002      	b.n	8005dba <HAL_GPIO_Init+0x1be>
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <HAL_GPIO_Init+0x1be>
 8005db8:	2300      	movs	r3, #0
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	f002 0203 	and.w	r2, r2, #3
 8005dc0:	0092      	lsls	r2, r2, #2
 8005dc2:	4093      	lsls	r3, r2
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005dca:	4938      	ldr	r1, [pc, #224]	; (8005eac <HAL_GPIO_Init+0x2b0>)
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	089b      	lsrs	r3, r3, #2
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005dd8:	4b37      	ldr	r3, [pc, #220]	; (8005eb8 <HAL_GPIO_Init+0x2bc>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	43db      	mvns	r3, r3
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4013      	ands	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005dfc:	4a2e      	ldr	r2, [pc, #184]	; (8005eb8 <HAL_GPIO_Init+0x2bc>)
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e02:	4b2d      	ldr	r3, [pc, #180]	; (8005eb8 <HAL_GPIO_Init+0x2bc>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005e26:	4a24      	ldr	r2, [pc, #144]	; (8005eb8 <HAL_GPIO_Init+0x2bc>)
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005e2c:	4b22      	ldr	r3, [pc, #136]	; (8005eb8 <HAL_GPIO_Init+0x2bc>)
 8005e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e32:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	43db      	mvns	r3, r3
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005e52:	4a19      	ldr	r2, [pc, #100]	; (8005eb8 <HAL_GPIO_Init+0x2bc>)
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005e5a:	4b17      	ldr	r3, [pc, #92]	; (8005eb8 <HAL_GPIO_Init+0x2bc>)
 8005e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e60:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	43db      	mvns	r3, r3
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005e80:	4a0d      	ldr	r2, [pc, #52]	; (8005eb8 <HAL_GPIO_Init+0x2bc>)
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	fa22 f303 	lsr.w	r3, r2, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f47f aeb7 	bne.w	8005c0c <HAL_GPIO_Init+0x10>
  }
}
 8005e9e:	bf00      	nop
 8005ea0:	bf00      	nop
 8005ea2:	371c      	adds	r7, #28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bc80      	pop	{r7}
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40010000 	.word	0x40010000
 8005eb0:	48000400 	.word	0x48000400
 8005eb4:	48000800 	.word	0x48000800
 8005eb8:	58000800 	.word	0x58000800

08005ebc <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005eca:	e0af      	b.n	800602c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005ecc:	2201      	movs	r2, #1
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80a2 	beq.w	8006026 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005ee2:	4a59      	ldr	r2, [pc, #356]	; (8006048 <HAL_GPIO_DeInit+0x18c>)
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	089b      	lsrs	r3, r3, #2
 8005ee8:	3302      	adds	r3, #2
 8005eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eee:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	2207      	movs	r2, #7
 8005efa:	fa02 f303 	lsl.w	r3, r2, r3
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4013      	ands	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005f0a:	d00d      	beq.n	8005f28 <HAL_GPIO_DeInit+0x6c>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a4f      	ldr	r2, [pc, #316]	; (800604c <HAL_GPIO_DeInit+0x190>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d007      	beq.n	8005f24 <HAL_GPIO_DeInit+0x68>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a4e      	ldr	r2, [pc, #312]	; (8006050 <HAL_GPIO_DeInit+0x194>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d101      	bne.n	8005f20 <HAL_GPIO_DeInit+0x64>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e004      	b.n	8005f2a <HAL_GPIO_DeInit+0x6e>
 8005f20:	2307      	movs	r3, #7
 8005f22:	e002      	b.n	8005f2a <HAL_GPIO_DeInit+0x6e>
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <HAL_GPIO_DeInit+0x6e>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	f002 0203 	and.w	r2, r2, #3
 8005f30:	0092      	lsls	r2, r2, #2
 8005f32:	4093      	lsls	r3, r2
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d136      	bne.n	8005fa8 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005f3a:	4b46      	ldr	r3, [pc, #280]	; (8006054 <HAL_GPIO_DeInit+0x198>)
 8005f3c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	43db      	mvns	r3, r3
 8005f44:	4943      	ldr	r1, [pc, #268]	; (8006054 <HAL_GPIO_DeInit+0x198>)
 8005f46:	4013      	ands	r3, r2
 8005f48:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005f4c:	4b41      	ldr	r3, [pc, #260]	; (8006054 <HAL_GPIO_DeInit+0x198>)
 8005f4e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	43db      	mvns	r3, r3
 8005f56:	493f      	ldr	r1, [pc, #252]	; (8006054 <HAL_GPIO_DeInit+0x198>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005f5e:	4b3d      	ldr	r3, [pc, #244]	; (8006054 <HAL_GPIO_DeInit+0x198>)
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	43db      	mvns	r3, r3
 8005f66:	493b      	ldr	r1, [pc, #236]	; (8006054 <HAL_GPIO_DeInit+0x198>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005f6c:	4b39      	ldr	r3, [pc, #228]	; (8006054 <HAL_GPIO_DeInit+0x198>)
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	43db      	mvns	r3, r3
 8005f74:	4937      	ldr	r1, [pc, #220]	; (8006054 <HAL_GPIO_DeInit+0x198>)
 8005f76:	4013      	ands	r3, r2
 8005f78:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	2207      	movs	r2, #7
 8005f84:	fa02 f303 	lsl.w	r3, r2, r3
 8005f88:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005f8a:	4a2f      	ldr	r2, [pc, #188]	; (8006048 <HAL_GPIO_DeInit+0x18c>)
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	089b      	lsrs	r3, r3, #2
 8005f90:	3302      	adds	r3, #2
 8005f92:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	43da      	mvns	r2, r3
 8005f9a:	482b      	ldr	r0, [pc, #172]	; (8006048 <HAL_GPIO_DeInit+0x18c>)
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	089b      	lsrs	r3, r3, #2
 8005fa0:	400a      	ands	r2, r1
 8005fa2:	3302      	adds	r3, #2
 8005fa4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	2103      	movs	r1, #3
 8005fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	08da      	lsrs	r2, r3, #3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3208      	adds	r2, #8
 8005fc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	220f      	movs	r2, #15
 8005fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd6:	43db      	mvns	r3, r3
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	08d2      	lsrs	r2, r2, #3
 8005fdc:	4019      	ands	r1, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3208      	adds	r2, #8
 8005fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689a      	ldr	r2, [r3, #8]
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	2103      	movs	r1, #3
 8005ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	401a      	ands	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	2101      	movs	r1, #1
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	fa01 f303 	lsl.w	r3, r1, r3
 8006008:	43db      	mvns	r3, r3
 800600a:	401a      	ands	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	2103      	movs	r1, #3
 800601a:	fa01 f303 	lsl.w	r3, r1, r3
 800601e:	43db      	mvns	r3, r3
 8006020:	401a      	ands	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	60da      	str	r2, [r3, #12]
    }

    position++;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	3301      	adds	r3, #1
 800602a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	fa22 f303 	lsr.w	r3, r2, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	f47f af49 	bne.w	8005ecc <HAL_GPIO_DeInit+0x10>
  }
}
 800603a:	bf00      	nop
 800603c:	bf00      	nop
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	40010000 	.word	0x40010000
 800604c:	48000400 	.word	0x48000400
 8006050:	48000800 	.word	0x48000800
 8006054:	58000800 	.word	0x58000800

08006058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	807b      	strh	r3, [r7, #2]
 8006064:	4613      	mov	r3, r2
 8006066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006068:	787b      	ldrb	r3, [r7, #1]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800606e:	887a      	ldrh	r2, [r7, #2]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006074:	e002      	b.n	800607c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006076:	887a      	ldrh	r2, [r7, #2]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	bc80      	pop	{r7}
 8006084:	4770      	bx	lr

08006086 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	460b      	mov	r3, r1
 8006090:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006098:	887a      	ldrh	r2, [r7, #2]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4013      	ands	r3, r2
 800609e:	041a      	lsls	r2, r3, #16
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	43d9      	mvns	r1, r3
 80060a4:	887b      	ldrh	r3, [r7, #2]
 80060a6:	400b      	ands	r3, r1
 80060a8:	431a      	orrs	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	619a      	str	r2, [r3, #24]
}
 80060ae:	bf00      	nop
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bc80      	pop	{r7}
 80060b6:	4770      	bx	lr

080060b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e081      	b.n	80061ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d106      	bne.n	80060e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7fb fe10 	bl	8001d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2224      	movs	r2, #36	; 0x24
 80060e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0201 	bic.w	r2, r2, #1
 80060fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006108:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006118:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d107      	bne.n	8006132 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689a      	ldr	r2, [r3, #8]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800612e:	609a      	str	r2, [r3, #8]
 8006130:	e006      	b.n	8006140 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800613e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	2b02      	cmp	r3, #2
 8006146:	d104      	bne.n	8006152 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006150:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6812      	ldr	r2, [r2, #0]
 800615c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006164:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006174:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691a      	ldr	r2, [r3, #16]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	69d9      	ldr	r1, [r3, #28]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1a      	ldr	r2, [r3, #32]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0201 	orr.w	r2, r2, #1
 80061ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
	...

080061d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af02      	add	r7, sp, #8
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	607a      	str	r2, [r7, #4]
 80061e2:	461a      	mov	r2, r3
 80061e4:	460b      	mov	r3, r1
 80061e6:	817b      	strh	r3, [r7, #10]
 80061e8:	4613      	mov	r3, r2
 80061ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b20      	cmp	r3, #32
 80061f6:	f040 80da 	bne.w	80063ae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006200:	2b01      	cmp	r3, #1
 8006202:	d101      	bne.n	8006208 <HAL_I2C_Master_Transmit+0x30>
 8006204:	2302      	movs	r3, #2
 8006206:	e0d3      	b.n	80063b0 <HAL_I2C_Master_Transmit+0x1d8>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006210:	f7fc fc36 	bl	8002a80 <HAL_GetTick>
 8006214:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	2319      	movs	r3, #25
 800621c:	2201      	movs	r2, #1
 800621e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 f9e5 	bl	80065f2 <I2C_WaitOnFlagUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e0be      	b.n	80063b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2221      	movs	r2, #33	; 0x21
 8006236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2210      	movs	r2, #16
 800623e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	893a      	ldrh	r2, [r7, #8]
 8006252:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625e:	b29b      	uxth	r3, r3
 8006260:	2bff      	cmp	r3, #255	; 0xff
 8006262:	d90e      	bls.n	8006282 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	22ff      	movs	r2, #255	; 0xff
 8006268:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800626e:	b2da      	uxtb	r2, r3
 8006270:	8979      	ldrh	r1, [r7, #10]
 8006272:	4b51      	ldr	r3, [pc, #324]	; (80063b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 fbdc 	bl	8006a38 <I2C_TransferConfig>
 8006280:	e06c      	b.n	800635c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006290:	b2da      	uxtb	r2, r3
 8006292:	8979      	ldrh	r1, [r7, #10]
 8006294:	4b48      	ldr	r3, [pc, #288]	; (80063b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 fbcb 	bl	8006a38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80062a2:	e05b      	b.n	800635c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	6a39      	ldr	r1, [r7, #32]
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f9e2 	bl	8006672 <I2C_WaitOnTXISFlagUntilTimeout>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e07b      	b.n	80063b0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	781a      	ldrb	r2, [r3, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	3b01      	subs	r3, #1
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d034      	beq.n	800635c <HAL_I2C_Master_Transmit+0x184>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d130      	bne.n	800635c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	2200      	movs	r2, #0
 8006302:	2180      	movs	r1, #128	; 0x80
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 f974 	bl	80065f2 <I2C_WaitOnFlagUntilTimeout>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e04d      	b.n	80063b0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006318:	b29b      	uxth	r3, r3
 800631a:	2bff      	cmp	r3, #255	; 0xff
 800631c:	d90e      	bls.n	800633c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	22ff      	movs	r2, #255	; 0xff
 8006322:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006328:	b2da      	uxtb	r2, r3
 800632a:	8979      	ldrh	r1, [r7, #10]
 800632c:	2300      	movs	r3, #0
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 fb7f 	bl	8006a38 <I2C_TransferConfig>
 800633a:	e00f      	b.n	800635c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800634a:	b2da      	uxtb	r2, r3
 800634c:	8979      	ldrh	r1, [r7, #10]
 800634e:	2300      	movs	r3, #0
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 fb6e 	bl	8006a38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d19e      	bne.n	80062a4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	6a39      	ldr	r1, [r7, #32]
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f9c1 	bl	80066f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e01a      	b.n	80063b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2220      	movs	r2, #32
 8006380:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6859      	ldr	r1, [r3, #4]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <HAL_I2C_Master_Transmit+0x1e4>)
 800638e:	400b      	ands	r3, r1
 8006390:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2220      	movs	r2, #32
 8006396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e000      	b.n	80063b0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80063ae:	2302      	movs	r3, #2
  }
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	80002000 	.word	0x80002000
 80063bc:	fe00e800 	.word	0xfe00e800

080063c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af02      	add	r7, sp, #8
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	607a      	str	r2, [r7, #4]
 80063ca:	461a      	mov	r2, r3
 80063cc:	460b      	mov	r3, r1
 80063ce:	817b      	strh	r3, [r7, #10]
 80063d0:	4613      	mov	r3, r2
 80063d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b20      	cmp	r3, #32
 80063de:	f040 80db 	bne.w	8006598 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_I2C_Master_Receive+0x30>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e0d4      	b.n	800659a <HAL_I2C_Master_Receive+0x1da>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063f8:	f7fc fb42 	bl	8002a80 <HAL_GetTick>
 80063fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	2319      	movs	r3, #25
 8006404:	2201      	movs	r2, #1
 8006406:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 f8f1 	bl	80065f2 <I2C_WaitOnFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e0bf      	b.n	800659a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2222      	movs	r2, #34	; 0x22
 800641e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2210      	movs	r2, #16
 8006426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	893a      	ldrh	r2, [r7, #8]
 800643a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006446:	b29b      	uxth	r3, r3
 8006448:	2bff      	cmp	r3, #255	; 0xff
 800644a:	d90e      	bls.n	800646a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	22ff      	movs	r2, #255	; 0xff
 8006450:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006456:	b2da      	uxtb	r2, r3
 8006458:	8979      	ldrh	r1, [r7, #10]
 800645a:	4b52      	ldr	r3, [pc, #328]	; (80065a4 <HAL_I2C_Master_Receive+0x1e4>)
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fae8 	bl	8006a38 <I2C_TransferConfig>
 8006468:	e06d      	b.n	8006546 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006478:	b2da      	uxtb	r2, r3
 800647a:	8979      	ldrh	r1, [r7, #10]
 800647c:	4b49      	ldr	r3, [pc, #292]	; (80065a4 <HAL_I2C_Master_Receive+0x1e4>)
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fad7 	bl	8006a38 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800648a:	e05c      	b.n	8006546 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	6a39      	ldr	r1, [r7, #32]
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 f96b 	bl	800676c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e07c      	b.n	800659a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	3b01      	subs	r3, #1
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d034      	beq.n	8006546 <HAL_I2C_Master_Receive+0x186>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d130      	bne.n	8006546 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	2200      	movs	r2, #0
 80064ec:	2180      	movs	r1, #128	; 0x80
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 f87f 	bl	80065f2 <I2C_WaitOnFlagUntilTimeout>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e04d      	b.n	800659a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006502:	b29b      	uxth	r3, r3
 8006504:	2bff      	cmp	r3, #255	; 0xff
 8006506:	d90e      	bls.n	8006526 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	22ff      	movs	r2, #255	; 0xff
 800650c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006512:	b2da      	uxtb	r2, r3
 8006514:	8979      	ldrh	r1, [r7, #10]
 8006516:	2300      	movs	r3, #0
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 fa8a 	bl	8006a38 <I2C_TransferConfig>
 8006524:	e00f      	b.n	8006546 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652a:	b29a      	uxth	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006534:	b2da      	uxtb	r2, r3
 8006536:	8979      	ldrh	r1, [r7, #10]
 8006538:	2300      	movs	r3, #0
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 fa79 	bl	8006a38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654a:	b29b      	uxth	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	d19d      	bne.n	800648c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	6a39      	ldr	r1, [r7, #32]
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 f8cc 	bl	80066f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e01a      	b.n	800659a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2220      	movs	r2, #32
 800656a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6859      	ldr	r1, [r3, #4]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <HAL_I2C_Master_Receive+0x1e8>)
 8006578:	400b      	ands	r3, r1
 800657a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2220      	movs	r2, #32
 8006580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	e000      	b.n	800659a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006598:	2302      	movs	r3, #2
  }
}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	80002400 	.word	0x80002400
 80065a8:	fe00e800 	.word	0xfe00e800

080065ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d103      	bne.n	80065ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2200      	movs	r2, #0
 80065c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d007      	beq.n	80065e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699a      	ldr	r2, [r3, #24]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0201 	orr.w	r2, r2, #1
 80065e6:	619a      	str	r2, [r3, #24]
  }
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bc80      	pop	{r7}
 80065f0:	4770      	bx	lr

080065f2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	60f8      	str	r0, [r7, #12]
 80065fa:	60b9      	str	r1, [r7, #8]
 80065fc:	603b      	str	r3, [r7, #0]
 80065fe:	4613      	mov	r3, r2
 8006600:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006602:	e022      	b.n	800664a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660a:	d01e      	beq.n	800664a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800660c:	f7fc fa38 	bl	8002a80 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d302      	bcc.n	8006622 <I2C_WaitOnFlagUntilTimeout+0x30>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d113      	bne.n	800664a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006626:	f043 0220 	orr.w	r2, r3, #32
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e00f      	b.n	800666a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	699a      	ldr	r2, [r3, #24]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4013      	ands	r3, r2
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	429a      	cmp	r2, r3
 8006658:	bf0c      	ite	eq
 800665a:	2301      	moveq	r3, #1
 800665c:	2300      	movne	r3, #0
 800665e:	b2db      	uxtb	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	429a      	cmp	r2, r3
 8006666:	d0cd      	beq.n	8006604 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	60b9      	str	r1, [r7, #8]
 800667c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800667e:	e02c      	b.n	80066da <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 f8eb 	bl	8006860 <I2C_IsErrorOccurred>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e02a      	b.n	80066ea <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669a:	d01e      	beq.n	80066da <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800669c:	f7fc f9f0 	bl	8002a80 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d302      	bcc.n	80066b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d113      	bne.n	80066da <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b6:	f043 0220 	orr.w	r2, r3, #32
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e007      	b.n	80066ea <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d1cb      	bne.n	8006680 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b084      	sub	sp, #16
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066fe:	e028      	b.n	8006752 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	68b9      	ldr	r1, [r7, #8]
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 f8ab 	bl	8006860 <I2C_IsErrorOccurred>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e026      	b.n	8006762 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006714:	f7fc f9b4 	bl	8002a80 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	429a      	cmp	r2, r3
 8006722:	d302      	bcc.n	800672a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d113      	bne.n	8006752 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672e:	f043 0220 	orr.w	r2, r3, #32
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2220      	movs	r2, #32
 800673a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e007      	b.n	8006762 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b20      	cmp	r3, #32
 800675e:	d1cf      	bne.n	8006700 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
	...

0800676c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006778:	e064      	b.n	8006844 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 f86e 	bl	8006860 <I2C_IsErrorOccurred>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e062      	b.n	8006854 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	f003 0320 	and.w	r3, r3, #32
 8006798:	2b20      	cmp	r3, #32
 800679a:	d138      	bne.n	800680e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d105      	bne.n	80067b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	e04e      	b.n	8006854 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	f003 0310 	and.w	r3, r3, #16
 80067c0:	2b10      	cmp	r3, #16
 80067c2:	d107      	bne.n	80067d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2210      	movs	r2, #16
 80067ca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2204      	movs	r2, #4
 80067d0:	645a      	str	r2, [r3, #68]	; 0x44
 80067d2:	e002      	b.n	80067da <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2220      	movs	r2, #32
 80067e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6859      	ldr	r1, [r3, #4]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	4b1b      	ldr	r3, [pc, #108]	; (800685c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80067ee:	400b      	ands	r3, r1
 80067f0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e022      	b.n	8006854 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800680e:	f7fc f937 	bl	8002a80 <HAL_GetTick>
 8006812:	4602      	mov	r2, r0
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	429a      	cmp	r2, r3
 800681c:	d302      	bcc.n	8006824 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10f      	bne.n	8006844 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006828:	f043 0220 	orr.w	r2, r3, #32
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2220      	movs	r2, #32
 8006834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e007      	b.n	8006854 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	f003 0304 	and.w	r3, r3, #4
 800684e:	2b04      	cmp	r3, #4
 8006850:	d193      	bne.n	800677a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	fe00e800 	.word	0xfe00e800

08006860 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08a      	sub	sp, #40	; 0x28
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800687a:	2300      	movs	r3, #0
 800687c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	f003 0310 	and.w	r3, r3, #16
 8006888:	2b00      	cmp	r3, #0
 800688a:	d075      	beq.n	8006978 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2210      	movs	r2, #16
 8006892:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006894:	e056      	b.n	8006944 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689c:	d052      	beq.n	8006944 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800689e:	f7fc f8ef 	bl	8002a80 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d302      	bcc.n	80068b4 <I2C_IsErrorOccurred+0x54>
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d147      	bne.n	8006944 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068d6:	d12e      	bne.n	8006936 <I2C_IsErrorOccurred+0xd6>
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068de:	d02a      	beq.n	8006936 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80068e0:	7cfb      	ldrb	r3, [r7, #19]
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	d027      	beq.n	8006936 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068f4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80068f6:	f7fc f8c3 	bl	8002a80 <HAL_GetTick>
 80068fa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068fc:	e01b      	b.n	8006936 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80068fe:	f7fc f8bf 	bl	8002a80 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b19      	cmp	r3, #25
 800690a:	d914      	bls.n	8006936 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006910:	f043 0220 	orr.w	r2, r3, #32
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2220      	movs	r2, #32
 800691c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	f003 0320 	and.w	r3, r3, #32
 8006940:	2b20      	cmp	r3, #32
 8006942:	d1dc      	bne.n	80068fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	2b20      	cmp	r3, #32
 8006950:	d003      	beq.n	800695a <I2C_IsErrorOccurred+0xfa>
 8006952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006956:	2b00      	cmp	r3, #0
 8006958:	d09d      	beq.n	8006896 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800695a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800695e:	2b00      	cmp	r3, #0
 8006960:	d103      	bne.n	800696a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2220      	movs	r2, #32
 8006968:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	f043 0304 	orr.w	r3, r3, #4
 8006970:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00b      	beq.n	80069a2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	f043 0301 	orr.w	r3, r3, #1
 8006990:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800699a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00b      	beq.n	80069c4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	f043 0308 	orr.w	r3, r3, #8
 80069b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00b      	beq.n	80069e6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80069ce:	6a3b      	ldr	r3, [r7, #32]
 80069d0:	f043 0302 	orr.w	r3, r3, #2
 80069d4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80069e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d01c      	beq.n	8006a28 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f7ff fddc 	bl	80065ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6859      	ldr	r1, [r3, #4]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	4b0d      	ldr	r3, [pc, #52]	; (8006a34 <I2C_IsErrorOccurred+0x1d4>)
 8006a00:	400b      	ands	r3, r1
 8006a02:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2220      	movs	r2, #32
 8006a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3728      	adds	r7, #40	; 0x28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	fe00e800 	.word	0xfe00e800

08006a38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	607b      	str	r3, [r7, #4]
 8006a42:	460b      	mov	r3, r1
 8006a44:	817b      	strh	r3, [r7, #10]
 8006a46:	4613      	mov	r3, r2
 8006a48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a4a:	897b      	ldrh	r3, [r7, #10]
 8006a4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a50:	7a7b      	ldrb	r3, [r7, #9]
 8006a52:	041b      	lsls	r3, r3, #16
 8006a54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a58:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a66:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	0d5b      	lsrs	r3, r3, #21
 8006a72:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006a76:	4b07      	ldr	r3, [pc, #28]	; (8006a94 <I2C_TransferConfig+0x5c>)
 8006a78:	430b      	orrs	r3, r1
 8006a7a:	43db      	mvns	r3, r3
 8006a7c:	ea02 0103 	and.w	r1, r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a8a:	bf00      	nop
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bc80      	pop	{r7}
 8006a92:	4770      	bx	lr
 8006a94:	03ff63ff 	.word	0x03ff63ff

08006a98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d138      	bne.n	8006b20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e032      	b.n	8006b22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2224      	movs	r2, #36	; 0x24
 8006ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0201 	bic.w	r2, r2, #1
 8006ada:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006aea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6819      	ldr	r1, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0201 	orr.w	r2, r2, #1
 8006b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	e000      	b.n	8006b22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b20:	2302      	movs	r3, #2
  }
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr

08006b2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b20      	cmp	r3, #32
 8006b40:	d139      	bne.n	8006bb6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d101      	bne.n	8006b50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	e033      	b.n	8006bb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2224      	movs	r2, #36	; 0x24
 8006b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0201 	bic.w	r2, r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	021b      	lsls	r3, r3, #8
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 0201 	orr.w	r2, r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	e000      	b.n	8006bb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006bb6:	2302      	movs	r3, #2
  }
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bc80      	pop	{r7}
 8006bc0:	4770      	bx	lr
	...

08006bc4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bc8:	4b04      	ldr	r3, [pc, #16]	; (8006bdc <HAL_PWR_EnableBkUpAccess+0x18>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a03      	ldr	r2, [pc, #12]	; (8006bdc <HAL_PWR_EnableBkUpAccess+0x18>)
 8006bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bd2:	6013      	str	r3, [r2, #0]
}
 8006bd4:	bf00      	nop
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bc80      	pop	{r7}
 8006bda:	4770      	bx	lr
 8006bdc:	58000400 	.word	0x58000400

08006be0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10c      	bne.n	8006c0c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006bf2:	4b13      	ldr	r3, [pc, #76]	; (8006c40 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bfe:	d10d      	bne.n	8006c1c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006c00:	f000 f83c 	bl	8006c7c <HAL_PWREx_DisableLowPowerRunMode>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d008      	beq.n	8006c1c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8006c0a:	e015      	b.n	8006c38 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8006c0c:	4b0c      	ldr	r3, [pc, #48]	; (8006c40 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8006c18:	f000 f822 	bl	8006c60 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006c1c:	4b09      	ldr	r3, [pc, #36]	; (8006c44 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	4a08      	ldr	r2, [pc, #32]	; (8006c44 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006c22:	f023 0304 	bic.w	r3, r3, #4
 8006c26:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d101      	bne.n	8006c32 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006c2e:	bf30      	wfi
 8006c30:	e002      	b.n	8006c38 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006c32:	bf40      	sev
    __WFE();
 8006c34:	bf20      	wfe
    __WFE();
 8006c36:	bf20      	wfe
  }
}
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	58000400 	.word	0x58000400
 8006c44:	e000ed00 	.word	0xe000ed00

08006c48 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006c4c:	4b03      	ldr	r3, [pc, #12]	; (8006c5c <HAL_PWREx_GetVoltageRange+0x14>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr
 8006c5c:	58000400 	.word	0x58000400

08006c60 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006c60:	b480      	push	{r7}
 8006c62:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006c64:	4b04      	ldr	r3, [pc, #16]	; (8006c78 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a03      	ldr	r2, [pc, #12]	; (8006c78 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c6e:	6013      	str	r3, [r2, #0]
}
 8006c70:	bf00      	nop
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bc80      	pop	{r7}
 8006c76:	4770      	bx	lr
 8006c78:	58000400 	.word	0x58000400

08006c7c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8006c82:	4b16      	ldr	r3, [pc, #88]	; (8006cdc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a15      	ldr	r2, [pc, #84]	; (8006cdc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006c88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c8c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8006c8e:	4b14      	ldr	r3, [pc, #80]	; (8006ce0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2232      	movs	r2, #50	; 0x32
 8006c94:	fb02 f303 	mul.w	r3, r2, r3
 8006c98:	4a12      	ldr	r2, [pc, #72]	; (8006ce4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8006c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9e:	0c9b      	lsrs	r3, r3, #18
 8006ca0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006ca2:	e002      	b.n	8006caa <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006caa:	4b0c      	ldr	r3, [pc, #48]	; (8006cdc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb6:	d102      	bne.n	8006cbe <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1f2      	bne.n	8006ca4 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006cbe:	4b07      	ldr	r3, [pc, #28]	; (8006cdc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cca:	d101      	bne.n	8006cd0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e000      	b.n	8006cd2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bc80      	pop	{r7}
 8006cda:	4770      	bx	lr
 8006cdc:	58000400 	.word	0x58000400
 8006ce0:	2000000c 	.word	0x2000000c
 8006ce4:	431bde83 	.word	0x431bde83

08006ce8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8006cf2:	4b10      	ldr	r3, [pc, #64]	; (8006d34 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f023 0307 	bic.w	r3, r3, #7
 8006cfa:	4a0e      	ldr	r2, [pc, #56]	; (8006d34 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006cfc:	f043 0302 	orr.w	r3, r3, #2
 8006d00:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006d02:	4b0d      	ldr	r3, [pc, #52]	; (8006d38 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	4a0c      	ldr	r2, [pc, #48]	; (8006d38 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006d08:	f043 0304 	orr.w	r3, r3, #4
 8006d0c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d101      	bne.n	8006d18 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006d14:	bf30      	wfi
 8006d16:	e002      	b.n	8006d1e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006d18:	bf40      	sev
    __WFE();
 8006d1a:	bf20      	wfe
    __WFE();
 8006d1c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006d1e:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	4a05      	ldr	r2, [pc, #20]	; (8006d38 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006d24:	f023 0304 	bic.w	r3, r3, #4
 8006d28:	6113      	str	r3, [r2, #16]
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bc80      	pop	{r7}
 8006d32:	4770      	bx	lr
 8006d34:	58000400 	.word	0x58000400
 8006d38:	e000ed00 	.word	0xe000ed00

08006d3c <LL_PWR_IsEnabledBkUpAccess>:
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006d40:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d4c:	d101      	bne.n	8006d52 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr
 8006d5c:	58000400 	.word	0x58000400

08006d60 <LL_RCC_HSE_EnableTcxo>:
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d72:	6013      	str	r3, [r2, #0]
}
 8006d74:	bf00      	nop
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bc80      	pop	{r7}
 8006d7a:	4770      	bx	lr

08006d7c <LL_RCC_HSE_DisableTcxo>:
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d8e:	6013      	str	r3, [r2, #0]
}
 8006d90:	bf00      	nop
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bc80      	pop	{r7}
 8006d96:	4770      	bx	lr

08006d98 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006d98:	b480      	push	{r7}
 8006d9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006daa:	d101      	bne.n	8006db0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006dac:	2301      	movs	r3, #1
 8006dae:	e000      	b.n	8006db2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bc80      	pop	{r7}
 8006db8:	4770      	bx	lr

08006dba <LL_RCC_HSE_Enable>:
{
 8006dba:	b480      	push	{r7}
 8006dbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dcc:	6013      	str	r3, [r2, #0]
}
 8006dce:	bf00      	nop
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bc80      	pop	{r7}
 8006dd4:	4770      	bx	lr

08006dd6 <LL_RCC_HSE_Disable>:
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006de8:	6013      	str	r3, [r2, #0]
}
 8006dea:	bf00      	nop
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr

08006df2 <LL_RCC_HSE_IsReady>:
{
 8006df2:	b480      	push	{r7}
 8006df4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e04:	d101      	bne.n	8006e0a <LL_RCC_HSE_IsReady+0x18>
 8006e06:	2301      	movs	r3, #1
 8006e08:	e000      	b.n	8006e0c <LL_RCC_HSE_IsReady+0x1a>
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr

08006e14 <LL_RCC_HSI_Enable>:
{
 8006e14:	b480      	push	{r7}
 8006e16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e26:	6013      	str	r3, [r2, #0]
}
 8006e28:	bf00      	nop
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bc80      	pop	{r7}
 8006e2e:	4770      	bx	lr

08006e30 <LL_RCC_HSI_Disable>:
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e42:	6013      	str	r3, [r2, #0]
}
 8006e44:	bf00      	nop
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr

08006e4c <LL_RCC_HSI_IsReady>:
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e5e:	d101      	bne.n	8006e64 <LL_RCC_HSI_IsReady+0x18>
 8006e60:	2301      	movs	r3, #1
 8006e62:	e000      	b.n	8006e66 <LL_RCC_HSI_IsReady+0x1a>
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bc80      	pop	{r7}
 8006e6c:	4770      	bx	lr

08006e6e <LL_RCC_HSI_SetCalibTrimming>:
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	061b      	lsls	r3, r3, #24
 8006e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	604b      	str	r3, [r1, #4]
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bc80      	pop	{r7}
 8006e94:	4770      	bx	lr

08006e96 <LL_RCC_LSE_IsReady>:
{
 8006e96:	b480      	push	{r7}
 8006e98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d101      	bne.n	8006eae <LL_RCC_LSE_IsReady+0x18>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <LL_RCC_LSE_IsReady+0x1a>
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bc80      	pop	{r7}
 8006eb6:	4770      	bx	lr

08006eb8 <LL_RCC_LSI_Enable>:
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ec8:	f043 0301 	orr.w	r3, r3, #1
 8006ecc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006ed0:	bf00      	nop
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bc80      	pop	{r7}
 8006ed6:	4770      	bx	lr

08006ed8 <LL_RCC_LSI_Disable>:
{
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ee8:	f023 0301 	bic.w	r3, r3, #1
 8006eec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006ef0:	bf00      	nop
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bc80      	pop	{r7}
 8006ef6:	4770      	bx	lr

08006ef8 <LL_RCC_LSI_IsReady>:
{
 8006ef8:	b480      	push	{r7}
 8006efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d101      	bne.n	8006f10 <LL_RCC_LSI_IsReady+0x18>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e000      	b.n	8006f12 <LL_RCC_LSI_IsReady+0x1a>
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bc80      	pop	{r7}
 8006f18:	4770      	bx	lr

08006f1a <LL_RCC_MSI_Enable>:
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f28:	f043 0301 	orr.w	r3, r3, #1
 8006f2c:	6013      	str	r3, [r2, #0]
}
 8006f2e:	bf00      	nop
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bc80      	pop	{r7}
 8006f34:	4770      	bx	lr

08006f36 <LL_RCC_MSI_Disable>:
{
 8006f36:	b480      	push	{r7}
 8006f38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f44:	f023 0301 	bic.w	r3, r3, #1
 8006f48:	6013      	str	r3, [r2, #0]
}
 8006f4a:	bf00      	nop
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc80      	pop	{r7}
 8006f50:	4770      	bx	lr

08006f52 <LL_RCC_MSI_IsReady>:
{
 8006f52:	b480      	push	{r7}
 8006f54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d101      	bne.n	8006f68 <LL_RCC_MSI_IsReady+0x16>
 8006f64:	2301      	movs	r3, #1
 8006f66:	e000      	b.n	8006f6a <LL_RCC_MSI_IsReady+0x18>
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bc80      	pop	{r7}
 8006f70:	4770      	bx	lr

08006f72 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8006f72:	b480      	push	{r7}
 8006f74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d101      	bne.n	8006f88 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006f84:	2301      	movs	r3, #1
 8006f86:	e000      	b.n	8006f8a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bc80      	pop	{r7}
 8006f90:	4770      	bx	lr

08006f92 <LL_RCC_MSI_GetRange>:
{
 8006f92:	b480      	push	{r7}
 8006f94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr

08006fa8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006fa8:	b480      	push	{r7}
 8006faa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fb4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bc80      	pop	{r7}
 8006fbe:	4770      	bx	lr

08006fc0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	021b      	lsls	r3, r3, #8
 8006fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	604b      	str	r3, [r1, #4]
}
 8006fde:	bf00      	nop
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bc80      	pop	{r7}
 8006fe6:	4770      	bx	lr

08006fe8 <LL_RCC_SetSysClkSource>:
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f023 0203 	bic.w	r2, r3, #3
 8006ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4313      	orrs	r3, r2
 8007002:	608b      	str	r3, [r1, #8]
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	bc80      	pop	{r7}
 800700c:	4770      	bx	lr

0800700e <LL_RCC_GetSysClkSource>:
{
 800700e:	b480      	push	{r7}
 8007010:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f003 030c 	and.w	r3, r3, #12
}
 800701c:	4618      	mov	r0, r3
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr

08007024 <LL_RCC_SetAHBPrescaler>:
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800702c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007036:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4313      	orrs	r3, r2
 800703e:	608b      	str	r3, [r1, #8]
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	bc80      	pop	{r7}
 8007048:	4770      	bx	lr

0800704a <LL_RCC_SetAHB3Prescaler>:
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007056:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800705a:	f023 020f 	bic.w	r2, r3, #15
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	091b      	lsrs	r3, r3, #4
 8007062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007066:	4313      	orrs	r3, r2
 8007068:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	bc80      	pop	{r7}
 8007074:	4770      	bx	lr

08007076 <LL_RCC_SetAPB1Prescaler>:
{
 8007076:	b480      	push	{r7}
 8007078:	b083      	sub	sp, #12
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800707e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007088:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4313      	orrs	r3, r2
 8007090:	608b      	str	r3, [r1, #8]
}
 8007092:	bf00      	nop
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	bc80      	pop	{r7}
 800709a:	4770      	bx	lr

0800709c <LL_RCC_SetAPB2Prescaler>:
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80070a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80070ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	608b      	str	r3, [r1, #8]
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	bc80      	pop	{r7}
 80070c0:	4770      	bx	lr

080070c2 <LL_RCC_GetAHBPrescaler>:
{
 80070c2:	b480      	push	{r7}
 80070c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80070c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bc80      	pop	{r7}
 80070d6:	4770      	bx	lr

080070d8 <LL_RCC_GetAHB3Prescaler>:
{
 80070d8:	b480      	push	{r7}
 80070da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80070dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bc80      	pop	{r7}
 80070f0:	4770      	bx	lr

080070f2 <LL_RCC_GetAPB1Prescaler>:
{
 80070f2:	b480      	push	{r7}
 80070f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80070f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8007100:	4618      	mov	r0, r3
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr

08007108 <LL_RCC_GetAPB2Prescaler>:
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800710c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007116:	4618      	mov	r0, r3
 8007118:	46bd      	mov	sp, r7
 800711a:	bc80      	pop	{r7}
 800711c:	4770      	bx	lr

0800711e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800711e:	b480      	push	{r7}
 8007120:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800712c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007130:	6013      	str	r3, [r2, #0]
}
 8007132:	bf00      	nop
 8007134:	46bd      	mov	sp, r7
 8007136:	bc80      	pop	{r7}
 8007138:	4770      	bx	lr

0800713a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800713a:	b480      	push	{r7}
 800713c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800713e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007148:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800714c:	6013      	str	r3, [r2, #0]
}
 800714e:	bf00      	nop
 8007150:	46bd      	mov	sp, r7
 8007152:	bc80      	pop	{r7}
 8007154:	4770      	bx	lr

08007156 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007156:	b480      	push	{r7}
 8007158:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800715a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007164:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007168:	d101      	bne.n	800716e <LL_RCC_PLL_IsReady+0x18>
 800716a:	2301      	movs	r3, #1
 800716c:	e000      	b.n	8007170 <LL_RCC_PLL_IsReady+0x1a>
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr

08007178 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800717c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	0a1b      	lsrs	r3, r3, #8
 8007184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007188:	4618      	mov	r0, r3
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr

08007190 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007190:	b480      	push	{r7}
 8007192:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800719e:	4618      	mov	r0, r3
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr

080071a6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80071a6:	b480      	push	{r7}
 80071a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80071aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bc80      	pop	{r7}
 80071ba:	4770      	bx	lr

080071bc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80071bc:	b480      	push	{r7}
 80071be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80071c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f003 0303 	and.w	r3, r3, #3
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bc80      	pop	{r7}
 80071d0:	4770      	bx	lr

080071d2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80071d2:	b480      	push	{r7}
 80071d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80071d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071e4:	d101      	bne.n	80071ea <LL_RCC_IsActiveFlag_HPRE+0x18>
 80071e6:	2301      	movs	r3, #1
 80071e8:	e000      	b.n	80071ec <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bc80      	pop	{r7}
 80071f2:	4770      	bx	lr

080071f4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80071f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007208:	d101      	bne.n	800720e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800720a:	2301      	movs	r3, #1
 800720c:	e000      	b.n	8007210 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	46bd      	mov	sp, r7
 8007214:	bc80      	pop	{r7}
 8007216:	4770      	bx	lr

08007218 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800721c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007226:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800722a:	d101      	bne.n	8007230 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800722c:	2301      	movs	r3, #1
 800722e:	e000      	b.n	8007232 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	46bd      	mov	sp, r7
 8007236:	bc80      	pop	{r7}
 8007238:	4770      	bx	lr

0800723a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800723a:	b480      	push	{r7}
 800723c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800723e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007248:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800724c:	d101      	bne.n	8007252 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800724e:	2301      	movs	r3, #1
 8007250:	e000      	b.n	8007254 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	46bd      	mov	sp, r7
 8007258:	bc80      	pop	{r7}
 800725a:	4770      	bx	lr

0800725c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e38b      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800726e:	f7ff fece 	bl	800700e <LL_RCC_GetSysClkSource>
 8007272:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007274:	f7ff ffa2 	bl	80071bc <LL_RCC_PLL_GetMainSource>
 8007278:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0320 	and.w	r3, r3, #32
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 80c9 	beq.w	800741a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d005      	beq.n	800729a <HAL_RCC_OscConfig+0x3e>
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	2b0c      	cmp	r3, #12
 8007292:	d17b      	bne.n	800738c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d178      	bne.n	800738c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800729a:	f7ff fe5a 	bl	8006f52 <LL_RCC_MSI_IsReady>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <HAL_RCC_OscConfig+0x54>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e36a      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0308 	and.w	r3, r3, #8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d005      	beq.n	80072ce <HAL_RCC_OscConfig+0x72>
 80072c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072cc:	e006      	b.n	80072dc <HAL_RCC_OscConfig+0x80>
 80072ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072d6:	091b      	lsrs	r3, r3, #4
 80072d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072dc:	4293      	cmp	r3, r2
 80072de:	d222      	bcs.n	8007326 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 fd51 	bl	8007d8c <RCC_SetFlashLatencyFromMSIRange>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e348      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072fe:	f043 0308 	orr.w	r3, r3, #8
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007316:	4313      	orrs	r3, r2
 8007318:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	4618      	mov	r0, r3
 8007320:	f7ff fe4e 	bl	8006fc0 <LL_RCC_MSI_SetCalibTrimming>
 8007324:	e021      	b.n	800736a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007330:	f043 0308 	orr.w	r3, r3, #8
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007344:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007348:	4313      	orrs	r3, r2
 800734a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	4618      	mov	r0, r3
 8007352:	f7ff fe35 	bl	8006fc0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fd16 	bl	8007d8c <RCC_SetFlashLatencyFromMSIRange>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e30d      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800736a:	f000 fcd7 	bl	8007d1c <HAL_RCC_GetHCLKFreq>
 800736e:	4603      	mov	r3, r0
 8007370:	4aa1      	ldr	r2, [pc, #644]	; (80075f8 <HAL_RCC_OscConfig+0x39c>)
 8007372:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007374:	4ba1      	ldr	r3, [pc, #644]	; (80075fc <HAL_RCC_OscConfig+0x3a0>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f7fb fb77 	bl	8002a6c <HAL_InitTick>
 800737e:	4603      	mov	r3, r0
 8007380:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8007382:	7cfb      	ldrb	r3, [r7, #19]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d047      	beq.n	8007418 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8007388:	7cfb      	ldrb	r3, [r7, #19]
 800738a:	e2fc      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d02c      	beq.n	80073ee <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007394:	f7ff fdc1 	bl	8006f1a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007398:	f7fb fb72 	bl	8002a80 <HAL_GetTick>
 800739c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80073a0:	f7fb fb6e 	bl	8002a80 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e2e9      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80073b2:	f7ff fdce 	bl	8006f52 <LL_RCC_MSI_IsReady>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d0f1      	beq.n	80073a0 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073c6:	f043 0308 	orr.w	r3, r3, #8
 80073ca:	6013      	str	r3, [r2, #0]
 80073cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073de:	4313      	orrs	r3, r2
 80073e0:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7ff fdea 	bl	8006fc0 <LL_RCC_MSI_SetCalibTrimming>
 80073ec:	e015      	b.n	800741a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80073ee:	f7ff fda2 	bl	8006f36 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80073f2:	f7fb fb45 	bl	8002a80 <HAL_GetTick>
 80073f6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80073f8:	e008      	b.n	800740c <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80073fa:	f7fb fb41 	bl	8002a80 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d901      	bls.n	800740c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e2bc      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 800740c:	f7ff fda1 	bl	8006f52 <LL_RCC_MSI_IsReady>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1f1      	bne.n	80073fa <HAL_RCC_OscConfig+0x19e>
 8007416:	e000      	b.n	800741a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007418:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d05f      	beq.n	80074e6 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	2b08      	cmp	r3, #8
 800742a:	d005      	beq.n	8007438 <HAL_RCC_OscConfig+0x1dc>
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	2b0c      	cmp	r3, #12
 8007430:	d10d      	bne.n	800744e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b03      	cmp	r3, #3
 8007436:	d10a      	bne.n	800744e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007438:	f7ff fcdb 	bl	8006df2 <LL_RCC_HSE_IsReady>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d050      	beq.n	80074e4 <HAL_RCC_OscConfig+0x288>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d14c      	bne.n	80074e4 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e29b      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800744e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007460:	4313      	orrs	r3, r2
 8007462:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800746c:	d102      	bne.n	8007474 <HAL_RCC_OscConfig+0x218>
 800746e:	f7ff fca4 	bl	8006dba <LL_RCC_HSE_Enable>
 8007472:	e00d      	b.n	8007490 <HAL_RCC_OscConfig+0x234>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800747c:	d104      	bne.n	8007488 <HAL_RCC_OscConfig+0x22c>
 800747e:	f7ff fc6f 	bl	8006d60 <LL_RCC_HSE_EnableTcxo>
 8007482:	f7ff fc9a 	bl	8006dba <LL_RCC_HSE_Enable>
 8007486:	e003      	b.n	8007490 <HAL_RCC_OscConfig+0x234>
 8007488:	f7ff fca5 	bl	8006dd6 <LL_RCC_HSE_Disable>
 800748c:	f7ff fc76 	bl	8006d7c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d012      	beq.n	80074be <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007498:	f7fb faf2 	bl	8002a80 <HAL_GetTick>
 800749c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074a0:	f7fb faee 	bl	8002a80 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b64      	cmp	r3, #100	; 0x64
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e269      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80074b2:	f7ff fc9e 	bl	8006df2 <LL_RCC_HSE_IsReady>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d0f1      	beq.n	80074a0 <HAL_RCC_OscConfig+0x244>
 80074bc:	e013      	b.n	80074e6 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074be:	f7fb fadf 	bl	8002a80 <HAL_GetTick>
 80074c2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80074c4:	e008      	b.n	80074d8 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074c6:	f7fb fadb 	bl	8002a80 <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	2b64      	cmp	r3, #100	; 0x64
 80074d2:	d901      	bls.n	80074d8 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e256      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80074d8:	f7ff fc8b 	bl	8006df2 <LL_RCC_HSE_IsReady>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1f1      	bne.n	80074c6 <HAL_RCC_OscConfig+0x26a>
 80074e2:	e000      	b.n	80074e6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074e4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d04b      	beq.n	800758a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d005      	beq.n	8007504 <HAL_RCC_OscConfig+0x2a8>
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	2b0c      	cmp	r3, #12
 80074fc:	d113      	bne.n	8007526 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	2b02      	cmp	r3, #2
 8007502:	d110      	bne.n	8007526 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007504:	f7ff fca2 	bl	8006e4c <LL_RCC_HSI_IsReady>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d005      	beq.n	800751a <HAL_RCC_OscConfig+0x2be>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e235      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	4618      	mov	r0, r3
 8007520:	f7ff fca5 	bl	8006e6e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007524:	e031      	b.n	800758a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d019      	beq.n	8007562 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800752e:	f7ff fc71 	bl	8006e14 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007532:	f7fb faa5 	bl	8002a80 <HAL_GetTick>
 8007536:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007538:	e008      	b.n	800754c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800753a:	f7fb faa1 	bl	8002a80 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d901      	bls.n	800754c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e21c      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 800754c:	f7ff fc7e 	bl	8006e4c <LL_RCC_HSI_IsReady>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0f1      	beq.n	800753a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff fc87 	bl	8006e6e <LL_RCC_HSI_SetCalibTrimming>
 8007560:	e013      	b.n	800758a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007562:	f7ff fc65 	bl	8006e30 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007566:	f7fb fa8b 	bl	8002a80 <HAL_GetTick>
 800756a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800756c:	e008      	b.n	8007580 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800756e:	f7fb fa87 	bl	8002a80 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	2b02      	cmp	r3, #2
 800757a:	d901      	bls.n	8007580 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e202      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007580:	f7ff fc64 	bl	8006e4c <LL_RCC_HSI_IsReady>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1f1      	bne.n	800756e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0308 	and.w	r3, r3, #8
 8007592:	2b00      	cmp	r3, #0
 8007594:	d06f      	beq.n	8007676 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d057      	beq.n	800764e <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800759e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075a6:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	69da      	ldr	r2, [r3, #28]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f003 0310 	and.w	r3, r3, #16
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d036      	beq.n	8007624 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d006      	beq.n	80075ce <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e1db      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d018      	beq.n	800760a <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80075d8:	f7ff fc7e 	bl	8006ed8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80075dc:	f7fb fa50 	bl	8002a80 <HAL_GetTick>
 80075e0:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80075e2:	e00d      	b.n	8007600 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075e4:	f7fb fa4c 	bl	8002a80 <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	2b11      	cmp	r3, #17
 80075f0:	d906      	bls.n	8007600 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e1c7      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
 80075f6:	bf00      	nop
 80075f8:	2000000c 	.word	0x2000000c
 80075fc:	20000014 	.word	0x20000014
          while (LL_RCC_LSI_IsReady() != 0U)
 8007600:	f7ff fc7a 	bl	8006ef8 <LL_RCC_LSI_IsReady>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1ec      	bne.n	80075e4 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800760a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800760e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007612:	f023 0210 	bic.w	r2, r3, #16
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800761e:	4313      	orrs	r3, r2
 8007620:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007624:	f7ff fc48 	bl	8006eb8 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007628:	f7fb fa2a 	bl	8002a80 <HAL_GetTick>
 800762c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800762e:	e008      	b.n	8007642 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007630:	f7fb fa26 	bl	8002a80 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	2b11      	cmp	r3, #17
 800763c:	d901      	bls.n	8007642 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e1a1      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8007642:	f7ff fc59 	bl	8006ef8 <LL_RCC_LSI_IsReady>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d0f1      	beq.n	8007630 <HAL_RCC_OscConfig+0x3d4>
 800764c:	e013      	b.n	8007676 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800764e:	f7ff fc43 	bl	8006ed8 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007652:	f7fb fa15 	bl	8002a80 <HAL_GetTick>
 8007656:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007658:	e008      	b.n	800766c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800765a:	f7fb fa11 	bl	8002a80 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	2b11      	cmp	r3, #17
 8007666:	d901      	bls.n	800766c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e18c      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 800766c:	f7ff fc44 	bl	8006ef8 <LL_RCC_LSI_IsReady>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1f1      	bne.n	800765a <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0304 	and.w	r3, r3, #4
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 80d8 	beq.w	8007834 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007684:	f7ff fb5a 	bl	8006d3c <LL_PWR_IsEnabledBkUpAccess>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d113      	bne.n	80076b6 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800768e:	f7ff fa99 	bl	8006bc4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007692:	f7fb f9f5 	bl	8002a80 <HAL_GetTick>
 8007696:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007698:	e008      	b.n	80076ac <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800769a:	f7fb f9f1 	bl	8002a80 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e16c      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80076ac:	f7ff fb46 	bl	8006d3c <LL_PWR_IsEnabledBkUpAccess>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0f1      	beq.n	800769a <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d07b      	beq.n	80077b6 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	2b85      	cmp	r3, #133	; 0x85
 80076c4:	d003      	beq.n	80076ce <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	2b05      	cmp	r3, #5
 80076cc:	d109      	bne.n	80076e2 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80076ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076da:	f043 0304 	orr.w	r3, r3, #4
 80076de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076e2:	f7fb f9cd 	bl	8002a80 <HAL_GetTick>
 80076e6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80076e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076f4:	f043 0301 	orr.w	r3, r3, #1
 80076f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80076fc:	e00a      	b.n	8007714 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076fe:	f7fb f9bf 	bl	8002a80 <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	f241 3288 	movw	r2, #5000	; 0x1388
 800770c:	4293      	cmp	r3, r2
 800770e:	d901      	bls.n	8007714 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e138      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007714:	f7ff fbbf 	bl	8006e96 <LL_RCC_LSE_IsReady>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0ef      	beq.n	80076fe <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	2b81      	cmp	r3, #129	; 0x81
 8007724:	d003      	beq.n	800772e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	2b85      	cmp	r3, #133	; 0x85
 800772c:	d121      	bne.n	8007772 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800772e:	f7fb f9a7 	bl	8002a80 <HAL_GetTick>
 8007732:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800773c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007748:	e00a      	b.n	8007760 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800774a:	f7fb f999 	bl	8002a80 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	f241 3288 	movw	r2, #5000	; 0x1388
 8007758:	4293      	cmp	r3, r2
 800775a:	d901      	bls.n	8007760 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e112      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800776c:	2b00      	cmp	r3, #0
 800776e:	d0ec      	beq.n	800774a <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007770:	e060      	b.n	8007834 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007772:	f7fb f985 	bl	8002a80 <HAL_GetTick>
 8007776:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800777c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800778c:	e00a      	b.n	80077a4 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800778e:	f7fb f977 	bl	8002a80 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	f241 3288 	movw	r2, #5000	; 0x1388
 800779c:	4293      	cmp	r3, r2
 800779e:	d901      	bls.n	80077a4 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e0f0      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80077a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1ec      	bne.n	800778e <HAL_RCC_OscConfig+0x532>
 80077b4:	e03e      	b.n	8007834 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077b6:	f7fb f963 	bl	8002a80 <HAL_GetTick>
 80077ba:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80077bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80077d0:	e00a      	b.n	80077e8 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077d2:	f7fb f955 	bl	8002a80 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d901      	bls.n	80077e8 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e0ce      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80077e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1ec      	bne.n	80077d2 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077f8:	f7fb f942 	bl	8002a80 <HAL_GetTick>
 80077fc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80077fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007806:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800780a:	f023 0301 	bic.w	r3, r3, #1
 800780e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007812:	e00a      	b.n	800782a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007814:	f7fb f934 	bl	8002a80 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007822:	4293      	cmp	r3, r2
 8007824:	d901      	bls.n	800782a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e0ad      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800782a:	f7ff fb34 	bl	8006e96 <LL_RCC_LSE_IsReady>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1ef      	bne.n	8007814 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 80a3 	beq.w	8007984 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	2b0c      	cmp	r3, #12
 8007842:	d076      	beq.n	8007932 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007848:	2b02      	cmp	r3, #2
 800784a:	d14b      	bne.n	80078e4 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800784c:	f7ff fc75 	bl	800713a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007850:	f7fb f916 	bl	8002a80 <HAL_GetTick>
 8007854:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007856:	e008      	b.n	800786a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007858:	f7fb f912 	bl	8002a80 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	2b0a      	cmp	r3, #10
 8007864:	d901      	bls.n	800786a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e08d      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800786a:	f7ff fc74 	bl	8007156 <LL_RCC_PLL_IsReady>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1f1      	bne.n	8007858 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007878:	68da      	ldr	r2, [r3, #12]
 800787a:	4b45      	ldr	r3, [pc, #276]	; (8007990 <HAL_RCC_OscConfig+0x734>)
 800787c:	4013      	ands	r3, r2
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007886:	4311      	orrs	r1, r2
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800788c:	0212      	lsls	r2, r2, #8
 800788e:	4311      	orrs	r1, r2
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007894:	4311      	orrs	r1, r2
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800789a:	4311      	orrs	r1, r2
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80078a0:	430a      	orrs	r2, r1
 80078a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078a6:	4313      	orrs	r3, r2
 80078a8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078aa:	f7ff fc38 	bl	800711e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80078ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078bc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078be:	f7fb f8df 	bl	8002a80 <HAL_GetTick>
 80078c2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80078c4:	e008      	b.n	80078d8 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078c6:	f7fb f8db 	bl	8002a80 <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	2b0a      	cmp	r3, #10
 80078d2:	d901      	bls.n	80078d8 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e056      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80078d8:	f7ff fc3d 	bl	8007156 <LL_RCC_PLL_IsReady>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d0f1      	beq.n	80078c6 <HAL_RCC_OscConfig+0x66a>
 80078e2:	e04f      	b.n	8007984 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078e4:	f7ff fc29 	bl	800713a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80078e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078f2:	f023 0303 	bic.w	r3, r3, #3
 80078f6:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80078f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007902:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8007906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800790a:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800790c:	f7fb f8b8 	bl	8002a80 <HAL_GetTick>
 8007910:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007912:	e008      	b.n	8007926 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007914:	f7fb f8b4 	bl	8002a80 <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	2b0a      	cmp	r3, #10
 8007920:	d901      	bls.n	8007926 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e02f      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007926:	f7ff fc16 	bl	8007156 <LL_RCC_PLL_IsReady>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1f1      	bne.n	8007914 <HAL_RCC_OscConfig+0x6b8>
 8007930:	e028      	b.n	8007984 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	2b01      	cmp	r3, #1
 8007938:	d101      	bne.n	800793e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e023      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800793e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	f003 0203 	and.w	r2, r3, #3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007950:	429a      	cmp	r2, r3
 8007952:	d115      	bne.n	8007980 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795e:	429a      	cmp	r2, r3
 8007960:	d10e      	bne.n	8007980 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	021b      	lsls	r3, r3, #8
 800796e:	429a      	cmp	r2, r3
 8007970:	d106      	bne.n	8007980 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800797c:	429a      	cmp	r2, r3
 800797e:	d001      	beq.n	8007984 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e000      	b.n	8007986 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3720      	adds	r7, #32
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	11c1808c 	.word	0x11c1808c

08007994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e10f      	b.n	8007bc8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079a8:	4b89      	ldr	r3, [pc, #548]	; (8007bd0 <HAL_RCC_ClockConfig+0x23c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0307 	and.w	r3, r3, #7
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d91b      	bls.n	80079ee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079b6:	4b86      	ldr	r3, [pc, #536]	; (8007bd0 <HAL_RCC_ClockConfig+0x23c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f023 0207 	bic.w	r2, r3, #7
 80079be:	4984      	ldr	r1, [pc, #528]	; (8007bd0 <HAL_RCC_ClockConfig+0x23c>)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079c6:	f7fb f85b 	bl	8002a80 <HAL_GetTick>
 80079ca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079cc:	e008      	b.n	80079e0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80079ce:	f7fb f857 	bl	8002a80 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d901      	bls.n	80079e0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e0f3      	b.n	8007bc8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079e0:	4b7b      	ldr	r3, [pc, #492]	; (8007bd0 <HAL_RCC_ClockConfig+0x23c>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0307 	and.w	r3, r3, #7
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d1ef      	bne.n	80079ce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d016      	beq.n	8007a28 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7ff fb10 	bl	8007024 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007a04:	f7fb f83c 	bl	8002a80 <HAL_GetTick>
 8007a08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007a0a:	e008      	b.n	8007a1e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007a0c:	f7fb f838 	bl	8002a80 <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d901      	bls.n	8007a1e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e0d4      	b.n	8007bc8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007a1e:	f7ff fbd8 	bl	80071d2 <LL_RCC_IsActiveFlag_HPRE>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d0f1      	beq.n	8007a0c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d016      	beq.n	8007a62 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	695b      	ldr	r3, [r3, #20]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7ff fb06 	bl	800704a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007a3e:	f7fb f81f 	bl	8002a80 <HAL_GetTick>
 8007a42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007a44:	e008      	b.n	8007a58 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007a46:	f7fb f81b 	bl	8002a80 <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d901      	bls.n	8007a58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e0b7      	b.n	8007bc8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007a58:	f7ff fbcc 	bl	80071f4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0f1      	beq.n	8007a46 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0304 	and.w	r3, r3, #4
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d016      	beq.n	8007a9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7ff faff 	bl	8007076 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007a78:	f7fb f802 	bl	8002a80 <HAL_GetTick>
 8007a7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007a7e:	e008      	b.n	8007a92 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007a80:	f7fa fffe 	bl	8002a80 <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d901      	bls.n	8007a92 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e09a      	b.n	8007bc8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007a92:	f7ff fbc1 	bl	8007218 <LL_RCC_IsActiveFlag_PPRE1>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0f1      	beq.n	8007a80 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0308 	and.w	r3, r3, #8
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d017      	beq.n	8007ad8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	00db      	lsls	r3, r3, #3
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff faf4 	bl	800709c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007ab4:	f7fa ffe4 	bl	8002a80 <HAL_GetTick>
 8007ab8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007aba:	e008      	b.n	8007ace <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007abc:	f7fa ffe0 	bl	8002a80 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d901      	bls.n	8007ace <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e07c      	b.n	8007bc8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007ace:	f7ff fbb4 	bl	800723a <LL_RCC_IsActiveFlag_PPRE2>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d0f1      	beq.n	8007abc <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d043      	beq.n	8007b6c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d106      	bne.n	8007afa <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007aec:	f7ff f981 	bl	8006df2 <LL_RCC_HSE_IsReady>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d11e      	bne.n	8007b34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e066      	b.n	8007bc8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d106      	bne.n	8007b10 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007b02:	f7ff fb28 	bl	8007156 <LL_RCC_PLL_IsReady>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d113      	bne.n	8007b34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e05b      	b.n	8007bc8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d106      	bne.n	8007b26 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007b18:	f7ff fa1b 	bl	8006f52 <LL_RCC_MSI_IsReady>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d108      	bne.n	8007b34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e050      	b.n	8007bc8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007b26:	f7ff f991 	bl	8006e4c <LL_RCC_HSI_IsReady>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e049      	b.n	8007bc8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7ff fa55 	bl	8006fe8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b3e:	f7fa ff9f 	bl	8002a80 <HAL_GetTick>
 8007b42:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b44:	e00a      	b.n	8007b5c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b46:	f7fa ff9b 	bl	8002a80 <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d901      	bls.n	8007b5c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e035      	b.n	8007bc8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b5c:	f7ff fa57 	bl	800700e <LL_RCC_GetSysClkSource>
 8007b60:	4602      	mov	r2, r0
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d1ec      	bne.n	8007b46 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b6c:	4b18      	ldr	r3, [pc, #96]	; (8007bd0 <HAL_RCC_ClockConfig+0x23c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0307 	and.w	r3, r3, #7
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d21b      	bcs.n	8007bb2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b7a:	4b15      	ldr	r3, [pc, #84]	; (8007bd0 <HAL_RCC_ClockConfig+0x23c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f023 0207 	bic.w	r2, r3, #7
 8007b82:	4913      	ldr	r1, [pc, #76]	; (8007bd0 <HAL_RCC_ClockConfig+0x23c>)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b8a:	f7fa ff79 	bl	8002a80 <HAL_GetTick>
 8007b8e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b90:	e008      	b.n	8007ba4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007b92:	f7fa ff75 	bl	8002a80 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e011      	b.n	8007bc8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ba4:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <HAL_RCC_ClockConfig+0x23c>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d1ef      	bne.n	8007b92 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007bb2:	f000 f8b3 	bl	8007d1c <HAL_RCC_GetHCLKFreq>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	4a06      	ldr	r2, [pc, #24]	; (8007bd4 <HAL_RCC_ClockConfig+0x240>)
 8007bba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007bbc:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <HAL_RCC_ClockConfig+0x244>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fa ff53 	bl	8002a6c <HAL_InitTick>
 8007bc6:	4603      	mov	r3, r0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	58004000 	.word	0x58004000
 8007bd4:	2000000c 	.word	0x2000000c
 8007bd8:	20000014 	.word	0x20000014

08007bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bdc:	b590      	push	{r4, r7, lr}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bea:	f7ff fa10 	bl	800700e <LL_RCC_GetSysClkSource>
 8007bee:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007bf0:	f7ff fae4 	bl	80071bc <LL_RCC_PLL_GetMainSource>
 8007bf4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d005      	beq.n	8007c08 <HAL_RCC_GetSysClockFreq+0x2c>
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	2b0c      	cmp	r3, #12
 8007c00:	d139      	bne.n	8007c76 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d136      	bne.n	8007c76 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007c08:	f7ff f9b3 	bl	8006f72 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d115      	bne.n	8007c3e <HAL_RCC_GetSysClockFreq+0x62>
 8007c12:	f7ff f9ae 	bl	8006f72 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d106      	bne.n	8007c2a <HAL_RCC_GetSysClockFreq+0x4e>
 8007c1c:	f7ff f9b9 	bl	8006f92 <LL_RCC_MSI_GetRange>
 8007c20:	4603      	mov	r3, r0
 8007c22:	0a1b      	lsrs	r3, r3, #8
 8007c24:	f003 030f 	and.w	r3, r3, #15
 8007c28:	e005      	b.n	8007c36 <HAL_RCC_GetSysClockFreq+0x5a>
 8007c2a:	f7ff f9bd 	bl	8006fa8 <LL_RCC_MSI_GetRangeAfterStandby>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	0a1b      	lsrs	r3, r3, #8
 8007c32:	f003 030f 	and.w	r3, r3, #15
 8007c36:	4a36      	ldr	r2, [pc, #216]	; (8007d10 <HAL_RCC_GetSysClockFreq+0x134>)
 8007c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c3c:	e014      	b.n	8007c68 <HAL_RCC_GetSysClockFreq+0x8c>
 8007c3e:	f7ff f998 	bl	8006f72 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d106      	bne.n	8007c56 <HAL_RCC_GetSysClockFreq+0x7a>
 8007c48:	f7ff f9a3 	bl	8006f92 <LL_RCC_MSI_GetRange>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	091b      	lsrs	r3, r3, #4
 8007c50:	f003 030f 	and.w	r3, r3, #15
 8007c54:	e005      	b.n	8007c62 <HAL_RCC_GetSysClockFreq+0x86>
 8007c56:	f7ff f9a7 	bl	8006fa8 <LL_RCC_MSI_GetRangeAfterStandby>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	091b      	lsrs	r3, r3, #4
 8007c5e:	f003 030f 	and.w	r3, r3, #15
 8007c62:	4a2b      	ldr	r2, [pc, #172]	; (8007d10 <HAL_RCC_GetSysClockFreq+0x134>)
 8007c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c68:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d115      	bne.n	8007c9c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007c74:	e012      	b.n	8007c9c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	d102      	bne.n	8007c82 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007c7c:	4b25      	ldr	r3, [pc, #148]	; (8007d14 <HAL_RCC_GetSysClockFreq+0x138>)
 8007c7e:	617b      	str	r3, [r7, #20]
 8007c80:	e00c      	b.n	8007c9c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2b08      	cmp	r3, #8
 8007c86:	d109      	bne.n	8007c9c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007c88:	f7ff f886 	bl	8006d98 <LL_RCC_HSE_IsEnabledDiv2>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d102      	bne.n	8007c98 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007c92:	4b20      	ldr	r3, [pc, #128]	; (8007d14 <HAL_RCC_GetSysClockFreq+0x138>)
 8007c94:	617b      	str	r3, [r7, #20]
 8007c96:	e001      	b.n	8007c9c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007c98:	4b1f      	ldr	r3, [pc, #124]	; (8007d18 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007c9a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c9c:	f7ff f9b7 	bl	800700e <LL_RCC_GetSysClkSource>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b0c      	cmp	r3, #12
 8007ca4:	d12f      	bne.n	8007d06 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007ca6:	f7ff fa89 	bl	80071bc <LL_RCC_PLL_GetMainSource>
 8007caa:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d003      	beq.n	8007cba <HAL_RCC_GetSysClockFreq+0xde>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d003      	beq.n	8007cc0 <HAL_RCC_GetSysClockFreq+0xe4>
 8007cb8:	e00d      	b.n	8007cd6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007cba:	4b16      	ldr	r3, [pc, #88]	; (8007d14 <HAL_RCC_GetSysClockFreq+0x138>)
 8007cbc:	60fb      	str	r3, [r7, #12]
        break;
 8007cbe:	e00d      	b.n	8007cdc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007cc0:	f7ff f86a 	bl	8006d98 <LL_RCC_HSE_IsEnabledDiv2>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d102      	bne.n	8007cd0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007cca:	4b12      	ldr	r3, [pc, #72]	; (8007d14 <HAL_RCC_GetSysClockFreq+0x138>)
 8007ccc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007cce:	e005      	b.n	8007cdc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8007cd0:	4b11      	ldr	r3, [pc, #68]	; (8007d18 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007cd2:	60fb      	str	r3, [r7, #12]
        break;
 8007cd4:	e002      	b.n	8007cdc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	60fb      	str	r3, [r7, #12]
        break;
 8007cda:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007cdc:	f7ff fa4c 	bl	8007178 <LL_RCC_PLL_GetN>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	fb03 f402 	mul.w	r4, r3, r2
 8007ce8:	f7ff fa5d 	bl	80071a6 <LL_RCC_PLL_GetDivider>
 8007cec:	4603      	mov	r3, r0
 8007cee:	091b      	lsrs	r3, r3, #4
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	fbb4 f4f3 	udiv	r4, r4, r3
 8007cf6:	f7ff fa4b 	bl	8007190 <LL_RCC_PLL_GetR>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	0f5b      	lsrs	r3, r3, #29
 8007cfe:	3301      	adds	r3, #1
 8007d00:	fbb4 f3f3 	udiv	r3, r4, r3
 8007d04:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007d06:	697b      	ldr	r3, [r7, #20]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	371c      	adds	r7, #28
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd90      	pop	{r4, r7, pc}
 8007d10:	0801ef74 	.word	0x0801ef74
 8007d14:	00f42400 	.word	0x00f42400
 8007d18:	01e84800 	.word	0x01e84800

08007d1c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d1c:	b598      	push	{r3, r4, r7, lr}
 8007d1e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007d20:	f7ff ff5c 	bl	8007bdc <HAL_RCC_GetSysClockFreq>
 8007d24:	4604      	mov	r4, r0
 8007d26:	f7ff f9cc 	bl	80070c2 <LL_RCC_GetAHBPrescaler>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	091b      	lsrs	r3, r3, #4
 8007d2e:	f003 030f 	and.w	r3, r3, #15
 8007d32:	4a03      	ldr	r2, [pc, #12]	; (8007d40 <HAL_RCC_GetHCLKFreq+0x24>)
 8007d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d38:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	bd98      	pop	{r3, r4, r7, pc}
 8007d40:	0801ef14 	.word	0x0801ef14

08007d44 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d44:	b598      	push	{r3, r4, r7, lr}
 8007d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007d48:	f7ff ffe8 	bl	8007d1c <HAL_RCC_GetHCLKFreq>
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	f7ff f9d0 	bl	80070f2 <LL_RCC_GetAPB1Prescaler>
 8007d52:	4603      	mov	r3, r0
 8007d54:	0a1b      	lsrs	r3, r3, #8
 8007d56:	4a03      	ldr	r2, [pc, #12]	; (8007d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d5c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	bd98      	pop	{r3, r4, r7, pc}
 8007d64:	0801ef54 	.word	0x0801ef54

08007d68 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d68:	b598      	push	{r3, r4, r7, lr}
 8007d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007d6c:	f7ff ffd6 	bl	8007d1c <HAL_RCC_GetHCLKFreq>
 8007d70:	4604      	mov	r4, r0
 8007d72:	f7ff f9c9 	bl	8007108 <LL_RCC_GetAPB2Prescaler>
 8007d76:	4603      	mov	r3, r0
 8007d78:	0adb      	lsrs	r3, r3, #11
 8007d7a:	4a03      	ldr	r2, [pc, #12]	; (8007d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d80:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	bd98      	pop	{r3, r4, r7, pc}
 8007d88:	0801ef54 	.word	0x0801ef54

08007d8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007d8c:	b590      	push	{r4, r7, lr}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	091b      	lsrs	r3, r3, #4
 8007d98:	f003 030f 	and.w	r3, r3, #15
 8007d9c:	4a10      	ldr	r2, [pc, #64]	; (8007de0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8007d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007da2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007da4:	f7ff f998 	bl	80070d8 <LL_RCC_GetAHB3Prescaler>
 8007da8:	4603      	mov	r3, r0
 8007daa:	091b      	lsrs	r3, r3, #4
 8007dac:	f003 030f 	and.w	r3, r3, #15
 8007db0:	4a0c      	ldr	r2, [pc, #48]	; (8007de4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dbc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	4a09      	ldr	r2, [pc, #36]	; (8007de8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8007dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc6:	0c9c      	lsrs	r4, r3, #18
 8007dc8:	f7fe ff3e 	bl	8006c48 <HAL_PWREx_GetVoltageRange>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	4619      	mov	r1, r3
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f000 f80b 	bl	8007dec <RCC_SetFlashLatency>
 8007dd6:	4603      	mov	r3, r0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd90      	pop	{r4, r7, pc}
 8007de0:	0801ef74 	.word	0x0801ef74
 8007de4:	0801ef14 	.word	0x0801ef14
 8007de8:	431bde83 	.word	0x431bde83

08007dec <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b08e      	sub	sp, #56	; 0x38
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8007df6:	4a3a      	ldr	r2, [pc, #232]	; (8007ee0 <RCC_SetFlashLatency+0xf4>)
 8007df8:	f107 0320 	add.w	r3, r7, #32
 8007dfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e00:	6018      	str	r0, [r3, #0]
 8007e02:	3304      	adds	r3, #4
 8007e04:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8007e06:	4a37      	ldr	r2, [pc, #220]	; (8007ee4 <RCC_SetFlashLatency+0xf8>)
 8007e08:	f107 0318 	add.w	r3, r7, #24
 8007e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e10:	6018      	str	r0, [r3, #0]
 8007e12:	3304      	adds	r3, #4
 8007e14:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8007e16:	4a34      	ldr	r2, [pc, #208]	; (8007ee8 <RCC_SetFlashLatency+0xfc>)
 8007e18:	f107 030c 	add.w	r3, r7, #12
 8007e1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8007e1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007e22:	2300      	movs	r3, #0
 8007e24:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e2c:	d11b      	bne.n	8007e66 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007e2e:	2300      	movs	r3, #0
 8007e30:	633b      	str	r3, [r7, #48]	; 0x30
 8007e32:	e014      	b.n	8007e5e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	3338      	adds	r3, #56	; 0x38
 8007e3a:	443b      	add	r3, r7
 8007e3c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007e40:	461a      	mov	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d807      	bhi.n	8007e58 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	3338      	adds	r3, #56	; 0x38
 8007e4e:	443b      	add	r3, r7
 8007e50:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007e54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e56:	e021      	b.n	8007e9c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d9e7      	bls.n	8007e34 <RCC_SetFlashLatency+0x48>
 8007e64:	e01a      	b.n	8007e9c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007e66:	2300      	movs	r3, #0
 8007e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e6a:	e014      	b.n	8007e96 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	3338      	adds	r3, #56	; 0x38
 8007e72:	443b      	add	r3, r7
 8007e74:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d807      	bhi.n	8007e90 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	3338      	adds	r3, #56	; 0x38
 8007e86:	443b      	add	r3, r7
 8007e88:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007e8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e8e:	e005      	b.n	8007e9c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e92:	3301      	adds	r3, #1
 8007e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d9e7      	bls.n	8007e6c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007e9c:	4b13      	ldr	r3, [pc, #76]	; (8007eec <RCC_SetFlashLatency+0x100>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f023 0207 	bic.w	r2, r3, #7
 8007ea4:	4911      	ldr	r1, [pc, #68]	; (8007eec <RCC_SetFlashLatency+0x100>)
 8007ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007eac:	f7fa fde8 	bl	8002a80 <HAL_GetTick>
 8007eb0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007eb2:	e008      	b.n	8007ec6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007eb4:	f7fa fde4 	bl	8002a80 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d901      	bls.n	8007ec6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e007      	b.n	8007ed6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007ec6:	4b09      	ldr	r3, [pc, #36]	; (8007eec <RCC_SetFlashLatency+0x100>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0307 	and.w	r3, r3, #7
 8007ece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d1ef      	bne.n	8007eb4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3738      	adds	r7, #56	; 0x38
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	0801e614 	.word	0x0801e614
 8007ee4:	0801e61c 	.word	0x0801e61c
 8007ee8:	0801e624 	.word	0x0801e624
 8007eec:	58004000 	.word	0x58004000

08007ef0 <LL_RCC_LSE_IsReady>:
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efc:	f003 0302 	and.w	r3, r3, #2
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d101      	bne.n	8007f08 <LL_RCC_LSE_IsReady+0x18>
 8007f04:	2301      	movs	r3, #1
 8007f06:	e000      	b.n	8007f0a <LL_RCC_LSE_IsReady+0x1a>
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bc80      	pop	{r7}
 8007f10:	4770      	bx	lr

08007f12 <LL_RCC_SetUSARTClockSource>:
{
 8007f12:	b480      	push	{r7}
 8007f14:	b083      	sub	sp, #12
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	0c1b      	lsrs	r3, r3, #16
 8007f26:	43db      	mvns	r3, r3
 8007f28:	401a      	ands	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f32:	4313      	orrs	r3, r2
 8007f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bc80      	pop	{r7}
 8007f40:	4770      	bx	lr

08007f42 <LL_RCC_SetI2SClockSource>:
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bc80      	pop	{r7}
 8007f6a:	4770      	bx	lr

08007f6c <LL_RCC_SetLPUARTClockSource>:
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bc80      	pop	{r7}
 8007f94:	4770      	bx	lr

08007f96 <LL_RCC_SetI2CClockSource>:
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	091b      	lsrs	r3, r3, #4
 8007faa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007fae:	43db      	mvns	r3, r3
 8007fb0:	401a      	ands	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007fba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bc80      	pop	{r7}
 8007fcc:	4770      	bx	lr

08007fce <LL_RCC_SetLPTIMClockSource>:
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fda:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	0c1b      	lsrs	r3, r3, #16
 8007fe2:	041b      	lsls	r3, r3, #16
 8007fe4:	43db      	mvns	r3, r3
 8007fe6:	401a      	ands	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	041b      	lsls	r3, r3, #16
 8007fec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bc80      	pop	{r7}
 8007ffe:	4770      	bx	lr

08008000 <LL_RCC_SetRNGClockSource>:
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800800c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008010:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008014:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4313      	orrs	r3, r2
 800801c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	bc80      	pop	{r7}
 8008028:	4770      	bx	lr

0800802a <LL_RCC_SetADCClockSource>:
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800803a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800803e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4313      	orrs	r3, r2
 8008046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800804a:	bf00      	nop
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	bc80      	pop	{r7}
 8008052:	4770      	bx	lr

08008054 <LL_RCC_SetRTCClockSource>:
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800805c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008068:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4313      	orrs	r3, r2
 8008070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	bc80      	pop	{r7}
 800807c:	4770      	bx	lr

0800807e <LL_RCC_GetRTCClockSource>:
{
 800807e:	b480      	push	{r7}
 8008080:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800808a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800808e:	4618      	mov	r0, r3
 8008090:	46bd      	mov	sp, r7
 8008092:	bc80      	pop	{r7}
 8008094:	4770      	bx	lr

08008096 <LL_RCC_ForceBackupDomainReset>:
{
 8008096:	b480      	push	{r7}
 8008098:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800809a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800809e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80080ae:	bf00      	nop
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bc80      	pop	{r7}
 80080b4:	4770      	bx	lr

080080b6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80080b6:	b480      	push	{r7}
 80080b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80080ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80080ce:	bf00      	nop
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bc80      	pop	{r7}
 80080d4:	4770      	bx	lr
	...

080080d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80080e0:	2300      	movs	r3, #0
 80080e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80080e4:	2300      	movs	r3, #0
 80080e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80080e8:	2300      	movs	r3, #0
 80080ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d058      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80080f8:	f7fe fd64 	bl	8006bc4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080fc:	f7fa fcc0 	bl	8002a80 <HAL_GetTick>
 8008100:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008102:	e009      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008104:	f7fa fcbc 	bl	8002a80 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b02      	cmp	r3, #2
 8008110:	d902      	bls.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	74fb      	strb	r3, [r7, #19]
        break;
 8008116:	e006      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008118:	4b7b      	ldr	r3, [pc, #492]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008124:	d1ee      	bne.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8008126:	7cfb      	ldrb	r3, [r7, #19]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d13c      	bne.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800812c:	f7ff ffa7 	bl	800807e <LL_RCC_GetRTCClockSource>
 8008130:	4602      	mov	r2, r0
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008136:	429a      	cmp	r2, r3
 8008138:	d00f      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800813a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800813e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008146:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008148:	f7ff ffa5 	bl	8008096 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800814c:	f7ff ffb3 	bl	80080b6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f003 0302 	and.w	r3, r3, #2
 8008160:	2b00      	cmp	r3, #0
 8008162:	d014      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008164:	f7fa fc8c 	bl	8002a80 <HAL_GetTick>
 8008168:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800816a:	e00b      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800816c:	f7fa fc88 	bl	8002a80 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	f241 3288 	movw	r2, #5000	; 0x1388
 800817a:	4293      	cmp	r3, r2
 800817c:	d902      	bls.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	74fb      	strb	r3, [r7, #19]
            break;
 8008182:	e004      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8008184:	f7ff feb4 	bl	8007ef0 <LL_RCC_LSE_IsReady>
 8008188:	4603      	mov	r3, r0
 800818a:	2b01      	cmp	r3, #1
 800818c:	d1ee      	bne.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800818e:	7cfb      	ldrb	r3, [r7, #19]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d105      	bne.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008198:	4618      	mov	r0, r3
 800819a:	f7ff ff5b 	bl	8008054 <LL_RCC_SetRTCClockSource>
 800819e:	e004      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80081a0:	7cfb      	ldrb	r3, [r7, #19]
 80081a2:	74bb      	strb	r3, [r7, #18]
 80081a4:	e001      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a6:	7cfb      	ldrb	r3, [r7, #19]
 80081a8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d004      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7ff fea9 	bl	8007f12 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7ff fe9e 	bl	8007f12 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 0320 	and.w	r3, r3, #32
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d004      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7ff fec0 	bl	8007f6c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d004      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff fee6 	bl	8007fce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800820a:	2b00      	cmp	r3, #0
 800820c:	d004      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	4618      	mov	r0, r3
 8008214:	f7ff fedb 	bl	8007fce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008220:	2b00      	cmp	r3, #0
 8008222:	d004      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008228:	4618      	mov	r0, r3
 800822a:	f7ff fed0 	bl	8007fce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008236:	2b00      	cmp	r3, #0
 8008238:	d004      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	4618      	mov	r0, r3
 8008240:	f7ff fea9 	bl	8007f96 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800824c:	2b00      	cmp	r3, #0
 800824e:	d004      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	4618      	mov	r0, r3
 8008256:	f7ff fe9e 	bl	8007f96 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008262:	2b00      	cmp	r3, #0
 8008264:	d004      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	4618      	mov	r0, r3
 800826c:	f7ff fe93 	bl	8007f96 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0310 	and.w	r3, r3, #16
 8008278:	2b00      	cmp	r3, #0
 800827a:	d011      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	4618      	mov	r0, r3
 8008282:	f7ff fe5e 	bl	8007f42 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800828e:	d107      	bne.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8008290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800829a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800829e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d010      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7ff fea5 	bl	8008000 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d107      	bne.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80082be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082cc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d011      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082de:	4618      	mov	r0, r3
 80082e0:	f7ff fea3 	bl	800802a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082ec:	d107      	bne.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80082ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082fc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80082fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	58000400 	.word	0x58000400

0800830c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d068      	beq.n	80083f0 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d106      	bne.n	8008338 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7f9 fff4 	bl	8002320 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008340:	4b2e      	ldr	r3, [pc, #184]	; (80083fc <HAL_RTC_Init+0xf0>)
 8008342:	22ca      	movs	r2, #202	; 0xca
 8008344:	625a      	str	r2, [r3, #36]	; 0x24
 8008346:	4b2d      	ldr	r3, [pc, #180]	; (80083fc <HAL_RTC_Init+0xf0>)
 8008348:	2253      	movs	r2, #83	; 0x53
 800834a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fa0f 	bl	8008770 <RTC_EnterInitMode>
 8008352:	4603      	mov	r3, r0
 8008354:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008356:	7bfb      	ldrb	r3, [r7, #15]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d13f      	bne.n	80083dc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800835c:	4b27      	ldr	r3, [pc, #156]	; (80083fc <HAL_RTC_Init+0xf0>)
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	4a26      	ldr	r2, [pc, #152]	; (80083fc <HAL_RTC_Init+0xf0>)
 8008362:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800836a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800836c:	4b23      	ldr	r3, [pc, #140]	; (80083fc <HAL_RTC_Init+0xf0>)
 800836e:	699a      	ldr	r2, [r3, #24]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6859      	ldr	r1, [r3, #4]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	4319      	orrs	r1, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	430b      	orrs	r3, r1
 8008380:	491e      	ldr	r1, [pc, #120]	; (80083fc <HAL_RTC_Init+0xf0>)
 8008382:	4313      	orrs	r3, r2
 8008384:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68da      	ldr	r2, [r3, #12]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	041b      	lsls	r3, r3, #16
 8008390:	491a      	ldr	r1, [pc, #104]	; (80083fc <HAL_RTC_Init+0xf0>)
 8008392:	4313      	orrs	r3, r2
 8008394:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008396:	4b19      	ldr	r3, [pc, #100]	; (80083fc <HAL_RTC_Init+0xf0>)
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a6:	430b      	orrs	r3, r1
 80083a8:	4914      	ldr	r1, [pc, #80]	; (80083fc <HAL_RTC_Init+0xf0>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fa12 	bl	80087d8 <RTC_ExitInitMode>
 80083b4:	4603      	mov	r3, r0
 80083b6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10e      	bne.n	80083dc <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 80083be:	4b0f      	ldr	r3, [pc, #60]	; (80083fc <HAL_RTC_Init+0xf0>)
 80083c0:	699b      	ldr	r3, [r3, #24]
 80083c2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a19      	ldr	r1, [r3, #32]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	69db      	ldr	r3, [r3, #28]
 80083ce:	4319      	orrs	r1, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	430b      	orrs	r3, r1
 80083d6:	4909      	ldr	r1, [pc, #36]	; (80083fc <HAL_RTC_Init+0xf0>)
 80083d8:	4313      	orrs	r3, r2
 80083da:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083dc:	4b07      	ldr	r3, [pc, #28]	; (80083fc <HAL_RTC_Init+0xf0>)
 80083de:	22ff      	movs	r2, #255	; 0xff
 80083e0:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d103      	bne.n	80083f0 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	40002800 	.word	0x40002800

08008400 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008400:	b590      	push	{r4, r7, lr}
 8008402:	b087      	sub	sp, #28
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800840c:	2300      	movs	r3, #0
 800840e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008416:	2b01      	cmp	r3, #1
 8008418:	d101      	bne.n	800841e <HAL_RTC_SetAlarm_IT+0x1e>
 800841a:	2302      	movs	r3, #2
 800841c:	e0f3      	b.n	8008606 <HAL_RTC_SetAlarm_IT+0x206>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2202      	movs	r2, #2
 800842a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800842e:	4b78      	ldr	r3, [pc, #480]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008436:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800843e:	d06a      	beq.n	8008516 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d13a      	bne.n	80084bc <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008446:	4b72      	ldr	r3, [pc, #456]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844e:	2b00      	cmp	r3, #0
 8008450:	d102      	bne.n	8008458 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	2200      	movs	r2, #0
 8008456:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	695b      	ldr	r3, [r3, #20]
 800845c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	4618      	mov	r0, r3
 8008466:	f000 f9f5 	bl	8008854 <RTC_ByteToBcd2>
 800846a:	4603      	mov	r3, r0
 800846c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	785b      	ldrb	r3, [r3, #1]
 8008472:	4618      	mov	r0, r3
 8008474:	f000 f9ee 	bl	8008854 <RTC_ByteToBcd2>
 8008478:	4603      	mov	r3, r0
 800847a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800847c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	789b      	ldrb	r3, [r3, #2]
 8008482:	4618      	mov	r0, r3
 8008484:	f000 f9e6 	bl	8008854 <RTC_ByteToBcd2>
 8008488:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800848a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	78db      	ldrb	r3, [r3, #3]
 8008492:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008494:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 f9d8 	bl	8008854 <RTC_ByteToBcd2>
 80084a4:	4603      	mov	r3, r0
 80084a6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80084a8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80084b0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80084b6:	4313      	orrs	r3, r2
 80084b8:	617b      	str	r3, [r7, #20]
 80084ba:	e02c      	b.n	8008516 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80084c4:	d00d      	beq.n	80084e2 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084ce:	d008      	beq.n	80084e2 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80084d0:	4b4f      	ldr	r3, [pc, #316]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d102      	bne.n	80084e2 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	2200      	movs	r2, #0
 80084e0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	785b      	ldrb	r3, [r3, #1]
 80084ec:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80084ee:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80084f4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	78db      	ldrb	r3, [r3, #3]
 80084fa:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80084fc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008504:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008506:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800850c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008512:	4313      	orrs	r3, r2
 8008514:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008516:	4b3e      	ldr	r3, [pc, #248]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 8008518:	22ca      	movs	r2, #202	; 0xca
 800851a:	625a      	str	r2, [r3, #36]	; 0x24
 800851c:	4b3c      	ldr	r3, [pc, #240]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 800851e:	2253      	movs	r2, #83	; 0x53
 8008520:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800852a:	d12c      	bne.n	8008586 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800852c:	4b38      	ldr	r3, [pc, #224]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	4a37      	ldr	r2, [pc, #220]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 8008532:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008536:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008538:	4b35      	ldr	r3, [pc, #212]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 800853a:	2201      	movs	r2, #1
 800853c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008544:	d107      	bne.n	8008556 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	699a      	ldr	r2, [r3, #24]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	69db      	ldr	r3, [r3, #28]
 800854e:	4930      	ldr	r1, [pc, #192]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 8008550:	4313      	orrs	r3, r2
 8008552:	644b      	str	r3, [r1, #68]	; 0x44
 8008554:	e006      	b.n	8008564 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008556:	4a2e      	ldr	r2, [pc, #184]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800855c:	4a2c      	ldr	r2, [pc, #176]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008564:	4a2a      	ldr	r2, [pc, #168]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008570:	f043 0201 	orr.w	r2, r3, #1
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008578:	4b25      	ldr	r3, [pc, #148]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	4a24      	ldr	r2, [pc, #144]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 800857e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8008582:	6193      	str	r3, [r2, #24]
 8008584:	e02b      	b.n	80085de <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008586:	4b22      	ldr	r3, [pc, #136]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	4a21      	ldr	r2, [pc, #132]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 800858c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8008590:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008592:	4b1f      	ldr	r3, [pc, #124]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 8008594:	2202      	movs	r2, #2
 8008596:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800859e:	d107      	bne.n	80085b0 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	699a      	ldr	r2, [r3, #24]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	69db      	ldr	r3, [r3, #28]
 80085a8:	4919      	ldr	r1, [pc, #100]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	64cb      	str	r3, [r1, #76]	; 0x4c
 80085ae:	e006      	b.n	80085be <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80085b0:	4a17      	ldr	r2, [pc, #92]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80085b6:	4a16      	ldr	r2, [pc, #88]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80085be:	4a14      	ldr	r2, [pc, #80]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ca:	f043 0202 	orr.w	r2, r3, #2
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80085d2:	4b0f      	ldr	r3, [pc, #60]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	4a0e      	ldr	r2, [pc, #56]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 80085d8:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80085dc:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80085de:	4b0d      	ldr	r3, [pc, #52]	; (8008614 <HAL_RTC_SetAlarm_IT+0x214>)
 80085e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085e4:	4a0b      	ldr	r2, [pc, #44]	; (8008614 <HAL_RTC_SetAlarm_IT+0x214>)
 80085e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085ee:	4b08      	ldr	r3, [pc, #32]	; (8008610 <HAL_RTC_SetAlarm_IT+0x210>)
 80085f0:	22ff      	movs	r2, #255	; 0xff
 80085f2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	bd90      	pop	{r4, r7, pc}
 800860e:	bf00      	nop
 8008610:	40002800 	.word	0x40002800
 8008614:	58000800 	.word	0x58000800

08008618 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008628:	2b01      	cmp	r3, #1
 800862a:	d101      	bne.n	8008630 <HAL_RTC_DeactivateAlarm+0x18>
 800862c:	2302      	movs	r3, #2
 800862e:	e048      	b.n	80086c2 <HAL_RTC_DeactivateAlarm+0xaa>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2202      	movs	r2, #2
 800863c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008640:	4b22      	ldr	r3, [pc, #136]	; (80086cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008642:	22ca      	movs	r2, #202	; 0xca
 8008644:	625a      	str	r2, [r3, #36]	; 0x24
 8008646:	4b21      	ldr	r3, [pc, #132]	; (80086cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008648:	2253      	movs	r2, #83	; 0x53
 800864a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008652:	d115      	bne.n	8008680 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008654:	4b1d      	ldr	r3, [pc, #116]	; (80086cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	4a1c      	ldr	r2, [pc, #112]	; (80086cc <HAL_RTC_DeactivateAlarm+0xb4>)
 800865a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800865e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8008660:	4b1a      	ldr	r3, [pc, #104]	; (80086cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008664:	4a19      	ldr	r2, [pc, #100]	; (80086cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008666:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800866a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008670:	f023 0201 	bic.w	r2, r3, #1
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008678:	4b14      	ldr	r3, [pc, #80]	; (80086cc <HAL_RTC_DeactivateAlarm+0xb4>)
 800867a:	2201      	movs	r2, #1
 800867c:	65da      	str	r2, [r3, #92]	; 0x5c
 800867e:	e014      	b.n	80086aa <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008680:	4b12      	ldr	r3, [pc, #72]	; (80086cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	4a11      	ldr	r2, [pc, #68]	; (80086cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008686:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800868a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800868c:	4b0f      	ldr	r3, [pc, #60]	; (80086cc <HAL_RTC_DeactivateAlarm+0xb4>)
 800868e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008690:	4a0e      	ldr	r2, [pc, #56]	; (80086cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008692:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008696:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869c:	f023 0202 	bic.w	r2, r3, #2
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80086a4:	4b09      	ldr	r3, [pc, #36]	; (80086cc <HAL_RTC_DeactivateAlarm+0xb4>)
 80086a6:	2202      	movs	r2, #2
 80086a8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086aa:	4b08      	ldr	r3, [pc, #32]	; (80086cc <HAL_RTC_DeactivateAlarm+0xb4>)
 80086ac:	22ff      	movs	r2, #255	; 0xff
 80086ae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bc80      	pop	{r7}
 80086ca:	4770      	bx	lr
 80086cc:	40002800 	.word	0x40002800

080086d0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80086d8:	4b11      	ldr	r3, [pc, #68]	; (8008720 <HAL_RTC_AlarmIRQHandler+0x50>)
 80086da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e0:	4013      	ands	r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d005      	beq.n	80086fa <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80086ee:	4b0c      	ldr	r3, [pc, #48]	; (8008720 <HAL_RTC_AlarmIRQHandler+0x50>)
 80086f0:	2201      	movs	r2, #1
 80086f2:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7fa fc4c 	bl	8002f92 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f003 0302 	and.w	r3, r3, #2
 8008700:	2b00      	cmp	r3, #0
 8008702:	d005      	beq.n	8008710 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008704:	4b06      	ldr	r3, [pc, #24]	; (8008720 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008706:	2202      	movs	r2, #2
 8008708:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f94a 	bl	80089a4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008718:	bf00      	nop
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	40002800 	.word	0x40002800

08008724 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800872c:	4b0f      	ldr	r3, [pc, #60]	; (800876c <HAL_RTC_WaitForSynchro+0x48>)
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	4a0e      	ldr	r2, [pc, #56]	; (800876c <HAL_RTC_WaitForSynchro+0x48>)
 8008732:	f023 0320 	bic.w	r3, r3, #32
 8008736:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008738:	f7fa f9a2 	bl	8002a80 <HAL_GetTick>
 800873c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800873e:	e009      	b.n	8008754 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008740:	f7fa f99e 	bl	8002a80 <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800874e:	d901      	bls.n	8008754 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e006      	b.n	8008762 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008754:	4b05      	ldr	r3, [pc, #20]	; (800876c <HAL_RTC_WaitForSynchro+0x48>)
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	f003 0320 	and.w	r3, r3, #32
 800875c:	2b00      	cmp	r3, #0
 800875e:	d0ef      	beq.n	8008740 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	40002800 	.word	0x40002800

08008770 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800877c:	4b15      	ldr	r3, [pc, #84]	; (80087d4 <RTC_EnterInitMode+0x64>)
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008784:	2b00      	cmp	r3, #0
 8008786:	d120      	bne.n	80087ca <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008788:	4b12      	ldr	r3, [pc, #72]	; (80087d4 <RTC_EnterInitMode+0x64>)
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	4a11      	ldr	r2, [pc, #68]	; (80087d4 <RTC_EnterInitMode+0x64>)
 800878e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008792:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008794:	f7fa f974 	bl	8002a80 <HAL_GetTick>
 8008798:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800879a:	e00d      	b.n	80087b8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800879c:	f7fa f970 	bl	8002a80 <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087aa:	d905      	bls.n	80087b8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2203      	movs	r2, #3
 80087b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80087b8:	4b06      	ldr	r3, [pc, #24]	; (80087d4 <RTC_EnterInitMode+0x64>)
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d102      	bne.n	80087ca <RTC_EnterInitMode+0x5a>
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d1e8      	bne.n	800879c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	40002800 	.word	0x40002800

080087d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80087e4:	4b1a      	ldr	r3, [pc, #104]	; (8008850 <RTC_ExitInitMode+0x78>)
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	4a19      	ldr	r2, [pc, #100]	; (8008850 <RTC_ExitInitMode+0x78>)
 80087ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087ee:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80087f0:	4b17      	ldr	r3, [pc, #92]	; (8008850 <RTC_ExitInitMode+0x78>)
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	f003 0320 	and.w	r3, r3, #32
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10c      	bne.n	8008816 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f7ff ff91 	bl	8008724 <HAL_RTC_WaitForSynchro>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d01e      	beq.n	8008846 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2203      	movs	r2, #3
 800880c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	73fb      	strb	r3, [r7, #15]
 8008814:	e017      	b.n	8008846 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008816:	4b0e      	ldr	r3, [pc, #56]	; (8008850 <RTC_ExitInitMode+0x78>)
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	4a0d      	ldr	r2, [pc, #52]	; (8008850 <RTC_ExitInitMode+0x78>)
 800881c:	f023 0320 	bic.w	r3, r3, #32
 8008820:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7ff ff7e 	bl	8008724 <HAL_RTC_WaitForSynchro>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d005      	beq.n	800883a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2203      	movs	r2, #3
 8008832:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008836:	2303      	movs	r3, #3
 8008838:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800883a:	4b05      	ldr	r3, [pc, #20]	; (8008850 <RTC_ExitInitMode+0x78>)
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	4a04      	ldr	r2, [pc, #16]	; (8008850 <RTC_ExitInitMode+0x78>)
 8008840:	f043 0320 	orr.w	r3, r3, #32
 8008844:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008846:	7bfb      	ldrb	r3, [r7, #15]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	40002800 	.word	0x40002800

08008854 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	4603      	mov	r3, r0
 800885c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800885e:	2300      	movs	r3, #0
 8008860:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008866:	e005      	b.n	8008874 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	3301      	adds	r3, #1
 800886c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800886e:	7afb      	ldrb	r3, [r7, #11]
 8008870:	3b0a      	subs	r3, #10
 8008872:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008874:	7afb      	ldrb	r3, [r7, #11]
 8008876:	2b09      	cmp	r3, #9
 8008878:	d8f6      	bhi.n	8008868 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	b2db      	uxtb	r3, r3
 800887e:	011b      	lsls	r3, r3, #4
 8008880:	b2da      	uxtb	r2, r3
 8008882:	7afb      	ldrb	r3, [r7, #11]
 8008884:	4313      	orrs	r3, r2
 8008886:	b2db      	uxtb	r3, r3
}
 8008888:	4618      	mov	r0, r3
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	bc80      	pop	{r7}
 8008890:	4770      	bx	lr
	...

08008894 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d101      	bne.n	80088aa <HAL_RTCEx_EnableBypassShadow+0x16>
 80088a6:	2302      	movs	r3, #2
 80088a8:	e01f      	b.n	80088ea <HAL_RTCEx_EnableBypassShadow+0x56>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2202      	movs	r2, #2
 80088b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088ba:	4b0e      	ldr	r3, [pc, #56]	; (80088f4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80088bc:	22ca      	movs	r2, #202	; 0xca
 80088be:	625a      	str	r2, [r3, #36]	; 0x24
 80088c0:	4b0c      	ldr	r3, [pc, #48]	; (80088f4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80088c2:	2253      	movs	r2, #83	; 0x53
 80088c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80088c6:	4b0b      	ldr	r3, [pc, #44]	; (80088f4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	4a0a      	ldr	r2, [pc, #40]	; (80088f4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80088cc:	f043 0320 	orr.w	r3, r3, #32
 80088d0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088d2:	4b08      	ldr	r3, [pc, #32]	; (80088f4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80088d4:	22ff      	movs	r2, #255	; 0xff
 80088d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bc80      	pop	{r7}
 80088f2:	4770      	bx	lr
 80088f4:	40002800 	.word	0x40002800

080088f8 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008906:	2b01      	cmp	r3, #1
 8008908:	d101      	bne.n	800890e <HAL_RTCEx_SetSSRU_IT+0x16>
 800890a:	2302      	movs	r3, #2
 800890c:	e027      	b.n	800895e <HAL_RTCEx_SetSSRU_IT+0x66>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2202      	movs	r2, #2
 800891a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800891e:	4b12      	ldr	r3, [pc, #72]	; (8008968 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008920:	22ca      	movs	r2, #202	; 0xca
 8008922:	625a      	str	r2, [r3, #36]	; 0x24
 8008924:	4b10      	ldr	r3, [pc, #64]	; (8008968 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008926:	2253      	movs	r2, #83	; 0x53
 8008928:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800892a:	4b0f      	ldr	r3, [pc, #60]	; (8008968 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	4a0e      	ldr	r2, [pc, #56]	; (8008968 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008934:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8008936:	4b0d      	ldr	r3, [pc, #52]	; (800896c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800893c:	4a0b      	ldr	r2, [pc, #44]	; (800896c <HAL_RTCEx_SetSSRU_IT+0x74>)
 800893e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008942:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008946:	4b08      	ldr	r3, [pc, #32]	; (8008968 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008948:	22ff      	movs	r2, #255	; 0xff
 800894a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	bc80      	pop	{r7}
 8008966:	4770      	bx	lr
 8008968:	40002800 	.word	0x40002800
 800896c:	58000800 	.word	0x58000800

08008970 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8008978:	4b09      	ldr	r3, [pc, #36]	; (80089a0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800897a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800897c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008980:	2b00      	cmp	r3, #0
 8008982:	d005      	beq.n	8008990 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8008984:	4b06      	ldr	r3, [pc, #24]	; (80089a0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008986:	2240      	movs	r2, #64	; 0x40
 8008988:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7fa fb0b 	bl	8002fa6 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008998:	bf00      	nop
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	40002800 	.word	0x40002800

080089a4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80089ac:	bf00      	nop
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bc80      	pop	{r7}
 80089b4:	4770      	bx	lr
	...

080089b8 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80089c4:	4b07      	ldr	r3, [pc, #28]	; (80089e4 <HAL_RTCEx_BKUPWrite+0x2c>)
 80089c6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	4413      	add	r3, r2
 80089d0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	601a      	str	r2, [r3, #0]
}
 80089d8:	bf00      	nop
 80089da:	371c      	adds	r7, #28
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	4000b100 	.word	0x4000b100

080089e8 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80089f2:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <HAL_RTCEx_BKUPRead+0x28>)
 80089f4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	4413      	add	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bc80      	pop	{r7}
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	4000b100 	.word	0x4000b100

08008a14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e0c6      	b.n	8008bb4 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d108      	bne.n	8008a40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a36:	d009      	beq.n	8008a4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	61da      	str	r2, [r3, #28]
 8008a3e:	e005      	b.n	8008a4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d106      	bne.n	8008a66 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7f9 fd07 	bl	8002474 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2202      	movs	r2, #2
 8008a6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a7c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a86:	d902      	bls.n	8008a8e <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	e002      	b.n	8008a94 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a92:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008a9c:	d007      	beq.n	8008aae <HAL_SPI_Init+0x9a>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008aa6:	d002      	beq.n	8008aae <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	f003 0302 	and.w	r3, r3, #2
 8008ac8:	431a      	orrs	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008adc:	431a      	orrs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af0:	ea42 0103 	orr.w	r1, r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	430a      	orrs	r2, r1
 8008b02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b0c:	d11b      	bne.n	8008b46 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10b      	bne.n	8008b2e <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b1e:	d903      	bls.n	8008b28 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2202      	movs	r2, #2
 8008b24:	631a      	str	r2, [r3, #48]	; 0x30
 8008b26:	e002      	b.n	8008b2e <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d107      	bne.n	8008b46 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	0c1b      	lsrs	r3, r3, #16
 8008b4c:	f003 0204 	and.w	r2, r3, #4
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b54:	f003 0310 	and.w	r3, r3, #16
 8008b58:	431a      	orrs	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5e:	f003 0308 	and.w	r3, r3, #8
 8008b62:	431a      	orrs	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008b6c:	ea42 0103 	orr.w	r1, r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b86:	d105      	bne.n	8008b94 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	b292      	uxth	r2, r2
 8008b92:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	69da      	ldr	r2, [r3, #28]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ba2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b088      	sub	sp, #32
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	603b      	str	r3, [r7, #0]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d101      	bne.n	8008bde <HAL_SPI_Transmit+0x22>
 8008bda:	2302      	movs	r3, #2
 8008bdc:	e17a      	b.n	8008ed4 <HAL_SPI_Transmit+0x318>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008be6:	f7f9 ff4b 	bl	8002a80 <HAL_GetTick>
 8008bea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008bec:	88fb      	ldrh	r3, [r7, #6]
 8008bee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d002      	beq.n	8008c02 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008c00:	e15f      	b.n	8008ec2 <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <HAL_SPI_Transmit+0x52>
 8008c08:	88fb      	ldrh	r3, [r7, #6]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d102      	bne.n	8008c14 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008c12:	e156      	b.n	8008ec2 <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2203      	movs	r2, #3
 8008c18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	68ba      	ldr	r2, [r7, #8]
 8008c26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	88fa      	ldrh	r2, [r7, #6]
 8008c2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	88fa      	ldrh	r2, [r7, #6]
 8008c32:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c5e:	d10f      	bne.n	8008c80 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c7e:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c88:	d10f      	bne.n	8008caa <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ca8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb4:	2b40      	cmp	r3, #64	; 0x40
 8008cb6:	d007      	beq.n	8008cc8 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008cd0:	d94b      	bls.n	8008d6a <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d002      	beq.n	8008ce0 <HAL_SPI_Transmit+0x124>
 8008cda:	8afb      	ldrh	r3, [r7, #22]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d13e      	bne.n	8008d5e <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce4:	881a      	ldrh	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf0:	1c9a      	adds	r2, r3, #2
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008d04:	e02b      	b.n	8008d5e <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f003 0302 	and.w	r3, r3, #2
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d112      	bne.n	8008d3a <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d18:	881a      	ldrh	r2, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d24:	1c9a      	adds	r2, r3, #2
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	3b01      	subs	r3, #1
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008d38:	e011      	b.n	8008d5e <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d3a:	f7f9 fea1 	bl	8002a80 <HAL_GetTick>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d803      	bhi.n	8008d52 <HAL_SPI_Transmit+0x196>
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d50:	d102      	bne.n	8008d58 <HAL_SPI_Transmit+0x19c>
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d102      	bne.n	8008d5e <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008d5c:	e0b1      	b.n	8008ec2 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1ce      	bne.n	8008d06 <HAL_SPI_Transmit+0x14a>
 8008d68:	e07c      	b.n	8008e64 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d002      	beq.n	8008d78 <HAL_SPI_Transmit+0x1bc>
 8008d72:	8afb      	ldrh	r3, [r7, #22]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d170      	bne.n	8008e5a <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d912      	bls.n	8008da8 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d86:	881a      	ldrh	r2, [r3, #0]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d92:	1c9a      	adds	r2, r3, #2
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	3b02      	subs	r3, #2
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008da6:	e058      	b.n	8008e5a <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	330c      	adds	r3, #12
 8008db2:	7812      	ldrb	r2, [r2, #0]
 8008db4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dba:	1c5a      	adds	r2, r3, #1
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008dce:	e044      	b.n	8008e5a <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d12b      	bne.n	8008e36 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d912      	bls.n	8008e0e <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dec:	881a      	ldrh	r2, [r3, #0]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df8:	1c9a      	adds	r2, r3, #2
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	3b02      	subs	r3, #2
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e0c:	e025      	b.n	8008e5a <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	330c      	adds	r3, #12
 8008e18:	7812      	ldrb	r2, [r2, #0]
 8008e1a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e20:	1c5a      	adds	r2, r3, #1
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e34:	e011      	b.n	8008e5a <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e36:	f7f9 fe23 	bl	8002a80 <HAL_GetTick>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	683a      	ldr	r2, [r7, #0]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d803      	bhi.n	8008e4e <HAL_SPI_Transmit+0x292>
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4c:	d102      	bne.n	8008e54 <HAL_SPI_Transmit+0x298>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d102      	bne.n	8008e5a <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8008e54:	2303      	movs	r3, #3
 8008e56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e58:	e033      	b.n	8008ec2 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1b5      	bne.n	8008dd0 <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e6c:	d107      	bne.n	8008e7e <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e7c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e7e:	69ba      	ldr	r2, [r7, #24]
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f000 fe6e 	bl	8009b64 <SPI_EndRxTxTransaction>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d002      	beq.n	8008e94 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2220      	movs	r2, #32
 8008e92:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10a      	bne.n	8008eb2 <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	613b      	str	r3, [r7, #16]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	613b      	str	r3, [r7, #16]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	613b      	str	r3, [r7, #16]
 8008eb0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d002      	beq.n	8008ec0 <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	77fb      	strb	r3, [r7, #31]
 8008ebe:	e000      	b.n	8008ec2 <HAL_SPI_Transmit+0x306>
  }

error:
 8008ec0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008ed2:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3720      	adds	r7, #32
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b08c      	sub	sp, #48	; 0x30
 8008ee0:	af02      	add	r7, sp, #8
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	603b      	str	r3, [r7, #0]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8008eec:	2300      	movs	r3, #0
 8008eee:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f02:	d112      	bne.n	8008f2a <HAL_SPI_Receive+0x4e>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10e      	bne.n	8008f2a <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2204      	movs	r2, #4
 8008f10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008f14:	88fa      	ldrh	r2, [r7, #6]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	68ba      	ldr	r2, [r7, #8]
 8008f1e:	68b9      	ldr	r1, [r7, #8]
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 f9c4 	bl	80092ae <HAL_SPI_TransmitReceive>
 8008f26:	4603      	mov	r3, r0
 8008f28:	e1bd      	b.n	80092a6 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d101      	bne.n	8008f38 <HAL_SPI_Receive+0x5c>
 8008f34:	2302      	movs	r3, #2
 8008f36:	e1b6      	b.n	80092a6 <HAL_SPI_Receive+0x3ca>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f40:	f7f9 fd9e 	bl	8002a80 <HAL_GetTick>
 8008f44:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d003      	beq.n	8008f5a <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 8008f52:	2302      	movs	r3, #2
 8008f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8008f58:	e19b      	b.n	8009292 <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <HAL_SPI_Receive+0x8a>
 8008f60:	88fb      	ldrh	r3, [r7, #6]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d103      	bne.n	8008f6e <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8008f6c:	e191      	b.n	8009292 <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2204      	movs	r2, #4
 8008f72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	88fa      	ldrh	r2, [r7, #6]
 8008f86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	88fa      	ldrh	r2, [r7, #6]
 8008f8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2200      	movs	r2, #0
 8008fae:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fb8:	d118      	bne.n	8008fec <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fc8:	601a      	str	r2, [r3, #0]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fd8:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ff4:	d908      	bls.n	8009008 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	685a      	ldr	r2, [r3, #4]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009004:	605a      	str	r2, [r3, #4]
 8009006:	e007      	b.n	8009018 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009016:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009020:	d10f      	bne.n	8009042 <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009030:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009040:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800904c:	2b40      	cmp	r3, #64	; 0x40
 800904e:	d007      	beq.n	8009060 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800905e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009068:	d869      	bhi.n	800913e <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800906a:	e031      	b.n	80090d0 <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b01      	cmp	r3, #1
 8009078:	d117      	bne.n	80090aa <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f103 020c 	add.w	r2, r3, #12
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009086:	7812      	ldrb	r2, [r2, #0]
 8009088:	b2d2      	uxtb	r2, r2
 800908a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009090:	1c5a      	adds	r2, r3, #1
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800909c:	b29b      	uxth	r3, r3
 800909e:	3b01      	subs	r3, #1
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80090a8:	e012      	b.n	80090d0 <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090aa:	f7f9 fce9 	bl	8002a80 <HAL_GetTick>
 80090ae:	4602      	mov	r2, r0
 80090b0:	6a3b      	ldr	r3, [r7, #32]
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	683a      	ldr	r2, [r7, #0]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d803      	bhi.n	80090c2 <HAL_SPI_Receive+0x1e6>
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c0:	d102      	bne.n	80090c8 <HAL_SPI_Receive+0x1ec>
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d103      	bne.n	80090d0 <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 80090c8:	2303      	movs	r3, #3
 80090ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80090ce:	e0e0      	b.n	8009292 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1c7      	bne.n	800906c <HAL_SPI_Receive+0x190>
 80090dc:	e035      	b.n	800914a <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	f003 0301 	and.w	r3, r3, #1
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d115      	bne.n	8009118 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68da      	ldr	r2, [r3, #12]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f6:	b292      	uxth	r2, r2
 80090f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fe:	1c9a      	adds	r2, r3, #2
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800910a:	b29b      	uxth	r3, r3
 800910c:	3b01      	subs	r3, #1
 800910e:	b29a      	uxth	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009116:	e012      	b.n	800913e <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009118:	f7f9 fcb2 	bl	8002a80 <HAL_GetTick>
 800911c:	4602      	mov	r2, r0
 800911e:	6a3b      	ldr	r3, [r7, #32]
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	429a      	cmp	r2, r3
 8009126:	d803      	bhi.n	8009130 <HAL_SPI_Receive+0x254>
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912e:	d102      	bne.n	8009136 <HAL_SPI_Receive+0x25a>
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d103      	bne.n	800913e <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800913c:	e0a9      	b.n	8009292 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009144:	b29b      	uxth	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1c9      	bne.n	80090de <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009152:	d178      	bne.n	8009246 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009162:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009164:	6a3b      	ldr	r3, [r7, #32]
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2201      	movs	r2, #1
 800916c:	2101      	movs	r1, #1
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f000 fb82 	bl	8009878 <SPI_WaitFlagStateUntilTimeout>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d003      	beq.n	8009182 <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 800917a:	2303      	movs	r3, #3
 800917c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8009180:	e087      	b.n	8009292 <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800918a:	d907      	bls.n	800919c <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68da      	ldr	r2, [r3, #12]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009196:	b292      	uxth	r2, r2
 8009198:	801a      	strh	r2, [r3, #0]
 800919a:	e008      	b.n	80091ae <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f103 020c 	add.w	r2, r3, #12
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a8:	7812      	ldrb	r2, [r2, #0]
 80091aa:	b2d2      	uxtb	r2, r2
 80091ac:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80091ae:	6a3b      	ldr	r3, [r7, #32]
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2201      	movs	r2, #1
 80091b6:	2101      	movs	r1, #1
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 fb5d 	bl	8009878 <SPI_WaitFlagStateUntilTimeout>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d009      	beq.n	80091d8 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091c8:	f043 0202 	orr.w	r2, r3, #2
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 80091d6:	e05c      	b.n	8009292 <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80091e0:	d105      	bne.n	80091ee <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	e02b      	b.n	8009246 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	330c      	adds	r3, #12
 80091f4:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80091fe:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009208:	d11d      	bne.n	8009246 <HAL_SPI_Receive+0x36a>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800920e:	2b02      	cmp	r3, #2
 8009210:	d119      	bne.n	8009246 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009212:	6a3b      	ldr	r3, [r7, #32]
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	2201      	movs	r2, #1
 800921a:	2101      	movs	r1, #1
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f000 fb2b 	bl	8009878 <SPI_WaitFlagStateUntilTimeout>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d009      	beq.n	800923c <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800922c:	f043 0202 	orr.w	r2, r3, #2
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8009234:	2303      	movs	r3, #3
 8009236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800923a:	e02a      	b.n	8009292 <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8009244:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009246:	6a3a      	ldr	r2, [r7, #32]
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f000 fc32 	bl	8009ab4 <SPI_EndRxTransaction>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d002      	beq.n	800925c <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2220      	movs	r2, #32
 800925a:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	f003 0310 	and.w	r3, r3, #16
 8009266:	2b10      	cmp	r3, #16
 8009268:	d10a      	bne.n	8009280 <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800926e:	f043 0202 	orr.w	r2, r3, #2
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800927e:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800928e:	e000      	b.n	8009292 <HAL_SPI_Receive+0x3b6>
  }

error :
 8009290:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80092a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3728      	adds	r7, #40	; 0x28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b092      	sub	sp, #72	; 0x48
 80092b2:	af02      	add	r7, sp, #8
 80092b4:	60f8      	str	r0, [r7, #12]
 80092b6:	60b9      	str	r1, [r7, #8]
 80092b8:	607a      	str	r2, [r7, #4]
 80092ba:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80092bc:	2300      	movs	r3, #0
 80092be:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80092c0:	2300      	movs	r3, #0
 80092c2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80092c4:	2301      	movs	r3, #1
 80092c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d101      	bne.n	80092dc <HAL_SPI_TransmitReceive+0x2e>
 80092d8:	2302      	movs	r3, #2
 80092da:	e2c8      	b.n	800986e <HAL_SPI_TransmitReceive+0x5c0>
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092e4:	f7f9 fbcc 	bl	8002a80 <HAL_GetTick>
 80092e8:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80092f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 80092fa:	887b      	ldrh	r3, [r7, #2]
 80092fc:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 80092fe:	887b      	ldrh	r3, [r7, #2]
 8009300:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009312:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009316:	2b01      	cmp	r3, #1
 8009318:	d00f      	beq.n	800933a <HAL_SPI_TransmitReceive+0x8c>
 800931a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009320:	d107      	bne.n	8009332 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d103      	bne.n	8009332 <HAL_SPI_TransmitReceive+0x84>
 800932a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800932e:	2b04      	cmp	r3, #4
 8009330:	d003      	beq.n	800933a <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8009332:	2302      	movs	r3, #2
 8009334:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8009338:	e28f      	b.n	800985a <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d005      	beq.n	800934c <HAL_SPI_TransmitReceive+0x9e>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d002      	beq.n	800934c <HAL_SPI_TransmitReceive+0x9e>
 8009346:	887b      	ldrh	r3, [r7, #2]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d103      	bne.n	8009354 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8009352:	e282      	b.n	800985a <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2b04      	cmp	r3, #4
 800935e:	d003      	beq.n	8009368 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2205      	movs	r2, #5
 8009364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	887a      	ldrh	r2, [r7, #2]
 8009378:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	887a      	ldrh	r2, [r7, #2]
 8009380:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	887a      	ldrh	r2, [r7, #2]
 800938e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	887a      	ldrh	r2, [r7, #2]
 8009394:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093aa:	d10f      	bne.n	80093cc <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093ba:	601a      	str	r2, [r3, #0]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093ca:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093d4:	d802      	bhi.n	80093dc <HAL_SPI_TransmitReceive+0x12e>
 80093d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d908      	bls.n	80093ee <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80093ea:	605a      	str	r2, [r3, #4]
 80093ec:	e007      	b.n	80093fe <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	685a      	ldr	r2, [r3, #4]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80093fc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009408:	2b40      	cmp	r3, #64	; 0x40
 800940a:	d007      	beq.n	800941c <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800941a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009424:	f240 80a4 	bls.w	8009570 <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d003      	beq.n	8009438 <HAL_SPI_TransmitReceive+0x18a>
 8009430:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009432:	2b01      	cmp	r3, #1
 8009434:	f040 808e 	bne.w	8009554 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943c:	881a      	ldrh	r2, [r3, #0]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009448:	1c9a      	adds	r2, r3, #2
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009452:	b29b      	uxth	r3, r3
 8009454:	3b01      	subs	r3, #1
 8009456:	b29a      	uxth	r2, r3
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800945c:	e07a      	b.n	8009554 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	f003 0302 	and.w	r3, r3, #2
 8009468:	2b02      	cmp	r3, #2
 800946a:	d13f      	bne.n	80094ec <HAL_SPI_TransmitReceive+0x23e>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009470:	b29b      	uxth	r3, r3
 8009472:	2b00      	cmp	r3, #0
 8009474:	d03a      	beq.n	80094ec <HAL_SPI_TransmitReceive+0x23e>
 8009476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009478:	2b01      	cmp	r3, #1
 800947a:	d137      	bne.n	80094ec <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009480:	881a      	ldrh	r2, [r3, #0]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948c:	1c9a      	adds	r2, r3, #2
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009496:	b29b      	uxth	r3, r3
 8009498:	3b01      	subs	r3, #1
 800949a:	b29a      	uxth	r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80094a0:	2300      	movs	r3, #0
 80094a2:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d11e      	bne.n	80094ec <HAL_SPI_TransmitReceive+0x23e>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094b6:	d119      	bne.n	80094ec <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	f003 0304 	and.w	r3, r3, #4
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10c      	bne.n	80094dc <HAL_SPI_TransmitReceive+0x22e>
 80094c2:	6a3b      	ldr	r3, [r7, #32]
 80094c4:	f003 0308 	and.w	r3, r3, #8
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d007      	beq.n	80094dc <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094da:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80094ea:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d11c      	bne.n	8009534 <HAL_SPI_TransmitReceive+0x286>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009500:	b29b      	uxth	r3, r3
 8009502:	2b00      	cmp	r3, #0
 8009504:	d016      	beq.n	8009534 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68da      	ldr	r2, [r3, #12]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009510:	b292      	uxth	r2, r2
 8009512:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009518:	1c9a      	adds	r2, r3, #2
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009524:	b29b      	uxth	r3, r3
 8009526:	3b01      	subs	r3, #1
 8009528:	b29a      	uxth	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009530:	2301      	movs	r3, #1
 8009532:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009534:	f7f9 faa4 	bl	8002a80 <HAL_GetTick>
 8009538:	4602      	mov	r2, r0
 800953a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009540:	429a      	cmp	r2, r3
 8009542:	d807      	bhi.n	8009554 <HAL_SPI_TransmitReceive+0x2a6>
 8009544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800954a:	d003      	beq.n	8009554 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 800954c:	2303      	movs	r3, #3
 800954e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8009552:	e182      	b.n	800985a <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009558:	b29b      	uxth	r3, r3
 800955a:	2b00      	cmp	r3, #0
 800955c:	f47f af7f 	bne.w	800945e <HAL_SPI_TransmitReceive+0x1b0>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009566:	b29b      	uxth	r3, r3
 8009568:	2b00      	cmp	r3, #0
 800956a:	f47f af78 	bne.w	800945e <HAL_SPI_TransmitReceive+0x1b0>
 800956e:	e103      	b.n	8009778 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d003      	beq.n	8009580 <HAL_SPI_TransmitReceive+0x2d2>
 8009578:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800957a:	2b01      	cmp	r3, #1
 800957c:	f040 80ef 	bne.w	800975e <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009584:	b29b      	uxth	r3, r3
 8009586:	2b01      	cmp	r3, #1
 8009588:	d912      	bls.n	80095b0 <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800958e:	881a      	ldrh	r2, [r3, #0]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959a:	1c9a      	adds	r2, r3, #2
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	3b02      	subs	r3, #2
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095ae:	e0d6      	b.n	800975e <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	330c      	adds	r3, #12
 80095ba:	7812      	ldrb	r2, [r2, #0]
 80095bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c2:	1c5a      	adds	r2, r3, #1
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	3b01      	subs	r3, #1
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095d6:	e0c2      	b.n	800975e <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	f003 0302 	and.w	r3, r3, #2
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d158      	bne.n	8009698 <HAL_SPI_TransmitReceive+0x3ea>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d053      	beq.n	8009698 <HAL_SPI_TransmitReceive+0x3ea>
 80095f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d150      	bne.n	8009698 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d912      	bls.n	8009626 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009604:	881a      	ldrh	r2, [r3, #0]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009610:	1c9a      	adds	r2, r3, #2
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800961a:	b29b      	uxth	r3, r3
 800961c:	3b02      	subs	r3, #2
 800961e:	b29a      	uxth	r2, r3
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009624:	e012      	b.n	800964c <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	330c      	adds	r3, #12
 8009630:	7812      	ldrb	r2, [r2, #0]
 8009632:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009642:	b29b      	uxth	r3, r3
 8009644:	3b01      	subs	r3, #1
 8009646:	b29a      	uxth	r2, r3
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800964c:	2300      	movs	r3, #0
 800964e:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009654:	b29b      	uxth	r3, r3
 8009656:	2b00      	cmp	r3, #0
 8009658:	d11e      	bne.n	8009698 <HAL_SPI_TransmitReceive+0x3ea>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800965e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009662:	d119      	bne.n	8009698 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	f003 0304 	and.w	r3, r3, #4
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10c      	bne.n	8009688 <HAL_SPI_TransmitReceive+0x3da>
 800966e:	6a3b      	ldr	r3, [r7, #32]
 8009670:	f003 0308 	and.w	r3, r3, #8
 8009674:	2b00      	cmp	r3, #0
 8009676:	d007      	beq.n	8009688 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009686:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009696:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d148      	bne.n	8009738 <HAL_SPI_TransmitReceive+0x48a>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d042      	beq.n	8009738 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d923      	bls.n	8009706 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68da      	ldr	r2, [r3, #12]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c8:	b292      	uxth	r2, r2
 80096ca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d0:	1c9a      	adds	r2, r3, #2
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096dc:	b29b      	uxth	r3, r3
 80096de:	3b02      	subs	r3, #2
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d81f      	bhi.n	8009734 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009702:	605a      	str	r2, [r3, #4]
 8009704:	e016      	b.n	8009734 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f103 020c 	add.w	r2, r3, #12
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009712:	7812      	ldrb	r2, [r2, #0]
 8009714:	b2d2      	uxtb	r2, r2
 8009716:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971c:	1c5a      	adds	r2, r3, #1
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009728:	b29b      	uxth	r3, r3
 800972a:	3b01      	subs	r3, #1
 800972c:	b29a      	uxth	r2, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009734:	2301      	movs	r3, #1
 8009736:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009738:	f7f9 f9a2 	bl	8002a80 <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009744:	429a      	cmp	r2, r3
 8009746:	d803      	bhi.n	8009750 <HAL_SPI_TransmitReceive+0x4a2>
 8009748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800974a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800974e:	d102      	bne.n	8009756 <HAL_SPI_TransmitReceive+0x4a8>
 8009750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009752:	2b00      	cmp	r3, #0
 8009754:	d103      	bne.n	800975e <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 800975c:	e07d      	b.n	800985a <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009762:	b29b      	uxth	r3, r3
 8009764:	2b00      	cmp	r3, #0
 8009766:	f47f af37 	bne.w	80095d8 <HAL_SPI_TransmitReceive+0x32a>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009770:	b29b      	uxth	r3, r3
 8009772:	2b00      	cmp	r3, #0
 8009774:	f47f af30 	bne.w	80095d8 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800977c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009780:	d146      	bne.n	8009810 <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009788:	2201      	movs	r2, #1
 800978a:	2101      	movs	r1, #1
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f000 f873 	bl	8009878 <SPI_WaitFlagStateUntilTimeout>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d009      	beq.n	80097ac <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800979c:	f043 0202 	orr.w	r2, r3, #2
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80097a4:	2303      	movs	r3, #3
 80097a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 80097aa:	e056      	b.n	800985a <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80097b4:	d105      	bne.n	80097c2 <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	e026      	b.n	8009810 <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	330c      	adds	r3, #12
 80097c8:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80097d2:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d119      	bne.n	8009810 <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80097dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097e2:	2201      	movs	r2, #1
 80097e4:	2101      	movs	r1, #1
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 f846 	bl	8009878 <SPI_WaitFlagStateUntilTimeout>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d009      	beq.n	8009806 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097f6:	f043 0202 	orr.w	r2, r3, #2
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80097fe:	2303      	movs	r3, #3
 8009800:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8009804:	e029      	b.n	800985a <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	b2db      	uxtb	r3, r3
 800980c:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800980e:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f003 0310 	and.w	r3, r3, #16
 800981a:	2b10      	cmp	r3, #16
 800981c:	d10d      	bne.n	800983a <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009822:	f043 0202 	orr.w	r2, r3, #2
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8009832:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800983a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800983c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 f990 	bl	8009b64 <SPI_EndRxTxTransaction>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d006      	beq.n	8009858 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2220      	movs	r2, #32
 8009854:	661a      	str	r2, [r3, #96]	; 0x60
 8009856:	e000      	b.n	800985a <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8009858:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2200      	movs	r2, #0
 8009866:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800986a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 800986e:	4618      	mov	r0, r3
 8009870:	3740      	adds	r7, #64	; 0x40
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
	...

08009878 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b088      	sub	sp, #32
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	603b      	str	r3, [r7, #0]
 8009884:	4613      	mov	r3, r2
 8009886:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009888:	f7f9 f8fa 	bl	8002a80 <HAL_GetTick>
 800988c:	4602      	mov	r2, r0
 800988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009890:	1a9b      	subs	r3, r3, r2
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	4413      	add	r3, r2
 8009896:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009898:	f7f9 f8f2 	bl	8002a80 <HAL_GetTick>
 800989c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800989e:	4b39      	ldr	r3, [pc, #228]	; (8009984 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	015b      	lsls	r3, r3, #5
 80098a4:	0d1b      	lsrs	r3, r3, #20
 80098a6:	69fa      	ldr	r2, [r7, #28]
 80098a8:	fb02 f303 	mul.w	r3, r2, r3
 80098ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098ae:	e054      	b.n	800995a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b6:	d050      	beq.n	800995a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80098b8:	f7f9 f8e2 	bl	8002a80 <HAL_GetTick>
 80098bc:	4602      	mov	r2, r0
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	69fa      	ldr	r2, [r7, #28]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d902      	bls.n	80098ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d13d      	bne.n	800994a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	685a      	ldr	r2, [r3, #4]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80098dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098e6:	d111      	bne.n	800990c <SPI_WaitFlagStateUntilTimeout+0x94>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098f0:	d004      	beq.n	80098fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098fa:	d107      	bne.n	800990c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800990a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009914:	d10f      	bne.n	8009936 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009924:	601a      	str	r2, [r3, #0]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009934:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2201      	movs	r2, #1
 800993a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	e017      	b.n	800997a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d101      	bne.n	8009954 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009950:	2300      	movs	r3, #0
 8009952:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	3b01      	subs	r3, #1
 8009958:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	689a      	ldr	r2, [r3, #8]
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	4013      	ands	r3, r2
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	429a      	cmp	r2, r3
 8009968:	bf0c      	ite	eq
 800996a:	2301      	moveq	r3, #1
 800996c:	2300      	movne	r3, #0
 800996e:	b2db      	uxtb	r3, r3
 8009970:	461a      	mov	r2, r3
 8009972:	79fb      	ldrb	r3, [r7, #7]
 8009974:	429a      	cmp	r2, r3
 8009976:	d19b      	bne.n	80098b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3720      	adds	r7, #32
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	2000000c 	.word	0x2000000c

08009988 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b08a      	sub	sp, #40	; 0x28
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
 8009994:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009996:	2300      	movs	r3, #0
 8009998:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800999a:	f7f9 f871 	bl	8002a80 <HAL_GetTick>
 800999e:	4602      	mov	r2, r0
 80099a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a2:	1a9b      	subs	r3, r3, r2
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	4413      	add	r3, r2
 80099a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80099aa:	f7f9 f869 	bl	8002a80 <HAL_GetTick>
 80099ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	330c      	adds	r3, #12
 80099b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80099b8:	4b3d      	ldr	r3, [pc, #244]	; (8009ab0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	4613      	mov	r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4413      	add	r3, r2
 80099c2:	00da      	lsls	r2, r3, #3
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	0d1b      	lsrs	r3, r3, #20
 80099c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ca:	fb02 f303 	mul.w	r3, r2, r3
 80099ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80099d0:	e060      	b.n	8009a94 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80099d8:	d107      	bne.n	80099ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d104      	bne.n	80099ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80099e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f0:	d050      	beq.n	8009a94 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80099f2:	f7f9 f845 	bl	8002a80 <HAL_GetTick>
 80099f6:	4602      	mov	r2, r0
 80099f8:	6a3b      	ldr	r3, [r7, #32]
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d902      	bls.n	8009a08 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d13d      	bne.n	8009a84 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	685a      	ldr	r2, [r3, #4]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a20:	d111      	bne.n	8009a46 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a2a:	d004      	beq.n	8009a36 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a34:	d107      	bne.n	8009a46 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a4e:	d10f      	bne.n	8009a70 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a5e:	601a      	str	r2, [r3, #0]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009a80:	2303      	movs	r3, #3
 8009a82:	e010      	b.n	8009aa6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d101      	bne.n	8009a8e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	3b01      	subs	r3, #1
 8009a92:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689a      	ldr	r2, [r3, #8]
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d196      	bne.n	80099d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3728      	adds	r7, #40	; 0x28
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	2000000c 	.word	0x2000000c

08009ab4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b086      	sub	sp, #24
 8009ab8:	af02      	add	r7, sp, #8
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ac8:	d111      	bne.n	8009aee <SPI_EndRxTransaction+0x3a>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ad2:	d004      	beq.n	8009ade <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009adc:	d107      	bne.n	8009aee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009aec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	9300      	str	r3, [sp, #0]
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2200      	movs	r2, #0
 8009af6:	2180      	movs	r1, #128	; 0x80
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f7ff febd 	bl	8009878 <SPI_WaitFlagStateUntilTimeout>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d007      	beq.n	8009b14 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b08:	f043 0220 	orr.w	r2, r3, #32
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e023      	b.n	8009b5c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b1c:	d11d      	bne.n	8009b5a <SPI_EndRxTransaction+0xa6>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b26:	d004      	beq.n	8009b32 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b30:	d113      	bne.n	8009b5a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	f7ff ff22 	bl	8009988 <SPI_WaitFifoStateUntilTimeout>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d007      	beq.n	8009b5a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b4e:	f043 0220 	orr.w	r2, r3, #32
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e000      	b.n	8009b5c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af02      	add	r7, sp, #8
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f7ff ff03 	bl	8009988 <SPI_WaitFifoStateUntilTimeout>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d007      	beq.n	8009b98 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b8c:	f043 0220 	orr.w	r2, r3, #32
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e027      	b.n	8009be8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2180      	movs	r1, #128	; 0x80
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f7ff fe68 	bl	8009878 <SPI_WaitFlagStateUntilTimeout>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d007      	beq.n	8009bbe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bb2:	f043 0220 	orr.w	r2, r3, #32
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	e014      	b.n	8009be8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f7ff fedc 	bl	8009988 <SPI_WaitFifoStateUntilTimeout>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d007      	beq.n	8009be6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bda:	f043 0220 	orr.w	r2, r3, #32
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e000      	b.n	8009be8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <LL_PWR_SetRadioBusyTrigger>:
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8009bf8:	4b06      	ldr	r3, [pc, #24]	; (8009c14 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009c00:	4904      	ldr	r1, [pc, #16]	; (8009c14 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	608b      	str	r3, [r1, #8]
}
 8009c08:	bf00      	nop
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bc80      	pop	{r7}
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	58000400 	.word	0x58000400

08009c18 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8009c18:	b480      	push	{r7}
 8009c1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009c1c:	4b05      	ldr	r3, [pc, #20]	; (8009c34 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c22:	4a04      	ldr	r2, [pc, #16]	; (8009c34 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009c2c:	bf00      	nop
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bc80      	pop	{r7}
 8009c32:	4770      	bx	lr
 8009c34:	58000400 	.word	0x58000400

08009c38 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8009c38:	b480      	push	{r7}
 8009c3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009c3c:	4b05      	ldr	r3, [pc, #20]	; (8009c54 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c42:	4a04      	ldr	r2, [pc, #16]	; (8009c54 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009c44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009c4c:	bf00      	nop
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bc80      	pop	{r7}
 8009c52:	4770      	bx	lr
 8009c54:	58000400 	.word	0x58000400

08009c58 <LL_PWR_ClearFlag_RFBUSY>:
{
 8009c58:	b480      	push	{r7}
 8009c5a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8009c5c:	4b03      	ldr	r3, [pc, #12]	; (8009c6c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8009c5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c62:	619a      	str	r2, [r3, #24]
}
 8009c64:	bf00      	nop
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bc80      	pop	{r7}
 8009c6a:	4770      	bx	lr
 8009c6c:	58000400 	.word	0x58000400

08009c70 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8009c70:	b480      	push	{r7}
 8009c72:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8009c74:	4b06      	ldr	r3, [pc, #24]	; (8009c90 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8009c76:	695b      	ldr	r3, [r3, #20]
 8009c78:	f003 0302 	and.w	r3, r3, #2
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d101      	bne.n	8009c84 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8009c80:	2301      	movs	r3, #1
 8009c82:	e000      	b.n	8009c86 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bc80      	pop	{r7}
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	58000400 	.word	0x58000400

08009c94 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8009c94:	b480      	push	{r7}
 8009c96:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8009c98:	4b06      	ldr	r3, [pc, #24]	; (8009cb4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8009c9a:	695b      	ldr	r3, [r3, #20]
 8009c9c:	f003 0304 	and.w	r3, r3, #4
 8009ca0:	2b04      	cmp	r3, #4
 8009ca2:	d101      	bne.n	8009ca8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e000      	b.n	8009caa <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bc80      	pop	{r7}
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	58000400 	.word	0x58000400

08009cb8 <LL_RCC_RF_DisableReset>:
{
 8009cb8:	b480      	push	{r7}
 8009cba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8009cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009cc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ccc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009cd0:	bf00      	nop
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bc80      	pop	{r7}
 8009cd6:	4770      	bx	lr

08009cd8 <LL_RCC_IsRFUnderReset>:
{
 8009cd8:	b480      	push	{r7}
 8009cda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8009cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ce8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cec:	d101      	bne.n	8009cf2 <LL_RCC_IsRFUnderReset+0x1a>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e000      	b.n	8009cf4 <LL_RCC_IsRFUnderReset+0x1c>
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bc80      	pop	{r7}
 8009cfa:	4770      	bx	lr

08009cfc <LL_EXTI_EnableIT_32_63>:
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009d04:	4b06      	ldr	r3, [pc, #24]	; (8009d20 <LL_EXTI_EnableIT_32_63+0x24>)
 8009d06:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009d0a:	4905      	ldr	r1, [pc, #20]	; (8009d20 <LL_EXTI_EnableIT_32_63+0x24>)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bc80      	pop	{r7}
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	58000800 	.word	0x58000800

08009d24 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d103      	bne.n	8009d3a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	73fb      	strb	r3, [r7, #15]
    return status;
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	e04b      	b.n	8009dd2 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	799b      	ldrb	r3, [r3, #6]
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d105      	bne.n	8009d54 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7f8 fcee 	bl	8002730 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2202      	movs	r2, #2
 8009d58:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8009d5a:	f7ff ffad 	bl	8009cb8 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009d5e:	4b1f      	ldr	r3, [pc, #124]	; (8009ddc <HAL_SUBGHZ_Init+0xb8>)
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	4613      	mov	r3, r2
 8009d64:	00db      	lsls	r3, r3, #3
 8009d66:	1a9b      	subs	r3, r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	0cdb      	lsrs	r3, r3, #19
 8009d6c:	2264      	movs	r2, #100	; 0x64
 8009d6e:	fb02 f303 	mul.w	r3, r2, r3
 8009d72:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d105      	bne.n	8009d86 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2201      	movs	r2, #1
 8009d82:	609a      	str	r2, [r3, #8]
      break;
 8009d84:	e007      	b.n	8009d96 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8009d8c:	f7ff ffa4 	bl	8009cd8 <LL_RCC_IsRFUnderReset>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1ee      	bne.n	8009d74 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8009d96:	f7ff ff3f 	bl	8009c18 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8009d9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009d9e:	f7ff ffad 	bl	8009cfc <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8009da2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009da6:	f7ff ff23 	bl	8009bf0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8009daa:	f7ff ff55 	bl	8009c58 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d10a      	bne.n	8009dca <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f000 faa5 	bl	800a308 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	719a      	strb	r2, [r3, #6]

  return status;
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	2000000c 	.word	0x2000000c

08009de0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	607a      	str	r2, [r7, #4]
 8009dea:	461a      	mov	r2, r3
 8009dec:	460b      	mov	r3, r1
 8009dee:	817b      	strh	r3, [r7, #10]
 8009df0:	4613      	mov	r3, r2
 8009df2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	799b      	ldrb	r3, [r3, #6]
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d14a      	bne.n	8009e94 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	795b      	ldrb	r3, [r3, #5]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d101      	bne.n	8009e0a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8009e06:	2302      	movs	r3, #2
 8009e08:	e045      	b.n	8009e96 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2202      	movs	r2, #2
 8009e14:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	f000 fb44 	bl	800a4a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009e1c:	f7ff ff0c 	bl	8009c38 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8009e20:	210d      	movs	r1, #13
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f000 fa90 	bl	800a348 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009e28:	897b      	ldrh	r3, [r7, #10]
 8009e2a:	0a1b      	lsrs	r3, r3, #8
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	4619      	mov	r1, r3
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f000 fa88 	bl	800a348 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009e38:	897b      	ldrh	r3, [r7, #10]
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f000 fa82 	bl	800a348 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009e44:	2300      	movs	r3, #0
 8009e46:	82bb      	strh	r3, [r7, #20]
 8009e48:	e00a      	b.n	8009e60 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009e4a:	8abb      	ldrh	r3, [r7, #20]
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	4413      	add	r3, r2
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	4619      	mov	r1, r3
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f000 fa77 	bl	800a348 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009e5a:	8abb      	ldrh	r3, [r7, #20]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	82bb      	strh	r3, [r7, #20]
 8009e60:	8aba      	ldrh	r2, [r7, #20]
 8009e62:	893b      	ldrh	r3, [r7, #8]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d3f0      	bcc.n	8009e4a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009e68:	f7ff fed6 	bl	8009c18 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f000 fb3d 	bl	800a4ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	75fb      	strb	r3, [r7, #23]
 8009e7e:	e001      	b.n	8009e84 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009e80:	2300      	movs	r3, #0
 8009e82:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2201      	movs	r2, #1
 8009e88:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	715a      	strb	r2, [r3, #5]

    return status;
 8009e90:	7dfb      	ldrb	r3, [r7, #23]
 8009e92:	e000      	b.n	8009e96 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009e94:	2302      	movs	r3, #2
  }
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3718      	adds	r7, #24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b088      	sub	sp, #32
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	60f8      	str	r0, [r7, #12]
 8009ea6:	607a      	str	r2, [r7, #4]
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	460b      	mov	r3, r1
 8009eac:	817b      	strh	r3, [r7, #10]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	799b      	ldrb	r3, [r3, #6]
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d14a      	bne.n	8009f56 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	795b      	ldrb	r3, [r3, #5]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d101      	bne.n	8009ecc <HAL_SUBGHZ_ReadRegisters+0x2e>
 8009ec8:	2302      	movs	r3, #2
 8009eca:	e045      	b.n	8009f58 <HAL_SUBGHZ_ReadRegisters+0xba>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f000 fae6 	bl	800a4a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009ed8:	f7ff feae 	bl	8009c38 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8009edc:	211d      	movs	r1, #29
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f000 fa32 	bl	800a348 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009ee4:	897b      	ldrh	r3, [r7, #10]
 8009ee6:	0a1b      	lsrs	r3, r3, #8
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	4619      	mov	r1, r3
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f000 fa2a 	bl	800a348 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009ef4:	897b      	ldrh	r3, [r7, #10]
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	4619      	mov	r1, r3
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f000 fa24 	bl	800a348 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8009f00:	2100      	movs	r1, #0
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f000 fa20 	bl	800a348 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009f08:	2300      	movs	r3, #0
 8009f0a:	82fb      	strh	r3, [r7, #22]
 8009f0c:	e009      	b.n	8009f22 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009f0e:	69b9      	ldr	r1, [r7, #24]
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f000 fa6f 	bl	800a3f4 <SUBGHZSPI_Receive>
      pData++;
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009f1c:	8afb      	ldrh	r3, [r7, #22]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	82fb      	strh	r3, [r7, #22]
 8009f22:	8afa      	ldrh	r2, [r7, #22]
 8009f24:	893b      	ldrh	r3, [r7, #8]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d3f1      	bcc.n	8009f0e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009f2a:	f7ff fe75 	bl	8009c18 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f000 fadc 	bl	800a4ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	77fb      	strb	r3, [r7, #31]
 8009f40:	e001      	b.n	8009f46 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8009f42:	2300      	movs	r3, #0
 8009f44:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	715a      	strb	r2, [r3, #5]

    return status;
 8009f52:	7ffb      	ldrb	r3, [r7, #31]
 8009f54:	e000      	b.n	8009f58 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8009f56:	2302      	movs	r3, #2
  }
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3720      	adds	r7, #32
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	607a      	str	r2, [r7, #4]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	72fb      	strb	r3, [r7, #11]
 8009f70:	4613      	mov	r3, r2
 8009f72:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	799b      	ldrb	r3, [r3, #6]
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d14a      	bne.n	800a014 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	795b      	ldrb	r3, [r3, #5]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d101      	bne.n	8009f8a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8009f86:	2302      	movs	r3, #2
 8009f88:	e045      	b.n	800a016 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f000 fa87 	bl	800a4a4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8009f96:	7afb      	ldrb	r3, [r7, #11]
 8009f98:	2b84      	cmp	r3, #132	; 0x84
 8009f9a:	d002      	beq.n	8009fa2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8009f9c:	7afb      	ldrb	r3, [r7, #11]
 8009f9e:	2b94      	cmp	r3, #148	; 0x94
 8009fa0:	d103      	bne.n	8009faa <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	711a      	strb	r2, [r3, #4]
 8009fa8:	e002      	b.n	8009fb0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009fb0:	f7ff fe42 	bl	8009c38 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009fb4:	7afb      	ldrb	r3, [r7, #11]
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f000 f9c5 	bl	800a348 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	82bb      	strh	r3, [r7, #20]
 8009fc2:	e00a      	b.n	8009fda <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009fc4:	8abb      	ldrh	r3, [r7, #20]
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	4413      	add	r3, r2
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f000 f9ba 	bl	800a348 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009fd4:	8abb      	ldrh	r3, [r7, #20]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	82bb      	strh	r3, [r7, #20]
 8009fda:	8aba      	ldrh	r2, [r7, #20]
 8009fdc:	893b      	ldrh	r3, [r7, #8]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d3f0      	bcc.n	8009fc4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009fe2:	f7ff fe19 	bl	8009c18 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8009fe6:	7afb      	ldrb	r3, [r7, #11]
 8009fe8:	2b84      	cmp	r3, #132	; 0x84
 8009fea:	d002      	beq.n	8009ff2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f000 fa7d 	bl	800a4ec <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d002      	beq.n	800a000 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	75fb      	strb	r3, [r7, #23]
 8009ffe:	e001      	b.n	800a004 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a000:	2300      	movs	r3, #0
 800a002:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2201      	movs	r2, #1
 800a008:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	715a      	strb	r2, [r3, #5]

    return status;
 800a010:	7dfb      	ldrb	r3, [r7, #23]
 800a012:	e000      	b.n	800a016 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a014:	2302      	movs	r3, #2
  }
}
 800a016:	4618      	mov	r0, r3
 800a018:	3718      	adds	r7, #24
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b088      	sub	sp, #32
 800a022:	af00      	add	r7, sp, #0
 800a024:	60f8      	str	r0, [r7, #12]
 800a026:	607a      	str	r2, [r7, #4]
 800a028:	461a      	mov	r2, r3
 800a02a:	460b      	mov	r3, r1
 800a02c:	72fb      	strb	r3, [r7, #11]
 800a02e:	4613      	mov	r3, r2
 800a030:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	799b      	ldrb	r3, [r3, #6]
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d13d      	bne.n	800a0bc <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	795b      	ldrb	r3, [r3, #5]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d101      	bne.n	800a04c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800a048:	2302      	movs	r3, #2
 800a04a:	e038      	b.n	800a0be <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2201      	movs	r2, #1
 800a050:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f000 fa26 	bl	800a4a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a058:	f7ff fdee 	bl	8009c38 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a05c:	7afb      	ldrb	r3, [r7, #11]
 800a05e:	4619      	mov	r1, r3
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f000 f971 	bl	800a348 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a066:	2100      	movs	r1, #0
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f000 f96d 	bl	800a348 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a06e:	2300      	movs	r3, #0
 800a070:	82fb      	strh	r3, [r7, #22]
 800a072:	e009      	b.n	800a088 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a074:	69b9      	ldr	r1, [r7, #24]
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 f9bc 	bl	800a3f4 <SUBGHZSPI_Receive>
      pData++;
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	3301      	adds	r3, #1
 800a080:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a082:	8afb      	ldrh	r3, [r7, #22]
 800a084:	3301      	adds	r3, #1
 800a086:	82fb      	strh	r3, [r7, #22]
 800a088:	8afa      	ldrh	r2, [r7, #22]
 800a08a:	893b      	ldrh	r3, [r7, #8]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d3f1      	bcc.n	800a074 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a090:	f7ff fdc2 	bl	8009c18 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f000 fa29 	bl	800a4ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d002      	beq.n	800a0a8 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	77fb      	strb	r3, [r7, #31]
 800a0a6:	e001      	b.n	800a0ac <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	715a      	strb	r2, [r3, #5]

    return status;
 800a0b8:	7ffb      	ldrb	r3, [r7, #31]
 800a0ba:	e000      	b.n	800a0be <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a0bc:	2302      	movs	r3, #2
  }
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3720      	adds	r7, #32
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b086      	sub	sp, #24
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	60f8      	str	r0, [r7, #12]
 800a0ce:	607a      	str	r2, [r7, #4]
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	72fb      	strb	r3, [r7, #11]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	799b      	ldrb	r3, [r3, #6]
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d13e      	bne.n	800a162 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	795b      	ldrb	r3, [r3, #5]
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d101      	bne.n	800a0f0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800a0ec:	2302      	movs	r3, #2
 800a0ee:	e039      	b.n	800a164 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f000 f9d4 	bl	800a4a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a0fc:	f7ff fd9c 	bl	8009c38 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800a100:	210e      	movs	r1, #14
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f000 f920 	bl	800a348 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a108:	7afb      	ldrb	r3, [r7, #11]
 800a10a:	4619      	mov	r1, r3
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f000 f91b 	bl	800a348 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a112:	2300      	movs	r3, #0
 800a114:	82bb      	strh	r3, [r7, #20]
 800a116:	e00a      	b.n	800a12e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a118:	8abb      	ldrh	r3, [r7, #20]
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	4413      	add	r3, r2
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	4619      	mov	r1, r3
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f000 f910 	bl	800a348 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a128:	8abb      	ldrh	r3, [r7, #20]
 800a12a:	3301      	adds	r3, #1
 800a12c:	82bb      	strh	r3, [r7, #20]
 800a12e:	8aba      	ldrh	r2, [r7, #20]
 800a130:	893b      	ldrh	r3, [r7, #8]
 800a132:	429a      	cmp	r2, r3
 800a134:	d3f0      	bcc.n	800a118 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a136:	f7ff fd6f 	bl	8009c18 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f000 f9d6 	bl	800a4ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	75fb      	strb	r3, [r7, #23]
 800a14c:	e001      	b.n	800a152 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2201      	movs	r2, #1
 800a156:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2200      	movs	r2, #0
 800a15c:	715a      	strb	r2, [r3, #5]

    return status;
 800a15e:	7dfb      	ldrb	r3, [r7, #23]
 800a160:	e000      	b.n	800a164 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a162:	2302      	movs	r3, #2
  }
}
 800a164:	4618      	mov	r0, r3
 800a166:	3718      	adds	r7, #24
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b088      	sub	sp, #32
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	607a      	str	r2, [r7, #4]
 800a176:	461a      	mov	r2, r3
 800a178:	460b      	mov	r3, r1
 800a17a:	72fb      	strb	r3, [r7, #11]
 800a17c:	4613      	mov	r3, r2
 800a17e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	799b      	ldrb	r3, [r3, #6]
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d141      	bne.n	800a212 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	795b      	ldrb	r3, [r3, #5]
 800a192:	2b01      	cmp	r3, #1
 800a194:	d101      	bne.n	800a19a <HAL_SUBGHZ_ReadBuffer+0x2e>
 800a196:	2302      	movs	r3, #2
 800a198:	e03c      	b.n	800a214 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2201      	movs	r2, #1
 800a19e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 f97f 	bl	800a4a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a1a6:	f7ff fd47 	bl	8009c38 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800a1aa:	211e      	movs	r1, #30
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 f8cb 	bl	800a348 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a1b2:	7afb      	ldrb	r3, [r7, #11]
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 f8c6 	bl	800a348 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a1bc:	2100      	movs	r1, #0
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f000 f8c2 	bl	800a348 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	82fb      	strh	r3, [r7, #22]
 800a1c8:	e009      	b.n	800a1de <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a1ca:	69b9      	ldr	r1, [r7, #24]
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f000 f911 	bl	800a3f4 <SUBGHZSPI_Receive>
      pData++;
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a1d8:	8afb      	ldrh	r3, [r7, #22]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	82fb      	strh	r3, [r7, #22]
 800a1de:	8afa      	ldrh	r2, [r7, #22]
 800a1e0:	893b      	ldrh	r3, [r7, #8]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d3f1      	bcc.n	800a1ca <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a1e6:	f7ff fd17 	bl	8009c18 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f000 f97e 	bl	800a4ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d002      	beq.n	800a1fe <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	77fb      	strb	r3, [r7, #31]
 800a1fc:	e001      	b.n	800a202 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2201      	movs	r2, #1
 800a206:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2200      	movs	r2, #0
 800a20c:	715a      	strb	r2, [r3, #5]

    return status;
 800a20e:	7ffb      	ldrb	r3, [r7, #31]
 800a210:	e000      	b.n	800a214 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a212:	2302      	movs	r3, #2
  }
}
 800a214:	4618      	mov	r0, r3
 800a216:	3720      	adds	r7, #32
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800a224:	2300      	movs	r3, #0
 800a226:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800a228:	f107 020c 	add.w	r2, r7, #12
 800a22c:	2302      	movs	r3, #2
 800a22e:	2112      	movs	r1, #18
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f7ff fef4 	bl	800a01e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800a236:	7b3b      	ldrb	r3, [r7, #12]
 800a238:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800a23a:	89fb      	ldrh	r3, [r7, #14]
 800a23c:	021b      	lsls	r3, r3, #8
 800a23e:	b21a      	sxth	r2, r3
 800a240:	7b7b      	ldrb	r3, [r7, #13]
 800a242:	b21b      	sxth	r3, r3
 800a244:	4313      	orrs	r3, r2
 800a246:	b21b      	sxth	r3, r3
 800a248:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800a24a:	89fb      	ldrh	r3, [r7, #14]
 800a24c:	f003 0301 	and.w	r3, r3, #1
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f012 fb7b 	bl	801c950 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800a25a:	89fb      	ldrh	r3, [r7, #14]
 800a25c:	f003 0302 	and.w	r3, r3, #2
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f012 fb81 	bl	801c96c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800a26a:	89fb      	ldrh	r3, [r7, #14]
 800a26c:	f003 0304 	and.w	r3, r3, #4
 800a270:	2b00      	cmp	r3, #0
 800a272:	d002      	beq.n	800a27a <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f012 fbd1 	bl	801ca1c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800a27a:	89fb      	ldrh	r3, [r7, #14]
 800a27c:	f003 0308 	and.w	r3, r3, #8
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <HAL_SUBGHZ_IRQHandler+0x6e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f012 fbd7 	bl	801ca38 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800a28a:	89fb      	ldrh	r3, [r7, #14]
 800a28c:	f003 0310 	and.w	r3, r3, #16
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f012 fbdd 	bl	801ca54 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800a29a:	89fb      	ldrh	r3, [r7, #14]
 800a29c:	f003 0320 	and.w	r3, r3, #32
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <HAL_SUBGHZ_IRQHandler+0x8e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f012 fbab 	bl	801ca00 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800a2aa:	89fb      	ldrh	r3, [r7, #14]
 800a2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d002      	beq.n	800a2ba <HAL_SUBGHZ_IRQHandler+0x9e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f012 fb67 	bl	801c988 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800a2ba:	89fb      	ldrh	r3, [r7, #14]
 800a2bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00d      	beq.n	800a2e0 <HAL_SUBGHZ_IRQHandler+0xc4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800a2c4:	89fb      	ldrh	r3, [r7, #14]
 800a2c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d004      	beq.n	800a2d8 <HAL_SUBGHZ_IRQHandler+0xbc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800a2ce:	2101      	movs	r1, #1
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f012 fb67 	bl	801c9a4 <HAL_SUBGHZ_CADStatusCallback>
 800a2d6:	e003      	b.n	800a2e0 <HAL_SUBGHZ_IRQHandler+0xc4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800a2d8:	2100      	movs	r1, #0
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f012 fb62 	bl	801c9a4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800a2e0:	89fb      	ldrh	r3, [r7, #14]
 800a2e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d002      	beq.n	800a2f0 <HAL_SUBGHZ_IRQHandler+0xd4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f012 fb78 	bl	801c9e0 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 800a2f0:	f107 020c 	add.w	r2, r7, #12
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	2102      	movs	r1, #2
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7ff fe31 	bl	8009f60 <HAL_SUBGHZ_ExecSetCmd>
}
 800a2fe:	bf00      	nop
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
	...

0800a308 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a310:	4b0c      	ldr	r3, [pc, #48]	; (800a344 <SUBGHZSPI_Init+0x3c>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a0b      	ldr	r2, [pc, #44]	; (800a344 <SUBGHZSPI_Init+0x3c>)
 800a316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a31a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800a31c:	4a09      	ldr	r2, [pc, #36]	; (800a344 <SUBGHZSPI_Init+0x3c>)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800a324:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800a326:	4b07      	ldr	r3, [pc, #28]	; (800a344 <SUBGHZSPI_Init+0x3c>)
 800a328:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800a32c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a32e:	4b05      	ldr	r3, [pc, #20]	; (800a344 <SUBGHZSPI_Init+0x3c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a04      	ldr	r2, [pc, #16]	; (800a344 <SUBGHZSPI_Init+0x3c>)
 800a334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a338:	6013      	str	r3, [r2, #0]
}
 800a33a:	bf00      	nop
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	bc80      	pop	{r7}
 800a342:	4770      	bx	lr
 800a344:	58010000 	.word	0x58010000

0800a348 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800a348:	b480      	push	{r7}
 800a34a:	b087      	sub	sp, #28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	460b      	mov	r3, r1
 800a352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800a354:	2300      	movs	r3, #0
 800a356:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a358:	4b23      	ldr	r3, [pc, #140]	; (800a3e8 <SUBGHZSPI_Transmit+0xa0>)
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	4613      	mov	r3, r2
 800a35e:	00db      	lsls	r3, r3, #3
 800a360:	1a9b      	subs	r3, r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	0cdb      	lsrs	r3, r3, #19
 800a366:	2264      	movs	r2, #100	; 0x64
 800a368:	fb02 f303 	mul.w	r3, r2, r3
 800a36c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d105      	bne.n	800a380 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	609a      	str	r2, [r3, #8]
      break;
 800a37e:	e008      	b.n	800a392 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	3b01      	subs	r3, #1
 800a384:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a386:	4b19      	ldr	r3, [pc, #100]	; (800a3ec <SUBGHZSPI_Transmit+0xa4>)
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	f003 0302 	and.w	r3, r3, #2
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d1ed      	bne.n	800a36e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a392:	4b17      	ldr	r3, [pc, #92]	; (800a3f0 <SUBGHZSPI_Transmit+0xa8>)
 800a394:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	78fa      	ldrb	r2, [r7, #3]
 800a39a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a39c:	4b12      	ldr	r3, [pc, #72]	; (800a3e8 <SUBGHZSPI_Transmit+0xa0>)
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	00db      	lsls	r3, r3, #3
 800a3a4:	1a9b      	subs	r3, r3, r2
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	0cdb      	lsrs	r3, r3, #19
 800a3aa:	2264      	movs	r2, #100	; 0x64
 800a3ac:	fb02 f303 	mul.w	r3, r2, r3
 800a3b0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d105      	bne.n	800a3c4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	609a      	str	r2, [r3, #8]
      break;
 800a3c2:	e008      	b.n	800a3d6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a3ca:	4b08      	ldr	r3, [pc, #32]	; (800a3ec <SUBGHZSPI_Transmit+0xa4>)
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	f003 0301 	and.w	r3, r3, #1
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d1ed      	bne.n	800a3b2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800a3d6:	4b05      	ldr	r3, [pc, #20]	; (800a3ec <SUBGHZSPI_Transmit+0xa4>)
 800a3d8:	68db      	ldr	r3, [r3, #12]

  return status;
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	371c      	adds	r7, #28
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bc80      	pop	{r7}
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	2000000c 	.word	0x2000000c
 800a3ec:	58010000 	.word	0x58010000
 800a3f0:	5801000c 	.word	0x5801000c

0800a3f4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b087      	sub	sp, #28
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3fe:	2300      	movs	r3, #0
 800a400:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a402:	4b25      	ldr	r3, [pc, #148]	; (800a498 <SUBGHZSPI_Receive+0xa4>)
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	4613      	mov	r3, r2
 800a408:	00db      	lsls	r3, r3, #3
 800a40a:	1a9b      	subs	r3, r3, r2
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	0cdb      	lsrs	r3, r3, #19
 800a410:	2264      	movs	r2, #100	; 0x64
 800a412:	fb02 f303 	mul.w	r3, r2, r3
 800a416:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d105      	bne.n	800a42a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	609a      	str	r2, [r3, #8]
      break;
 800a428:	e008      	b.n	800a43c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	3b01      	subs	r3, #1
 800a42e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a430:	4b1a      	ldr	r3, [pc, #104]	; (800a49c <SUBGHZSPI_Receive+0xa8>)
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	f003 0302 	and.w	r3, r3, #2
 800a438:	2b02      	cmp	r3, #2
 800a43a:	d1ed      	bne.n	800a418 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a43c:	4b18      	ldr	r3, [pc, #96]	; (800a4a0 <SUBGHZSPI_Receive+0xac>)
 800a43e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	22ff      	movs	r2, #255	; 0xff
 800a444:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a446:	4b14      	ldr	r3, [pc, #80]	; (800a498 <SUBGHZSPI_Receive+0xa4>)
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	4613      	mov	r3, r2
 800a44c:	00db      	lsls	r3, r3, #3
 800a44e:	1a9b      	subs	r3, r3, r2
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	0cdb      	lsrs	r3, r3, #19
 800a454:	2264      	movs	r2, #100	; 0x64
 800a456:	fb02 f303 	mul.w	r3, r2, r3
 800a45a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d105      	bne.n	800a46e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2201      	movs	r2, #1
 800a46a:	609a      	str	r2, [r3, #8]
      break;
 800a46c:	e008      	b.n	800a480 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3b01      	subs	r3, #1
 800a472:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a474:	4b09      	ldr	r3, [pc, #36]	; (800a49c <SUBGHZSPI_Receive+0xa8>)
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d1ed      	bne.n	800a45c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800a480:	4b06      	ldr	r3, [pc, #24]	; (800a49c <SUBGHZSPI_Receive+0xa8>)
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	b2da      	uxtb	r2, r3
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	701a      	strb	r2, [r3, #0]

  return status;
 800a48a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	371c      	adds	r7, #28
 800a490:	46bd      	mov	sp, r7
 800a492:	bc80      	pop	{r7}
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	2000000c 	.word	0x2000000c
 800a49c:	58010000 	.word	0x58010000
 800a4a0:	5801000c 	.word	0x5801000c

0800a4a4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	791b      	ldrb	r3, [r3, #4]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d111      	bne.n	800a4d8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800a4b4:	4b0c      	ldr	r3, [pc, #48]	; (800a4e8 <SUBGHZ_CheckDeviceReady+0x44>)
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	005b      	lsls	r3, r3, #1
 800a4bc:	4413      	add	r3, r2
 800a4be:	00db      	lsls	r3, r3, #3
 800a4c0:	0c1b      	lsrs	r3, r3, #16
 800a4c2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a4c4:	f7ff fbb8 	bl	8009c38 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1f9      	bne.n	800a4c8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a4d4:	f7ff fba0 	bl	8009c18 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 f807 	bl	800a4ec <SUBGHZ_WaitOnBusy>
 800a4de:	4603      	mov	r3, r0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	2000000c 	.word	0x2000000c

0800a4ec <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800a4f8:	4b12      	ldr	r3, [pc, #72]	; (800a544 <SUBGHZ_WaitOnBusy+0x58>)
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	005b      	lsls	r3, r3, #1
 800a500:	4413      	add	r3, r2
 800a502:	00db      	lsls	r3, r3, #3
 800a504:	0d1b      	lsrs	r3, r3, #20
 800a506:	2264      	movs	r2, #100	; 0x64
 800a508:	fb02 f303 	mul.w	r3, r2, r3
 800a50c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800a50e:	f7ff fbc1 	bl	8009c94 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800a512:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d105      	bne.n	800a526 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2202      	movs	r2, #2
 800a522:	609a      	str	r2, [r3, #8]
      break;
 800a524:	e009      	b.n	800a53a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	3b01      	subs	r3, #1
 800a52a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800a52c:	f7ff fba0 	bl	8009c70 <LL_PWR_IsActiveFlag_RFBUSYS>
 800a530:	4602      	mov	r2, r0
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	4013      	ands	r3, r2
 800a536:	2b01      	cmp	r3, #1
 800a538:	d0e9      	beq.n	800a50e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	2000000c 	.word	0x2000000c

0800a548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d101      	bne.n	800a55a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	e049      	b.n	800a5ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a560:	b2db      	uxtb	r3, r3
 800a562:	2b00      	cmp	r3, #0
 800a564:	d106      	bne.n	800a574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7f8 fb82 	bl	8002c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2202      	movs	r2, #2
 800a578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	3304      	adds	r3, #4
 800a584:	4619      	mov	r1, r3
 800a586:	4610      	mov	r0, r2
 800a588:	f000 f9c6 	bl	800a918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3708      	adds	r7, #8
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
	...

0800a5f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a606:	b2db      	uxtb	r3, r3
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d001      	beq.n	800a610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	e036      	b.n	800a67e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2202      	movs	r2, #2
 800a614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68da      	ldr	r2, [r3, #12]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f042 0201 	orr.w	r2, r2, #1
 800a626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a16      	ldr	r2, [pc, #88]	; (800a688 <HAL_TIM_Base_Start_IT+0x90>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d004      	beq.n	800a63c <HAL_TIM_Base_Start_IT+0x44>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a63a:	d115      	bne.n	800a668 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	689a      	ldr	r2, [r3, #8]
 800a642:	4b12      	ldr	r3, [pc, #72]	; (800a68c <HAL_TIM_Base_Start_IT+0x94>)
 800a644:	4013      	ands	r3, r2
 800a646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2b06      	cmp	r3, #6
 800a64c:	d015      	beq.n	800a67a <HAL_TIM_Base_Start_IT+0x82>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a654:	d011      	beq.n	800a67a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f042 0201 	orr.w	r2, r2, #1
 800a664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a666:	e008      	b.n	800a67a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f042 0201 	orr.w	r2, r2, #1
 800a676:	601a      	str	r2, [r3, #0]
 800a678:	e000      	b.n	800a67c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a67a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	bc80      	pop	{r7}
 800a686:	4770      	bx	lr
 800a688:	40012c00 	.word	0x40012c00
 800a68c:	00010007 	.word	0x00010007

0800a690 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	f003 0302 	and.w	r3, r3, #2
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d122      	bne.n	800a6ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	f003 0302 	and.w	r3, r3, #2
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d11b      	bne.n	800a6ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f06f 0202 	mvn.w	r2, #2
 800a6bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	699b      	ldr	r3, [r3, #24]
 800a6ca:	f003 0303 	and.w	r3, r3, #3
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d003      	beq.n	800a6da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f904 	bl	800a8e0 <HAL_TIM_IC_CaptureCallback>
 800a6d8:	e005      	b.n	800a6e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 f8f7 	bl	800a8ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 f906 	bl	800a8f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	691b      	ldr	r3, [r3, #16]
 800a6f2:	f003 0304 	and.w	r3, r3, #4
 800a6f6:	2b04      	cmp	r3, #4
 800a6f8:	d122      	bne.n	800a740 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	f003 0304 	and.w	r3, r3, #4
 800a704:	2b04      	cmp	r3, #4
 800a706:	d11b      	bne.n	800a740 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f06f 0204 	mvn.w	r2, #4
 800a710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2202      	movs	r2, #2
 800a716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a722:	2b00      	cmp	r3, #0
 800a724:	d003      	beq.n	800a72e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 f8da 	bl	800a8e0 <HAL_TIM_IC_CaptureCallback>
 800a72c:	e005      	b.n	800a73a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f8cd 	bl	800a8ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f8dc 	bl	800a8f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	f003 0308 	and.w	r3, r3, #8
 800a74a:	2b08      	cmp	r3, #8
 800a74c:	d122      	bne.n	800a794 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	f003 0308 	and.w	r3, r3, #8
 800a758:	2b08      	cmp	r3, #8
 800a75a:	d11b      	bne.n	800a794 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f06f 0208 	mvn.w	r2, #8
 800a764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2204      	movs	r2, #4
 800a76a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	69db      	ldr	r3, [r3, #28]
 800a772:	f003 0303 	and.w	r3, r3, #3
 800a776:	2b00      	cmp	r3, #0
 800a778:	d003      	beq.n	800a782 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f8b0 	bl	800a8e0 <HAL_TIM_IC_CaptureCallback>
 800a780:	e005      	b.n	800a78e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f8a3 	bl	800a8ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f8b2 	bl	800a8f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	f003 0310 	and.w	r3, r3, #16
 800a79e:	2b10      	cmp	r3, #16
 800a7a0:	d122      	bne.n	800a7e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	f003 0310 	and.w	r3, r3, #16
 800a7ac:	2b10      	cmp	r3, #16
 800a7ae:	d11b      	bne.n	800a7e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f06f 0210 	mvn.w	r2, #16
 800a7b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2208      	movs	r2, #8
 800a7be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	69db      	ldr	r3, [r3, #28]
 800a7c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d003      	beq.n	800a7d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 f886 	bl	800a8e0 <HAL_TIM_IC_CaptureCallback>
 800a7d4:	e005      	b.n	800a7e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 f879 	bl	800a8ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 f888 	bl	800a8f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	691b      	ldr	r3, [r3, #16]
 800a7ee:	f003 0301 	and.w	r3, r3, #1
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d10e      	bne.n	800a814 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	f003 0301 	and.w	r3, r3, #1
 800a800:	2b01      	cmp	r3, #1
 800a802:	d107      	bne.n	800a814 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f06f 0201 	mvn.w	r2, #1
 800a80c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f7f7 fc4c 	bl	80020ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a81e:	2b80      	cmp	r3, #128	; 0x80
 800a820:	d10e      	bne.n	800a840 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a82c:	2b80      	cmp	r3, #128	; 0x80
 800a82e:	d107      	bne.n	800a840 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f8d7 	bl	800a9ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a84a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a84e:	d10e      	bne.n	800a86e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a85a:	2b80      	cmp	r3, #128	; 0x80
 800a85c:	d107      	bne.n	800a86e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 f8c9 	bl	800aa00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	691b      	ldr	r3, [r3, #16]
 800a874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a878:	2b40      	cmp	r3, #64	; 0x40
 800a87a:	d10e      	bne.n	800a89a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a886:	2b40      	cmp	r3, #64	; 0x40
 800a888:	d107      	bne.n	800a89a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f835 	bl	800a904 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	f003 0320 	and.w	r3, r3, #32
 800a8a4:	2b20      	cmp	r3, #32
 800a8a6:	d10e      	bne.n	800a8c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	f003 0320 	and.w	r3, r3, #32
 800a8b2:	2b20      	cmp	r3, #32
 800a8b4:	d107      	bne.n	800a8c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f06f 0220 	mvn.w	r2, #32
 800a8be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 f88b 	bl	800a9dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8c6:	bf00      	nop
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8ce:	b480      	push	{r7}
 800a8d0:	b083      	sub	sp, #12
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8d6:	bf00      	nop
 800a8d8:	370c      	adds	r7, #12
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bc80      	pop	{r7}
 800a8de:	4770      	bx	lr

0800a8e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a8e8:	bf00      	nop
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bc80      	pop	{r7}
 800a8f0:	4770      	bx	lr

0800a8f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8f2:	b480      	push	{r7}
 800a8f4:	b083      	sub	sp, #12
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8fa:	bf00      	nop
 800a8fc:	370c      	adds	r7, #12
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bc80      	pop	{r7}
 800a902:	4770      	bx	lr

0800a904 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a90c:	bf00      	nop
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	bc80      	pop	{r7}
 800a914:	4770      	bx	lr
	...

0800a918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a29      	ldr	r2, [pc, #164]	; (800a9d0 <TIM_Base_SetConfig+0xb8>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d003      	beq.n	800a938 <TIM_Base_SetConfig+0x20>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a936:	d108      	bne.n	800a94a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a93e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	4313      	orrs	r3, r2
 800a948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a20      	ldr	r2, [pc, #128]	; (800a9d0 <TIM_Base_SetConfig+0xb8>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d00b      	beq.n	800a96a <TIM_Base_SetConfig+0x52>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a958:	d007      	beq.n	800a96a <TIM_Base_SetConfig+0x52>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a1d      	ldr	r2, [pc, #116]	; (800a9d4 <TIM_Base_SetConfig+0xbc>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d003      	beq.n	800a96a <TIM_Base_SetConfig+0x52>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a1c      	ldr	r2, [pc, #112]	; (800a9d8 <TIM_Base_SetConfig+0xc0>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d108      	bne.n	800a97c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	4313      	orrs	r3, r2
 800a97a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	4313      	orrs	r3, r2
 800a988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	689a      	ldr	r2, [r3, #8]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4a0b      	ldr	r2, [pc, #44]	; (800a9d0 <TIM_Base_SetConfig+0xb8>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d007      	beq.n	800a9b8 <TIM_Base_SetConfig+0xa0>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a0a      	ldr	r2, [pc, #40]	; (800a9d4 <TIM_Base_SetConfig+0xbc>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d003      	beq.n	800a9b8 <TIM_Base_SetConfig+0xa0>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a09      	ldr	r2, [pc, #36]	; (800a9d8 <TIM_Base_SetConfig+0xc0>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d103      	bne.n	800a9c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	691a      	ldr	r2, [r3, #16]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	615a      	str	r2, [r3, #20]
}
 800a9c6:	bf00      	nop
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bc80      	pop	{r7}
 800a9ce:	4770      	bx	lr
 800a9d0:	40012c00 	.word	0x40012c00
 800a9d4:	40014400 	.word	0x40014400
 800a9d8:	40014800 	.word	0x40014800

0800a9dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a9e4:	bf00      	nop
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bc80      	pop	{r7}
 800a9ec:	4770      	bx	lr

0800a9ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a9ee:	b480      	push	{r7}
 800a9f0:	b083      	sub	sp, #12
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a9f6:	bf00      	nop
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bc80      	pop	{r7}
 800a9fe:	4770      	bx	lr

0800aa00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa08:	bf00      	nop
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bc80      	pop	{r7}
 800aa10:	4770      	bx	lr

0800aa12 <LL_RCC_GetUSARTClockSource>:
{
 800aa12:	b480      	push	{r7}
 800aa14:	b083      	sub	sp, #12
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800aa1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	401a      	ands	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	041b      	lsls	r3, r3, #16
 800aa2a:	4313      	orrs	r3, r2
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bc80      	pop	{r7}
 800aa34:	4770      	bx	lr

0800aa36 <LL_RCC_GetLPUARTClockSource>:
{
 800aa36:	b480      	push	{r7}
 800aa38:	b083      	sub	sp, #12
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800aa3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4013      	ands	r3, r2
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bc80      	pop	{r7}
 800aa52:	4770      	bx	lr

0800aa54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d101      	bne.n	800aa66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa62:	2301      	movs	r3, #1
 800aa64:	e042      	b.n	800aaec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d106      	bne.n	800aa7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7f8 fc8b 	bl	8003394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2224      	movs	r2, #36	; 0x24
 800aa82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f022 0201 	bic.w	r2, r2, #1
 800aa94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fc4a 	bl	800b330 <UART_SetConfig>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d101      	bne.n	800aaa6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e022      	b.n	800aaec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d002      	beq.n	800aab4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 feb2 	bl	800b818 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	685a      	ldr	r2, [r3, #4]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aac2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	689a      	ldr	r2, [r3, #8]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aad2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f042 0201 	orr.w	r2, r2, #1
 800aae2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 ff38 	bl	800b95a <UART_CheckIdleState>
 800aaea:	4603      	mov	r3, r0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b08a      	sub	sp, #40	; 0x28
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	4613      	mov	r3, r2
 800ab00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab08:	2b20      	cmp	r3, #32
 800ab0a:	d142      	bne.n	800ab92 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d002      	beq.n	800ab18 <HAL_UART_Receive_IT+0x24>
 800ab12:	88fb      	ldrh	r3, [r7, #6]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e03b      	b.n	800ab94 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d101      	bne.n	800ab2a <HAL_UART_Receive_IT+0x36>
 800ab26:	2302      	movs	r3, #2
 800ab28:	e034      	b.n	800ab94 <HAL_UART_Receive_IT+0xa0>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a17      	ldr	r2, [pc, #92]	; (800ab9c <HAL_UART_Receive_IT+0xa8>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d01f      	beq.n	800ab82 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d018      	beq.n	800ab82 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	e853 3f00 	ldrex	r3, [r3]
 800ab5c:	613b      	str	r3, [r7, #16]
   return(result);
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ab64:	627b      	str	r3, [r7, #36]	; 0x24
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6e:	623b      	str	r3, [r7, #32]
 800ab70:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab72:	69f9      	ldr	r1, [r7, #28]
 800ab74:	6a3a      	ldr	r2, [r7, #32]
 800ab76:	e841 2300 	strex	r3, r2, [r1]
 800ab7a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1e6      	bne.n	800ab50 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800ab82:	88fb      	ldrh	r3, [r7, #6]
 800ab84:	461a      	mov	r2, r3
 800ab86:	68b9      	ldr	r1, [r7, #8]
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f000 fff9 	bl	800bb80 <UART_Start_Receive_IT>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	e000      	b.n	800ab94 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ab92:	2302      	movs	r3, #2
  }
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3728      	adds	r7, #40	; 0x28
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	40008000 	.word	0x40008000

0800aba0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b08a      	sub	sp, #40	; 0x28
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	4613      	mov	r3, r2
 800abac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abb4:	2b20      	cmp	r3, #32
 800abb6:	d17a      	bne.n	800acae <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d002      	beq.n	800abc4 <HAL_UART_Transmit_DMA+0x24>
 800abbe:	88fb      	ldrh	r3, [r7, #6]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d101      	bne.n	800abc8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e073      	b.n	800acb0 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d101      	bne.n	800abd6 <HAL_UART_Transmit_DMA+0x36>
 800abd2:	2302      	movs	r3, #2
 800abd4:	e06c      	b.n	800acb0 <HAL_UART_Transmit_DMA+0x110>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	68ba      	ldr	r2, [r7, #8]
 800abe2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	88fa      	ldrh	r2, [r7, #6]
 800abe8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	88fa      	ldrh	r2, [r7, #6]
 800abf0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2221      	movs	r2, #33	; 0x21
 800ac00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d02c      	beq.n	800ac66 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac10:	4a29      	ldr	r2, [pc, #164]	; (800acb8 <HAL_UART_Transmit_DMA+0x118>)
 800ac12:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac18:	4a28      	ldr	r2, [pc, #160]	; (800acbc <HAL_UART_Transmit_DMA+0x11c>)
 800ac1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac20:	4a27      	ldr	r2, [pc, #156]	; (800acc0 <HAL_UART_Transmit_DMA+0x120>)
 800ac22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac28:	2200      	movs	r2, #0
 800ac2a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac34:	4619      	mov	r1, r3
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	3328      	adds	r3, #40	; 0x28
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	88fb      	ldrh	r3, [r7, #6]
 800ac40:	f7fa fa3c 	bl	80050bc <HAL_DMA_Start_IT>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00d      	beq.n	800ac66 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2210      	movs	r2, #16
 800ac4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2220      	movs	r2, #32
 800ac5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e024      	b.n	800acb0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2240      	movs	r2, #64	; 0x40
 800ac6c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	3308      	adds	r3, #8
 800ac7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	e853 3f00 	ldrex	r3, [r3]
 800ac84:	613b      	str	r3, [r7, #16]
   return(result);
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	3308      	adds	r3, #8
 800ac94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac96:	623a      	str	r2, [r7, #32]
 800ac98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9a:	69f9      	ldr	r1, [r7, #28]
 800ac9c:	6a3a      	ldr	r2, [r7, #32]
 800ac9e:	e841 2300 	strex	r3, r2, [r1]
 800aca2:	61bb      	str	r3, [r7, #24]
   return(result);
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1e5      	bne.n	800ac76 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	e000      	b.n	800acb0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800acae:	2302      	movs	r3, #2
  }
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3728      	adds	r7, #40	; 0x28
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	0800bf1b 	.word	0x0800bf1b
 800acbc:	0800bfb5 	.word	0x0800bfb5
 800acc0:	0800bfd1 	.word	0x0800bfd1

0800acc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b0ba      	sub	sp, #232	; 0xe8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	69db      	ldr	r3, [r3, #28]
 800acd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800acea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800acee:	f640 030f 	movw	r3, #2063	; 0x80f
 800acf2:	4013      	ands	r3, r2
 800acf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800acf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d11b      	bne.n	800ad38 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad04:	f003 0320 	and.w	r3, r3, #32
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d015      	beq.n	800ad38 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad10:	f003 0320 	and.w	r3, r3, #32
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d105      	bne.n	800ad24 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d009      	beq.n	800ad38 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f000 82d6 	beq.w	800b2da <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	4798      	blx	r3
      }
      return;
 800ad36:	e2d0      	b.n	800b2da <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ad38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f000 811f 	beq.w	800af80 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ad42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ad46:	4b8b      	ldr	r3, [pc, #556]	; (800af74 <HAL_UART_IRQHandler+0x2b0>)
 800ad48:	4013      	ands	r3, r2
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d106      	bne.n	800ad5c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ad4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ad52:	4b89      	ldr	r3, [pc, #548]	; (800af78 <HAL_UART_IRQHandler+0x2b4>)
 800ad54:	4013      	ands	r3, r2
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	f000 8112 	beq.w	800af80 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad60:	f003 0301 	and.w	r3, r3, #1
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d011      	beq.n	800ad8c <HAL_UART_IRQHandler+0xc8>
 800ad68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00b      	beq.n	800ad8c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad82:	f043 0201 	orr.w	r2, r3, #1
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad90:	f003 0302 	and.w	r3, r3, #2
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d011      	beq.n	800adbc <HAL_UART_IRQHandler+0xf8>
 800ad98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad9c:	f003 0301 	and.w	r3, r3, #1
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00b      	beq.n	800adbc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2202      	movs	r2, #2
 800adaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adb2:	f043 0204 	orr.w	r2, r3, #4
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adc0:	f003 0304 	and.w	r3, r3, #4
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d011      	beq.n	800adec <HAL_UART_IRQHandler+0x128>
 800adc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adcc:	f003 0301 	and.w	r3, r3, #1
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00b      	beq.n	800adec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2204      	movs	r2, #4
 800adda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ade2:	f043 0202 	orr.w	r2, r3, #2
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800adec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adf0:	f003 0308 	and.w	r3, r3, #8
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d017      	beq.n	800ae28 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800adf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adfc:	f003 0320 	and.w	r3, r3, #32
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d105      	bne.n	800ae10 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ae04:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ae08:	4b5a      	ldr	r3, [pc, #360]	; (800af74 <HAL_UART_IRQHandler+0x2b0>)
 800ae0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00b      	beq.n	800ae28 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2208      	movs	r2, #8
 800ae16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae1e:	f043 0208 	orr.w	r2, r3, #8
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ae28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d012      	beq.n	800ae5a <HAL_UART_IRQHandler+0x196>
 800ae34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d00c      	beq.n	800ae5a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae50:	f043 0220 	orr.w	r2, r3, #32
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 823c 	beq.w	800b2de <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae6a:	f003 0320 	and.w	r3, r3, #32
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d013      	beq.n	800ae9a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ae72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae76:	f003 0320 	and.w	r3, r3, #32
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d105      	bne.n	800ae8a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ae7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d007      	beq.n	800ae9a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d003      	beq.n	800ae9a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aea0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeae:	2b40      	cmp	r3, #64	; 0x40
 800aeb0:	d005      	beq.n	800aebe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aeb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aeb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d04f      	beq.n	800af5e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 ffc6 	bl	800be50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aece:	2b40      	cmp	r3, #64	; 0x40
 800aed0:	d141      	bne.n	800af56 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	3308      	adds	r3, #8
 800aed8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aedc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aee0:	e853 3f00 	ldrex	r3, [r3]
 800aee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aeec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	3308      	adds	r3, #8
 800aefa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800aefe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800af02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800af0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800af0e:	e841 2300 	strex	r3, r2, [r1]
 800af12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800af16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d1d9      	bne.n	800aed2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af22:	2b00      	cmp	r3, #0
 800af24:	d013      	beq.n	800af4e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af2a:	4a14      	ldr	r2, [pc, #80]	; (800af7c <HAL_UART_IRQHandler+0x2b8>)
 800af2c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af32:	4618      	mov	r0, r3
 800af34:	f7fa f99e 	bl	8005274 <HAL_DMA_Abort_IT>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d017      	beq.n	800af6e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800af48:	4610      	mov	r0, r2
 800af4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af4c:	e00f      	b.n	800af6e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f9d9 	bl	800b306 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af54:	e00b      	b.n	800af6e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f9d5 	bl	800b306 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af5c:	e007      	b.n	800af6e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f9d1 	bl	800b306 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800af6c:	e1b7      	b.n	800b2de <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af6e:	bf00      	nop
    return;
 800af70:	e1b5      	b.n	800b2de <HAL_UART_IRQHandler+0x61a>
 800af72:	bf00      	nop
 800af74:	10000001 	.word	0x10000001
 800af78:	04000120 	.word	0x04000120
 800af7c:	0800c051 	.word	0x0800c051

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af84:	2b01      	cmp	r3, #1
 800af86:	f040 814a 	bne.w	800b21e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800af8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af8e:	f003 0310 	and.w	r3, r3, #16
 800af92:	2b00      	cmp	r3, #0
 800af94:	f000 8143 	beq.w	800b21e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800af98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af9c:	f003 0310 	and.w	r3, r3, #16
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	f000 813c 	beq.w	800b21e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2210      	movs	r2, #16
 800afac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afb8:	2b40      	cmp	r3, #64	; 0x40
 800afba:	f040 80b5 	bne.w	800b128 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800afca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 8187 	beq.w	800b2e2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800afda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800afde:	429a      	cmp	r2, r3
 800afe0:	f080 817f 	bcs.w	800b2e2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800afea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 0320 	and.w	r3, r3, #32
 800affa:	2b00      	cmp	r3, #0
 800affc:	f040 8086 	bne.w	800b10c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b008:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b00c:	e853 3f00 	ldrex	r3, [r3]
 800b010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b01c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	461a      	mov	r2, r3
 800b026:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b02a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b02e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b032:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b036:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b03a:	e841 2300 	strex	r3, r2, [r1]
 800b03e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b042:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b046:	2b00      	cmp	r3, #0
 800b048:	d1da      	bne.n	800b000 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	3308      	adds	r3, #8
 800b050:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b054:	e853 3f00 	ldrex	r3, [r3]
 800b058:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b05a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b05c:	f023 0301 	bic.w	r3, r3, #1
 800b060:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	3308      	adds	r3, #8
 800b06a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b06e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b072:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b074:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b076:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b07a:	e841 2300 	strex	r3, r2, [r1]
 800b07e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b082:	2b00      	cmp	r3, #0
 800b084:	d1e1      	bne.n	800b04a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	3308      	adds	r3, #8
 800b08c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b090:	e853 3f00 	ldrex	r3, [r3]
 800b094:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b09c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	3308      	adds	r3, #8
 800b0a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b0aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b0ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b0b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b0b2:	e841 2300 	strex	r3, r2, [r1]
 800b0b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b0b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d1e3      	bne.n	800b086 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2220      	movs	r2, #32
 800b0c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0d4:	e853 3f00 	ldrex	r3, [r3]
 800b0d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b0da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0dc:	f023 0310 	bic.w	r3, r3, #16
 800b0e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b0ee:	65bb      	str	r3, [r7, #88]	; 0x58
 800b0f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b0f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b0f6:	e841 2300 	strex	r3, r2, [r1]
 800b0fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b0fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1e4      	bne.n	800b0cc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b106:	4618      	mov	r0, r3
 800b108:	f7fa f856 	bl	80051b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b118:	b29b      	uxth	r3, r3
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	4619      	mov	r1, r3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 f8f9 	bl	800b318 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b126:	e0dc      	b.n	800b2e2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b134:	b29b      	uxth	r3, r3
 800b136:	1ad3      	subs	r3, r2, r3
 800b138:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b142:	b29b      	uxth	r3, r3
 800b144:	2b00      	cmp	r3, #0
 800b146:	f000 80ce 	beq.w	800b2e6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800b14a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 80c9 	beq.w	800b2e6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15c:	e853 3f00 	ldrex	r3, [r3]
 800b160:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b168:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	461a      	mov	r2, r3
 800b172:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b176:	647b      	str	r3, [r7, #68]	; 0x44
 800b178:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b17c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b17e:	e841 2300 	strex	r3, r2, [r1]
 800b182:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1e4      	bne.n	800b154 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	3308      	adds	r3, #8
 800b190:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b194:	e853 3f00 	ldrex	r3, [r3]
 800b198:	623b      	str	r3, [r7, #32]
   return(result);
 800b19a:	6a3b      	ldr	r3, [r7, #32]
 800b19c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1a0:	f023 0301 	bic.w	r3, r3, #1
 800b1a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	3308      	adds	r3, #8
 800b1ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b1b2:	633a      	str	r2, [r7, #48]	; 0x30
 800b1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1ba:	e841 2300 	strex	r3, r2, [r1]
 800b1be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d1e1      	bne.n	800b18a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2220      	movs	r2, #32
 800b1ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	e853 3f00 	ldrex	r3, [r3]
 800b1e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f023 0310 	bic.w	r3, r3, #16
 800b1ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b1fc:	61fb      	str	r3, [r7, #28]
 800b1fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b200:	69b9      	ldr	r1, [r7, #24]
 800b202:	69fa      	ldr	r2, [r7, #28]
 800b204:	e841 2300 	strex	r3, r2, [r1]
 800b208:	617b      	str	r3, [r7, #20]
   return(result);
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1e4      	bne.n	800b1da <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b210:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b214:	4619      	mov	r1, r3
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 f87e 	bl	800b318 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b21c:	e063      	b.n	800b2e6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b21e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00e      	beq.n	800b248 <HAL_UART_IRQHandler+0x584>
 800b22a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b22e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b232:	2b00      	cmp	r3, #0
 800b234:	d008      	beq.n	800b248 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b23e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f001 fba3 	bl	800c98c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b246:	e051      	b.n	800b2ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b24c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b250:	2b00      	cmp	r3, #0
 800b252:	d014      	beq.n	800b27e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d105      	bne.n	800b26c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d008      	beq.n	800b27e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b270:	2b00      	cmp	r3, #0
 800b272:	d03a      	beq.n	800b2ea <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	4798      	blx	r3
    }
    return;
 800b27c:	e035      	b.n	800b2ea <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b27e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b286:	2b00      	cmp	r3, #0
 800b288:	d009      	beq.n	800b29e <HAL_UART_IRQHandler+0x5da>
 800b28a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b28e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b292:	2b00      	cmp	r3, #0
 800b294:	d003      	beq.n	800b29e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 fef0 	bl	800c07c <UART_EndTransmit_IT>
    return;
 800b29c:	e026      	b.n	800b2ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b29e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d009      	beq.n	800b2be <HAL_UART_IRQHandler+0x5fa>
 800b2aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d003      	beq.n	800b2be <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f001 fb7a 	bl	800c9b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2bc:	e016      	b.n	800b2ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b2be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d010      	beq.n	800b2ec <HAL_UART_IRQHandler+0x628>
 800b2ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	da0c      	bge.n	800b2ec <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f001 fb63 	bl	800c99e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2d8:	e008      	b.n	800b2ec <HAL_UART_IRQHandler+0x628>
      return;
 800b2da:	bf00      	nop
 800b2dc:	e006      	b.n	800b2ec <HAL_UART_IRQHandler+0x628>
    return;
 800b2de:	bf00      	nop
 800b2e0:	e004      	b.n	800b2ec <HAL_UART_IRQHandler+0x628>
      return;
 800b2e2:	bf00      	nop
 800b2e4:	e002      	b.n	800b2ec <HAL_UART_IRQHandler+0x628>
      return;
 800b2e6:	bf00      	nop
 800b2e8:	e000      	b.n	800b2ec <HAL_UART_IRQHandler+0x628>
    return;
 800b2ea:	bf00      	nop
  }
}
 800b2ec:	37e8      	adds	r7, #232	; 0xe8
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop

0800b2f4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b2fc:	bf00      	nop
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	bc80      	pop	{r7}
 800b304:	4770      	bx	lr

0800b306 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b306:	b480      	push	{r7}
 800b308:	b083      	sub	sp, #12
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b30e:	bf00      	nop
 800b310:	370c      	adds	r7, #12
 800b312:	46bd      	mov	sp, r7
 800b314:	bc80      	pop	{r7}
 800b316:	4770      	bx	lr

0800b318 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	460b      	mov	r3, r1
 800b322:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b324:	bf00      	nop
 800b326:	370c      	adds	r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	bc80      	pop	{r7}
 800b32c:	4770      	bx	lr
	...

0800b330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b334:	b08c      	sub	sp, #48	; 0x30
 800b336:	af00      	add	r7, sp, #0
 800b338:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b33a:	2300      	movs	r3, #0
 800b33c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	689a      	ldr	r2, [r3, #8]
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	431a      	orrs	r2, r3
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	695b      	ldr	r3, [r3, #20]
 800b34e:	431a      	orrs	r2, r3
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	69db      	ldr	r3, [r3, #28]
 800b354:	4313      	orrs	r3, r2
 800b356:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	4b94      	ldr	r3, [pc, #592]	; (800b5b0 <UART_SetConfig+0x280>)
 800b360:	4013      	ands	r3, r2
 800b362:	697a      	ldr	r2, [r7, #20]
 800b364:	6812      	ldr	r2, [r2, #0]
 800b366:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b368:	430b      	orrs	r3, r1
 800b36a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	68da      	ldr	r2, [r3, #12]
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	430a      	orrs	r2, r1
 800b380:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	699b      	ldr	r3, [r3, #24]
 800b386:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a89      	ldr	r2, [pc, #548]	; (800b5b4 <UART_SetConfig+0x284>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d004      	beq.n	800b39c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	6a1b      	ldr	r3, [r3, #32]
 800b396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b398:	4313      	orrs	r3, r2
 800b39a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b3a6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b3aa:	697a      	ldr	r2, [r7, #20]
 800b3ac:	6812      	ldr	r2, [r2, #0]
 800b3ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3b0:	430b      	orrs	r3, r1
 800b3b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ba:	f023 010f 	bic.w	r1, r3, #15
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	430a      	orrs	r2, r1
 800b3c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a7a      	ldr	r2, [pc, #488]	; (800b5b8 <UART_SetConfig+0x288>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d127      	bne.n	800b424 <UART_SetConfig+0xf4>
 800b3d4:	2003      	movs	r0, #3
 800b3d6:	f7ff fb1c 	bl	800aa12 <LL_RCC_GetUSARTClockSource>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800b3e0:	2b03      	cmp	r3, #3
 800b3e2:	d81b      	bhi.n	800b41c <UART_SetConfig+0xec>
 800b3e4:	a201      	add	r2, pc, #4	; (adr r2, 800b3ec <UART_SetConfig+0xbc>)
 800b3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ea:	bf00      	nop
 800b3ec:	0800b3fd 	.word	0x0800b3fd
 800b3f0:	0800b40d 	.word	0x0800b40d
 800b3f4:	0800b405 	.word	0x0800b405
 800b3f8:	0800b415 	.word	0x0800b415
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b402:	e080      	b.n	800b506 <UART_SetConfig+0x1d6>
 800b404:	2302      	movs	r3, #2
 800b406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b40a:	e07c      	b.n	800b506 <UART_SetConfig+0x1d6>
 800b40c:	2304      	movs	r3, #4
 800b40e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b412:	e078      	b.n	800b506 <UART_SetConfig+0x1d6>
 800b414:	2308      	movs	r3, #8
 800b416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b41a:	e074      	b.n	800b506 <UART_SetConfig+0x1d6>
 800b41c:	2310      	movs	r3, #16
 800b41e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b422:	e070      	b.n	800b506 <UART_SetConfig+0x1d6>
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a64      	ldr	r2, [pc, #400]	; (800b5bc <UART_SetConfig+0x28c>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d138      	bne.n	800b4a0 <UART_SetConfig+0x170>
 800b42e:	200c      	movs	r0, #12
 800b430:	f7ff faef 	bl	800aa12 <LL_RCC_GetUSARTClockSource>
 800b434:	4603      	mov	r3, r0
 800b436:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800b43a:	2b0c      	cmp	r3, #12
 800b43c:	d82c      	bhi.n	800b498 <UART_SetConfig+0x168>
 800b43e:	a201      	add	r2, pc, #4	; (adr r2, 800b444 <UART_SetConfig+0x114>)
 800b440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b444:	0800b479 	.word	0x0800b479
 800b448:	0800b499 	.word	0x0800b499
 800b44c:	0800b499 	.word	0x0800b499
 800b450:	0800b499 	.word	0x0800b499
 800b454:	0800b489 	.word	0x0800b489
 800b458:	0800b499 	.word	0x0800b499
 800b45c:	0800b499 	.word	0x0800b499
 800b460:	0800b499 	.word	0x0800b499
 800b464:	0800b481 	.word	0x0800b481
 800b468:	0800b499 	.word	0x0800b499
 800b46c:	0800b499 	.word	0x0800b499
 800b470:	0800b499 	.word	0x0800b499
 800b474:	0800b491 	.word	0x0800b491
 800b478:	2300      	movs	r3, #0
 800b47a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b47e:	e042      	b.n	800b506 <UART_SetConfig+0x1d6>
 800b480:	2302      	movs	r3, #2
 800b482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b486:	e03e      	b.n	800b506 <UART_SetConfig+0x1d6>
 800b488:	2304      	movs	r3, #4
 800b48a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b48e:	e03a      	b.n	800b506 <UART_SetConfig+0x1d6>
 800b490:	2308      	movs	r3, #8
 800b492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b496:	e036      	b.n	800b506 <UART_SetConfig+0x1d6>
 800b498:	2310      	movs	r3, #16
 800b49a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b49e:	e032      	b.n	800b506 <UART_SetConfig+0x1d6>
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a43      	ldr	r2, [pc, #268]	; (800b5b4 <UART_SetConfig+0x284>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d12a      	bne.n	800b500 <UART_SetConfig+0x1d0>
 800b4aa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b4ae:	f7ff fac2 	bl	800aa36 <LL_RCC_GetLPUARTClockSource>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4b8:	d01a      	beq.n	800b4f0 <UART_SetConfig+0x1c0>
 800b4ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4be:	d81b      	bhi.n	800b4f8 <UART_SetConfig+0x1c8>
 800b4c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4c4:	d00c      	beq.n	800b4e0 <UART_SetConfig+0x1b0>
 800b4c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4ca:	d815      	bhi.n	800b4f8 <UART_SetConfig+0x1c8>
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d003      	beq.n	800b4d8 <UART_SetConfig+0x1a8>
 800b4d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4d4:	d008      	beq.n	800b4e8 <UART_SetConfig+0x1b8>
 800b4d6:	e00f      	b.n	800b4f8 <UART_SetConfig+0x1c8>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4de:	e012      	b.n	800b506 <UART_SetConfig+0x1d6>
 800b4e0:	2302      	movs	r3, #2
 800b4e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4e6:	e00e      	b.n	800b506 <UART_SetConfig+0x1d6>
 800b4e8:	2304      	movs	r3, #4
 800b4ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ee:	e00a      	b.n	800b506 <UART_SetConfig+0x1d6>
 800b4f0:	2308      	movs	r3, #8
 800b4f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4f6:	e006      	b.n	800b506 <UART_SetConfig+0x1d6>
 800b4f8:	2310      	movs	r3, #16
 800b4fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4fe:	e002      	b.n	800b506 <UART_SetConfig+0x1d6>
 800b500:	2310      	movs	r3, #16
 800b502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a2a      	ldr	r2, [pc, #168]	; (800b5b4 <UART_SetConfig+0x284>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	f040 80a4 	bne.w	800b65a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b512:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b516:	2b08      	cmp	r3, #8
 800b518:	d823      	bhi.n	800b562 <UART_SetConfig+0x232>
 800b51a:	a201      	add	r2, pc, #4	; (adr r2, 800b520 <UART_SetConfig+0x1f0>)
 800b51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b520:	0800b545 	.word	0x0800b545
 800b524:	0800b563 	.word	0x0800b563
 800b528:	0800b54d 	.word	0x0800b54d
 800b52c:	0800b563 	.word	0x0800b563
 800b530:	0800b553 	.word	0x0800b553
 800b534:	0800b563 	.word	0x0800b563
 800b538:	0800b563 	.word	0x0800b563
 800b53c:	0800b563 	.word	0x0800b563
 800b540:	0800b55b 	.word	0x0800b55b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b544:	f7fc fbfe 	bl	8007d44 <HAL_RCC_GetPCLK1Freq>
 800b548:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b54a:	e010      	b.n	800b56e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b54c:	4b1c      	ldr	r3, [pc, #112]	; (800b5c0 <UART_SetConfig+0x290>)
 800b54e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b550:	e00d      	b.n	800b56e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b552:	f7fc fb43 	bl	8007bdc <HAL_RCC_GetSysClockFreq>
 800b556:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b558:	e009      	b.n	800b56e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b55a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b55e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b560:	e005      	b.n	800b56e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800b562:	2300      	movs	r3, #0
 800b564:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b566:	2301      	movs	r3, #1
 800b568:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b56c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b570:	2b00      	cmp	r3, #0
 800b572:	f000 8137 	beq.w	800b7e4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57a:	4a12      	ldr	r2, [pc, #72]	; (800b5c4 <UART_SetConfig+0x294>)
 800b57c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b580:	461a      	mov	r2, r3
 800b582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b584:	fbb3 f3f2 	udiv	r3, r3, r2
 800b588:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	685a      	ldr	r2, [r3, #4]
 800b58e:	4613      	mov	r3, r2
 800b590:	005b      	lsls	r3, r3, #1
 800b592:	4413      	add	r3, r2
 800b594:	69ba      	ldr	r2, [r7, #24]
 800b596:	429a      	cmp	r2, r3
 800b598:	d305      	bcc.n	800b5a6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5a0:	69ba      	ldr	r2, [r7, #24]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d910      	bls.n	800b5c8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b5ac:	e11a      	b.n	800b7e4 <UART_SetConfig+0x4b4>
 800b5ae:	bf00      	nop
 800b5b0:	cfff69f3 	.word	0xcfff69f3
 800b5b4:	40008000 	.word	0x40008000
 800b5b8:	40013800 	.word	0x40013800
 800b5bc:	40004400 	.word	0x40004400
 800b5c0:	00f42400 	.word	0x00f42400
 800b5c4:	0801f004 	.word	0x0801f004
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	60bb      	str	r3, [r7, #8]
 800b5ce:	60fa      	str	r2, [r7, #12]
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d4:	4a8e      	ldr	r2, [pc, #568]	; (800b810 <UART_SetConfig+0x4e0>)
 800b5d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	2200      	movs	r2, #0
 800b5de:	603b      	str	r3, [r7, #0]
 800b5e0:	607a      	str	r2, [r7, #4]
 800b5e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b5ea:	f7f5 fbcf 	bl	8000d8c <__aeabi_uldivmod>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	4610      	mov	r0, r2
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	f04f 0200 	mov.w	r2, #0
 800b5fa:	f04f 0300 	mov.w	r3, #0
 800b5fe:	020b      	lsls	r3, r1, #8
 800b600:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b604:	0202      	lsls	r2, r0, #8
 800b606:	6979      	ldr	r1, [r7, #20]
 800b608:	6849      	ldr	r1, [r1, #4]
 800b60a:	0849      	lsrs	r1, r1, #1
 800b60c:	2000      	movs	r0, #0
 800b60e:	460c      	mov	r4, r1
 800b610:	4605      	mov	r5, r0
 800b612:	eb12 0804 	adds.w	r8, r2, r4
 800b616:	eb43 0905 	adc.w	r9, r3, r5
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	469a      	mov	sl, r3
 800b622:	4693      	mov	fp, r2
 800b624:	4652      	mov	r2, sl
 800b626:	465b      	mov	r3, fp
 800b628:	4640      	mov	r0, r8
 800b62a:	4649      	mov	r1, r9
 800b62c:	f7f5 fbae 	bl	8000d8c <__aeabi_uldivmod>
 800b630:	4602      	mov	r2, r0
 800b632:	460b      	mov	r3, r1
 800b634:	4613      	mov	r3, r2
 800b636:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b638:	6a3b      	ldr	r3, [r7, #32]
 800b63a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b63e:	d308      	bcc.n	800b652 <UART_SetConfig+0x322>
 800b640:	6a3b      	ldr	r3, [r7, #32]
 800b642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b646:	d204      	bcs.n	800b652 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	6a3a      	ldr	r2, [r7, #32]
 800b64e:	60da      	str	r2, [r3, #12]
 800b650:	e0c8      	b.n	800b7e4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800b652:	2301      	movs	r3, #1
 800b654:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b658:	e0c4      	b.n	800b7e4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	69db      	ldr	r3, [r3, #28]
 800b65e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b662:	d168      	bne.n	800b736 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800b664:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b668:	2b08      	cmp	r3, #8
 800b66a:	d828      	bhi.n	800b6be <UART_SetConfig+0x38e>
 800b66c:	a201      	add	r2, pc, #4	; (adr r2, 800b674 <UART_SetConfig+0x344>)
 800b66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b672:	bf00      	nop
 800b674:	0800b699 	.word	0x0800b699
 800b678:	0800b6a1 	.word	0x0800b6a1
 800b67c:	0800b6a9 	.word	0x0800b6a9
 800b680:	0800b6bf 	.word	0x0800b6bf
 800b684:	0800b6af 	.word	0x0800b6af
 800b688:	0800b6bf 	.word	0x0800b6bf
 800b68c:	0800b6bf 	.word	0x0800b6bf
 800b690:	0800b6bf 	.word	0x0800b6bf
 800b694:	0800b6b7 	.word	0x0800b6b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b698:	f7fc fb54 	bl	8007d44 <HAL_RCC_GetPCLK1Freq>
 800b69c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b69e:	e014      	b.n	800b6ca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6a0:	f7fc fb62 	bl	8007d68 <HAL_RCC_GetPCLK2Freq>
 800b6a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6a6:	e010      	b.n	800b6ca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b6a8:	4b5a      	ldr	r3, [pc, #360]	; (800b814 <UART_SetConfig+0x4e4>)
 800b6aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b6ac:	e00d      	b.n	800b6ca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6ae:	f7fc fa95 	bl	8007bdc <HAL_RCC_GetSysClockFreq>
 800b6b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6b4:	e009      	b.n	800b6ca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b6bc:	e005      	b.n	800b6ca <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b6c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f000 8089 	beq.w	800b7e4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d6:	4a4e      	ldr	r2, [pc, #312]	; (800b810 <UART_SetConfig+0x4e0>)
 800b6d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6dc:	461a      	mov	r2, r3
 800b6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6e4:	005a      	lsls	r2, r3, #1
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	085b      	lsrs	r3, r3, #1
 800b6ec:	441a      	add	r2, r3
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	2b0f      	cmp	r3, #15
 800b6fe:	d916      	bls.n	800b72e <UART_SetConfig+0x3fe>
 800b700:	6a3b      	ldr	r3, [r7, #32]
 800b702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b706:	d212      	bcs.n	800b72e <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b708:	6a3b      	ldr	r3, [r7, #32]
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	f023 030f 	bic.w	r3, r3, #15
 800b710:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b712:	6a3b      	ldr	r3, [r7, #32]
 800b714:	085b      	lsrs	r3, r3, #1
 800b716:	b29b      	uxth	r3, r3
 800b718:	f003 0307 	and.w	r3, r3, #7
 800b71c:	b29a      	uxth	r2, r3
 800b71e:	8bfb      	ldrh	r3, [r7, #30]
 800b720:	4313      	orrs	r3, r2
 800b722:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	8bfa      	ldrh	r2, [r7, #30]
 800b72a:	60da      	str	r2, [r3, #12]
 800b72c:	e05a      	b.n	800b7e4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b72e:	2301      	movs	r3, #1
 800b730:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b734:	e056      	b.n	800b7e4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b736:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b73a:	2b08      	cmp	r3, #8
 800b73c:	d827      	bhi.n	800b78e <UART_SetConfig+0x45e>
 800b73e:	a201      	add	r2, pc, #4	; (adr r2, 800b744 <UART_SetConfig+0x414>)
 800b740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b744:	0800b769 	.word	0x0800b769
 800b748:	0800b771 	.word	0x0800b771
 800b74c:	0800b779 	.word	0x0800b779
 800b750:	0800b78f 	.word	0x0800b78f
 800b754:	0800b77f 	.word	0x0800b77f
 800b758:	0800b78f 	.word	0x0800b78f
 800b75c:	0800b78f 	.word	0x0800b78f
 800b760:	0800b78f 	.word	0x0800b78f
 800b764:	0800b787 	.word	0x0800b787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b768:	f7fc faec 	bl	8007d44 <HAL_RCC_GetPCLK1Freq>
 800b76c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b76e:	e014      	b.n	800b79a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b770:	f7fc fafa 	bl	8007d68 <HAL_RCC_GetPCLK2Freq>
 800b774:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b776:	e010      	b.n	800b79a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b778:	4b26      	ldr	r3, [pc, #152]	; (800b814 <UART_SetConfig+0x4e4>)
 800b77a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b77c:	e00d      	b.n	800b79a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b77e:	f7fc fa2d 	bl	8007bdc <HAL_RCC_GetSysClockFreq>
 800b782:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b784:	e009      	b.n	800b79a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b78a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b78c:	e005      	b.n	800b79a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800b78e:	2300      	movs	r3, #0
 800b790:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b792:	2301      	movs	r3, #1
 800b794:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b798:	bf00      	nop
    }

    if (pclk != 0U)
 800b79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d021      	beq.n	800b7e4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a4:	4a1a      	ldr	r2, [pc, #104]	; (800b810 <UART_SetConfig+0x4e0>)
 800b7a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ae:	fbb3 f2f2 	udiv	r2, r3, r2
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	085b      	lsrs	r3, r3, #1
 800b7b8:	441a      	add	r2, r3
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7c6:	6a3b      	ldr	r3, [r7, #32]
 800b7c8:	2b0f      	cmp	r3, #15
 800b7ca:	d908      	bls.n	800b7de <UART_SetConfig+0x4ae>
 800b7cc:	6a3b      	ldr	r3, [r7, #32]
 800b7ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7d2:	d204      	bcs.n	800b7de <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	6a3a      	ldr	r2, [r7, #32]
 800b7da:	60da      	str	r2, [r3, #12]
 800b7dc:	e002      	b.n	800b7e4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b800:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b804:	4618      	mov	r0, r3
 800b806:	3730      	adds	r7, #48	; 0x30
 800b808:	46bd      	mov	sp, r7
 800b80a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b80e:	bf00      	nop
 800b810:	0801f004 	.word	0x0801f004
 800b814:	00f42400 	.word	0x00f42400

0800b818 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b824:	f003 0301 	and.w	r3, r3, #1
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00a      	beq.n	800b842 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	430a      	orrs	r2, r1
 800b840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b846:	f003 0302 	and.w	r3, r3, #2
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00a      	beq.n	800b864 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	430a      	orrs	r2, r1
 800b862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b868:	f003 0304 	and.w	r3, r3, #4
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00a      	beq.n	800b886 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	430a      	orrs	r2, r1
 800b884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b88a:	f003 0308 	and.w	r3, r3, #8
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00a      	beq.n	800b8a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	430a      	orrs	r2, r1
 800b8a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ac:	f003 0310 	and.w	r3, r3, #16
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00a      	beq.n	800b8ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	430a      	orrs	r2, r1
 800b8c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ce:	f003 0320 	and.w	r3, r3, #32
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00a      	beq.n	800b8ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	689b      	ldr	r3, [r3, #8]
 800b8dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	430a      	orrs	r2, r1
 800b8ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d01a      	beq.n	800b92e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	430a      	orrs	r2, r1
 800b90c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b916:	d10a      	bne.n	800b92e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	430a      	orrs	r2, r1
 800b92c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b936:	2b00      	cmp	r3, #0
 800b938:	d00a      	beq.n	800b950 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	430a      	orrs	r2, r1
 800b94e:	605a      	str	r2, [r3, #4]
  }
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	bc80      	pop	{r7}
 800b958:	4770      	bx	lr

0800b95a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b086      	sub	sp, #24
 800b95e:	af02      	add	r7, sp, #8
 800b960:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b96a:	f7f7 f889 	bl	8002a80 <HAL_GetTick>
 800b96e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f003 0308 	and.w	r3, r3, #8
 800b97a:	2b08      	cmp	r3, #8
 800b97c:	d10e      	bne.n	800b99c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b97e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2200      	movs	r2, #0
 800b988:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 f82f 	bl	800b9f0 <UART_WaitOnFlagUntilTimeout>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d001      	beq.n	800b99c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b998:	2303      	movs	r3, #3
 800b99a:	e025      	b.n	800b9e8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f003 0304 	and.w	r3, r3, #4
 800b9a6:	2b04      	cmp	r3, #4
 800b9a8:	d10e      	bne.n	800b9c8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 f819 	bl	800b9f0 <UART_WaitOnFlagUntilTimeout>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d001      	beq.n	800b9c8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	e00f      	b.n	800b9e8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2220      	movs	r2, #32
 800b9cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2220      	movs	r2, #32
 800b9d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b9e6:	2300      	movs	r3, #0
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b09c      	sub	sp, #112	; 0x70
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	603b      	str	r3, [r7, #0]
 800b9fc:	4613      	mov	r3, r2
 800b9fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba00:	e0a9      	b.n	800bb56 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba08:	f000 80a5 	beq.w	800bb56 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba0c:	f7f7 f838 	bl	8002a80 <HAL_GetTick>
 800ba10:	4602      	mov	r2, r0
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	1ad3      	subs	r3, r2, r3
 800ba16:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d302      	bcc.n	800ba22 <UART_WaitOnFlagUntilTimeout+0x32>
 800ba1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d140      	bne.n	800baa4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba2a:	e853 3f00 	ldrex	r3, [r3]
 800ba2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ba30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ba36:	667b      	str	r3, [r7, #100]	; 0x64
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba40:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba42:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba48:	e841 2300 	strex	r3, r2, [r1]
 800ba4c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ba4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d1e6      	bne.n	800ba22 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	3308      	adds	r3, #8
 800ba5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba5e:	e853 3f00 	ldrex	r3, [r3]
 800ba62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba66:	f023 0301 	bic.w	r3, r3, #1
 800ba6a:	663b      	str	r3, [r7, #96]	; 0x60
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3308      	adds	r3, #8
 800ba72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ba74:	64ba      	str	r2, [r7, #72]	; 0x48
 800ba76:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba7c:	e841 2300 	strex	r3, r2, [r1]
 800ba80:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ba82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1e5      	bne.n	800ba54 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2220      	movs	r2, #32
 800ba8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2220      	movs	r2, #32
 800ba94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800baa0:	2303      	movs	r3, #3
 800baa2:	e069      	b.n	800bb78 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 0304 	and.w	r3, r3, #4
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d051      	beq.n	800bb56 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	69db      	ldr	r3, [r3, #28]
 800bab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800babc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bac0:	d149      	bne.n	800bb56 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800baca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad4:	e853 3f00 	ldrex	r3, [r3]
 800bad8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800badc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bae0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	461a      	mov	r2, r3
 800bae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baea:	637b      	str	r3, [r7, #52]	; 0x34
 800baec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800baf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800baf2:	e841 2300 	strex	r3, r2, [r1]
 800baf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800baf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1e6      	bne.n	800bacc <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	3308      	adds	r3, #8
 800bb04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	e853 3f00 	ldrex	r3, [r3]
 800bb0c:	613b      	str	r3, [r7, #16]
   return(result);
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	f023 0301 	bic.w	r3, r3, #1
 800bb14:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	3308      	adds	r3, #8
 800bb1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bb1e:	623a      	str	r2, [r7, #32]
 800bb20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb22:	69f9      	ldr	r1, [r7, #28]
 800bb24:	6a3a      	ldr	r2, [r7, #32]
 800bb26:	e841 2300 	strex	r3, r2, [r1]
 800bb2a:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb2c:	69bb      	ldr	r3, [r7, #24]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1e5      	bne.n	800bafe <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2220      	movs	r2, #32
 800bb36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2220      	movs	r2, #32
 800bb3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2220      	movs	r2, #32
 800bb46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bb52:	2303      	movs	r3, #3
 800bb54:	e010      	b.n	800bb78 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	69da      	ldr	r2, [r3, #28]
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	4013      	ands	r3, r2
 800bb60:	68ba      	ldr	r2, [r7, #8]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	bf0c      	ite	eq
 800bb66:	2301      	moveq	r3, #1
 800bb68:	2300      	movne	r3, #0
 800bb6a:	b2db      	uxtb	r3, r3
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	79fb      	ldrb	r3, [r7, #7]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	f43f af46 	beq.w	800ba02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3770      	adds	r7, #112	; 0x70
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b0a3      	sub	sp, #140	; 0x8c
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	88fa      	ldrh	r2, [r7, #6]
 800bb98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	88fa      	ldrh	r2, [r7, #6]
 800bba0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2200      	movs	r2, #0
 800bba8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbb2:	d10e      	bne.n	800bbd2 <UART_Start_Receive_IT+0x52>
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d105      	bne.n	800bbc8 <UART_Start_Receive_IT+0x48>
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bbc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbc6:	e02d      	b.n	800bc24 <UART_Start_Receive_IT+0xa4>
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	22ff      	movs	r2, #255	; 0xff
 800bbcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbd0:	e028      	b.n	800bc24 <UART_Start_Receive_IT+0xa4>
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d10d      	bne.n	800bbf6 <UART_Start_Receive_IT+0x76>
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	691b      	ldr	r3, [r3, #16]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d104      	bne.n	800bbec <UART_Start_Receive_IT+0x6c>
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	22ff      	movs	r2, #255	; 0xff
 800bbe6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbea:	e01b      	b.n	800bc24 <UART_Start_Receive_IT+0xa4>
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	227f      	movs	r2, #127	; 0x7f
 800bbf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbf4:	e016      	b.n	800bc24 <UART_Start_Receive_IT+0xa4>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbfe:	d10d      	bne.n	800bc1c <UART_Start_Receive_IT+0x9c>
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	691b      	ldr	r3, [r3, #16]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d104      	bne.n	800bc12 <UART_Start_Receive_IT+0x92>
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	227f      	movs	r2, #127	; 0x7f
 800bc0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc10:	e008      	b.n	800bc24 <UART_Start_Receive_IT+0xa4>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	223f      	movs	r2, #63	; 0x3f
 800bc16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc1a:	e003      	b.n	800bc24 <UART_Start_Receive_IT+0xa4>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2222      	movs	r2, #34	; 0x22
 800bc30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	3308      	adds	r3, #8
 800bc3a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc3e:	e853 3f00 	ldrex	r3, [r3]
 800bc42:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bc44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc46:	f043 0301 	orr.w	r3, r3, #1
 800bc4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	3308      	adds	r3, #8
 800bc54:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bc58:	673a      	str	r2, [r7, #112]	; 0x70
 800bc5a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bc5e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bc60:	e841 2300 	strex	r3, r2, [r1]
 800bc64:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800bc66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d1e3      	bne.n	800bc34 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc74:	d153      	bne.n	800bd1e <UART_Start_Receive_IT+0x19e>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bc7c:	88fa      	ldrh	r2, [r7, #6]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d34d      	bcc.n	800bd1e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	689b      	ldr	r3, [r3, #8]
 800bc86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc8a:	d107      	bne.n	800bc9c <UART_Start_Receive_IT+0x11c>
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	691b      	ldr	r3, [r3, #16]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d103      	bne.n	800bc9c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	4a4a      	ldr	r2, [pc, #296]	; (800bdc0 <UART_Start_Receive_IT+0x240>)
 800bc98:	671a      	str	r2, [r3, #112]	; 0x70
 800bc9a:	e002      	b.n	800bca2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	4a49      	ldr	r2, [pc, #292]	; (800bdc4 <UART_Start_Receive_IT+0x244>)
 800bca0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2200      	movs	r2, #0
 800bca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d01a      	beq.n	800bce8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcba:	e853 3f00 	ldrex	r3, [r3]
 800bcbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bcc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	461a      	mov	r2, r3
 800bcd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bcd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcd6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bcda:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bcdc:	e841 2300 	strex	r3, r2, [r1]
 800bce0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d1e4      	bne.n	800bcb2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	3308      	adds	r3, #8
 800bcee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcf2:	e853 3f00 	ldrex	r3, [r3]
 800bcf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bcf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcfe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	3308      	adds	r3, #8
 800bd06:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bd08:	64ba      	str	r2, [r7, #72]	; 0x48
 800bd0a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd10:	e841 2300 	strex	r3, r2, [r1]
 800bd14:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bd16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d1e5      	bne.n	800bce8 <UART_Start_Receive_IT+0x168>
 800bd1c:	e04a      	b.n	800bdb4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd26:	d107      	bne.n	800bd38 <UART_Start_Receive_IT+0x1b8>
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	691b      	ldr	r3, [r3, #16]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d103      	bne.n	800bd38 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	4a25      	ldr	r2, [pc, #148]	; (800bdc8 <UART_Start_Receive_IT+0x248>)
 800bd34:	671a      	str	r2, [r3, #112]	; 0x70
 800bd36:	e002      	b.n	800bd3e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	4a24      	ldr	r2, [pc, #144]	; (800bdcc <UART_Start_Receive_IT+0x24c>)
 800bd3c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2200      	movs	r2, #0
 800bd42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d019      	beq.n	800bd82 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd56:	e853 3f00 	ldrex	r3, [r3]
 800bd5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800bd62:	677b      	str	r3, [r7, #116]	; 0x74
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	461a      	mov	r2, r3
 800bd6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd6c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd74:	e841 2300 	strex	r3, r2, [r1]
 800bd78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d1e6      	bne.n	800bd4e <UART_Start_Receive_IT+0x1ce>
 800bd80:	e018      	b.n	800bdb4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	e853 3f00 	ldrex	r3, [r3]
 800bd8e:	613b      	str	r3, [r7, #16]
   return(result);
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	f043 0320 	orr.w	r3, r3, #32
 800bd96:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bda0:	623b      	str	r3, [r7, #32]
 800bda2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda4:	69f9      	ldr	r1, [r7, #28]
 800bda6:	6a3a      	ldr	r2, [r7, #32]
 800bda8:	e841 2300 	strex	r3, r2, [r1]
 800bdac:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdae:	69bb      	ldr	r3, [r7, #24]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d1e6      	bne.n	800bd82 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800bdb4:	2300      	movs	r3, #0
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	378c      	adds	r7, #140	; 0x8c
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bc80      	pop	{r7}
 800bdbe:	4770      	bx	lr
 800bdc0:	0800c68d 	.word	0x0800c68d
 800bdc4:	0800c395 	.word	0x0800c395
 800bdc8:	0800c233 	.word	0x0800c233
 800bdcc:	0800c0d3 	.word	0x0800c0d3

0800bdd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b08f      	sub	sp, #60	; 0x3c
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdde:	6a3b      	ldr	r3, [r7, #32]
 800bde0:	e853 3f00 	ldrex	r3, [r3]
 800bde4:	61fb      	str	r3, [r7, #28]
   return(result);
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bdec:	637b      	str	r3, [r7, #52]	; 0x34
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdf8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bdfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdfe:	e841 2300 	strex	r3, r2, [r1]
 800be02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1e6      	bne.n	800bdd8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	3308      	adds	r3, #8
 800be10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	e853 3f00 	ldrex	r3, [r3]
 800be18:	60bb      	str	r3, [r7, #8]
   return(result);
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800be20:	633b      	str	r3, [r7, #48]	; 0x30
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	3308      	adds	r3, #8
 800be28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be2a:	61ba      	str	r2, [r7, #24]
 800be2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be2e:	6979      	ldr	r1, [r7, #20]
 800be30:	69ba      	ldr	r2, [r7, #24]
 800be32:	e841 2300 	strex	r3, r2, [r1]
 800be36:	613b      	str	r3, [r7, #16]
   return(result);
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1e5      	bne.n	800be0a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2220      	movs	r2, #32
 800be42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800be46:	bf00      	nop
 800be48:	373c      	adds	r7, #60	; 0x3c
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bc80      	pop	{r7}
 800be4e:	4770      	bx	lr

0800be50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be50:	b480      	push	{r7}
 800be52:	b095      	sub	sp, #84	; 0x54
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be60:	e853 3f00 	ldrex	r3, [r3]
 800be64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800be66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	461a      	mov	r2, r3
 800be74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be76:	643b      	str	r3, [r7, #64]	; 0x40
 800be78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800be7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be7e:	e841 2300 	strex	r3, r2, [r1]
 800be82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be86:	2b00      	cmp	r3, #0
 800be88:	d1e6      	bne.n	800be58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	3308      	adds	r3, #8
 800be90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be92:	6a3b      	ldr	r3, [r7, #32]
 800be94:	e853 3f00 	ldrex	r3, [r3]
 800be98:	61fb      	str	r3, [r7, #28]
   return(result);
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bea0:	f023 0301 	bic.w	r3, r3, #1
 800bea4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	3308      	adds	r3, #8
 800beac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800beae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800beb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800beb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beb6:	e841 2300 	strex	r3, r2, [r1]
 800beba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d1e3      	bne.n	800be8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d118      	bne.n	800befc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	e853 3f00 	ldrex	r3, [r3]
 800bed6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	f023 0310 	bic.w	r3, r3, #16
 800bede:	647b      	str	r3, [r7, #68]	; 0x44
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	461a      	mov	r2, r3
 800bee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bee8:	61bb      	str	r3, [r7, #24]
 800beea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beec:	6979      	ldr	r1, [r7, #20]
 800beee:	69ba      	ldr	r2, [r7, #24]
 800bef0:	e841 2300 	strex	r3, r2, [r1]
 800bef4:	613b      	str	r3, [r7, #16]
   return(result);
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d1e6      	bne.n	800beca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2220      	movs	r2, #32
 800bf00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bf10:	bf00      	nop
 800bf12:	3754      	adds	r7, #84	; 0x54
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bc80      	pop	{r7}
 800bf18:	4770      	bx	lr

0800bf1a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b090      	sub	sp, #64	; 0x40
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf26:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f003 0320 	and.w	r3, r3, #32
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d137      	bne.n	800bfa6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bf36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	3308      	adds	r3, #8
 800bf44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf48:	e853 3f00 	ldrex	r3, [r3]
 800bf4c:	623b      	str	r3, [r7, #32]
   return(result);
 800bf4e:	6a3b      	ldr	r3, [r7, #32]
 800bf50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf54:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	3308      	adds	r3, #8
 800bf5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf5e:	633a      	str	r2, [r7, #48]	; 0x30
 800bf60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf66:	e841 2300 	strex	r3, r2, [r1]
 800bf6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1e5      	bne.n	800bf3e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	e853 3f00 	ldrex	r3, [r3]
 800bf7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf86:	637b      	str	r3, [r7, #52]	; 0x34
 800bf88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf90:	61fb      	str	r3, [r7, #28]
 800bf92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf94:	69b9      	ldr	r1, [r7, #24]
 800bf96:	69fa      	ldr	r2, [r7, #28]
 800bf98:	e841 2300 	strex	r3, r2, [r1]
 800bf9c:	617b      	str	r3, [r7, #20]
   return(result);
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1e6      	bne.n	800bf72 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bfa4:	e002      	b.n	800bfac <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bfa6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bfa8:	f7f7 fc06 	bl	80037b8 <HAL_UART_TxCpltCallback>
}
 800bfac:	bf00      	nop
 800bfae:	3740      	adds	r7, #64	; 0x40
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bfc2:	68f8      	ldr	r0, [r7, #12]
 800bfc4:	f7ff f996 	bl	800b2f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfc8:	bf00      	nop
 800bfca:	3710      	adds	r7, #16
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfdc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfe4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bff8:	2b80      	cmp	r3, #128	; 0x80
 800bffa:	d109      	bne.n	800c010 <UART_DMAError+0x40>
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	2b21      	cmp	r3, #33	; 0x21
 800c000:	d106      	bne.n	800c010 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	2200      	movs	r2, #0
 800c006:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c00a:	6978      	ldr	r0, [r7, #20]
 800c00c:	f7ff fee0 	bl	800bdd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	689b      	ldr	r3, [r3, #8]
 800c016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c01a:	2b40      	cmp	r3, #64	; 0x40
 800c01c:	d109      	bne.n	800c032 <UART_DMAError+0x62>
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2b22      	cmp	r3, #34	; 0x22
 800c022:	d106      	bne.n	800c032 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	2200      	movs	r2, #0
 800c028:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c02c:	6978      	ldr	r0, [r7, #20]
 800c02e:	f7ff ff0f 	bl	800be50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c038:	f043 0210 	orr.w	r2, r3, #16
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c042:	6978      	ldr	r0, [r7, #20]
 800c044:	f7ff f95f 	bl	800b306 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c048:	bf00      	nop
 800c04a:	3718      	adds	r7, #24
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c05c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2200      	movs	r2, #0
 800c062:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2200      	movs	r2, #0
 800c06a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f7ff f949 	bl	800b306 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c074:	bf00      	nop
 800c076:	3710      	adds	r7, #16
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b088      	sub	sp, #32
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	e853 3f00 	ldrex	r3, [r3]
 800c090:	60bb      	str	r3, [r7, #8]
   return(result);
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c098:	61fb      	str	r3, [r7, #28]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	61bb      	str	r3, [r7, #24]
 800c0a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a6:	6979      	ldr	r1, [r7, #20]
 800c0a8:	69ba      	ldr	r2, [r7, #24]
 800c0aa:	e841 2300 	strex	r3, r2, [r1]
 800c0ae:	613b      	str	r3, [r7, #16]
   return(result);
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1e6      	bne.n	800c084 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2220      	movs	r2, #32
 800c0ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f7f7 fb77 	bl	80037b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0ca:	bf00      	nop
 800c0cc:	3720      	adds	r7, #32
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b096      	sub	sp, #88	; 0x58
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c0e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0ea:	2b22      	cmp	r3, #34	; 0x22
 800c0ec:	f040 8095 	bne.w	800c21a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c0fa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c0fe:	b2d9      	uxtb	r1, r3
 800c100:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c104:	b2da      	uxtb	r2, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c10a:	400a      	ands	r2, r1
 800c10c:	b2d2      	uxtb	r2, r2
 800c10e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c114:	1c5a      	adds	r2, r3, #1
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c120:	b29b      	uxth	r3, r3
 800c122:	3b01      	subs	r3, #1
 800c124:	b29a      	uxth	r2, r3
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c132:	b29b      	uxth	r3, r3
 800c134:	2b00      	cmp	r3, #0
 800c136:	d178      	bne.n	800c22a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c140:	e853 3f00 	ldrex	r3, [r3]
 800c144:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c148:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c14c:	653b      	str	r3, [r7, #80]	; 0x50
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	461a      	mov	r2, r3
 800c154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c156:	647b      	str	r3, [r7, #68]	; 0x44
 800c158:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c15a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c15c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c15e:	e841 2300 	strex	r3, r2, [r1]
 800c162:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c166:	2b00      	cmp	r3, #0
 800c168:	d1e6      	bne.n	800c138 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	3308      	adds	r3, #8
 800c170:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c174:	e853 3f00 	ldrex	r3, [r3]
 800c178:	623b      	str	r3, [r7, #32]
   return(result);
 800c17a:	6a3b      	ldr	r3, [r7, #32]
 800c17c:	f023 0301 	bic.w	r3, r3, #1
 800c180:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	3308      	adds	r3, #8
 800c188:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c18a:	633a      	str	r2, [r7, #48]	; 0x30
 800c18c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c18e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c192:	e841 2300 	strex	r3, r2, [r1]
 800c196:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d1e5      	bne.n	800c16a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2220      	movs	r2, #32
 800c1a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d12e      	bne.n	800c212 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	e853 3f00 	ldrex	r3, [r3]
 800c1c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f023 0310 	bic.w	r3, r3, #16
 800c1ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1d8:	61fb      	str	r3, [r7, #28]
 800c1da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1dc:	69b9      	ldr	r1, [r7, #24]
 800c1de:	69fa      	ldr	r2, [r7, #28]
 800c1e0:	e841 2300 	strex	r3, r2, [r1]
 800c1e4:	617b      	str	r3, [r7, #20]
   return(result);
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d1e6      	bne.n	800c1ba <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	69db      	ldr	r3, [r3, #28]
 800c1f2:	f003 0310 	and.w	r3, r3, #16
 800c1f6:	2b10      	cmp	r3, #16
 800c1f8:	d103      	bne.n	800c202 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2210      	movs	r2, #16
 800c200:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c208:	4619      	mov	r1, r3
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f7ff f884 	bl	800b318 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c210:	e00b      	b.n	800c22a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f7f7 fae6 	bl	80037e4 <HAL_UART_RxCpltCallback>
}
 800c218:	e007      	b.n	800c22a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	699a      	ldr	r2, [r3, #24]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f042 0208 	orr.w	r2, r2, #8
 800c228:	619a      	str	r2, [r3, #24]
}
 800c22a:	bf00      	nop
 800c22c:	3758      	adds	r7, #88	; 0x58
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}

0800c232 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c232:	b580      	push	{r7, lr}
 800c234:	b096      	sub	sp, #88	; 0x58
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c240:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c24a:	2b22      	cmp	r3, #34	; 0x22
 800c24c:	f040 8095 	bne.w	800c37a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c256:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c25e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c260:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c264:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c268:	4013      	ands	r3, r2
 800c26a:	b29a      	uxth	r2, r3
 800c26c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c26e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c274:	1c9a      	adds	r2, r3, #2
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c280:	b29b      	uxth	r3, r3
 800c282:	3b01      	subs	r3, #1
 800c284:	b29a      	uxth	r2, r3
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c292:	b29b      	uxth	r3, r3
 800c294:	2b00      	cmp	r3, #0
 800c296:	d178      	bne.n	800c38a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2a0:	e853 3f00 	ldrex	r3, [r3]
 800c2a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c2ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2b6:	643b      	str	r3, [r7, #64]	; 0x40
 800c2b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c2bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2be:	e841 2300 	strex	r3, r2, [r1]
 800c2c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1e6      	bne.n	800c298 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	3308      	adds	r3, #8
 800c2d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d2:	6a3b      	ldr	r3, [r7, #32]
 800c2d4:	e853 3f00 	ldrex	r3, [r3]
 800c2d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	f023 0301 	bic.w	r3, r3, #1
 800c2e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	3308      	adds	r3, #8
 800c2e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c2ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2f2:	e841 2300 	strex	r3, r2, [r1]
 800c2f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1e5      	bne.n	800c2ca <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2220      	movs	r2, #32
 800c302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2200      	movs	r2, #0
 800c30a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c310:	2b01      	cmp	r3, #1
 800c312:	d12e      	bne.n	800c372 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	e853 3f00 	ldrex	r3, [r3]
 800c326:	60bb      	str	r3, [r7, #8]
   return(result);
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	f023 0310 	bic.w	r3, r3, #16
 800c32e:	647b      	str	r3, [r7, #68]	; 0x44
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	461a      	mov	r2, r3
 800c336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c338:	61bb      	str	r3, [r7, #24]
 800c33a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c33c:	6979      	ldr	r1, [r7, #20]
 800c33e:	69ba      	ldr	r2, [r7, #24]
 800c340:	e841 2300 	strex	r3, r2, [r1]
 800c344:	613b      	str	r3, [r7, #16]
   return(result);
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d1e6      	bne.n	800c31a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	69db      	ldr	r3, [r3, #28]
 800c352:	f003 0310 	and.w	r3, r3, #16
 800c356:	2b10      	cmp	r3, #16
 800c358:	d103      	bne.n	800c362 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2210      	movs	r2, #16
 800c360:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c368:	4619      	mov	r1, r3
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7fe ffd4 	bl	800b318 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c370:	e00b      	b.n	800c38a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7f7 fa36 	bl	80037e4 <HAL_UART_RxCpltCallback>
}
 800c378:	e007      	b.n	800c38a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	699a      	ldr	r2, [r3, #24]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f042 0208 	orr.w	r2, r2, #8
 800c388:	619a      	str	r2, [r3, #24]
}
 800c38a:	bf00      	nop
 800c38c:	3758      	adds	r7, #88	; 0x58
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
	...

0800c394 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b0a6      	sub	sp, #152	; 0x98
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c3a2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	69db      	ldr	r3, [r3, #28]
 800c3ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3ca:	2b22      	cmp	r3, #34	; 0x22
 800c3cc:	f040 814f 	bne.w	800c66e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c3d6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c3da:	e0f6      	b.n	800c5ca <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c3e6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800c3ea:	b2d9      	uxtb	r1, r3
 800c3ec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800c3f0:	b2da      	uxtb	r2, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3f6:	400a      	ands	r2, r1
 800c3f8:	b2d2      	uxtb	r2, r2
 800c3fa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c400:	1c5a      	adds	r2, r3, #1
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	3b01      	subs	r3, #1
 800c410:	b29a      	uxth	r2, r3
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	69db      	ldr	r3, [r3, #28]
 800c41e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c422:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c426:	f003 0307 	and.w	r3, r3, #7
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d053      	beq.n	800c4d6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c42e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c432:	f003 0301 	and.w	r3, r3, #1
 800c436:	2b00      	cmp	r3, #0
 800c438:	d011      	beq.n	800c45e <UART_RxISR_8BIT_FIFOEN+0xca>
 800c43a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c43e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00b      	beq.n	800c45e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	2201      	movs	r2, #1
 800c44c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c454:	f043 0201 	orr.w	r2, r3, #1
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c45e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c462:	f003 0302 	and.w	r3, r3, #2
 800c466:	2b00      	cmp	r3, #0
 800c468:	d011      	beq.n	800c48e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c46a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c46e:	f003 0301 	and.w	r3, r3, #1
 800c472:	2b00      	cmp	r3, #0
 800c474:	d00b      	beq.n	800c48e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2202      	movs	r2, #2
 800c47c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c484:	f043 0204 	orr.w	r2, r3, #4
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c48e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c492:	f003 0304 	and.w	r3, r3, #4
 800c496:	2b00      	cmp	r3, #0
 800c498:	d011      	beq.n	800c4be <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c49a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c49e:	f003 0301 	and.w	r3, r3, #1
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00b      	beq.n	800c4be <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	2204      	movs	r2, #4
 800c4ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4b4:	f043 0202 	orr.w	r2, r3, #2
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d006      	beq.n	800c4d6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f7fe ff1c 	bl	800b306 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d173      	bne.n	800c5ca <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4ea:	e853 3f00 	ldrex	r3, [r3]
 800c4ee:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c4f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	461a      	mov	r2, r3
 800c500:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c504:	66bb      	str	r3, [r7, #104]	; 0x68
 800c506:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c508:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c50a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c50c:	e841 2300 	strex	r3, r2, [r1]
 800c510:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1e4      	bne.n	800c4e2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	3308      	adds	r3, #8
 800c51e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c522:	e853 3f00 	ldrex	r3, [r3]
 800c526:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c52a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c52e:	f023 0301 	bic.w	r3, r3, #1
 800c532:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	3308      	adds	r3, #8
 800c53a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c53c:	657a      	str	r2, [r7, #84]	; 0x54
 800c53e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c540:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c542:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c544:	e841 2300 	strex	r3, r2, [r1]
 800c548:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c54a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d1e3      	bne.n	800c518 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2220      	movs	r2, #32
 800c554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c562:	2b01      	cmp	r3, #1
 800c564:	d12e      	bne.n	800c5c4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c574:	e853 3f00 	ldrex	r3, [r3]
 800c578:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57c:	f023 0310 	bic.w	r3, r3, #16
 800c580:	67bb      	str	r3, [r7, #120]	; 0x78
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	461a      	mov	r2, r3
 800c588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c58a:	643b      	str	r3, [r7, #64]	; 0x40
 800c58c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c58e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c590:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c592:	e841 2300 	strex	r3, r2, [r1]
 800c596:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d1e6      	bne.n	800c56c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	69db      	ldr	r3, [r3, #28]
 800c5a4:	f003 0310 	and.w	r3, r3, #16
 800c5a8:	2b10      	cmp	r3, #16
 800c5aa:	d103      	bne.n	800c5b4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2210      	movs	r2, #16
 800c5b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f7fe feab 	bl	800b318 <HAL_UARTEx_RxEventCallback>
 800c5c2:	e002      	b.n	800c5ca <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f7f7 f90d 	bl	80037e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c5ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d006      	beq.n	800c5e0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800c5d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c5d6:	f003 0320 	and.w	r3, r3, #32
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	f47f aefe 	bne.w	800c3dc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c5ea:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d045      	beq.n	800c67e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c5f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d23e      	bcs.n	800c67e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	3308      	adds	r3, #8
 800c606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c608:	6a3b      	ldr	r3, [r7, #32]
 800c60a:	e853 3f00 	ldrex	r3, [r3]
 800c60e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c616:	673b      	str	r3, [r7, #112]	; 0x70
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	3308      	adds	r3, #8
 800c61e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c620:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c628:	e841 2300 	strex	r3, r2, [r1]
 800c62c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1e5      	bne.n	800c600 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4a14      	ldr	r2, [pc, #80]	; (800c688 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800c638:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	e853 3f00 	ldrex	r3, [r3]
 800c646:	60bb      	str	r3, [r7, #8]
   return(result);
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	f043 0320 	orr.w	r3, r3, #32
 800c64e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	461a      	mov	r2, r3
 800c656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c658:	61bb      	str	r3, [r7, #24]
 800c65a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c65c:	6979      	ldr	r1, [r7, #20]
 800c65e:	69ba      	ldr	r2, [r7, #24]
 800c660:	e841 2300 	strex	r3, r2, [r1]
 800c664:	613b      	str	r3, [r7, #16]
   return(result);
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d1e6      	bne.n	800c63a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c66c:	e007      	b.n	800c67e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	699a      	ldr	r2, [r3, #24]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f042 0208 	orr.w	r2, r2, #8
 800c67c:	619a      	str	r2, [r3, #24]
}
 800c67e:	bf00      	nop
 800c680:	3798      	adds	r7, #152	; 0x98
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	0800c0d3 	.word	0x0800c0d3

0800c68c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b0a8      	sub	sp, #160	; 0xa0
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c69a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	69db      	ldr	r3, [r3, #28]
 800c6a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6c2:	2b22      	cmp	r3, #34	; 0x22
 800c6c4:	f040 8153 	bne.w	800c96e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c6ce:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c6d2:	e0fa      	b.n	800c8ca <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6da:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800c6e6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800c6ea:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c6ee:	4013      	ands	r3, r2
 800c6f0:	b29a      	uxth	r2, r3
 800c6f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c6f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6fc:	1c9a      	adds	r2, r3, #2
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c708:	b29b      	uxth	r3, r3
 800c70a:	3b01      	subs	r3, #1
 800c70c:	b29a      	uxth	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	69db      	ldr	r3, [r3, #28]
 800c71a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c71e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c722:	f003 0307 	and.w	r3, r3, #7
 800c726:	2b00      	cmp	r3, #0
 800c728:	d053      	beq.n	800c7d2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c72a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c72e:	f003 0301 	and.w	r3, r3, #1
 800c732:	2b00      	cmp	r3, #0
 800c734:	d011      	beq.n	800c75a <UART_RxISR_16BIT_FIFOEN+0xce>
 800c736:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c73a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d00b      	beq.n	800c75a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2201      	movs	r2, #1
 800c748:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c750:	f043 0201 	orr.w	r2, r3, #1
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c75a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c75e:	f003 0302 	and.w	r3, r3, #2
 800c762:	2b00      	cmp	r3, #0
 800c764:	d011      	beq.n	800c78a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c766:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c76a:	f003 0301 	and.w	r3, r3, #1
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00b      	beq.n	800c78a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2202      	movs	r2, #2
 800c778:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c780:	f043 0204 	orr.w	r2, r3, #4
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c78a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c78e:	f003 0304 	and.w	r3, r3, #4
 800c792:	2b00      	cmp	r3, #0
 800c794:	d011      	beq.n	800c7ba <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c796:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c79a:	f003 0301 	and.w	r3, r3, #1
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00b      	beq.n	800c7ba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2204      	movs	r2, #4
 800c7a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7b0:	f043 0202 	orr.w	r2, r3, #2
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d006      	beq.n	800c7d2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f7fe fd9e 	bl	800b306 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d175      	bne.n	800c8ca <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c7e6:	e853 3f00 	ldrex	r3, [r3]
 800c7ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c7ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c800:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c802:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c804:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c806:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c808:	e841 2300 	strex	r3, r2, [r1]
 800c80c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c80e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c810:	2b00      	cmp	r3, #0
 800c812:	d1e4      	bne.n	800c7de <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	3308      	adds	r3, #8
 800c81a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c81c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c81e:	e853 3f00 	ldrex	r3, [r3]
 800c822:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c82a:	f023 0301 	bic.w	r3, r3, #1
 800c82e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	3308      	adds	r3, #8
 800c838:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c83c:	65ba      	str	r2, [r7, #88]	; 0x58
 800c83e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c840:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c842:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c844:	e841 2300 	strex	r3, r2, [r1]
 800c848:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c84a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d1e1      	bne.n	800c814 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2220      	movs	r2, #32
 800c854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c862:	2b01      	cmp	r3, #1
 800c864:	d12e      	bne.n	800c8c4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c874:	e853 3f00 	ldrex	r3, [r3]
 800c878:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c87c:	f023 0310 	bic.w	r3, r3, #16
 800c880:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	461a      	mov	r2, r3
 800c888:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c88a:	647b      	str	r3, [r7, #68]	; 0x44
 800c88c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c890:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c892:	e841 2300 	strex	r3, r2, [r1]
 800c896:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d1e6      	bne.n	800c86c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	69db      	ldr	r3, [r3, #28]
 800c8a4:	f003 0310 	and.w	r3, r3, #16
 800c8a8:	2b10      	cmp	r3, #16
 800c8aa:	d103      	bne.n	800c8b4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2210      	movs	r2, #16
 800c8b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f7fe fd2b 	bl	800b318 <HAL_UARTEx_RxEventCallback>
 800c8c2:	e002      	b.n	800c8ca <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f7f6 ff8d 	bl	80037e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c8ca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d006      	beq.n	800c8e0 <UART_RxISR_16BIT_FIFOEN+0x254>
 800c8d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c8d6:	f003 0320 	and.w	r3, r3, #32
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f47f aefa 	bne.w	800c6d4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8e6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c8ea:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d045      	beq.n	800c97e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c8f8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d23e      	bcs.n	800c97e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	3308      	adds	r3, #8
 800c906:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90a:	e853 3f00 	ldrex	r3, [r3]
 800c90e:	623b      	str	r3, [r7, #32]
   return(result);
 800c910:	6a3b      	ldr	r3, [r7, #32]
 800c912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c916:	677b      	str	r3, [r7, #116]	; 0x74
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	3308      	adds	r3, #8
 800c91e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c920:	633a      	str	r2, [r7, #48]	; 0x30
 800c922:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c924:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c928:	e841 2300 	strex	r3, r2, [r1]
 800c92c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1e5      	bne.n	800c900 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	4a14      	ldr	r2, [pc, #80]	; (800c988 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800c938:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	e853 3f00 	ldrex	r3, [r3]
 800c946:	60fb      	str	r3, [r7, #12]
   return(result);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f043 0320 	orr.w	r3, r3, #32
 800c94e:	673b      	str	r3, [r7, #112]	; 0x70
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	461a      	mov	r2, r3
 800c956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c958:	61fb      	str	r3, [r7, #28]
 800c95a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c95c:	69b9      	ldr	r1, [r7, #24]
 800c95e:	69fa      	ldr	r2, [r7, #28]
 800c960:	e841 2300 	strex	r3, r2, [r1]
 800c964:	617b      	str	r3, [r7, #20]
   return(result);
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d1e6      	bne.n	800c93a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c96c:	e007      	b.n	800c97e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	699a      	ldr	r2, [r3, #24]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f042 0208 	orr.w	r2, r2, #8
 800c97c:	619a      	str	r2, [r3, #24]
}
 800c97e:	bf00      	nop
 800c980:	37a0      	adds	r7, #160	; 0xa0
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	0800c233 	.word	0x0800c233

0800c98c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c994:	bf00      	nop
 800c996:	370c      	adds	r7, #12
 800c998:	46bd      	mov	sp, r7
 800c99a:	bc80      	pop	{r7}
 800c99c:	4770      	bx	lr

0800c99e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c99e:	b480      	push	{r7}
 800c9a0:	b083      	sub	sp, #12
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c9a6:	bf00      	nop
 800c9a8:	370c      	adds	r7, #12
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bc80      	pop	{r7}
 800c9ae:	4770      	bx	lr

0800c9b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c9b8:	bf00      	nop
 800c9ba:	370c      	adds	r7, #12
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bc80      	pop	{r7}
 800c9c0:	4770      	bx	lr

0800c9c2 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b088      	sub	sp, #32
 800c9c6:	af02      	add	r7, sp, #8
 800c9c8:	60f8      	str	r0, [r7, #12]
 800c9ca:	1d3b      	adds	r3, r7, #4
 800c9cc:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d101      	bne.n	800c9e2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800c9de:	2302      	movs	r3, #2
 800c9e0:	e046      	b.n	800ca70 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2224      	movs	r2, #36	; 0x24
 800c9ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f022 0201 	bic.w	r2, r2, #1
 800ca00:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	430a      	orrs	r2, r1
 800ca14:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d105      	bne.n	800ca28 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800ca1c:	1d3b      	adds	r3, r7, #4
 800ca1e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ca22:	68f8      	ldr	r0, [r7, #12]
 800ca24:	f000 f949 	bl	800ccba <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f042 0201 	orr.w	r2, r2, #1
 800ca36:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ca38:	f7f6 f822 	bl	8002a80 <HAL_GetTick>
 800ca3c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca42:	9300      	str	r3, [sp, #0]
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	2200      	movs	r2, #0
 800ca48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ca4c:	68f8      	ldr	r0, [r7, #12]
 800ca4e:	f7fe ffcf 	bl	800b9f0 <UART_WaitOnFlagUntilTimeout>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d002      	beq.n	800ca5e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800ca58:	2303      	movs	r3, #3
 800ca5a:	75fb      	strb	r3, [r7, #23]
 800ca5c:	e003      	b.n	800ca66 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2220      	movs	r2, #32
 800ca62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800ca6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3718      	adds	r7, #24
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b089      	sub	sp, #36	; 0x24
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d101      	bne.n	800ca8e <HAL_UARTEx_EnableStopMode+0x16>
 800ca8a:	2302      	movs	r3, #2
 800ca8c:	e021      	b.n	800cad2 <HAL_UARTEx_EnableStopMode+0x5a>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2201      	movs	r2, #1
 800ca92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	e853 3f00 	ldrex	r3, [r3]
 800caa2:	60bb      	str	r3, [r7, #8]
   return(result);
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	f043 0302 	orr.w	r3, r3, #2
 800caaa:	61fb      	str	r3, [r7, #28]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	461a      	mov	r2, r3
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	61bb      	str	r3, [r7, #24]
 800cab6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab8:	6979      	ldr	r1, [r7, #20]
 800caba:	69ba      	ldr	r2, [r7, #24]
 800cabc:	e841 2300 	strex	r3, r2, [r1]
 800cac0:	613b      	str	r3, [r7, #16]
   return(result);
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d1e6      	bne.n	800ca96 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3724      	adds	r7, #36	; 0x24
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bc80      	pop	{r7}
 800cada:	4770      	bx	lr

0800cadc <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800caea:	2b01      	cmp	r3, #1
 800caec:	d101      	bne.n	800caf2 <HAL_UARTEx_EnableFifoMode+0x16>
 800caee:	2302      	movs	r3, #2
 800caf0:	e02b      	b.n	800cb4a <HAL_UARTEx_EnableFifoMode+0x6e>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2201      	movs	r2, #1
 800caf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2224      	movs	r2, #36	; 0x24
 800cafe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f022 0201 	bic.w	r2, r2, #1
 800cb18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cb20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800cb28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 f8e4 	bl	800cd00 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2220      	movs	r2, #32
 800cb3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2200      	movs	r2, #0
 800cb44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb48:	2300      	movs	r3, #0
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3710      	adds	r7, #16
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cb52:	b480      	push	{r7}
 800cb54:	b085      	sub	sp, #20
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d101      	bne.n	800cb68 <HAL_UARTEx_DisableFifoMode+0x16>
 800cb64:	2302      	movs	r3, #2
 800cb66:	e027      	b.n	800cbb8 <HAL_UARTEx_DisableFifoMode+0x66>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2224      	movs	r2, #36	; 0x24
 800cb74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f022 0201 	bic.w	r2, r2, #1
 800cb8e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cb96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2220      	movs	r2, #32
 800cbaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cbb6:	2300      	movs	r3, #0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3714      	adds	r7, #20
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bc80      	pop	{r7}
 800cbc0:	4770      	bx	lr

0800cbc2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b084      	sub	sp, #16
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
 800cbca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d101      	bne.n	800cbda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cbd6:	2302      	movs	r3, #2
 800cbd8:	e02d      	b.n	800cc36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2201      	movs	r2, #1
 800cbde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2224      	movs	r2, #36	; 0x24
 800cbe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f022 0201 	bic.w	r2, r2, #1
 800cc00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	683a      	ldr	r2, [r7, #0]
 800cc12:	430a      	orrs	r2, r1
 800cc14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 f872 	bl	800cd00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	68fa      	ldr	r2, [r7, #12]
 800cc22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2220      	movs	r2, #32
 800cc28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3710      	adds	r7, #16
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b084      	sub	sp, #16
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
 800cc46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc4e:	2b01      	cmp	r3, #1
 800cc50:	d101      	bne.n	800cc56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cc52:	2302      	movs	r3, #2
 800cc54:	e02d      	b.n	800ccb2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2201      	movs	r2, #1
 800cc5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2224      	movs	r2, #36	; 0x24
 800cc62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	681a      	ldr	r2, [r3, #0]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f022 0201 	bic.w	r2, r2, #1
 800cc7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	683a      	ldr	r2, [r7, #0]
 800cc8e:	430a      	orrs	r2, r1
 800cc90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 f834 	bl	800cd00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	68fa      	ldr	r2, [r7, #12]
 800cc9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2220      	movs	r2, #32
 800cca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ccb0:	2300      	movs	r3, #0
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800ccba:	b480      	push	{r7}
 800ccbc:	b085      	sub	sp, #20
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	60f8      	str	r0, [r7, #12]
 800ccc2:	1d3b      	adds	r3, r7, #4
 800ccc4:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	f023 0210 	bic.w	r2, r3, #16
 800ccd2:	893b      	ldrh	r3, [r7, #8]
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	430a      	orrs	r2, r1
 800ccdc:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800cce8:	7abb      	ldrb	r3, [r7, #10]
 800ccea:	061a      	lsls	r2, r3, #24
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	430a      	orrs	r2, r1
 800ccf2:	605a      	str	r2, [r3, #4]
}
 800ccf4:	bf00      	nop
 800ccf6:	3714      	adds	r7, #20
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bc80      	pop	{r7}
 800ccfc:	4770      	bx	lr
	...

0800cd00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b085      	sub	sp, #20
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d108      	bne.n	800cd22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2201      	movs	r2, #1
 800cd14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cd20:	e031      	b.n	800cd86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cd22:	2308      	movs	r3, #8
 800cd24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cd26:	2308      	movs	r3, #8
 800cd28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	689b      	ldr	r3, [r3, #8]
 800cd30:	0e5b      	lsrs	r3, r3, #25
 800cd32:	b2db      	uxtb	r3, r3
 800cd34:	f003 0307 	and.w	r3, r3, #7
 800cd38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	0f5b      	lsrs	r3, r3, #29
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	f003 0307 	and.w	r3, r3, #7
 800cd48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd4a:	7bbb      	ldrb	r3, [r7, #14]
 800cd4c:	7b3a      	ldrb	r2, [r7, #12]
 800cd4e:	4910      	ldr	r1, [pc, #64]	; (800cd90 <UARTEx_SetNbDataToProcess+0x90>)
 800cd50:	5c8a      	ldrb	r2, [r1, r2]
 800cd52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cd56:	7b3a      	ldrb	r2, [r7, #12]
 800cd58:	490e      	ldr	r1, [pc, #56]	; (800cd94 <UARTEx_SetNbDataToProcess+0x94>)
 800cd5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd60:	b29a      	uxth	r2, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd68:	7bfb      	ldrb	r3, [r7, #15]
 800cd6a:	7b7a      	ldrb	r2, [r7, #13]
 800cd6c:	4908      	ldr	r1, [pc, #32]	; (800cd90 <UARTEx_SetNbDataToProcess+0x90>)
 800cd6e:	5c8a      	ldrb	r2, [r1, r2]
 800cd70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cd74:	7b7a      	ldrb	r2, [r7, #13]
 800cd76:	4907      	ldr	r1, [pc, #28]	; (800cd94 <UARTEx_SetNbDataToProcess+0x94>)
 800cd78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd7e:	b29a      	uxth	r2, r3
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cd86:	bf00      	nop
 800cd88:	3714      	adds	r7, #20
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bc80      	pop	{r7}
 800cd8e:	4770      	bx	lr
 800cd90:	0801f01c 	.word	0x0801f01c
 800cd94:	0801f024 	.word	0x0801f024

0800cd98 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800cd9c:	f7f5 fd10 	bl	80027c0 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800cda0:	f000 f820 	bl	800cde4 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800cda4:	bf00      	nop
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800cdac:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb0:	f010 fc3e 	bl	801d630 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800cdb4:	bf00      	nop
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800cdbc:	f3bf 8f4f 	dsb	sy
}
 800cdc0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cdc2:	4b06      	ldr	r3, [pc, #24]	; (800cddc <__NVIC_SystemReset+0x24>)
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cdca:	4904      	ldr	r1, [pc, #16]	; (800cddc <__NVIC_SystemReset+0x24>)
 800cdcc:	4b04      	ldr	r3, [pc, #16]	; (800cde0 <__NVIC_SystemReset+0x28>)
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800cdd2:	f3bf 8f4f 	dsb	sy
}
 800cdd6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800cdd8:	bf00      	nop
 800cdda:	e7fd      	b.n	800cdd8 <__NVIC_SystemReset+0x20>
 800cddc:	e000ed00 	.word	0xe000ed00
 800cde0:	05fa0004 	.word	0x05fa0004

0800cde4 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b086      	sub	sp, #24
 800cde8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800cdea:	2300      	movs	r3, #0
 800cdec:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800cdee:	2300      	movs	r3, #0
 800cdf0:	9302      	str	r3, [sp, #8]
 800cdf2:	2302      	movs	r3, #2
 800cdf4:	9301      	str	r3, [sp, #4]
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	9300      	str	r3, [sp, #0]
 800cdfa:	4b5a      	ldr	r3, [pc, #360]	; (800cf64 <LoRaWAN_Init+0x180>)
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	2100      	movs	r1, #0
 800ce00:	2002      	movs	r0, #2
 800ce02:	f011 f863 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800ce06:	2300      	movs	r3, #0
 800ce08:	9302      	str	r3, [sp, #8]
 800ce0a:	2304      	movs	r3, #4
 800ce0c:	9301      	str	r3, [sp, #4]
 800ce0e:	2302      	movs	r3, #2
 800ce10:	9300      	str	r3, [sp, #0]
 800ce12:	4b55      	ldr	r3, [pc, #340]	; (800cf68 <LoRaWAN_Init+0x184>)
 800ce14:	2200      	movs	r2, #0
 800ce16:	2100      	movs	r1, #0
 800ce18:	2002      	movs	r0, #2
 800ce1a:	f011 f857 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800ce1e:	2300      	movs	r3, #0
 800ce20:	9302      	str	r3, [sp, #8]
 800ce22:	2302      	movs	r3, #2
 800ce24:	9301      	str	r3, [sp, #4]
 800ce26:	2301      	movs	r3, #1
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	4b50      	ldr	r3, [pc, #320]	; (800cf6c <LoRaWAN_Init+0x188>)
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	2100      	movs	r1, #0
 800ce30:	2002      	movs	r0, #2
 800ce32:	f011 f84b 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800ce36:	1d3b      	adds	r3, r7, #4
 800ce38:	4619      	mov	r1, r3
 800ce3a:	2000      	movs	r0, #0
 800ce3c:	f003 f8ee 	bl	801001c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	0e1b      	lsrs	r3, r3, #24
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	461a      	mov	r2, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	0c1b      	lsrs	r3, r3, #16
 800ce4c:	b2db      	uxtb	r3, r3
 800ce4e:	4619      	mov	r1, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	0a1b      	lsrs	r3, r3, #8
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	9302      	str	r3, [sp, #8]
 800ce58:	9101      	str	r1, [sp, #4]
 800ce5a:	9200      	str	r2, [sp, #0]
 800ce5c:	4b44      	ldr	r3, [pc, #272]	; (800cf70 <LoRaWAN_Init+0x18c>)
 800ce5e:	2200      	movs	r2, #0
 800ce60:	2100      	movs	r1, #0
 800ce62:	2002      	movs	r0, #2
 800ce64:	f011 f832 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800ce68:	1d3b      	adds	r3, r7, #4
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	2001      	movs	r0, #1
 800ce6e:	f003 f8d5 	bl	801001c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	0e1b      	lsrs	r3, r3, #24
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	461a      	mov	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	0c1b      	lsrs	r3, r3, #16
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	4619      	mov	r1, r3
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	0a1b      	lsrs	r3, r3, #8
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	b2c0      	uxtb	r0, r0
 800ce8c:	9003      	str	r0, [sp, #12]
 800ce8e:	9302      	str	r3, [sp, #8]
 800ce90:	9101      	str	r1, [sp, #4]
 800ce92:	9200      	str	r2, [sp, #0]
 800ce94:	4b37      	ldr	r3, [pc, #220]	; (800cf74 <LoRaWAN_Init+0x190>)
 800ce96:	2200      	movs	r2, #0
 800ce98:	2100      	movs	r1, #0
 800ce9a:	2002      	movs	r0, #2
 800ce9c:	f011 f816 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800cea0:	2300      	movs	r3, #0
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	4b34      	ldr	r3, [pc, #208]	; (800cf78 <LoRaWAN_Init+0x194>)
 800cea6:	2200      	movs	r2, #0
 800cea8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800ceac:	4833      	ldr	r0, [pc, #204]	; (800cf7c <LoRaWAN_Init+0x198>)
 800ceae:	f010 fd5f 	bl	801d970 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	9300      	str	r3, [sp, #0]
 800ceb6:	4b32      	ldr	r3, [pc, #200]	; (800cf80 <LoRaWAN_Init+0x19c>)
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800cebe:	4831      	ldr	r0, [pc, #196]	; (800cf84 <LoRaWAN_Init+0x1a0>)
 800cec0:	f010 fd56 	bl	801d970 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800cec4:	2300      	movs	r3, #0
 800cec6:	9300      	str	r3, [sp, #0]
 800cec8:	4b2f      	ldr	r3, [pc, #188]	; (800cf88 <LoRaWAN_Init+0x1a4>)
 800ceca:	2201      	movs	r2, #1
 800cecc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800ced0:	482e      	ldr	r0, [pc, #184]	; (800cf8c <LoRaWAN_Init+0x1a8>)
 800ced2:	f010 fd4d 	bl	801d970 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800ced6:	2300      	movs	r3, #0
 800ced8:	9300      	str	r3, [sp, #0]
 800ceda:	4b2d      	ldr	r3, [pc, #180]	; (800cf90 <LoRaWAN_Init+0x1ac>)
 800cedc:	2200      	movs	r2, #0
 800cede:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800cee2:	482c      	ldr	r0, [pc, #176]	; (800cf94 <LoRaWAN_Init+0x1b0>)
 800cee4:	f010 fd44 	bl	801d970 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800cee8:	4a2b      	ldr	r2, [pc, #172]	; (800cf98 <LoRaWAN_Init+0x1b4>)
 800ceea:	2100      	movs	r1, #0
 800ceec:	2001      	movs	r0, #1
 800ceee:	f010 fc9b 	bl	801d828 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800cef2:	4a2a      	ldr	r2, [pc, #168]	; (800cf9c <LoRaWAN_Init+0x1b8>)
 800cef4:	2100      	movs	r1, #0
 800cef6:	2002      	movs	r0, #2
 800cef8:	f010 fc96 	bl	801d828 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800cefc:	4a28      	ldr	r2, [pc, #160]	; (800cfa0 <LoRaWAN_Init+0x1bc>)
 800cefe:	2100      	movs	r1, #0
 800cf00:	2004      	movs	r0, #4
 800cf02:	f010 fc91 	bl	801d828 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800cf06:	4a27      	ldr	r2, [pc, #156]	; (800cfa4 <LoRaWAN_Init+0x1c0>)
 800cf08:	2100      	movs	r1, #0
 800cf0a:	2008      	movs	r0, #8
 800cf0c:	f010 fc8c 	bl	801d828 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800cf10:	f000 fcc2 	bl	800d898 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800cf14:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 800cf18:	4823      	ldr	r0, [pc, #140]	; (800cfa8 <LoRaWAN_Init+0x1c4>)
 800cf1a:	f002 f98d 	bl	800f238 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800cf1e:	4823      	ldr	r0, [pc, #140]	; (800cfac <LoRaWAN_Init+0x1c8>)
 800cf20:	f002 f9d6 	bl	800f2d0 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800cf24:	4819      	ldr	r0, [pc, #100]	; (800cf8c <LoRaWAN_Init+0x1a8>)
 800cf26:	f010 fd59 	bl	801d9dc <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800cf2a:	4b21      	ldr	r3, [pc, #132]	; (800cfb0 <LoRaWAN_Init+0x1cc>)
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	4a21      	ldr	r2, [pc, #132]	; (800cfb4 <LoRaWAN_Init+0x1d0>)
 800cf30:	7812      	ldrb	r2, [r2, #0]
 800cf32:	4611      	mov	r1, r2
 800cf34:	4618      	mov	r0, r3
 800cf36:	f002 fb1d 	bl	800f574 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800cf3a:	4b1f      	ldr	r3, [pc, #124]	; (800cfb8 <LoRaWAN_Init+0x1d4>)
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d10b      	bne.n	800cf5a <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800cf42:	4b1e      	ldr	r3, [pc, #120]	; (800cfbc <LoRaWAN_Init+0x1d8>)
 800cf44:	6819      	ldr	r1, [r3, #0]
 800cf46:	2300      	movs	r3, #0
 800cf48:	9300      	str	r3, [sp, #0]
 800cf4a:	4b1d      	ldr	r3, [pc, #116]	; (800cfc0 <LoRaWAN_Init+0x1dc>)
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	481d      	ldr	r0, [pc, #116]	; (800cfc4 <LoRaWAN_Init+0x1e0>)
 800cf50:	f010 fd0e 	bl	801d970 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800cf54:	481b      	ldr	r0, [pc, #108]	; (800cfc4 <LoRaWAN_Init+0x1e0>)
 800cf56:	f010 fd41 	bl	801d9dc <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800cf5a:	bf00      	nop
 800cf5c:	3708      	adds	r7, #8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	0801e650 	.word	0x0801e650
 800cf68:	0801e674 	.word	0x0801e674
 800cf6c:	0801e694 	.word	0x0801e694
 800cf70:	0801e6b4 	.word	0x0801e6b4
 800cf74:	0801e6d8 	.word	0x0801e6d8
 800cf78:	0800d395 	.word	0x0800d395
 800cf7c:	2000077c 	.word	0x2000077c
 800cf80:	0800d3a7 	.word	0x0800d3a7
 800cf84:	20000794 	.word	0x20000794
 800cf88:	0800d3b9 	.word	0x0800d3b9
 800cf8c:	200007ac 	.word	0x200007ac
 800cf90:	0800d761 	.word	0x0800d761
 800cf94:	20000670 	.word	0x20000670
 800cf98:	0800f551 	.word	0x0800f551
 800cf9c:	0800d111 	.word	0x0800d111
 800cfa0:	0800d785 	.word	0x0800d785
 800cfa4:	0800d6e1 	.word	0x0800d6e1
 800cfa8:	20000034 	.word	0x20000034
 800cfac:	20000080 	.word	0x20000080
 800cfb0:	20000030 	.word	0x20000030
 800cfb4:	20000031 	.word	0x20000031
 800cfb8:	20000654 	.word	0x20000654
 800cfbc:	20000094 	.word	0x20000094
 800cfc0:	0800d371 	.word	0x0800d371
 800cfc4:	20000658 	.word	0x20000658

0800cfc8 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800cfc8:	b5b0      	push	{r4, r5, r7, lr}
 800cfca:	b08a      	sub	sp, #40	; 0x28
 800cfcc:	af06      	add	r7, sp, #24
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
 uint8_t RxPort = 0;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f000 8086 	beq.w	800d0ea <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800cfde:	4845      	ldr	r0, [pc, #276]	; (800d0f4 <OnRxData+0x12c>)
 800cfe0:	f010 fcfc 	bl	801d9dc <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d05a      	beq.n	800d0a2 <OnRxData+0xda>
    {
      if (appData != NULL)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d057      	beq.n	800d0a2 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d050      	beq.n	800d0a2 <OnRxData+0xda>
        {
    switch (appData->Port)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	2b02      	cmp	r3, #2
 800d006:	d01f      	beq.n	800d048 <OnRxData+0x80>
 800d008:	2b03      	cmp	r3, #3
 800d00a:	d145      	bne.n	800d098 <OnRxData+0xd0>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	785b      	ldrb	r3, [r3, #1]
 800d010:	2b01      	cmp	r3, #1
 800d012:	d143      	bne.n	800d09c <OnRxData+0xd4>
        {
          switch (appData->Buffer[0])
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	2b02      	cmp	r3, #2
 800d01c:	d00e      	beq.n	800d03c <OnRxData+0x74>
 800d01e:	2b02      	cmp	r3, #2
 800d020:	dc10      	bgt.n	800d044 <OnRxData+0x7c>
 800d022:	2b00      	cmp	r3, #0
 800d024:	d002      	beq.n	800d02c <OnRxData+0x64>
 800d026:	2b01      	cmp	r3, #1
 800d028:	d004      	beq.n	800d034 <OnRxData+0x6c>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800d02a:	e00b      	b.n	800d044 <OnRxData+0x7c>
              LmHandlerRequestClass(CLASS_A);
 800d02c:	2000      	movs	r0, #0
 800d02e:	f002 fc3d 	bl	800f8ac <LmHandlerRequestClass>
              break;
 800d032:	e008      	b.n	800d046 <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_B);
 800d034:	2001      	movs	r0, #1
 800d036:	f002 fc39 	bl	800f8ac <LmHandlerRequestClass>
              break;
 800d03a:	e004      	b.n	800d046 <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_C);
 800d03c:	2002      	movs	r0, #2
 800d03e:	f002 fc35 	bl	800f8ac <LmHandlerRequestClass>
              break;
 800d042:	e000      	b.n	800d046 <OnRxData+0x7e>
              break;
 800d044:	bf00      	nop
          }
        }
        break;
 800d046:	e029      	b.n	800d09c <OnRxData+0xd4>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	785b      	ldrb	r3, [r3, #1]
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	d127      	bne.n	800d0a0 <OnRxData+0xd8>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	f003 0301 	and.w	r3, r3, #1
 800d05a:	b2da      	uxtb	r2, r3
 800d05c:	4b26      	ldr	r3, [pc, #152]	; (800d0f8 <OnRxData+0x130>)
 800d05e:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800d060:	4b25      	ldr	r3, [pc, #148]	; (800d0f8 <OnRxData+0x130>)
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d10b      	bne.n	800d080 <OnRxData+0xb8>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800d068:	4b24      	ldr	r3, [pc, #144]	; (800d0fc <OnRxData+0x134>)
 800d06a:	2200      	movs	r2, #0
 800d06c:	2100      	movs	r1, #0
 800d06e:	2003      	movs	r0, #3
 800d070:	f010 ff2c 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800d074:	2201      	movs	r2, #1
 800d076:	2120      	movs	r1, #32
 800d078:	4821      	ldr	r0, [pc, #132]	; (800d100 <OnRxData+0x138>)
 800d07a:	f7f8 ffed 	bl	8006058 <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800d07e:	e00f      	b.n	800d0a0 <OnRxData+0xd8>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800d080:	4b20      	ldr	r3, [pc, #128]	; (800d104 <OnRxData+0x13c>)
 800d082:	2200      	movs	r2, #0
 800d084:	2100      	movs	r1, #0
 800d086:	2003      	movs	r0, #3
 800d088:	f010 ff20 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800d08c:	2200      	movs	r2, #0
 800d08e:	2120      	movs	r1, #32
 800d090:	481b      	ldr	r0, [pc, #108]	; (800d100 <OnRxData+0x138>)
 800d092:	f7f8 ffe1 	bl	8006058 <HAL_GPIO_WritePin>
        break;
 800d096:	e003      	b.n	800d0a0 <OnRxData+0xd8>

      default:

        break;
 800d098:	bf00      	nop
 800d09a:	e002      	b.n	800d0a2 <OnRxData+0xda>
        break;
 800d09c:	bf00      	nop
 800d09e:	e000      	b.n	800d0a2 <OnRxData+0xda>
        break;
 800d0a0:	bf00      	nop
    }
  }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	7c1b      	ldrb	r3, [r3, #16]
 800d0a6:	2b05      	cmp	r3, #5
 800d0a8:	d81f      	bhi.n	800d0ea <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	7bfa      	ldrb	r2, [r7, #15]
 800d0b0:	6839      	ldr	r1, [r7, #0]
 800d0b2:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800d0b6:	460c      	mov	r4, r1
 800d0b8:	6839      	ldr	r1, [r7, #0]
 800d0ba:	7c09      	ldrb	r1, [r1, #16]
 800d0bc:	4608      	mov	r0, r1
 800d0be:	4912      	ldr	r1, [pc, #72]	; (800d108 <OnRxData+0x140>)
 800d0c0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d0c4:	6838      	ldr	r0, [r7, #0]
 800d0c6:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800d0ca:	4605      	mov	r5, r0
 800d0cc:	6838      	ldr	r0, [r7, #0]
 800d0ce:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800d0d2:	9005      	str	r0, [sp, #20]
 800d0d4:	9504      	str	r5, [sp, #16]
 800d0d6:	9103      	str	r1, [sp, #12]
 800d0d8:	9402      	str	r4, [sp, #8]
 800d0da:	9201      	str	r2, [sp, #4]
 800d0dc:	9300      	str	r3, [sp, #0]
 800d0de:	4b0b      	ldr	r3, [pc, #44]	; (800d10c <OnRxData+0x144>)
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	2100      	movs	r1, #0
 800d0e4:	2003      	movs	r0, #3
 800d0e6:	f010 fef1 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800d0ea:	bf00      	nop
 800d0ec:	3710      	adds	r7, #16
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bdb0      	pop	{r4, r5, r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	20000794 	.word	0x20000794
 800d0f8:	2000077a 	.word	0x2000077a
 800d0fc:	0801e6fc 	.word	0x0801e6fc
 800d100:	48000400 	.word	0x48000400
 800d104:	0801e708 	.word	0x0801e708
 800d108:	20000018 	.word	0x20000018
 800d10c:	0801e714 	.word	0x0801e714

0800d110 <SendTxData>:

static void SendTxData(void)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b08c      	sub	sp, #48	; 0x30
 800d114:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d116:	23ff      	movs	r3, #255	; 0xff
 800d118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t batteryLevel = GetBatteryLevel();
 800d11c:	f7f5 fb84 	bl	8002828 <GetBatteryLevel>
 800d120:	4603      	mov	r3, r0
 800d122:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800d126:	2300      	movs	r3, #0
 800d128:	627b      	str	r3, [r7, #36]	; 0x24


  uint16_t pressure = 0;
 800d12a:	2300      	movs	r3, #0
 800d12c:	843b      	strh	r3, [r7, #32]

  uint32_t i = 0;
 800d12e:	2300      	movs	r3, #0
 800d130:	61fb      	str	r3, [r7, #28]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800d132:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	4b7d      	ldr	r3, [pc, #500]	; (800d330 <SendTxData+0x220>)
 800d13a:	2201      	movs	r2, #1
 800d13c:	2100      	movs	r1, #0
 800d13e:	2002      	movs	r0, #2
 800d140:	f010 fec4 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	4618      	mov	r0, r3
 800d148:	f7f3 fdfa 	bl	8000d40 <__aeabi_f2iz>
 800d14c:	4603      	mov	r3, r0
 800d14e:	b21b      	sxth	r3, r3
 800d150:	9300      	str	r3, [sp, #0]
 800d152:	4b78      	ldr	r3, [pc, #480]	; (800d334 <SendTxData+0x224>)
 800d154:	2201      	movs	r2, #1
 800d156:	2100      	movs	r1, #0
 800d158:	2002      	movs	r0, #2
 800d15a:	f010 feb7 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800d15e:	4b76      	ldr	r3, [pc, #472]	; (800d338 <SendTxData+0x228>)
 800d160:	2202      	movs	r2, #2
 800d162:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = PM2_5/100;
 800d164:	4b75      	ldr	r3, [pc, #468]	; (800d33c <SendTxData+0x22c>)
 800d166:	881b      	ldrh	r3, [r3, #0]
 800d168:	4a75      	ldr	r2, [pc, #468]	; (800d340 <SendTxData+0x230>)
 800d16a:	fba2 2303 	umull	r2, r3, r2, r3
 800d16e:	095b      	lsrs	r3, r3, #5
 800d170:	b298      	uxth	r0, r3
 800d172:	4b71      	ldr	r3, [pc, #452]	; (800d338 <SendTxData+0x228>)
 800d174:	685a      	ldr	r2, [r3, #4]
 800d176:	69fb      	ldr	r3, [r7, #28]
 800d178:	1c59      	adds	r1, r3, #1
 800d17a:	61f9      	str	r1, [r7, #28]
 800d17c:	4413      	add	r3, r2
 800d17e:	b2c2      	uxtb	r2, r0
 800d180:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM2_5%100;
 800d182:	4b6e      	ldr	r3, [pc, #440]	; (800d33c <SendTxData+0x22c>)
 800d184:	881b      	ldrh	r3, [r3, #0]
 800d186:	4a6e      	ldr	r2, [pc, #440]	; (800d340 <SendTxData+0x230>)
 800d188:	fba2 1203 	umull	r1, r2, r2, r3
 800d18c:	0952      	lsrs	r2, r2, #5
 800d18e:	2164      	movs	r1, #100	; 0x64
 800d190:	fb01 f202 	mul.w	r2, r1, r2
 800d194:	1a9b      	subs	r3, r3, r2
 800d196:	b298      	uxth	r0, r3
 800d198:	4b67      	ldr	r3, [pc, #412]	; (800d338 <SendTxData+0x228>)
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	69fb      	ldr	r3, [r7, #28]
 800d19e:	1c59      	adds	r1, r3, #1
 800d1a0:	61f9      	str	r1, [r7, #28]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	b2c2      	uxtb	r2, r0
 800d1a6:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temp*100.0));
 800d1a8:	4b66      	ldr	r3, [pc, #408]	; (800d344 <SendTxData+0x234>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7f3 f94f 	bl	8000450 <__aeabi_f2d>
 800d1b2:	f04f 0200 	mov.w	r2, #0
 800d1b6:	4b64      	ldr	r3, [pc, #400]	; (800d348 <SendTxData+0x238>)
 800d1b8:	f7f3 f9a2 	bl	8000500 <__aeabi_dmul>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	460b      	mov	r3, r1
 800d1c0:	4610      	mov	r0, r2
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	f7f3 fc36 	bl	8000a34 <__aeabi_d2iz>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800d1cc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d1d0:	4a5b      	ldr	r2, [pc, #364]	; (800d340 <SendTxData+0x230>)
 800d1d2:	fb82 1203 	smull	r1, r2, r2, r3
 800d1d6:	1152      	asrs	r2, r2, #5
 800d1d8:	17db      	asrs	r3, r3, #31
 800d1da:	1ad3      	subs	r3, r2, r3
 800d1dc:	b218      	sxth	r0, r3
 800d1de:	4b56      	ldr	r3, [pc, #344]	; (800d338 <SendTxData+0x228>)
 800d1e0:	685a      	ldr	r2, [r3, #4]
 800d1e2:	69fb      	ldr	r3, [r7, #28]
 800d1e4:	1c59      	adds	r1, r3, #1
 800d1e6:	61f9      	str	r1, [r7, #28]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	b2c2      	uxtb	r2, r0
 800d1ec:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d1ee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d1f2:	4a53      	ldr	r2, [pc, #332]	; (800d340 <SendTxData+0x230>)
 800d1f4:	fb82 1203 	smull	r1, r2, r2, r3
 800d1f8:	1151      	asrs	r1, r2, #5
 800d1fa:	17da      	asrs	r2, r3, #31
 800d1fc:	1a8a      	subs	r2, r1, r2
 800d1fe:	2164      	movs	r1, #100	; 0x64
 800d200:	fb01 f202 	mul.w	r2, r1, r2
 800d204:	1a9b      	subs	r3, r3, r2
 800d206:	b218      	sxth	r0, r3
 800d208:	4b4b      	ldr	r3, [pc, #300]	; (800d338 <SendTxData+0x228>)
 800d20a:	685a      	ldr	r2, [r3, #4]
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	1c59      	adds	r1, r3, #1
 800d210:	61f9      	str	r1, [r7, #28]
 800d212:	4413      	add	r3, r2
 800d214:	b2c2      	uxtb	r2, r0
 800d216:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800d218:	4b4c      	ldr	r3, [pc, #304]	; (800d34c <SendTxData+0x23c>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7f3 f917 	bl	8000450 <__aeabi_f2d>
 800d222:	f04f 0200 	mov.w	r2, #0
 800d226:	4b48      	ldr	r3, [pc, #288]	; (800d348 <SendTxData+0x238>)
 800d228:	f7f3 f96a 	bl	8000500 <__aeabi_dmul>
 800d22c:	4602      	mov	r2, r0
 800d22e:	460b      	mov	r3, r1
 800d230:	4610      	mov	r0, r2
 800d232:	4619      	mov	r1, r3
 800d234:	f7f3 fbfe 	bl	8000a34 <__aeabi_d2iz>
 800d238:	4603      	mov	r3, r0
 800d23a:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800d23c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d240:	4a3f      	ldr	r2, [pc, #252]	; (800d340 <SendTxData+0x230>)
 800d242:	fb82 1203 	smull	r1, r2, r2, r3
 800d246:	1152      	asrs	r2, r2, #5
 800d248:	17db      	asrs	r3, r3, #31
 800d24a:	1ad3      	subs	r3, r2, r3
 800d24c:	b218      	sxth	r0, r3
 800d24e:	4b3a      	ldr	r3, [pc, #232]	; (800d338 <SendTxData+0x228>)
 800d250:	685a      	ldr	r2, [r3, #4]
 800d252:	69fb      	ldr	r3, [r7, #28]
 800d254:	1c59      	adds	r1, r3, #1
 800d256:	61f9      	str	r1, [r7, #28]
 800d258:	4413      	add	r3, r2
 800d25a:	b2c2      	uxtb	r2, r0
 800d25c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d25e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d262:	4a37      	ldr	r2, [pc, #220]	; (800d340 <SendTxData+0x230>)
 800d264:	fb82 1203 	smull	r1, r2, r2, r3
 800d268:	1151      	asrs	r1, r2, #5
 800d26a:	17da      	asrs	r2, r3, #31
 800d26c:	1a8a      	subs	r2, r1, r2
 800d26e:	2164      	movs	r1, #100	; 0x64
 800d270:	fb01 f202 	mul.w	r2, r1, r2
 800d274:	1a9b      	subs	r3, r3, r2
 800d276:	b218      	sxth	r0, r3
 800d278:	4b2f      	ldr	r3, [pc, #188]	; (800d338 <SendTxData+0x228>)
 800d27a:	685a      	ldr	r2, [r3, #4]
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	1c59      	adds	r1, r3, #1
 800d280:	61f9      	str	r1, [r7, #28]
 800d282:	4413      	add	r3, r2
 800d284:	b2c2      	uxtb	r2, r0
 800d286:	701a      	strb	r2, [r3, #0]


  AppData.BufferSize = i;
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	b2da      	uxtb	r2, r3
 800d28c:	4b2a      	ldr	r3, [pc, #168]	; (800d338 <SendTxData+0x228>)
 800d28e:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d290:	4b2f      	ldr	r3, [pc, #188]	; (800d350 <SendTxData+0x240>)
 800d292:	7a5b      	ldrb	r3, [r3, #9]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d007      	beq.n	800d2a8 <SendTxData+0x198>
 800d298:	f002 f9ec 	bl	800f674 <LmHandlerJoinStatus>
 800d29c:	4603      	mov	r3, r0
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	d102      	bne.n	800d2a8 <SendTxData+0x198>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800d2a2:	482b      	ldr	r0, [pc, #172]	; (800d350 <SendTxData+0x240>)
 800d2a4:	f010 fc08 	bl	801dab8 <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800d2a8:	4b2a      	ldr	r3, [pc, #168]	; (800d354 <SendTxData+0x244>)
 800d2aa:	78db      	ldrb	r3, [r3, #3]
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	4821      	ldr	r0, [pc, #132]	; (800d338 <SendTxData+0x228>)
 800d2b2:	f002 f9fb 	bl	800f6ac <LmHandlerSend>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (LORAMAC_HANDLER_SUCCESS == status)
 800d2bc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d106      	bne.n	800d2d2 <SendTxData+0x1c2>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800d2c4:	4b24      	ldr	r3, [pc, #144]	; (800d358 <SendTxData+0x248>)
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	2001      	movs	r0, #1
 800d2cc:	f010 fdfe 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
 800d2d0:	e016      	b.n	800d300 <SendTxData+0x1f0>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800d2d2:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d2d6:	f113 0f06 	cmn.w	r3, #6
 800d2da:	d111      	bne.n	800d300 <SendTxData+0x1f0>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800d2dc:	f002 f940 	bl	800f560 <LmHandlerGetDutyCycleWaitTime>
 800d2e0:	6278      	str	r0, [r7, #36]	; 0x24
    if (nextTxIn > 0)
 800d2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d00b      	beq.n	800d300 <SendTxData+0x1f0>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800d2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ea:	4a1c      	ldr	r2, [pc, #112]	; (800d35c <SendTxData+0x24c>)
 800d2ec:	fba2 2303 	umull	r2, r3, r2, r3
 800d2f0:	099b      	lsrs	r3, r3, #6
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	4b1a      	ldr	r3, [pc, #104]	; (800d360 <SendTxData+0x250>)
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	2001      	movs	r0, #1
 800d2fc:	f010 fde6 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
  }
  }

  if (EventType == TX_ON_TIMER)
 800d300:	4b18      	ldr	r3, [pc, #96]	; (800d364 <SendTxData+0x254>)
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d10f      	bne.n	800d328 <SendTxData+0x218>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800d308:	4817      	ldr	r0, [pc, #92]	; (800d368 <SendTxData+0x258>)
 800d30a:	f010 fbd5 	bl	801dab8 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800d30e:	4b17      	ldr	r3, [pc, #92]	; (800d36c <SendTxData+0x25c>)
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d314:	4293      	cmp	r3, r2
 800d316:	bf38      	it	cc
 800d318:	4613      	movcc	r3, r2
 800d31a:	4619      	mov	r1, r3
 800d31c:	4812      	ldr	r0, [pc, #72]	; (800d368 <SendTxData+0x258>)
 800d31e:	f010 fc3b 	bl	801db98 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800d322:	4811      	ldr	r0, [pc, #68]	; (800d368 <SendTxData+0x258>)
 800d324:	f010 fb5a 	bl	801d9dc <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800d328:	bf00      	nop
 800d32a:	3728      	adds	r7, #40	; 0x28
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	0801e75c 	.word	0x0801e75c
 800d334:	0801e768 	.word	0x0801e768
 800d338:	20000098 	.word	0x20000098
 800d33c:	20000264 	.word	0x20000264
 800d340:	51eb851f 	.word	0x51eb851f
 800d344:	20000268 	.word	0x20000268
 800d348:	40590000 	.word	0x40590000
 800d34c:	2000026c 	.word	0x2000026c
 800d350:	200007ac 	.word	0x200007ac
 800d354:	20000080 	.word	0x20000080
 800d358:	0801e774 	.word	0x0801e774
 800d35c:	10624dd3 	.word	0x10624dd3
 800d360:	0801e784 	.word	0x0801e784
 800d364:	20000654 	.word	0x20000654
 800d368:	20000658 	.word	0x20000658
 800d36c:	20000094 	.word	0x20000094

0800d370 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800d378:	2100      	movs	r1, #0
 800d37a:	2002      	movs	r0, #2
 800d37c:	f010 fa76 	bl	801d86c <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800d380:	4803      	ldr	r0, [pc, #12]	; (800d390 <OnTxTimerEvent+0x20>)
 800d382:	f010 fb2b 	bl	801d9dc <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800d386:	bf00      	nop
 800d388:	3708      	adds	r7, #8
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	20000658 	.word	0x20000658

0800d394 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800d394:	b480      	push	{r7}
 800d396:	b083      	sub	sp, #12
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800d39c:	bf00      	nop
 800d39e:	370c      	adds	r7, #12
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bc80      	pop	{r7}
 800d3a4:	4770      	bx	lr

0800d3a6 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800d3a6:	b480      	push	{r7}
 800d3a8:	b083      	sub	sp, #12
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800d3ae:	bf00      	nop
 800d3b0:	370c      	adds	r7, #12
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bc80      	pop	{r7}
 800d3b6:	4770      	bx	lr

0800d3b8 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800d3c0:	bf00      	nop
 800d3c2:	370c      	adds	r7, #12
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bc80      	pop	{r7}
 800d3c8:	4770      	bx	lr
	...

0800d3cc <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b086      	sub	sp, #24
 800d3d0:	af04      	add	r7, sp, #16
 800d3d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d041      	beq.n	800d45e <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d03d      	beq.n	800d45e <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800d3e2:	4821      	ldr	r0, [pc, #132]	; (800d468 <OnTxData+0x9c>)
 800d3e4:	f010 fafa 	bl	801d9dc <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800d3e8:	4b20      	ldr	r3, [pc, #128]	; (800d46c <OnTxData+0xa0>)
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	2100      	movs	r1, #0
 800d3ee:	2002      	movs	r0, #2
 800d3f0:	f010 fd6c 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	68db      	ldr	r3, [r3, #12]
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	7c12      	ldrb	r2, [r2, #16]
 800d3fc:	4611      	mov	r1, r2
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800d404:	4610      	mov	r0, r2
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800d40c:	9203      	str	r2, [sp, #12]
 800d40e:	9002      	str	r0, [sp, #8]
 800d410:	9101      	str	r1, [sp, #4]
 800d412:	9300      	str	r3, [sp, #0]
 800d414:	4b16      	ldr	r3, [pc, #88]	; (800d470 <OnTxData+0xa4>)
 800d416:	2200      	movs	r2, #0
 800d418:	2100      	movs	r1, #0
 800d41a:	2003      	movs	r0, #3
 800d41c:	f010 fd56 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800d420:	4b14      	ldr	r3, [pc, #80]	; (800d474 <OnTxData+0xa8>)
 800d422:	2200      	movs	r2, #0
 800d424:	2100      	movs	r1, #0
 800d426:	2003      	movs	r0, #3
 800d428:	f010 fd50 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	7a1b      	ldrb	r3, [r3, #8]
 800d430:	2b01      	cmp	r3, #1
 800d432:	d10e      	bne.n	800d452 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	7a5b      	ldrb	r3, [r3, #9]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d001      	beq.n	800d440 <OnTxData+0x74>
 800d43c:	4b0e      	ldr	r3, [pc, #56]	; (800d478 <OnTxData+0xac>)
 800d43e:	e000      	b.n	800d442 <OnTxData+0x76>
 800d440:	4b0e      	ldr	r3, [pc, #56]	; (800d47c <OnTxData+0xb0>)
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	4b0e      	ldr	r3, [pc, #56]	; (800d480 <OnTxData+0xb4>)
 800d446:	2200      	movs	r2, #0
 800d448:	2100      	movs	r1, #0
 800d44a:	2003      	movs	r0, #3
 800d44c:	f010 fd3e 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800d450:	e005      	b.n	800d45e <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800d452:	4b0c      	ldr	r3, [pc, #48]	; (800d484 <OnTxData+0xb8>)
 800d454:	2200      	movs	r2, #0
 800d456:	2100      	movs	r1, #0
 800d458:	2003      	movs	r0, #3
 800d45a:	f010 fd37 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
}
 800d45e:	bf00      	nop
 800d460:	3708      	adds	r7, #8
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	2000077c 	.word	0x2000077c
 800d46c:	0801e7a4 	.word	0x0801e7a4
 800d470:	0801e7d8 	.word	0x0801e7d8
 800d474:	0801e80c 	.word	0x0801e80c
 800d478:	0801e81c 	.word	0x0801e81c
 800d47c:	0801e820 	.word	0x0801e820
 800d480:	0801e828 	.word	0x0801e828
 800d484:	0801e83c 	.word	0x0801e83c

0800d488 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d035      	beq.n	800d502 <OnJoinRequest+0x7a>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d11a      	bne.n	800d4d6 <OnJoinRequest+0x4e>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800d4a0:	481a      	ldr	r0, [pc, #104]	; (800d50c <OnJoinRequest+0x84>)
 800d4a2:	f010 fb09 	bl	801dab8 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800d4a6:	4b1a      	ldr	r3, [pc, #104]	; (800d510 <OnJoinRequest+0x88>)
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	2100      	movs	r1, #0
 800d4ac:	2002      	movs	r0, #2
 800d4ae:	f010 fd0d 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	799b      	ldrb	r3, [r3, #6]
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d106      	bne.n	800d4c8 <OnJoinRequest+0x40>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800d4ba:	4b16      	ldr	r3, [pc, #88]	; (800d514 <OnJoinRequest+0x8c>)
 800d4bc:	2200      	movs	r2, #0
 800d4be:	2100      	movs	r1, #0
 800d4c0:	2002      	movs	r0, #2
 800d4c2:	f010 fd03 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800d4c6:	e01c      	b.n	800d502 <OnJoinRequest+0x7a>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800d4c8:	4b13      	ldr	r3, [pc, #76]	; (800d518 <OnJoinRequest+0x90>)
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	2002      	movs	r0, #2
 800d4d0:	f010 fcfc 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
}
 800d4d4:	e015      	b.n	800d502 <OnJoinRequest+0x7a>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800d4d6:	4b11      	ldr	r3, [pc, #68]	; (800d51c <OnJoinRequest+0x94>)
 800d4d8:	2200      	movs	r2, #0
 800d4da:	2100      	movs	r1, #0
 800d4dc:	2002      	movs	r0, #2
 800d4de:	f010 fcf5 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	799b      	ldrb	r3, [r3, #6]
 800d4e6:	2b02      	cmp	r3, #2
 800d4e8:	d10b      	bne.n	800d502 <OnJoinRequest+0x7a>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800d4ea:	4b0d      	ldr	r3, [pc, #52]	; (800d520 <OnJoinRequest+0x98>)
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	2100      	movs	r1, #0
 800d4f0:	2002      	movs	r0, #2
 800d4f2:	f010 fceb 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800d4f6:	4b0b      	ldr	r3, [pc, #44]	; (800d524 <OnJoinRequest+0x9c>)
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	2101      	movs	r1, #1
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f002 f839 	bl	800f574 <LmHandlerJoin>
}
 800d502:	bf00      	nop
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	200007ac 	.word	0x200007ac
 800d510:	0801e84c 	.word	0x0801e84c
 800d514:	0801e864 	.word	0x0801e864
 800d518:	0801e884 	.word	0x0801e884
 800d51c:	0801e8a4 	.word	0x0801e8a4
 800d520:	0801e8c0 	.word	0x0801e8c0
 800d524:	20000030 	.word	0x20000030

0800d528 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800d528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d52a:	b093      	sub	sp, #76	; 0x4c
 800d52c:	af0c      	add	r7, sp, #48	; 0x30
 800d52e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d056      	beq.n	800d5e4 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	785b      	ldrb	r3, [r3, #1]
 800d53a:	2b02      	cmp	r3, #2
 800d53c:	d008      	beq.n	800d550 <OnBeaconStatusChange+0x28>
 800d53e:	2b03      	cmp	r3, #3
 800d540:	d049      	beq.n	800d5d6 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800d542:	4b2a      	ldr	r3, [pc, #168]	; (800d5ec <OnBeaconStatusChange+0xc4>)
 800d544:	2200      	movs	r2, #0
 800d546:	2100      	movs	r1, #0
 800d548:	2002      	movs	r0, #2
 800d54a:	f010 fcbf 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d54e:	e049      	b.n	800d5e4 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	7c1b      	ldrb	r3, [r3, #16]
 800d554:	4618      	mov	r0, r3
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d55c:	461c      	mov	r4, r3
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d564:	461d      	mov	r5, r3
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	697a      	ldr	r2, [r7, #20]
 800d56c:	6852      	ldr	r2, [r2, #4]
 800d56e:	6979      	ldr	r1, [r7, #20]
 800d570:	7d49      	ldrb	r1, [r1, #21]
 800d572:	460e      	mov	r6, r1
 800d574:	6979      	ldr	r1, [r7, #20]
 800d576:	7d89      	ldrb	r1, [r1, #22]
 800d578:	6139      	str	r1, [r7, #16]
 800d57a:	6979      	ldr	r1, [r7, #20]
 800d57c:	7dc9      	ldrb	r1, [r1, #23]
 800d57e:	60f9      	str	r1, [r7, #12]
 800d580:	6979      	ldr	r1, [r7, #20]
 800d582:	7e09      	ldrb	r1, [r1, #24]
 800d584:	60b9      	str	r1, [r7, #8]
 800d586:	6979      	ldr	r1, [r7, #20]
 800d588:	7e49      	ldrb	r1, [r1, #25]
 800d58a:	6079      	str	r1, [r7, #4]
 800d58c:	6979      	ldr	r1, [r7, #20]
 800d58e:	7e89      	ldrb	r1, [r1, #26]
 800d590:	6039      	str	r1, [r7, #0]
 800d592:	6979      	ldr	r1, [r7, #20]
 800d594:	7ec9      	ldrb	r1, [r1, #27]
 800d596:	910b      	str	r1, [sp, #44]	; 0x2c
 800d598:	f8d7 c000 	ldr.w	ip, [r7]
 800d59c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800d5a0:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800d5a4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d5a8:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800d5ac:	f8cd c020 	str.w	ip, [sp, #32]
 800d5b0:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800d5b4:	f8cd c01c 	str.w	ip, [sp, #28]
 800d5b8:	6939      	ldr	r1, [r7, #16]
 800d5ba:	9106      	str	r1, [sp, #24]
 800d5bc:	9605      	str	r6, [sp, #20]
 800d5be:	9204      	str	r2, [sp, #16]
 800d5c0:	9303      	str	r3, [sp, #12]
 800d5c2:	9502      	str	r5, [sp, #8]
 800d5c4:	9401      	str	r4, [sp, #4]
 800d5c6:	9000      	str	r0, [sp, #0]
 800d5c8:	4b09      	ldr	r3, [pc, #36]	; (800d5f0 <OnBeaconStatusChange+0xc8>)
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	2100      	movs	r1, #0
 800d5ce:	2002      	movs	r0, #2
 800d5d0:	f010 fc7c 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800d5d4:	e006      	b.n	800d5e4 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800d5d6:	4b07      	ldr	r3, [pc, #28]	; (800d5f4 <OnBeaconStatusChange+0xcc>)
 800d5d8:	2200      	movs	r2, #0
 800d5da:	2100      	movs	r1, #0
 800d5dc:	2002      	movs	r0, #2
 800d5de:	f010 fc75 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d5e2:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800d5e4:	bf00      	nop
 800d5e6:	371c      	adds	r7, #28
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5ec:	0801e8e4 	.word	0x0801e8e4
 800d5f0:	0801e8fc 	.word	0x0801e8fc
 800d5f4:	0801e970 	.word	0x0801e970

0800d5f8 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af02      	add	r7, sp, #8
 800d5fe:	4603      	mov	r3, r0
 800d600:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800d602:	79fb      	ldrb	r3, [r7, #7]
 800d604:	4a06      	ldr	r2, [pc, #24]	; (800d620 <OnClassChange+0x28>)
 800d606:	5cd3      	ldrb	r3, [r2, r3]
 800d608:	9300      	str	r3, [sp, #0]
 800d60a:	4b06      	ldr	r3, [pc, #24]	; (800d624 <OnClassChange+0x2c>)
 800d60c:	2200      	movs	r2, #0
 800d60e:	2100      	movs	r1, #0
 800d610:	2002      	movs	r0, #2
 800d612:	f010 fc5b 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800d616:	bf00      	nop
 800d618:	3708      	adds	r7, #8
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
 800d61e:	bf00      	nop
 800d620:	0801e9ac 	.word	0x0801e9ac
 800d624:	0801e990 	.word	0x0801e990

0800d628 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800d62c:	2100      	movs	r1, #0
 800d62e:	2001      	movs	r0, #1
 800d630:	f010 f91c 	bl	801d86c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800d634:	bf00      	nop
 800d636:	bd80      	pop	{r7, pc}

0800d638 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800d640:	4a0d      	ldr	r2, [pc, #52]	; (800d678 <OnTxPeriodicityChanged+0x40>)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800d646:	4b0c      	ldr	r3, [pc, #48]	; (800d678 <OnTxPeriodicityChanged+0x40>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d103      	bne.n	800d656 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800d64e:	4b0a      	ldr	r3, [pc, #40]	; (800d678 <OnTxPeriodicityChanged+0x40>)
 800d650:	f242 7210 	movw	r2, #10000	; 0x2710
 800d654:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800d656:	4809      	ldr	r0, [pc, #36]	; (800d67c <OnTxPeriodicityChanged+0x44>)
 800d658:	f010 fa2e 	bl	801dab8 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800d65c:	4b06      	ldr	r3, [pc, #24]	; (800d678 <OnTxPeriodicityChanged+0x40>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4619      	mov	r1, r3
 800d662:	4806      	ldr	r0, [pc, #24]	; (800d67c <OnTxPeriodicityChanged+0x44>)
 800d664:	f010 fa98 	bl	801db98 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800d668:	4804      	ldr	r0, [pc, #16]	; (800d67c <OnTxPeriodicityChanged+0x44>)
 800d66a:	f010 f9b7 	bl	801d9dc <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800d66e:	bf00      	nop
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	20000094 	.word	0x20000094
 800d67c:	20000658 	.word	0x20000658

0800d680 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800d680:	b480      	push	{r7}
 800d682:	b083      	sub	sp, #12
 800d684:	af00      	add	r7, sp, #0
 800d686:	4603      	mov	r3, r0
 800d688:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800d68a:	4a04      	ldr	r2, [pc, #16]	; (800d69c <OnTxFrameCtrlChanged+0x1c>)
 800d68c:	79fb      	ldrb	r3, [r7, #7]
 800d68e:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800d690:	bf00      	nop
 800d692:	370c      	adds	r7, #12
 800d694:	46bd      	mov	sp, r7
 800d696:	bc80      	pop	{r7}
 800d698:	4770      	bx	lr
 800d69a:	bf00      	nop
 800d69c:	20000080 	.word	0x20000080

0800d6a0 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800d6aa:	4a04      	ldr	r2, [pc, #16]	; (800d6bc <OnPingSlotPeriodicityChanged+0x1c>)
 800d6ac:	79fb      	ldrb	r3, [r7, #7]
 800d6ae:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800d6b0:	bf00      	nop
 800d6b2:	370c      	adds	r7, #12
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bc80      	pop	{r7}
 800d6b8:	4770      	bx	lr
 800d6ba:	bf00      	nop
 800d6bc:	20000080 	.word	0x20000080

0800d6c0 <OnSystemReset>:

static void OnSystemReset(void)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d6c4:	f002 fcdb 	bl	801007e <LmHandlerHalt>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d106      	bne.n	800d6dc <OnSystemReset+0x1c>
 800d6ce:	f001 ffd1 	bl	800f674 <LmHandlerJoinStatus>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d101      	bne.n	800d6dc <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800d6d8:	f7ff fb6e 	bl	800cdb8 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800d6dc:	bf00      	nop
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <StopJoin>:

static void StopJoin(void)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800d6e4:	4817      	ldr	r0, [pc, #92]	; (800d744 <StopJoin+0x64>)
 800d6e6:	f010 f9e7 	bl	801dab8 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800d6ea:	f002 fcbb 	bl	8010064 <LmHandlerStop>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d006      	beq.n	800d702 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800d6f4:	4b14      	ldr	r3, [pc, #80]	; (800d748 <StopJoin+0x68>)
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	2100      	movs	r1, #0
 800d6fa:	2002      	movs	r0, #2
 800d6fc:	f010 fbe6 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
 800d700:	e01a      	b.n	800d738 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800d702:	4b12      	ldr	r3, [pc, #72]	; (800d74c <StopJoin+0x6c>)
 800d704:	2200      	movs	r2, #0
 800d706:	2100      	movs	r1, #0
 800d708:	2002      	movs	r0, #2
 800d70a:	f010 fbdf 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800d70e:	4b10      	ldr	r3, [pc, #64]	; (800d750 <StopJoin+0x70>)
 800d710:	2201      	movs	r2, #1
 800d712:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800d714:	4b0f      	ldr	r3, [pc, #60]	; (800d754 <StopJoin+0x74>)
 800d716:	2200      	movs	r2, #0
 800d718:	2100      	movs	r1, #0
 800d71a:	2002      	movs	r0, #2
 800d71c:	f010 fbd6 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800d720:	480d      	ldr	r0, [pc, #52]	; (800d758 <StopJoin+0x78>)
 800d722:	f001 fdd5 	bl	800f2d0 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800d726:	4b0a      	ldr	r3, [pc, #40]	; (800d750 <StopJoin+0x70>)
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	2101      	movs	r1, #1
 800d72c:	4618      	mov	r0, r3
 800d72e:	f001 ff21 	bl	800f574 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800d732:	4804      	ldr	r0, [pc, #16]	; (800d744 <StopJoin+0x64>)
 800d734:	f010 f952 	bl	801d9dc <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800d738:	4808      	ldr	r0, [pc, #32]	; (800d75c <StopJoin+0x7c>)
 800d73a:	f010 f94f 	bl	801d9dc <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800d73e:	bf00      	nop
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	20000658 	.word	0x20000658
 800d748:	0801e9b0 	.word	0x0801e9b0
 800d74c:	0801e9d0 	.word	0x0801e9d0
 800d750:	20000030 	.word	0x20000030
 800d754:	0801e9e4 	.word	0x0801e9e4
 800d758:	20000080 	.word	0x20000080
 800d75c:	20000670 	.word	0x20000670

0800d760 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800d768:	4b05      	ldr	r3, [pc, #20]	; (800d780 <OnStopJoinTimerEvent+0x20>)
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	2b02      	cmp	r3, #2
 800d76e:	d103      	bne.n	800d778 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800d770:	2100      	movs	r1, #0
 800d772:	2008      	movs	r0, #8
 800d774:	f010 f87a 	bl	801d86c <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800d778:	bf00      	nop
 800d77a:	3708      	adds	r7, #8
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	20000030 	.word	0x20000030

0800d784 <StoreContext>:

static void StoreContext(void)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d78a:	23ff      	movs	r3, #255	; 0xff
 800d78c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800d78e:	f002 fc83 	bl	8010098 <LmHandlerNvmDataStore>
 800d792:	4603      	mov	r3, r0
 800d794:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800d796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d79a:	f113 0f08 	cmn.w	r3, #8
 800d79e:	d106      	bne.n	800d7ae <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800d7a0:	4b0a      	ldr	r3, [pc, #40]	; (800d7cc <StoreContext+0x48>)
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	2100      	movs	r1, #0
 800d7a6:	2002      	movs	r0, #2
 800d7a8:	f010 fb90 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800d7ac:	e00a      	b.n	800d7c4 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800d7ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b6:	d105      	bne.n	800d7c4 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800d7b8:	4b05      	ldr	r3, [pc, #20]	; (800d7d0 <StoreContext+0x4c>)
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	2100      	movs	r1, #0
 800d7be:	2002      	movs	r0, #2
 800d7c0:	f010 fb84 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
}
 800d7c4:	bf00      	nop
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	0801ea04 	.word	0x0801ea04
 800d7d0:	0801ea1c 	.word	0x0801ea1c

0800d7d4 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	4603      	mov	r3, r0
 800d7dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800d7de:	79fb      	ldrb	r3, [r7, #7]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d106      	bne.n	800d7f2 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800d7e4:	4b08      	ldr	r3, [pc, #32]	; (800d808 <OnNvmDataChange+0x34>)
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	2100      	movs	r1, #0
 800d7ea:	2002      	movs	r0, #2
 800d7ec:	f010 fb6e 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800d7f0:	e005      	b.n	800d7fe <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800d7f2:	4b06      	ldr	r3, [pc, #24]	; (800d80c <OnNvmDataChange+0x38>)
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	2100      	movs	r1, #0
 800d7f8:	2002      	movs	r0, #2
 800d7fa:	f010 fb67 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
}
 800d7fe:	bf00      	nop
 800d800:	3708      	adds	r7, #8
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	0801ea34 	.word	0x0801ea34
 800d80c:	0801ea48 	.word	0x0801ea48

0800d810 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800d81a:	f7f7 ffd1 	bl	80057c0 <HAL_FLASH_Unlock>
 800d81e:	4603      	mov	r3, r0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d11c      	bne.n	800d85e <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800d824:	4b10      	ldr	r3, [pc, #64]	; (800d868 <OnStoreContextRequest+0x58>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	029a      	lsls	r2, r3, #10
 800d82a:	4b10      	ldr	r3, [pc, #64]	; (800d86c <OnStoreContextRequest+0x5c>)
 800d82c:	4013      	ands	r3, r2
 800d82e:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800d832:	fbb2 f1f3 	udiv	r1, r2, r3
 800d836:	fb01 f303 	mul.w	r3, r1, r3
 800d83a:	1ad3      	subs	r3, r2, r3
 800d83c:	0adb      	lsrs	r3, r3, #11
 800d83e:	2200      	movs	r2, #0
 800d840:	2101      	movs	r1, #1
 800d842:	4618      	mov	r0, r3
 800d844:	f7f4 f8b5 	bl	80019b2 <FLASH_IF_EraseByPages>
 800d848:	4603      	mov	r3, r0
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d105      	bne.n	800d85a <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800d84e:	2300      	movs	r3, #0
 800d850:	683a      	ldr	r2, [r7, #0]
 800d852:	6879      	ldr	r1, [r7, #4]
 800d854:	4806      	ldr	r0, [pc, #24]	; (800d870 <OnStoreContextRequest+0x60>)
 800d856:	f7f3 ffcb 	bl	80017f0 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800d85a:	f7f7 ffd3 	bl	8005804 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800d85e:	bf00      	nop
 800d860:	3708      	adds	r7, #8
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop
 800d868:	1fff75e0 	.word	0x1fff75e0
 800d86c:	03fffc00 	.word	0x03fffc00
 800d870:	0803f000 	.word	0x0803f000

0800d874 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b082      	sub	sp, #8
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	b29b      	uxth	r3, r3
 800d882:	461a      	mov	r2, r3
 800d884:	4903      	ldr	r1, [pc, #12]	; (800d894 <OnRestoreContextRequest+0x20>)
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f00f fad4 	bl	801ce34 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800d88c:	bf00      	nop
 800d88e:	3708      	adds	r7, #8
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	0803f000 	.word	0x0803f000

0800d898 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800d89c:	4b15      	ldr	r3, [pc, #84]	; (800d8f4 <LoraInfo_Init+0x5c>)
 800d89e:	2200      	movs	r2, #0
 800d8a0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800d8a2:	4b14      	ldr	r3, [pc, #80]	; (800d8f4 <LoraInfo_Init+0x5c>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800d8a8:	4b12      	ldr	r3, [pc, #72]	; (800d8f4 <LoraInfo_Init+0x5c>)
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800d8ae:	4b11      	ldr	r3, [pc, #68]	; (800d8f4 <LoraInfo_Init+0x5c>)
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800d8b4:	4b0f      	ldr	r3, [pc, #60]	; (800d8f4 <LoraInfo_Init+0x5c>)
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	f043 0320 	orr.w	r3, r3, #32
 800d8bc:	4a0d      	ldr	r2, [pc, #52]	; (800d8f4 <LoraInfo_Init+0x5c>)
 800d8be:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800d8c0:	4b0c      	ldr	r3, [pc, #48]	; (800d8f4 <LoraInfo_Init+0x5c>)
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d10c      	bne.n	800d8e2 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800d8c8:	4b0b      	ldr	r3, [pc, #44]	; (800d8f8 <LoraInfo_Init+0x60>)
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	2100      	movs	r1, #0
 800d8ce:	2000      	movs	r0, #0
 800d8d0:	f010 fafc 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800d8d4:	bf00      	nop
 800d8d6:	f010 fae7 	bl	801dea8 <UTIL_ADV_TRACE_IsBufferEmpty>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d1fa      	bne.n	800d8d6 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800d8e0:	e7fe      	b.n	800d8e0 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800d8e2:	4b04      	ldr	r3, [pc, #16]	; (800d8f4 <LoraInfo_Init+0x5c>)
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800d8e8:	4b02      	ldr	r3, [pc, #8]	; (800d8f4 <LoraInfo_Init+0x5c>)
 800d8ea:	2203      	movs	r2, #3
 800d8ec:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800d8ee:	bf00      	nop
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	200007c4 	.word	0x200007c4
 800d8f8:	0801ea5c 	.word	0x0801ea5c

0800d8fc <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800d900:	4b02      	ldr	r3, [pc, #8]	; (800d90c <LoraInfo_GetPtr+0x10>)
}
 800d902:	4618      	mov	r0, r3
 800d904:	46bd      	mov	sp, r7
 800d906:	bc80      	pop	{r7}
 800d908:	4770      	bx	lr
 800d90a:	bf00      	nop
 800d90c:	200007c4 	.word	0x200007c4

0800d910 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800d914:	f7f5 ffc9 	bl	80038aa <BSP_RADIO_Init>
 800d918:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800d91e:	b580      	push	{r7, lr}
 800d920:	b082      	sub	sp, #8
 800d922:	af00      	add	r7, sp, #0
 800d924:	4603      	mov	r3, r0
 800d926:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800d928:	79fb      	ldrb	r3, [r7, #7]
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7f5 ffee 	bl	800390c <BSP_RADIO_ConfigRFSwitch>
 800d930:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800d932:	4618      	mov	r0, r3
 800d934:	3708      	adds	r7, #8
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}

0800d93a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800d93a:	b580      	push	{r7, lr}
 800d93c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800d93e:	f7f6 f833 	bl	80039a8 <BSP_RADIO_GetTxConfig>
 800d942:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800d944:	4618      	mov	r0, r3
 800d946:	bd80      	pop	{r7, pc}

0800d948 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800d94c:	f7f6 f833 	bl	80039b6 <BSP_RADIO_IsTCXO>
 800d950:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d952:	4618      	mov	r0, r3
 800d954:	bd80      	pop	{r7, pc}

0800d956 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800d95a:	f7f6 f833 	bl	80039c4 <BSP_RADIO_IsDCDC>
 800d95e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d960:	4618      	mov	r0, r3
 800d962:	bd80      	pop	{r7, pc}

0800d964 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	4603      	mov	r3, r0
 800d96c:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800d96e:	79fb      	ldrb	r3, [r7, #7]
 800d970:	4618      	mov	r0, r3
 800d972:	f7f6 f82e 	bl	80039d2 <BSP_RADIO_GetRFOMaxPowerConfig>
 800d976:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3708      	adds	r7, #8
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	33f1      	adds	r3, #241	; 0xf1
 800d98c:	2210      	movs	r2, #16
 800d98e:	2100      	movs	r1, #0
 800d990:	4618      	mov	r0, r3
 800d992:	f00b ff83 	bl	801989c <memset1>
    ctx->M_n = 0;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	22f0      	movs	r2, #240	; 0xf0
 800d9a2:	2100      	movs	r1, #0
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f00b ff79 	bl	801989c <memset1>
}
 800d9aa:	bf00      	nop
 800d9ac:	3708      	adds	r7, #8
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}

0800d9b2 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800d9b2:	b580      	push	{r7, lr}
 800d9b4:	b082      	sub	sp, #8
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	6078      	str	r0, [r7, #4]
 800d9ba:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	461a      	mov	r2, r3
 800d9c0:	2110      	movs	r1, #16
 800d9c2:	6838      	ldr	r0, [r7, #0]
 800d9c4:	f000 fe5c 	bl	800e680 <lorawan_aes_set_key>
}
 800d9c8:	bf00      	nop
 800d9ca:	3708      	adds	r7, #8
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b08c      	sub	sp, #48	; 0x30
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	60b9      	str	r1, [r7, #8]
 800d9da:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	f000 80a1 	beq.w	800db2a <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d9ee:	f1c3 0310 	rsb	r3, r3, #16
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	bf28      	it	cs
 800d9f8:	4613      	movcs	r3, r2
 800d9fa:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f203 1201 	addw	r2, r3, #257	; 0x101
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800da08:	4413      	add	r3, r2
 800da0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da0c:	b292      	uxth	r2, r2
 800da0e:	68b9      	ldr	r1, [r7, #8]
 800da10:	4618      	mov	r0, r3
 800da12:	f00b ff08 	bl	8019826 <memcpy1>
        ctx->M_n += mlen;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800da1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1e:	441a      	add	r2, r3
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800da2c:	2b0f      	cmp	r3, #15
 800da2e:	f240 808d 	bls.w	800db4c <AES_CMAC_Update+0x17c>
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da36:	429a      	cmp	r2, r3
 800da38:	f000 8088 	beq.w	800db4c <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800da3c:	2300      	movs	r3, #0
 800da3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da40:	e015      	b.n	800da6e <AES_CMAC_Update+0x9e>
 800da42:	68fa      	ldr	r2, [r7, #12]
 800da44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da46:	4413      	add	r3, r2
 800da48:	33f1      	adds	r3, #241	; 0xf1
 800da4a:	781a      	ldrb	r2, [r3, #0]
 800da4c:	68f9      	ldr	r1, [r7, #12]
 800da4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da50:	440b      	add	r3, r1
 800da52:	f203 1301 	addw	r3, r3, #257	; 0x101
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	4053      	eors	r3, r2
 800da5a:	b2d9      	uxtb	r1, r3
 800da5c:	68fa      	ldr	r2, [r7, #12]
 800da5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da60:	4413      	add	r3, r2
 800da62:	33f1      	adds	r3, #241	; 0xf1
 800da64:	460a      	mov	r2, r1
 800da66:	701a      	strb	r2, [r3, #0]
 800da68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6a:	3301      	adds	r3, #1
 800da6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da70:	2b0f      	cmp	r3, #15
 800da72:	dde6      	ble.n	800da42 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800da7a:	f107 0314 	add.w	r3, r7, #20
 800da7e:	2210      	movs	r2, #16
 800da80:	4618      	mov	r0, r3
 800da82:	f00b fed0 	bl	8019826 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800da86:	68fa      	ldr	r2, [r7, #12]
 800da88:	f107 0114 	add.w	r1, r7, #20
 800da8c:	f107 0314 	add.w	r3, r7, #20
 800da90:	4618      	mov	r0, r3
 800da92:	f000 fed3 	bl	800e83c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	33f1      	adds	r3, #241	; 0xf1
 800da9a:	f107 0114 	add.w	r1, r7, #20
 800da9e:	2210      	movs	r2, #16
 800daa0:	4618      	mov	r0, r3
 800daa2:	f00b fec0 	bl	8019826 <memcpy1>

        data += mlen;
 800daa6:	68ba      	ldr	r2, [r7, #8]
 800daa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daaa:	4413      	add	r3, r2
 800daac:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab2:	1ad3      	subs	r3, r2, r3
 800dab4:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800dab6:	e038      	b.n	800db2a <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800dab8:	2300      	movs	r3, #0
 800daba:	62bb      	str	r3, [r7, #40]	; 0x28
 800dabc:	e013      	b.n	800dae6 <AES_CMAC_Update+0x116>
 800dabe:	68fa      	ldr	r2, [r7, #12]
 800dac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac2:	4413      	add	r3, r2
 800dac4:	33f1      	adds	r3, #241	; 0xf1
 800dac6:	781a      	ldrb	r2, [r3, #0]
 800dac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daca:	68b9      	ldr	r1, [r7, #8]
 800dacc:	440b      	add	r3, r1
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	4053      	eors	r3, r2
 800dad2:	b2d9      	uxtb	r1, r3
 800dad4:	68fa      	ldr	r2, [r7, #12]
 800dad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad8:	4413      	add	r3, r2
 800dada:	33f1      	adds	r3, #241	; 0xf1
 800dadc:	460a      	mov	r2, r1
 800dade:	701a      	strb	r2, [r3, #0]
 800dae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae2:	3301      	adds	r3, #1
 800dae4:	62bb      	str	r3, [r7, #40]	; 0x28
 800dae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae8:	2b0f      	cmp	r3, #15
 800daea:	dde8      	ble.n	800dabe <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800daf2:	f107 0314 	add.w	r3, r7, #20
 800daf6:	2210      	movs	r2, #16
 800daf8:	4618      	mov	r0, r3
 800dafa:	f00b fe94 	bl	8019826 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800dafe:	68fa      	ldr	r2, [r7, #12]
 800db00:	f107 0114 	add.w	r1, r7, #20
 800db04:	f107 0314 	add.w	r3, r7, #20
 800db08:	4618      	mov	r0, r3
 800db0a:	f000 fe97 	bl	800e83c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	33f1      	adds	r3, #241	; 0xf1
 800db12:	f107 0114 	add.w	r1, r7, #20
 800db16:	2210      	movs	r2, #16
 800db18:	4618      	mov	r0, r3
 800db1a:	f00b fe84 	bl	8019826 <memcpy1>

        data += 16;
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	3310      	adds	r3, #16
 800db22:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	3b10      	subs	r3, #16
 800db28:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2b10      	cmp	r3, #16
 800db2e:	d8c3      	bhi.n	800dab8 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	f203 1301 	addw	r3, r3, #257	; 0x101
 800db36:	687a      	ldr	r2, [r7, #4]
 800db38:	b292      	uxth	r2, r2
 800db3a:	68b9      	ldr	r1, [r7, #8]
 800db3c:	4618      	mov	r0, r3
 800db3e:	f00b fe72 	bl	8019826 <memcpy1>
    ctx->M_n = len;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	687a      	ldr	r2, [r7, #4]
 800db46:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800db4a:	e000      	b.n	800db4e <AES_CMAC_Update+0x17e>
            return;
 800db4c:	bf00      	nop
}
 800db4e:	3730      	adds	r7, #48	; 0x30
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b092      	sub	sp, #72	; 0x48
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800db5e:	f107 031c 	add.w	r3, r7, #28
 800db62:	2210      	movs	r2, #16
 800db64:	2100      	movs	r1, #0
 800db66:	4618      	mov	r0, r3
 800db68:	f00b fe98 	bl	801989c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800db6c:	683a      	ldr	r2, [r7, #0]
 800db6e:	f107 011c 	add.w	r1, r7, #28
 800db72:	f107 031c 	add.w	r3, r7, #28
 800db76:	4618      	mov	r0, r3
 800db78:	f000 fe60 	bl	800e83c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800db7c:	7f3b      	ldrb	r3, [r7, #28]
 800db7e:	b25b      	sxtb	r3, r3
 800db80:	2b00      	cmp	r3, #0
 800db82:	da30      	bge.n	800dbe6 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800db84:	2300      	movs	r3, #0
 800db86:	647b      	str	r3, [r7, #68]	; 0x44
 800db88:	e01b      	b.n	800dbc2 <AES_CMAC_Final+0x6e>
 800db8a:	f107 021c 	add.w	r2, r7, #28
 800db8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db90:	4413      	add	r3, r2
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	005b      	lsls	r3, r3, #1
 800db96:	b25a      	sxtb	r2, r3
 800db98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db9a:	3301      	adds	r3, #1
 800db9c:	3348      	adds	r3, #72	; 0x48
 800db9e:	443b      	add	r3, r7
 800dba0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dba4:	09db      	lsrs	r3, r3, #7
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	b25b      	sxtb	r3, r3
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	b25b      	sxtb	r3, r3
 800dbae:	b2d9      	uxtb	r1, r3
 800dbb0:	f107 021c 	add.w	r2, r7, #28
 800dbb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbb6:	4413      	add	r3, r2
 800dbb8:	460a      	mov	r2, r1
 800dbba:	701a      	strb	r2, [r3, #0]
 800dbbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	647b      	str	r3, [r7, #68]	; 0x44
 800dbc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbc4:	2b0e      	cmp	r3, #14
 800dbc6:	dde0      	ble.n	800db8a <AES_CMAC_Final+0x36>
 800dbc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dbcc:	005b      	lsls	r3, r3, #1
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800dbd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dbd8:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800dbdc:	43db      	mvns	r3, r3
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dbe4:	e027      	b.n	800dc36 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	643b      	str	r3, [r7, #64]	; 0x40
 800dbea:	e01b      	b.n	800dc24 <AES_CMAC_Final+0xd0>
 800dbec:	f107 021c 	add.w	r2, r7, #28
 800dbf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbf2:	4413      	add	r3, r2
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	005b      	lsls	r3, r3, #1
 800dbf8:	b25a      	sxtb	r2, r3
 800dbfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	3348      	adds	r3, #72	; 0x48
 800dc00:	443b      	add	r3, r7
 800dc02:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dc06:	09db      	lsrs	r3, r3, #7
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	b25b      	sxtb	r3, r3
 800dc0c:	4313      	orrs	r3, r2
 800dc0e:	b25b      	sxtb	r3, r3
 800dc10:	b2d9      	uxtb	r1, r3
 800dc12:	f107 021c 	add.w	r2, r7, #28
 800dc16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc18:	4413      	add	r3, r2
 800dc1a:	460a      	mov	r2, r1
 800dc1c:	701a      	strb	r2, [r3, #0]
 800dc1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc20:	3301      	adds	r3, #1
 800dc22:	643b      	str	r3, [r7, #64]	; 0x40
 800dc24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc26:	2b0e      	cmp	r3, #14
 800dc28:	dde0      	ble.n	800dbec <AES_CMAC_Final+0x98>
 800dc2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc2e:	005b      	lsls	r3, r3, #1
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dc3c:	2b10      	cmp	r3, #16
 800dc3e:	d11d      	bne.n	800dc7c <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800dc40:	2300      	movs	r3, #0
 800dc42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc44:	e016      	b.n	800dc74 <AES_CMAC_Final+0x120>
 800dc46:	683a      	ldr	r2, [r7, #0]
 800dc48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc4a:	4413      	add	r3, r2
 800dc4c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dc50:	781a      	ldrb	r2, [r3, #0]
 800dc52:	f107 011c 	add.w	r1, r7, #28
 800dc56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc58:	440b      	add	r3, r1
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	4053      	eors	r3, r2
 800dc5e:	b2d9      	uxtb	r1, r3
 800dc60:	683a      	ldr	r2, [r7, #0]
 800dc62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc64:	4413      	add	r3, r2
 800dc66:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dc6a:	460a      	mov	r2, r1
 800dc6c:	701a      	strb	r2, [r3, #0]
 800dc6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc70:	3301      	adds	r3, #1
 800dc72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc76:	2b0f      	cmp	r3, #15
 800dc78:	dde5      	ble.n	800dc46 <AES_CMAC_Final+0xf2>
 800dc7a:	e096      	b.n	800ddaa <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800dc7c:	7f3b      	ldrb	r3, [r7, #28]
 800dc7e:	b25b      	sxtb	r3, r3
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	da30      	bge.n	800dce6 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800dc84:	2300      	movs	r3, #0
 800dc86:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc88:	e01b      	b.n	800dcc2 <AES_CMAC_Final+0x16e>
 800dc8a:	f107 021c 	add.w	r2, r7, #28
 800dc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc90:	4413      	add	r3, r2
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	005b      	lsls	r3, r3, #1
 800dc96:	b25a      	sxtb	r2, r3
 800dc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	3348      	adds	r3, #72	; 0x48
 800dc9e:	443b      	add	r3, r7
 800dca0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dca4:	09db      	lsrs	r3, r3, #7
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	b25b      	sxtb	r3, r3
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	b25b      	sxtb	r3, r3
 800dcae:	b2d9      	uxtb	r1, r3
 800dcb0:	f107 021c 	add.w	r2, r7, #28
 800dcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb6:	4413      	add	r3, r2
 800dcb8:	460a      	mov	r2, r1
 800dcba:	701a      	strb	r2, [r3, #0]
 800dcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	63bb      	str	r3, [r7, #56]	; 0x38
 800dcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc4:	2b0e      	cmp	r3, #14
 800dcc6:	dde0      	ble.n	800dc8a <AES_CMAC_Final+0x136>
 800dcc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dccc:	005b      	lsls	r3, r3, #1
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800dcd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dcd8:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800dcdc:	43db      	mvns	r3, r3
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dce4:	e027      	b.n	800dd36 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800dce6:	2300      	movs	r3, #0
 800dce8:	637b      	str	r3, [r7, #52]	; 0x34
 800dcea:	e01b      	b.n	800dd24 <AES_CMAC_Final+0x1d0>
 800dcec:	f107 021c 	add.w	r2, r7, #28
 800dcf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcf2:	4413      	add	r3, r2
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	005b      	lsls	r3, r3, #1
 800dcf8:	b25a      	sxtb	r2, r3
 800dcfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	3348      	adds	r3, #72	; 0x48
 800dd00:	443b      	add	r3, r7
 800dd02:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dd06:	09db      	lsrs	r3, r3, #7
 800dd08:	b2db      	uxtb	r3, r3
 800dd0a:	b25b      	sxtb	r3, r3
 800dd0c:	4313      	orrs	r3, r2
 800dd0e:	b25b      	sxtb	r3, r3
 800dd10:	b2d9      	uxtb	r1, r3
 800dd12:	f107 021c 	add.w	r2, r7, #28
 800dd16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd18:	4413      	add	r3, r2
 800dd1a:	460a      	mov	r2, r1
 800dd1c:	701a      	strb	r2, [r3, #0]
 800dd1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd20:	3301      	adds	r3, #1
 800dd22:	637b      	str	r3, [r7, #52]	; 0x34
 800dd24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd26:	2b0e      	cmp	r3, #14
 800dd28:	dde0      	ble.n	800dcec <AES_CMAC_Final+0x198>
 800dd2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd2e:	005b      	lsls	r3, r3, #1
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dd3c:	683a      	ldr	r2, [r7, #0]
 800dd3e:	4413      	add	r3, r2
 800dd40:	2280      	movs	r2, #128	; 0x80
 800dd42:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800dd46:	e007      	b.n	800dd58 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dd4e:	683a      	ldr	r2, [r7, #0]
 800dd50:	4413      	add	r3, r2
 800dd52:	2200      	movs	r2, #0
 800dd54:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dd5e:	1c5a      	adds	r2, r3, #1
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dd6c:	2b0f      	cmp	r3, #15
 800dd6e:	d9eb      	bls.n	800dd48 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800dd70:	2300      	movs	r3, #0
 800dd72:	633b      	str	r3, [r7, #48]	; 0x30
 800dd74:	e016      	b.n	800dda4 <AES_CMAC_Final+0x250>
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7a:	4413      	add	r3, r2
 800dd7c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dd80:	781a      	ldrb	r2, [r3, #0]
 800dd82:	f107 011c 	add.w	r1, r7, #28
 800dd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd88:	440b      	add	r3, r1
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	4053      	eors	r3, r2
 800dd8e:	b2d9      	uxtb	r1, r3
 800dd90:	683a      	ldr	r2, [r7, #0]
 800dd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd94:	4413      	add	r3, r2
 800dd96:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dd9a:	460a      	mov	r2, r1
 800dd9c:	701a      	strb	r2, [r3, #0]
 800dd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda0:	3301      	adds	r3, #1
 800dda2:	633b      	str	r3, [r7, #48]	; 0x30
 800dda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda6:	2b0f      	cmp	r3, #15
 800dda8:	dde5      	ble.n	800dd76 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800ddaa:	2300      	movs	r3, #0
 800ddac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddae:	e015      	b.n	800dddc <AES_CMAC_Final+0x288>
 800ddb0:	683a      	ldr	r2, [r7, #0]
 800ddb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb4:	4413      	add	r3, r2
 800ddb6:	33f1      	adds	r3, #241	; 0xf1
 800ddb8:	781a      	ldrb	r2, [r3, #0]
 800ddba:	6839      	ldr	r1, [r7, #0]
 800ddbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddbe:	440b      	add	r3, r1
 800ddc0:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	4053      	eors	r3, r2
 800ddc8:	b2d9      	uxtb	r1, r3
 800ddca:	683a      	ldr	r2, [r7, #0]
 800ddcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddce:	4413      	add	r3, r2
 800ddd0:	33f1      	adds	r3, #241	; 0xf1
 800ddd2:	460a      	mov	r2, r1
 800ddd4:	701a      	strb	r2, [r3, #0]
 800ddd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd8:	3301      	adds	r3, #1
 800ddda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddde:	2b0f      	cmp	r3, #15
 800dde0:	dde6      	ble.n	800ddb0 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800dde8:	f107 030c 	add.w	r3, r7, #12
 800ddec:	2210      	movs	r2, #16
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f00b fd19 	bl	8019826 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800ddf4:	683a      	ldr	r2, [r7, #0]
 800ddf6:	f107 030c 	add.w	r3, r7, #12
 800ddfa:	6879      	ldr	r1, [r7, #4]
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f000 fd1d 	bl	800e83c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800de02:	f107 031c 	add.w	r3, r7, #28
 800de06:	2210      	movs	r2, #16
 800de08:	2100      	movs	r1, #0
 800de0a:	4618      	mov	r0, r3
 800de0c:	f00b fd46 	bl	801989c <memset1>
}
 800de10:	bf00      	nop
 800de12:	3748      	adds	r7, #72	; 0x48
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800de18:	b480      	push	{r7}
 800de1a:	b083      	sub	sp, #12
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	781a      	ldrb	r2, [r3, #0]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	3301      	adds	r3, #1
 800de2e:	683a      	ldr	r2, [r7, #0]
 800de30:	7852      	ldrb	r2, [r2, #1]
 800de32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	3302      	adds	r3, #2
 800de38:	683a      	ldr	r2, [r7, #0]
 800de3a:	7892      	ldrb	r2, [r2, #2]
 800de3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	3303      	adds	r3, #3
 800de42:	683a      	ldr	r2, [r7, #0]
 800de44:	78d2      	ldrb	r2, [r2, #3]
 800de46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	3304      	adds	r3, #4
 800de4c:	683a      	ldr	r2, [r7, #0]
 800de4e:	7912      	ldrb	r2, [r2, #4]
 800de50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	3305      	adds	r3, #5
 800de56:	683a      	ldr	r2, [r7, #0]
 800de58:	7952      	ldrb	r2, [r2, #5]
 800de5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	3306      	adds	r3, #6
 800de60:	683a      	ldr	r2, [r7, #0]
 800de62:	7992      	ldrb	r2, [r2, #6]
 800de64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	3307      	adds	r3, #7
 800de6a:	683a      	ldr	r2, [r7, #0]
 800de6c:	79d2      	ldrb	r2, [r2, #7]
 800de6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	3308      	adds	r3, #8
 800de74:	683a      	ldr	r2, [r7, #0]
 800de76:	7a12      	ldrb	r2, [r2, #8]
 800de78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	3309      	adds	r3, #9
 800de7e:	683a      	ldr	r2, [r7, #0]
 800de80:	7a52      	ldrb	r2, [r2, #9]
 800de82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	330a      	adds	r3, #10
 800de88:	683a      	ldr	r2, [r7, #0]
 800de8a:	7a92      	ldrb	r2, [r2, #10]
 800de8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	330b      	adds	r3, #11
 800de92:	683a      	ldr	r2, [r7, #0]
 800de94:	7ad2      	ldrb	r2, [r2, #11]
 800de96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	330c      	adds	r3, #12
 800de9c:	683a      	ldr	r2, [r7, #0]
 800de9e:	7b12      	ldrb	r2, [r2, #12]
 800dea0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	330d      	adds	r3, #13
 800dea6:	683a      	ldr	r2, [r7, #0]
 800dea8:	7b52      	ldrb	r2, [r2, #13]
 800deaa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	330e      	adds	r3, #14
 800deb0:	683a      	ldr	r2, [r7, #0]
 800deb2:	7b92      	ldrb	r2, [r2, #14]
 800deb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	330f      	adds	r3, #15
 800deba:	683a      	ldr	r2, [r7, #0]
 800debc:	7bd2      	ldrb	r2, [r2, #15]
 800debe:	701a      	strb	r2, [r3, #0]
#endif
}
 800dec0:	bf00      	nop
 800dec2:	370c      	adds	r7, #12
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bc80      	pop	{r7}
 800dec8:	4770      	bx	lr

0800deca <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800deca:	b480      	push	{r7}
 800decc:	b085      	sub	sp, #20
 800dece:	af00      	add	r7, sp, #0
 800ded0:	60f8      	str	r0, [r7, #12]
 800ded2:	60b9      	str	r1, [r7, #8]
 800ded4:	4613      	mov	r3, r2
 800ded6:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800ded8:	e007      	b.n	800deea <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800deda:	68ba      	ldr	r2, [r7, #8]
 800dedc:	1c53      	adds	r3, r2, #1
 800dede:	60bb      	str	r3, [r7, #8]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	1c59      	adds	r1, r3, #1
 800dee4:	60f9      	str	r1, [r7, #12]
 800dee6:	7812      	ldrb	r2, [r2, #0]
 800dee8:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800deea:	79fb      	ldrb	r3, [r7, #7]
 800deec:	1e5a      	subs	r2, r3, #1
 800deee:	71fa      	strb	r2, [r7, #7]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d1f2      	bne.n	800deda <copy_block_nn+0x10>
}
 800def4:	bf00      	nop
 800def6:	bf00      	nop
 800def8:	3714      	adds	r7, #20
 800defa:	46bd      	mov	sp, r7
 800defc:	bc80      	pop	{r7}
 800defe:	4770      	bx	lr

0800df00 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	781a      	ldrb	r2, [r3, #0]
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	4053      	eors	r3, r2
 800df14:	b2da      	uxtb	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	3301      	adds	r3, #1
 800df1e:	7819      	ldrb	r1, [r3, #0]
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	3301      	adds	r3, #1
 800df24:	781a      	ldrb	r2, [r3, #0]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	3301      	adds	r3, #1
 800df2a:	404a      	eors	r2, r1
 800df2c:	b2d2      	uxtb	r2, r2
 800df2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	3302      	adds	r3, #2
 800df34:	7819      	ldrb	r1, [r3, #0]
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	3302      	adds	r3, #2
 800df3a:	781a      	ldrb	r2, [r3, #0]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	3302      	adds	r3, #2
 800df40:	404a      	eors	r2, r1
 800df42:	b2d2      	uxtb	r2, r2
 800df44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	3303      	adds	r3, #3
 800df4a:	7819      	ldrb	r1, [r3, #0]
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	3303      	adds	r3, #3
 800df50:	781a      	ldrb	r2, [r3, #0]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	3303      	adds	r3, #3
 800df56:	404a      	eors	r2, r1
 800df58:	b2d2      	uxtb	r2, r2
 800df5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	3304      	adds	r3, #4
 800df60:	7819      	ldrb	r1, [r3, #0]
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	3304      	adds	r3, #4
 800df66:	781a      	ldrb	r2, [r3, #0]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	3304      	adds	r3, #4
 800df6c:	404a      	eors	r2, r1
 800df6e:	b2d2      	uxtb	r2, r2
 800df70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	3305      	adds	r3, #5
 800df76:	7819      	ldrb	r1, [r3, #0]
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	3305      	adds	r3, #5
 800df7c:	781a      	ldrb	r2, [r3, #0]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	3305      	adds	r3, #5
 800df82:	404a      	eors	r2, r1
 800df84:	b2d2      	uxtb	r2, r2
 800df86:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	3306      	adds	r3, #6
 800df8c:	7819      	ldrb	r1, [r3, #0]
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	3306      	adds	r3, #6
 800df92:	781a      	ldrb	r2, [r3, #0]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	3306      	adds	r3, #6
 800df98:	404a      	eors	r2, r1
 800df9a:	b2d2      	uxtb	r2, r2
 800df9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	3307      	adds	r3, #7
 800dfa2:	7819      	ldrb	r1, [r3, #0]
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	3307      	adds	r3, #7
 800dfa8:	781a      	ldrb	r2, [r3, #0]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	3307      	adds	r3, #7
 800dfae:	404a      	eors	r2, r1
 800dfb0:	b2d2      	uxtb	r2, r2
 800dfb2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	3308      	adds	r3, #8
 800dfb8:	7819      	ldrb	r1, [r3, #0]
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	3308      	adds	r3, #8
 800dfbe:	781a      	ldrb	r2, [r3, #0]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	3308      	adds	r3, #8
 800dfc4:	404a      	eors	r2, r1
 800dfc6:	b2d2      	uxtb	r2, r2
 800dfc8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	3309      	adds	r3, #9
 800dfce:	7819      	ldrb	r1, [r3, #0]
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	3309      	adds	r3, #9
 800dfd4:	781a      	ldrb	r2, [r3, #0]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	3309      	adds	r3, #9
 800dfda:	404a      	eors	r2, r1
 800dfdc:	b2d2      	uxtb	r2, r2
 800dfde:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	330a      	adds	r3, #10
 800dfe4:	7819      	ldrb	r1, [r3, #0]
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	330a      	adds	r3, #10
 800dfea:	781a      	ldrb	r2, [r3, #0]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	330a      	adds	r3, #10
 800dff0:	404a      	eors	r2, r1
 800dff2:	b2d2      	uxtb	r2, r2
 800dff4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	330b      	adds	r3, #11
 800dffa:	7819      	ldrb	r1, [r3, #0]
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	330b      	adds	r3, #11
 800e000:	781a      	ldrb	r2, [r3, #0]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	330b      	adds	r3, #11
 800e006:	404a      	eors	r2, r1
 800e008:	b2d2      	uxtb	r2, r2
 800e00a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	330c      	adds	r3, #12
 800e010:	7819      	ldrb	r1, [r3, #0]
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	330c      	adds	r3, #12
 800e016:	781a      	ldrb	r2, [r3, #0]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	330c      	adds	r3, #12
 800e01c:	404a      	eors	r2, r1
 800e01e:	b2d2      	uxtb	r2, r2
 800e020:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	330d      	adds	r3, #13
 800e026:	7819      	ldrb	r1, [r3, #0]
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	330d      	adds	r3, #13
 800e02c:	781a      	ldrb	r2, [r3, #0]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	330d      	adds	r3, #13
 800e032:	404a      	eors	r2, r1
 800e034:	b2d2      	uxtb	r2, r2
 800e036:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	330e      	adds	r3, #14
 800e03c:	7819      	ldrb	r1, [r3, #0]
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	330e      	adds	r3, #14
 800e042:	781a      	ldrb	r2, [r3, #0]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	330e      	adds	r3, #14
 800e048:	404a      	eors	r2, r1
 800e04a:	b2d2      	uxtb	r2, r2
 800e04c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	330f      	adds	r3, #15
 800e052:	7819      	ldrb	r1, [r3, #0]
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	330f      	adds	r3, #15
 800e058:	781a      	ldrb	r2, [r3, #0]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	330f      	adds	r3, #15
 800e05e:	404a      	eors	r2, r1
 800e060:	b2d2      	uxtb	r2, r2
 800e062:	701a      	strb	r2, [r3, #0]
#endif
}
 800e064:	bf00      	nop
 800e066:	370c      	adds	r7, #12
 800e068:	46bd      	mov	sp, r7
 800e06a:	bc80      	pop	{r7}
 800e06c:	4770      	bx	lr

0800e06e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800e06e:	b480      	push	{r7}
 800e070:	b085      	sub	sp, #20
 800e072:	af00      	add	r7, sp, #0
 800e074:	60f8      	str	r0, [r7, #12]
 800e076:	60b9      	str	r1, [r7, #8]
 800e078:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	781a      	ldrb	r2, [r3, #0]
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	4053      	eors	r3, r2
 800e084:	b2da      	uxtb	r2, r3
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	3301      	adds	r3, #1
 800e08e:	7819      	ldrb	r1, [r3, #0]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	3301      	adds	r3, #1
 800e094:	781a      	ldrb	r2, [r3, #0]
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	3301      	adds	r3, #1
 800e09a:	404a      	eors	r2, r1
 800e09c:	b2d2      	uxtb	r2, r2
 800e09e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	3302      	adds	r3, #2
 800e0a4:	7819      	ldrb	r1, [r3, #0]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	3302      	adds	r3, #2
 800e0aa:	781a      	ldrb	r2, [r3, #0]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	3302      	adds	r3, #2
 800e0b0:	404a      	eors	r2, r1
 800e0b2:	b2d2      	uxtb	r2, r2
 800e0b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	3303      	adds	r3, #3
 800e0ba:	7819      	ldrb	r1, [r3, #0]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	3303      	adds	r3, #3
 800e0c0:	781a      	ldrb	r2, [r3, #0]
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	3303      	adds	r3, #3
 800e0c6:	404a      	eors	r2, r1
 800e0c8:	b2d2      	uxtb	r2, r2
 800e0ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	3304      	adds	r3, #4
 800e0d0:	7819      	ldrb	r1, [r3, #0]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	3304      	adds	r3, #4
 800e0d6:	781a      	ldrb	r2, [r3, #0]
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	3304      	adds	r3, #4
 800e0dc:	404a      	eors	r2, r1
 800e0de:	b2d2      	uxtb	r2, r2
 800e0e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	3305      	adds	r3, #5
 800e0e6:	7819      	ldrb	r1, [r3, #0]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	3305      	adds	r3, #5
 800e0ec:	781a      	ldrb	r2, [r3, #0]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	3305      	adds	r3, #5
 800e0f2:	404a      	eors	r2, r1
 800e0f4:	b2d2      	uxtb	r2, r2
 800e0f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	3306      	adds	r3, #6
 800e0fc:	7819      	ldrb	r1, [r3, #0]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	3306      	adds	r3, #6
 800e102:	781a      	ldrb	r2, [r3, #0]
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	3306      	adds	r3, #6
 800e108:	404a      	eors	r2, r1
 800e10a:	b2d2      	uxtb	r2, r2
 800e10c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	3307      	adds	r3, #7
 800e112:	7819      	ldrb	r1, [r3, #0]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	3307      	adds	r3, #7
 800e118:	781a      	ldrb	r2, [r3, #0]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	3307      	adds	r3, #7
 800e11e:	404a      	eors	r2, r1
 800e120:	b2d2      	uxtb	r2, r2
 800e122:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	3308      	adds	r3, #8
 800e128:	7819      	ldrb	r1, [r3, #0]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	3308      	adds	r3, #8
 800e12e:	781a      	ldrb	r2, [r3, #0]
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	3308      	adds	r3, #8
 800e134:	404a      	eors	r2, r1
 800e136:	b2d2      	uxtb	r2, r2
 800e138:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	3309      	adds	r3, #9
 800e13e:	7819      	ldrb	r1, [r3, #0]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	3309      	adds	r3, #9
 800e144:	781a      	ldrb	r2, [r3, #0]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	3309      	adds	r3, #9
 800e14a:	404a      	eors	r2, r1
 800e14c:	b2d2      	uxtb	r2, r2
 800e14e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	330a      	adds	r3, #10
 800e154:	7819      	ldrb	r1, [r3, #0]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	330a      	adds	r3, #10
 800e15a:	781a      	ldrb	r2, [r3, #0]
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	330a      	adds	r3, #10
 800e160:	404a      	eors	r2, r1
 800e162:	b2d2      	uxtb	r2, r2
 800e164:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	330b      	adds	r3, #11
 800e16a:	7819      	ldrb	r1, [r3, #0]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	330b      	adds	r3, #11
 800e170:	781a      	ldrb	r2, [r3, #0]
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	330b      	adds	r3, #11
 800e176:	404a      	eors	r2, r1
 800e178:	b2d2      	uxtb	r2, r2
 800e17a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	330c      	adds	r3, #12
 800e180:	7819      	ldrb	r1, [r3, #0]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	330c      	adds	r3, #12
 800e186:	781a      	ldrb	r2, [r3, #0]
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	330c      	adds	r3, #12
 800e18c:	404a      	eors	r2, r1
 800e18e:	b2d2      	uxtb	r2, r2
 800e190:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	330d      	adds	r3, #13
 800e196:	7819      	ldrb	r1, [r3, #0]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	330d      	adds	r3, #13
 800e19c:	781a      	ldrb	r2, [r3, #0]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	330d      	adds	r3, #13
 800e1a2:	404a      	eors	r2, r1
 800e1a4:	b2d2      	uxtb	r2, r2
 800e1a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	330e      	adds	r3, #14
 800e1ac:	7819      	ldrb	r1, [r3, #0]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	330e      	adds	r3, #14
 800e1b2:	781a      	ldrb	r2, [r3, #0]
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	330e      	adds	r3, #14
 800e1b8:	404a      	eors	r2, r1
 800e1ba:	b2d2      	uxtb	r2, r2
 800e1bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	330f      	adds	r3, #15
 800e1c2:	7819      	ldrb	r1, [r3, #0]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	330f      	adds	r3, #15
 800e1c8:	781a      	ldrb	r2, [r3, #0]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	330f      	adds	r3, #15
 800e1ce:	404a      	eors	r2, r1
 800e1d0:	b2d2      	uxtb	r2, r2
 800e1d2:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e1d4:	bf00      	nop
 800e1d6:	3714      	adds	r7, #20
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bc80      	pop	{r7}
 800e1dc:	4770      	bx	lr

0800e1de <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e1de:	b580      	push	{r7, lr}
 800e1e0:	b082      	sub	sp, #8
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	6078      	str	r0, [r7, #4]
 800e1e6:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800e1e8:	6839      	ldr	r1, [r7, #0]
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f7ff fe88 	bl	800df00 <xor_block>
}
 800e1f0:	bf00      	nop
 800e1f2:	3708      	adds	r7, #8
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800e1f8:	b480      	push	{r7}
 800e1fa:	b085      	sub	sp, #20
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	781b      	ldrb	r3, [r3, #0]
 800e204:	461a      	mov	r2, r3
 800e206:	4b48      	ldr	r3, [pc, #288]	; (800e328 <shift_sub_rows+0x130>)
 800e208:	5c9a      	ldrb	r2, [r3, r2]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	701a      	strb	r2, [r3, #0]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	3304      	adds	r3, #4
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	4619      	mov	r1, r3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	3304      	adds	r3, #4
 800e21a:	4a43      	ldr	r2, [pc, #268]	; (800e328 <shift_sub_rows+0x130>)
 800e21c:	5c52      	ldrb	r2, [r2, r1]
 800e21e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	3308      	adds	r3, #8
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	4619      	mov	r1, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	3308      	adds	r3, #8
 800e22c:	4a3e      	ldr	r2, [pc, #248]	; (800e328 <shift_sub_rows+0x130>)
 800e22e:	5c52      	ldrb	r2, [r2, r1]
 800e230:	701a      	strb	r2, [r3, #0]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	330c      	adds	r3, #12
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	4619      	mov	r1, r3
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	330c      	adds	r3, #12
 800e23e:	4a3a      	ldr	r2, [pc, #232]	; (800e328 <shift_sub_rows+0x130>)
 800e240:	5c52      	ldrb	r2, [r2, r1]
 800e242:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	785b      	ldrb	r3, [r3, #1]
 800e248:	73fb      	strb	r3, [r7, #15]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	3305      	adds	r3, #5
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	4619      	mov	r1, r3
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	3301      	adds	r3, #1
 800e256:	4a34      	ldr	r2, [pc, #208]	; (800e328 <shift_sub_rows+0x130>)
 800e258:	5c52      	ldrb	r2, [r2, r1]
 800e25a:	701a      	strb	r2, [r3, #0]
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	3309      	adds	r3, #9
 800e260:	781b      	ldrb	r3, [r3, #0]
 800e262:	4619      	mov	r1, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	3305      	adds	r3, #5
 800e268:	4a2f      	ldr	r2, [pc, #188]	; (800e328 <shift_sub_rows+0x130>)
 800e26a:	5c52      	ldrb	r2, [r2, r1]
 800e26c:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	330d      	adds	r3, #13
 800e272:	781b      	ldrb	r3, [r3, #0]
 800e274:	4619      	mov	r1, r3
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	3309      	adds	r3, #9
 800e27a:	4a2b      	ldr	r2, [pc, #172]	; (800e328 <shift_sub_rows+0x130>)
 800e27c:	5c52      	ldrb	r2, [r2, r1]
 800e27e:	701a      	strb	r2, [r3, #0]
 800e280:	7bfa      	ldrb	r2, [r7, #15]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	330d      	adds	r3, #13
 800e286:	4928      	ldr	r1, [pc, #160]	; (800e328 <shift_sub_rows+0x130>)
 800e288:	5c8a      	ldrb	r2, [r1, r2]
 800e28a:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	789b      	ldrb	r3, [r3, #2]
 800e290:	73fb      	strb	r3, [r7, #15]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	330a      	adds	r3, #10
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	4619      	mov	r1, r3
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	3302      	adds	r3, #2
 800e29e:	4a22      	ldr	r2, [pc, #136]	; (800e328 <shift_sub_rows+0x130>)
 800e2a0:	5c52      	ldrb	r2, [r2, r1]
 800e2a2:	701a      	strb	r2, [r3, #0]
 800e2a4:	7bfa      	ldrb	r2, [r7, #15]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	330a      	adds	r3, #10
 800e2aa:	491f      	ldr	r1, [pc, #124]	; (800e328 <shift_sub_rows+0x130>)
 800e2ac:	5c8a      	ldrb	r2, [r1, r2]
 800e2ae:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	799b      	ldrb	r3, [r3, #6]
 800e2b4:	73fb      	strb	r3, [r7, #15]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	330e      	adds	r3, #14
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	4619      	mov	r1, r3
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	3306      	adds	r3, #6
 800e2c2:	4a19      	ldr	r2, [pc, #100]	; (800e328 <shift_sub_rows+0x130>)
 800e2c4:	5c52      	ldrb	r2, [r2, r1]
 800e2c6:	701a      	strb	r2, [r3, #0]
 800e2c8:	7bfa      	ldrb	r2, [r7, #15]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	330e      	adds	r3, #14
 800e2ce:	4916      	ldr	r1, [pc, #88]	; (800e328 <shift_sub_rows+0x130>)
 800e2d0:	5c8a      	ldrb	r2, [r1, r2]
 800e2d2:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	7bdb      	ldrb	r3, [r3, #15]
 800e2d8:	73fb      	strb	r3, [r7, #15]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	330b      	adds	r3, #11
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	330f      	adds	r3, #15
 800e2e6:	4a10      	ldr	r2, [pc, #64]	; (800e328 <shift_sub_rows+0x130>)
 800e2e8:	5c52      	ldrb	r2, [r2, r1]
 800e2ea:	701a      	strb	r2, [r3, #0]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	3307      	adds	r3, #7
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	4619      	mov	r1, r3
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	330b      	adds	r3, #11
 800e2f8:	4a0b      	ldr	r2, [pc, #44]	; (800e328 <shift_sub_rows+0x130>)
 800e2fa:	5c52      	ldrb	r2, [r2, r1]
 800e2fc:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	3303      	adds	r3, #3
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	4619      	mov	r1, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	3307      	adds	r3, #7
 800e30a:	4a07      	ldr	r2, [pc, #28]	; (800e328 <shift_sub_rows+0x130>)
 800e30c:	5c52      	ldrb	r2, [r2, r1]
 800e30e:	701a      	strb	r2, [r3, #0]
 800e310:	7bfa      	ldrb	r2, [r7, #15]
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	3303      	adds	r3, #3
 800e316:	4904      	ldr	r1, [pc, #16]	; (800e328 <shift_sub_rows+0x130>)
 800e318:	5c8a      	ldrb	r2, [r1, r2]
 800e31a:	701a      	strb	r2, [r3, #0]
}
 800e31c:	bf00      	nop
 800e31e:	3714      	adds	r7, #20
 800e320:	46bd      	mov	sp, r7
 800e322:	bc80      	pop	{r7}
 800e324:	4770      	bx	lr
 800e326:	bf00      	nop
 800e328:	0801f02c 	.word	0x0801f02c

0800e32c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b086      	sub	sp, #24
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800e334:	f107 0308 	add.w	r3, r7, #8
 800e338:	6879      	ldr	r1, [r7, #4]
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7ff fd6c 	bl	800de18 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e340:	7a3b      	ldrb	r3, [r7, #8]
 800e342:	461a      	mov	r2, r3
 800e344:	4b9a      	ldr	r3, [pc, #616]	; (800e5b0 <mix_sub_columns+0x284>)
 800e346:	5c9a      	ldrb	r2, [r3, r2]
 800e348:	7b7b      	ldrb	r3, [r7, #13]
 800e34a:	4619      	mov	r1, r3
 800e34c:	4b99      	ldr	r3, [pc, #612]	; (800e5b4 <mix_sub_columns+0x288>)
 800e34e:	5c5b      	ldrb	r3, [r3, r1]
 800e350:	4053      	eors	r3, r2
 800e352:	b2da      	uxtb	r2, r3
 800e354:	7cbb      	ldrb	r3, [r7, #18]
 800e356:	4619      	mov	r1, r3
 800e358:	4b97      	ldr	r3, [pc, #604]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e35a:	5c5b      	ldrb	r3, [r3, r1]
 800e35c:	4053      	eors	r3, r2
 800e35e:	b2da      	uxtb	r2, r3
 800e360:	7dfb      	ldrb	r3, [r7, #23]
 800e362:	4619      	mov	r1, r3
 800e364:	4b94      	ldr	r3, [pc, #592]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e366:	5c5b      	ldrb	r3, [r3, r1]
 800e368:	4053      	eors	r3, r2
 800e36a:	b2da      	uxtb	r2, r3
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e370:	7a3b      	ldrb	r3, [r7, #8]
 800e372:	461a      	mov	r2, r3
 800e374:	4b90      	ldr	r3, [pc, #576]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e376:	5c9a      	ldrb	r2, [r3, r2]
 800e378:	7b7b      	ldrb	r3, [r7, #13]
 800e37a:	4619      	mov	r1, r3
 800e37c:	4b8c      	ldr	r3, [pc, #560]	; (800e5b0 <mix_sub_columns+0x284>)
 800e37e:	5c5b      	ldrb	r3, [r3, r1]
 800e380:	4053      	eors	r3, r2
 800e382:	b2da      	uxtb	r2, r3
 800e384:	7cbb      	ldrb	r3, [r7, #18]
 800e386:	4619      	mov	r1, r3
 800e388:	4b8a      	ldr	r3, [pc, #552]	; (800e5b4 <mix_sub_columns+0x288>)
 800e38a:	5c5b      	ldrb	r3, [r3, r1]
 800e38c:	4053      	eors	r3, r2
 800e38e:	b2d9      	uxtb	r1, r3
 800e390:	7dfb      	ldrb	r3, [r7, #23]
 800e392:	461a      	mov	r2, r3
 800e394:	4b88      	ldr	r3, [pc, #544]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e396:	5c9a      	ldrb	r2, [r3, r2]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	3301      	adds	r3, #1
 800e39c:	404a      	eors	r2, r1
 800e39e:	b2d2      	uxtb	r2, r2
 800e3a0:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e3a2:	7a3b      	ldrb	r3, [r7, #8]
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	4b84      	ldr	r3, [pc, #528]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e3a8:	5c9a      	ldrb	r2, [r3, r2]
 800e3aa:	7b7b      	ldrb	r3, [r7, #13]
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	4b82      	ldr	r3, [pc, #520]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e3b0:	5c5b      	ldrb	r3, [r3, r1]
 800e3b2:	4053      	eors	r3, r2
 800e3b4:	b2da      	uxtb	r2, r3
 800e3b6:	7cbb      	ldrb	r3, [r7, #18]
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	4b7d      	ldr	r3, [pc, #500]	; (800e5b0 <mix_sub_columns+0x284>)
 800e3bc:	5c5b      	ldrb	r3, [r3, r1]
 800e3be:	4053      	eors	r3, r2
 800e3c0:	b2d9      	uxtb	r1, r3
 800e3c2:	7dfb      	ldrb	r3, [r7, #23]
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	4b7b      	ldr	r3, [pc, #492]	; (800e5b4 <mix_sub_columns+0x288>)
 800e3c8:	5c9a      	ldrb	r2, [r3, r2]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	3302      	adds	r3, #2
 800e3ce:	404a      	eors	r2, r1
 800e3d0:	b2d2      	uxtb	r2, r2
 800e3d2:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e3d4:	7a3b      	ldrb	r3, [r7, #8]
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	4b76      	ldr	r3, [pc, #472]	; (800e5b4 <mix_sub_columns+0x288>)
 800e3da:	5c9a      	ldrb	r2, [r3, r2]
 800e3dc:	7b7b      	ldrb	r3, [r7, #13]
 800e3de:	4619      	mov	r1, r3
 800e3e0:	4b75      	ldr	r3, [pc, #468]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e3e2:	5c5b      	ldrb	r3, [r3, r1]
 800e3e4:	4053      	eors	r3, r2
 800e3e6:	b2da      	uxtb	r2, r3
 800e3e8:	7cbb      	ldrb	r3, [r7, #18]
 800e3ea:	4619      	mov	r1, r3
 800e3ec:	4b72      	ldr	r3, [pc, #456]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e3ee:	5c5b      	ldrb	r3, [r3, r1]
 800e3f0:	4053      	eors	r3, r2
 800e3f2:	b2d9      	uxtb	r1, r3
 800e3f4:	7dfb      	ldrb	r3, [r7, #23]
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	4b6d      	ldr	r3, [pc, #436]	; (800e5b0 <mix_sub_columns+0x284>)
 800e3fa:	5c9a      	ldrb	r2, [r3, r2]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	3303      	adds	r3, #3
 800e400:	404a      	eors	r2, r1
 800e402:	b2d2      	uxtb	r2, r2
 800e404:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e406:	7b3b      	ldrb	r3, [r7, #12]
 800e408:	461a      	mov	r2, r3
 800e40a:	4b69      	ldr	r3, [pc, #420]	; (800e5b0 <mix_sub_columns+0x284>)
 800e40c:	5c9a      	ldrb	r2, [r3, r2]
 800e40e:	7c7b      	ldrb	r3, [r7, #17]
 800e410:	4619      	mov	r1, r3
 800e412:	4b68      	ldr	r3, [pc, #416]	; (800e5b4 <mix_sub_columns+0x288>)
 800e414:	5c5b      	ldrb	r3, [r3, r1]
 800e416:	4053      	eors	r3, r2
 800e418:	b2da      	uxtb	r2, r3
 800e41a:	7dbb      	ldrb	r3, [r7, #22]
 800e41c:	4619      	mov	r1, r3
 800e41e:	4b66      	ldr	r3, [pc, #408]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e420:	5c5b      	ldrb	r3, [r3, r1]
 800e422:	4053      	eors	r3, r2
 800e424:	b2d9      	uxtb	r1, r3
 800e426:	7afb      	ldrb	r3, [r7, #11]
 800e428:	461a      	mov	r2, r3
 800e42a:	4b63      	ldr	r3, [pc, #396]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e42c:	5c9a      	ldrb	r2, [r3, r2]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	3304      	adds	r3, #4
 800e432:	404a      	eors	r2, r1
 800e434:	b2d2      	uxtb	r2, r2
 800e436:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e438:	7b3b      	ldrb	r3, [r7, #12]
 800e43a:	461a      	mov	r2, r3
 800e43c:	4b5e      	ldr	r3, [pc, #376]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e43e:	5c9a      	ldrb	r2, [r3, r2]
 800e440:	7c7b      	ldrb	r3, [r7, #17]
 800e442:	4619      	mov	r1, r3
 800e444:	4b5a      	ldr	r3, [pc, #360]	; (800e5b0 <mix_sub_columns+0x284>)
 800e446:	5c5b      	ldrb	r3, [r3, r1]
 800e448:	4053      	eors	r3, r2
 800e44a:	b2da      	uxtb	r2, r3
 800e44c:	7dbb      	ldrb	r3, [r7, #22]
 800e44e:	4619      	mov	r1, r3
 800e450:	4b58      	ldr	r3, [pc, #352]	; (800e5b4 <mix_sub_columns+0x288>)
 800e452:	5c5b      	ldrb	r3, [r3, r1]
 800e454:	4053      	eors	r3, r2
 800e456:	b2d9      	uxtb	r1, r3
 800e458:	7afb      	ldrb	r3, [r7, #11]
 800e45a:	461a      	mov	r2, r3
 800e45c:	4b56      	ldr	r3, [pc, #344]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e45e:	5c9a      	ldrb	r2, [r3, r2]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	3305      	adds	r3, #5
 800e464:	404a      	eors	r2, r1
 800e466:	b2d2      	uxtb	r2, r2
 800e468:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e46a:	7b3b      	ldrb	r3, [r7, #12]
 800e46c:	461a      	mov	r2, r3
 800e46e:	4b52      	ldr	r3, [pc, #328]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e470:	5c9a      	ldrb	r2, [r3, r2]
 800e472:	7c7b      	ldrb	r3, [r7, #17]
 800e474:	4619      	mov	r1, r3
 800e476:	4b50      	ldr	r3, [pc, #320]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e478:	5c5b      	ldrb	r3, [r3, r1]
 800e47a:	4053      	eors	r3, r2
 800e47c:	b2da      	uxtb	r2, r3
 800e47e:	7dbb      	ldrb	r3, [r7, #22]
 800e480:	4619      	mov	r1, r3
 800e482:	4b4b      	ldr	r3, [pc, #300]	; (800e5b0 <mix_sub_columns+0x284>)
 800e484:	5c5b      	ldrb	r3, [r3, r1]
 800e486:	4053      	eors	r3, r2
 800e488:	b2d9      	uxtb	r1, r3
 800e48a:	7afb      	ldrb	r3, [r7, #11]
 800e48c:	461a      	mov	r2, r3
 800e48e:	4b49      	ldr	r3, [pc, #292]	; (800e5b4 <mix_sub_columns+0x288>)
 800e490:	5c9a      	ldrb	r2, [r3, r2]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	3306      	adds	r3, #6
 800e496:	404a      	eors	r2, r1
 800e498:	b2d2      	uxtb	r2, r2
 800e49a:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e49c:	7b3b      	ldrb	r3, [r7, #12]
 800e49e:	461a      	mov	r2, r3
 800e4a0:	4b44      	ldr	r3, [pc, #272]	; (800e5b4 <mix_sub_columns+0x288>)
 800e4a2:	5c9a      	ldrb	r2, [r3, r2]
 800e4a4:	7c7b      	ldrb	r3, [r7, #17]
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	4b43      	ldr	r3, [pc, #268]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e4aa:	5c5b      	ldrb	r3, [r3, r1]
 800e4ac:	4053      	eors	r3, r2
 800e4ae:	b2da      	uxtb	r2, r3
 800e4b0:	7dbb      	ldrb	r3, [r7, #22]
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	4b40      	ldr	r3, [pc, #256]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e4b6:	5c5b      	ldrb	r3, [r3, r1]
 800e4b8:	4053      	eors	r3, r2
 800e4ba:	b2d9      	uxtb	r1, r3
 800e4bc:	7afb      	ldrb	r3, [r7, #11]
 800e4be:	461a      	mov	r2, r3
 800e4c0:	4b3b      	ldr	r3, [pc, #236]	; (800e5b0 <mix_sub_columns+0x284>)
 800e4c2:	5c9a      	ldrb	r2, [r3, r2]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	3307      	adds	r3, #7
 800e4c8:	404a      	eors	r2, r1
 800e4ca:	b2d2      	uxtb	r2, r2
 800e4cc:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e4ce:	7c3b      	ldrb	r3, [r7, #16]
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	4b37      	ldr	r3, [pc, #220]	; (800e5b0 <mix_sub_columns+0x284>)
 800e4d4:	5c9a      	ldrb	r2, [r3, r2]
 800e4d6:	7d7b      	ldrb	r3, [r7, #21]
 800e4d8:	4619      	mov	r1, r3
 800e4da:	4b36      	ldr	r3, [pc, #216]	; (800e5b4 <mix_sub_columns+0x288>)
 800e4dc:	5c5b      	ldrb	r3, [r3, r1]
 800e4de:	4053      	eors	r3, r2
 800e4e0:	b2da      	uxtb	r2, r3
 800e4e2:	7abb      	ldrb	r3, [r7, #10]
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	4b34      	ldr	r3, [pc, #208]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e4e8:	5c5b      	ldrb	r3, [r3, r1]
 800e4ea:	4053      	eors	r3, r2
 800e4ec:	b2d9      	uxtb	r1, r3
 800e4ee:	7bfb      	ldrb	r3, [r7, #15]
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	4b31      	ldr	r3, [pc, #196]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e4f4:	5c9a      	ldrb	r2, [r3, r2]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	3308      	adds	r3, #8
 800e4fa:	404a      	eors	r2, r1
 800e4fc:	b2d2      	uxtb	r2, r2
 800e4fe:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e500:	7c3b      	ldrb	r3, [r7, #16]
 800e502:	461a      	mov	r2, r3
 800e504:	4b2c      	ldr	r3, [pc, #176]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e506:	5c9a      	ldrb	r2, [r3, r2]
 800e508:	7d7b      	ldrb	r3, [r7, #21]
 800e50a:	4619      	mov	r1, r3
 800e50c:	4b28      	ldr	r3, [pc, #160]	; (800e5b0 <mix_sub_columns+0x284>)
 800e50e:	5c5b      	ldrb	r3, [r3, r1]
 800e510:	4053      	eors	r3, r2
 800e512:	b2da      	uxtb	r2, r3
 800e514:	7abb      	ldrb	r3, [r7, #10]
 800e516:	4619      	mov	r1, r3
 800e518:	4b26      	ldr	r3, [pc, #152]	; (800e5b4 <mix_sub_columns+0x288>)
 800e51a:	5c5b      	ldrb	r3, [r3, r1]
 800e51c:	4053      	eors	r3, r2
 800e51e:	b2d9      	uxtb	r1, r3
 800e520:	7bfb      	ldrb	r3, [r7, #15]
 800e522:	461a      	mov	r2, r3
 800e524:	4b24      	ldr	r3, [pc, #144]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e526:	5c9a      	ldrb	r2, [r3, r2]
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	3309      	adds	r3, #9
 800e52c:	404a      	eors	r2, r1
 800e52e:	b2d2      	uxtb	r2, r2
 800e530:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e532:	7c3b      	ldrb	r3, [r7, #16]
 800e534:	461a      	mov	r2, r3
 800e536:	4b20      	ldr	r3, [pc, #128]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e538:	5c9a      	ldrb	r2, [r3, r2]
 800e53a:	7d7b      	ldrb	r3, [r7, #21]
 800e53c:	4619      	mov	r1, r3
 800e53e:	4b1e      	ldr	r3, [pc, #120]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e540:	5c5b      	ldrb	r3, [r3, r1]
 800e542:	4053      	eors	r3, r2
 800e544:	b2da      	uxtb	r2, r3
 800e546:	7abb      	ldrb	r3, [r7, #10]
 800e548:	4619      	mov	r1, r3
 800e54a:	4b19      	ldr	r3, [pc, #100]	; (800e5b0 <mix_sub_columns+0x284>)
 800e54c:	5c5b      	ldrb	r3, [r3, r1]
 800e54e:	4053      	eors	r3, r2
 800e550:	b2d9      	uxtb	r1, r3
 800e552:	7bfb      	ldrb	r3, [r7, #15]
 800e554:	461a      	mov	r2, r3
 800e556:	4b17      	ldr	r3, [pc, #92]	; (800e5b4 <mix_sub_columns+0x288>)
 800e558:	5c9a      	ldrb	r2, [r3, r2]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	330a      	adds	r3, #10
 800e55e:	404a      	eors	r2, r1
 800e560:	b2d2      	uxtb	r2, r2
 800e562:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e564:	7c3b      	ldrb	r3, [r7, #16]
 800e566:	461a      	mov	r2, r3
 800e568:	4b12      	ldr	r3, [pc, #72]	; (800e5b4 <mix_sub_columns+0x288>)
 800e56a:	5c9a      	ldrb	r2, [r3, r2]
 800e56c:	7d7b      	ldrb	r3, [r7, #21]
 800e56e:	4619      	mov	r1, r3
 800e570:	4b11      	ldr	r3, [pc, #68]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e572:	5c5b      	ldrb	r3, [r3, r1]
 800e574:	4053      	eors	r3, r2
 800e576:	b2da      	uxtb	r2, r3
 800e578:	7abb      	ldrb	r3, [r7, #10]
 800e57a:	4619      	mov	r1, r3
 800e57c:	4b0e      	ldr	r3, [pc, #56]	; (800e5b8 <mix_sub_columns+0x28c>)
 800e57e:	5c5b      	ldrb	r3, [r3, r1]
 800e580:	4053      	eors	r3, r2
 800e582:	b2d9      	uxtb	r1, r3
 800e584:	7bfb      	ldrb	r3, [r7, #15]
 800e586:	461a      	mov	r2, r3
 800e588:	4b09      	ldr	r3, [pc, #36]	; (800e5b0 <mix_sub_columns+0x284>)
 800e58a:	5c9a      	ldrb	r2, [r3, r2]
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	330b      	adds	r3, #11
 800e590:	404a      	eors	r2, r1
 800e592:	b2d2      	uxtb	r2, r2
 800e594:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e596:	7d3b      	ldrb	r3, [r7, #20]
 800e598:	461a      	mov	r2, r3
 800e59a:	4b05      	ldr	r3, [pc, #20]	; (800e5b0 <mix_sub_columns+0x284>)
 800e59c:	5c9a      	ldrb	r2, [r3, r2]
 800e59e:	7a7b      	ldrb	r3, [r7, #9]
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	4b04      	ldr	r3, [pc, #16]	; (800e5b4 <mix_sub_columns+0x288>)
 800e5a4:	5c5b      	ldrb	r3, [r3, r1]
 800e5a6:	4053      	eors	r3, r2
 800e5a8:	b2da      	uxtb	r2, r3
 800e5aa:	7bbb      	ldrb	r3, [r7, #14]
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	e005      	b.n	800e5bc <mix_sub_columns+0x290>
 800e5b0:	0801f12c 	.word	0x0801f12c
 800e5b4:	0801f22c 	.word	0x0801f22c
 800e5b8:	0801f02c 	.word	0x0801f02c
 800e5bc:	4b2d      	ldr	r3, [pc, #180]	; (800e674 <mix_sub_columns+0x348>)
 800e5be:	5c5b      	ldrb	r3, [r3, r1]
 800e5c0:	4053      	eors	r3, r2
 800e5c2:	b2d9      	uxtb	r1, r3
 800e5c4:	7cfb      	ldrb	r3, [r7, #19]
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	4b2a      	ldr	r3, [pc, #168]	; (800e674 <mix_sub_columns+0x348>)
 800e5ca:	5c9a      	ldrb	r2, [r3, r2]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	330c      	adds	r3, #12
 800e5d0:	404a      	eors	r2, r1
 800e5d2:	b2d2      	uxtb	r2, r2
 800e5d4:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e5d6:	7d3b      	ldrb	r3, [r7, #20]
 800e5d8:	461a      	mov	r2, r3
 800e5da:	4b26      	ldr	r3, [pc, #152]	; (800e674 <mix_sub_columns+0x348>)
 800e5dc:	5c9a      	ldrb	r2, [r3, r2]
 800e5de:	7a7b      	ldrb	r3, [r7, #9]
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	4b25      	ldr	r3, [pc, #148]	; (800e678 <mix_sub_columns+0x34c>)
 800e5e4:	5c5b      	ldrb	r3, [r3, r1]
 800e5e6:	4053      	eors	r3, r2
 800e5e8:	b2da      	uxtb	r2, r3
 800e5ea:	7bbb      	ldrb	r3, [r7, #14]
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	4b23      	ldr	r3, [pc, #140]	; (800e67c <mix_sub_columns+0x350>)
 800e5f0:	5c5b      	ldrb	r3, [r3, r1]
 800e5f2:	4053      	eors	r3, r2
 800e5f4:	b2d9      	uxtb	r1, r3
 800e5f6:	7cfb      	ldrb	r3, [r7, #19]
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	4b1e      	ldr	r3, [pc, #120]	; (800e674 <mix_sub_columns+0x348>)
 800e5fc:	5c9a      	ldrb	r2, [r3, r2]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	330d      	adds	r3, #13
 800e602:	404a      	eors	r2, r1
 800e604:	b2d2      	uxtb	r2, r2
 800e606:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e608:	7d3b      	ldrb	r3, [r7, #20]
 800e60a:	461a      	mov	r2, r3
 800e60c:	4b19      	ldr	r3, [pc, #100]	; (800e674 <mix_sub_columns+0x348>)
 800e60e:	5c9a      	ldrb	r2, [r3, r2]
 800e610:	7a7b      	ldrb	r3, [r7, #9]
 800e612:	4619      	mov	r1, r3
 800e614:	4b17      	ldr	r3, [pc, #92]	; (800e674 <mix_sub_columns+0x348>)
 800e616:	5c5b      	ldrb	r3, [r3, r1]
 800e618:	4053      	eors	r3, r2
 800e61a:	b2da      	uxtb	r2, r3
 800e61c:	7bbb      	ldrb	r3, [r7, #14]
 800e61e:	4619      	mov	r1, r3
 800e620:	4b15      	ldr	r3, [pc, #84]	; (800e678 <mix_sub_columns+0x34c>)
 800e622:	5c5b      	ldrb	r3, [r3, r1]
 800e624:	4053      	eors	r3, r2
 800e626:	b2d9      	uxtb	r1, r3
 800e628:	7cfb      	ldrb	r3, [r7, #19]
 800e62a:	461a      	mov	r2, r3
 800e62c:	4b13      	ldr	r3, [pc, #76]	; (800e67c <mix_sub_columns+0x350>)
 800e62e:	5c9a      	ldrb	r2, [r3, r2]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	330e      	adds	r3, #14
 800e634:	404a      	eors	r2, r1
 800e636:	b2d2      	uxtb	r2, r2
 800e638:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800e63a:	7d3b      	ldrb	r3, [r7, #20]
 800e63c:	461a      	mov	r2, r3
 800e63e:	4b0f      	ldr	r3, [pc, #60]	; (800e67c <mix_sub_columns+0x350>)
 800e640:	5c9a      	ldrb	r2, [r3, r2]
 800e642:	7a7b      	ldrb	r3, [r7, #9]
 800e644:	4619      	mov	r1, r3
 800e646:	4b0b      	ldr	r3, [pc, #44]	; (800e674 <mix_sub_columns+0x348>)
 800e648:	5c5b      	ldrb	r3, [r3, r1]
 800e64a:	4053      	eors	r3, r2
 800e64c:	b2da      	uxtb	r2, r3
 800e64e:	7bbb      	ldrb	r3, [r7, #14]
 800e650:	4619      	mov	r1, r3
 800e652:	4b08      	ldr	r3, [pc, #32]	; (800e674 <mix_sub_columns+0x348>)
 800e654:	5c5b      	ldrb	r3, [r3, r1]
 800e656:	4053      	eors	r3, r2
 800e658:	b2d9      	uxtb	r1, r3
 800e65a:	7cfb      	ldrb	r3, [r7, #19]
 800e65c:	461a      	mov	r2, r3
 800e65e:	4b06      	ldr	r3, [pc, #24]	; (800e678 <mix_sub_columns+0x34c>)
 800e660:	5c9a      	ldrb	r2, [r3, r2]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	330f      	adds	r3, #15
 800e666:	404a      	eors	r2, r1
 800e668:	b2d2      	uxtb	r2, r2
 800e66a:	701a      	strb	r2, [r3, #0]
  }
 800e66c:	bf00      	nop
 800e66e:	3718      	adds	r7, #24
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	0801f02c 	.word	0x0801f02c
 800e678:	0801f12c 	.word	0x0801f12c
 800e67c:	0801f22c 	.word	0x0801f22c

0800e680 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b086      	sub	sp, #24
 800e684:	af00      	add	r7, sp, #0
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	460b      	mov	r3, r1
 800e68a:	607a      	str	r2, [r7, #4]
 800e68c:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800e68e:	7afb      	ldrb	r3, [r7, #11]
 800e690:	3b10      	subs	r3, #16
 800e692:	2b10      	cmp	r3, #16
 800e694:	bf8c      	ite	hi
 800e696:	2201      	movhi	r2, #1
 800e698:	2200      	movls	r2, #0
 800e69a:	b2d2      	uxtb	r2, r2
 800e69c:	2a00      	cmp	r2, #0
 800e69e:	d10b      	bne.n	800e6b8 <lorawan_aes_set_key+0x38>
 800e6a0:	4a64      	ldr	r2, [pc, #400]	; (800e834 <lorawan_aes_set_key+0x1b4>)
 800e6a2:	fa22 f303 	lsr.w	r3, r2, r3
 800e6a6:	f003 0301 	and.w	r3, r3, #1
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	bf14      	ite	ne
 800e6ae:	2301      	movne	r3, #1
 800e6b0:	2300      	moveq	r3, #0
 800e6b2:	b2db      	uxtb	r3, r3
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d105      	bne.n	800e6c4 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800e6c0:	23ff      	movs	r3, #255	; 0xff
 800e6c2:	e0b2      	b.n	800e82a <lorawan_aes_set_key+0x1aa>
        break;
 800e6c4:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	7afa      	ldrb	r2, [r7, #11]
 800e6ca:	68f9      	ldr	r1, [r7, #12]
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7ff fbfc 	bl	800deca <copy_block_nn>
    hi = (keylen + 28) << 2;
 800e6d2:	7afb      	ldrb	r3, [r7, #11]
 800e6d4:	331c      	adds	r3, #28
 800e6d6:	b2db      	uxtb	r3, r3
 800e6d8:	009b      	lsls	r3, r3, #2
 800e6da:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800e6dc:	7c7b      	ldrb	r3, [r7, #17]
 800e6de:	091b      	lsrs	r3, r3, #4
 800e6e0:	b2db      	uxtb	r3, r3
 800e6e2:	3b01      	subs	r3, #1
 800e6e4:	b2da      	uxtb	r2, r3
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e6ec:	7afb      	ldrb	r3, [r7, #11]
 800e6ee:	75fb      	strb	r3, [r7, #23]
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	75bb      	strb	r3, [r7, #22]
 800e6f4:	e093      	b.n	800e81e <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800e6f6:	7dfb      	ldrb	r3, [r7, #23]
 800e6f8:	3b04      	subs	r3, #4
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	5cd3      	ldrb	r3, [r2, r3]
 800e6fe:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800e700:	7dfb      	ldrb	r3, [r7, #23]
 800e702:	3b03      	subs	r3, #3
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	5cd3      	ldrb	r3, [r2, r3]
 800e708:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800e70a:	7dfb      	ldrb	r3, [r7, #23]
 800e70c:	3b02      	subs	r3, #2
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	5cd3      	ldrb	r3, [r2, r3]
 800e712:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800e714:	7dfb      	ldrb	r3, [r7, #23]
 800e716:	3b01      	subs	r3, #1
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	5cd3      	ldrb	r3, [r2, r3]
 800e71c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800e71e:	7dfb      	ldrb	r3, [r7, #23]
 800e720:	7afa      	ldrb	r2, [r7, #11]
 800e722:	fbb3 f1f2 	udiv	r1, r3, r2
 800e726:	fb01 f202 	mul.w	r2, r1, r2
 800e72a:	1a9b      	subs	r3, r3, r2
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d127      	bne.n	800e782 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800e732:	7d7b      	ldrb	r3, [r7, #21]
 800e734:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800e736:	7d3b      	ldrb	r3, [r7, #20]
 800e738:	4a3f      	ldr	r2, [pc, #252]	; (800e838 <lorawan_aes_set_key+0x1b8>)
 800e73a:	5cd2      	ldrb	r2, [r2, r3]
 800e73c:	7dbb      	ldrb	r3, [r7, #22]
 800e73e:	4053      	eors	r3, r2
 800e740:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800e742:	7cfb      	ldrb	r3, [r7, #19]
 800e744:	4a3c      	ldr	r2, [pc, #240]	; (800e838 <lorawan_aes_set_key+0x1b8>)
 800e746:	5cd3      	ldrb	r3, [r2, r3]
 800e748:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800e74a:	7cbb      	ldrb	r3, [r7, #18]
 800e74c:	4a3a      	ldr	r2, [pc, #232]	; (800e838 <lorawan_aes_set_key+0x1b8>)
 800e74e:	5cd3      	ldrb	r3, [r2, r3]
 800e750:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800e752:	7c3b      	ldrb	r3, [r7, #16]
 800e754:	4a38      	ldr	r2, [pc, #224]	; (800e838 <lorawan_aes_set_key+0x1b8>)
 800e756:	5cd3      	ldrb	r3, [r2, r3]
 800e758:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800e75a:	7dbb      	ldrb	r3, [r7, #22]
 800e75c:	005b      	lsls	r3, r3, #1
 800e75e:	b25a      	sxtb	r2, r3
 800e760:	7dbb      	ldrb	r3, [r7, #22]
 800e762:	09db      	lsrs	r3, r3, #7
 800e764:	b2db      	uxtb	r3, r3
 800e766:	4619      	mov	r1, r3
 800e768:	0049      	lsls	r1, r1, #1
 800e76a:	440b      	add	r3, r1
 800e76c:	4619      	mov	r1, r3
 800e76e:	00c8      	lsls	r0, r1, #3
 800e770:	4619      	mov	r1, r3
 800e772:	4603      	mov	r3, r0
 800e774:	440b      	add	r3, r1
 800e776:	b2db      	uxtb	r3, r3
 800e778:	b25b      	sxtb	r3, r3
 800e77a:	4053      	eors	r3, r2
 800e77c:	b25b      	sxtb	r3, r3
 800e77e:	75bb      	strb	r3, [r7, #22]
 800e780:	e01c      	b.n	800e7bc <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800e782:	7afb      	ldrb	r3, [r7, #11]
 800e784:	2b18      	cmp	r3, #24
 800e786:	d919      	bls.n	800e7bc <lorawan_aes_set_key+0x13c>
 800e788:	7dfb      	ldrb	r3, [r7, #23]
 800e78a:	7afa      	ldrb	r2, [r7, #11]
 800e78c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e790:	fb01 f202 	mul.w	r2, r1, r2
 800e794:	1a9b      	subs	r3, r3, r2
 800e796:	b2db      	uxtb	r3, r3
 800e798:	2b10      	cmp	r3, #16
 800e79a:	d10f      	bne.n	800e7bc <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800e79c:	7d7b      	ldrb	r3, [r7, #21]
 800e79e:	4a26      	ldr	r2, [pc, #152]	; (800e838 <lorawan_aes_set_key+0x1b8>)
 800e7a0:	5cd3      	ldrb	r3, [r2, r3]
 800e7a2:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800e7a4:	7d3b      	ldrb	r3, [r7, #20]
 800e7a6:	4a24      	ldr	r2, [pc, #144]	; (800e838 <lorawan_aes_set_key+0x1b8>)
 800e7a8:	5cd3      	ldrb	r3, [r2, r3]
 800e7aa:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800e7ac:	7cfb      	ldrb	r3, [r7, #19]
 800e7ae:	4a22      	ldr	r2, [pc, #136]	; (800e838 <lorawan_aes_set_key+0x1b8>)
 800e7b0:	5cd3      	ldrb	r3, [r2, r3]
 800e7b2:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800e7b4:	7cbb      	ldrb	r3, [r7, #18]
 800e7b6:	4a20      	ldr	r2, [pc, #128]	; (800e838 <lorawan_aes_set_key+0x1b8>)
 800e7b8:	5cd3      	ldrb	r3, [r2, r3]
 800e7ba:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800e7bc:	7dfa      	ldrb	r2, [r7, #23]
 800e7be:	7afb      	ldrb	r3, [r7, #11]
 800e7c0:	1ad3      	subs	r3, r2, r3
 800e7c2:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800e7c4:	7c3b      	ldrb	r3, [r7, #16]
 800e7c6:	687a      	ldr	r2, [r7, #4]
 800e7c8:	5cd1      	ldrb	r1, [r2, r3]
 800e7ca:	7dfb      	ldrb	r3, [r7, #23]
 800e7cc:	7d7a      	ldrb	r2, [r7, #21]
 800e7ce:	404a      	eors	r2, r1
 800e7d0:	b2d1      	uxtb	r1, r2
 800e7d2:	687a      	ldr	r2, [r7, #4]
 800e7d4:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800e7d6:	7c3b      	ldrb	r3, [r7, #16]
 800e7d8:	3301      	adds	r3, #1
 800e7da:	687a      	ldr	r2, [r7, #4]
 800e7dc:	5cd1      	ldrb	r1, [r2, r3]
 800e7de:	7dfb      	ldrb	r3, [r7, #23]
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	7d3a      	ldrb	r2, [r7, #20]
 800e7e4:	404a      	eors	r2, r1
 800e7e6:	b2d1      	uxtb	r1, r2
 800e7e8:	687a      	ldr	r2, [r7, #4]
 800e7ea:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800e7ec:	7c3b      	ldrb	r3, [r7, #16]
 800e7ee:	3302      	adds	r3, #2
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	5cd1      	ldrb	r1, [r2, r3]
 800e7f4:	7dfb      	ldrb	r3, [r7, #23]
 800e7f6:	3302      	adds	r3, #2
 800e7f8:	7cfa      	ldrb	r2, [r7, #19]
 800e7fa:	404a      	eors	r2, r1
 800e7fc:	b2d1      	uxtb	r1, r2
 800e7fe:	687a      	ldr	r2, [r7, #4]
 800e800:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800e802:	7c3b      	ldrb	r3, [r7, #16]
 800e804:	3303      	adds	r3, #3
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	5cd1      	ldrb	r1, [r2, r3]
 800e80a:	7dfb      	ldrb	r3, [r7, #23]
 800e80c:	3303      	adds	r3, #3
 800e80e:	7cba      	ldrb	r2, [r7, #18]
 800e810:	404a      	eors	r2, r1
 800e812:	b2d1      	uxtb	r1, r2
 800e814:	687a      	ldr	r2, [r7, #4]
 800e816:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e818:	7dfb      	ldrb	r3, [r7, #23]
 800e81a:	3304      	adds	r3, #4
 800e81c:	75fb      	strb	r3, [r7, #23]
 800e81e:	7dfa      	ldrb	r2, [r7, #23]
 800e820:	7c7b      	ldrb	r3, [r7, #17]
 800e822:	429a      	cmp	r2, r3
 800e824:	f4ff af67 	bcc.w	800e6f6 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800e828:	2300      	movs	r3, #0
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3718      	adds	r7, #24
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
 800e832:	bf00      	nop
 800e834:	00010101 	.word	0x00010101
 800e838:	0801f02c 	.word	0x0801f02c

0800e83c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b08a      	sub	sp, #40	; 0x28
 800e840:	af00      	add	r7, sp, #0
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	60b9      	str	r1, [r7, #8]
 800e846:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d038      	beq.n	800e8c4 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	f107 0314 	add.w	r3, r7, #20
 800e858:	68f9      	ldr	r1, [r7, #12]
 800e85a:	4618      	mov	r0, r3
 800e85c:	f7ff fc07 	bl	800e06e <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800e860:	2301      	movs	r3, #1
 800e862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e866:	e014      	b.n	800e892 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800e868:	f107 0314 	add.w	r3, r7, #20
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7ff fd5d 	bl	800e32c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e878:	0112      	lsls	r2, r2, #4
 800e87a:	441a      	add	r2, r3
 800e87c:	f107 0314 	add.w	r3, r7, #20
 800e880:	4611      	mov	r1, r2
 800e882:	4618      	mov	r0, r3
 800e884:	f7ff fcab 	bl	800e1de <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800e888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e88c:	3301      	adds	r3, #1
 800e88e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e898:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d3e3      	bcc.n	800e868 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800e8a0:	f107 0314 	add.w	r3, r7, #20
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7ff fca7 	bl	800e1f8 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e8b0:	0112      	lsls	r2, r2, #4
 800e8b2:	441a      	add	r2, r3
 800e8b4:	f107 0314 	add.w	r3, r7, #20
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	68b8      	ldr	r0, [r7, #8]
 800e8bc:	f7ff fbd7 	bl	800e06e <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	e000      	b.n	800e8c6 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800e8c4:	23ff      	movs	r3, #255	; 0xff
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3728      	adds	r7, #40	; 0x28
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
	...

0800e8d0 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800e8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8d2:	b09d      	sub	sp, #116	; 0x74
 800e8d4:	af10      	add	r7, sp, #64	; 0x40
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800e8dc:	2306      	movs	r3, #6
 800e8de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800e8e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e8e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8ea:	4611      	mov	r1, r2
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f000 f9a7 	bl	800ec40 <SecureElementGetKeyByID>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800e8f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	f040 80b0 	bne.w	800ea62 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800e902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e906:	2b00      	cmp	r3, #0
 800e908:	d106      	bne.n	800e918 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800e90a:	4b58      	ldr	r3, [pc, #352]	; (800ea6c <PrintKey+0x19c>)
 800e90c:	2200      	movs	r2, #0
 800e90e:	2100      	movs	r1, #0
 800e910:	2002      	movs	r0, #2
 800e912:	f00f fadb 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
 800e916:	e056      	b.n	800e9c6 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800e918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e91c:	2b01      	cmp	r3, #1
 800e91e:	d106      	bne.n	800e92e <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800e920:	4b53      	ldr	r3, [pc, #332]	; (800ea70 <PrintKey+0x1a0>)
 800e922:	2200      	movs	r2, #0
 800e924:	2100      	movs	r1, #0
 800e926:	2002      	movs	r0, #2
 800e928:	f00f fad0 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
 800e92c:	e04b      	b.n	800e9c6 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800e92e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e932:	2b03      	cmp	r3, #3
 800e934:	d106      	bne.n	800e944 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800e936:	4b4f      	ldr	r3, [pc, #316]	; (800ea74 <PrintKey+0x1a4>)
 800e938:	2200      	movs	r2, #0
 800e93a:	2100      	movs	r1, #0
 800e93c:	2002      	movs	r0, #2
 800e93e:	f00f fac5 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
 800e942:	e040      	b.n	800e9c6 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800e944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e948:	2b02      	cmp	r3, #2
 800e94a:	d106      	bne.n	800e95a <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800e94c:	4b4a      	ldr	r3, [pc, #296]	; (800ea78 <PrintKey+0x1a8>)
 800e94e:	2200      	movs	r2, #0
 800e950:	2100      	movs	r1, #0
 800e952:	2002      	movs	r0, #2
 800e954:	f00f faba 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
 800e958:	e035      	b.n	800e9c6 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800e95a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e95e:	2b04      	cmp	r3, #4
 800e960:	d106      	bne.n	800e970 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800e962:	4b46      	ldr	r3, [pc, #280]	; (800ea7c <PrintKey+0x1ac>)
 800e964:	2200      	movs	r2, #0
 800e966:	2100      	movs	r1, #0
 800e968:	2002      	movs	r0, #2
 800e96a:	f00f faaf 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
 800e96e:	e02a      	b.n	800e9c6 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800e970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e974:	2b7f      	cmp	r3, #127	; 0x7f
 800e976:	d106      	bne.n	800e986 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800e978:	4b41      	ldr	r3, [pc, #260]	; (800ea80 <PrintKey+0x1b0>)
 800e97a:	2200      	movs	r2, #0
 800e97c:	2100      	movs	r1, #0
 800e97e:	2002      	movs	r0, #2
 800e980:	f00f faa4 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
 800e984:	e01f      	b.n	800e9c6 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800e986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e98a:	2b80      	cmp	r3, #128	; 0x80
 800e98c:	d106      	bne.n	800e99c <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800e98e:	4b3d      	ldr	r3, [pc, #244]	; (800ea84 <PrintKey+0x1b4>)
 800e990:	2200      	movs	r2, #0
 800e992:	2100      	movs	r1, #0
 800e994:	2002      	movs	r0, #2
 800e996:	f00f fa99 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
 800e99a:	e014      	b.n	800e9c6 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800e99c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9a0:	2b81      	cmp	r3, #129	; 0x81
 800e9a2:	d106      	bne.n	800e9b2 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800e9a4:	4b38      	ldr	r3, [pc, #224]	; (800ea88 <PrintKey+0x1b8>)
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	2100      	movs	r1, #0
 800e9aa:	2002      	movs	r0, #2
 800e9ac:	f00f fa8e 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
 800e9b0:	e009      	b.n	800e9c6 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800e9b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9b6:	2b82      	cmp	r3, #130	; 0x82
 800e9b8:	d105      	bne.n	800e9c6 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800e9ba:	4b34      	ldr	r3, [pc, #208]	; (800ea8c <PrintKey+0x1bc>)
 800e9bc:	2200      	movs	r2, #0
 800e9be:	2100      	movs	r1, #0
 800e9c0:	2002      	movs	r0, #2
 800e9c2:	f00f fa83 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800e9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c8:	785b      	ldrb	r3, [r3, #1]
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ce:	789b      	ldrb	r3, [r3, #2]
 800e9d0:	461c      	mov	r4, r3
 800e9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d4:	78db      	ldrb	r3, [r3, #3]
 800e9d6:	461d      	mov	r5, r3
 800e9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9da:	791b      	ldrb	r3, [r3, #4]
 800e9dc:	461e      	mov	r6, r3
 800e9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e0:	795b      	ldrb	r3, [r3, #5]
 800e9e2:	623b      	str	r3, [r7, #32]
 800e9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e6:	799b      	ldrb	r3, [r3, #6]
 800e9e8:	61fb      	str	r3, [r7, #28]
 800e9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ec:	79db      	ldrb	r3, [r3, #7]
 800e9ee:	61bb      	str	r3, [r7, #24]
 800e9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f2:	7a1b      	ldrb	r3, [r3, #8]
 800e9f4:	617b      	str	r3, [r7, #20]
 800e9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f8:	7a5b      	ldrb	r3, [r3, #9]
 800e9fa:	613b      	str	r3, [r7, #16]
 800e9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fe:	7a9b      	ldrb	r3, [r3, #10]
 800ea00:	60fb      	str	r3, [r7, #12]
 800ea02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea04:	7adb      	ldrb	r3, [r3, #11]
 800ea06:	60bb      	str	r3, [r7, #8]
 800ea08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0a:	7b1b      	ldrb	r3, [r3, #12]
 800ea0c:	607b      	str	r3, [r7, #4]
 800ea0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea10:	7b5b      	ldrb	r3, [r3, #13]
 800ea12:	603b      	str	r3, [r7, #0]
 800ea14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea16:	7b9b      	ldrb	r3, [r3, #14]
 800ea18:	4619      	mov	r1, r3
 800ea1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1c:	7bdb      	ldrb	r3, [r3, #15]
 800ea1e:	461a      	mov	r2, r3
 800ea20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea22:	7c1b      	ldrb	r3, [r3, #16]
 800ea24:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea26:	920e      	str	r2, [sp, #56]	; 0x38
 800ea28:	910d      	str	r1, [sp, #52]	; 0x34
 800ea2a:	683a      	ldr	r2, [r7, #0]
 800ea2c:	920c      	str	r2, [sp, #48]	; 0x30
 800ea2e:	687a      	ldr	r2, [r7, #4]
 800ea30:	920b      	str	r2, [sp, #44]	; 0x2c
 800ea32:	68ba      	ldr	r2, [r7, #8]
 800ea34:	920a      	str	r2, [sp, #40]	; 0x28
 800ea36:	68fa      	ldr	r2, [r7, #12]
 800ea38:	9209      	str	r2, [sp, #36]	; 0x24
 800ea3a:	693a      	ldr	r2, [r7, #16]
 800ea3c:	9208      	str	r2, [sp, #32]
 800ea3e:	697a      	ldr	r2, [r7, #20]
 800ea40:	9207      	str	r2, [sp, #28]
 800ea42:	69ba      	ldr	r2, [r7, #24]
 800ea44:	9206      	str	r2, [sp, #24]
 800ea46:	69fa      	ldr	r2, [r7, #28]
 800ea48:	9205      	str	r2, [sp, #20]
 800ea4a:	6a3b      	ldr	r3, [r7, #32]
 800ea4c:	9304      	str	r3, [sp, #16]
 800ea4e:	9603      	str	r6, [sp, #12]
 800ea50:	9502      	str	r5, [sp, #8]
 800ea52:	9401      	str	r4, [sp, #4]
 800ea54:	9000      	str	r0, [sp, #0]
 800ea56:	4b0e      	ldr	r3, [pc, #56]	; (800ea90 <PrintKey+0x1c0>)
 800ea58:	2200      	movs	r2, #0
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	2002      	movs	r0, #2
 800ea5e:	f00f fa35 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800ea62:	bf00      	nop
 800ea64:	3734      	adds	r7, #52	; 0x34
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea6a:	bf00      	nop
 800ea6c:	0801eaac 	.word	0x0801eaac
 800ea70:	0801eac4 	.word	0x0801eac4
 800ea74:	0801eadc 	.word	0x0801eadc
 800ea78:	0801eaf4 	.word	0x0801eaf4
 800ea7c:	0801eb0c 	.word	0x0801eb0c
 800ea80:	0801eb24 	.word	0x0801eb24
 800ea84:	0801eb3c 	.word	0x0801eb3c
 800ea88:	0801eb54 	.word	0x0801eb54
 800ea8c:	0801eb6c 	.word	0x0801eb6c
 800ea90:	0801eb84 	.word	0x0801eb84

0800ea94 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800ea94:	b480      	push	{r7}
 800ea96:	b085      	sub	sp, #20
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	6039      	str	r1, [r7, #0]
 800ea9e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	73fb      	strb	r3, [r7, #15]
 800eaa4:	e01a      	b.n	800eadc <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800eaa6:	4b12      	ldr	r3, [pc, #72]	; (800eaf0 <GetKeyByID+0x5c>)
 800eaa8:	6819      	ldr	r1, [r3, #0]
 800eaaa:	7bfa      	ldrb	r2, [r7, #15]
 800eaac:	4613      	mov	r3, r2
 800eaae:	011b      	lsls	r3, r3, #4
 800eab0:	4413      	add	r3, r2
 800eab2:	440b      	add	r3, r1
 800eab4:	3310      	adds	r3, #16
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	79fa      	ldrb	r2, [r7, #7]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d10b      	bne.n	800ead6 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800eabe:	4b0c      	ldr	r3, [pc, #48]	; (800eaf0 <GetKeyByID+0x5c>)
 800eac0:	6819      	ldr	r1, [r3, #0]
 800eac2:	7bfa      	ldrb	r2, [r7, #15]
 800eac4:	4613      	mov	r3, r2
 800eac6:	011b      	lsls	r3, r3, #4
 800eac8:	4413      	add	r3, r2
 800eaca:	3310      	adds	r3, #16
 800eacc:	18ca      	adds	r2, r1, r3
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ead2:	2300      	movs	r3, #0
 800ead4:	e006      	b.n	800eae4 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ead6:	7bfb      	ldrb	r3, [r7, #15]
 800ead8:	3301      	adds	r3, #1
 800eada:	73fb      	strb	r3, [r7, #15]
 800eadc:	7bfb      	ldrb	r3, [r7, #15]
 800eade:	2b09      	cmp	r3, #9
 800eae0:	d9e1      	bls.n	800eaa6 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800eae2:	2303      	movs	r3, #3
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3714      	adds	r7, #20
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bc80      	pop	{r7}
 800eaec:	4770      	bx	lr
 800eaee:	bf00      	nop
 800eaf0:	200007d4 	.word	0x200007d4

0800eaf4 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800eaf4:	b590      	push	{r4, r7, lr}
 800eaf6:	b0d1      	sub	sp, #324	; 0x144
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800eafe:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800eb02:	6020      	str	r0, [r4, #0]
 800eb04:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800eb08:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800eb0c:	6001      	str	r1, [r0, #0]
 800eb0e:	4619      	mov	r1, r3
 800eb10:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eb14:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800eb18:	801a      	strh	r2, [r3, #0]
 800eb1a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eb1e:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800eb22:	460a      	mov	r2, r1
 800eb24:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800eb26:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eb2a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d003      	beq.n	800eb3c <ComputeCmac+0x48>
 800eb34:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d101      	bne.n	800eb40 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800eb3c:	2302      	movs	r3, #2
 800eb3e:	e05c      	b.n	800ebfa <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800eb40:	f107 0314 	add.w	r3, r7, #20
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7fe ff1b 	bl	800d980 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800eb4a:	f107 0210 	add.w	r2, r7, #16
 800eb4e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eb52:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	4611      	mov	r1, r2
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7ff ff9a 	bl	800ea94 <GetKeyByID>
 800eb60:	4603      	mov	r3, r0
 800eb62:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800eb66:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d143      	bne.n	800ebf6 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800eb6e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eb72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	1c5a      	adds	r2, r3, #1
 800eb7a:	f107 0314 	add.w	r3, r7, #20
 800eb7e:	4611      	mov	r1, r2
 800eb80:	4618      	mov	r0, r3
 800eb82:	f7fe ff16 	bl	800d9b2 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800eb86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eb8a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d009      	beq.n	800eba8 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800eb94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eb98:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800eb9c:	f107 0014 	add.w	r0, r7, #20
 800eba0:	2210      	movs	r2, #16
 800eba2:	6819      	ldr	r1, [r3, #0]
 800eba4:	f7fe ff14 	bl	800d9d0 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800eba8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ebac:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800ebb0:	881a      	ldrh	r2, [r3, #0]
 800ebb2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ebb6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ebba:	f107 0014 	add.w	r0, r7, #20
 800ebbe:	6819      	ldr	r1, [r3, #0]
 800ebc0:	f7fe ff06 	bl	800d9d0 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ebc4:	f107 0214 	add.w	r2, r7, #20
 800ebc8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800ebcc:	4611      	mov	r1, r2
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7fe ffc0 	bl	800db54 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ebd4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800ebd8:	061a      	lsls	r2, r3, #24
 800ebda:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800ebde:	041b      	lsls	r3, r3, #16
 800ebe0:	431a      	orrs	r2, r3
 800ebe2:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800ebe6:	021b      	lsls	r3, r3, #8
 800ebe8:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800ebea:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ebee:	431a      	orrs	r2, r3
 800ebf0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ebf4:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800ebf6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd90      	pop	{r4, r7, pc}

0800ec04 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d101      	bne.n	800ec18 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ec14:	2302      	movs	r3, #2
 800ec16:	e00a      	b.n	800ec2e <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800ec18:	4a07      	ldr	r2, [pc, #28]	; (800ec38 <SecureElementInit+0x34>)
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800ec1e:	4b06      	ldr	r3, [pc, #24]	; (800ec38 <SecureElementInit+0x34>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	22c0      	movs	r2, #192	; 0xc0
 800ec24:	4905      	ldr	r1, [pc, #20]	; (800ec3c <SecureElementInit+0x38>)
 800ec26:	4618      	mov	r0, r3
 800ec28:	f00a fdfd 	bl	8019826 <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800ec2c:	2300      	movs	r3, #0
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3708      	adds	r7, #8
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	200007d4 	.word	0x200007d4
 800ec3c:	0801f4bc 	.word	0x0801f4bc

0800ec40 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800ec40:	b480      	push	{r7}
 800ec42:	b085      	sub	sp, #20
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	4603      	mov	r3, r0
 800ec48:	6039      	str	r1, [r7, #0]
 800ec4a:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	73fb      	strb	r3, [r7, #15]
 800ec50:	e01a      	b.n	800ec88 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800ec52:	4b12      	ldr	r3, [pc, #72]	; (800ec9c <SecureElementGetKeyByID+0x5c>)
 800ec54:	6819      	ldr	r1, [r3, #0]
 800ec56:	7bfa      	ldrb	r2, [r7, #15]
 800ec58:	4613      	mov	r3, r2
 800ec5a:	011b      	lsls	r3, r3, #4
 800ec5c:	4413      	add	r3, r2
 800ec5e:	440b      	add	r3, r1
 800ec60:	3310      	adds	r3, #16
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	79fa      	ldrb	r2, [r7, #7]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d10b      	bne.n	800ec82 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800ec6a:	4b0c      	ldr	r3, [pc, #48]	; (800ec9c <SecureElementGetKeyByID+0x5c>)
 800ec6c:	6819      	ldr	r1, [r3, #0]
 800ec6e:	7bfa      	ldrb	r2, [r7, #15]
 800ec70:	4613      	mov	r3, r2
 800ec72:	011b      	lsls	r3, r3, #4
 800ec74:	4413      	add	r3, r2
 800ec76:	3310      	adds	r3, #16
 800ec78:	18ca      	adds	r2, r1, r3
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	e006      	b.n	800ec90 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ec82:	7bfb      	ldrb	r3, [r7, #15]
 800ec84:	3301      	adds	r3, #1
 800ec86:	73fb      	strb	r3, [r7, #15]
 800ec88:	7bfb      	ldrb	r3, [r7, #15]
 800ec8a:	2b09      	cmp	r3, #9
 800ec8c:	d9e1      	bls.n	800ec52 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ec8e:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3714      	adds	r7, #20
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bc80      	pop	{r7}
 800ec98:	4770      	bx	lr
 800ec9a:	bf00      	nop
 800ec9c:	200007d4 	.word	0x200007d4

0800eca0 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800eca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eca2:	b08b      	sub	sp, #44	; 0x2c
 800eca4:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800eca6:	4b3f      	ldr	r3, [pc, #252]	; (800eda4 <SecureElementPrintKeys+0x104>)
 800eca8:	2200      	movs	r2, #0
 800ecaa:	2100      	movs	r1, #0
 800ecac:	2002      	movs	r0, #2
 800ecae:	f00f f90d 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800ecb2:	2000      	movs	r0, #0
 800ecb4:	f7ff fe0c 	bl	800e8d0 <PrintKey>
    PrintKey(NWK_KEY);
 800ecb8:	2001      	movs	r0, #1
 800ecba:	f7ff fe09 	bl	800e8d0 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800ecbe:	4b3a      	ldr	r3, [pc, #232]	; (800eda8 <SecureElementPrintKeys+0x108>)
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	2002      	movs	r0, #2
 800ecc6:	f00f f901 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800ecca:	2003      	movs	r0, #3
 800eccc:	f7ff fe00 	bl	800e8d0 <PrintKey>
    PrintKey(NWK_S_KEY);
 800ecd0:	2002      	movs	r0, #2
 800ecd2:	f7ff fdfd 	bl	800e8d0 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800ecd6:	4b35      	ldr	r3, [pc, #212]	; (800edac <SecureElementPrintKeys+0x10c>)
 800ecd8:	2200      	movs	r2, #0
 800ecda:	2100      	movs	r1, #0
 800ecdc:	2002      	movs	r0, #2
 800ecde:	f00f f8f5 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ece2:	4b33      	ldr	r3, [pc, #204]	; (800edb0 <SecureElementPrintKeys+0x110>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	461a      	mov	r2, r3
 800ecea:	4b31      	ldr	r3, [pc, #196]	; (800edb0 <SecureElementPrintKeys+0x110>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	785b      	ldrb	r3, [r3, #1]
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	4b2f      	ldr	r3, [pc, #188]	; (800edb0 <SecureElementPrintKeys+0x110>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	789b      	ldrb	r3, [r3, #2]
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	4b2d      	ldr	r3, [pc, #180]	; (800edb0 <SecureElementPrintKeys+0x110>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	78db      	ldrb	r3, [r3, #3]
 800ed00:	461c      	mov	r4, r3
 800ed02:	4b2b      	ldr	r3, [pc, #172]	; (800edb0 <SecureElementPrintKeys+0x110>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	791b      	ldrb	r3, [r3, #4]
 800ed08:	461d      	mov	r5, r3
 800ed0a:	4b29      	ldr	r3, [pc, #164]	; (800edb0 <SecureElementPrintKeys+0x110>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	795b      	ldrb	r3, [r3, #5]
 800ed10:	461e      	mov	r6, r3
 800ed12:	4b27      	ldr	r3, [pc, #156]	; (800edb0 <SecureElementPrintKeys+0x110>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	799b      	ldrb	r3, [r3, #6]
 800ed18:	607b      	str	r3, [r7, #4]
 800ed1a:	4b25      	ldr	r3, [pc, #148]	; (800edb0 <SecureElementPrintKeys+0x110>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	79db      	ldrb	r3, [r3, #7]
 800ed20:	9307      	str	r3, [sp, #28]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	9306      	str	r3, [sp, #24]
 800ed26:	9605      	str	r6, [sp, #20]
 800ed28:	9504      	str	r5, [sp, #16]
 800ed2a:	9403      	str	r4, [sp, #12]
 800ed2c:	9002      	str	r0, [sp, #8]
 800ed2e:	9101      	str	r1, [sp, #4]
 800ed30:	9200      	str	r2, [sp, #0]
 800ed32:	4b20      	ldr	r3, [pc, #128]	; (800edb4 <SecureElementPrintKeys+0x114>)
 800ed34:	2200      	movs	r2, #0
 800ed36:	2100      	movs	r1, #0
 800ed38:	2002      	movs	r0, #2
 800ed3a:	f00f f8c7 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ed3e:	4b1c      	ldr	r3, [pc, #112]	; (800edb0 <SecureElementPrintKeys+0x110>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	7a1b      	ldrb	r3, [r3, #8]
 800ed44:	461a      	mov	r2, r3
 800ed46:	4b1a      	ldr	r3, [pc, #104]	; (800edb0 <SecureElementPrintKeys+0x110>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	7a5b      	ldrb	r3, [r3, #9]
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	4b18      	ldr	r3, [pc, #96]	; (800edb0 <SecureElementPrintKeys+0x110>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	7a9b      	ldrb	r3, [r3, #10]
 800ed54:	4618      	mov	r0, r3
 800ed56:	4b16      	ldr	r3, [pc, #88]	; (800edb0 <SecureElementPrintKeys+0x110>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	7adb      	ldrb	r3, [r3, #11]
 800ed5c:	461c      	mov	r4, r3
 800ed5e:	4b14      	ldr	r3, [pc, #80]	; (800edb0 <SecureElementPrintKeys+0x110>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	7b1b      	ldrb	r3, [r3, #12]
 800ed64:	461d      	mov	r5, r3
 800ed66:	4b12      	ldr	r3, [pc, #72]	; (800edb0 <SecureElementPrintKeys+0x110>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	7b5b      	ldrb	r3, [r3, #13]
 800ed6c:	461e      	mov	r6, r3
 800ed6e:	4b10      	ldr	r3, [pc, #64]	; (800edb0 <SecureElementPrintKeys+0x110>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	7b9b      	ldrb	r3, [r3, #14]
 800ed74:	607b      	str	r3, [r7, #4]
 800ed76:	4b0e      	ldr	r3, [pc, #56]	; (800edb0 <SecureElementPrintKeys+0x110>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	7bdb      	ldrb	r3, [r3, #15]
 800ed7c:	9307      	str	r3, [sp, #28]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	9306      	str	r3, [sp, #24]
 800ed82:	9605      	str	r6, [sp, #20]
 800ed84:	9504      	str	r5, [sp, #16]
 800ed86:	9403      	str	r4, [sp, #12]
 800ed88:	9002      	str	r0, [sp, #8]
 800ed8a:	9101      	str	r1, [sp, #4]
 800ed8c:	9200      	str	r2, [sp, #0]
 800ed8e:	4b0a      	ldr	r3, [pc, #40]	; (800edb8 <SecureElementPrintKeys+0x118>)
 800ed90:	2200      	movs	r2, #0
 800ed92:	2100      	movs	r1, #0
 800ed94:	2002      	movs	r0, #2
 800ed96:	f00f f899 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800ed9a:	2300      	movs	r3, #0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	370c      	adds	r7, #12
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eda4:	0801ebd8 	.word	0x0801ebd8
 800eda8:	0801ebf0 	.word	0x0801ebf0
 800edac:	0801ec08 	.word	0x0801ec08
 800edb0:	200007d4 	.word	0x200007d4
 800edb4:	0801ec20 	.word	0x0801ec20
 800edb8:	0801ec60 	.word	0x0801ec60

0800edbc <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800edc0:	2004      	movs	r0, #4
 800edc2:	f7ff fd85 	bl	800e8d0 <PrintKey>
    PrintKey(MC_KE_KEY);
 800edc6:	207f      	movs	r0, #127	; 0x7f
 800edc8:	f7ff fd82 	bl	800e8d0 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800edcc:	2002      	movs	r0, #2
 800edce:	f7ff fd7f 	bl	800e8d0 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800edd2:	2003      	movs	r0, #3
 800edd4:	f7ff fd7c 	bl	800e8d0 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800edd8:	2300      	movs	r3, #0
}
 800edda:	4618      	mov	r0, r3
 800eddc:	bd80      	pop	{r7, pc}
	...

0800ede0 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b088      	sub	sp, #32
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	4603      	mov	r3, r0
 800ede8:	6039      	str	r1, [r7, #0]
 800edea:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d101      	bne.n	800edf6 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800edf2:	2302      	movs	r3, #2
 800edf4:	e04c      	b.n	800ee90 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800edf6:	2300      	movs	r3, #0
 800edf8:	77fb      	strb	r3, [r7, #31]
 800edfa:	e045      	b.n	800ee88 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800edfc:	4b26      	ldr	r3, [pc, #152]	; (800ee98 <SecureElementSetKey+0xb8>)
 800edfe:	6819      	ldr	r1, [r3, #0]
 800ee00:	7ffa      	ldrb	r2, [r7, #31]
 800ee02:	4613      	mov	r3, r2
 800ee04:	011b      	lsls	r3, r3, #4
 800ee06:	4413      	add	r3, r2
 800ee08:	440b      	add	r3, r1
 800ee0a:	3310      	adds	r3, #16
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	79fa      	ldrb	r2, [r7, #7]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d136      	bne.n	800ee82 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800ee14:	79fb      	ldrb	r3, [r7, #7]
 800ee16:	2b80      	cmp	r3, #128	; 0x80
 800ee18:	d123      	bne.n	800ee62 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800ee1a:	2306      	movs	r3, #6
 800ee1c:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800ee1e:	2300      	movs	r3, #0
 800ee20:	60fb      	str	r3, [r7, #12]
 800ee22:	f107 0310 	add.w	r3, r7, #16
 800ee26:	2200      	movs	r2, #0
 800ee28:	601a      	str	r2, [r3, #0]
 800ee2a:	605a      	str	r2, [r3, #4]
 800ee2c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800ee2e:	f107 030c 	add.w	r3, r7, #12
 800ee32:	227f      	movs	r2, #127	; 0x7f
 800ee34:	2110      	movs	r1, #16
 800ee36:	6838      	ldr	r0, [r7, #0]
 800ee38:	f000 f87d 	bl	800ef36 <SecureElementAesEncrypt>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800ee40:	4b15      	ldr	r3, [pc, #84]	; (800ee98 <SecureElementSetKey+0xb8>)
 800ee42:	6819      	ldr	r1, [r3, #0]
 800ee44:	7ffa      	ldrb	r2, [r7, #31]
 800ee46:	4613      	mov	r3, r2
 800ee48:	011b      	lsls	r3, r3, #4
 800ee4a:	4413      	add	r3, r2
 800ee4c:	3310      	adds	r3, #16
 800ee4e:	440b      	add	r3, r1
 800ee50:	3301      	adds	r3, #1
 800ee52:	f107 010c 	add.w	r1, r7, #12
 800ee56:	2210      	movs	r2, #16
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f00a fce4 	bl	8019826 <memcpy1>
                return retval;
 800ee5e:	7fbb      	ldrb	r3, [r7, #30]
 800ee60:	e016      	b.n	800ee90 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800ee62:	4b0d      	ldr	r3, [pc, #52]	; (800ee98 <SecureElementSetKey+0xb8>)
 800ee64:	6819      	ldr	r1, [r3, #0]
 800ee66:	7ffa      	ldrb	r2, [r7, #31]
 800ee68:	4613      	mov	r3, r2
 800ee6a:	011b      	lsls	r3, r3, #4
 800ee6c:	4413      	add	r3, r2
 800ee6e:	3310      	adds	r3, #16
 800ee70:	440b      	add	r3, r1
 800ee72:	3301      	adds	r3, #1
 800ee74:	2210      	movs	r2, #16
 800ee76:	6839      	ldr	r1, [r7, #0]
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f00a fcd4 	bl	8019826 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	e006      	b.n	800ee90 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ee82:	7ffb      	ldrb	r3, [r7, #31]
 800ee84:	3301      	adds	r3, #1
 800ee86:	77fb      	strb	r3, [r7, #31]
 800ee88:	7ffb      	ldrb	r3, [r7, #31]
 800ee8a:	2b09      	cmp	r3, #9
 800ee8c:	d9b6      	bls.n	800edfc <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ee8e:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3720      	adds	r7, #32
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}
 800ee98:	200007d4 	.word	0x200007d4

0800ee9c <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b086      	sub	sp, #24
 800eea0:	af02      	add	r7, sp, #8
 800eea2:	60f8      	str	r0, [r7, #12]
 800eea4:	60b9      	str	r1, [r7, #8]
 800eea6:	4611      	mov	r1, r2
 800eea8:	461a      	mov	r2, r3
 800eeaa:	460b      	mov	r3, r1
 800eeac:	80fb      	strh	r3, [r7, #6]
 800eeae:	4613      	mov	r3, r2
 800eeb0:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800eeb2:	797b      	ldrb	r3, [r7, #5]
 800eeb4:	2b7e      	cmp	r3, #126	; 0x7e
 800eeb6:	d901      	bls.n	800eebc <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800eeb8:	2303      	movs	r3, #3
 800eeba:	e009      	b.n	800eed0 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800eebc:	7979      	ldrb	r1, [r7, #5]
 800eebe:	88fa      	ldrh	r2, [r7, #6]
 800eec0:	69bb      	ldr	r3, [r7, #24]
 800eec2:	9300      	str	r3, [sp, #0]
 800eec4:	460b      	mov	r3, r1
 800eec6:	68b9      	ldr	r1, [r7, #8]
 800eec8:	68f8      	ldr	r0, [r7, #12]
 800eeca:	f7ff fe13 	bl	800eaf4 <ComputeCmac>
 800eece:	4603      	mov	r3, r0
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3710      	adds	r7, #16
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b088      	sub	sp, #32
 800eedc:	af02      	add	r7, sp, #8
 800eede:	60f8      	str	r0, [r7, #12]
 800eee0:	607a      	str	r2, [r7, #4]
 800eee2:	461a      	mov	r2, r3
 800eee4:	460b      	mov	r3, r1
 800eee6:	817b      	strh	r3, [r7, #10]
 800eee8:	4613      	mov	r3, r2
 800eeea:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d101      	bne.n	800eef6 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800eef2:	2302      	movs	r3, #2
 800eef4:	e01b      	b.n	800ef2e <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800eef6:	2306      	movs	r3, #6
 800eef8:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800eefa:	2300      	movs	r3, #0
 800eefc:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800eefe:	7a79      	ldrb	r1, [r7, #9]
 800ef00:	897a      	ldrh	r2, [r7, #10]
 800ef02:	f107 0310 	add.w	r3, r7, #16
 800ef06:	9300      	str	r3, [sp, #0]
 800ef08:	460b      	mov	r3, r1
 800ef0a:	68f9      	ldr	r1, [r7, #12]
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	f7ff fdf1 	bl	800eaf4 <ComputeCmac>
 800ef12:	4603      	mov	r3, r0
 800ef14:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ef16:	7dfb      	ldrb	r3, [r7, #23]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d001      	beq.n	800ef20 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800ef1c:	7dfb      	ldrb	r3, [r7, #23]
 800ef1e:	e006      	b.n	800ef2e <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d001      	beq.n	800ef2c <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800ef28:	2301      	movs	r3, #1
 800ef2a:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800ef2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3718      	adds	r7, #24
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}

0800ef36 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800ef36:	b580      	push	{r7, lr}
 800ef38:	b0c2      	sub	sp, #264	; 0x108
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	60f8      	str	r0, [r7, #12]
 800ef3e:	4608      	mov	r0, r1
 800ef40:	4611      	mov	r1, r2
 800ef42:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800ef46:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800ef4a:	6013      	str	r3, [r2, #0]
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	817b      	strh	r3, [r7, #10]
 800ef50:	460b      	mov	r3, r1
 800ef52:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d006      	beq.n	800ef68 <SecureElementAesEncrypt+0x32>
 800ef5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d101      	bne.n	800ef6c <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ef68:	2302      	movs	r3, #2
 800ef6a:	e046      	b.n	800effa <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800ef6c:	897b      	ldrh	r3, [r7, #10]
 800ef6e:	f003 030f 	and.w	r3, r3, #15
 800ef72:	b29b      	uxth	r3, r3
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d001      	beq.n	800ef7c <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800ef78:	2305      	movs	r3, #5
 800ef7a:	e03e      	b.n	800effa <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800ef7c:	f107 0314 	add.w	r3, r7, #20
 800ef80:	22f0      	movs	r2, #240	; 0xf0
 800ef82:	2100      	movs	r1, #0
 800ef84:	4618      	mov	r0, r3
 800ef86:	f00a fc89 	bl	801989c <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800ef8a:	f107 0210 	add.w	r2, r7, #16
 800ef8e:	7a7b      	ldrb	r3, [r7, #9]
 800ef90:	4611      	mov	r1, r2
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7ff fd7e 	bl	800ea94 <GetKeyByID>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ef9e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d127      	bne.n	800eff6 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	3301      	adds	r3, #1
 800efaa:	f107 0214 	add.w	r2, r7, #20
 800efae:	2110      	movs	r1, #16
 800efb0:	4618      	mov	r0, r3
 800efb2:	f7ff fb65 	bl	800e680 <lorawan_aes_set_key>

        uint8_t block = 0;
 800efb6:	2300      	movs	r3, #0
 800efb8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800efbc:	e018      	b.n	800eff0 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800efbe:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800efc2:	68fa      	ldr	r2, [r7, #12]
 800efc4:	18d0      	adds	r0, r2, r3
 800efc6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800efca:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800efce:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800efd2:	6812      	ldr	r2, [r2, #0]
 800efd4:	4413      	add	r3, r2
 800efd6:	f107 0214 	add.w	r2, r7, #20
 800efda:	4619      	mov	r1, r3
 800efdc:	f7ff fc2e 	bl	800e83c <lorawan_aes_encrypt>
            block = block + 16;
 800efe0:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800efe4:	3310      	adds	r3, #16
 800efe6:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800efea:	897b      	ldrh	r3, [r7, #10]
 800efec:	3b10      	subs	r3, #16
 800efee:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800eff0:	897b      	ldrh	r3, [r7, #10]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d1e3      	bne.n	800efbe <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800eff6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800effa:	4618      	mov	r0, r3
 800effc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b088      	sub	sp, #32
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	460b      	mov	r3, r1
 800f00e:	70fb      	strb	r3, [r7, #3]
 800f010:	4613      	mov	r3, r2
 800f012:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d101      	bne.n	800f01e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f01a:	2302      	movs	r3, #2
 800f01c:	e02e      	b.n	800f07c <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800f01e:	2306      	movs	r3, #6
 800f020:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800f022:	78bb      	ldrb	r3, [r7, #2]
 800f024:	2b7f      	cmp	r3, #127	; 0x7f
 800f026:	d104      	bne.n	800f032 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800f028:	78fb      	ldrb	r3, [r7, #3]
 800f02a:	2b04      	cmp	r3, #4
 800f02c:	d001      	beq.n	800f032 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f02e:	2303      	movs	r3, #3
 800f030:	e024      	b.n	800f07c <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800f032:	2300      	movs	r3, #0
 800f034:	60fb      	str	r3, [r7, #12]
 800f036:	f107 0310 	add.w	r3, r7, #16
 800f03a:	2200      	movs	r2, #0
 800f03c:	601a      	str	r2, [r3, #0]
 800f03e:	605a      	str	r2, [r3, #4]
 800f040:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800f042:	f107 030c 	add.w	r3, r7, #12
 800f046:	78fa      	ldrb	r2, [r7, #3]
 800f048:	2110      	movs	r1, #16
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f7ff ff73 	bl	800ef36 <SecureElementAesEncrypt>
 800f050:	4603      	mov	r3, r0
 800f052:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f054:	7ffb      	ldrb	r3, [r7, #31]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d001      	beq.n	800f05e <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800f05a:	7ffb      	ldrb	r3, [r7, #31]
 800f05c:	e00e      	b.n	800f07c <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800f05e:	f107 020c 	add.w	r2, r7, #12
 800f062:	78bb      	ldrb	r3, [r7, #2]
 800f064:	4611      	mov	r1, r2
 800f066:	4618      	mov	r0, r3
 800f068:	f7ff feba 	bl	800ede0 <SecureElementSetKey>
 800f06c:	4603      	mov	r3, r0
 800f06e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f070:	7ffb      	ldrb	r3, [r7, #31]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d001      	beq.n	800f07a <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800f076:	7ffb      	ldrb	r3, [r7, #31]
 800f078:	e000      	b.n	800f07c <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f07a:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3720      	adds	r7, #32
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}

0800f084 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b086      	sub	sp, #24
 800f088:	af00      	add	r7, sp, #0
 800f08a:	60b9      	str	r1, [r7, #8]
 800f08c:	607b      	str	r3, [r7, #4]
 800f08e:	4603      	mov	r3, r0
 800f090:	73fb      	strb	r3, [r7, #15]
 800f092:	4613      	mov	r3, r2
 800f094:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d005      	beq.n	800f0a8 <SecureElementProcessJoinAccept+0x24>
 800f09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d002      	beq.n	800f0a8 <SecureElementProcessJoinAccept+0x24>
 800f0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d101      	bne.n	800f0ac <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f0a8:	2302      	movs	r3, #2
 800f0aa:	e064      	b.n	800f176 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800f0ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f0b0:	2b21      	cmp	r3, #33	; 0x21
 800f0b2:	d901      	bls.n	800f0b8 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f0b4:	2305      	movs	r3, #5
 800f0b6:	e05e      	b.n	800f176 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800f0bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	6879      	ldr	r1, [r7, #4]
 800f0c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0c8:	f00a fbad 	bl	8019826 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	1c58      	adds	r0, r3, #1
 800f0d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	3b01      	subs	r3, #1
 800f0d8:	b299      	uxth	r1, r3
 800f0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0dc:	3301      	adds	r3, #1
 800f0de:	7dfa      	ldrb	r2, [r7, #23]
 800f0e0:	f7ff ff29 	bl	800ef36 <SecureElementAesEncrypt>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d001      	beq.n	800f0ee <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800f0ea:	2307      	movs	r3, #7
 800f0ec:	e043      	b.n	800f176 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800f0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f0:	330b      	adds	r3, #11
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	09db      	lsrs	r3, r3, #7
 800f0f6:	b2da      	uxtb	r2, r3
 800f0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0fa:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800f100:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f104:	3b04      	subs	r3, #4
 800f106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f108:	4413      	add	r3, r2
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800f10e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f112:	3b03      	subs	r3, #3
 800f114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f116:	4413      	add	r3, r2
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	021b      	lsls	r3, r3, #8
 800f11c:	693a      	ldr	r2, [r7, #16]
 800f11e:	4313      	orrs	r3, r2
 800f120:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800f122:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f126:	3b02      	subs	r3, #2
 800f128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f12a:	4413      	add	r3, r2
 800f12c:	781b      	ldrb	r3, [r3, #0]
 800f12e:	041b      	lsls	r3, r3, #16
 800f130:	693a      	ldr	r2, [r7, #16]
 800f132:	4313      	orrs	r3, r2
 800f134:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800f136:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f13a:	3b01      	subs	r3, #1
 800f13c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f13e:	4413      	add	r3, r2
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	061b      	lsls	r3, r3, #24
 800f144:	693a      	ldr	r2, [r7, #16]
 800f146:	4313      	orrs	r3, r2
 800f148:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800f14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d10e      	bne.n	800f170 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800f152:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f156:	b29b      	uxth	r3, r3
 800f158:	3b04      	subs	r3, #4
 800f15a:	b299      	uxth	r1, r3
 800f15c:	2301      	movs	r3, #1
 800f15e:	693a      	ldr	r2, [r7, #16]
 800f160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f162:	f7ff feb9 	bl	800eed8 <SecureElementVerifyAesCmac>
 800f166:	4603      	mov	r3, r0
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d003      	beq.n	800f174 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800f16c:	2301      	movs	r3, #1
 800f16e:	e002      	b.n	800f176 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800f170:	2304      	movs	r3, #4
 800f172:	e000      	b.n	800f176 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f174:	2300      	movs	r3, #0
}
 800f176:	4618      	mov	r0, r3
 800f178:	3718      	adds	r7, #24
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
	...

0800f180 <SecureElementRandomNumber>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b082      	sub	sp, #8
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d101      	bne.n	800f192 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f18e:	2302      	movs	r3, #2
 800f190:	e006      	b.n	800f1a0 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800f192:	4b05      	ldr	r3, [pc, #20]	; (800f1a8 <SecureElementRandomNumber+0x28>)
 800f194:	695b      	ldr	r3, [r3, #20]
 800f196:	4798      	blx	r3
 800f198:	4602      	mov	r2, r0
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f19e:	2300      	movs	r3, #0
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3708      	adds	r7, #8
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	0801f374 	.word	0x0801f374

0800f1ac <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d101      	bne.n	800f1be <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f1ba:	2302      	movs	r3, #2
 800f1bc:	e007      	b.n	800f1ce <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800f1be:	4b06      	ldr	r3, [pc, #24]	; (800f1d8 <SecureElementSetDevEui+0x2c>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	2208      	movs	r2, #8
 800f1c4:	6879      	ldr	r1, [r7, #4]
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f00a fb2d 	bl	8019826 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f1cc:	2300      	movs	r3, #0
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3708      	adds	r7, #8
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	bf00      	nop
 800f1d8:	200007d4 	.word	0x200007d4

0800f1dc <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800f1dc:	b480      	push	{r7}
 800f1de:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800f1e0:	4b02      	ldr	r3, [pc, #8]	; (800f1ec <SecureElementGetDevEui+0x10>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bc80      	pop	{r7}
 800f1ea:	4770      	bx	lr
 800f1ec:	200007d4 	.word	0x200007d4

0800f1f0 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d101      	bne.n	800f202 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f1fe:	2302      	movs	r3, #2
 800f200:	e008      	b.n	800f214 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800f202:	4b06      	ldr	r3, [pc, #24]	; (800f21c <SecureElementSetJoinEui+0x2c>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	3308      	adds	r3, #8
 800f208:	2208      	movs	r2, #8
 800f20a:	6879      	ldr	r1, [r7, #4]
 800f20c:	4618      	mov	r0, r3
 800f20e:	f00a fb0a 	bl	8019826 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f212:	2300      	movs	r3, #0
}
 800f214:	4618      	mov	r0, r3
 800f216:	3708      	adds	r7, #8
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	200007d4 	.word	0x200007d4

0800f220 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800f220:	b480      	push	{r7}
 800f222:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800f224:	4b03      	ldr	r3, [pc, #12]	; (800f234 <SecureElementGetJoinEui+0x14>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	3308      	adds	r3, #8
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bc80      	pop	{r7}
 800f230:	4770      	bx	lr
 800f232:	bf00      	nop
 800f234:	200007d4 	.word	0x200007d4

0800f238 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
 800f240:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800f242:	4a1a      	ldr	r2, [pc, #104]	; (800f2ac <LmHandlerInit+0x74>)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800f248:	4b19      	ldr	r3, [pc, #100]	; (800f2b0 <LmHandlerInit+0x78>)
 800f24a:	4a1a      	ldr	r2, [pc, #104]	; (800f2b4 <LmHandlerInit+0x7c>)
 800f24c:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800f24e:	4b18      	ldr	r3, [pc, #96]	; (800f2b0 <LmHandlerInit+0x78>)
 800f250:	4a19      	ldr	r2, [pc, #100]	; (800f2b8 <LmHandlerInit+0x80>)
 800f252:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800f254:	4b16      	ldr	r3, [pc, #88]	; (800f2b0 <LmHandlerInit+0x78>)
 800f256:	4a19      	ldr	r2, [pc, #100]	; (800f2bc <LmHandlerInit+0x84>)
 800f258:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800f25a:	4b15      	ldr	r3, [pc, #84]	; (800f2b0 <LmHandlerInit+0x78>)
 800f25c:	4a18      	ldr	r2, [pc, #96]	; (800f2c0 <LmHandlerInit+0x88>)
 800f25e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800f260:	4b12      	ldr	r3, [pc, #72]	; (800f2ac <LmHandlerInit+0x74>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	4a17      	ldr	r2, [pc, #92]	; (800f2c4 <LmHandlerInit+0x8c>)
 800f268:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800f26a:	4b10      	ldr	r3, [pc, #64]	; (800f2ac <LmHandlerInit+0x74>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	4a14      	ldr	r2, [pc, #80]	; (800f2c4 <LmHandlerInit+0x8c>)
 800f272:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800f274:	4b0d      	ldr	r3, [pc, #52]	; (800f2ac <LmHandlerInit+0x74>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	689b      	ldr	r3, [r3, #8]
 800f27a:	4a12      	ldr	r2, [pc, #72]	; (800f2c4 <LmHandlerInit+0x8c>)
 800f27c:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800f27e:	4b11      	ldr	r3, [pc, #68]	; (800f2c4 <LmHandlerInit+0x8c>)
 800f280:	4a11      	ldr	r2, [pc, #68]	; (800f2c8 <LmHandlerInit+0x90>)
 800f282:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800f284:	4b09      	ldr	r3, [pc, #36]	; (800f2ac <LmHandlerInit+0x74>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	699b      	ldr	r3, [r3, #24]
 800f28a:	4a0e      	ldr	r2, [pc, #56]	; (800f2c4 <LmHandlerInit+0x8c>)
 800f28c:	6113      	str	r3, [r2, #16]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800f28e:	490f      	ldr	r1, [pc, #60]	; (800f2cc <LmHandlerInit+0x94>)
 800f290:	2000      	movs	r0, #0
 800f292:	f000 fd8d 	bl	800fdb0 <LmHandlerPackageRegister>
 800f296:	4603      	mov	r3, r0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d002      	beq.n	800f2a2 <LmHandlerInit+0x6a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f29c:	f04f 33ff 	mov.w	r3, #4294967295
 800f2a0:	e000      	b.n	800f2a4 <LmHandlerInit+0x6c>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800f2a2:	2300      	movs	r3, #0
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3708      	adds	r7, #8
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}
 800f2ac:	20000800 	.word	0x20000800
 800f2b0:	20000804 	.word	0x20000804
 800f2b4:	0800fa7d 	.word	0x0800fa7d
 800f2b8:	0800fae5 	.word	0x0800fae5
 800f2bc:	0800fbc1 	.word	0x0800fbc1
 800f2c0:	0800fcdd 	.word	0x0800fcdd
 800f2c4:	20000814 	.word	0x20000814
 800f2c8:	08010149 	.word	0x08010149
 800f2cc:	200000b8 	.word	0x200000b8

0800f2d0 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b094      	sub	sp, #80	; 0x50
 800f2d4:	af04      	add	r7, sp, #16
 800f2d6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800f2d8:	2214      	movs	r2, #20
 800f2da:	6879      	ldr	r1, [r7, #4]
 800f2dc:	488f      	ldr	r0, [pc, #572]	; (800f51c <LmHandlerConfigure+0x24c>)
 800f2de:	f00d fda9 	bl	801ce34 <UTIL_MEM_cpy_8>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800f2e2:	f7fe fb0b 	bl	800d8fc <LoraInfo_GetPtr>
 800f2e6:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800f2e8:	4b8c      	ldr	r3, [pc, #560]	; (800f51c <LmHandlerConfigure+0x24c>)
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	461a      	mov	r2, r3
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	4093      	lsls	r3, r2
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2f6:	685b      	ldr	r3, [r3, #4]
 800f2f8:	4013      	ands	r3, r2
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d106      	bne.n	800f30c <LmHandlerConfigure+0x3c>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800f2fe:	4b88      	ldr	r3, [pc, #544]	; (800f520 <LmHandlerConfigure+0x250>)
 800f300:	2201      	movs	r2, #1
 800f302:	2100      	movs	r1, #0
 800f304:	2000      	movs	r0, #0
 800f306:	f00e fde1 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800f30a:	e7fe      	b.n	800f30a <LmHandlerConfigure+0x3a>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800f30c:	4b83      	ldr	r3, [pc, #524]	; (800f51c <LmHandlerConfigure+0x24c>)
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	461a      	mov	r2, r3
 800f312:	4984      	ldr	r1, [pc, #528]	; (800f524 <LmHandlerConfigure+0x254>)
 800f314:	4884      	ldr	r0, [pc, #528]	; (800f528 <LmHandlerConfigure+0x258>)
 800f316:	f004 fbfd 	bl	8013b14 <LoRaMacInitialization>
 800f31a:	4603      	mov	r3, r0
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d002      	beq.n	800f326 <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800f320:	f04f 33ff 	mov.w	r3, #4294967295
 800f324:	e0f5      	b.n	800f512 <LmHandlerConfigure+0x242>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800f326:	2326      	movs	r3, #38	; 0x26
 800f328:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800f32a:	f107 0318 	add.w	r3, r7, #24
 800f32e:	4618      	mov	r0, r3
 800f330:	f005 f914 	bl	801455c <LoRaMacMibSetRequestConfirm>
 800f334:	4603      	mov	r3, r0
 800f336:	2b00      	cmp	r3, #0
 800f338:	d103      	bne.n	800f342 <LmHandlerConfigure+0x72>
    {
        CtxRestoreDone = true;
 800f33a:	4b7c      	ldr	r3, [pc, #496]	; (800f52c <LmHandlerConfigure+0x25c>)
 800f33c:	2201      	movs	r2, #1
 800f33e:	701a      	strb	r2, [r3, #0]
 800f340:	e02a      	b.n	800f398 <LmHandlerConfigure+0xc8>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800f342:	2327      	movs	r3, #39	; 0x27
 800f344:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800f346:	4b7a      	ldr	r3, [pc, #488]	; (800f530 <LmHandlerConfigure+0x260>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	691b      	ldr	r3, [r3, #16]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00c      	beq.n	800f36a <LmHandlerConfigure+0x9a>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800f350:	f107 0318 	add.w	r3, r7, #24
 800f354:	4618      	mov	r0, r3
 800f356:	f004 ff7b 	bl	8014250 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800f35a:	4b75      	ldr	r3, [pc, #468]	; (800f530 <LmHandlerConfigure+0x260>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	691b      	ldr	r3, [r3, #16]
 800f360:	69fa      	ldr	r2, [r7, #28]
 800f362:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 800f366:	4610      	mov	r0, r2
 800f368:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800f36a:	2326      	movs	r3, #38	; 0x26
 800f36c:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800f36e:	f107 0318 	add.w	r3, r7, #24
 800f372:	4618      	mov	r0, r3
 800f374:	f005 f8f2 	bl	801455c <LoRaMacMibSetRequestConfirm>
 800f378:	4603      	mov	r3, r0
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d10c      	bne.n	800f398 <LmHandlerConfigure+0xc8>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f37e:	2301      	movs	r3, #1
 800f380:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800f382:	f107 0318 	add.w	r3, r7, #24
 800f386:	4618      	mov	r0, r3
 800f388:	f004 ff62 	bl	8014250 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800f38c:	7f3b      	ldrb	r3, [r7, #28]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d002      	beq.n	800f398 <LmHandlerConfigure+0xc8>
            {
                CtxRestoreDone = true;
 800f392:	4b66      	ldr	r3, [pc, #408]	; (800f52c <LmHandlerConfigure+0x25c>)
 800f394:	2201      	movs	r2, #1
 800f396:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800f398:	4b64      	ldr	r3, [pc, #400]	; (800f52c <LmHandlerConfigure+0x25c>)
 800f39a:	781b      	ldrb	r3, [r3, #0]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d02a      	beq.n	800f3f6 <LmHandlerConfigure+0x126>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800f3a0:	4b63      	ldr	r3, [pc, #396]	; (800f530 <LmHandlerConfigure+0x260>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	69db      	ldr	r3, [r3, #28]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d004      	beq.n	800f3b4 <LmHandlerConfigure+0xe4>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800f3aa:	4b61      	ldr	r3, [pc, #388]	; (800f530 <LmHandlerConfigure+0x260>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	69db      	ldr	r3, [r3, #28]
 800f3b0:	2000      	movs	r0, #0
 800f3b2:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800f3b4:	2306      	movs	r3, #6
 800f3b6:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800f3b8:	f107 0318 	add.w	r3, r7, #24
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f004 ff47 	bl	8014250 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	4a5b      	ldr	r2, [pc, #364]	; (800f534 <LmHandlerConfigure+0x264>)
 800f3c6:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800f3c8:	2326      	movs	r3, #38	; 0x26
 800f3ca:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800f3cc:	f107 0318 	add.w	r3, r7, #24
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f004 ff3d 	bl	8014250 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800f3d6:	69fb      	ldr	r3, [r7, #28]
 800f3d8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800f3dc:	4b4f      	ldr	r3, [pc, #316]	; (800f51c <LmHandlerConfigure+0x24c>)
 800f3de:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800f3e6:	4b4d      	ldr	r3, [pc, #308]	; (800f51c <LmHandlerConfigure+0x24c>)
 800f3e8:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800f3ea:	69fb      	ldr	r3, [r7, #28]
 800f3ec:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800f3f0:	4b4a      	ldr	r3, [pc, #296]	; (800f51c <LmHandlerConfigure+0x24c>)
 800f3f2:	709a      	strb	r2, [r3, #2]
 800f3f4:	e019      	b.n	800f42a <LmHandlerConfigure+0x15a>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800f3f6:	2305      	movs	r3, #5
 800f3f8:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800f3fe:	f107 0318 	add.w	r3, r7, #24
 800f402:	4618      	mov	r0, r3
 800f404:	f005 f8aa 	bl	801455c <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800f408:	4b49      	ldr	r3, [pc, #292]	; (800f530 <LmHandlerConfigure+0x260>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	68db      	ldr	r3, [r3, #12]
 800f40e:	4798      	blx	r3
 800f410:	4603      	mov	r3, r0
 800f412:	4a48      	ldr	r2, [pc, #288]	; (800f534 <LmHandlerConfigure+0x264>)
 800f414:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800f416:	2306      	movs	r3, #6
 800f418:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800f41a:	4b46      	ldr	r3, [pc, #280]	; (800f534 <LmHandlerConfigure+0x264>)
 800f41c:	695b      	ldr	r3, [r3, #20]
 800f41e:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800f420:	f107 0318 	add.w	r3, r7, #24
 800f424:	4618      	mov	r0, r3
 800f426:	f005 f899 	bl	801455c <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800f42a:	2302      	movs	r3, #2
 800f42c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f42e:	f107 0318 	add.w	r3, r7, #24
 800f432:	4618      	mov	r0, r3
 800f434:	f004 ff0c 	bl	8014250 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800f438:	69fb      	ldr	r3, [r7, #28]
 800f43a:	2208      	movs	r2, #8
 800f43c:	4619      	mov	r1, r3
 800f43e:	483d      	ldr	r0, [pc, #244]	; (800f534 <LmHandlerConfigure+0x264>)
 800f440:	f00a f9f1 	bl	8019826 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800f444:	2303      	movs	r3, #3
 800f446:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f448:	f107 0318 	add.w	r3, r7, #24
 800f44c:	4618      	mov	r0, r3
 800f44e:	f004 feff 	bl	8014250 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800f452:	69fb      	ldr	r3, [r7, #28]
 800f454:	2208      	movs	r2, #8
 800f456:	4619      	mov	r1, r3
 800f458:	4837      	ldr	r0, [pc, #220]	; (800f538 <LmHandlerConfigure+0x268>)
 800f45a:	f00a f9e4 	bl	8019826 <memcpy1>

    SecureElementPrintKeys();
 800f45e:	f7ff fc1f 	bl	800eca0 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800f462:	4b36      	ldr	r3, [pc, #216]	; (800f53c <LmHandlerConfigure+0x26c>)
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	461a      	mov	r2, r3
 800f468:	4b35      	ldr	r3, [pc, #212]	; (800f540 <LmHandlerConfigure+0x270>)
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	4619      	mov	r1, r3
 800f46e:	4b35      	ldr	r3, [pc, #212]	; (800f544 <LmHandlerConfigure+0x274>)
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	4618      	mov	r0, r3
 800f474:	4b34      	ldr	r3, [pc, #208]	; (800f548 <LmHandlerConfigure+0x278>)
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	9303      	str	r3, [sp, #12]
 800f47a:	9002      	str	r0, [sp, #8]
 800f47c:	9101      	str	r1, [sp, #4]
 800f47e:	9200      	str	r2, [sp, #0]
 800f480:	4b32      	ldr	r3, [pc, #200]	; (800f54c <LmHandlerConfigure+0x27c>)
 800f482:	2200      	movs	r2, #0
 800f484:	2100      	movs	r1, #0
 800f486:	2002      	movs	r0, #2
 800f488:	f00e fd20 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800f48c:	230f      	movs	r3, #15
 800f48e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800f490:	2301      	movs	r3, #1
 800f492:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800f494:	f107 0318 	add.w	r3, r7, #24
 800f498:	4618      	mov	r0, r3
 800f49a:	f005 f85f 	bl	801455c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800f49e:	2310      	movs	r3, #16
 800f4a0:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f4a6:	f107 0318 	add.w	r3, r7, #24
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f005 f856 	bl	801455c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800f4b0:	2304      	movs	r3, #4
 800f4b2:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800f4b4:	4b19      	ldr	r3, [pc, #100]	; (800f51c <LmHandlerConfigure+0x24c>)
 800f4b6:	789b      	ldrb	r3, [r3, #2]
 800f4b8:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f4ba:	f107 0318 	add.w	r3, r7, #24
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f005 f84c 	bl	801455c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800f4c4:	2337      	movs	r3, #55	; 0x37
 800f4c6:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800f4c8:	4b14      	ldr	r3, [pc, #80]	; (800f51c <LmHandlerConfigure+0x24c>)
 800f4ca:	691b      	ldr	r3, [r3, #16]
 800f4cc:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f4ce:	f107 0318 	add.w	r3, r7, #24
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f005 f842 	bl	801455c <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800f4d8:	230f      	movs	r3, #15
 800f4da:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800f4dc:	4b0f      	ldr	r3, [pc, #60]	; (800f51c <LmHandlerConfigure+0x24c>)
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	f107 0210 	add.w	r2, r7, #16
 800f4e4:	4611      	mov	r1, r2
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f007 fe8a 	bl	8017200 <RegionGetPhyParam>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	bf14      	ite	ne
 800f4f6:	2301      	movne	r3, #1
 800f4f8:	2300      	moveq	r3, #0
 800f4fa:	b2da      	uxtb	r2, r3
 800f4fc:	4b07      	ldr	r3, [pc, #28]	; (800f51c <LmHandlerConfigure+0x24c>)
 800f4fe:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800f500:	2014      	movs	r0, #20
 800f502:	f000 faa3 	bl	800fa4c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800f506:	4b05      	ldr	r3, [pc, #20]	; (800f51c <LmHandlerConfigure+0x24c>)
 800f508:	799b      	ldrb	r3, [r3, #6]
 800f50a:	4618      	mov	r0, r3
 800f50c:	f005 fdb6 	bl	801507c <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800f510:	2300      	movs	r3, #0
}
 800f512:	4618      	mov	r0, r3
 800f514:	3740      	adds	r7, #64	; 0x40
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	200007ec 	.word	0x200007ec
 800f520:	0801eca0 	.word	0x0801eca0
 800f524:	20000814 	.word	0x20000814
 800f528:	20000804 	.word	0x20000804
 800f52c:	2000091e 	.word	0x2000091e
 800f530:	20000800 	.word	0x20000800
 800f534:	200000a0 	.word	0x200000a0
 800f538:	200000a8 	.word	0x200000a8
 800f53c:	200000b7 	.word	0x200000b7
 800f540:	200000b6 	.word	0x200000b6
 800f544:	200000b5 	.word	0x200000b5
 800f548:	200000b4 	.word	0x200000b4
 800f54c:	0801ecec 	.word	0x0801ecec

0800f550 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800f550:	b580      	push	{r7, lr}
 800f552:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800f554:	f002 fab0 	bl	8011ab8 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800f558:	f000 fd2c 	bl	800ffb4 <LmHandlerPackagesProcess>
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800f55c:	bf00      	nop
 800f55e:	bd80      	pop	{r7, pc}

0800f560 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800f560:	b480      	push	{r7}
 800f562:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800f564:	4b02      	ldr	r3, [pc, #8]	; (800f570 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800f566:	681b      	ldr	r3, [r3, #0]
}
 800f568:	4618      	mov	r0, r3
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bc80      	pop	{r7}
 800f56e:	4770      	bx	lr
 800f570:	20000828 	.word	0x20000828

0800f574 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b090      	sub	sp, #64	; 0x40
 800f578:	af00      	add	r7, sp, #0
 800f57a:	4603      	mov	r3, r0
 800f57c:	460a      	mov	r2, r1
 800f57e:	71fb      	strb	r3, [r7, #7]
 800f580:	4613      	mov	r3, r2
 800f582:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800f584:	2301      	movs	r3, #1
 800f586:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800f58a:	4b35      	ldr	r3, [pc, #212]	; (800f660 <LmHandlerJoin+0xec>)
 800f58c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f590:	b2db      	uxtb	r3, r3
 800f592:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800f596:	79fb      	ldrb	r3, [r7, #7]
 800f598:	2b02      	cmp	r3, #2
 800f59a:	d110      	bne.n	800f5be <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f59c:	2302      	movs	r3, #2
 800f59e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800f5a2:	4b30      	ldr	r3, [pc, #192]	; (800f664 <LmHandlerJoin+0xf0>)
 800f5a4:	2202      	movs	r2, #2
 800f5a6:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800f5a8:	4a2e      	ldr	r2, [pc, #184]	; (800f664 <LmHandlerJoin+0xf0>)
 800f5aa:	79bb      	ldrb	r3, [r7, #6]
 800f5ac:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800f5ae:	f004 fd65 	bl	801407c <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800f5b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f005 fb2a 	bl	8014c10 <LoRaMacMlmeRequest>
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800f5bc:	e04b      	b.n	800f656 <LmHandlerJoin+0xe2>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f5be:	2301      	movs	r3, #1
 800f5c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800f5c4:	4b27      	ldr	r3, [pc, #156]	; (800f664 <LmHandlerJoin+0xf0>)
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800f5ca:	4b25      	ldr	r3, [pc, #148]	; (800f660 <LmHandlerJoin+0xec>)
 800f5cc:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f5d0:	4b24      	ldr	r3, [pc, #144]	; (800f664 <LmHandlerJoin+0xf0>)
 800f5d2:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f5d4:	4b23      	ldr	r3, [pc, #140]	; (800f664 <LmHandlerJoin+0xf0>)
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800f5da:	4a22      	ldr	r2, [pc, #136]	; (800f664 <LmHandlerJoin+0xf0>)
 800f5dc:	79bb      	ldrb	r3, [r7, #6]
 800f5de:	71d3      	strb	r3, [r2, #7]
        if (CtxRestoreDone == false)
 800f5e0:	4b21      	ldr	r3, [pc, #132]	; (800f668 <LmHandlerJoin+0xf4>)
 800f5e2:	781b      	ldrb	r3, [r3, #0]
 800f5e4:	f083 0301 	eor.w	r3, r3, #1
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d01e      	beq.n	800f62c <LmHandlerJoin+0xb8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800f5ee:	231e      	movs	r3, #30
 800f5f0:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800f5f2:	4b1b      	ldr	r3, [pc, #108]	; (800f660 <LmHandlerJoin+0xec>)
 800f5f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f5f8:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f5fa:	f107 0308 	add.w	r3, r7, #8
 800f5fe:	4618      	mov	r0, r3
 800f600:	f004 ffac 	bl	801455c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800f604:	231f      	movs	r3, #31
 800f606:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800f608:	4b15      	ldr	r3, [pc, #84]	; (800f660 <LmHandlerJoin+0xec>)
 800f60a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f60e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f610:	f107 0308 	add.w	r3, r7, #8
 800f614:	4618      	mov	r0, r3
 800f616:	f004 ffa1 	bl	801455c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800f61a:	2328      	movs	r3, #40	; 0x28
 800f61c:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800f61e:	4b13      	ldr	r3, [pc, #76]	; (800f66c <LmHandlerJoin+0xf8>)
 800f620:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800f622:	f107 0308 	add.w	r3, r7, #8
 800f626:	4618      	mov	r0, r3
 800f628:	f004 ff98 	bl	801455c <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800f62c:	f004 fd26 	bl	801407c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f630:	2301      	movs	r3, #1
 800f632:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f634:	2301      	movs	r3, #1
 800f636:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f638:	f107 0308 	add.w	r3, r7, #8
 800f63c:	4618      	mov	r0, r3
 800f63e:	f004 ff8d 	bl	801455c <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800f642:	4b0b      	ldr	r3, [pc, #44]	; (800f670 <LmHandlerJoin+0xfc>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f648:	4806      	ldr	r0, [pc, #24]	; (800f664 <LmHandlerJoin+0xf0>)
 800f64a:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800f64c:	4b04      	ldr	r3, [pc, #16]	; (800f660 <LmHandlerJoin+0xec>)
 800f64e:	785b      	ldrb	r3, [r3, #1]
 800f650:	4618      	mov	r0, r3
 800f652:	f000 f92b 	bl	800f8ac <LmHandlerRequestClass>
}
 800f656:	bf00      	nop
 800f658:	3740      	adds	r7, #64	; 0x40
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	bf00      	nop
 800f660:	200007ec 	.word	0x200007ec
 800f664:	200000c4 	.word	0x200000c4
 800f668:	2000091e 	.word	0x2000091e
 800f66c:	01000300 	.word	0x01000300
 800f670:	20000800 	.word	0x20000800

0800f674 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b08a      	sub	sp, #40	; 0x28
 800f678:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f67a:	2301      	movs	r3, #1
 800f67c:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800f67e:	463b      	mov	r3, r7
 800f680:	4618      	mov	r0, r3
 800f682:	f004 fde5 	bl	8014250 <LoRaMacMibGetRequestConfirm>
 800f686:	4603      	mov	r3, r0
 800f688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800f68c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f690:	2b00      	cmp	r3, #0
 800f692:	d106      	bne.n	800f6a2 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f694:	793b      	ldrb	r3, [r7, #4]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d101      	bne.n	800f69e <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800f69a:	2300      	movs	r3, #0
 800f69c:	e002      	b.n	800f6a4 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	e000      	b.n	800f6a4 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800f6a2:	2300      	movs	r3, #0
    }
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3728      	adds	r7, #40	; 0x28
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b08a      	sub	sp, #40	; 0x28
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	70fb      	strb	r3, [r7, #3]
 800f6b8:	4613      	mov	r3, r2
 800f6ba:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800f6bc:	23ff      	movs	r3, #255	; 0xff
 800f6be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800f6c2:	f001 ff87 	bl	80115d4 <LoRaMacIsBusy>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d002      	beq.n	800f6d2 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f6cc:	f06f 0301 	mvn.w	r3, #1
 800f6d0:	e0b6      	b.n	800f840 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800f6d2:	f7ff ffcf 	bl	800f674 <LmHandlerJoinStatus>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	2b01      	cmp	r3, #1
 800f6da:	d00a      	beq.n	800f6f2 <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800f6dc:	4b5a      	ldr	r3, [pc, #360]	; (800f848 <LmHandlerSend+0x19c>)
 800f6de:	799b      	ldrb	r3, [r3, #6]
 800f6e0:	4a59      	ldr	r2, [pc, #356]	; (800f848 <LmHandlerSend+0x19c>)
 800f6e2:	79d2      	ldrb	r2, [r2, #7]
 800f6e4:	4611      	mov	r1, r2
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7ff ff44 	bl	800f574 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f6ec:	f06f 0302 	mvn.w	r3, #2
 800f6f0:	e0a6      	b.n	800f840 <LmHandlerSend+0x194>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800f6f2:	4b56      	ldr	r3, [pc, #344]	; (800f84c <LmHandlerSend+0x1a0>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	68db      	ldr	r3, [r3, #12]
 800f6f8:	4798      	blx	r3
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d00d      	beq.n	800f71c <LmHandlerSend+0x70>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	781a      	ldrb	r2, [r3, #0]
 800f704:	4b51      	ldr	r3, [pc, #324]	; (800f84c <LmHandlerSend+0x1a0>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d006      	beq.n	800f71c <LmHandlerSend+0x70>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d002      	beq.n	800f71c <LmHandlerSend+0x70>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800f716:	f06f 0303 	mvn.w	r3, #3
 800f71a:	e091      	b.n	800f840 <LmHandlerSend+0x194>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800f71c:	4a4c      	ldr	r2, [pc, #304]	; (800f850 <LmHandlerSend+0x1a4>)
 800f71e:	78fb      	ldrb	r3, [r7, #3]
 800f720:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800f722:	78fb      	ldrb	r3, [r7, #3]
 800f724:	2b00      	cmp	r3, #0
 800f726:	bf14      	ite	ne
 800f728:	2301      	movne	r3, #1
 800f72a:	2300      	moveq	r3, #0
 800f72c:	b2db      	uxtb	r3, r3
 800f72e:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800f730:	4b48      	ldr	r3, [pc, #288]	; (800f854 <LmHandlerSend+0x1a8>)
 800f732:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f736:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	785b      	ldrb	r3, [r3, #1]
 800f73c:	f107 020c 	add.w	r2, r7, #12
 800f740:	4611      	mov	r1, r2
 800f742:	4618      	mov	r0, r3
 800f744:	f004 fcfc 	bl	8014140 <LoRaMacQueryTxPossible>
 800f748:	4603      	mov	r3, r0
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d009      	beq.n	800f762 <LmHandlerSend+0xb6>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800f74e:	2300      	movs	r3, #0
 800f750:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800f752:	2300      	movs	r3, #0
 800f754:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800f756:	2300      	movs	r3, #0
 800f758:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800f75a:	23f9      	movs	r3, #249	; 0xf9
 800f75c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f760:	e009      	b.n	800f776 <LmHandlerSend+0xca>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	781b      	ldrb	r3, [r3, #0]
 800f766:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	785b      	ldrb	r3, [r3, #1]
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800f776:	4b36      	ldr	r3, [pc, #216]	; (800f850 <LmHandlerSend+0x1a4>)
 800f778:	687a      	ldr	r2, [r7, #4]
 800f77a:	3310      	adds	r3, #16
 800f77c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f780:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800f784:	4b33      	ldr	r3, [pc, #204]	; (800f854 <LmHandlerSend+0x1a8>)
 800f786:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f78a:	4b31      	ldr	r3, [pc, #196]	; (800f850 <LmHandlerSend+0x1a4>)
 800f78c:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800f78e:	78ba      	ldrb	r2, [r7, #2]
 800f790:	f107 0310 	add.w	r3, r7, #16
 800f794:	4611      	mov	r1, r2
 800f796:	4618      	mov	r0, r3
 800f798:	f005 fb7a 	bl	8014e90 <LoRaMacMcpsRequest>
 800f79c:	4603      	mov	r3, r0
 800f79e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800f7a2:	6a3b      	ldr	r3, [r7, #32]
 800f7a4:	4a2c      	ldr	r2, [pc, #176]	; (800f858 <LmHandlerSend+0x1ac>)
 800f7a6:	6013      	str	r3, [r2, #0]

    switch (status)
 800f7a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f7ac:	2b11      	cmp	r3, #17
 800f7ae:	d840      	bhi.n	800f832 <LmHandlerSend+0x186>
 800f7b0:	a201      	add	r2, pc, #4	; (adr r2, 800f7b8 <LmHandlerSend+0x10c>)
 800f7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7b6:	bf00      	nop
 800f7b8:	0800f801 	.word	0x0800f801
 800f7bc:	0800f813 	.word	0x0800f813
 800f7c0:	0800f833 	.word	0x0800f833
 800f7c4:	0800f833 	.word	0x0800f833
 800f7c8:	0800f833 	.word	0x0800f833
 800f7cc:	0800f833 	.word	0x0800f833
 800f7d0:	0800f833 	.word	0x0800f833
 800f7d4:	0800f81b 	.word	0x0800f81b
 800f7d8:	0800f833 	.word	0x0800f833
 800f7dc:	0800f833 	.word	0x0800f833
 800f7e0:	0800f833 	.word	0x0800f833
 800f7e4:	0800f82b 	.word	0x0800f82b
 800f7e8:	0800f833 	.word	0x0800f833
 800f7ec:	0800f833 	.word	0x0800f833
 800f7f0:	0800f813 	.word	0x0800f813
 800f7f4:	0800f813 	.word	0x0800f813
 800f7f8:	0800f813 	.word	0x0800f813
 800f7fc:	0800f823 	.word	0x0800f823
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800f800:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f804:	f113 0f07 	cmn.w	r3, #7
 800f808:	d017      	beq.n	800f83a <LmHandlerSend+0x18e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800f80a:	2300      	movs	r3, #0
 800f80c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800f810:	e013      	b.n	800f83a <LmHandlerSend+0x18e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800f812:	23fe      	movs	r3, #254	; 0xfe
 800f814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f818:	e010      	b.n	800f83c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f81a:	23fd      	movs	r3, #253	; 0xfd
 800f81c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f820:	e00c      	b.n	800f83c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800f822:	23fb      	movs	r3, #251	; 0xfb
 800f824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f828:	e008      	b.n	800f83c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800f82a:	23fa      	movs	r3, #250	; 0xfa
 800f82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f830:	e004      	b.n	800f83c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800f832:	23ff      	movs	r3, #255	; 0xff
 800f834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f838:	e000      	b.n	800f83c <LmHandlerSend+0x190>
            break;
 800f83a:	bf00      	nop
    }

    return lmhStatus;
 800f83c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f840:	4618      	mov	r0, r3
 800f842:	3728      	adds	r7, #40	; 0x28
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}
 800f848:	200000c4 	.word	0x200000c4
 800f84c:	200007d8 	.word	0x200007d8
 800f850:	200000cc 	.word	0x200000cc
 800f854:	200007ec 	.word	0x200007ec
 800f858:	20000828 	.word	0x20000828

0800f85c <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b086      	sub	sp, #24
 800f860:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800f862:	230a      	movs	r3, #10
 800f864:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800f866:	463b      	mov	r3, r7
 800f868:	4618      	mov	r0, r3
 800f86a:	f005 f9d1 	bl	8014c10 <LoRaMacMlmeRequest>
 800f86e:	4603      	mov	r3, r0
 800f870:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	4a06      	ldr	r2, [pc, #24]	; (800f890 <LmHandlerDeviceTimeReq+0x34>)
 800f876:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800f878:	7dfb      	ldrb	r3, [r7, #23]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d101      	bne.n	800f882 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f87e:	2300      	movs	r3, #0
 800f880:	e001      	b.n	800f886 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800f882:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800f886:	4618      	mov	r0, r3
 800f888:	3718      	adds	r7, #24
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}
 800f88e:	bf00      	nop
 800f890:	20000828 	.word	0x20000828

0800f894 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800f894:	b480      	push	{r7}
 800f896:	b083      	sub	sp, #12
 800f898:	af00      	add	r7, sp, #0
 800f89a:	4603      	mov	r3, r0
 800f89c:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800f89e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	370c      	adds	r7, #12
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bc80      	pop	{r7}
 800f8aa:	4770      	bx	lr

0800f8ac <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b08c      	sub	sp, #48	; 0x30
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800f8bc:	f001 fe8a 	bl	80115d4 <LoRaMacIsBusy>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d002      	beq.n	800f8cc <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f8c6:	f06f 0301 	mvn.w	r3, #1
 800f8ca:	e071      	b.n	800f9b0 <LmHandlerRequestClass+0x104>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800f8cc:	f7ff fed2 	bl	800f674 <LmHandlerJoinStatus>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	2b01      	cmp	r3, #1
 800f8d4:	d002      	beq.n	800f8dc <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f8d6:	f06f 0302 	mvn.w	r3, #2
 800f8da:	e069      	b.n	800f9b0 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800f8dc:	2300      	movs	r3, #0
 800f8de:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f8e0:	f107 0308 	add.w	r3, r7, #8
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f004 fcb3 	bl	8014250 <LoRaMacMibGetRequestConfirm>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d002      	beq.n	800f8f6 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f8f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f8f4:	e05c      	b.n	800f9b0 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800f8f6:	7b3b      	ldrb	r3, [r7, #12]
 800f8f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800f8fc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f900:	79fb      	ldrb	r3, [r7, #7]
 800f902:	429a      	cmp	r2, r3
 800f904:	d052      	beq.n	800f9ac <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800f906:	79fb      	ldrb	r3, [r7, #7]
 800f908:	2b02      	cmp	r3, #2
 800f90a:	d028      	beq.n	800f95e <LmHandlerRequestClass+0xb2>
 800f90c:	2b02      	cmp	r3, #2
 800f90e:	dc48      	bgt.n	800f9a2 <LmHandlerRequestClass+0xf6>
 800f910:	2b00      	cmp	r3, #0
 800f912:	d002      	beq.n	800f91a <LmHandlerRequestClass+0x6e>
 800f914:	2b01      	cmp	r3, #1
 800f916:	d01e      	beq.n	800f956 <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800f918:	e043      	b.n	800f9a2 <LmHandlerRequestClass+0xf6>
                if( currentClass != CLASS_A )
 800f91a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d041      	beq.n	800f9a6 <LmHandlerRequestClass+0xfa>
                    mibReq.Param.Class = newClass;
 800f922:	79fb      	ldrb	r3, [r7, #7]
 800f924:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f926:	f107 0308 	add.w	r3, r7, #8
 800f92a:	4618      	mov	r0, r3
 800f92c:	f004 fe16 	bl	801455c <LoRaMacMibSetRequestConfirm>
 800f930:	4603      	mov	r3, r0
 800f932:	2b00      	cmp	r3, #0
 800f934:	d10b      	bne.n	800f94e <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800f936:	4b20      	ldr	r3, [pc, #128]	; (800f9b8 <LmHandlerRequestClass+0x10c>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d032      	beq.n	800f9a6 <LmHandlerRequestClass+0xfa>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800f940:	4b1d      	ldr	r3, [pc, #116]	; (800f9b8 <LmHandlerRequestClass+0x10c>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f946:	79fa      	ldrb	r2, [r7, #7]
 800f948:	4610      	mov	r0, r2
 800f94a:	4798      	blx	r3
            break;
 800f94c:	e02b      	b.n	800f9a6 <LmHandlerRequestClass+0xfa>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800f94e:	23ff      	movs	r3, #255	; 0xff
 800f950:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f954:	e027      	b.n	800f9a6 <LmHandlerRequestClass+0xfa>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800f956:	23ff      	movs	r3, #255	; 0xff
 800f958:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f95c:	e026      	b.n	800f9ac <LmHandlerRequestClass+0x100>
                if( currentClass != CLASS_A )
 800f95e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f962:	2b00      	cmp	r3, #0
 800f964:	d003      	beq.n	800f96e <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800f966:	23ff      	movs	r3, #255	; 0xff
 800f968:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f96c:	e01d      	b.n	800f9aa <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800f96e:	79fb      	ldrb	r3, [r7, #7]
 800f970:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800f972:	f107 0308 	add.w	r3, r7, #8
 800f976:	4618      	mov	r0, r3
 800f978:	f004 fdf0 	bl	801455c <LoRaMacMibSetRequestConfirm>
 800f97c:	4603      	mov	r3, r0
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d10b      	bne.n	800f99a <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800f982:	4b0d      	ldr	r3, [pc, #52]	; (800f9b8 <LmHandlerRequestClass+0x10c>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d00e      	beq.n	800f9aa <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800f98c:	4b0a      	ldr	r3, [pc, #40]	; (800f9b8 <LmHandlerRequestClass+0x10c>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f992:	79fa      	ldrb	r2, [r7, #7]
 800f994:	4610      	mov	r0, r2
 800f996:	4798      	blx	r3
            break;
 800f998:	e007      	b.n	800f9aa <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800f99a:	23ff      	movs	r3, #255	; 0xff
 800f99c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f9a0:	e003      	b.n	800f9aa <LmHandlerRequestClass+0xfe>
            break;
 800f9a2:	bf00      	nop
 800f9a4:	e002      	b.n	800f9ac <LmHandlerRequestClass+0x100>
            break;
 800f9a6:	bf00      	nop
 800f9a8:	e000      	b.n	800f9ac <LmHandlerRequestClass+0x100>
            break;
 800f9aa:	bf00      	nop
        }
    }
    return errorStatus;
 800f9ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3730      	adds	r7, #48	; 0x30
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}
 800f9b8:	20000800 	.word	0x20000800

0800f9bc <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b08c      	sub	sp, #48	; 0x30
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d102      	bne.n	800f9d0 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f9ca:	f04f 33ff 	mov.w	r3, #4294967295
 800f9ce:	e010      	b.n	800f9f2 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800f9d4:	f107 030c 	add.w	r3, r7, #12
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f004 fc39 	bl	8014250 <LoRaMacMibGetRequestConfirm>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d002      	beq.n	800f9ea <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800f9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f9e8:	e003      	b.n	800f9f2 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800f9ea:	7c3a      	ldrb	r2, [r7, #16]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800f9f0:	2300      	movs	r3, #0
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3730      	adds	r7, #48	; 0x30
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}
	...

0800f9fc <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b08c      	sub	sp, #48	; 0x30
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d102      	bne.n	800fa10 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fa0a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa0e:	e016      	b.n	800fa3e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800fa10:	231f      	movs	r3, #31
 800fa12:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800fa14:	f107 030c 	add.w	r3, r7, #12
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f004 fc19 	bl	8014250 <LoRaMacMibGetRequestConfirm>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d002      	beq.n	800fa2a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fa24:	f04f 33ff 	mov.w	r3, #4294967295
 800fa28:	e009      	b.n	800fa3e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800fa2a:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f993 2000 	ldrsb.w	r2, [r3]
 800fa38:	4b03      	ldr	r3, [pc, #12]	; (800fa48 <LmHandlerGetTxDatarate+0x4c>)
 800fa3a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800fa3c:	2300      	movs	r3, #0
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3730      	adds	r7, #48	; 0x30
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}
 800fa46:	bf00      	nop
 800fa48:	200007ec 	.word	0x200007ec

0800fa4c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b08c      	sub	sp, #48	; 0x30
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800fa54:	2322      	movs	r3, #34	; 0x22
 800fa56:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fa5c:	f107 030c 	add.w	r3, r7, #12
 800fa60:	4618      	mov	r0, r3
 800fa62:	f004 fd7b 	bl	801455c <LoRaMacMibSetRequestConfirm>
 800fa66:	4603      	mov	r3, r0
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d002      	beq.n	800fa72 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800fa6c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa70:	e000      	b.n	800fa74 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800fa72:	2300      	movs	r3, #0
}
 800fa74:	4618      	mov	r0, r3
 800fa76:	3730      	adds	r7, #48	; 0x30
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}

0800fa7c <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b082      	sub	sp, #8
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800fa84:	4b15      	ldr	r3, [pc, #84]	; (800fadc <McpsConfirm+0x60>)
 800fa86:	2201      	movs	r2, #1
 800fa88:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	785a      	ldrb	r2, [r3, #1]
 800fa8e:	4b13      	ldr	r3, [pc, #76]	; (800fadc <McpsConfirm+0x60>)
 800fa90:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	789b      	ldrb	r3, [r3, #2]
 800fa96:	b25a      	sxtb	r2, r3
 800fa98:	4b10      	ldr	r3, [pc, #64]	; (800fadc <McpsConfirm+0x60>)
 800fa9a:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	68db      	ldr	r3, [r3, #12]
 800faa0:	4a0e      	ldr	r2, [pc, #56]	; (800fadc <McpsConfirm+0x60>)
 800faa2:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800faaa:	4b0c      	ldr	r3, [pc, #48]	; (800fadc <McpsConfirm+0x60>)
 800faac:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	691b      	ldr	r3, [r3, #16]
 800fab2:	b2da      	uxtb	r2, r3
 800fab4:	4b09      	ldr	r3, [pc, #36]	; (800fadc <McpsConfirm+0x60>)
 800fab6:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	791b      	ldrb	r3, [r3, #4]
 800fabc:	461a      	mov	r2, r3
 800fabe:	4b07      	ldr	r3, [pc, #28]	; (800fadc <McpsConfirm+0x60>)
 800fac0:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800fac2:	4b07      	ldr	r3, [pc, #28]	; (800fae0 <McpsConfirm+0x64>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fac8:	4804      	ldr	r0, [pc, #16]	; (800fadc <McpsConfirm+0x60>)
 800faca:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800facc:	6879      	ldr	r1, [r7, #4]
 800face:	2000      	movs	r0, #0
 800fad0:	f000 f9de 	bl	800fe90 <LmHandlerPackagesNotify>
}
 800fad4:	bf00      	nop
 800fad6:	3708      	adds	r7, #8
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}
 800fadc:	200000cc 	.word	0x200000cc
 800fae0:	20000800 	.word	0x20000800

0800fae4 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b088      	sub	sp, #32
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
 800faec:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800faee:	2300      	movs	r3, #0
 800faf0:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800faf2:	4b31      	ldr	r3, [pc, #196]	; (800fbb8 <McpsIndication+0xd4>)
 800faf4:	2201      	movs	r2, #1
 800faf6:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	785a      	ldrb	r2, [r3, #1]
 800fafc:	4b2e      	ldr	r3, [pc, #184]	; (800fbb8 <McpsIndication+0xd4>)
 800fafe:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800fb00:	4b2d      	ldr	r3, [pc, #180]	; (800fbb8 <McpsIndication+0xd4>)
 800fb02:	785b      	ldrb	r3, [r3, #1]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d153      	bne.n	800fbb0 <McpsIndication+0xcc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	791b      	ldrb	r3, [r3, #4]
 800fb0c:	b25a      	sxtb	r2, r3
 800fb0e:	4b2a      	ldr	r3, [pc, #168]	; (800fbb8 <McpsIndication+0xd4>)
 800fb10:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb18:	b25a      	sxtb	r2, r3
 800fb1a:	4b27      	ldr	r3, [pc, #156]	; (800fbb8 <McpsIndication+0xd4>)
 800fb1c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800fb24:	4b24      	ldr	r3, [pc, #144]	; (800fbb8 <McpsIndication+0xd4>)
 800fb26:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	78da      	ldrb	r2, [r3, #3]
 800fb2c:	4b22      	ldr	r3, [pc, #136]	; (800fbb8 <McpsIndication+0xd4>)
 800fb2e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	691b      	ldr	r3, [r3, #16]
 800fb34:	4a20      	ldr	r2, [pc, #128]	; (800fbb8 <McpsIndication+0xd4>)
 800fb36:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	78db      	ldrb	r3, [r3, #3]
 800fb3c:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	7b1b      	ldrb	r3, [r3, #12]
 800fb42:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	689b      	ldr	r3, [r3, #8]
 800fb48:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800fb4a:	4b1c      	ldr	r3, [pc, #112]	; (800fbbc <McpsIndication+0xd8>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb50:	f107 0218 	add.w	r2, r7, #24
 800fb54:	4918      	ldr	r1, [pc, #96]	; (800fbb8 <McpsIndication+0xd4>)
 800fb56:	4610      	mov	r0, r2
 800fb58:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800fb5a:	4b18      	ldr	r3, [pc, #96]	; (800fbbc <McpsIndication+0xd8>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d007      	beq.n	800fb74 <McpsIndication+0x90>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	7e1b      	ldrb	r3, [r3, #24]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d003      	beq.n	800fb74 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800fb6c:	4b13      	ldr	r3, [pc, #76]	; (800fbbc <McpsIndication+0xd8>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb72:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800fb74:	6879      	ldr	r1, [r7, #4]
 800fb76:	2001      	movs	r0, #1
 800fb78:	f000 f98a 	bl	800fe90 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800fb7c:	f107 0317 	add.w	r3, r7, #23
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7ff ff1b 	bl	800f9bc <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	795b      	ldrb	r3, [r3, #5]
 800fb8a:	2b01      	cmp	r3, #1
 800fb8c:	d111      	bne.n	800fbb2 <McpsIndication+0xce>
 800fb8e:	7dfb      	ldrb	r3, [r7, #23]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d10e      	bne.n	800fbb2 <McpsIndication+0xce>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800fb94:	2300      	movs	r3, #0
 800fb96:	733b      	strb	r3, [r7, #12]
 800fb98:	2300      	movs	r3, #0
 800fb9a:	737b      	strb	r3, [r7, #13]
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 800fba0:	f107 030c 	add.w	r3, r7, #12
 800fba4:	2201      	movs	r2, #1
 800fba6:	2100      	movs	r1, #0
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7ff fd7f 	bl	800f6ac <LmHandlerSend>
 800fbae:	e000      	b.n	800fbb2 <McpsIndication+0xce>
        return;
 800fbb0:	bf00      	nop
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800fbb2:	3720      	adds	r7, #32
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}
 800fbb8:	200000e8 	.word	0x200000e8
 800fbbc:	20000800 	.word	0x20000800

0800fbc0 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b08c      	sub	sp, #48	; 0x30
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800fbc8:	4b3d      	ldr	r3, [pc, #244]	; (800fcc0 <MlmeConfirm+0x100>)
 800fbca:	2200      	movs	r2, #0
 800fbcc:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	785a      	ldrb	r2, [r3, #1]
 800fbd2:	4b3b      	ldr	r3, [pc, #236]	; (800fcc0 <MlmeConfirm+0x100>)
 800fbd4:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800fbd6:	4b3b      	ldr	r3, [pc, #236]	; (800fcc4 <MlmeConfirm+0x104>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbdc:	4838      	ldr	r0, [pc, #224]	; (800fcc0 <MlmeConfirm+0x100>)
 800fbde:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800fbe0:	6879      	ldr	r1, [r7, #4]
 800fbe2:	2002      	movs	r0, #2
 800fbe4:	f000 f954 	bl	800fe90 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	3b01      	subs	r3, #1
 800fbee:	2b0c      	cmp	r3, #12
 800fbf0:	d85e      	bhi.n	800fcb0 <MlmeConfirm+0xf0>
 800fbf2:	a201      	add	r2, pc, #4	; (adr r2, 800fbf8 <MlmeConfirm+0x38>)
 800fbf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbf8:	0800fc2d 	.word	0x0800fc2d
 800fbfc:	0800fcb1 	.word	0x0800fcb1
 800fc00:	0800fcb1 	.word	0x0800fcb1
 800fc04:	0800fc7f 	.word	0x0800fc7f
 800fc08:	0800fcb1 	.word	0x0800fcb1
 800fc0c:	0800fcb1 	.word	0x0800fcb1
 800fc10:	0800fcb1 	.word	0x0800fcb1
 800fc14:	0800fcb1 	.word	0x0800fcb1
 800fc18:	0800fcb1 	.word	0x0800fcb1
 800fc1c:	0800fcb1 	.word	0x0800fcb1
 800fc20:	0800fcb1 	.word	0x0800fcb1
 800fc24:	0800fc97 	.word	0x0800fc97
 800fc28:	0800fcb1 	.word	0x0800fcb1
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800fc2c:	2306      	movs	r3, #6
 800fc2e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800fc30:	f107 030c 	add.w	r3, r7, #12
 800fc34:	4618      	mov	r0, r3
 800fc36:	f004 fb0b 	bl	8014250 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	4a22      	ldr	r2, [pc, #136]	; (800fcc8 <MlmeConfirm+0x108>)
 800fc3e:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800fc40:	4822      	ldr	r0, [pc, #136]	; (800fccc <MlmeConfirm+0x10c>)
 800fc42:	f7ff fedb 	bl	800f9fc <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	785b      	ldrb	r3, [r3, #1]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d108      	bne.n	800fc60 <MlmeConfirm+0xa0>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800fc4e:	4b20      	ldr	r3, [pc, #128]	; (800fcd0 <MlmeConfirm+0x110>)
 800fc50:	2200      	movs	r2, #0
 800fc52:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800fc54:	4b1f      	ldr	r3, [pc, #124]	; (800fcd4 <MlmeConfirm+0x114>)
 800fc56:	785b      	ldrb	r3, [r3, #1]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7ff fe27 	bl	800f8ac <LmHandlerRequestClass>
 800fc5e:	e002      	b.n	800fc66 <MlmeConfirm+0xa6>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800fc60:	4b1b      	ldr	r3, [pc, #108]	; (800fcd0 <MlmeConfirm+0x110>)
 800fc62:	22ff      	movs	r2, #255	; 0xff
 800fc64:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800fc66:	4b17      	ldr	r3, [pc, #92]	; (800fcc4 <MlmeConfirm+0x104>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc6c:	4818      	ldr	r0, [pc, #96]	; (800fcd0 <MlmeConfirm+0x110>)
 800fc6e:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	785b      	ldrb	r3, [r3, #1]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d11d      	bne.n	800fcb4 <MlmeConfirm+0xf4>
            {
                SecureElementPrintSessionKeys();
 800fc78:	f7ff f8a0 	bl	800edbc <SecureElementPrintSessionKeys>
            }
        }
        break;
 800fc7c:	e01a      	b.n	800fcb4 <MlmeConfirm+0xf4>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800fc7e:	4b16      	ldr	r3, [pc, #88]	; (800fcd8 <MlmeConfirm+0x118>)
 800fc80:	2201      	movs	r2, #1
 800fc82:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	7a1a      	ldrb	r2, [r3, #8]
 800fc88:	4b13      	ldr	r3, [pc, #76]	; (800fcd8 <MlmeConfirm+0x118>)
 800fc8a:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	7a5a      	ldrb	r2, [r3, #9]
 800fc90:	4b11      	ldr	r3, [pc, #68]	; (800fcd8 <MlmeConfirm+0x118>)
 800fc92:	74da      	strb	r2, [r3, #19]
        }
        break;
 800fc94:	e00f      	b.n	800fcb6 <MlmeConfirm+0xf6>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	785b      	ldrb	r3, [r3, #1]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d105      	bne.n	800fcaa <MlmeConfirm+0xea>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800fc9e:	4b0d      	ldr	r3, [pc, #52]	; (800fcd4 <MlmeConfirm+0x114>)
 800fca0:	7b1b      	ldrb	r3, [r3, #12]
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7ff fdf6 	bl	800f894 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800fca8:	e005      	b.n	800fcb6 <MlmeConfirm+0xf6>
                LmHandlerDeviceTimeReq( );
 800fcaa:	f7ff fdd7 	bl	800f85c <LmHandlerDeviceTimeReq>
        break;
 800fcae:	e002      	b.n	800fcb6 <MlmeConfirm+0xf6>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800fcb0:	bf00      	nop
 800fcb2:	e000      	b.n	800fcb6 <MlmeConfirm+0xf6>
        break;
 800fcb4:	bf00      	nop
    }
}
 800fcb6:	bf00      	nop
 800fcb8:	3730      	adds	r7, #48	; 0x30
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	200000cc 	.word	0x200000cc
 800fcc4:	20000800 	.word	0x20000800
 800fcc8:	200000a0 	.word	0x200000a0
 800fccc:	200000c8 	.word	0x200000c8
 800fcd0:	200000c4 	.word	0x200000c4
 800fcd4:	200007ec 	.word	0x200007ec
 800fcd8:	200000e8 	.word	0x200000e8

0800fcdc <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b084      	sub	sp, #16
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800fce6:	4b2f      	ldr	r3, [pc, #188]	; (800fda4 <MlmeIndication+0xc8>)
 800fce8:	2200      	movs	r2, #0
 800fcea:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	785a      	ldrb	r2, [r3, #1]
 800fcf0:	4b2c      	ldr	r3, [pc, #176]	; (800fda4 <MlmeIndication+0xc8>)
 800fcf2:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	789b      	ldrb	r3, [r3, #2]
 800fcf8:	b25a      	sxtb	r2, r3
 800fcfa:	4b2a      	ldr	r3, [pc, #168]	; (800fda4 <MlmeIndication+0xc8>)
 800fcfc:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd04:	b25a      	sxtb	r2, r3
 800fd06:	4b27      	ldr	r3, [pc, #156]	; (800fda4 <MlmeIndication+0xc8>)
 800fd08:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800fd10:	4b24      	ldr	r3, [pc, #144]	; (800fda4 <MlmeIndication+0xc8>)
 800fd12:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	78da      	ldrb	r2, [r3, #3]
 800fd18:	4b22      	ldr	r3, [pc, #136]	; (800fda4 <MlmeIndication+0xc8>)
 800fd1a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	4a20      	ldr	r2, [pc, #128]	; (800fda4 <MlmeIndication+0xc8>)
 800fd22:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	2b0b      	cmp	r3, #11
 800fd2a:	d009      	beq.n	800fd40 <MlmeIndication+0x64>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	2b0f      	cmp	r3, #15
 800fd32:	d005      	beq.n	800fd40 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800fd34:	4b1c      	ldr	r3, [pc, #112]	; (800fda8 <MlmeIndication+0xcc>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd3a:	491a      	ldr	r1, [pc, #104]	; (800fda4 <MlmeIndication+0xc8>)
 800fd3c:	2000      	movs	r0, #0
 800fd3e:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800fd40:	6879      	ldr	r1, [r7, #4]
 800fd42:	2003      	movs	r0, #3
 800fd44:	f000 f8a4 	bl	800fe90 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	781b      	ldrb	r3, [r3, #0]
 800fd4c:	2b0f      	cmp	r3, #15
 800fd4e:	d01e      	beq.n	800fd8e <MlmeIndication+0xb2>
 800fd50:	2b0f      	cmp	r3, #15
 800fd52:	dc1e      	bgt.n	800fd92 <MlmeIndication+0xb6>
 800fd54:	2b07      	cmp	r3, #7
 800fd56:	d002      	beq.n	800fd5e <MlmeIndication+0x82>
 800fd58:	2b0b      	cmp	r3, #11
 800fd5a:	d01c      	beq.n	800fd96 <MlmeIndication+0xba>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800fd5c:	e019      	b.n	800fd92 <MlmeIndication+0xb6>
            LmHandlerAppData_t appData =
 800fd5e:	2300      	movs	r3, #0
 800fd60:	723b      	strb	r3, [r7, #8]
 800fd62:	2300      	movs	r3, #0
 800fd64:	727b      	strb	r3, [r7, #9]
 800fd66:	2300      	movs	r3, #0
 800fd68:	60fb      	str	r3, [r7, #12]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800fd6a:	4b10      	ldr	r3, [pc, #64]	; (800fdac <MlmeIndication+0xd0>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	68db      	ldr	r3, [r3, #12]
 800fd70:	4798      	blx	r3
 800fd72:	4603      	mov	r3, r0
 800fd74:	f083 0301 	eor.w	r3, r3, #1
 800fd78:	b2db      	uxtb	r3, r3
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d00d      	beq.n	800fd9a <MlmeIndication+0xbe>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800fd7e:	f107 0308 	add.w	r3, r7, #8
 800fd82:	2201      	movs	r2, #1
 800fd84:	2100      	movs	r1, #0
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7ff fc90 	bl	800f6ac <LmHandlerSend>
        break;
 800fd8c:	e005      	b.n	800fd9a <MlmeIndication+0xbe>
        break;
 800fd8e:	bf00      	nop
 800fd90:	e004      	b.n	800fd9c <MlmeIndication+0xc0>
        break;
 800fd92:	bf00      	nop
 800fd94:	e002      	b.n	800fd9c <MlmeIndication+0xc0>
        break;
 800fd96:	bf00      	nop
 800fd98:	e000      	b.n	800fd9c <MlmeIndication+0xc0>
        break;
 800fd9a:	bf00      	nop
    }
}
 800fd9c:	bf00      	nop
 800fd9e:	3710      	adds	r7, #16
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}
 800fda4:	200000e8 	.word	0x200000e8
 800fda8:	20000800 	.word	0x20000800
 800fdac:	200007d8 	.word	0x200007d8

0800fdb0 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b084      	sub	sp, #16
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	6039      	str	r1, [r7, #0]
 800fdba:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	60fb      	str	r3, [r7, #12]
    switch( id )
 800fdc0:	79fb      	ldrb	r3, [r7, #7]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d103      	bne.n	800fdce <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800fdc6:	f000 f9d9 	bl	801017c <LmhpCompliancePackageFactory>
 800fdca:	60f8      	str	r0, [r7, #12]
            break;
 800fdcc:	e000      	b.n	800fdd0 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800fdce:	bf00      	nop
        }
    }
    if( package != NULL )
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d02b      	beq.n	800fe2e <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800fdd6:	79fb      	ldrb	r3, [r7, #7]
 800fdd8:	4918      	ldr	r1, [pc, #96]	; (800fe3c <LmHandlerPackageRegister+0x8c>)
 800fdda:	68fa      	ldr	r2, [r7, #12]
 800fddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800fde0:	79fb      	ldrb	r3, [r7, #7]
 800fde2:	4a16      	ldr	r2, [pc, #88]	; (800fe3c <LmHandlerPackageRegister+0x8c>)
 800fde4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fde8:	4a15      	ldr	r2, [pc, #84]	; (800fe40 <LmHandlerPackageRegister+0x90>)
 800fdea:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800fdec:	79fb      	ldrb	r3, [r7, #7]
 800fdee:	4a13      	ldr	r2, [pc, #76]	; (800fe3c <LmHandlerPackageRegister+0x8c>)
 800fdf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdf4:	4a13      	ldr	r2, [pc, #76]	; (800fe44 <LmHandlerPackageRegister+0x94>)
 800fdf6:	62da      	str	r2, [r3, #44]	; 0x2c
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800fdf8:	79fb      	ldrb	r3, [r7, #7]
 800fdfa:	4a10      	ldr	r2, [pc, #64]	; (800fe3c <LmHandlerPackageRegister+0x8c>)
 800fdfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe00:	4a11      	ldr	r2, [pc, #68]	; (800fe48 <LmHandlerPackageRegister+0x98>)
 800fe02:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800fe04:	4b11      	ldr	r3, [pc, #68]	; (800fe4c <LmHandlerPackageRegister+0x9c>)
 800fe06:	681a      	ldr	r2, [r3, #0]
 800fe08:	79fb      	ldrb	r3, [r7, #7]
 800fe0a:	490c      	ldr	r1, [pc, #48]	; (800fe3c <LmHandlerPackageRegister+0x8c>)
 800fe0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fe10:	6992      	ldr	r2, [r2, #24]
 800fe12:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800fe14:	79fb      	ldrb	r3, [r7, #7]
 800fe16:	4a09      	ldr	r2, [pc, #36]	; (800fe3c <LmHandlerPackageRegister+0x8c>)
 800fe18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe1c:	685b      	ldr	r3, [r3, #4]
 800fe1e:	4a0c      	ldr	r2, [pc, #48]	; (800fe50 <LmHandlerPackageRegister+0xa0>)
 800fe20:	6851      	ldr	r1, [r2, #4]
 800fe22:	4a0b      	ldr	r2, [pc, #44]	; (800fe50 <LmHandlerPackageRegister+0xa0>)
 800fe24:	7852      	ldrb	r2, [r2, #1]
 800fe26:	6838      	ldr	r0, [r7, #0]
 800fe28:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	e001      	b.n	800fe32 <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800fe2e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3710      	adds	r7, #16
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	200007d8 	.word	0x200007d8
 800fe40:	0800f575 	.word	0x0800f575
 800fe44:	0800f6ad 	.word	0x0800f6ad
 800fe48:	0800f85d 	.word	0x0800f85d
 800fe4c:	20000800 	.word	0x20000800
 800fe50:	200000fc 	.word	0x200000fc

0800fe54 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b082      	sub	sp, #8
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800fe5e:	79fb      	ldrb	r3, [r7, #7]
 800fe60:	2b04      	cmp	r3, #4
 800fe62:	d80e      	bhi.n	800fe82 <LmHandlerPackageIsInitialized+0x2e>
 800fe64:	79fb      	ldrb	r3, [r7, #7]
 800fe66:	4a09      	ldr	r2, [pc, #36]	; (800fe8c <LmHandlerPackageIsInitialized+0x38>)
 800fe68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe6c:	689b      	ldr	r3, [r3, #8]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d007      	beq.n	800fe82 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800fe72:	79fb      	ldrb	r3, [r7, #7]
 800fe74:	4a05      	ldr	r2, [pc, #20]	; (800fe8c <LmHandlerPackageIsInitialized+0x38>)
 800fe76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe7a:	689b      	ldr	r3, [r3, #8]
 800fe7c:	4798      	blx	r3
 800fe7e:	4603      	mov	r3, r0
 800fe80:	e000      	b.n	800fe84 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800fe82:	2300      	movs	r3, #0
    }
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	3708      	adds	r7, #8
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}
 800fe8c:	200007d8 	.word	0x200007d8

0800fe90 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	4603      	mov	r3, r0
 800fe98:	6039      	str	r1, [r7, #0]
 800fe9a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	73fb      	strb	r3, [r7, #15]
 800fea0:	e07c      	b.n	800ff9c <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 800fea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fea6:	4a42      	ldr	r2, [pc, #264]	; (800ffb0 <LmHandlerPackagesNotify+0x120>)
 800fea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d06f      	beq.n	800ff90 <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 800feb0:	79fb      	ldrb	r3, [r7, #7]
 800feb2:	2b03      	cmp	r3, #3
 800feb4:	d863      	bhi.n	800ff7e <LmHandlerPackagesNotify+0xee>
 800feb6:	a201      	add	r2, pc, #4	; (adr r2, 800febc <LmHandlerPackagesNotify+0x2c>)
 800feb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800febc:	0800fecd 	.word	0x0800fecd
 800fec0:	0800feef 	.word	0x0800feef
 800fec4:	0800ff3b 	.word	0x0800ff3b
 800fec8:	0800ff5d 	.word	0x0800ff5d
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800fecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fed0:	4a37      	ldr	r2, [pc, #220]	; (800ffb0 <LmHandlerPackagesNotify+0x120>)
 800fed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fed6:	699b      	ldr	r3, [r3, #24]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d052      	beq.n	800ff82 <LmHandlerPackagesNotify+0xf2>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800fedc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fee0:	4a33      	ldr	r2, [pc, #204]	; (800ffb0 <LmHandlerPackagesNotify+0x120>)
 800fee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fee6:	699b      	ldr	r3, [r3, #24]
 800fee8:	6838      	ldr	r0, [r7, #0]
 800feea:	4798      	blx	r3
                    }
                    break;
 800feec:	e049      	b.n	800ff82 <LmHandlerPackagesNotify+0xf2>
                }
                case PACKAGE_MCPS_INDICATION:
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800feee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fef2:	4a2f      	ldr	r2, [pc, #188]	; (800ffb0 <LmHandlerPackagesNotify+0x120>)
 800fef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fef8:	69db      	ldr	r3, [r3, #28]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d043      	beq.n	800ff86 <LmHandlerPackagesNotify+0xf6>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800fefe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff02:	4a2b      	ldr	r2, [pc, #172]	; (800ffb0 <LmHandlerPackagesNotify+0x120>)
 800ff04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff08:	781a      	ldrb	r2, [r3, #0]
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d00a      	beq.n	800ff28 <LmHandlerPackagesNotify+0x98>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800ff12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d135      	bne.n	800ff86 <LmHandlerPackagesNotify+0xf6>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800ff1a:	4b25      	ldr	r3, [pc, #148]	; (800ffb0 <LmHandlerPackagesNotify+0x120>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	4798      	blx	r3
 800ff22:	4603      	mov	r3, r0
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d02e      	beq.n	800ff86 <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800ff28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff2c:	4a20      	ldr	r2, [pc, #128]	; (800ffb0 <LmHandlerPackagesNotify+0x120>)
 800ff2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff32:	69db      	ldr	r3, [r3, #28]
 800ff34:	6838      	ldr	r0, [r7, #0]
 800ff36:	4798      	blx	r3
                    }
                    break;
 800ff38:	e025      	b.n	800ff86 <LmHandlerPackagesNotify+0xf6>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800ff3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff3e:	4a1c      	ldr	r2, [pc, #112]	; (800ffb0 <LmHandlerPackagesNotify+0x120>)
 800ff40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff44:	6a1b      	ldr	r3, [r3, #32]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d01f      	beq.n	800ff8a <LmHandlerPackagesNotify+0xfa>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800ff4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff4e:	4a18      	ldr	r2, [pc, #96]	; (800ffb0 <LmHandlerPackagesNotify+0x120>)
 800ff50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff54:	6a1b      	ldr	r3, [r3, #32]
 800ff56:	6838      	ldr	r0, [r7, #0]
 800ff58:	4798      	blx	r3
                    }
                    break;
 800ff5a:	e016      	b.n	800ff8a <LmHandlerPackagesNotify+0xfa>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800ff5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff60:	4a13      	ldr	r2, [pc, #76]	; (800ffb0 <LmHandlerPackagesNotify+0x120>)
 800ff62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d010      	beq.n	800ff8e <LmHandlerPackagesNotify+0xfe>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800ff6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff70:	4a0f      	ldr	r2, [pc, #60]	; (800ffb0 <LmHandlerPackagesNotify+0x120>)
 800ff72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff78:	6838      	ldr	r0, [r7, #0]
 800ff7a:	4798      	blx	r3
                    }
                    break;
 800ff7c:	e007      	b.n	800ff8e <LmHandlerPackagesNotify+0xfe>
                }
                default:
                {
                    break;
 800ff7e:	bf00      	nop
 800ff80:	e006      	b.n	800ff90 <LmHandlerPackagesNotify+0x100>
                    break;
 800ff82:	bf00      	nop
 800ff84:	e004      	b.n	800ff90 <LmHandlerPackagesNotify+0x100>
                    break;
 800ff86:	bf00      	nop
 800ff88:	e002      	b.n	800ff90 <LmHandlerPackagesNotify+0x100>
                    break;
 800ff8a:	bf00      	nop
 800ff8c:	e000      	b.n	800ff90 <LmHandlerPackagesNotify+0x100>
                    break;
 800ff8e:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ff90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff94:	b2db      	uxtb	r3, r3
 800ff96:	3301      	adds	r3, #1
 800ff98:	b2db      	uxtb	r3, r3
 800ff9a:	73fb      	strb	r3, [r7, #15]
 800ff9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffa0:	2b04      	cmp	r3, #4
 800ffa2:	f77f af7e 	ble.w	800fea2 <LmHandlerPackagesNotify+0x12>
                }
            }
        }
    }
}
 800ffa6:	bf00      	nop
 800ffa8:	bf00      	nop
 800ffaa:	3710      	adds	r7, #16
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	200007d8 	.word	0x200007d8

0800ffb4 <LmHandlerPackagesProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ffba:	2300      	movs	r3, #0
 800ffbc:	71fb      	strb	r3, [r7, #7]
 800ffbe:	e022      	b.n	8010006 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ffc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffc4:	4a14      	ldr	r2, [pc, #80]	; (8010018 <LmHandlerPackagesProcess+0x64>)
 800ffc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d015      	beq.n	800fffa <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ffce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffd2:	4a11      	ldr	r2, [pc, #68]	; (8010018 <LmHandlerPackagesProcess+0x64>)
 800ffd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffd8:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d00d      	beq.n	800fffa <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800ffde:	79fb      	ldrb	r3, [r7, #7]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7ff ff37 	bl	800fe54 <LmHandlerPackageIsInitialized>
 800ffe6:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d006      	beq.n	800fffa <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800ffec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fff0:	4a09      	ldr	r2, [pc, #36]	; (8010018 <LmHandlerPackagesProcess+0x64>)
 800fff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fff6:	691b      	ldr	r3, [r3, #16]
 800fff8:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	3301      	adds	r3, #1
 8010002:	b2db      	uxtb	r3, r3
 8010004:	71fb      	strb	r3, [r7, #7]
 8010006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801000a:	2b04      	cmp	r3, #4
 801000c:	ddd8      	ble.n	800ffc0 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 801000e:	bf00      	nop
 8010010:	bf00      	nop
 8010012:	3708      	adds	r7, #8
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}
 8010018:	200007d8 	.word	0x200007d8

0801001c <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 801001c:	b480      	push	{r7}
 801001e:	b083      	sub	sp, #12
 8010020:	af00      	add	r7, sp, #0
 8010022:	4603      	mov	r3, r0
 8010024:	6039      	str	r1, [r7, #0]
 8010026:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d102      	bne.n	8010034 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 801002e:	f04f 33ff 	mov.w	r3, #4294967295
 8010032:	e00e      	b.n	8010052 <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 8010034:	79fb      	ldrb	r3, [r7, #7]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d002      	beq.n	8010040 <LmHandlerGetVersion+0x24>
 801003a:	2b01      	cmp	r3, #1
 801003c:	d004      	beq.n	8010048 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 801003e:	e007      	b.n	8010050 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	4a06      	ldr	r2, [pc, #24]	; (801005c <LmHandlerGetVersion+0x40>)
 8010044:	601a      	str	r2, [r3, #0]
            break;
 8010046:	e003      	b.n	8010050 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	4a05      	ldr	r2, [pc, #20]	; (8010060 <LmHandlerGetVersion+0x44>)
 801004c:	601a      	str	r2, [r3, #0]
            break;
 801004e:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 8010050:	2300      	movs	r3, #0
}
 8010052:	4618      	mov	r0, r3
 8010054:	370c      	adds	r7, #12
 8010056:	46bd      	mov	sp, r7
 8010058:	bc80      	pop	{r7}
 801005a:	4770      	bx	lr
 801005c:	01000300 	.word	0x01000300
 8010060:	01010003 	.word	0x01010003

08010064 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 8010068:	f005 f826 	bl	80150b8 <LoRaMacDeInitialization>
 801006c:	4603      	mov	r3, r0
 801006e:	2b00      	cmp	r3, #0
 8010070:	d101      	bne.n	8010076 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010072:	2300      	movs	r3, #0
 8010074:	e001      	b.n	801007a <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010076:	f06f 0301 	mvn.w	r3, #1
    }
}
 801007a:	4618      	mov	r0, r3
 801007c:	bd80      	pop	{r7, pc}

0801007e <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 801007e:	b580      	push	{r7, lr}
 8010080:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 8010082:	f004 f825 	bl	80140d0 <LoRaMacHalt>
 8010086:	4603      	mov	r3, r0
 8010088:	2b00      	cmp	r3, #0
 801008a:	d101      	bne.n	8010090 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 801008c:	2300      	movs	r3, #0
 801008e:	e001      	b.n	8010094 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010090:	f06f 0301 	mvn.w	r3, #1
    }
}
 8010094:	4618      	mov	r0, r3
 8010096:	bd80      	pop	{r7, pc}

08010098 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b08e      	sub	sp, #56	; 0x38
 801009c:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 801009e:	2300      	movs	r3, #0
 80100a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 80100a4:	2300      	movs	r3, #0
 80100a6:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 80100a8:	f7ff ffe9 	bl	801007e <LmHandlerHalt>
 80100ac:	4603      	mov	r3, r0
 80100ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 80100b2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d12f      	bne.n	801011a <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 80100ba:	f000 f84f 	bl	801015c <NvmDataMgmtStoreBegin>
 80100be:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 80100c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c2:	f113 0f02 	cmn.w	r3, #2
 80100c6:	d103      	bne.n	80100d0 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 80100c8:	23f8      	movs	r3, #248	; 0xf8
 80100ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80100ce:	e01c      	b.n	801010a <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 80100d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d104      	bne.n	80100e0 <LmHandlerNvmDataStore+0x48>
 80100d6:	4b1b      	ldr	r3, [pc, #108]	; (8010144 <LmHandlerNvmDataStore+0xac>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	695b      	ldr	r3, [r3, #20]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d103      	bne.n	80100e8 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80100e0:	23ff      	movs	r3, #255	; 0xff
 80100e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80100e6:	e010      	b.n	801010a <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 80100e8:	2326      	movs	r3, #38	; 0x26
 80100ea:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 80100ec:	1d3b      	adds	r3, r7, #4
 80100ee:	4618      	mov	r0, r3
 80100f0:	f004 f8ae 	bl	8014250 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 80100f8:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 80100fc:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 80100fe:	4b11      	ldr	r3, [pc, #68]	; (8010144 <LmHandlerNvmDataStore+0xac>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	695b      	ldr	r3, [r3, #20]
 8010104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010106:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010108:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 801010a:	f000 f82f 	bl	801016c <NvmDataMgmtStoreEnd>
 801010e:	4603      	mov	r3, r0
 8010110:	2b00      	cmp	r3, #0
 8010112:	d002      	beq.n	801011a <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8010114:	23ff      	movs	r3, #255	; 0xff
 8010116:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 801011a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801011e:	2b00      	cmp	r3, #0
 8010120:	d109      	bne.n	8010136 <LmHandlerNvmDataStore+0x9e>
 8010122:	4b08      	ldr	r3, [pc, #32]	; (8010144 <LmHandlerNvmDataStore+0xac>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	69db      	ldr	r3, [r3, #28]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d004      	beq.n	8010136 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 801012c:	4b05      	ldr	r3, [pc, #20]	; (8010144 <LmHandlerNvmDataStore+0xac>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	69db      	ldr	r3, [r3, #28]
 8010132:	2001      	movs	r0, #1
 8010134:	4798      	blx	r3
    }

    return lmhStatus;
 8010136:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801013a:	4618      	mov	r0, r3
 801013c:	3738      	adds	r7, #56	; 0x38
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	20000800 	.word	0x20000800

08010148 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
 801014e:	4603      	mov	r3, r0
 8010150:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8010152:	bf00      	nop
 8010154:	370c      	adds	r7, #12
 8010156:	46bd      	mov	sp, r7
 8010158:	bc80      	pop	{r7}
 801015a:	4770      	bx	lr

0801015c <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 801015c:	b480      	push	{r7}
 801015e:	af00      	add	r7, sp, #0
    {
        return NVM_DATA_NOT_AVAILABLE;
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 8010160:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010164:	4618      	mov	r0, r3
 8010166:	46bd      	mov	sp, r7
 8010168:	bc80      	pop	{r7}
 801016a:	4770      	bx	lr

0801016c <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 801016c:	b480      	push	{r7}
 801016e:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 8010170:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010174:	4618      	mov	r0, r3
 8010176:	46bd      	mov	sp, r7
 8010178:	bc80      	pop	{r7}
 801017a:	4770      	bx	lr

0801017c <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 801017c:	b480      	push	{r7}
 801017e:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 8010180:	4b02      	ldr	r3, [pc, #8]	; (801018c <LmhpCompliancePackageFactory+0x10>)
}
 8010182:	4618      	mov	r0, r3
 8010184:	46bd      	mov	sp, r7
 8010186:	bc80      	pop	{r7}
 8010188:	4770      	bx	lr
 801018a:	bf00      	nop
 801018c:	20000104 	.word	0x20000104

08010190 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 8010190:	b480      	push	{r7}
 8010192:	b085      	sub	sp, #20
 8010194:	af00      	add	r7, sp, #0
 8010196:	60f8      	str	r0, [r7, #12]
 8010198:	60b9      	str	r1, [r7, #8]
 801019a:	4613      	mov	r3, r2
 801019c:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d00f      	beq.n	80101c4 <LmhpComplianceInit+0x34>
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d00c      	beq.n	80101c4 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 80101aa:	4a0c      	ldr	r2, [pc, #48]	; (80101dc <LmhpComplianceInit+0x4c>)
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 80101b0:	4a0b      	ldr	r2, [pc, #44]	; (80101e0 <LmhpComplianceInit+0x50>)
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 80101b6:	4a0a      	ldr	r2, [pc, #40]	; (80101e0 <LmhpComplianceInit+0x50>)
 80101b8:	79fb      	ldrb	r3, [r7, #7]
 80101ba:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 80101bc:	4b08      	ldr	r3, [pc, #32]	; (80101e0 <LmhpComplianceInit+0x50>)
 80101be:	2201      	movs	r2, #1
 80101c0:	701a      	strb	r2, [r3, #0]
 80101c2:	e006      	b.n	80101d2 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 80101c4:	4b05      	ldr	r3, [pc, #20]	; (80101dc <LmhpComplianceInit+0x4c>)
 80101c6:	2200      	movs	r2, #0
 80101c8:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 80101ca:	4b05      	ldr	r3, [pc, #20]	; (80101e0 <LmhpComplianceInit+0x50>)
 80101cc:	2200      	movs	r2, #0
 80101ce:	701a      	strb	r2, [r3, #0]
    }
}
 80101d0:	bf00      	nop
 80101d2:	bf00      	nop
 80101d4:	3714      	adds	r7, #20
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bc80      	pop	{r7}
 80101da:	4770      	bx	lr
 80101dc:	2000094c 	.word	0x2000094c
 80101e0:	20000938 	.word	0x20000938

080101e4 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 80101e4:	b480      	push	{r7}
 80101e6:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 80101e8:	4b02      	ldr	r3, [pc, #8]	; (80101f4 <LmhpComplianceIsInitialized+0x10>)
 80101ea:	781b      	ldrb	r3, [r3, #0]
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bc80      	pop	{r7}
 80101f2:	4770      	bx	lr
 80101f4:	20000938 	.word	0x20000938

080101f8 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 80101f8:	b480      	push	{r7}
 80101fa:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 80101fc:	4b07      	ldr	r3, [pc, #28]	; (801021c <LmhpComplianceIsRunning+0x24>)
 80101fe:	781b      	ldrb	r3, [r3, #0]
 8010200:	f083 0301 	eor.w	r3, r3, #1
 8010204:	b2db      	uxtb	r3, r3
 8010206:	2b00      	cmp	r3, #0
 8010208:	d001      	beq.n	801020e <LmhpComplianceIsRunning+0x16>
    {
        return false;
 801020a:	2300      	movs	r3, #0
 801020c:	e001      	b.n	8010212 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 801020e:	4b03      	ldr	r3, [pc, #12]	; (801021c <LmhpComplianceIsRunning+0x24>)
 8010210:	785b      	ldrb	r3, [r3, #1]
}
 8010212:	4618      	mov	r0, r3
 8010214:	46bd      	mov	sp, r7
 8010216:	bc80      	pop	{r7}
 8010218:	4770      	bx	lr
 801021a:	bf00      	nop
 801021c:	20000938 	.word	0x20000938

08010220 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 8010220:	b480      	push	{r7}
 8010222:	b083      	sub	sp, #12
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 8010228:	4b0f      	ldr	r3, [pc, #60]	; (8010268 <LmhpComplianceOnMcpsConfirm+0x48>)
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	f083 0301 	eor.w	r3, r3, #1
 8010230:	b2db      	uxtb	r3, r3
 8010232:	2b00      	cmp	r3, #0
 8010234:	d112      	bne.n	801025c <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 8010236:	4b0c      	ldr	r3, [pc, #48]	; (8010268 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010238:	785b      	ldrb	r3, [r3, #1]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d00f      	beq.n	801025e <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 8010242:	2b01      	cmp	r3, #1
 8010244:	d10b      	bne.n	801025e <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 801024a:	2b00      	cmp	r3, #0
 801024c:	d007      	beq.n	801025e <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 801024e:	4b06      	ldr	r3, [pc, #24]	; (8010268 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010250:	899b      	ldrh	r3, [r3, #12]
 8010252:	3301      	adds	r3, #1
 8010254:	b29a      	uxth	r2, r3
 8010256:	4b04      	ldr	r3, [pc, #16]	; (8010268 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010258:	819a      	strh	r2, [r3, #12]
 801025a:	e000      	b.n	801025e <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 801025c:	bf00      	nop
    }
}
 801025e:	370c      	adds	r7, #12
 8010260:	46bd      	mov	sp, r7
 8010262:	bc80      	pop	{r7}
 8010264:	4770      	bx	lr
 8010266:	bf00      	nop
 8010268:	20000938 	.word	0x20000938

0801026c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 801026c:	b480      	push	{r7}
 801026e:	b083      	sub	sp, #12
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010274:	4b12      	ldr	r3, [pc, #72]	; (80102c0 <LmhpComplianceOnMlmeConfirm+0x54>)
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	f083 0301 	eor.w	r3, r3, #1
 801027c:	b2db      	uxtb	r3, r3
 801027e:	2b00      	cmp	r3, #0
 8010280:	d116      	bne.n	80102b0 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8010282:	4b0f      	ldr	r3, [pc, #60]	; (80102c0 <LmhpComplianceOnMlmeConfirm+0x54>)
 8010284:	785b      	ldrb	r3, [r3, #1]
 8010286:	f083 0301 	eor.w	r3, r3, #1
 801028a:	b2db      	uxtb	r3, r3
 801028c:	2b00      	cmp	r3, #0
 801028e:	d111      	bne.n	80102b4 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	781b      	ldrb	r3, [r3, #0]
 8010294:	2b04      	cmp	r3, #4
 8010296:	d10e      	bne.n	80102b6 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 8010298:	4b09      	ldr	r3, [pc, #36]	; (80102c0 <LmhpComplianceOnMlmeConfirm+0x54>)
 801029a:	2201      	movs	r2, #1
 801029c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	7a1a      	ldrb	r2, [r3, #8]
 80102a2:	4b07      	ldr	r3, [pc, #28]	; (80102c0 <LmhpComplianceOnMlmeConfirm+0x54>)
 80102a4:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	7a5a      	ldrb	r2, [r3, #9]
 80102aa:	4b05      	ldr	r3, [pc, #20]	; (80102c0 <LmhpComplianceOnMlmeConfirm+0x54>)
 80102ac:	741a      	strb	r2, [r3, #16]
 80102ae:	e002      	b.n	80102b6 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 80102b0:	bf00      	nop
 80102b2:	e000      	b.n	80102b6 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 80102b4:	bf00      	nop
    }
}
 80102b6:	370c      	adds	r7, #12
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bc80      	pop	{r7}
 80102bc:	4770      	bx	lr
 80102be:	bf00      	nop
 80102c0:	20000938 	.word	0x20000938

080102c4 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b082      	sub	sp, #8
 80102c8:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 80102ca:	4b33      	ldr	r3, [pc, #204]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	f083 0301 	eor.w	r3, r3, #1
 80102d2:	b2db      	uxtb	r3, r3
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d002      	beq.n	80102de <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 80102d8:	f04f 33ff 	mov.w	r3, #4294967295
 80102dc:	e057      	b.n	801038e <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.IsRunning == false )
 80102de:	4b2e      	ldr	r3, [pc, #184]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 80102e0:	785b      	ldrb	r3, [r3, #1]
 80102e2:	f083 0301 	eor.w	r3, r3, #1
 80102e6:	b2db      	uxtb	r3, r3
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d001      	beq.n	80102f0 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80102ec:	2300      	movs	r3, #0
 80102ee:	e04e      	b.n	801038e <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.LinkCheck == true )
 80102f0:	4b29      	ldr	r3, [pc, #164]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 80102f2:	7b9b      	ldrb	r3, [r3, #14]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d019      	beq.n	801032c <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 80102f8:	4b27      	ldr	r3, [pc, #156]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 80102fa:	2200      	movs	r2, #0
 80102fc:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 80102fe:	4b26      	ldr	r3, [pc, #152]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 8010300:	2203      	movs	r2, #3
 8010302:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8010304:	4b24      	ldr	r3, [pc, #144]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 8010306:	689b      	ldr	r3, [r3, #8]
 8010308:	2205      	movs	r2, #5
 801030a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 801030c:	4b22      	ldr	r3, [pc, #136]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 801030e:	689b      	ldr	r3, [r3, #8]
 8010310:	3301      	adds	r3, #1
 8010312:	4a21      	ldr	r2, [pc, #132]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 8010314:	7bd2      	ldrb	r2, [r2, #15]
 8010316:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8010318:	4b1f      	ldr	r3, [pc, #124]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 801031a:	689b      	ldr	r3, [r3, #8]
 801031c:	3302      	adds	r3, #2
 801031e:	4a1e      	ldr	r2, [pc, #120]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 8010320:	7c12      	ldrb	r2, [r2, #16]
 8010322:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 8010324:	4b1c      	ldr	r3, [pc, #112]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 8010326:	2201      	movs	r2, #1
 8010328:	709a      	strb	r2, [r3, #2]
 801032a:	e01c      	b.n	8010366 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 801032c:	4b1a      	ldr	r3, [pc, #104]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 801032e:	789b      	ldrb	r3, [r3, #2]
 8010330:	2b01      	cmp	r3, #1
 8010332:	d005      	beq.n	8010340 <LmhpComplianceTxProcess+0x7c>
 8010334:	2b04      	cmp	r3, #4
 8010336:	d116      	bne.n	8010366 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 8010338:	4b17      	ldr	r3, [pc, #92]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 801033a:	2201      	movs	r2, #1
 801033c:	709a      	strb	r2, [r3, #2]
            break;
 801033e:	e012      	b.n	8010366 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 8010340:	4b15      	ldr	r3, [pc, #84]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 8010342:	2202      	movs	r2, #2
 8010344:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8010346:	4b14      	ldr	r3, [pc, #80]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 8010348:	899b      	ldrh	r3, [r3, #12]
 801034a:	0a1b      	lsrs	r3, r3, #8
 801034c:	b29a      	uxth	r2, r3
 801034e:	4b12      	ldr	r3, [pc, #72]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 8010350:	689b      	ldr	r3, [r3, #8]
 8010352:	b2d2      	uxtb	r2, r2
 8010354:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8010356:	4b10      	ldr	r3, [pc, #64]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 8010358:	899a      	ldrh	r2, [r3, #12]
 801035a:	4b0f      	ldr	r3, [pc, #60]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 801035c:	689b      	ldr	r3, [r3, #8]
 801035e:	3301      	adds	r3, #1
 8010360:	b2d2      	uxtb	r2, r2
 8010362:	701a      	strb	r2, [r3, #0]
            break;
 8010364:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 8010366:	23e0      	movs	r3, #224	; 0xe0
 8010368:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 801036a:	4b0b      	ldr	r3, [pc, #44]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 801036c:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 801036e:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8010370:	4b09      	ldr	r3, [pc, #36]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 8010372:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 8010374:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 8010376:	4809      	ldr	r0, [pc, #36]	; (801039c <LmhpComplianceTxProcess+0xd8>)
 8010378:	f00d fb30 	bl	801d9dc <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 801037c:	4b08      	ldr	r3, [pc, #32]	; (80103a0 <LmhpComplianceTxProcess+0xdc>)
 801037e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010380:	4a05      	ldr	r2, [pc, #20]	; (8010398 <LmhpComplianceTxProcess+0xd4>)
 8010382:	78d2      	ldrb	r2, [r2, #3]
 8010384:	4611      	mov	r1, r2
 8010386:	4638      	mov	r0, r7
 8010388:	2201      	movs	r2, #1
 801038a:	4798      	blx	r3
 801038c:	4603      	mov	r3, r0
}
 801038e:	4618      	mov	r0, r3
 8010390:	3708      	adds	r7, #8
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}
 8010396:	bf00      	nop
 8010398:	20000938 	.word	0x20000938
 801039c:	20000920 	.word	0x20000920
 80103a0:	20000104 	.word	0x20000104

080103a4 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b0a2      	sub	sp, #136	; 0x88
 80103a8:	af02      	add	r7, sp, #8
 80103aa:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 80103ac:	4ba3      	ldr	r3, [pc, #652]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 80103ae:	781b      	ldrb	r3, [r3, #0]
 80103b0:	f083 0301 	eor.w	r3, r3, #1
 80103b4:	b2db      	uxtb	r3, r3
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	f040 81c2 	bne.w	8010740 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	7b5b      	ldrb	r3, [r3, #13]
 80103c0:	f083 0301 	eor.w	r3, r3, #1
 80103c4:	b2db      	uxtb	r3, r3
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	f040 81bc 	bne.w	8010744 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 80103cc:	4b9b      	ldr	r3, [pc, #620]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 80103ce:	785b      	ldrb	r3, [r3, #1]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d00c      	beq.n	80103ee <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	7b9b      	ldrb	r3, [r3, #14]
 80103d8:	f083 0301 	eor.w	r3, r3, #1
 80103dc:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d005      	beq.n	80103ee <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 80103e2:	4b96      	ldr	r3, [pc, #600]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 80103e4:	899b      	ldrh	r3, [r3, #12]
 80103e6:	3301      	adds	r3, #1
 80103e8:	b29a      	uxth	r2, r3
 80103ea:	4b94      	ldr	r3, [pc, #592]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 80103ec:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	78db      	ldrb	r3, [r3, #3]
 80103f2:	2be0      	cmp	r3, #224	; 0xe0
 80103f4:	f040 81a8 	bne.w	8010748 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 80103f8:	4b90      	ldr	r3, [pc, #576]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 80103fa:	785b      	ldrb	r3, [r3, #1]
 80103fc:	f083 0301 	eor.w	r3, r3, #1
 8010400:	b2db      	uxtb	r3, r3
 8010402:	2b00      	cmp	r3, #0
 8010404:	d060      	beq.n	80104c8 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	7b1b      	ldrb	r3, [r3, #12]
 801040a:	2b04      	cmp	r3, #4
 801040c:	f040 81a1 	bne.w	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	689b      	ldr	r3, [r3, #8]
 8010414:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8010416:	2b01      	cmp	r3, #1
 8010418:	f040 819b 	bne.w	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	689b      	ldr	r3, [r3, #8]
 8010420:	3301      	adds	r3, #1
 8010422:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8010424:	2b01      	cmp	r3, #1
 8010426:	f040 8194 	bne.w	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	689b      	ldr	r3, [r3, #8]
 801042e:	3302      	adds	r3, #2
 8010430:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8010432:	2b01      	cmp	r3, #1
 8010434:	f040 818d 	bne.w	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	689b      	ldr	r3, [r3, #8]
 801043c:	3303      	adds	r3, #3
 801043e:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8010440:	2b01      	cmp	r3, #1
 8010442:	f040 8186 	bne.w	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 8010446:	4b7d      	ldr	r3, [pc, #500]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 8010448:	2200      	movs	r2, #0
 801044a:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 801044c:	4b7b      	ldr	r3, [pc, #492]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 801044e:	22e0      	movs	r2, #224	; 0xe0
 8010450:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8010452:	4b7a      	ldr	r3, [pc, #488]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 8010454:	2202      	movs	r2, #2
 8010456:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8010458:	4b78      	ldr	r3, [pc, #480]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 801045a:	2200      	movs	r2, #0
 801045c:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 801045e:	4b77      	ldr	r3, [pc, #476]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 8010460:	2200      	movs	r2, #0
 8010462:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8010464:	4b75      	ldr	r3, [pc, #468]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 8010466:	2200      	movs	r2, #0
 8010468:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 801046a:	4b74      	ldr	r3, [pc, #464]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 801046c:	2200      	movs	r2, #0
 801046e:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8010470:	4b72      	ldr	r3, [pc, #456]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 8010472:	2201      	movs	r2, #1
 8010474:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8010476:	4b71      	ldr	r3, [pc, #452]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 8010478:	2201      	movs	r2, #1
 801047a:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 801047c:	2304      	movs	r3, #4
 801047e:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 8010480:	2301      	movs	r3, #1
 8010482:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010484:	f107 0308 	add.w	r3, r7, #8
 8010488:	4618      	mov	r0, r3
 801048a:	f004 f867 	bl	801455c <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 801048e:	2000      	movs	r0, #0
 8010490:	f004 fdf4 	bl	801507c <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8010494:	4b6a      	ldr	r3, [pc, #424]	; (8010640 <LmhpComplianceOnMcpsIndication+0x29c>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	685b      	ldr	r3, [r3, #4]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d003      	beq.n	80104a6 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 801049e:	4b68      	ldr	r3, [pc, #416]	; (8010640 <LmhpComplianceOnMcpsIndication+0x29c>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	685b      	ldr	r3, [r3, #4]
 80104a4:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 80104a6:	2300      	movs	r3, #0
 80104a8:	9300      	str	r3, [sp, #0]
 80104aa:	4b66      	ldr	r3, [pc, #408]	; (8010644 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80104ac:	2200      	movs	r2, #0
 80104ae:	f04f 31ff 	mov.w	r1, #4294967295
 80104b2:	4865      	ldr	r0, [pc, #404]	; (8010648 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80104b4:	f00d fa5c 	bl	801d970 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 80104b8:	f241 3188 	movw	r1, #5000	; 0x1388
 80104bc:	4862      	ldr	r0, [pc, #392]	; (8010648 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80104be:	f00d fb6b 	bl	801db98 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 80104c2:	f7ff feff 	bl	80102c4 <LmhpComplianceTxProcess>
 80104c6:	e144      	b.n	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	689b      	ldr	r3, [r3, #8]
 80104cc:	781a      	ldrb	r2, [r3, #0]
 80104ce:	4b5b      	ldr	r3, [pc, #364]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 80104d0:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 80104d2:	4b5a      	ldr	r3, [pc, #360]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 80104d4:	789b      	ldrb	r3, [r3, #2]
 80104d6:	2b0a      	cmp	r3, #10
 80104d8:	f200 8138 	bhi.w	801074c <LmhpComplianceOnMcpsIndication+0x3a8>
 80104dc:	a201      	add	r2, pc, #4	; (adr r2, 80104e4 <LmhpComplianceOnMcpsIndication+0x140>)
 80104de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104e2:	bf00      	nop
 80104e4:	08010511 	.word	0x08010511
 80104e8:	0801055b 	.word	0x0801055b
 80104ec:	08010563 	.word	0x08010563
 80104f0:	08010571 	.word	0x08010571
 80104f4:	0801057f 	.word	0x0801057f
 80104f8:	080105d7 	.word	0x080105d7
 80104fc:	080105e9 	.word	0x080105e9
 8010500:	08010651 	.word	0x08010651
 8010504:	080106f9 	.word	0x080106f9
 8010508:	0801070b 	.word	0x0801070b
 801050c:	08010725 	.word	0x08010725
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 8010510:	484d      	ldr	r0, [pc, #308]	; (8010648 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010512:	f00d fad1 	bl	801dab8 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 8010516:	4b49      	ldr	r3, [pc, #292]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 8010518:	2200      	movs	r2, #0
 801051a:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 801051c:	4b47      	ldr	r3, [pc, #284]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 801051e:	2200      	movs	r2, #0
 8010520:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 8010522:	2304      	movs	r3, #4
 8010524:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8010526:	4b46      	ldr	r3, [pc, #280]	; (8010640 <LmhpComplianceOnMcpsIndication+0x29c>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	781b      	ldrb	r3, [r3, #0]
 801052c:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 801052e:	f107 0308 	add.w	r3, r7, #8
 8010532:	4618      	mov	r0, r3
 8010534:	f004 f812 	bl	801455c <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010538:	4b41      	ldr	r3, [pc, #260]	; (8010640 <LmhpComplianceOnMcpsIndication+0x29c>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	785b      	ldrb	r3, [r3, #1]
 801053e:	4618      	mov	r0, r3
 8010540:	f004 fd9c 	bl	801507c <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8010544:	4b3e      	ldr	r3, [pc, #248]	; (8010640 <LmhpComplianceOnMcpsIndication+0x29c>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	689b      	ldr	r3, [r3, #8]
 801054a:	2b00      	cmp	r3, #0
 801054c:	f000 8100 	beq.w	8010750 <LmhpComplianceOnMcpsIndication+0x3ac>
                {
                    LmhpComplianceParams->StartPeripherals( );
 8010550:	4b3b      	ldr	r3, [pc, #236]	; (8010640 <LmhpComplianceOnMcpsIndication+0x29c>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	689b      	ldr	r3, [r3, #8]
 8010556:	4798      	blx	r3
                }
            }
            break;
 8010558:	e0fa      	b.n	8010750 <LmhpComplianceOnMcpsIndication+0x3ac>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 801055a:	4b38      	ldr	r3, [pc, #224]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 801055c:	2202      	movs	r2, #2
 801055e:	719a      	strb	r2, [r3, #6]
            break;
 8010560:	e0f7      	b.n	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 8010562:	4b36      	ldr	r3, [pc, #216]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 8010564:	2201      	movs	r2, #1
 8010566:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8010568:	4b34      	ldr	r3, [pc, #208]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 801056a:	2201      	movs	r2, #1
 801056c:	709a      	strb	r2, [r3, #2]
            break;
 801056e:	e0f0      	b.n	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 8010570:	4b32      	ldr	r3, [pc, #200]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 8010572:	2200      	movs	r2, #0
 8010574:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8010576:	4b31      	ldr	r3, [pc, #196]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 8010578:	2201      	movs	r2, #1
 801057a:	709a      	strb	r2, [r3, #2]
            break;
 801057c:	e0e9      	b.n	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	7b1a      	ldrb	r2, [r3, #12]
 8010582:	4b2e      	ldr	r3, [pc, #184]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 8010584:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 8010586:	4b2d      	ldr	r3, [pc, #180]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 8010588:	689b      	ldr	r3, [r3, #8]
 801058a:	2204      	movs	r2, #4
 801058c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 801058e:	2301      	movs	r3, #1
 8010590:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010594:	e012      	b.n	80105bc <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	689a      	ldr	r2, [r3, #8]
 801059a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801059e:	4413      	add	r3, r2
 80105a0:	781a      	ldrb	r2, [r3, #0]
 80105a2:	4b26      	ldr	r3, [pc, #152]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 80105a4:	6899      	ldr	r1, [r3, #8]
 80105a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80105aa:	440b      	add	r3, r1
 80105ac:	3201      	adds	r2, #1
 80105ae:	b2d2      	uxtb	r2, r2
 80105b0:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80105b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80105b6:	3301      	adds	r3, #1
 80105b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80105bc:	4b1f      	ldr	r3, [pc, #124]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 80105be:	795a      	ldrb	r2, [r3, #5]
 80105c0:	4b1e      	ldr	r3, [pc, #120]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 80105c2:	799b      	ldrb	r3, [r3, #6]
 80105c4:	4293      	cmp	r3, r2
 80105c6:	bf28      	it	cs
 80105c8:	4613      	movcs	r3, r2
 80105ca:	b2db      	uxtb	r3, r3
 80105cc:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d3e0      	bcc.n	8010596 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 80105d4:	e0bd      	b.n	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 80105d6:	2304      	movs	r3, #4
 80105d8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 80105dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80105e0:	4618      	mov	r0, r3
 80105e2:	f004 fb15 	bl	8014c10 <LoRaMacMlmeRequest>
            }
            break;
 80105e6:	e0b4      	b.n	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 80105e8:	4817      	ldr	r0, [pc, #92]	; (8010648 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80105ea:	f00d fa65 	bl	801dab8 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 80105ee:	4b13      	ldr	r3, [pc, #76]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 80105f0:	2200      	movs	r2, #0
 80105f2:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 80105f4:	4b11      	ldr	r3, [pc, #68]	; (801063c <LmhpComplianceOnMcpsIndication+0x298>)
 80105f6:	2200      	movs	r2, #0
 80105f8:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 80105fa:	2304      	movs	r3, #4
 80105fc:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80105fe:	4b10      	ldr	r3, [pc, #64]	; (8010640 <LmhpComplianceOnMcpsIndication+0x29c>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8010606:	f107 0308 	add.w	r3, r7, #8
 801060a:	4618      	mov	r0, r3
 801060c:	f003 ffa6 	bl	801455c <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010610:	4b0b      	ldr	r3, [pc, #44]	; (8010640 <LmhpComplianceOnMcpsIndication+0x29c>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	785b      	ldrb	r3, [r3, #1]
 8010616:	4618      	mov	r0, r3
 8010618:	f004 fd30 	bl	801507c <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 801061c:	4b08      	ldr	r3, [pc, #32]	; (8010640 <LmhpComplianceOnMcpsIndication+0x29c>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	689b      	ldr	r3, [r3, #8]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d003      	beq.n	801062e <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 8010626:	4b06      	ldr	r3, [pc, #24]	; (8010640 <LmhpComplianceOnMcpsIndication+0x29c>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	689b      	ldr	r3, [r3, #8]
 801062c:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 801062e:	4b07      	ldr	r3, [pc, #28]	; (801064c <LmhpComplianceOnMcpsIndication+0x2a8>)
 8010630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010632:	2101      	movs	r1, #1
 8010634:	2002      	movs	r0, #2
 8010636:	4798      	blx	r3
            }
            break;
 8010638:	e08b      	b.n	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
 801063a:	bf00      	nop
 801063c:	20000938 	.word	0x20000938
 8010640:	2000094c 	.word	0x2000094c
 8010644:	08010769 	.word	0x08010769
 8010648:	20000920 	.word	0x20000920
 801064c:	20000104 	.word	0x20000104
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	7b1b      	ldrb	r3, [r3, #12]
 8010654:	2b03      	cmp	r3, #3
 8010656:	d113      	bne.n	8010680 <LmhpComplianceOnMcpsIndication+0x2dc>
                {
                    mlmeReq.Type = MLME_TXCW;
 8010658:	2305      	movs	r3, #5
 801065a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	689b      	ldr	r3, [r3, #8]
 8010662:	3301      	adds	r3, #1
 8010664:	781b      	ldrb	r3, [r3, #0]
 8010666:	021b      	lsls	r3, r3, #8
 8010668:	b21a      	sxth	r2, r3
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	689b      	ldr	r3, [r3, #8]
 801066e:	3302      	adds	r3, #2
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	b21b      	sxth	r3, r3
 8010674:	4313      	orrs	r3, r2
 8010676:	b21b      	sxth	r3, r3
 8010678:	b29b      	uxth	r3, r3
 801067a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 801067e:	e032      	b.n	80106e6 <LmhpComplianceOnMcpsIndication+0x342>
                }
                else if( mcpsIndication->BufferSize == 7 )
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	7b1b      	ldrb	r3, [r3, #12]
 8010684:	2b07      	cmp	r3, #7
 8010686:	d12e      	bne.n	80106e6 <LmhpComplianceOnMcpsIndication+0x342>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 8010688:	2306      	movs	r3, #6
 801068a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	689b      	ldr	r3, [r3, #8]
 8010692:	3301      	adds	r3, #1
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	021b      	lsls	r3, r3, #8
 8010698:	b21a      	sxth	r2, r3
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	689b      	ldr	r3, [r3, #8]
 801069e:	3302      	adds	r3, #2
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	b21b      	sxth	r3, r3
 80106a4:	4313      	orrs	r3, r2
 80106a6:	b21b      	sxth	r3, r3
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	689b      	ldr	r3, [r3, #8]
 80106b2:	3303      	adds	r3, #3
 80106b4:	781b      	ldrb	r3, [r3, #0]
 80106b6:	041a      	lsls	r2, r3, #16
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	689b      	ldr	r3, [r3, #8]
 80106bc:	3304      	adds	r3, #4
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	021b      	lsls	r3, r3, #8
 80106c2:	4313      	orrs	r3, r2
 80106c4:	687a      	ldr	r2, [r7, #4]
 80106c6:	6892      	ldr	r2, [r2, #8]
 80106c8:	3205      	adds	r2, #5
 80106ca:	7812      	ldrb	r2, [r2, #0]
 80106cc:	4313      	orrs	r3, r2
 80106ce:	461a      	mov	r2, r3
 80106d0:	2364      	movs	r3, #100	; 0x64
 80106d2:	fb02 f303 	mul.w	r3, r2, r3
 80106d6:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	689b      	ldr	r3, [r3, #8]
 80106dc:	3306      	adds	r3, #6
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	b25b      	sxtb	r3, r3
 80106e2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 80106e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80106ea:	4618      	mov	r0, r3
 80106ec:	f004 fa90 	bl	8014c10 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 80106f0:	4b19      	ldr	r3, [pc, #100]	; (8010758 <LmhpComplianceOnMcpsIndication+0x3b4>)
 80106f2:	2201      	movs	r2, #1
 80106f4:	709a      	strb	r2, [r3, #2]
            }
            break;
 80106f6:	e02c      	b.n	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 80106f8:	230a      	movs	r3, #10
 80106fa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 80106fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010702:	4618      	mov	r0, r3
 8010704:	f004 fa84 	bl	8014c10 <LoRaMacMlmeRequest>
            }
            break;
 8010708:	e023      	b.n	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 801070a:	2300      	movs	r3, #0
 801070c:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	689b      	ldr	r3, [r3, #8]
 8010712:	3301      	adds	r3, #1
 8010714:	781b      	ldrb	r3, [r3, #0]
 8010716:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8010718:	f107 0308 	add.w	r3, r7, #8
 801071c:	4618      	mov	r0, r3
 801071e:	f003 ff1d 	bl	801455c <LoRaMacMibSetRequestConfirm>
            }
            break;
 8010722:	e016      	b.n	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8010724:	230d      	movs	r3, #13
 8010726:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	689b      	ldr	r3, [r3, #8]
 801072e:	785b      	ldrb	r3, [r3, #1]
 8010730:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 8010734:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010738:	4618      	mov	r0, r3
 801073a:	f004 fa69 	bl	8014c10 <LoRaMacMlmeRequest>
            }
            break;
 801073e:	e008      	b.n	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 8010740:	bf00      	nop
 8010742:	e006      	b.n	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 8010744:	bf00      	nop
 8010746:	e004      	b.n	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 8010748:	bf00      	nop
 801074a:	e002      	b.n	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
        default:
            break;
 801074c:	bf00      	nop
 801074e:	e000      	b.n	8010752 <LmhpComplianceOnMcpsIndication+0x3ae>
            break;
 8010750:	bf00      	nop
        }
    }
}
 8010752:	3780      	adds	r7, #128	; 0x80
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}
 8010758:	20000938 	.word	0x20000938

0801075c <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 801075c:	b480      	push	{r7}
 801075e:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 8010760:	bf00      	nop
 8010762:	46bd      	mov	sp, r7
 8010764:	bc80      	pop	{r7}
 8010766:	4770      	bx	lr

08010768 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b082      	sub	sp, #8
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 8010770:	f7ff fda8 	bl	80102c4 <LmhpComplianceTxProcess>
}
 8010774:	bf00      	nop
 8010776:	3708      	adds	r7, #8
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}

0801077c <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 801077c:	b590      	push	{r4, r7, lr}
 801077e:	b083      	sub	sp, #12
 8010780:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8010782:	f00d fab3 	bl	801dcec <UTIL_TIMER_GetCurrentTime>
 8010786:	4603      	mov	r3, r0
 8010788:	4a16      	ldr	r2, [pc, #88]	; (80107e4 <OnRadioTxDone+0x68>)
 801078a:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 801078c:	4c16      	ldr	r4, [pc, #88]	; (80107e8 <OnRadioTxDone+0x6c>)
 801078e:	463b      	mov	r3, r7
 8010790:	4618      	mov	r0, r3
 8010792:	f00c fc29 	bl	801cfe8 <SysTimeGet>
 8010796:	f504 734e 	add.w	r3, r4, #824	; 0x338
 801079a:	463a      	mov	r2, r7
 801079c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107a0:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 80107a4:	4a11      	ldr	r2, [pc, #68]	; (80107ec <OnRadioTxDone+0x70>)
 80107a6:	7813      	ldrb	r3, [r2, #0]
 80107a8:	f043 0310 	orr.w	r3, r3, #16
 80107ac:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80107ae:	4b0e      	ldr	r3, [pc, #56]	; (80107e8 <OnRadioTxDone+0x6c>)
 80107b0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d00a      	beq.n	80107ce <OnRadioTxDone+0x52>
 80107b8:	4b0b      	ldr	r3, [pc, #44]	; (80107e8 <OnRadioTxDone+0x6c>)
 80107ba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80107be:	691b      	ldr	r3, [r3, #16]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d004      	beq.n	80107ce <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80107c4:	4b08      	ldr	r3, [pc, #32]	; (80107e8 <OnRadioTxDone+0x6c>)
 80107c6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80107ca:	691b      	ldr	r3, [r3, #16]
 80107cc:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 80107ce:	4b08      	ldr	r3, [pc, #32]	; (80107f0 <OnRadioTxDone+0x74>)
 80107d0:	2201      	movs	r2, #1
 80107d2:	2100      	movs	r1, #0
 80107d4:	2002      	movs	r0, #2
 80107d6:	f00d fb79 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
}
 80107da:	bf00      	nop
 80107dc:	370c      	adds	r7, #12
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd90      	pop	{r4, r7, pc}
 80107e2:	bf00      	nop
 80107e4:	20001cb0 	.word	0x20001cb0
 80107e8:	20000950 	.word	0x20000950
 80107ec:	20001cac 	.word	0x20001cac
 80107f0:	0801ed18 	.word	0x0801ed18

080107f4 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b084      	sub	sp, #16
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	60f8      	str	r0, [r7, #12]
 80107fc:	4608      	mov	r0, r1
 80107fe:	4611      	mov	r1, r2
 8010800:	461a      	mov	r2, r3
 8010802:	4603      	mov	r3, r0
 8010804:	817b      	strh	r3, [r7, #10]
 8010806:	460b      	mov	r3, r1
 8010808:	813b      	strh	r3, [r7, #8]
 801080a:	4613      	mov	r3, r2
 801080c:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 801080e:	f00d fa6d 	bl	801dcec <UTIL_TIMER_GetCurrentTime>
 8010812:	4603      	mov	r3, r0
 8010814:	4a16      	ldr	r2, [pc, #88]	; (8010870 <OnRadioRxDone+0x7c>)
 8010816:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 8010818:	4a15      	ldr	r2, [pc, #84]	; (8010870 <OnRadioRxDone+0x7c>)
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 801081e:	4a14      	ldr	r2, [pc, #80]	; (8010870 <OnRadioRxDone+0x7c>)
 8010820:	897b      	ldrh	r3, [r7, #10]
 8010822:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8010824:	4a12      	ldr	r2, [pc, #72]	; (8010870 <OnRadioRxDone+0x7c>)
 8010826:	893b      	ldrh	r3, [r7, #8]
 8010828:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 801082a:	4a11      	ldr	r2, [pc, #68]	; (8010870 <OnRadioRxDone+0x7c>)
 801082c:	79fb      	ldrb	r3, [r7, #7]
 801082e:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8010830:	4a10      	ldr	r2, [pc, #64]	; (8010874 <OnRadioRxDone+0x80>)
 8010832:	7813      	ldrb	r3, [r2, #0]
 8010834:	f043 0308 	orr.w	r3, r3, #8
 8010838:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 801083a:	4b0f      	ldr	r3, [pc, #60]	; (8010878 <OnRadioRxDone+0x84>)
 801083c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010840:	2b00      	cmp	r3, #0
 8010842:	d00a      	beq.n	801085a <OnRadioRxDone+0x66>
 8010844:	4b0c      	ldr	r3, [pc, #48]	; (8010878 <OnRadioRxDone+0x84>)
 8010846:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801084a:	691b      	ldr	r3, [r3, #16]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d004      	beq.n	801085a <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010850:	4b09      	ldr	r3, [pc, #36]	; (8010878 <OnRadioRxDone+0x84>)
 8010852:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010856:	691b      	ldr	r3, [r3, #16]
 8010858:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 801085a:	4b08      	ldr	r3, [pc, #32]	; (801087c <OnRadioRxDone+0x88>)
 801085c:	2201      	movs	r2, #1
 801085e:	2100      	movs	r1, #0
 8010860:	2002      	movs	r0, #2
 8010862:	f00d fb33 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
}
 8010866:	bf00      	nop
 8010868:	3710      	adds	r7, #16
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	20001cb4 	.word	0x20001cb4
 8010874:	20001cac 	.word	0x20001cac
 8010878:	20000950 	.word	0x20000950
 801087c:	0801ed28 	.word	0x0801ed28

08010880 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8010880:	b580      	push	{r7, lr}
 8010882:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8010884:	4a0e      	ldr	r2, [pc, #56]	; (80108c0 <OnRadioTxTimeout+0x40>)
 8010886:	7813      	ldrb	r3, [r2, #0]
 8010888:	f043 0304 	orr.w	r3, r3, #4
 801088c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 801088e:	4b0d      	ldr	r3, [pc, #52]	; (80108c4 <OnRadioTxTimeout+0x44>)
 8010890:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010894:	2b00      	cmp	r3, #0
 8010896:	d00a      	beq.n	80108ae <OnRadioTxTimeout+0x2e>
 8010898:	4b0a      	ldr	r3, [pc, #40]	; (80108c4 <OnRadioTxTimeout+0x44>)
 801089a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801089e:	691b      	ldr	r3, [r3, #16]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d004      	beq.n	80108ae <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80108a4:	4b07      	ldr	r3, [pc, #28]	; (80108c4 <OnRadioTxTimeout+0x44>)
 80108a6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80108aa:	691b      	ldr	r3, [r3, #16]
 80108ac:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 80108ae:	4b06      	ldr	r3, [pc, #24]	; (80108c8 <OnRadioTxTimeout+0x48>)
 80108b0:	2201      	movs	r2, #1
 80108b2:	2100      	movs	r1, #0
 80108b4:	2002      	movs	r0, #2
 80108b6:	f00d fb09 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
}
 80108ba:	bf00      	nop
 80108bc:	bd80      	pop	{r7, pc}
 80108be:	bf00      	nop
 80108c0:	20001cac 	.word	0x20001cac
 80108c4:	20000950 	.word	0x20000950
 80108c8:	0801ed38 	.word	0x0801ed38

080108cc <OnRadioRxError>:

static void OnRadioRxError( void )
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 80108d0:	4a0b      	ldr	r2, [pc, #44]	; (8010900 <OnRadioRxError+0x34>)
 80108d2:	7813      	ldrb	r3, [r2, #0]
 80108d4:	f043 0302 	orr.w	r3, r3, #2
 80108d8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80108da:	4b0a      	ldr	r3, [pc, #40]	; (8010904 <OnRadioRxError+0x38>)
 80108dc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d00a      	beq.n	80108fa <OnRadioRxError+0x2e>
 80108e4:	4b07      	ldr	r3, [pc, #28]	; (8010904 <OnRadioRxError+0x38>)
 80108e6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80108ea:	691b      	ldr	r3, [r3, #16]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d004      	beq.n	80108fa <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80108f0:	4b04      	ldr	r3, [pc, #16]	; (8010904 <OnRadioRxError+0x38>)
 80108f2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80108f6:	691b      	ldr	r3, [r3, #16]
 80108f8:	4798      	blx	r3
    }
}
 80108fa:	bf00      	nop
 80108fc:	bd80      	pop	{r7, pc}
 80108fe:	bf00      	nop
 8010900:	20001cac 	.word	0x20001cac
 8010904:	20000950 	.word	0x20000950

08010908 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8010908:	b580      	push	{r7, lr}
 801090a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 801090c:	4a0e      	ldr	r2, [pc, #56]	; (8010948 <OnRadioRxTimeout+0x40>)
 801090e:	7813      	ldrb	r3, [r2, #0]
 8010910:	f043 0301 	orr.w	r3, r3, #1
 8010914:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010916:	4b0d      	ldr	r3, [pc, #52]	; (801094c <OnRadioRxTimeout+0x44>)
 8010918:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801091c:	2b00      	cmp	r3, #0
 801091e:	d00a      	beq.n	8010936 <OnRadioRxTimeout+0x2e>
 8010920:	4b0a      	ldr	r3, [pc, #40]	; (801094c <OnRadioRxTimeout+0x44>)
 8010922:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010926:	691b      	ldr	r3, [r3, #16]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d004      	beq.n	8010936 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801092c:	4b07      	ldr	r3, [pc, #28]	; (801094c <OnRadioRxTimeout+0x44>)
 801092e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010932:	691b      	ldr	r3, [r3, #16]
 8010934:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8010936:	4b06      	ldr	r3, [pc, #24]	; (8010950 <OnRadioRxTimeout+0x48>)
 8010938:	2201      	movs	r2, #1
 801093a:	2100      	movs	r1, #0
 801093c:	2002      	movs	r0, #2
 801093e:	f00d fac5 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
}
 8010942:	bf00      	nop
 8010944:	bd80      	pop	{r7, pc}
 8010946:	bf00      	nop
 8010948:	20001cac 	.word	0x20001cac
 801094c:	20000950 	.word	0x20000950
 8010950:	0801ed48 	.word	0x0801ed48

08010954 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8010954:	b480      	push	{r7}
 8010956:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010958:	4b08      	ldr	r3, [pc, #32]	; (801097c <UpdateRxSlotIdleState+0x28>)
 801095a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801095e:	2b02      	cmp	r3, #2
 8010960:	d004      	beq.n	801096c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8010962:	4b07      	ldr	r3, [pc, #28]	; (8010980 <UpdateRxSlotIdleState+0x2c>)
 8010964:	2206      	movs	r2, #6
 8010966:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 801096a:	e003      	b.n	8010974 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 801096c:	4b04      	ldr	r3, [pc, #16]	; (8010980 <UpdateRxSlotIdleState+0x2c>)
 801096e:	2202      	movs	r2, #2
 8010970:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
}
 8010974:	bf00      	nop
 8010976:	46bd      	mov	sp, r7
 8010978:	bc80      	pop	{r7}
 801097a:	4770      	bx	lr
 801097c:	20000e5c 	.word	0x20000e5c
 8010980:	20000950 	.word	0x20000950

08010984 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b08e      	sub	sp, #56	; 0x38
 8010988:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801098a:	4b44      	ldr	r3, [pc, #272]	; (8010a9c <ProcessRadioTxDone+0x118>)
 801098c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010990:	2b02      	cmp	r3, #2
 8010992:	d002      	beq.n	801099a <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8010994:	4b42      	ldr	r3, [pc, #264]	; (8010aa0 <ProcessRadioTxDone+0x11c>)
 8010996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010998:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 801099a:	4b42      	ldr	r3, [pc, #264]	; (8010aa4 <ProcessRadioTxDone+0x120>)
 801099c:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 80109a0:	4619      	mov	r1, r3
 80109a2:	4841      	ldr	r0, [pc, #260]	; (8010aa8 <ProcessRadioTxDone+0x124>)
 80109a4:	f00d f8f8 	bl	801db98 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80109a8:	483f      	ldr	r0, [pc, #252]	; (8010aa8 <ProcessRadioTxDone+0x124>)
 80109aa:	f00d f817 	bl	801d9dc <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80109ae:	4b3d      	ldr	r3, [pc, #244]	; (8010aa4 <ProcessRadioTxDone+0x120>)
 80109b0:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 80109b4:	4619      	mov	r1, r3
 80109b6:	483d      	ldr	r0, [pc, #244]	; (8010aac <ProcessRadioTxDone+0x128>)
 80109b8:	f00d f8ee 	bl	801db98 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80109bc:	483b      	ldr	r0, [pc, #236]	; (8010aac <ProcessRadioTxDone+0x128>)
 80109be:	f00d f80d 	bl	801d9dc <UTIL_TIMER_Start>
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 80109c2:	4b36      	ldr	r3, [pc, #216]	; (8010a9c <ProcessRadioTxDone+0x118>)
 80109c4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80109c8:	2b02      	cmp	r3, #2
 80109ca:	d004      	beq.n	80109d6 <ProcessRadioTxDone+0x52>
 80109cc:	4b35      	ldr	r3, [pc, #212]	; (8010aa4 <ProcessRadioTxDone+0x120>)
 80109ce:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d019      	beq.n	8010a0a <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 80109d6:	2316      	movs	r3, #22
 80109d8:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109dc:	4b2f      	ldr	r3, [pc, #188]	; (8010a9c <ProcessRadioTxDone+0x118>)
 80109de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109e2:	f107 0220 	add.w	r2, r7, #32
 80109e6:	4611      	mov	r1, r2
 80109e8:	4618      	mov	r0, r3
 80109ea:	f006 fc09 	bl	8017200 <RegionGetPhyParam>
 80109ee:	4603      	mov	r3, r0
 80109f0:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80109f2:	4b2c      	ldr	r3, [pc, #176]	; (8010aa4 <ProcessRadioTxDone+0x120>)
 80109f4:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 80109f8:	69fb      	ldr	r3, [r7, #28]
 80109fa:	4413      	add	r3, r2
 80109fc:	4619      	mov	r1, r3
 80109fe:	482c      	ldr	r0, [pc, #176]	; (8010ab0 <ProcessRadioTxDone+0x12c>)
 8010a00:	f00d f8ca 	bl	801db98 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8010a04:	482a      	ldr	r0, [pc, #168]	; (8010ab0 <ProcessRadioTxDone+0x12c>)
 8010a06:	f00c ffe9 	bl	801d9dc <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8010a0a:	4b2a      	ldr	r3, [pc, #168]	; (8010ab4 <ProcessRadioTxDone+0x130>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	4a23      	ldr	r2, [pc, #140]	; (8010a9c <ProcessRadioTxDone+0x118>)
 8010a10:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 8010a12:	4b24      	ldr	r3, [pc, #144]	; (8010aa4 <ProcessRadioTxDone+0x120>)
 8010a14:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8010a18:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8010a1a:	4b26      	ldr	r3, [pc, #152]	; (8010ab4 <ProcessRadioTxDone+0x130>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010a20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010a24:	4618      	mov	r0, r3
 8010a26:	f00c fb17 	bl	801d058 <SysTimeGetMcuTime>
 8010a2a:	4638      	mov	r0, r7
 8010a2c:	4b1b      	ldr	r3, [pc, #108]	; (8010a9c <ProcessRadioTxDone+0x118>)
 8010a2e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8010a32:	9200      	str	r2, [sp, #0]
 8010a34:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8010a38:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a3c:	ca06      	ldmia	r2, {r1, r2}
 8010a3e:	f00c fa6c 	bl	801cf1a <SysTimeSub>
 8010a42:	f107 0314 	add.w	r3, r7, #20
 8010a46:	463a      	mov	r2, r7
 8010a48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a4c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8010a50:	4b14      	ldr	r3, [pc, #80]	; (8010aa4 <ProcessRadioTxDone+0x120>)
 8010a52:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8010a56:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 8010a58:	2301      	movs	r3, #1
 8010a5a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010a5c:	4b0f      	ldr	r3, [pc, #60]	; (8010a9c <ProcessRadioTxDone+0x118>)
 8010a5e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d101      	bne.n	8010a6a <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 8010a66:	2300      	movs	r3, #0
 8010a68:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8010a6a:	4b0c      	ldr	r3, [pc, #48]	; (8010a9c <ProcessRadioTxDone+0x118>)
 8010a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a70:	f107 0208 	add.w	r2, r7, #8
 8010a74:	4611      	mov	r1, r2
 8010a76:	4618      	mov	r0, r3
 8010a78:	f006 fbda 	bl	8017230 <RegionSetBandTxDone>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8010a7c:	4b09      	ldr	r3, [pc, #36]	; (8010aa4 <ProcessRadioTxDone+0x120>)
 8010a7e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8010a82:	f083 0301 	eor.w	r3, r3, #1
 8010a86:	b2db      	uxtb	r3, r3
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d003      	beq.n	8010a94 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010a8c:	4b05      	ldr	r3, [pc, #20]	; (8010aa4 <ProcessRadioTxDone+0x120>)
 8010a8e:	2200      	movs	r2, #0
 8010a90:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
#endif /* LORAMAC_VERSION */
}
 8010a94:	bf00      	nop
 8010a96:	3730      	adds	r7, #48	; 0x30
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	20000e5c 	.word	0x20000e5c
 8010aa0:	0801f374 	.word	0x0801f374
 8010aa4:	20000950 	.word	0x20000950
 8010aa8:	20000cd0 	.word	0x20000cd0
 8010aac:	20000ce8 	.word	0x20000ce8
 8010ab0:	20000d48 	.word	0x20000d48
 8010ab4:	20001cb0 	.word	0x20001cb0

08010ab8 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8010abc:	4b10      	ldr	r3, [pc, #64]	; (8010b00 <PrepareRxDoneAbort+0x48>)
 8010abe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ac6:	4a0e      	ldr	r2, [pc, #56]	; (8010b00 <PrepareRxDoneAbort+0x48>)
 8010ac8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8010acc:	4b0c      	ldr	r3, [pc, #48]	; (8010b00 <PrepareRxDoneAbort+0x48>)
 8010ace:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d002      	beq.n	8010adc <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 8010ad6:	2000      	movs	r0, #0
 8010ad8:	f001 f8f2 	bl	8011cc0 <OnAckTimeoutTimerEvent>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8010adc:	4a08      	ldr	r2, [pc, #32]	; (8010b00 <PrepareRxDoneAbort+0x48>)
 8010ade:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010ae2:	f043 0302 	orr.w	r3, r3, #2
 8010ae6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010aea:	4a05      	ldr	r2, [pc, #20]	; (8010b00 <PrepareRxDoneAbort+0x48>)
 8010aec:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010af0:	f043 0320 	orr.w	r3, r3, #32
 8010af4:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

    UpdateRxSlotIdleState( );
 8010af8:	f7ff ff2c 	bl	8010954 <UpdateRxSlotIdleState>
}
 8010afc:	bf00      	nop
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	20000950 	.word	0x20000950

08010b04 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8010b04:	b5b0      	push	{r4, r5, r7, lr}
 8010b06:	b0a6      	sub	sp, #152	; 0x98
 8010b08:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010b0a:	2313      	movs	r3, #19
 8010b0c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8010b10:	4bb9      	ldr	r3, [pc, #740]	; (8010df8 <ProcessRadioRxDone+0x2f4>)
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 8010b16:	4bb8      	ldr	r3, [pc, #736]	; (8010df8 <ProcessRadioRxDone+0x2f4>)
 8010b18:	891b      	ldrh	r3, [r3, #8]
 8010b1a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 8010b1e:	4bb6      	ldr	r3, [pc, #728]	; (8010df8 <ProcessRadioRxDone+0x2f4>)
 8010b20:	895b      	ldrh	r3, [r3, #10]
 8010b22:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 8010b26:	4bb4      	ldr	r3, [pc, #720]	; (8010df8 <ProcessRadioRxDone+0x2f4>)
 8010b28:	7b1b      	ldrb	r3, [r3, #12]
 8010b2a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 8010b34:	2300      	movs	r3, #0
 8010b36:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8010b38:	4bb0      	ldr	r3, [pc, #704]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010b3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8010b3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 8010b42:	2300      	movs	r3, #0
 8010b44:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8010b48:	2301      	movs	r3, #1
 8010b4a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 8010b4e:	4bac      	ldr	r3, [pc, #688]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010b50:	2200      	movs	r2, #0
 8010b52:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 8010b56:	4aaa      	ldr	r2, [pc, #680]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010b58:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8010b5c:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    MacCtx.RxStatus.Snr = snr;
 8010b60:	4aa7      	ldr	r2, [pc, #668]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010b62:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010b66:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8010b6a:	4ba5      	ldr	r3, [pc, #660]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010b6c:	f893 2484 	ldrb.w	r2, [r3, #1156]	; 0x484
 8010b70:	4ba3      	ldr	r3, [pc, #652]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010b72:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
    MacCtx.McpsIndication.Port = 0;
 8010b76:	4ba2      	ldr	r3, [pc, #648]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010b78:	2200      	movs	r2, #0
 8010b7a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 8010b7e:	4ba0      	ldr	r3, [pc, #640]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010b80:	2200      	movs	r2, #0
 8010b82:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 8010b86:	4b9e      	ldr	r3, [pc, #632]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010b88:	2200      	movs	r2, #0
 8010b8a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 8010b8e:	4b9c      	ldr	r3, [pc, #624]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010b90:	2200      	movs	r2, #0
 8010b92:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 8010b96:	4b9a      	ldr	r3, [pc, #616]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010b98:	2200      	movs	r2, #0
 8010b9a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 8010b9e:	4b98      	ldr	r3, [pc, #608]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 8010ba6:	4b96      	ldr	r3, [pc, #600]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010ba8:	2200      	movs	r2, #0
 8010baa:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8010bae:	4b94      	ldr	r3, [pc, #592]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010bb6:	4b92      	ldr	r3, [pc, #584]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010bb8:	2200      	movs	r2, #0
 8010bba:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 8010bbe:	4b90      	ldr	r3, [pc, #576]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010bc6:	4b8e      	ldr	r3, [pc, #568]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010bc8:	2200      	movs	r2, #0
 8010bca:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 8010bce:	4b8d      	ldr	r3, [pc, #564]	; (8010e04 <ProcessRadioRxDone+0x300>)
 8010bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bd2:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 8010bd4:	488c      	ldr	r0, [pc, #560]	; (8010e08 <ProcessRadioRxDone+0x304>)
 8010bd6:	f00c ff6f 	bl	801dab8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8010bda:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010bde:	4619      	mov	r1, r3
 8010be0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8010be2:	f004 fbaa 	bl	801533a <LoRaMacClassBRxBeacon>
 8010be6:	4603      	mov	r3, r0
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d00a      	beq.n	8010c02 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8010bec:	4a84      	ldr	r2, [pc, #528]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010bee:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8010bf2:	f8a2 3476 	strh.w	r3, [r2, #1142]	; 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8010bf6:	4a82      	ldr	r2, [pc, #520]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010bf8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010bfc:	f882 3478 	strb.w	r3, [r2, #1144]	; 0x478
        return;
 8010c00:	e3c7      	b.n	8011392 <ProcessRadioRxDone+0x88e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010c02:	4b7e      	ldr	r3, [pc, #504]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010c04:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010c08:	2b01      	cmp	r3, #1
 8010c0a:	d11e      	bne.n	8010c4a <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010c0c:	f004 fba8 	bl	8015360 <LoRaMacClassBIsPingExpected>
 8010c10:	4603      	mov	r3, r0
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d00a      	beq.n	8010c2c <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010c16:	2000      	movs	r0, #0
 8010c18:	f004 fb59 	bl	80152ce <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010c1c:	2000      	movs	r0, #0
 8010c1e:	f004 fb7a 	bl	8015316 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8010c22:	4b77      	ldr	r3, [pc, #476]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010c24:	2204      	movs	r2, #4
 8010c26:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 8010c2a:	e00e      	b.n	8010c4a <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010c2c:	f004 fb9f 	bl	801536e <LoRaMacClassBIsMulticastExpected>
 8010c30:	4603      	mov	r3, r0
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d009      	beq.n	8010c4a <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010c36:	2000      	movs	r0, #0
 8010c38:	f004 fb53 	bl	80152e2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010c3c:	2000      	movs	r0, #0
 8010c3e:	f004 fb73 	bl	8015328 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8010c42:	4b6f      	ldr	r3, [pc, #444]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010c44:	2205      	movs	r2, #5
 8010c46:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 8010c4a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010c4e:	1c5a      	adds	r2, r3, #1
 8010c50:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 8010c54:	461a      	mov	r2, r3
 8010c56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010c58:	4413      	add	r3, r2
 8010c5a:	781b      	ldrb	r3, [r3, #0]
 8010c5c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 8010c60:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8010c64:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010c68:	b2db      	uxtb	r3, r3
 8010c6a:	3b01      	subs	r3, #1
 8010c6c:	2b06      	cmp	r3, #6
 8010c6e:	f200 836a 	bhi.w	8011346 <ProcessRadioRxDone+0x842>
 8010c72:	a201      	add	r2, pc, #4	; (adr r2, 8010c78 <ProcessRadioRxDone+0x174>)
 8010c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c78:	08010c95 	.word	0x08010c95
 8010c7c:	08011347 	.word	0x08011347
 8010c80:	08010e15 	.word	0x08010e15
 8010c84:	08011347 	.word	0x08011347
 8010c88:	08010e0d 	.word	0x08010e0d
 8010c8c:	08011347 	.word	0x08011347
 8010c90:	080112ed 	.word	0x080112ed
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8010c94:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010c98:	2b10      	cmp	r3, #16
 8010c9a:	d806      	bhi.n	8010caa <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010c9c:	4b58      	ldr	r3, [pc, #352]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010c9e:	2201      	movs	r2, #1
 8010ca0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8010ca4:	f7ff ff08 	bl	8010ab8 <PrepareRxDoneAbort>
                return;
 8010ca8:	e373      	b.n	8011392 <ProcessRadioRxDone+0x88e>
            }
            macMsgJoinAccept.Buffer = payload;
 8010caa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010cac:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 8010cae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010cb6:	4b51      	ldr	r3, [pc, #324]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010cb8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d006      	beq.n	8010cce <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010cc0:	4b4f      	ldr	r3, [pc, #316]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8010cc8:	f7ff fef6 	bl	8010ab8 <PrepareRxDoneAbort>
                return;
 8010ccc:	e361      	b.n	8011392 <ProcessRadioRxDone+0x88e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8010cce:	f7fe faa7 	bl	800f220 <SecureElementGetJoinEui>
 8010cd2:	4601      	mov	r1, r0
 8010cd4:	f107 0308 	add.w	r3, r7, #8
 8010cd8:	461a      	mov	r2, r3
 8010cda:	20ff      	movs	r0, #255	; 0xff
 8010cdc:	f005 fd14 	bl	8016708 <LoRaMacCryptoHandleJoinAccept>
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8010ce6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d172      	bne.n	8010dd4 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8010cee:	7c7b      	ldrb	r3, [r7, #17]
 8010cf0:	461a      	mov	r2, r3
 8010cf2:	4b42      	ldr	r3, [pc, #264]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010cf4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8010cf8:	4b40      	ldr	r3, [pc, #256]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010cfa:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8010cfe:	7cbb      	ldrb	r3, [r7, #18]
 8010d00:	021b      	lsls	r3, r3, #8
 8010d02:	4313      	orrs	r3, r2
 8010d04:	4a3d      	ldr	r2, [pc, #244]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010d06:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8010d0a:	4b3c      	ldr	r3, [pc, #240]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010d0c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8010d10:	7cfb      	ldrb	r3, [r7, #19]
 8010d12:	041b      	lsls	r3, r3, #16
 8010d14:	4313      	orrs	r3, r2
 8010d16:	4a39      	ldr	r2, [pc, #228]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010d18:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8010d1c:	697b      	ldr	r3, [r7, #20]
 8010d1e:	4a37      	ldr	r2, [pc, #220]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010d20:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8010d24:	7e3b      	ldrb	r3, [r7, #24]
 8010d26:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8010d2a:	b2db      	uxtb	r3, r3
 8010d2c:	461a      	mov	r2, r3
 8010d2e:	4b33      	ldr	r3, [pc, #204]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010d30:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010d34:	7e3b      	ldrb	r3, [r7, #24]
 8010d36:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010d3a:	b2db      	uxtb	r3, r3
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	4b2f      	ldr	r3, [pc, #188]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010d40:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010d44:	7e3b      	ldrb	r3, [r7, #24]
 8010d46:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010d4a:	b2db      	uxtb	r3, r3
 8010d4c:	461a      	mov	r2, r3
 8010d4e:	4b2b      	ldr	r3, [pc, #172]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010d50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8010d54:	7e7b      	ldrb	r3, [r7, #25]
 8010d56:	461a      	mov	r2, r3
 8010d58:	4b28      	ldr	r3, [pc, #160]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010d5a:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8010d5c:	4b27      	ldr	r3, [pc, #156]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d102      	bne.n	8010d6a <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8010d64:	4b25      	ldr	r3, [pc, #148]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010d66:	2201      	movs	r2, #1
 8010d68:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8010d6a:	4b24      	ldr	r3, [pc, #144]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010d72:	fb02 f303 	mul.w	r3, r2, r3
 8010d76:	4a21      	ldr	r2, [pc, #132]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010d78:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010d7a:	4b20      	ldr	r3, [pc, #128]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d7e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8010d82:	4a1e      	ldr	r2, [pc, #120]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010d84:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8010d86:	4b1d      	ldr	r3, [pc, #116]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010d88:	2200      	movs	r2, #0
 8010d8a:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8010d8e:	f107 0308 	add.w	r3, r7, #8
 8010d92:	3312      	adds	r3, #18
 8010d94:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8010d96:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010d9a:	b2db      	uxtb	r3, r3
 8010d9c:	3b11      	subs	r3, #17
 8010d9e:	b2db      	uxtb	r3, r3
 8010da0:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8010da4:	4b15      	ldr	r3, [pc, #84]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010daa:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8010dae:	4611      	mov	r1, r2
 8010db0:	4618      	mov	r0, r3
 8010db2:	f006 fa77 	bl	80172a4 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8010db6:	4b11      	ldr	r3, [pc, #68]	; (8010dfc <ProcessRadioRxDone+0x2f8>)
 8010db8:	2202      	movs	r2, #2
 8010dba:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010dbe:	2001      	movs	r0, #1
 8010dc0:	f004 ff9a 	bl	8015cf8 <LoRaMacConfirmQueueIsCmdActive>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d00e      	beq.n	8010de8 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8010dca:	2101      	movs	r1, #1
 8010dcc:	2000      	movs	r0, #0
 8010dce:	f004 ff07 	bl	8015be0 <LoRaMacConfirmQueueSetStatus>
 8010dd2:	e009      	b.n	8010de8 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010dd4:	2001      	movs	r0, #1
 8010dd6:	f004 ff8f 	bl	8015cf8 <LoRaMacConfirmQueueIsCmdActive>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d003      	beq.n	8010de8 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8010de0:	2101      	movs	r1, #1
 8010de2:	2007      	movs	r0, #7
 8010de4:	f004 fefc 	bl	8015be0 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8010de8:	4a05      	ldr	r2, [pc, #20]	; (8010e00 <ProcessRadioRxDone+0x2fc>)
 8010dea:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010dee:	f043 0308 	orr.w	r3, r3, #8
 8010df2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 8010df6:	e2ad      	b.n	8011354 <ProcessRadioRxDone+0x850>
 8010df8:	20001cb4 	.word	0x20001cb4
 8010dfc:	20000e5c 	.word	0x20000e5c
 8010e00:	20000950 	.word	0x20000950
 8010e04:	0801f374 	.word	0x0801f374
 8010e08:	20000ce8 	.word	0x20000ce8
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8010e0c:	4bb0      	ldr	r3, [pc, #704]	; (80110d0 <ProcessRadioRxDone+0x5cc>)
 8010e0e:	2201      	movs	r2, #1
 8010e10:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010e14:	4baf      	ldr	r3, [pc, #700]	; (80110d4 <ProcessRadioRxDone+0x5d0>)
 8010e16:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8010e1a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8010e1e:	4bac      	ldr	r3, [pc, #688]	; (80110d0 <ProcessRadioRxDone+0x5cc>)
 8010e20:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8010e24:	b25b      	sxtb	r3, r3
 8010e26:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010e2a:	230d      	movs	r3, #13
 8010e2c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8010e30:	4ba8      	ldr	r3, [pc, #672]	; (80110d4 <ProcessRadioRxDone+0x5d0>)
 8010e32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d002      	beq.n	8010e40 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010e3a:	230e      	movs	r3, #14
 8010e3c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e40:	4ba4      	ldr	r3, [pc, #656]	; (80110d4 <ProcessRadioRxDone+0x5d0>)
 8010e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e46:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8010e4a:	4611      	mov	r1, r2
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f006 f9d7 	bl	8017200 <RegionGetPhyParam>
 8010e52:	4603      	mov	r3, r0
 8010e54:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8010e56:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010e5a:	3b0d      	subs	r3, #13
 8010e5c:	b29b      	uxth	r3, r3
 8010e5e:	b21b      	sxth	r3, r3
 8010e60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010e64:	b21a      	sxth	r2, r3
 8010e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010e68:	b21b      	sxth	r3, r3
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	dc03      	bgt.n	8010e76 <ProcessRadioRxDone+0x372>
 8010e6e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010e72:	2b0b      	cmp	r3, #11
 8010e74:	d806      	bhi.n	8010e84 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010e76:	4b96      	ldr	r3, [pc, #600]	; (80110d0 <ProcessRadioRxDone+0x5cc>)
 8010e78:	2201      	movs	r2, #1
 8010e7a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8010e7e:	f7ff fe1b 	bl	8010ab8 <PrepareRxDoneAbort>
                return;
 8010e82:	e286      	b.n	8011392 <ProcessRadioRxDone+0x88e>
            }
            macMsgData.Buffer = payload;
 8010e84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010e86:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 8010e88:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010e8c:	b2db      	uxtb	r3, r3
 8010e8e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8010e92:	4b91      	ldr	r3, [pc, #580]	; (80110d8 <ProcessRadioRxDone+0x5d4>)
 8010e94:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8010e96:	23ff      	movs	r3, #255	; 0xff
 8010e98:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8010e9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f005 ff30 	bl	8016d06 <LoRaMacParserData>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d006      	beq.n	8010eba <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010eac:	4b88      	ldr	r3, [pc, #544]	; (80110d0 <ProcessRadioRxDone+0x5cc>)
 8010eae:	2201      	movs	r2, #1
 8010eb0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8010eb4:	f7ff fe00 	bl	8010ab8 <PrepareRxDoneAbort>
                return;
 8010eb8:	e26b      	b.n	8011392 <ProcessRadioRxDone+0x88e>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8010eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ebc:	4a84      	ldr	r2, [pc, #528]	; (80110d0 <ProcessRadioRxDone+0x5cc>)
 8010ebe:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8010ec2:	1cba      	adds	r2, r7, #2
 8010ec4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010ec8:	4611      	mov	r1, r2
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f002 fc9e 	bl	801380c <DetermineFrameType>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d006      	beq.n	8010ee4 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010ed6:	4b7e      	ldr	r3, [pc, #504]	; (80110d0 <ProcessRadioRxDone+0x5cc>)
 8010ed8:	2201      	movs	r2, #1
 8010eda:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8010ede:	f7ff fdeb 	bl	8010ab8 <PrepareRxDoneAbort>
                return;
 8010ee2:	e256      	b.n	8011392 <ProcessRadioRxDone+0x88e>
            }

            //Check if it is a multicast message
            multicast = 0;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 8010eea:	2300      	movs	r3, #0
 8010eec:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010eee:	2300      	movs	r3, #0
 8010ef0:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8010ef4:	e049      	b.n	8010f8a <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8010ef6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010efa:	4a76      	ldr	r2, [pc, #472]	; (80110d4 <ProcessRadioRxDone+0x5d0>)
 8010efc:	212c      	movs	r1, #44	; 0x2c
 8010efe:	fb01 f303 	mul.w	r3, r1, r3
 8010f02:	4413      	add	r3, r2
 8010f04:	33dc      	adds	r3, #220	; 0xdc
 8010f06:	681a      	ldr	r2, [r3, #0]
 8010f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	d138      	bne.n	8010f80 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8010f0e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010f12:	4a70      	ldr	r2, [pc, #448]	; (80110d4 <ProcessRadioRxDone+0x5d0>)
 8010f14:	212c      	movs	r1, #44	; 0x2c
 8010f16:	fb01 f303 	mul.w	r3, r1, r3
 8010f1a:	4413      	add	r3, r2
 8010f1c:	33da      	adds	r3, #218	; 0xda
 8010f1e:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d02d      	beq.n	8010f80 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 8010f24:	2301      	movs	r3, #1
 8010f26:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8010f2a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010f2e:	4a69      	ldr	r2, [pc, #420]	; (80110d4 <ProcessRadioRxDone+0x5d0>)
 8010f30:	212c      	movs	r1, #44	; 0x2c
 8010f32:	fb01 f303 	mul.w	r3, r1, r3
 8010f36:	4413      	add	r3, r2
 8010f38:	33db      	adds	r3, #219	; 0xdb
 8010f3a:	781b      	ldrb	r3, [r3, #0]
 8010f3c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8010f40:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010f44:	4a63      	ldr	r2, [pc, #396]	; (80110d4 <ProcessRadioRxDone+0x5d0>)
 8010f46:	212c      	movs	r1, #44	; 0x2c
 8010f48:	fb01 f303 	mul.w	r3, r1, r3
 8010f4c:	4413      	add	r3, r2
 8010f4e:	33f8      	adds	r3, #248	; 0xf8
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8010f56:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010f5a:	4a5e      	ldr	r2, [pc, #376]	; (80110d4 <ProcessRadioRxDone+0x5d0>)
 8010f5c:	212c      	movs	r1, #44	; 0x2c
 8010f5e:	fb01 f303 	mul.w	r3, r1, r3
 8010f62:	4413      	add	r3, r2
 8010f64:	33dc      	adds	r3, #220	; 0xdc
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8010f6c:	4b59      	ldr	r3, [pc, #356]	; (80110d4 <ProcessRadioRxDone+0x5d0>)
 8010f6e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010f72:	2b02      	cmp	r3, #2
 8010f74:	d10e      	bne.n	8010f94 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010f76:	4b56      	ldr	r3, [pc, #344]	; (80110d0 <ProcessRadioRxDone+0x5cc>)
 8010f78:	2203      	movs	r2, #3
 8010f7a:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
                    }
                    break;
 8010f7e:	e009      	b.n	8010f94 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010f80:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010f84:	3301      	adds	r3, #1
 8010f86:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8010f8a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d0b1      	beq.n	8010ef6 <ProcessRadioRxDone+0x3f2>
 8010f92:	e000      	b.n	8010f96 <ProcessRadioRxDone+0x492>
                    break;
 8010f94:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8010f96:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010f9a:	2b01      	cmp	r3, #1
 8010f9c:	d117      	bne.n	8010fce <ProcessRadioRxDone+0x4ca>
 8010f9e:	78bb      	ldrb	r3, [r7, #2]
 8010fa0:	2b03      	cmp	r3, #3
 8010fa2:	d10d      	bne.n	8010fc0 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8010fa4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010fa8:	f003 0320 	and.w	r3, r3, #32
 8010fac:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d106      	bne.n	8010fc0 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 8010fb2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fba:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d006      	beq.n	8010fce <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010fc0:	4b43      	ldr	r3, [pc, #268]	; (80110d0 <ProcessRadioRxDone+0x5cc>)
 8010fc2:	2201      	movs	r2, #1
 8010fc4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8010fc8:	f7ff fd76 	bl	8010ab8 <PrepareRxDoneAbort>
                return;
 8010fcc:	e1e1      	b.n	8011392 <ProcessRadioRxDone+0x88e>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8010fce:	2315      	movs	r3, #21
 8010fd0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010fd4:	4b3f      	ldr	r3, [pc, #252]	; (80110d4 <ProcessRadioRxDone+0x5d0>)
 8010fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010fda:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8010fde:	4611      	mov	r1, r2
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f006 f90d 	bl	8017200 <RegionGetPhyParam>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 8010fea:	78b9      	ldrb	r1, [r7, #2]
 8010fec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010fee:	b29b      	uxth	r3, r3
 8010ff0:	4d38      	ldr	r5, [pc, #224]	; (80110d4 <ProcessRadioRxDone+0x5d0>)
 8010ff2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8010ff6:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 8010ffa:	1d3a      	adds	r2, r7, #4
 8010ffc:	9202      	str	r2, [sp, #8]
 8010ffe:	1cfa      	adds	r2, r7, #3
 8011000:	9201      	str	r2, [sp, #4]
 8011002:	9300      	str	r3, [sp, #0]
 8011004:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 8011008:	4622      	mov	r2, r4
 801100a:	f000 fe8f 	bl	8011d2c <GetFCntDown>
 801100e:	4603      	mov	r3, r0
 8011010:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011014:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011018:	2b00      	cmp	r3, #0
 801101a:	d035      	beq.n	8011088 <ProcessRadioRxDone+0x584>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 801101c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011020:	2b07      	cmp	r3, #7
 8011022:	d119      	bne.n	8011058 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8011024:	4b2a      	ldr	r3, [pc, #168]	; (80110d0 <ProcessRadioRxDone+0x5cc>)
 8011026:	2208      	movs	r2, #8
 8011028:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 801102c:	4b29      	ldr	r3, [pc, #164]	; (80110d4 <ProcessRadioRxDone+0x5d0>)
 801102e:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8011032:	2b00      	cmp	r3, #0
 8011034:	d11d      	bne.n	8011072 <ProcessRadioRxDone+0x56e>
 8011036:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 801103a:	f023 031f 	bic.w	r3, r3, #31
 801103e:	b2db      	uxtb	r3, r3
 8011040:	2ba0      	cmp	r3, #160	; 0xa0
 8011042:	d116      	bne.n	8011072 <ProcessRadioRxDone+0x56e>
 8011044:	4b23      	ldr	r3, [pc, #140]	; (80110d4 <ProcessRadioRxDone+0x5d0>)
 8011046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801104a:	429a      	cmp	r2, r3
 801104c:	d111      	bne.n	8011072 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 801104e:	4b21      	ldr	r3, [pc, #132]	; (80110d4 <ProcessRadioRxDone+0x5d0>)
 8011050:	2201      	movs	r2, #1
 8011052:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8011056:	e00c      	b.n	8011072 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8011058:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801105c:	2b08      	cmp	r3, #8
 801105e:	d104      	bne.n	801106a <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8011060:	4b1b      	ldr	r3, [pc, #108]	; (80110d0 <ProcessRadioRxDone+0x5cc>)
 8011062:	220a      	movs	r2, #10
 8011064:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8011068:	e003      	b.n	8011072 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801106a:	4b19      	ldr	r3, [pc, #100]	; (80110d0 <ProcessRadioRxDone+0x5cc>)
 801106c:	2201      	movs	r2, #1
 801106e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	4a16      	ldr	r2, [pc, #88]	; (80110d0 <ProcessRadioRxDone+0x5cc>)
 8011076:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	4a14      	ldr	r2, [pc, #80]	; (80110d0 <ProcessRadioRxDone+0x5cc>)
 801107e:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
                PrepareRxDoneAbort( );
 8011082:	f7ff fd19 	bl	8010ab8 <PrepareRxDoneAbort>
                return;
 8011086:	e184      	b.n	8011392 <ProcessRadioRxDone+0x88e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8011088:	78fa      	ldrb	r2, [r7, #3]
 801108a:	6879      	ldr	r1, [r7, #4]
 801108c:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 8011090:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011094:	9300      	str	r3, [sp, #0]
 8011096:	460b      	mov	r3, r1
 8011098:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801109c:	f005 fc80 	bl	80169a0 <LoRaMacCryptoUnsecureMessage>
 80110a0:	4603      	mov	r3, r0
 80110a2:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80110a6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d016      	beq.n	80110dc <ProcessRadioRxDone+0x5d8>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 80110ae:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80110b2:	2b02      	cmp	r3, #2
 80110b4:	d104      	bne.n	80110c0 <ProcessRadioRxDone+0x5bc>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80110b6:	4b06      	ldr	r3, [pc, #24]	; (80110d0 <ProcessRadioRxDone+0x5cc>)
 80110b8:	220b      	movs	r2, #11
 80110ba:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 80110be:	e003      	b.n	80110c8 <ProcessRadioRxDone+0x5c4>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80110c0:	4b03      	ldr	r3, [pc, #12]	; (80110d0 <ProcessRadioRxDone+0x5cc>)
 80110c2:	220c      	movs	r2, #12
 80110c4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 80110c8:	f7ff fcf6 	bl	8010ab8 <PrepareRxDoneAbort>
                return;
 80110cc:	e161      	b.n	8011392 <ProcessRadioRxDone+0x88e>
 80110ce:	bf00      	nop
 80110d0:	20000950 	.word	0x20000950
 80110d4:	20000e5c 	.word	0x20000e5c
 80110d8:	20000b88 	.word	0x20000b88
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80110dc:	4bae      	ldr	r3, [pc, #696]	; (8011398 <ProcessRadioRxDone+0x894>)
 80110de:	2200      	movs	r2, #0
 80110e0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 80110e4:	4aac      	ldr	r2, [pc, #688]	; (8011398 <ProcessRadioRxDone+0x894>)
 80110e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80110ea:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80110ee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80110f2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80110f6:	b2db      	uxtb	r3, r3
 80110f8:	461a      	mov	r2, r3
 80110fa:	4ba7      	ldr	r3, [pc, #668]	; (8011398 <ProcessRadioRxDone+0x894>)
 80110fc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 8011100:	4ba5      	ldr	r3, [pc, #660]	; (8011398 <ProcessRadioRxDone+0x894>)
 8011102:	2200      	movs	r2, #0
 8011104:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 8011108:	4ba3      	ldr	r3, [pc, #652]	; (8011398 <ProcessRadioRxDone+0x894>)
 801110a:	2200      	movs	r2, #0
 801110c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	4aa1      	ldr	r2, [pc, #644]	; (8011398 <ProcessRadioRxDone+0x894>)
 8011114:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	4a9f      	ldr	r2, [pc, #636]	; (8011398 <ProcessRadioRxDone+0x894>)
 801111c:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8011120:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011124:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011128:	b2db      	uxtb	r3, r3
 801112a:	2b00      	cmp	r3, #0
 801112c:	bf14      	ite	ne
 801112e:	2301      	movne	r3, #1
 8011130:	2300      	moveq	r3, #0
 8011132:	b2da      	uxtb	r2, r3
 8011134:	4b98      	ldr	r3, [pc, #608]	; (8011398 <ProcessRadioRxDone+0x894>)
 8011136:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801113a:	4b97      	ldr	r3, [pc, #604]	; (8011398 <ProcessRadioRxDone+0x894>)
 801113c:	2200      	movs	r2, #0
 801113e:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8011142:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011146:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801114a:	b2db      	uxtb	r3, r3
 801114c:	2b00      	cmp	r3, #0
 801114e:	bf14      	ite	ne
 8011150:	2301      	movne	r3, #1
 8011152:	2300      	moveq	r3, #0
 8011154:	b2da      	uxtb	r2, r3
 8011156:	4b90      	ldr	r3, [pc, #576]	; (8011398 <ProcessRadioRxDone+0x894>)
 8011158:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801115c:	4b8e      	ldr	r3, [pc, #568]	; (8011398 <ProcessRadioRxDone+0x894>)
 801115e:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8011162:	2b00      	cmp	r3, #0
 8011164:	d004      	beq.n	8011170 <ProcessRadioRxDone+0x66c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011166:	4b8c      	ldr	r3, [pc, #560]	; (8011398 <ProcessRadioRxDone+0x894>)
 8011168:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801116c:	2b01      	cmp	r3, #1
 801116e:	d102      	bne.n	8011176 <ProcessRadioRxDone+0x672>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8011170:	4b8a      	ldr	r3, [pc, #552]	; (801139c <ProcessRadioRxDone+0x898>)
 8011172:	2200      	movs	r2, #0
 8011174:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8011176:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801117a:	2b01      	cmp	r3, #1
 801117c:	d104      	bne.n	8011188 <ProcessRadioRxDone+0x684>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 801117e:	4b86      	ldr	r3, [pc, #536]	; (8011398 <ProcessRadioRxDone+0x894>)
 8011180:	2202      	movs	r2, #2
 8011182:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8011186:	e01f      	b.n	80111c8 <ProcessRadioRxDone+0x6c4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8011188:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 801118c:	f023 031f 	bic.w	r3, r3, #31
 8011190:	b2db      	uxtb	r3, r3
 8011192:	2ba0      	cmp	r3, #160	; 0xa0
 8011194:	d110      	bne.n	80111b8 <ProcessRadioRxDone+0x6b4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8011196:	4b81      	ldr	r3, [pc, #516]	; (801139c <ProcessRadioRxDone+0x898>)
 8011198:	2201      	movs	r2, #1
 801119a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 801119e:	4b7f      	ldr	r3, [pc, #508]	; (801139c <ProcessRadioRxDone+0x898>)
 80111a0:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d102      	bne.n	80111ae <ProcessRadioRxDone+0x6aa>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 80111a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80111aa:	4a7c      	ldr	r2, [pc, #496]	; (801139c <ProcessRadioRxDone+0x898>)
 80111ac:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80111ae:	4b7a      	ldr	r3, [pc, #488]	; (8011398 <ProcessRadioRxDone+0x894>)
 80111b0:	2201      	movs	r2, #1
 80111b2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80111b6:	e007      	b.n	80111c8 <ProcessRadioRxDone+0x6c4>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 80111b8:	4b78      	ldr	r3, [pc, #480]	; (801139c <ProcessRadioRxDone+0x898>)
 80111ba:	2200      	movs	r2, #0
 80111bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80111c0:	4b75      	ldr	r3, [pc, #468]	; (8011398 <ProcessRadioRxDone+0x894>)
 80111c2:	2200      	movs	r2, #0
 80111c4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 80111c8:	4b73      	ldr	r3, [pc, #460]	; (8011398 <ProcessRadioRxDone+0x894>)
 80111ca:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 80111ce:	4a72      	ldr	r2, [pc, #456]	; (8011398 <ProcessRadioRxDone+0x894>)
 80111d0:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 80111d4:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 80111d8:	4618      	mov	r0, r3
 80111da:	f001 fee9 	bl	8012fb0 <RemoveMacCommands>

            switch( fType )
 80111de:	78bb      	ldrb	r3, [r7, #2]
 80111e0:	2b03      	cmp	r3, #3
 80111e2:	d874      	bhi.n	80112ce <ProcessRadioRxDone+0x7ca>
 80111e4:	a201      	add	r2, pc, #4	; (adr r2, 80111ec <ProcessRadioRxDone+0x6e8>)
 80111e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111ea:	bf00      	nop
 80111ec:	080111fd 	.word	0x080111fd
 80111f0:	0801124d 	.word	0x0801124d
 80111f4:	08011283 	.word	0x08011283
 80111f8:	080112a9 	.word	0x080112a9
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80111fc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011200:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011204:	b2db      	uxtb	r3, r3
 8011206:	461c      	mov	r4, r3
 8011208:	4b63      	ldr	r3, [pc, #396]	; (8011398 <ProcessRadioRxDone+0x894>)
 801120a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 801120e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8011212:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011216:	f102 0010 	add.w	r0, r2, #16
 801121a:	9300      	str	r3, [sp, #0]
 801121c:	460b      	mov	r3, r1
 801121e:	4622      	mov	r2, r4
 8011220:	2100      	movs	r1, #0
 8011222:	f000 fee5 	bl	8011ff0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011226:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801122a:	4b5b      	ldr	r3, [pc, #364]	; (8011398 <ProcessRadioRxDone+0x894>)
 801122c:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011232:	4a59      	ldr	r2, [pc, #356]	; (8011398 <ProcessRadioRxDone+0x894>)
 8011234:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011238:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 801123c:	4b56      	ldr	r3, [pc, #344]	; (8011398 <ProcessRadioRxDone+0x894>)
 801123e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8011242:	4b55      	ldr	r3, [pc, #340]	; (8011398 <ProcessRadioRxDone+0x894>)
 8011244:	2201      	movs	r2, #1
 8011246:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 801124a:	e047      	b.n	80112dc <ProcessRadioRxDone+0x7d8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 801124c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011250:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011254:	b2db      	uxtb	r3, r3
 8011256:	461c      	mov	r4, r3
 8011258:	4b4f      	ldr	r3, [pc, #316]	; (8011398 <ProcessRadioRxDone+0x894>)
 801125a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 801125e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8011262:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011266:	f102 0010 	add.w	r0, r2, #16
 801126a:	9300      	str	r3, [sp, #0]
 801126c:	460b      	mov	r3, r1
 801126e:	4622      	mov	r2, r4
 8011270:	2100      	movs	r1, #0
 8011272:	f000 febd 	bl	8011ff0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011276:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801127a:	4b47      	ldr	r3, [pc, #284]	; (8011398 <ProcessRadioRxDone+0x894>)
 801127c:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 8011280:	e02c      	b.n	80112dc <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8011282:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011284:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8011288:	4b43      	ldr	r3, [pc, #268]	; (8011398 <ProcessRadioRxDone+0x894>)
 801128a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 801128e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8011292:	9300      	str	r3, [sp, #0]
 8011294:	460b      	mov	r3, r1
 8011296:	2100      	movs	r1, #0
 8011298:	f000 feaa 	bl	8011ff0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801129c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80112a0:	4b3d      	ldr	r3, [pc, #244]	; (8011398 <ProcessRadioRxDone+0x894>)
 80112a2:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 80112a6:	e019      	b.n	80112dc <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80112a8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80112ac:	4b3a      	ldr	r3, [pc, #232]	; (8011398 <ProcessRadioRxDone+0x894>)
 80112ae:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80112b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112b4:	4a38      	ldr	r2, [pc, #224]	; (8011398 <ProcessRadioRxDone+0x894>)
 80112b6:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80112ba:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80112be:	4b36      	ldr	r3, [pc, #216]	; (8011398 <ProcessRadioRxDone+0x894>)
 80112c0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 80112c4:	4b34      	ldr	r3, [pc, #208]	; (8011398 <ProcessRadioRxDone+0x894>)
 80112c6:	2201      	movs	r2, #1
 80112c8:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 80112cc:	e006      	b.n	80112dc <ProcessRadioRxDone+0x7d8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80112ce:	4b32      	ldr	r3, [pc, #200]	; (8011398 <ProcessRadioRxDone+0x894>)
 80112d0:	2201      	movs	r2, #1
 80112d2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 80112d6:	f7ff fbef 	bl	8010ab8 <PrepareRxDoneAbort>
                    break;
 80112da:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80112dc:	4a2e      	ldr	r2, [pc, #184]	; (8011398 <ProcessRadioRxDone+0x894>)
 80112de:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80112e2:	f043 0302 	orr.w	r3, r3, #2
 80112e6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

            break;
 80112ea:	e033      	b.n	8011354 <ProcessRadioRxDone+0x850>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80112ec:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80112f0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80112f2:	18d1      	adds	r1, r2, r3
 80112f4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80112fe:	1ad3      	subs	r3, r2, r3
 8011300:	b29b      	uxth	r3, r3
 8011302:	461a      	mov	r2, r3
 8011304:	4826      	ldr	r0, [pc, #152]	; (80113a0 <ProcessRadioRxDone+0x89c>)
 8011306:	f008 fa8e 	bl	8019826 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 801130a:	4b23      	ldr	r3, [pc, #140]	; (8011398 <ProcessRadioRxDone+0x894>)
 801130c:	2203      	movs	r2, #3
 801130e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011312:	4b21      	ldr	r3, [pc, #132]	; (8011398 <ProcessRadioRxDone+0x894>)
 8011314:	2200      	movs	r2, #0
 8011316:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 801131a:	4b1f      	ldr	r3, [pc, #124]	; (8011398 <ProcessRadioRxDone+0x894>)
 801131c:	4a20      	ldr	r2, [pc, #128]	; (80113a0 <ProcessRadioRxDone+0x89c>)
 801131e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8011322:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011326:	b2da      	uxtb	r2, r3
 8011328:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801132c:	1ad3      	subs	r3, r2, r3
 801132e:	b2da      	uxtb	r2, r3
 8011330:	4b19      	ldr	r3, [pc, #100]	; (8011398 <ProcessRadioRxDone+0x894>)
 8011332:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011336:	4a18      	ldr	r2, [pc, #96]	; (8011398 <ProcessRadioRxDone+0x894>)
 8011338:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801133c:	f043 0302 	orr.w	r3, r3, #2
 8011340:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 8011344:	e006      	b.n	8011354 <ProcessRadioRxDone+0x850>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011346:	4b14      	ldr	r3, [pc, #80]	; (8011398 <ProcessRadioRxDone+0x894>)
 8011348:	2201      	movs	r2, #1
 801134a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 801134e:	f7ff fbb3 	bl	8010ab8 <PrepareRxDoneAbort>
            break;
 8011352:	bf00      	nop
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 8011354:	4b10      	ldr	r3, [pc, #64]	; (8011398 <ProcessRadioRxDone+0x894>)
 8011356:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801135a:	2b00      	cmp	r3, #0
 801135c:	d008      	beq.n	8011370 <ProcessRadioRxDone+0x86c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 801135e:	4b0e      	ldr	r3, [pc, #56]	; (8011398 <ProcessRadioRxDone+0x894>)
 8011360:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8011364:	2b00      	cmp	r3, #0
 8011366:	d00b      	beq.n	8011380 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 8011368:	2000      	movs	r0, #0
 801136a:	f000 fca9 	bl	8011cc0 <OnAckTimeoutTimerEvent>
 801136e:	e007      	b.n	8011380 <ProcessRadioRxDone+0x87c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011370:	4b0a      	ldr	r3, [pc, #40]	; (801139c <ProcessRadioRxDone+0x898>)
 8011372:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011376:	2b02      	cmp	r3, #2
 8011378:	d102      	bne.n	8011380 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 801137a:	2000      	movs	r0, #0
 801137c:	f000 fca0 	bl	8011cc0 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011380:	4a05      	ldr	r2, [pc, #20]	; (8011398 <ProcessRadioRxDone+0x894>)
 8011382:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011386:	f043 0320 	orr.w	r3, r3, #32
 801138a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 801138e:	f7ff fae1 	bl	8010954 <UpdateRxSlotIdleState>
}
 8011392:	3788      	adds	r7, #136	; 0x88
 8011394:	46bd      	mov	sp, r7
 8011396:	bdb0      	pop	{r4, r5, r7, pc}
 8011398:	20000950 	.word	0x20000950
 801139c:	20000e5c 	.word	0x20000e5c
 80113a0:	20000b88 	.word	0x20000b88

080113a4 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80113a8:	4b11      	ldr	r3, [pc, #68]	; (80113f0 <ProcessRadioTxTimeout+0x4c>)
 80113aa:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80113ae:	2b02      	cmp	r3, #2
 80113b0:	d002      	beq.n	80113b8 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 80113b2:	4b10      	ldr	r3, [pc, #64]	; (80113f4 <ProcessRadioTxTimeout+0x50>)
 80113b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113b6:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 80113b8:	f7ff facc 	bl	8010954 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 80113bc:	4b0e      	ldr	r3, [pc, #56]	; (80113f8 <ProcessRadioTxTimeout+0x54>)
 80113be:	2202      	movs	r2, #2
 80113c0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 80113c4:	2002      	movs	r0, #2
 80113c6:	f004 fc63 	bl	8015c90 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 80113ca:	4b0b      	ldr	r3, [pc, #44]	; (80113f8 <ProcessRadioTxTimeout+0x54>)
 80113cc:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d003      	beq.n	80113dc <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 80113d4:	4b08      	ldr	r3, [pc, #32]	; (80113f8 <ProcessRadioTxTimeout+0x54>)
 80113d6:	2201      	movs	r2, #1
 80113d8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 80113dc:	4a06      	ldr	r2, [pc, #24]	; (80113f8 <ProcessRadioTxTimeout+0x54>)
 80113de:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80113e2:	f043 0320 	orr.w	r3, r3, #32
 80113e6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
}
 80113ea:	bf00      	nop
 80113ec:	bd80      	pop	{r7, pc}
 80113ee:	bf00      	nop
 80113f0:	20000e5c 	.word	0x20000e5c
 80113f4:	0801f374 	.word	0x0801f374
 80113f8:	20000950 	.word	0x20000950

080113fc <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b084      	sub	sp, #16
 8011400:	af00      	add	r7, sp, #0
 8011402:	4603      	mov	r3, r0
 8011404:	460a      	mov	r2, r1
 8011406:	71fb      	strb	r3, [r7, #7]
 8011408:	4613      	mov	r3, r2
 801140a:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 801140c:	2300      	movs	r3, #0
 801140e:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011410:	4b40      	ldr	r3, [pc, #256]	; (8011514 <HandleRadioRxErrorTimeout+0x118>)
 8011412:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011416:	2b02      	cmp	r3, #2
 8011418:	d002      	beq.n	8011420 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 801141a:	4b3f      	ldr	r3, [pc, #252]	; (8011518 <HandleRadioRxErrorTimeout+0x11c>)
 801141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801141e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011420:	f003 ff97 	bl	8015352 <LoRaMacClassBIsBeaconExpected>
 8011424:	4603      	mov	r3, r0
 8011426:	2b00      	cmp	r3, #0
 8011428:	d007      	beq.n	801143a <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 801142a:	2002      	movs	r0, #2
 801142c:	f003 ff45 	bl	80152ba <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8011430:	2000      	movs	r0, #0
 8011432:	f003 ff67 	bl	8015304 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8011436:	2301      	movs	r3, #1
 8011438:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801143a:	4b36      	ldr	r3, [pc, #216]	; (8011514 <HandleRadioRxErrorTimeout+0x118>)
 801143c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011440:	2b01      	cmp	r3, #1
 8011442:	d119      	bne.n	8011478 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011444:	f003 ff8c 	bl	8015360 <LoRaMacClassBIsPingExpected>
 8011448:	4603      	mov	r3, r0
 801144a:	2b00      	cmp	r3, #0
 801144c:	d007      	beq.n	801145e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801144e:	2000      	movs	r0, #0
 8011450:	f003 ff3d 	bl	80152ce <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8011454:	2000      	movs	r0, #0
 8011456:	f003 ff5e 	bl	8015316 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 801145a:	2301      	movs	r3, #1
 801145c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 801145e:	f003 ff86 	bl	801536e <LoRaMacClassBIsMulticastExpected>
 8011462:	4603      	mov	r3, r0
 8011464:	2b00      	cmp	r3, #0
 8011466:	d007      	beq.n	8011478 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011468:	2000      	movs	r0, #0
 801146a:	f003 ff3a 	bl	80152e2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 801146e:	2000      	movs	r0, #0
 8011470:	f003 ff5a 	bl	8015328 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8011474:	2301      	movs	r3, #1
 8011476:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8011478:	7bfb      	ldrb	r3, [r7, #15]
 801147a:	f083 0301 	eor.w	r3, r3, #1
 801147e:	b2db      	uxtb	r3, r3
 8011480:	2b00      	cmp	r3, #0
 8011482:	d040      	beq.n	8011506 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011484:	4b25      	ldr	r3, [pc, #148]	; (801151c <HandleRadioRxErrorTimeout+0x120>)
 8011486:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 801148a:	2b00      	cmp	r3, #0
 801148c:	d122      	bne.n	80114d4 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 801148e:	4b23      	ldr	r3, [pc, #140]	; (801151c <HandleRadioRxErrorTimeout+0x120>)
 8011490:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011494:	2b00      	cmp	r3, #0
 8011496:	d003      	beq.n	80114a0 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8011498:	4a20      	ldr	r2, [pc, #128]	; (801151c <HandleRadioRxErrorTimeout+0x120>)
 801149a:	79fb      	ldrb	r3, [r7, #7]
 801149c:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80114a0:	79fb      	ldrb	r3, [r7, #7]
 80114a2:	4618      	mov	r0, r3
 80114a4:	f004 fbf4 	bl	8015c90 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80114a8:	4b1a      	ldr	r3, [pc, #104]	; (8011514 <HandleRadioRxErrorTimeout+0x118>)
 80114aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ac:	4618      	mov	r0, r3
 80114ae:	f00c fc2f 	bl	801dd10 <UTIL_TIMER_GetElapsedTime>
 80114b2:	4602      	mov	r2, r0
 80114b4:	4b19      	ldr	r3, [pc, #100]	; (801151c <HandleRadioRxErrorTimeout+0x120>)
 80114b6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d323      	bcc.n	8011506 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 80114be:	4818      	ldr	r0, [pc, #96]	; (8011520 <HandleRadioRxErrorTimeout+0x124>)
 80114c0:	f00c fafa 	bl	801dab8 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80114c4:	4a15      	ldr	r2, [pc, #84]	; (801151c <HandleRadioRxErrorTimeout+0x120>)
 80114c6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80114ca:	f043 0320 	orr.w	r3, r3, #32
 80114ce:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 80114d2:	e018      	b.n	8011506 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 80114d4:	4b11      	ldr	r3, [pc, #68]	; (801151c <HandleRadioRxErrorTimeout+0x120>)
 80114d6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d003      	beq.n	80114e6 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80114de:	4a0f      	ldr	r2, [pc, #60]	; (801151c <HandleRadioRxErrorTimeout+0x120>)
 80114e0:	79bb      	ldrb	r3, [r7, #6]
 80114e2:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80114e6:	79bb      	ldrb	r3, [r7, #6]
 80114e8:	4618      	mov	r0, r3
 80114ea:	f004 fbd1 	bl	8015c90 <LoRaMacConfirmQueueSetStatusCmn>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80114ee:	4b09      	ldr	r3, [pc, #36]	; (8011514 <HandleRadioRxErrorTimeout+0x118>)
 80114f0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80114f4:	2b02      	cmp	r3, #2
 80114f6:	d006      	beq.n	8011506 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 80114f8:	4a08      	ldr	r2, [pc, #32]	; (801151c <HandleRadioRxErrorTimeout+0x120>)
 80114fa:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80114fe:	f043 0320 	orr.w	r3, r3, #32
 8011502:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 8011506:	f7ff fa25 	bl	8010954 <UpdateRxSlotIdleState>
}
 801150a:	bf00      	nop
 801150c:	3710      	adds	r7, #16
 801150e:	46bd      	mov	sp, r7
 8011510:	bd80      	pop	{r7, pc}
 8011512:	bf00      	nop
 8011514:	20000e5c 	.word	0x20000e5c
 8011518:	0801f374 	.word	0x0801f374
 801151c:	20000950 	.word	0x20000950
 8011520:	20000ce8 	.word	0x20000ce8

08011524 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8011524:	b580      	push	{r7, lr}
 8011526:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8011528:	2106      	movs	r1, #6
 801152a:	2005      	movs	r0, #5
 801152c:	f7ff ff66 	bl	80113fc <HandleRadioRxErrorTimeout>
}
 8011530:	bf00      	nop
 8011532:	bd80      	pop	{r7, pc}

08011534 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8011534:	b580      	push	{r7, lr}
 8011536:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8011538:	2104      	movs	r1, #4
 801153a:	2003      	movs	r0, #3
 801153c:	f7ff ff5e 	bl	80113fc <HandleRadioRxErrorTimeout>
}
 8011540:	bf00      	nop
 8011542:	bd80      	pop	{r7, pc}

08011544 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b084      	sub	sp, #16
 8011548:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801154a:	f3ef 8310 	mrs	r3, PRIMASK
 801154e:	607b      	str	r3, [r7, #4]
  return(result);
 8011550:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8011552:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8011554:	b672      	cpsid	i
}
 8011556:	bf00      	nop
    events = LoRaMacRadioEvents;
 8011558:	4b1d      	ldr	r3, [pc, #116]	; (80115d0 <LoRaMacHandleIrqEvents+0x8c>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 801155e:	4b1c      	ldr	r3, [pc, #112]	; (80115d0 <LoRaMacHandleIrqEvents+0x8c>)
 8011560:	2200      	movs	r2, #0
 8011562:	601a      	str	r2, [r3, #0]
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	f383 8810 	msr	PRIMASK, r3
}
 801156e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8011570:	683b      	ldr	r3, [r7, #0]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d027      	beq.n	80115c6 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8011576:	783b      	ldrb	r3, [r7, #0]
 8011578:	f003 0310 	and.w	r3, r3, #16
 801157c:	b2db      	uxtb	r3, r3
 801157e:	2b00      	cmp	r3, #0
 8011580:	d001      	beq.n	8011586 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8011582:	f7ff f9ff 	bl	8010984 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8011586:	783b      	ldrb	r3, [r7, #0]
 8011588:	f003 0308 	and.w	r3, r3, #8
 801158c:	b2db      	uxtb	r3, r3
 801158e:	2b00      	cmp	r3, #0
 8011590:	d001      	beq.n	8011596 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8011592:	f7ff fab7 	bl	8010b04 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8011596:	783b      	ldrb	r3, [r7, #0]
 8011598:	f003 0304 	and.w	r3, r3, #4
 801159c:	b2db      	uxtb	r3, r3
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d001      	beq.n	80115a6 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 80115a2:	f7ff feff 	bl	80113a4 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 80115a6:	783b      	ldrb	r3, [r7, #0]
 80115a8:	f003 0302 	and.w	r3, r3, #2
 80115ac:	b2db      	uxtb	r3, r3
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d001      	beq.n	80115b6 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 80115b2:	f7ff ffb7 	bl	8011524 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 80115b6:	783b      	ldrb	r3, [r7, #0]
 80115b8:	f003 0301 	and.w	r3, r3, #1
 80115bc:	b2db      	uxtb	r3, r3
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d001      	beq.n	80115c6 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 80115c2:	f7ff ffb7 	bl	8011534 <ProcessRadioRxTimeout>
        }
    }
}
 80115c6:	bf00      	nop
 80115c8:	3710      	adds	r7, #16
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
 80115ce:	bf00      	nop
 80115d0:	20001cac 	.word	0x20001cac

080115d4 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 80115d4:	b480      	push	{r7}
 80115d6:	af00      	add	r7, sp, #0
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80115d8:	4b08      	ldr	r3, [pc, #32]	; (80115fc <LoRaMacIsBusy+0x28>)
 80115da:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d106      	bne.n	80115f0 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80115e2:	4b06      	ldr	r3, [pc, #24]	; (80115fc <LoRaMacIsBusy+0x28>)
 80115e4:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80115e8:	2b01      	cmp	r3, #1
 80115ea:	d101      	bne.n	80115f0 <LoRaMacIsBusy+0x1c>
    {
        return false;
 80115ec:	2300      	movs	r3, #0
 80115ee:	e000      	b.n	80115f2 <LoRaMacIsBusy+0x1e>
    }
    return true;
 80115f0:	2301      	movs	r3, #1
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bc80      	pop	{r7}
 80115f8:	4770      	bx	lr
 80115fa:	bf00      	nop
 80115fc:	20000950 	.word	0x20000950

08011600 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8011600:	b480      	push	{r7}
 8011602:	b083      	sub	sp, #12
 8011604:	af00      	add	r7, sp, #0
 8011606:	4603      	mov	r3, r0
 8011608:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 801160a:	4a04      	ldr	r2, [pc, #16]	; (801161c <LoRaMacEnableRequests+0x1c>)
 801160c:	79fb      	ldrb	r3, [r7, #7]
 801160e:	f882 3486 	strb.w	r3, [r2, #1158]	; 0x486
}
 8011612:	bf00      	nop
 8011614:	370c      	adds	r7, #12
 8011616:	46bd      	mov	sp, r7
 8011618:	bc80      	pop	{r7}
 801161a:	4770      	bx	lr
 801161c:	20000950 	.word	0x20000950

08011620 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b082      	sub	sp, #8
 8011624:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8011626:	4b2c      	ldr	r3, [pc, #176]	; (80116d8 <LoRaMacHandleRequestEvents+0xb8>)
 8011628:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801162c:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 801162e:	4b2a      	ldr	r3, [pc, #168]	; (80116d8 <LoRaMacHandleRequestEvents+0xb8>)
 8011630:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011634:	2b00      	cmp	r3, #0
 8011636:	d14a      	bne.n	80116ce <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011638:	4b27      	ldr	r3, [pc, #156]	; (80116d8 <LoRaMacHandleRequestEvents+0xb8>)
 801163a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801163e:	f003 0301 	and.w	r3, r3, #1
 8011642:	b2db      	uxtb	r3, r3
 8011644:	2b00      	cmp	r3, #0
 8011646:	d006      	beq.n	8011656 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8011648:	4a23      	ldr	r2, [pc, #140]	; (80116d8 <LoRaMacHandleRequestEvents+0xb8>)
 801164a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801164e:	f36f 0300 	bfc	r3, #0, #1
 8011652:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011656:	4b20      	ldr	r3, [pc, #128]	; (80116d8 <LoRaMacHandleRequestEvents+0xb8>)
 8011658:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801165c:	f003 0304 	and.w	r3, r3, #4
 8011660:	b2db      	uxtb	r3, r3
 8011662:	2b00      	cmp	r3, #0
 8011664:	d006      	beq.n	8011674 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011666:	4a1c      	ldr	r2, [pc, #112]	; (80116d8 <LoRaMacHandleRequestEvents+0xb8>)
 8011668:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801166c:	f36f 0382 	bfc	r3, #2, #1
 8011670:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011674:	2001      	movs	r0, #1
 8011676:	f7ff ffc3 	bl	8011600 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 801167a:	793b      	ldrb	r3, [r7, #4]
 801167c:	f003 0301 	and.w	r3, r3, #1
 8011680:	b2db      	uxtb	r3, r3
 8011682:	2b00      	cmp	r3, #0
 8011684:	d005      	beq.n	8011692 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8011686:	4b14      	ldr	r3, [pc, #80]	; (80116d8 <LoRaMacHandleRequestEvents+0xb8>)
 8011688:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	4813      	ldr	r0, [pc, #76]	; (80116dc <LoRaMacHandleRequestEvents+0xbc>)
 8011690:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8011692:	793b      	ldrb	r3, [r7, #4]
 8011694:	f003 0304 	and.w	r3, r3, #4
 8011698:	b2db      	uxtb	r3, r3
 801169a:	2b00      	cmp	r3, #0
 801169c:	d00e      	beq.n	80116bc <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 801169e:	4810      	ldr	r0, [pc, #64]	; (80116e0 <LoRaMacHandleRequestEvents+0xc0>)
 80116a0:	f004 fb44 	bl	8015d2c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80116a4:	f004 fb8e 	bl	8015dc4 <LoRaMacConfirmQueueGetCnt>
 80116a8:	4603      	mov	r3, r0
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d006      	beq.n	80116bc <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80116ae:	4a0a      	ldr	r2, [pc, #40]	; (80116d8 <LoRaMacHandleRequestEvents+0xb8>)
 80116b0:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80116b4:	f043 0304 	orr.w	r3, r3, #4
 80116b8:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 80116bc:	f003 fe75 	bl	80153aa <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 80116c0:	4a05      	ldr	r2, [pc, #20]	; (80116d8 <LoRaMacHandleRequestEvents+0xb8>)
 80116c2:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80116c6:	f36f 1345 	bfc	r3, #5, #1
 80116ca:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
}
 80116ce:	bf00      	nop
 80116d0:	3708      	adds	r7, #8
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}
 80116d6:	bf00      	nop
 80116d8:	20000950 	.word	0x20000950
 80116dc:	20000d88 	.word	0x20000d88
 80116e0:	20000d9c 	.word	0x20000d9c

080116e4 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b082      	sub	sp, #8
 80116e8:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 80116ea:	4b07      	ldr	r3, [pc, #28]	; (8011708 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 80116ec:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d105      	bne.n	8011700 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 80116f4:	2300      	movs	r3, #0
 80116f6:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 80116f8:	1dfb      	adds	r3, r7, #7
 80116fa:	4618      	mov	r0, r3
 80116fc:	f004 f8fc 	bl	80158f8 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 8011700:	bf00      	nop
 8011702:	3708      	adds	r7, #8
 8011704:	46bd      	mov	sp, r7
 8011706:	bd80      	pop	{r7, pc}
 8011708:	20000950 	.word	0x20000950

0801170c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 801170c:	b580      	push	{r7, lr}
 801170e:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8011710:	4b16      	ldr	r3, [pc, #88]	; (801176c <LoRaMacHandleIndicationEvents+0x60>)
 8011712:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011716:	f003 0308 	and.w	r3, r3, #8
 801171a:	b2db      	uxtb	r3, r3
 801171c:	2b00      	cmp	r3, #0
 801171e:	d00d      	beq.n	801173c <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8011720:	4a12      	ldr	r2, [pc, #72]	; (801176c <LoRaMacHandleIndicationEvents+0x60>)
 8011722:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011726:	f36f 03c3 	bfc	r3, #3, #1
 801172a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 801172e:	4b0f      	ldr	r3, [pc, #60]	; (801176c <LoRaMacHandleIndicationEvents+0x60>)
 8011730:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011734:	68db      	ldr	r3, [r3, #12]
 8011736:	490e      	ldr	r1, [pc, #56]	; (8011770 <LoRaMacHandleIndicationEvents+0x64>)
 8011738:	480e      	ldr	r0, [pc, #56]	; (8011774 <LoRaMacHandleIndicationEvents+0x68>)
 801173a:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801173c:	4b0b      	ldr	r3, [pc, #44]	; (801176c <LoRaMacHandleIndicationEvents+0x60>)
 801173e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011742:	f003 0302 	and.w	r3, r3, #2
 8011746:	b2db      	uxtb	r3, r3
 8011748:	2b00      	cmp	r3, #0
 801174a:	d00d      	beq.n	8011768 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 801174c:	4a07      	ldr	r2, [pc, #28]	; (801176c <LoRaMacHandleIndicationEvents+0x60>)
 801174e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011752:	f36f 0341 	bfc	r3, #1, #1
 8011756:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 801175a:	4b04      	ldr	r3, [pc, #16]	; (801176c <LoRaMacHandleIndicationEvents+0x60>)
 801175c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	4903      	ldr	r1, [pc, #12]	; (8011770 <LoRaMacHandleIndicationEvents+0x64>)
 8011764:	4804      	ldr	r0, [pc, #16]	; (8011778 <LoRaMacHandleIndicationEvents+0x6c>)
 8011766:	4798      	blx	r3
    }
}
 8011768:	bf00      	nop
 801176a:	bd80      	pop	{r7, pc}
 801176c:	20000950 	.word	0x20000950
 8011770:	20000dd0 	.word	0x20000dd0
 8011774:	20000db0 	.word	0x20000db0
 8011778:	20000d6c 	.word	0x20000d6c

0801177c <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b082      	sub	sp, #8
 8011780:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011782:	4b32      	ldr	r3, [pc, #200]	; (801184c <LoRaMacHandleMcpsRequest+0xd0>)
 8011784:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011788:	f003 0301 	and.w	r3, r3, #1
 801178c:	b2db      	uxtb	r3, r3
 801178e:	2b00      	cmp	r3, #0
 8011790:	d058      	beq.n	8011844 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 8011792:	2300      	movs	r3, #0
 8011794:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8011796:	2300      	movs	r3, #0
 8011798:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801179a:	4b2c      	ldr	r3, [pc, #176]	; (801184c <LoRaMacHandleMcpsRequest+0xd0>)
 801179c:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d004      	beq.n	80117ae <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 80117a4:	4b29      	ldr	r3, [pc, #164]	; (801184c <LoRaMacHandleMcpsRequest+0xd0>)
 80117a6:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80117aa:	2b03      	cmp	r3, #3
 80117ac:	d104      	bne.n	80117b8 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 80117ae:	f002 f87b 	bl	80138a8 <CheckRetransUnconfirmedUplink>
 80117b2:	4603      	mov	r3, r0
 80117b4:	71fb      	strb	r3, [r7, #7]
 80117b6:	e020      	b.n	80117fa <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80117b8:	4b24      	ldr	r3, [pc, #144]	; (801184c <LoRaMacHandleMcpsRequest+0xd0>)
 80117ba:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80117be:	2b01      	cmp	r3, #1
 80117c0:	d11b      	bne.n	80117fa <LoRaMacHandleMcpsRequest+0x7e>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 80117c2:	4b22      	ldr	r3, [pc, #136]	; (801184c <LoRaMacHandleMcpsRequest+0xd0>)
 80117c4:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d014      	beq.n	80117f6 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 80117cc:	f002 f898 	bl	8013900 <CheckRetransConfirmedUplink>
 80117d0:	4603      	mov	r3, r0
 80117d2:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 80117d4:	4b1e      	ldr	r3, [pc, #120]	; (8011850 <LoRaMacHandleMcpsRequest+0xd4>)
 80117d6:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d10d      	bne.n	80117fa <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 80117de:	79fb      	ldrb	r3, [r7, #7]
 80117e0:	f083 0301 	eor.w	r3, r3, #1
 80117e4:	b2db      	uxtb	r3, r3
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d002      	beq.n	80117f0 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 80117ea:	f002 f905 	bl	80139f8 <AckTimeoutRetriesProcess>
 80117ee:	e004      	b.n	80117fa <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 80117f0:	f002 f940 	bl	8013a74 <AckTimeoutRetriesFinalize>
 80117f4:	e001      	b.n	80117fa <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 80117f6:	2301      	movs	r3, #1
 80117f8:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 80117fa:	79fb      	ldrb	r3, [r7, #7]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d00d      	beq.n	801181c <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8011800:	4814      	ldr	r0, [pc, #80]	; (8011854 <LoRaMacHandleMcpsRequest+0xd8>)
 8011802:	f00c f959 	bl	801dab8 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011806:	4b11      	ldr	r3, [pc, #68]	; (801184c <LoRaMacHandleMcpsRequest+0xd0>)
 8011808:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801180c:	f023 0320 	bic.w	r3, r3, #32
 8011810:	4a0e      	ldr	r2, [pc, #56]	; (801184c <LoRaMacHandleMcpsRequest+0xd0>)
 8011812:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8011816:	f002 f895 	bl	8013944 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 801181a:	e013      	b.n	8011844 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 801181c:	79bb      	ldrb	r3, [r7, #6]
 801181e:	f083 0301 	eor.w	r3, r3, #1
 8011822:	b2db      	uxtb	r3, r3
 8011824:	2b00      	cmp	r3, #0
 8011826:	d00d      	beq.n	8011844 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8011828:	4a08      	ldr	r2, [pc, #32]	; (801184c <LoRaMacHandleMcpsRequest+0xd0>)
 801182a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801182e:	f36f 1345 	bfc	r3, #5, #1
 8011832:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 8011836:	4b05      	ldr	r3, [pc, #20]	; (801184c <LoRaMacHandleMcpsRequest+0xd0>)
 8011838:	2200      	movs	r2, #0
 801183a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 801183e:	2000      	movs	r0, #0
 8011840:	f000 f994 	bl	8011b6c <OnTxDelayedTimerEvent>
}
 8011844:	bf00      	nop
 8011846:	3708      	adds	r7, #8
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}
 801184c:	20000950 	.word	0x20000950
 8011850:	20000e5c 	.word	0x20000e5c
 8011854:	20000cb8 	.word	0x20000cb8

08011858 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8011858:	b580      	push	{r7, lr}
 801185a:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 801185c:	4b1b      	ldr	r3, [pc, #108]	; (80118cc <LoRaMacHandleMlmeRequest+0x74>)
 801185e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011862:	f003 0304 	and.w	r3, r3, #4
 8011866:	b2db      	uxtb	r3, r3
 8011868:	2b00      	cmp	r3, #0
 801186a:	d02c      	beq.n	80118c6 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 801186c:	2001      	movs	r0, #1
 801186e:	f004 fa43 	bl	8015cf8 <LoRaMacConfirmQueueIsCmdActive>
 8011872:	4603      	mov	r3, r0
 8011874:	2b00      	cmp	r3, #0
 8011876:	d012      	beq.n	801189e <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8011878:	2001      	movs	r0, #1
 801187a:	f004 f9df 	bl	8015c3c <LoRaMacConfirmQueueGetStatus>
 801187e:	4603      	mov	r3, r0
 8011880:	2b00      	cmp	r3, #0
 8011882:	d103      	bne.n	801188c <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8011884:	4b11      	ldr	r3, [pc, #68]	; (80118cc <LoRaMacHandleMlmeRequest+0x74>)
 8011886:	2200      	movs	r2, #0
 8011888:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801188c:	4b0f      	ldr	r3, [pc, #60]	; (80118cc <LoRaMacHandleMlmeRequest+0x74>)
 801188e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011892:	f023 0302 	bic.w	r3, r3, #2
 8011896:	4a0d      	ldr	r2, [pc, #52]	; (80118cc <LoRaMacHandleMlmeRequest+0x74>)
 8011898:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 801189c:	e013      	b.n	80118c6 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 801189e:	2005      	movs	r0, #5
 80118a0:	f004 fa2a 	bl	8015cf8 <LoRaMacConfirmQueueIsCmdActive>
 80118a4:	4603      	mov	r3, r0
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d105      	bne.n	80118b6 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 80118aa:	2006      	movs	r0, #6
 80118ac:	f004 fa24 	bl	8015cf8 <LoRaMacConfirmQueueIsCmdActive>
 80118b0:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d007      	beq.n	80118c6 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80118b6:	4b05      	ldr	r3, [pc, #20]	; (80118cc <LoRaMacHandleMlmeRequest+0x74>)
 80118b8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80118bc:	f023 0302 	bic.w	r3, r3, #2
 80118c0:	4a02      	ldr	r2, [pc, #8]	; (80118cc <LoRaMacHandleMlmeRequest+0x74>)
 80118c2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 80118c6:	bf00      	nop
 80118c8:	bd80      	pop	{r7, pc}
 80118ca:	bf00      	nop
 80118cc:	20000950 	.word	0x20000950

080118d0 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80118d4:	200c      	movs	r0, #12
 80118d6:	f004 fa0f 	bl	8015cf8 <LoRaMacConfirmQueueIsCmdActive>
 80118da:	4603      	mov	r3, r0
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d019      	beq.n	8011914 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80118e0:	4b0e      	ldr	r3, [pc, #56]	; (801191c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80118e2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80118e6:	f003 0301 	and.w	r3, r3, #1
 80118ea:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d111      	bne.n	8011914 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80118f0:	4b0a      	ldr	r3, [pc, #40]	; (801191c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80118f2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80118f6:	f003 0304 	and.w	r3, r3, #4
 80118fa:	b2db      	uxtb	r3, r3
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d009      	beq.n	8011914 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011900:	4b06      	ldr	r3, [pc, #24]	; (801191c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011902:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011906:	f023 0302 	bic.w	r3, r3, #2
 801190a:	4a04      	ldr	r2, [pc, #16]	; (801191c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801190c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8011910:	2301      	movs	r3, #1
 8011912:	e000      	b.n	8011916 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8011914:	2300      	movs	r3, #0
}
 8011916:	4618      	mov	r0, r3
 8011918:	bd80      	pop	{r7, pc}
 801191a:	bf00      	nop
 801191c:	20000950 	.word	0x20000950

08011920 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8011920:	b480      	push	{r7}
 8011922:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8011924:	4b0d      	ldr	r3, [pc, #52]	; (801195c <LoRaMacCheckForRxAbort+0x3c>)
 8011926:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801192a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801192e:	2b00      	cmp	r3, #0
 8011930:	d00f      	beq.n	8011952 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8011932:	4b0a      	ldr	r3, [pc, #40]	; (801195c <LoRaMacCheckForRxAbort+0x3c>)
 8011934:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801193c:	4a07      	ldr	r2, [pc, #28]	; (801195c <LoRaMacCheckForRxAbort+0x3c>)
 801193e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011942:	4b06      	ldr	r3, [pc, #24]	; (801195c <LoRaMacCheckForRxAbort+0x3c>)
 8011944:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011948:	f023 0302 	bic.w	r3, r3, #2
 801194c:	4a03      	ldr	r2, [pc, #12]	; (801195c <LoRaMacCheckForRxAbort+0x3c>)
 801194e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8011952:	bf00      	nop
 8011954:	46bd      	mov	sp, r7
 8011956:	bc80      	pop	{r7}
 8011958:	4770      	bx	lr
 801195a:	bf00      	nop
 801195c:	20000950 	.word	0x20000950

08011960 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b084      	sub	sp, #16
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8011968:	2300      	movs	r3, #0
 801196a:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 801196c:	2300      	movs	r3, #0
 801196e:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8011970:	4b50      	ldr	r3, [pc, #320]	; (8011ab4 <LoRaMacHandleNvm+0x154>)
 8011972:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011976:	2b00      	cmp	r3, #0
 8011978:	f040 8098 	bne.w	8011aac <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	2124      	movs	r1, #36	; 0x24
 8011980:	4618      	mov	r0, r3
 8011982:	f007 ffa5 	bl	80198d0 <Crc32>
 8011986:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801198c:	68ba      	ldr	r2, [r7, #8]
 801198e:	429a      	cmp	r2, r3
 8011990:	d006      	beq.n	80119a0 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	68ba      	ldr	r2, [r7, #8]
 8011996:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8011998:	89fb      	ldrh	r3, [r7, #14]
 801199a:	f043 0301 	orr.w	r3, r3, #1
 801199e:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	3328      	adds	r3, #40	; 0x28
 80119a4:	2114      	movs	r1, #20
 80119a6:	4618      	mov	r0, r3
 80119a8:	f007 ff92 	bl	80198d0 <Crc32>
 80119ac:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119b2:	68ba      	ldr	r2, [r7, #8]
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d006      	beq.n	80119c6 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	68ba      	ldr	r2, [r7, #8]
 80119bc:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80119be:	89fb      	ldrh	r3, [r7, #14]
 80119c0:	f043 0302 	orr.w	r3, r3, #2
 80119c4:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	3340      	adds	r3, #64	; 0x40
 80119ca:	21dc      	movs	r1, #220	; 0xdc
 80119cc:	4618      	mov	r0, r3
 80119ce:	f007 ff7f 	bl	80198d0 <Crc32>
 80119d2:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80119da:	68ba      	ldr	r2, [r7, #8]
 80119dc:	429a      	cmp	r2, r3
 80119de:	d007      	beq.n	80119f0 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	68ba      	ldr	r2, [r7, #8]
 80119e4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80119e8:	89fb      	ldrh	r3, [r7, #14]
 80119ea:	f043 0304 	orr.w	r3, r3, #4
 80119ee:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80119f6:	21bc      	movs	r1, #188	; 0xbc
 80119f8:	4618      	mov	r0, r3
 80119fa:	f007 ff69 	bl	80198d0 <Crc32>
 80119fe:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8011a06:	68ba      	ldr	r2, [r7, #8]
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d007      	beq.n	8011a1c <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	68ba      	ldr	r2, [r7, #8]
 8011a10:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8011a14:	89fb      	ldrh	r3, [r7, #14]
 8011a16:	f043 0308 	orr.w	r3, r3, #8
 8011a1a:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8011a22:	2190      	movs	r1, #144	; 0x90
 8011a24:	4618      	mov	r0, r3
 8011a26:	f007 ff53 	bl	80198d0 <Crc32>
 8011a2a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011a32:	68ba      	ldr	r2, [r7, #8]
 8011a34:	429a      	cmp	r2, r3
 8011a36:	d007      	beq.n	8011a48 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	68ba      	ldr	r2, [r7, #8]
 8011a3c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8011a40:	89fb      	ldrh	r3, [r7, #14]
 8011a42:	f043 0310 	orr.w	r3, r3, #16
 8011a46:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8011a4e:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8011a52:	4618      	mov	r0, r3
 8011a54:	f007 ff3c 	bl	80198d0 <Crc32>
 8011a58:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 8011a60:	68ba      	ldr	r2, [r7, #8]
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d007      	beq.n	8011a76 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	68ba      	ldr	r2, [r7, #8]
 8011a6a:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8011a6e:	89fb      	ldrh	r3, [r7, #14]
 8011a70:	f043 0320 	orr.w	r3, r3, #32
 8011a74:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 8011a7c:	2114      	movs	r1, #20
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f007 ff26 	bl	80198d0 <Crc32>
 8011a84:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 8011a8c:	68ba      	ldr	r2, [r7, #8]
 8011a8e:	429a      	cmp	r2, r3
 8011a90:	d007      	beq.n	8011aa2 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	68ba      	ldr	r2, [r7, #8]
 8011a96:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8011a9a:	89fb      	ldrh	r3, [r7, #14]
 8011a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011aa0:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8011aa2:	89fb      	ldrh	r3, [r7, #14]
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f001 ff89 	bl	80139bc <CallNvmDataChangeCallback>
 8011aaa:	e000      	b.n	8011aae <LoRaMacHandleNvm+0x14e>
        return;
 8011aac:	bf00      	nop
}
 8011aae:	3710      	adds	r7, #16
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	bd80      	pop	{r7, pc}
 8011ab4:	20000950 	.word	0x20000950

08011ab8 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b082      	sub	sp, #8
 8011abc:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8011ac2:	f7ff fd3f 	bl	8011544 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8011ac6:	f003 fcd4 	bl	8015472 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8011aca:	4b26      	ldr	r3, [pc, #152]	; (8011b64 <LoRaMacProcess+0xac>)
 8011acc:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011ad0:	f003 0320 	and.w	r3, r3, #32
 8011ad4:	b2db      	uxtb	r3, r3
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d025      	beq.n	8011b26 <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8011ada:	2000      	movs	r0, #0
 8011adc:	f7ff fd90 	bl	8011600 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8011ae0:	f7ff ff1e 	bl	8011920 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8011ae4:	f001 fffa 	bl	8013adc <IsRequestPending>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d006      	beq.n	8011afc <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8011aee:	f7ff feef 	bl	80118d0 <LoRaMacCheckForBeaconAcquisition>
 8011af2:	4603      	mov	r3, r0
 8011af4:	461a      	mov	r2, r3
 8011af6:	79fb      	ldrb	r3, [r7, #7]
 8011af8:	4313      	orrs	r3, r2
 8011afa:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8011afc:	79fb      	ldrb	r3, [r7, #7]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d103      	bne.n	8011b0a <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8011b02:	f7ff fea9 	bl	8011858 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8011b06:	f7ff fe39 	bl	801177c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8011b0a:	f7ff fd89 	bl	8011620 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8011b0e:	f7ff fde9 	bl	80116e4 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011b12:	2001      	movs	r0, #1
 8011b14:	f7ff fd74 	bl	8011600 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011b18:	4a12      	ldr	r2, [pc, #72]	; (8011b64 <LoRaMacProcess+0xac>)
 8011b1a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b22:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    LoRaMacHandleIndicationEvents( );
 8011b26:	f7ff fdf1 	bl	801170c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8011b2a:	4b0e      	ldr	r3, [pc, #56]	; (8011b64 <LoRaMacProcess+0xac>)
 8011b2c:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8011b30:	2b02      	cmp	r3, #2
 8011b32:	d101      	bne.n	8011b38 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 8011b34:	f001 fb7e 	bl	8013234 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8011b38:	4b0a      	ldr	r3, [pc, #40]	; (8011b64 <LoRaMacProcess+0xac>)
 8011b3a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b42:	b2db      	uxtb	r3, r3
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d009      	beq.n	8011b5c <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8011b48:	4a06      	ldr	r2, [pc, #24]	; (8011b64 <LoRaMacProcess+0xac>)
 8011b4a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011b4e:	f36f 1386 	bfc	r3, #6, #1
 8011b52:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        LoRaMacHandleNvm( &Nvm );
 8011b56:	4804      	ldr	r0, [pc, #16]	; (8011b68 <LoRaMacProcess+0xb0>)
 8011b58:	f7ff ff02 	bl	8011960 <LoRaMacHandleNvm>
    }
}
 8011b5c:	bf00      	nop
 8011b5e:	3708      	adds	r7, #8
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}
 8011b64:	20000950 	.word	0x20000950
 8011b68:	20000e5c 	.word	0x20000e5c

08011b6c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8011b74:	4817      	ldr	r0, [pc, #92]	; (8011bd4 <OnTxDelayedTimerEvent+0x68>)
 8011b76:	f00b ff9f 	bl	801dab8 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011b7a:	4b17      	ldr	r3, [pc, #92]	; (8011bd8 <OnTxDelayedTimerEvent+0x6c>)
 8011b7c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011b80:	f023 0320 	bic.w	r3, r3, #32
 8011b84:	4a14      	ldr	r2, [pc, #80]	; (8011bd8 <OnTxDelayedTimerEvent+0x6c>)
 8011b86:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8011b8a:	2001      	movs	r0, #1
 8011b8c:	f001 f8e6 	bl	8012d5c <ScheduleTx>
 8011b90:	4603      	mov	r3, r0
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d018      	beq.n	8011bc8 <OnTxDelayedTimerEvent+0x5c>
 8011b96:	2b0b      	cmp	r3, #11
 8011b98:	d016      	beq.n	8011bc8 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011b9a:	4b10      	ldr	r3, [pc, #64]	; (8011bdc <OnTxDelayedTimerEvent+0x70>)
 8011b9c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011ba0:	b2da      	uxtb	r2, r3
 8011ba2:	4b0d      	ldr	r3, [pc, #52]	; (8011bd8 <OnTxDelayedTimerEvent+0x6c>)
 8011ba4:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8011ba8:	4b0b      	ldr	r3, [pc, #44]	; (8011bd8 <OnTxDelayedTimerEvent+0x6c>)
 8011baa:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8011bae:	4b0a      	ldr	r3, [pc, #40]	; (8011bd8 <OnTxDelayedTimerEvent+0x6c>)
 8011bb0:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8011bb4:	4b08      	ldr	r3, [pc, #32]	; (8011bd8 <OnTxDelayedTimerEvent+0x6c>)
 8011bb6:	2209      	movs	r2, #9
 8011bb8:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8011bbc:	2009      	movs	r0, #9
 8011bbe:	f004 f867 	bl	8015c90 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8011bc2:	f001 febf 	bl	8013944 <StopRetransmission>
            break;
 8011bc6:	e000      	b.n	8011bca <OnTxDelayedTimerEvent+0x5e>
            break;
 8011bc8:	bf00      	nop
        }
    }
}
 8011bca:	bf00      	nop
 8011bcc:	3708      	adds	r7, #8
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}
 8011bd2:	bf00      	nop
 8011bd4:	20000cb8 	.word	0x20000cb8
 8011bd8:	20000950 	.word	0x20000950
 8011bdc:	20000e5c 	.word	0x20000e5c

08011be0 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b082      	sub	sp, #8
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8011be8:	4b14      	ldr	r3, [pc, #80]	; (8011c3c <OnRxWindow1TimerEvent+0x5c>)
 8011bea:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8011bee:	4b13      	ldr	r3, [pc, #76]	; (8011c3c <OnRxWindow1TimerEvent+0x5c>)
 8011bf0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8011bf4:	4b12      	ldr	r3, [pc, #72]	; (8011c40 <OnRxWindow1TimerEvent+0x60>)
 8011bf6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011bfa:	b25a      	sxtb	r2, r3
 8011bfc:	4b0f      	ldr	r3, [pc, #60]	; (8011c3c <OnRxWindow1TimerEvent+0x5c>)
 8011bfe:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011c02:	4b0f      	ldr	r3, [pc, #60]	; (8011c40 <OnRxWindow1TimerEvent+0x60>)
 8011c04:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8011c08:	4b0c      	ldr	r3, [pc, #48]	; (8011c3c <OnRxWindow1TimerEvent+0x5c>)
 8011c0a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8011c0e:	4b0c      	ldr	r3, [pc, #48]	; (8011c40 <OnRxWindow1TimerEvent+0x60>)
 8011c10:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8011c14:	4b09      	ldr	r3, [pc, #36]	; (8011c3c <OnRxWindow1TimerEvent+0x5c>)
 8011c16:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8011c1a:	4b08      	ldr	r3, [pc, #32]	; (8011c3c <OnRxWindow1TimerEvent+0x5c>)
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8011c22:	4b06      	ldr	r3, [pc, #24]	; (8011c3c <OnRxWindow1TimerEvent+0x5c>)
 8011c24:	2200      	movs	r2, #0
 8011c26:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8011c2a:	4906      	ldr	r1, [pc, #24]	; (8011c44 <OnRxWindow1TimerEvent+0x64>)
 8011c2c:	4806      	ldr	r0, [pc, #24]	; (8011c48 <OnRxWindow1TimerEvent+0x68>)
 8011c2e:	f001 facd 	bl	80131cc <RxWindowSetup>
}
 8011c32:	bf00      	nop
 8011c34:	3708      	adds	r7, #8
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}
 8011c3a:	bf00      	nop
 8011c3c:	20000950 	.word	0x20000950
 8011c40:	20000e5c 	.word	0x20000e5c
 8011c44:	20000d08 	.word	0x20000d08
 8011c48:	20000cd0 	.word	0x20000cd0

08011c4c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b082      	sub	sp, #8
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011c54:	4b16      	ldr	r3, [pc, #88]	; (8011cb0 <OnRxWindow2TimerEvent+0x64>)
 8011c56:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d023      	beq.n	8011ca6 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8011c5e:	4b14      	ldr	r3, [pc, #80]	; (8011cb0 <OnRxWindow2TimerEvent+0x64>)
 8011c60:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8011c64:	4b12      	ldr	r3, [pc, #72]	; (8011cb0 <OnRxWindow2TimerEvent+0x64>)
 8011c66:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8011c6a:	4b12      	ldr	r3, [pc, #72]	; (8011cb4 <OnRxWindow2TimerEvent+0x68>)
 8011c6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c6e:	4a10      	ldr	r2, [pc, #64]	; (8011cb0 <OnRxWindow2TimerEvent+0x64>)
 8011c70:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011c74:	4b0f      	ldr	r3, [pc, #60]	; (8011cb4 <OnRxWindow2TimerEvent+0x68>)
 8011c76:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8011c7a:	4b0d      	ldr	r3, [pc, #52]	; (8011cb0 <OnRxWindow2TimerEvent+0x64>)
 8011c7c:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8011c80:	4b0c      	ldr	r3, [pc, #48]	; (8011cb4 <OnRxWindow2TimerEvent+0x68>)
 8011c82:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8011c86:	4b0a      	ldr	r3, [pc, #40]	; (8011cb0 <OnRxWindow2TimerEvent+0x64>)
 8011c88:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011c8c:	4b08      	ldr	r3, [pc, #32]	; (8011cb0 <OnRxWindow2TimerEvent+0x64>)
 8011c8e:	2200      	movs	r2, #0
 8011c90:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011c94:	4b06      	ldr	r3, [pc, #24]	; (8011cb0 <OnRxWindow2TimerEvent+0x64>)
 8011c96:	2201      	movs	r2, #1
 8011c98:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8011c9c:	4906      	ldr	r1, [pc, #24]	; (8011cb8 <OnRxWindow2TimerEvent+0x6c>)
 8011c9e:	4807      	ldr	r0, [pc, #28]	; (8011cbc <OnRxWindow2TimerEvent+0x70>)
 8011ca0:	f001 fa94 	bl	80131cc <RxWindowSetup>
 8011ca4:	e000      	b.n	8011ca8 <OnRxWindow2TimerEvent+0x5c>
        return;
 8011ca6:	bf00      	nop
}
 8011ca8:	3708      	adds	r7, #8
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}
 8011cae:	bf00      	nop
 8011cb0:	20000950 	.word	0x20000950
 8011cb4:	20000e5c 	.word	0x20000e5c
 8011cb8:	20000d1c 	.word	0x20000d1c
 8011cbc:	20000ce8 	.word	0x20000ce8

08011cc0 <OnAckTimeoutTimerEvent>:
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b082      	sub	sp, #8
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8011cc8:	4815      	ldr	r0, [pc, #84]	; (8011d20 <OnAckTimeoutTimerEvent+0x60>)
 8011cca:	f00b fef5 	bl	801dab8 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8011cce:	4b15      	ldr	r3, [pc, #84]	; (8011d24 <OnAckTimeoutTimerEvent+0x64>)
 8011cd0:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d003      	beq.n	8011ce0 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 8011cd8:	4b12      	ldr	r3, [pc, #72]	; (8011d24 <OnAckTimeoutTimerEvent+0x64>)
 8011cda:	2201      	movs	r2, #1
 8011cdc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011ce0:	4b11      	ldr	r3, [pc, #68]	; (8011d28 <OnAckTimeoutTimerEvent+0x68>)
 8011ce2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011ce6:	2b02      	cmp	r3, #2
 8011ce8:	d106      	bne.n	8011cf8 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8011cea:	4a0e      	ldr	r2, [pc, #56]	; (8011d24 <OnAckTimeoutTimerEvent+0x64>)
 8011cec:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011cf0:	f043 0320 	orr.w	r3, r3, #32
 8011cf4:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8011cf8:	4b0a      	ldr	r3, [pc, #40]	; (8011d24 <OnAckTimeoutTimerEvent+0x64>)
 8011cfa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d00a      	beq.n	8011d18 <OnAckTimeoutTimerEvent+0x58>
 8011d02:	4b08      	ldr	r3, [pc, #32]	; (8011d24 <OnAckTimeoutTimerEvent+0x64>)
 8011d04:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011d08:	691b      	ldr	r3, [r3, #16]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d004      	beq.n	8011d18 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8011d0e:	4b05      	ldr	r3, [pc, #20]	; (8011d24 <OnAckTimeoutTimerEvent+0x64>)
 8011d10:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011d14:	691b      	ldr	r3, [r3, #16]
 8011d16:	4798      	blx	r3
    }
}
 8011d18:	bf00      	nop
 8011d1a:	3708      	adds	r7, #8
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}
 8011d20:	20000d48 	.word	0x20000d48
 8011d24:	20000950 	.word	0x20000950
 8011d28:	20000e5c 	.word	0x20000e5c

08011d2c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b084      	sub	sp, #16
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	60ba      	str	r2, [r7, #8]
 8011d34:	607b      	str	r3, [r7, #4]
 8011d36:	4603      	mov	r3, r0
 8011d38:	73fb      	strb	r3, [r7, #15]
 8011d3a:	460b      	mov	r3, r1
 8011d3c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8011d3e:	68bb      	ldr	r3, [r7, #8]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d005      	beq.n	8011d50 <GetFCntDown+0x24>
 8011d44:	69fb      	ldr	r3, [r7, #28]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d002      	beq.n	8011d50 <GetFCntDown+0x24>
 8011d4a:	6a3b      	ldr	r3, [r7, #32]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d101      	bne.n	8011d54 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011d50:	230a      	movs	r3, #10
 8011d52:	e029      	b.n	8011da8 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8011d54:	7bfb      	ldrb	r3, [r7, #15]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d016      	beq.n	8011d88 <GetFCntDown+0x5c>
 8011d5a:	2b01      	cmp	r3, #1
 8011d5c:	d118      	bne.n	8011d90 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8011d5e:	79bb      	ldrb	r3, [r7, #6]
 8011d60:	2b01      	cmp	r3, #1
 8011d62:	d10d      	bne.n	8011d80 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8011d64:	7bbb      	ldrb	r3, [r7, #14]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d002      	beq.n	8011d70 <GetFCntDown+0x44>
 8011d6a:	7bbb      	ldrb	r3, [r7, #14]
 8011d6c:	2b03      	cmp	r3, #3
 8011d6e:	d103      	bne.n	8011d78 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8011d70:	69fb      	ldr	r3, [r7, #28]
 8011d72:	2202      	movs	r2, #2
 8011d74:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8011d76:	e00d      	b.n	8011d94 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8011d78:	69fb      	ldr	r3, [r7, #28]
 8011d7a:	2201      	movs	r2, #1
 8011d7c:	701a      	strb	r2, [r3, #0]
            break;
 8011d7e:	e009      	b.n	8011d94 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8011d80:	69fb      	ldr	r3, [r7, #28]
 8011d82:	2203      	movs	r2, #3
 8011d84:	701a      	strb	r2, [r3, #0]
            break;
 8011d86:	e005      	b.n	8011d94 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8011d88:	69fb      	ldr	r3, [r7, #28]
 8011d8a:	2204      	movs	r2, #4
 8011d8c:	701a      	strb	r2, [r3, #0]
            break;
 8011d8e:	e001      	b.n	8011d94 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8011d90:	2305      	movs	r3, #5
 8011d92:	e009      	b.n	8011da8 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8011d94:	69fb      	ldr	r3, [r7, #28]
 8011d96:	7818      	ldrb	r0, [r3, #0]
 8011d98:	68bb      	ldr	r3, [r7, #8]
 8011d9a:	89db      	ldrh	r3, [r3, #14]
 8011d9c:	461a      	mov	r2, r3
 8011d9e:	8b39      	ldrh	r1, [r7, #24]
 8011da0:	6a3b      	ldr	r3, [r7, #32]
 8011da2:	f004 fb9f 	bl	80164e4 <LoRaMacCryptoGetFCntDown>
 8011da6:	4603      	mov	r3, r0
}
 8011da8:	4618      	mov	r0, r3
 8011daa:	3710      	adds	r7, #16
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}

08011db0 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8011db0:	b5b0      	push	{r4, r5, r7, lr}
 8011db2:	b084      	sub	sp, #16
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	4603      	mov	r3, r0
 8011db8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011dba:	2303      	movs	r3, #3
 8011dbc:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8011dbe:	4b61      	ldr	r3, [pc, #388]	; (8011f44 <SwitchClass+0x194>)
 8011dc0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011dc4:	2b02      	cmp	r3, #2
 8011dc6:	f000 80a5 	beq.w	8011f14 <SwitchClass+0x164>
 8011dca:	2b02      	cmp	r3, #2
 8011dcc:	f300 80b4 	bgt.w	8011f38 <SwitchClass+0x188>
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d003      	beq.n	8011ddc <SwitchClass+0x2c>
 8011dd4:	2b01      	cmp	r3, #1
 8011dd6:	f000 808f 	beq.w	8011ef8 <SwitchClass+0x148>
 8011dda:	e0ad      	b.n	8011f38 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8011ddc:	79fb      	ldrb	r3, [r7, #7]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d107      	bne.n	8011df2 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011de2:	4b58      	ldr	r3, [pc, #352]	; (8011f44 <SwitchClass+0x194>)
 8011de4:	4a57      	ldr	r2, [pc, #348]	; (8011f44 <SwitchClass+0x194>)
 8011de6:	336c      	adds	r3, #108	; 0x6c
 8011de8:	3264      	adds	r2, #100	; 0x64
 8011dea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011dee:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 8011df2:	79fb      	ldrb	r3, [r7, #7]
 8011df4:	2b01      	cmp	r3, #1
 8011df6:	d10c      	bne.n	8011e12 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8011df8:	79fb      	ldrb	r3, [r7, #7]
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f003 fadb 	bl	80153b6 <LoRaMacClassBSwitchClass>
 8011e00:	4603      	mov	r3, r0
 8011e02:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8011e04:	7bfb      	ldrb	r3, [r7, #15]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d103      	bne.n	8011e12 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8011e0a:	4a4e      	ldr	r2, [pc, #312]	; (8011f44 <SwitchClass+0x194>)
 8011e0c:	79fb      	ldrb	r3, [r7, #7]
 8011e0e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 8011e12:	79fb      	ldrb	r3, [r7, #7]
 8011e14:	2b02      	cmp	r3, #2
 8011e16:	f040 808a 	bne.w	8011f2e <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8011e1a:	4a4a      	ldr	r2, [pc, #296]	; (8011f44 <SwitchClass+0x194>)
 8011e1c:	79fb      	ldrb	r3, [r7, #7]
 8011e1e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011e22:	4a49      	ldr	r2, [pc, #292]	; (8011f48 <SwitchClass+0x198>)
 8011e24:	4b48      	ldr	r3, [pc, #288]	; (8011f48 <SwitchClass+0x198>)
 8011e26:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8011e2a:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8011e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011e32:	682b      	ldr	r3, [r5, #0]
 8011e34:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011e36:	4b44      	ldr	r3, [pc, #272]	; (8011f48 <SwitchClass+0x198>)
 8011e38:	2202      	movs	r2, #2
 8011e3a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011e3e:	2300      	movs	r3, #0
 8011e40:	73bb      	strb	r3, [r7, #14]
 8011e42:	e049      	b.n	8011ed8 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8011e44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e48:	4a3e      	ldr	r2, [pc, #248]	; (8011f44 <SwitchClass+0x194>)
 8011e4a:	212c      	movs	r1, #44	; 0x2c
 8011e4c:	fb01 f303 	mul.w	r3, r1, r3
 8011e50:	4413      	add	r3, r2
 8011e52:	33da      	adds	r3, #218	; 0xda
 8011e54:	781b      	ldrb	r3, [r3, #0]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d038      	beq.n	8011ecc <SwitchClass+0x11c>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8011e5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e5e:	4a39      	ldr	r2, [pc, #228]	; (8011f44 <SwitchClass+0x194>)
 8011e60:	212c      	movs	r1, #44	; 0x2c
 8011e62:	fb01 f303 	mul.w	r3, r1, r3
 8011e66:	4413      	add	r3, r2
 8011e68:	33f0      	adds	r3, #240	; 0xf0
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	4a35      	ldr	r2, [pc, #212]	; (8011f44 <SwitchClass+0x194>)
 8011e6e:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8011e70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e74:	4a33      	ldr	r2, [pc, #204]	; (8011f44 <SwitchClass+0x194>)
 8011e76:	212c      	movs	r1, #44	; 0x2c
 8011e78:	fb01 f303 	mul.w	r3, r1, r3
 8011e7c:	4413      	add	r3, r2
 8011e7e:	33f4      	adds	r3, #244	; 0xf4
 8011e80:	f993 3000 	ldrsb.w	r3, [r3]
 8011e84:	b2da      	uxtb	r2, r3
 8011e86:	4b2f      	ldr	r3, [pc, #188]	; (8011f44 <SwitchClass+0x194>)
 8011e88:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011e8c:	4b2e      	ldr	r3, [pc, #184]	; (8011f48 <SwitchClass+0x198>)
 8011e8e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8011e92:	4b2d      	ldr	r3, [pc, #180]	; (8011f48 <SwitchClass+0x198>)
 8011e94:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8011e98:	4b2a      	ldr	r3, [pc, #168]	; (8011f44 <SwitchClass+0x194>)
 8011e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e9c:	4a2a      	ldr	r2, [pc, #168]	; (8011f48 <SwitchClass+0x198>)
 8011e9e:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011ea2:	4b28      	ldr	r3, [pc, #160]	; (8011f44 <SwitchClass+0x194>)
 8011ea4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8011ea8:	4b27      	ldr	r3, [pc, #156]	; (8011f48 <SwitchClass+0x198>)
 8011eaa:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8011eae:	4b25      	ldr	r3, [pc, #148]	; (8011f44 <SwitchClass+0x194>)
 8011eb0:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8011eb4:	4b24      	ldr	r3, [pc, #144]	; (8011f48 <SwitchClass+0x198>)
 8011eb6:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8011eba:	4b23      	ldr	r3, [pc, #140]	; (8011f48 <SwitchClass+0x198>)
 8011ebc:	2203      	movs	r2, #3
 8011ebe:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8011ec2:	4b21      	ldr	r3, [pc, #132]	; (8011f48 <SwitchClass+0x198>)
 8011ec4:	2201      	movs	r2, #1
 8011ec6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8011eca:	e009      	b.n	8011ee0 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011ecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ed0:	b2db      	uxtb	r3, r3
 8011ed2:	3301      	adds	r3, #1
 8011ed4:	b2db      	uxtb	r3, r3
 8011ed6:	73bb      	strb	r3, [r7, #14]
 8011ed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	ddb1      	ble.n	8011e44 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8011ee0:	4b19      	ldr	r3, [pc, #100]	; (8011f48 <SwitchClass+0x198>)
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8011ee8:	4b18      	ldr	r3, [pc, #96]	; (8011f4c <SwitchClass+0x19c>)
 8011eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eec:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8011eee:	f001 f9a1 	bl	8013234 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8011ef6:	e01a      	b.n	8011f2e <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8011ef8:	79fb      	ldrb	r3, [r7, #7]
 8011efa:	4618      	mov	r0, r3
 8011efc:	f003 fa5b 	bl	80153b6 <LoRaMacClassBSwitchClass>
 8011f00:	4603      	mov	r3, r0
 8011f02:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8011f04:	7bfb      	ldrb	r3, [r7, #15]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d113      	bne.n	8011f32 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8011f0a:	4a0e      	ldr	r2, [pc, #56]	; (8011f44 <SwitchClass+0x194>)
 8011f0c:	79fb      	ldrb	r3, [r7, #7]
 8011f0e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 8011f12:	e00e      	b.n	8011f32 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8011f14:	79fb      	ldrb	r3, [r7, #7]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d10d      	bne.n	8011f36 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8011f1a:	4a0a      	ldr	r2, [pc, #40]	; (8011f44 <SwitchClass+0x194>)
 8011f1c:	79fb      	ldrb	r3, [r7, #7]
 8011f1e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8011f22:	4b0a      	ldr	r3, [pc, #40]	; (8011f4c <SwitchClass+0x19c>)
 8011f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f26:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8011f2c:	e003      	b.n	8011f36 <SwitchClass+0x186>
            break;
 8011f2e:	bf00      	nop
 8011f30:	e002      	b.n	8011f38 <SwitchClass+0x188>
            break;
 8011f32:	bf00      	nop
 8011f34:	e000      	b.n	8011f38 <SwitchClass+0x188>
            break;
 8011f36:	bf00      	nop
        }
    }

    return status;
 8011f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3710      	adds	r7, #16
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bdb0      	pop	{r4, r5, r7, pc}
 8011f42:	bf00      	nop
 8011f44:	20000e5c 	.word	0x20000e5c
 8011f48:	20000950 	.word	0x20000950
 8011f4c:	0801f374 	.word	0x0801f374

08011f50 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b086      	sub	sp, #24
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	4603      	mov	r3, r0
 8011f58:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011f5a:	4b10      	ldr	r3, [pc, #64]	; (8011f9c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011f5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011f60:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8011f62:	79fb      	ldrb	r3, [r7, #7]
 8011f64:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8011f66:	230d      	movs	r3, #13
 8011f68:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8011f6a:	4b0c      	ldr	r3, [pc, #48]	; (8011f9c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011f6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d001      	beq.n	8011f78 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8011f74:	230e      	movs	r3, #14
 8011f76:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f78:	4b08      	ldr	r3, [pc, #32]	; (8011f9c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f7e:	f107 0210 	add.w	r2, r7, #16
 8011f82:	4611      	mov	r1, r2
 8011f84:	4618      	mov	r0, r3
 8011f86:	f005 f93b 	bl	8017200 <RegionGetPhyParam>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	b2db      	uxtb	r3, r3
}
 8011f92:	4618      	mov	r0, r3
 8011f94:	3718      	adds	r7, #24
 8011f96:	46bd      	mov	sp, r7
 8011f98:	bd80      	pop	{r7, pc}
 8011f9a:	bf00      	nop
 8011f9c:	20000e5c 	.word	0x20000e5c

08011fa0 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b084      	sub	sp, #16
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	71fb      	strb	r3, [r7, #7]
 8011faa:	460b      	mov	r3, r1
 8011fac:	71bb      	strb	r3, [r7, #6]
 8011fae:	4613      	mov	r3, r2
 8011fb0:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8011fba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7ff ffc6 	bl	8011f50 <GetMaxAppPayloadWithoutFOptsLength>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8011fc8:	79fb      	ldrb	r3, [r7, #7]
 8011fca:	b29a      	uxth	r2, r3
 8011fcc:	797b      	ldrb	r3, [r7, #5]
 8011fce:	b29b      	uxth	r3, r3
 8011fd0:	4413      	add	r3, r2
 8011fd2:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8011fd4:	89ba      	ldrh	r2, [r7, #12]
 8011fd6:	89fb      	ldrh	r3, [r7, #14]
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d804      	bhi.n	8011fe6 <ValidatePayloadLength+0x46>
 8011fdc:	89bb      	ldrh	r3, [r7, #12]
 8011fde:	2bff      	cmp	r3, #255	; 0xff
 8011fe0:	d801      	bhi.n	8011fe6 <ValidatePayloadLength+0x46>
    {
        return true;
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	e000      	b.n	8011fe8 <ValidatePayloadLength+0x48>
    }
    return false;
 8011fe6:	2300      	movs	r3, #0
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3710      	adds	r7, #16
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}

08011ff0 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8011ff0:	b590      	push	{r4, r7, lr}
 8011ff2:	b0a5      	sub	sp, #148	; 0x94
 8011ff4:	af02      	add	r7, sp, #8
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	4608      	mov	r0, r1
 8011ffa:	4611      	mov	r1, r2
 8011ffc:	461a      	mov	r2, r3
 8011ffe:	4603      	mov	r3, r0
 8012000:	70fb      	strb	r3, [r7, #3]
 8012002:	460b      	mov	r3, r1
 8012004:	70bb      	strb	r3, [r7, #2]
 8012006:	4613      	mov	r3, r2
 8012008:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 801200a:	2300      	movs	r3, #0
 801200c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8012010:	2300      	movs	r3, #0
 8012012:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012016:	2300      	movs	r3, #0
 8012018:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 801201c:	f000 bc6d 	b.w	80128fa <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8012020:	78fb      	ldrb	r3, [r7, #3]
 8012022:	687a      	ldr	r2, [r7, #4]
 8012024:	4413      	add	r3, r2
 8012026:	781b      	ldrb	r3, [r3, #0]
 8012028:	4618      	mov	r0, r3
 801202a:	f003 fc8d 	bl	8015948 <LoRaMacCommandsGetCmdSize>
 801202e:	4603      	mov	r3, r0
 8012030:	461a      	mov	r2, r3
 8012032:	78fb      	ldrb	r3, [r7, #3]
 8012034:	441a      	add	r2, r3
 8012036:	78bb      	ldrb	r3, [r7, #2]
 8012038:	429a      	cmp	r2, r3
 801203a:	f300 8464 	bgt.w	8012906 <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 801203e:	78fb      	ldrb	r3, [r7, #3]
 8012040:	1c5a      	adds	r2, r3, #1
 8012042:	70fa      	strb	r2, [r7, #3]
 8012044:	461a      	mov	r2, r3
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	4413      	add	r3, r2
 801204a:	781b      	ldrb	r3, [r3, #0]
 801204c:	3b02      	subs	r3, #2
 801204e:	2b11      	cmp	r3, #17
 8012050:	f200 845b 	bhi.w	801290a <ProcessMacCommands+0x91a>
 8012054:	a201      	add	r2, pc, #4	; (adr r2, 801205c <ProcessMacCommands+0x6c>)
 8012056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801205a:	bf00      	nop
 801205c:	080120a5 	.word	0x080120a5
 8012060:	080120e7 	.word	0x080120e7
 8012064:	08012203 	.word	0x08012203
 8012068:	08012241 	.word	0x08012241
 801206c:	0801232d 	.word	0x0801232d
 8012070:	08012389 	.word	0x08012389
 8012074:	08012445 	.word	0x08012445
 8012078:	0801249b 	.word	0x0801249b
 801207c:	0801257f 	.word	0x0801257f
 8012080:	0801290b 	.word	0x0801290b
 8012084:	0801290b 	.word	0x0801290b
 8012088:	08012625 	.word	0x08012625
 801208c:	0801290b 	.word	0x0801290b
 8012090:	0801290b 	.word	0x0801290b
 8012094:	0801273b 	.word	0x0801273b
 8012098:	0801276f 	.word	0x0801276f
 801209c:	080127ff 	.word	0x080127ff
 80120a0:	08012875 	.word	0x08012875
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80120a4:	2004      	movs	r0, #4
 80120a6:	f003 fe27 	bl	8015cf8 <LoRaMacConfirmQueueIsCmdActive>
 80120aa:	4603      	mov	r3, r0
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	f000 8424 	beq.w	80128fa <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80120b2:	2104      	movs	r1, #4
 80120b4:	2000      	movs	r0, #0
 80120b6:	f003 fd93 	bl	8015be0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80120ba:	78fb      	ldrb	r3, [r7, #3]
 80120bc:	1c5a      	adds	r2, r3, #1
 80120be:	70fa      	strb	r2, [r7, #3]
 80120c0:	461a      	mov	r2, r3
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	4413      	add	r3, r2
 80120c6:	781a      	ldrb	r2, [r3, #0]
 80120c8:	4bac      	ldr	r3, [pc, #688]	; (801237c <ProcessMacCommands+0x38c>)
 80120ca:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80120ce:	78fb      	ldrb	r3, [r7, #3]
 80120d0:	1c5a      	adds	r2, r3, #1
 80120d2:	70fa      	strb	r2, [r7, #3]
 80120d4:	461a      	mov	r2, r3
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	4413      	add	r3, r2
 80120da:	781a      	ldrb	r2, [r3, #0]
 80120dc:	4ba7      	ldr	r3, [pc, #668]	; (801237c <ProcessMacCommands+0x38c>)
 80120de:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 80120e2:	f000 bc0a 	b.w	80128fa <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80120e6:	2300      	movs	r3, #0
 80120e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 80120ec:	2300      	movs	r3, #0
 80120ee:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 80120f2:	2300      	movs	r3, #0
 80120f4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 80120f8:	2300      	movs	r3, #0
 80120fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 80120fe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8012102:	f083 0301 	eor.w	r3, r3, #1
 8012106:	b2db      	uxtb	r3, r3
 8012108:	2b00      	cmp	r3, #0
 801210a:	d078      	beq.n	80121fe <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 801210c:	2301      	movs	r3, #1
 801210e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8012112:	78fb      	ldrb	r3, [r7, #3]
 8012114:	3b01      	subs	r3, #1
 8012116:	687a      	ldr	r2, [r7, #4]
 8012118:	4413      	add	r3, r2
 801211a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 801211c:	78ba      	ldrb	r2, [r7, #2]
 801211e:	78fb      	ldrb	r3, [r7, #3]
 8012120:	1ad3      	subs	r3, r2, r3
 8012122:	b2db      	uxtb	r3, r3
 8012124:	3301      	adds	r3, #1
 8012126:	b2db      	uxtb	r3, r3
 8012128:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801212c:	4b94      	ldr	r3, [pc, #592]	; (8012380 <ProcessMacCommands+0x390>)
 801212e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8012132:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012136:	4b92      	ldr	r3, [pc, #584]	; (8012380 <ProcessMacCommands+0x390>)
 8012138:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801213c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012140:	4b8f      	ldr	r3, [pc, #572]	; (8012380 <ProcessMacCommands+0x390>)
 8012142:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012146:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801214a:	4b8d      	ldr	r3, [pc, #564]	; (8012380 <ProcessMacCommands+0x390>)
 801214c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012150:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012154:	4b8a      	ldr	r3, [pc, #552]	; (8012380 <ProcessMacCommands+0x390>)
 8012156:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801215a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 801215e:	4b88      	ldr	r3, [pc, #544]	; (8012380 <ProcessMacCommands+0x390>)
 8012160:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8012164:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8012166:	4b86      	ldr	r3, [pc, #536]	; (8012380 <ProcessMacCommands+0x390>)
 8012168:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801216c:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8012170:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8012174:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012178:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801217c:	9301      	str	r3, [sp, #4]
 801217e:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8012182:	9300      	str	r3, [sp, #0]
 8012184:	4623      	mov	r3, r4
 8012186:	f005 f8f8 	bl	801737a <RegionLinkAdrReq>
 801218a:	4603      	mov	r3, r0
 801218c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8012190:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012194:	f003 0307 	and.w	r3, r3, #7
 8012198:	2b07      	cmp	r3, #7
 801219a:	d10e      	bne.n	80121ba <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 801219c:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 80121a0:	4b77      	ldr	r3, [pc, #476]	; (8012380 <ProcessMacCommands+0x390>)
 80121a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80121a6:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 80121aa:	4b75      	ldr	r3, [pc, #468]	; (8012380 <ProcessMacCommands+0x390>)
 80121ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80121b0:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80121b4:	4b72      	ldr	r3, [pc, #456]	; (8012380 <ProcessMacCommands+0x390>)
 80121b6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80121ba:	2300      	movs	r3, #0
 80121bc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80121c0:	e00b      	b.n	80121da <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80121c2:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80121c6:	2201      	movs	r2, #1
 80121c8:	4619      	mov	r1, r3
 80121ca:	2003      	movs	r0, #3
 80121cc:	f003 fa6c 	bl	80156a8 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80121d0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80121d4:	3301      	adds	r3, #1
 80121d6:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80121da:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80121de:	4a69      	ldr	r2, [pc, #420]	; (8012384 <ProcessMacCommands+0x394>)
 80121e0:	fba2 2303 	umull	r2, r3, r2, r3
 80121e4:	089b      	lsrs	r3, r3, #2
 80121e6:	b2db      	uxtb	r3, r3
 80121e8:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80121ec:	429a      	cmp	r2, r3
 80121ee:	d3e8      	bcc.n	80121c2 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 80121f0:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80121f4:	78fb      	ldrb	r3, [r7, #3]
 80121f6:	4413      	add	r3, r2
 80121f8:	b2db      	uxtb	r3, r3
 80121fa:	3b01      	subs	r3, #1
 80121fc:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80121fe:	bf00      	nop
 8012200:	e37b      	b.n	80128fa <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8012202:	78fb      	ldrb	r3, [r7, #3]
 8012204:	1c5a      	adds	r2, r3, #1
 8012206:	70fa      	strb	r2, [r7, #3]
 8012208:	461a      	mov	r2, r3
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	4413      	add	r3, r2
 801220e:	781b      	ldrb	r3, [r3, #0]
 8012210:	f003 030f 	and.w	r3, r3, #15
 8012214:	b2da      	uxtb	r2, r3
 8012216:	4b5a      	ldr	r3, [pc, #360]	; (8012380 <ProcessMacCommands+0x390>)
 8012218:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 801221c:	4b58      	ldr	r3, [pc, #352]	; (8012380 <ProcessMacCommands+0x390>)
 801221e:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8012222:	461a      	mov	r2, r3
 8012224:	2301      	movs	r3, #1
 8012226:	4093      	lsls	r3, r2
 8012228:	b29a      	uxth	r2, r3
 801222a:	4b55      	ldr	r3, [pc, #340]	; (8012380 <ProcessMacCommands+0x390>)
 801222c:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8012230:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012234:	2200      	movs	r2, #0
 8012236:	4619      	mov	r1, r3
 8012238:	2004      	movs	r0, #4
 801223a:	f003 fa35 	bl	80156a8 <LoRaMacCommandsAddCmd>
                break;
 801223e:	e35c      	b.n	80128fa <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8012240:	2307      	movs	r3, #7
 8012242:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8012246:	78fb      	ldrb	r3, [r7, #3]
 8012248:	687a      	ldr	r2, [r7, #4]
 801224a:	4413      	add	r3, r2
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	091b      	lsrs	r3, r3, #4
 8012250:	b2db      	uxtb	r3, r3
 8012252:	b25b      	sxtb	r3, r3
 8012254:	f003 0307 	and.w	r3, r3, #7
 8012258:	b25b      	sxtb	r3, r3
 801225a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801225e:	78fb      	ldrb	r3, [r7, #3]
 8012260:	687a      	ldr	r2, [r7, #4]
 8012262:	4413      	add	r3, r2
 8012264:	781b      	ldrb	r3, [r3, #0]
 8012266:	b25b      	sxtb	r3, r3
 8012268:	f003 030f 	and.w	r3, r3, #15
 801226c:	b25b      	sxtb	r3, r3
 801226e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 8012272:	78fb      	ldrb	r3, [r7, #3]
 8012274:	3301      	adds	r3, #1
 8012276:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8012278:	78fb      	ldrb	r3, [r7, #3]
 801227a:	1c5a      	adds	r2, r3, #1
 801227c:	70fa      	strb	r2, [r7, #3]
 801227e:	461a      	mov	r2, r3
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	4413      	add	r3, r2
 8012284:	781b      	ldrb	r3, [r3, #0]
 8012286:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012288:	78fb      	ldrb	r3, [r7, #3]
 801228a:	1c5a      	adds	r2, r3, #1
 801228c:	70fa      	strb	r2, [r7, #3]
 801228e:	461a      	mov	r2, r3
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	4413      	add	r3, r2
 8012294:	781b      	ldrb	r3, [r3, #0]
 8012296:	021a      	lsls	r2, r3, #8
 8012298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801229a:	4313      	orrs	r3, r2
 801229c:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801229e:	78fb      	ldrb	r3, [r7, #3]
 80122a0:	1c5a      	adds	r2, r3, #1
 80122a2:	70fa      	strb	r2, [r7, #3]
 80122a4:	461a      	mov	r2, r3
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	4413      	add	r3, r2
 80122aa:	781b      	ldrb	r3, [r3, #0]
 80122ac:	041a      	lsls	r2, r3, #16
 80122ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122b0:	4313      	orrs	r3, r2
 80122b2:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 80122b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122b6:	2264      	movs	r2, #100	; 0x64
 80122b8:	fb02 f303 	mul.w	r3, r2, r3
 80122bc:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80122be:	4b30      	ldr	r3, [pc, #192]	; (8012380 <ProcessMacCommands+0x390>)
 80122c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80122c4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80122c8:	4611      	mov	r1, r2
 80122ca:	4618      	mov	r0, r3
 80122cc:	f005 f86f 	bl	80173ae <RegionRxParamSetupReq>
 80122d0:	4603      	mov	r3, r0
 80122d2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 80122d6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80122da:	f003 0307 	and.w	r3, r3, #7
 80122de:	2b07      	cmp	r3, #7
 80122e0:	d117      	bne.n	8012312 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80122e2:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80122e6:	b2da      	uxtb	r2, r3
 80122e8:	4b25      	ldr	r3, [pc, #148]	; (8012380 <ProcessMacCommands+0x390>)
 80122ea:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80122ee:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80122f2:	b2da      	uxtb	r2, r3
 80122f4:	4b22      	ldr	r3, [pc, #136]	; (8012380 <ProcessMacCommands+0x390>)
 80122f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80122fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122fc:	4a20      	ldr	r2, [pc, #128]	; (8012380 <ProcessMacCommands+0x390>)
 80122fe:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8012300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012302:	4a1f      	ldr	r2, [pc, #124]	; (8012380 <ProcessMacCommands+0x390>)
 8012304:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8012306:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801230a:	b2da      	uxtb	r2, r3
 801230c:	4b1c      	ldr	r3, [pc, #112]	; (8012380 <ProcessMacCommands+0x390>)
 801230e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 8012312:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012316:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 801231a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801231e:	2201      	movs	r2, #1
 8012320:	4619      	mov	r1, r3
 8012322:	2005      	movs	r0, #5
 8012324:	f003 f9c0 	bl	80156a8 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 8012328:	bf00      	nop
 801232a:	e2e6      	b.n	80128fa <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 801232c:	23ff      	movs	r3, #255	; 0xff
 801232e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8012332:	4b12      	ldr	r3, [pc, #72]	; (801237c <ProcessMacCommands+0x38c>)
 8012334:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012338:	2b00      	cmp	r3, #0
 801233a:	d00d      	beq.n	8012358 <ProcessMacCommands+0x368>
 801233c:	4b0f      	ldr	r3, [pc, #60]	; (801237c <ProcessMacCommands+0x38c>)
 801233e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d007      	beq.n	8012358 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8012348:	4b0c      	ldr	r3, [pc, #48]	; (801237c <ProcessMacCommands+0x38c>)
 801234a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	4798      	blx	r3
 8012352:	4603      	mov	r3, r0
 8012354:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8012358:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 801235c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8012360:	787b      	ldrb	r3, [r7, #1]
 8012362:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012366:	b2db      	uxtb	r3, r3
 8012368:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 801236c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012370:	2202      	movs	r2, #2
 8012372:	4619      	mov	r1, r3
 8012374:	2006      	movs	r0, #6
 8012376:	f003 f997 	bl	80156a8 <LoRaMacCommandsAddCmd>
                break;
 801237a:	e2be      	b.n	80128fa <ProcessMacCommands+0x90a>
 801237c:	20000950 	.word	0x20000950
 8012380:	20000e5c 	.word	0x20000e5c
 8012384:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8012388:	2303      	movs	r3, #3
 801238a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 801238e:	78fb      	ldrb	r3, [r7, #3]
 8012390:	1c5a      	adds	r2, r3, #1
 8012392:	70fa      	strb	r2, [r7, #3]
 8012394:	461a      	mov	r2, r3
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	4413      	add	r3, r2
 801239a:	781b      	ldrb	r3, [r3, #0]
 801239c:	b25b      	sxtb	r3, r3
 801239e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 80123a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80123a6:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80123a8:	78fb      	ldrb	r3, [r7, #3]
 80123aa:	1c5a      	adds	r2, r3, #1
 80123ac:	70fa      	strb	r2, [r7, #3]
 80123ae:	461a      	mov	r2, r3
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	4413      	add	r3, r2
 80123b4:	781b      	ldrb	r3, [r3, #0]
 80123b6:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80123b8:	78fb      	ldrb	r3, [r7, #3]
 80123ba:	1c5a      	adds	r2, r3, #1
 80123bc:	70fa      	strb	r2, [r7, #3]
 80123be:	461a      	mov	r2, r3
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	4413      	add	r3, r2
 80123c4:	781b      	ldrb	r3, [r3, #0]
 80123c6:	021a      	lsls	r2, r3, #8
 80123c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ca:	4313      	orrs	r3, r2
 80123cc:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80123ce:	78fb      	ldrb	r3, [r7, #3]
 80123d0:	1c5a      	adds	r2, r3, #1
 80123d2:	70fa      	strb	r2, [r7, #3]
 80123d4:	461a      	mov	r2, r3
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	4413      	add	r3, r2
 80123da:	781b      	ldrb	r3, [r3, #0]
 80123dc:	041a      	lsls	r2, r3, #16
 80123de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e0:	4313      	orrs	r3, r2
 80123e2:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 80123e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e6:	2264      	movs	r2, #100	; 0x64
 80123e8:	fb02 f303 	mul.w	r3, r2, r3
 80123ec:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 80123ee:	2300      	movs	r3, #0
 80123f0:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80123f2:	78fb      	ldrb	r3, [r7, #3]
 80123f4:	1c5a      	adds	r2, r3, #1
 80123f6:	70fa      	strb	r2, [r7, #3]
 80123f8:	461a      	mov	r2, r3
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	4413      	add	r3, r2
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	b25b      	sxtb	r3, r3
 8012402:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8012406:	4b85      	ldr	r3, [pc, #532]	; (801261c <ProcessMacCommands+0x62c>)
 8012408:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801240c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012410:	4611      	mov	r1, r2
 8012412:	4618      	mov	r0, r3
 8012414:	f004 ffde 	bl	80173d4 <RegionNewChannelReq>
 8012418:	4603      	mov	r3, r0
 801241a:	b2db      	uxtb	r3, r3
 801241c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012420:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012424:	b25b      	sxtb	r3, r3
 8012426:	2b00      	cmp	r3, #0
 8012428:	db0a      	blt.n	8012440 <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 801242a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801242e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8012432:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012436:	2201      	movs	r2, #1
 8012438:	4619      	mov	r1, r3
 801243a:	2007      	movs	r0, #7
 801243c:	f003 f934 	bl	80156a8 <LoRaMacCommandsAddCmd>
                }
                break;
 8012440:	bf00      	nop
 8012442:	e25a      	b.n	80128fa <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8012444:	78fb      	ldrb	r3, [r7, #3]
 8012446:	1c5a      	adds	r2, r3, #1
 8012448:	70fa      	strb	r2, [r7, #3]
 801244a:	461a      	mov	r2, r3
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	4413      	add	r3, r2
 8012450:	781b      	ldrb	r3, [r3, #0]
 8012452:	f003 030f 	and.w	r3, r3, #15
 8012456:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 801245a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801245e:	2b00      	cmp	r3, #0
 8012460:	d104      	bne.n	801246c <ProcessMacCommands+0x47c>
                {
                    delay++;
 8012462:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012466:	3301      	adds	r3, #1
 8012468:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 801246c:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012470:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012474:	fb02 f303 	mul.w	r3, r2, r3
 8012478:	461a      	mov	r2, r3
 801247a:	4b68      	ldr	r3, [pc, #416]	; (801261c <ProcessMacCommands+0x62c>)
 801247c:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801247e:	4b67      	ldr	r3, [pc, #412]	; (801261c <ProcessMacCommands+0x62c>)
 8012480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012482:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8012486:	4a65      	ldr	r2, [pc, #404]	; (801261c <ProcessMacCommands+0x62c>)
 8012488:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 801248a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801248e:	2200      	movs	r2, #0
 8012490:	4619      	mov	r1, r3
 8012492:	2008      	movs	r0, #8
 8012494:	f003 f908 	bl	80156a8 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 8012498:	e22f      	b.n	80128fa <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801249a:	78fb      	ldrb	r3, [r7, #3]
 801249c:	1c5a      	adds	r2, r3, #1
 801249e:	70fa      	strb	r2, [r7, #3]
 80124a0:	461a      	mov	r2, r3
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	4413      	add	r3, r2
 80124a6:	781b      	ldrb	r3, [r3, #0]
 80124a8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 80124ac:	2300      	movs	r3, #0
 80124ae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 80124b2:	2300      	movs	r3, #0
 80124b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80124b8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80124bc:	f003 0320 	and.w	r3, r3, #32
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d002      	beq.n	80124ca <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80124c4:	2301      	movs	r3, #1
 80124c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80124ca:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80124ce:	f003 0310 	and.w	r3, r3, #16
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d002      	beq.n	80124dc <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80124d6:	2301      	movs	r3, #1
 80124d8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80124dc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80124e0:	f003 030f 	and.w	r3, r3, #15
 80124e4:	b2db      	uxtb	r3, r3
 80124e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80124ea:	4b4c      	ldr	r3, [pc, #304]	; (801261c <ProcessMacCommands+0x62c>)
 80124ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80124f0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80124f4:	4611      	mov	r1, r2
 80124f6:	4618      	mov	r0, r3
 80124f8:	f004 ff7f 	bl	80173fa <RegionTxParamSetupReq>
 80124fc:	4603      	mov	r3, r0
 80124fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012502:	d03a      	beq.n	801257a <ProcessMacCommands+0x58a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8012504:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8012508:	4b44      	ldr	r3, [pc, #272]	; (801261c <ProcessMacCommands+0x62c>)
 801250a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 801250e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8012512:	4b42      	ldr	r3, [pc, #264]	; (801261c <ProcessMacCommands+0x62c>)
 8012514:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8012518:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801251c:	461a      	mov	r2, r3
 801251e:	4b40      	ldr	r3, [pc, #256]	; (8012620 <ProcessMacCommands+0x630>)
 8012520:	5c9b      	ldrb	r3, [r3, r2]
 8012522:	4618      	mov	r0, r3
 8012524:	f7ee fbb4 	bl	8000c90 <__aeabi_ui2f>
 8012528:	4603      	mov	r3, r0
 801252a:	4a3c      	ldr	r2, [pc, #240]	; (801261c <ProcessMacCommands+0x62c>)
 801252c:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 801252e:	2302      	movs	r3, #2
 8012530:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012534:	4b39      	ldr	r3, [pc, #228]	; (801261c <ProcessMacCommands+0x62c>)
 8012536:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801253a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801253e:	4b37      	ldr	r3, [pc, #220]	; (801261c <ProcessMacCommands+0x62c>)
 8012540:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012544:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012548:	4611      	mov	r1, r2
 801254a:	4618      	mov	r0, r3
 801254c:	f004 fe58 	bl	8017200 <RegionGetPhyParam>
 8012550:	4603      	mov	r3, r0
 8012552:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8012554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012556:	b25a      	sxtb	r2, r3
 8012558:	4b30      	ldr	r3, [pc, #192]	; (801261c <ProcessMacCommands+0x62c>)
 801255a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801255e:	4293      	cmp	r3, r2
 8012560:	bfb8      	it	lt
 8012562:	4613      	movlt	r3, r2
 8012564:	b25a      	sxtb	r2, r3
 8012566:	4b2d      	ldr	r3, [pc, #180]	; (801261c <ProcessMacCommands+0x62c>)
 8012568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 801256c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012570:	2200      	movs	r2, #0
 8012572:	4619      	mov	r1, r3
 8012574:	2009      	movs	r0, #9
 8012576:	f003 f897 	bl	80156a8 <LoRaMacCommandsAddCmd>
                }
                break;
 801257a:	bf00      	nop
 801257c:	e1bd      	b.n	80128fa <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 801257e:	2303      	movs	r3, #3
 8012580:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8012584:	78fb      	ldrb	r3, [r7, #3]
 8012586:	1c5a      	adds	r2, r3, #1
 8012588:	70fa      	strb	r2, [r7, #3]
 801258a:	461a      	mov	r2, r3
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	4413      	add	r3, r2
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8012596:	78fb      	ldrb	r3, [r7, #3]
 8012598:	1c5a      	adds	r2, r3, #1
 801259a:	70fa      	strb	r2, [r7, #3]
 801259c:	461a      	mov	r2, r3
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	4413      	add	r3, r2
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80125a6:	78fb      	ldrb	r3, [r7, #3]
 80125a8:	1c5a      	adds	r2, r3, #1
 80125aa:	70fa      	strb	r2, [r7, #3]
 80125ac:	461a      	mov	r2, r3
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	4413      	add	r3, r2
 80125b2:	781b      	ldrb	r3, [r3, #0]
 80125b4:	021a      	lsls	r2, r3, #8
 80125b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125b8:	4313      	orrs	r3, r2
 80125ba:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80125bc:	78fb      	ldrb	r3, [r7, #3]
 80125be:	1c5a      	adds	r2, r3, #1
 80125c0:	70fa      	strb	r2, [r7, #3]
 80125c2:	461a      	mov	r2, r3
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	4413      	add	r3, r2
 80125c8:	781b      	ldrb	r3, [r3, #0]
 80125ca:	041a      	lsls	r2, r3, #16
 80125cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ce:	4313      	orrs	r3, r2
 80125d0:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 80125d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d4:	2264      	movs	r2, #100	; 0x64
 80125d6:	fb02 f303 	mul.w	r3, r2, r3
 80125da:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80125dc:	4b0f      	ldr	r3, [pc, #60]	; (801261c <ProcessMacCommands+0x62c>)
 80125de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80125e2:	f107 0220 	add.w	r2, r7, #32
 80125e6:	4611      	mov	r1, r2
 80125e8:	4618      	mov	r0, r3
 80125ea:	f004 ff19 	bl	8017420 <RegionDlChannelReq>
 80125ee:	4603      	mov	r3, r0
 80125f0:	b2db      	uxtb	r3, r3
 80125f2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80125f6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80125fa:	b25b      	sxtb	r3, r3
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	db0a      	blt.n	8012616 <ProcessMacCommands+0x626>
                {
                    macCmdPayload[0] = status;
 8012600:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012604:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8012608:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801260c:	2201      	movs	r2, #1
 801260e:	4619      	mov	r1, r3
 8012610:	200a      	movs	r0, #10
 8012612:	f003 f849 	bl	80156a8 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 8012616:	bf00      	nop
 8012618:	e16f      	b.n	80128fa <ProcessMacCommands+0x90a>
 801261a:	bf00      	nop
 801261c:	20000e5c 	.word	0x20000e5c
 8012620:	0801f32c 	.word	0x0801f32c
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8012624:	200a      	movs	r0, #10
 8012626:	f003 fb67 	bl	8015cf8 <LoRaMacConfirmQueueIsCmdActive>
 801262a:	4603      	mov	r3, r0
 801262c:	2b00      	cmp	r3, #0
 801262e:	f000 8164 	beq.w	80128fa <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8012632:	210a      	movs	r1, #10
 8012634:	2000      	movs	r0, #0
 8012636:	f003 fad3 	bl	8015be0 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 801263a:	f107 0318 	add.w	r3, r7, #24
 801263e:	2200      	movs	r2, #0
 8012640:	601a      	str	r2, [r3, #0]
 8012642:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8012644:	f107 0310 	add.w	r3, r7, #16
 8012648:	2200      	movs	r2, #0
 801264a:	601a      	str	r2, [r3, #0]
 801264c:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 801264e:	f107 0308 	add.w	r3, r7, #8
 8012652:	2200      	movs	r2, #0
 8012654:	601a      	str	r2, [r3, #0]
 8012656:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8012658:	78fb      	ldrb	r3, [r7, #3]
 801265a:	1c5a      	adds	r2, r3, #1
 801265c:	70fa      	strb	r2, [r7, #3]
 801265e:	461a      	mov	r2, r3
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	4413      	add	r3, r2
 8012664:	781b      	ldrb	r3, [r3, #0]
 8012666:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8012668:	78fb      	ldrb	r3, [r7, #3]
 801266a:	1c5a      	adds	r2, r3, #1
 801266c:	70fa      	strb	r2, [r7, #3]
 801266e:	461a      	mov	r2, r3
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	4413      	add	r3, r2
 8012674:	781b      	ldrb	r3, [r3, #0]
 8012676:	021a      	lsls	r2, r3, #8
 8012678:	69bb      	ldr	r3, [r7, #24]
 801267a:	4313      	orrs	r3, r2
 801267c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 801267e:	78fb      	ldrb	r3, [r7, #3]
 8012680:	1c5a      	adds	r2, r3, #1
 8012682:	70fa      	strb	r2, [r7, #3]
 8012684:	461a      	mov	r2, r3
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	4413      	add	r3, r2
 801268a:	781b      	ldrb	r3, [r3, #0]
 801268c:	041a      	lsls	r2, r3, #16
 801268e:	69bb      	ldr	r3, [r7, #24]
 8012690:	4313      	orrs	r3, r2
 8012692:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8012694:	78fb      	ldrb	r3, [r7, #3]
 8012696:	1c5a      	adds	r2, r3, #1
 8012698:	70fa      	strb	r2, [r7, #3]
 801269a:	461a      	mov	r2, r3
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	4413      	add	r3, r2
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	061a      	lsls	r2, r3, #24
 80126a4:	69bb      	ldr	r3, [r7, #24]
 80126a6:	4313      	orrs	r3, r2
 80126a8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80126aa:	78fb      	ldrb	r3, [r7, #3]
 80126ac:	1c5a      	adds	r2, r3, #1
 80126ae:	70fa      	strb	r2, [r7, #3]
 80126b0:	461a      	mov	r2, r3
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	4413      	add	r3, r2
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	b21b      	sxth	r3, r3
 80126ba:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80126bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80126c0:	461a      	mov	r2, r3
 80126c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80126c6:	fb02 f303 	mul.w	r3, r2, r3
 80126ca:	121b      	asrs	r3, r3, #8
 80126cc:	b21b      	sxth	r3, r3
 80126ce:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80126d0:	f107 0310 	add.w	r3, r7, #16
 80126d4:	f107 0218 	add.w	r2, r7, #24
 80126d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80126dc:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80126e0:	693a      	ldr	r2, [r7, #16]
 80126e2:	4b8c      	ldr	r3, [pc, #560]	; (8012914 <ProcessMacCommands+0x924>)
 80126e4:	4413      	add	r3, r2
 80126e6:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80126e8:	f107 0308 	add.w	r3, r7, #8
 80126ec:	4618      	mov	r0, r3
 80126ee:	f00a fc7b 	bl	801cfe8 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80126f2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80126f6:	4b88      	ldr	r3, [pc, #544]	; (8012918 <ProcessMacCommands+0x928>)
 80126f8:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 80126fc:	9200      	str	r2, [sp, #0]
 80126fe:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8012702:	f107 0210 	add.w	r2, r7, #16
 8012706:	ca06      	ldmia	r2, {r1, r2}
 8012708:	f00a fc07 	bl	801cf1a <SysTimeSub>
 801270c:	f107 0010 	add.w	r0, r7, #16
 8012710:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012712:	9300      	str	r3, [sp, #0]
 8012714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012716:	f107 0208 	add.w	r2, r7, #8
 801271a:	ca06      	ldmia	r2, {r1, r2}
 801271c:	f00a fbc4 	bl	801cea8 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8012720:	f107 0310 	add.w	r3, r7, #16
 8012724:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012728:	f00a fc30 	bl	801cf8c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 801272c:	f002 fe81 	bl	8015432 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8012730:	4b79      	ldr	r3, [pc, #484]	; (8012918 <ProcessMacCommands+0x928>)
 8012732:	2201      	movs	r2, #1
 8012734:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8012738:	e0df      	b.n	80128fa <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 801273a:	200d      	movs	r0, #13
 801273c:	f003 fadc 	bl	8015cf8 <LoRaMacConfirmQueueIsCmdActive>
 8012740:	4603      	mov	r3, r0
 8012742:	2b00      	cmp	r3, #0
 8012744:	f000 80d9 	beq.w	80128fa <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8012748:	210d      	movs	r1, #13
 801274a:	2000      	movs	r0, #0
 801274c:	f003 fa48 	bl	8015be0 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8012750:	4b71      	ldr	r3, [pc, #452]	; (8012918 <ProcessMacCommands+0x928>)
 8012752:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8012756:	2b04      	cmp	r3, #4
 8012758:	f000 80cf 	beq.w	80128fa <ProcessMacCommands+0x90a>
 801275c:	4b6e      	ldr	r3, [pc, #440]	; (8012918 <ProcessMacCommands+0x928>)
 801275e:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8012762:	2b05      	cmp	r3, #5
 8012764:	f000 80c9 	beq.w	80128fa <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8012768:	f002 fe44 	bl	80153f4 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 801276c:	e0c5      	b.n	80128fa <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 801276e:	2303      	movs	r3, #3
 8012770:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8012774:	2300      	movs	r3, #0
 8012776:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8012778:	78fb      	ldrb	r3, [r7, #3]
 801277a:	1c5a      	adds	r2, r3, #1
 801277c:	70fa      	strb	r2, [r7, #3]
 801277e:	461a      	mov	r2, r3
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	4413      	add	r3, r2
 8012784:	781b      	ldrb	r3, [r3, #0]
 8012786:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012788:	78fb      	ldrb	r3, [r7, #3]
 801278a:	1c5a      	adds	r2, r3, #1
 801278c:	70fa      	strb	r2, [r7, #3]
 801278e:	461a      	mov	r2, r3
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	4413      	add	r3, r2
 8012794:	781b      	ldrb	r3, [r3, #0]
 8012796:	021b      	lsls	r3, r3, #8
 8012798:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801279a:	4313      	orrs	r3, r2
 801279c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 801279e:	78fb      	ldrb	r3, [r7, #3]
 80127a0:	1c5a      	adds	r2, r3, #1
 80127a2:	70fa      	strb	r2, [r7, #3]
 80127a4:	461a      	mov	r2, r3
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	4413      	add	r3, r2
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	041b      	lsls	r3, r3, #16
 80127ae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80127b0:	4313      	orrs	r3, r2
 80127b2:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 80127b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80127b6:	2264      	movs	r2, #100	; 0x64
 80127b8:	fb02 f303 	mul.w	r3, r2, r3
 80127bc:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 80127be:	78fb      	ldrb	r3, [r7, #3]
 80127c0:	1c5a      	adds	r2, r3, #1
 80127c2:	70fa      	strb	r2, [r7, #3]
 80127c4:	461a      	mov	r2, r3
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	4413      	add	r3, r2
 80127ca:	781b      	ldrb	r3, [r3, #0]
 80127cc:	f003 030f 	and.w	r3, r3, #15
 80127d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80127d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80127d8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80127da:	4618      	mov	r0, r3
 80127dc:	f002 fe10 	bl	8015400 <LoRaMacClassBPingSlotChannelReq>
 80127e0:	4603      	mov	r3, r0
 80127e2:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 80127e6:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80127ea:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 80127ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80127f2:	2201      	movs	r2, #1
 80127f4:	4619      	mov	r1, r3
 80127f6:	2011      	movs	r0, #17
 80127f8:	f002 ff56 	bl	80156a8 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 80127fc:	e07d      	b.n	80128fa <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80127fe:	200e      	movs	r0, #14
 8012800:	f003 fa7a 	bl	8015cf8 <LoRaMacConfirmQueueIsCmdActive>
 8012804:	4603      	mov	r3, r0
 8012806:	2b00      	cmp	r3, #0
 8012808:	d077      	beq.n	80128fa <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 801280a:	210e      	movs	r1, #14
 801280c:	2000      	movs	r0, #0
 801280e:	f003 f9e7 	bl	8015be0 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8012812:	2300      	movs	r3, #0
 8012814:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8012818:	2300      	movs	r3, #0
 801281a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 801281e:	78fb      	ldrb	r3, [r7, #3]
 8012820:	1c5a      	adds	r2, r3, #1
 8012822:	70fa      	strb	r2, [r7, #3]
 8012824:	461a      	mov	r2, r3
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	4413      	add	r3, r2
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8012830:	78fb      	ldrb	r3, [r7, #3]
 8012832:	1c5a      	adds	r2, r3, #1
 8012834:	70fa      	strb	r2, [r7, #3]
 8012836:	461a      	mov	r2, r3
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	4413      	add	r3, r2
 801283c:	781b      	ldrb	r3, [r3, #0]
 801283e:	021b      	lsls	r3, r3, #8
 8012840:	b21a      	sxth	r2, r3
 8012842:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8012846:	4313      	orrs	r3, r2
 8012848:	b21b      	sxth	r3, r3
 801284a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 801284e:	78fb      	ldrb	r3, [r7, #3]
 8012850:	1c5a      	adds	r2, r3, #1
 8012852:	70fa      	strb	r2, [r7, #3]
 8012854:	461a      	mov	r2, r3
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	4413      	add	r3, r2
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8012860:	4b2e      	ldr	r3, [pc, #184]	; (801291c <ProcessMacCommands+0x92c>)
 8012862:	681a      	ldr	r2, [r3, #0]
 8012864:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8012868:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 801286c:	4618      	mov	r0, r3
 801286e:	f002 fdd3 	bl	8015418 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8012872:	e042      	b.n	80128fa <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8012874:	2300      	movs	r3, #0
 8012876:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 801287a:	78fb      	ldrb	r3, [r7, #3]
 801287c:	1c5a      	adds	r2, r3, #1
 801287e:	70fa      	strb	r2, [r7, #3]
 8012880:	461a      	mov	r2, r3
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	4413      	add	r3, r2
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 801288c:	78fb      	ldrb	r3, [r7, #3]
 801288e:	1c5a      	adds	r2, r3, #1
 8012890:	70fa      	strb	r2, [r7, #3]
 8012892:	461a      	mov	r2, r3
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	4413      	add	r3, r2
 8012898:	781b      	ldrb	r3, [r3, #0]
 801289a:	021b      	lsls	r3, r3, #8
 801289c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80128a0:	4313      	orrs	r3, r2
 80128a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80128a6:	78fb      	ldrb	r3, [r7, #3]
 80128a8:	1c5a      	adds	r2, r3, #1
 80128aa:	70fa      	strb	r2, [r7, #3]
 80128ac:	461a      	mov	r2, r3
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	4413      	add	r3, r2
 80128b2:	781b      	ldrb	r3, [r3, #0]
 80128b4:	041b      	lsls	r3, r3, #16
 80128b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80128ba:	4313      	orrs	r3, r2
 80128bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 80128c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80128c4:	2264      	movs	r2, #100	; 0x64
 80128c6:	fb02 f303 	mul.w	r3, r2, r3
 80128ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80128ce:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80128d2:	f002 fdb4 	bl	801543e <LoRaMacClassBBeaconFreqReq>
 80128d6:	4603      	mov	r3, r0
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d003      	beq.n	80128e4 <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 80128dc:	2301      	movs	r3, #1
 80128de:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 80128e2:	e002      	b.n	80128ea <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80128e4:	2300      	movs	r3, #0
 80128e6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80128ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80128ee:	2201      	movs	r2, #1
 80128f0:	4619      	mov	r1, r3
 80128f2:	2013      	movs	r0, #19
 80128f4:	f002 fed8 	bl	80156a8 <LoRaMacCommandsAddCmd>
                }
                break;
 80128f8:	bf00      	nop
    while( macIndex < commandsSize )
 80128fa:	78fa      	ldrb	r2, [r7, #3]
 80128fc:	78bb      	ldrb	r3, [r7, #2]
 80128fe:	429a      	cmp	r2, r3
 8012900:	f4ff ab8e 	bcc.w	8012020 <ProcessMacCommands+0x30>
 8012904:	e002      	b.n	801290c <ProcessMacCommands+0x91c>
            return;
 8012906:	bf00      	nop
 8012908:	e000      	b.n	801290c <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 801290a:	bf00      	nop
        }
    }
}
 801290c:	378c      	adds	r7, #140	; 0x8c
 801290e:	46bd      	mov	sp, r7
 8012910:	bd90      	pop	{r4, r7, pc}
 8012912:	bf00      	nop
 8012914:	12d53d80 	.word	0x12d53d80
 8012918:	20000950 	.word	0x20000950
 801291c:	20001cb4 	.word	0x20001cb4

08012920 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b08e      	sub	sp, #56	; 0x38
 8012924:	af02      	add	r7, sp, #8
 8012926:	60f8      	str	r0, [r7, #12]
 8012928:	607a      	str	r2, [r7, #4]
 801292a:	461a      	mov	r2, r3
 801292c:	460b      	mov	r3, r1
 801292e:	72fb      	strb	r3, [r7, #11]
 8012930:	4613      	mov	r3, r2
 8012932:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012934:	2303      	movs	r3, #3
 8012936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 801293a:	4b65      	ldr	r3, [pc, #404]	; (8012ad0 <Send+0x1b0>)
 801293c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012940:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8012944:	4b62      	ldr	r3, [pc, #392]	; (8012ad0 <Send+0x1b0>)
 8012946:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801294a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801294e:	4b60      	ldr	r3, [pc, #384]	; (8012ad0 <Send+0x1b0>)
 8012950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012952:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012954:	4b5e      	ldr	r3, [pc, #376]	; (8012ad0 <Send+0x1b0>)
 8012956:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801295a:	2b00      	cmp	r3, #0
 801295c:	d101      	bne.n	8012962 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801295e:	2307      	movs	r3, #7
 8012960:	e0b1      	b.n	8012ac6 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8012962:	4b5b      	ldr	r3, [pc, #364]	; (8012ad0 <Send+0x1b0>)
 8012964:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8012968:	2b00      	cmp	r3, #0
 801296a:	d102      	bne.n	8012972 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 801296c:	4b58      	ldr	r3, [pc, #352]	; (8012ad0 <Send+0x1b0>)
 801296e:	2200      	movs	r2, #0
 8012970:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8012972:	2300      	movs	r3, #0
 8012974:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8012978:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801297c:	f36f 0303 	bfc	r3, #0, #4
 8012980:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8012984:	4b52      	ldr	r3, [pc, #328]	; (8012ad0 <Send+0x1b0>)
 8012986:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 801298a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801298e:	f362 13c7 	bfi	r3, r2, #7, #1
 8012992:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012996:	4b4e      	ldr	r3, [pc, #312]	; (8012ad0 <Send+0x1b0>)
 8012998:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801299c:	2b01      	cmp	r3, #1
 801299e:	d106      	bne.n	80129ae <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 80129a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80129a4:	f043 0310 	orr.w	r3, r3, #16
 80129a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80129ac:	e005      	b.n	80129ba <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 80129ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80129b2:	f36f 1304 	bfc	r3, #4, #1
 80129b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80129ba:	4b45      	ldr	r3, [pc, #276]	; (8012ad0 <Send+0x1b0>)
 80129bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d005      	beq.n	80129d0 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 80129c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80129c8:	f043 0320 	orr.w	r3, r3, #32
 80129cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 80129d0:	4b3f      	ldr	r3, [pc, #252]	; (8012ad0 <Send+0x1b0>)
 80129d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80129d6:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 80129d8:	2301      	movs	r3, #1
 80129da:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80129dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80129e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80129e4:	b2db      	uxtb	r3, r3
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	bf14      	ite	ne
 80129ea:	2301      	movne	r3, #1
 80129ec:	2300      	moveq	r3, #0
 80129ee:	b2db      	uxtb	r3, r3
 80129f0:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80129f2:	4b37      	ldr	r3, [pc, #220]	; (8012ad0 <Send+0x1b0>)
 80129f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129f6:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80129f8:	4b36      	ldr	r3, [pc, #216]	; (8012ad4 <Send+0x1b4>)
 80129fa:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 80129fe:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8012a00:	4b34      	ldr	r3, [pc, #208]	; (8012ad4 <Send+0x1b4>)
 8012a02:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8012a06:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012a08:	4b31      	ldr	r3, [pc, #196]	; (8012ad0 <Send+0x1b0>)
 8012a0a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012a0e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012a12:	4b2f      	ldr	r3, [pc, #188]	; (8012ad0 <Send+0x1b0>)
 8012a14:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012a18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012a1c:	4b2c      	ldr	r3, [pc, #176]	; (8012ad0 <Send+0x1b0>)
 8012a1e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012a22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8012a26:	4b2a      	ldr	r3, [pc, #168]	; (8012ad0 <Send+0x1b0>)
 8012a28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8012a30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012a34:	f107 0014 	add.w	r0, r7, #20
 8012a38:	4a27      	ldr	r2, [pc, #156]	; (8012ad8 <Send+0x1b8>)
 8012a3a:	4928      	ldr	r1, [pc, #160]	; (8012adc <Send+0x1bc>)
 8012a3c:	f002 fc1a 	bl	8015274 <LoRaMacAdrCalcNext>
 8012a40:	4603      	mov	r3, r0
 8012a42:	461a      	mov	r2, r3
 8012a44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012a48:	f362 1386 	bfi	r3, r2, #6, #1
 8012a4c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8012a50:	7afa      	ldrb	r2, [r7, #11]
 8012a52:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8012a56:	893b      	ldrh	r3, [r7, #8]
 8012a58:	9300      	str	r3, [sp, #0]
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	68f8      	ldr	r0, [r7, #12]
 8012a5e:	f000 fc2d 	bl	80132bc <PrepareFrame>
 8012a62:	4603      	mov	r3, r0
 8012a64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8012a68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d003      	beq.n	8012a78 <Send+0x158>
 8012a70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a74:	2b0a      	cmp	r3, #10
 8012a76:	d107      	bne.n	8012a88 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8012a78:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f000 f96d 	bl	8012d5c <ScheduleTx>
 8012a82:	4603      	mov	r3, r0
 8012a84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8012a88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d00a      	beq.n	8012aa6 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8012a90:	4a0f      	ldr	r2, [pc, #60]	; (8012ad0 <Send+0x1b0>)
 8012a92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012a96:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8012a9a:	4a0d      	ldr	r2, [pc, #52]	; (8012ad0 <Send+0x1b0>)
 8012a9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012aa0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8012aa4:	e00d      	b.n	8012ac2 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8012aa6:	4b0a      	ldr	r3, [pc, #40]	; (8012ad0 <Send+0x1b0>)
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8012aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ab0:	4a07      	ldr	r2, [pc, #28]	; (8012ad0 <Send+0x1b0>)
 8012ab2:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8012ab4:	f002 fe70 	bl	8015798 <LoRaMacCommandsRemoveNoneStickyCmds>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d001      	beq.n	8012ac2 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012abe:	2313      	movs	r3, #19
 8012ac0:	e001      	b.n	8012ac6 <Send+0x1a6>
        }
    }
    return status;
 8012ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	3730      	adds	r7, #48	; 0x30
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}
 8012ace:	bf00      	nop
 8012ad0:	20000e5c 	.word	0x20000e5c
 8012ad4:	20000950 	.word	0x20000950
 8012ad8:	20000e94 	.word	0x20000e94
 8012adc:	20000e95 	.word	0x20000e95

08012ae0 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b084      	sub	sp, #16
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012aea:	2300      	movs	r3, #0
 8012aec:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8012aee:	2300      	movs	r3, #0
 8012af0:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8012af2:	2301      	movs	r3, #1
 8012af4:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8012af6:	79fb      	ldrb	r3, [r7, #7]
 8012af8:	2bff      	cmp	r3, #255	; 0xff
 8012afa:	d129      	bne.n	8012b50 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8012afc:	2000      	movs	r0, #0
 8012afe:	f7ff f957 	bl	8011db0 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8012b02:	4b1a      	ldr	r3, [pc, #104]	; (8012b6c <SendReJoinReq+0x8c>)
 8012b04:	2200      	movs	r2, #0
 8012b06:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8012b0a:	4b18      	ldr	r3, [pc, #96]	; (8012b6c <SendReJoinReq+0x8c>)
 8012b0c:	4a18      	ldr	r2, [pc, #96]	; (8012b70 <SendReJoinReq+0x90>)
 8012b0e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012b12:	4b16      	ldr	r3, [pc, #88]	; (8012b6c <SendReJoinReq+0x8c>)
 8012b14:	22ff      	movs	r2, #255	; 0xff
 8012b16:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8012b1a:	7b3b      	ldrb	r3, [r7, #12]
 8012b1c:	f36f 1347 	bfc	r3, #5, #3
 8012b20:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8012b22:	7b3a      	ldrb	r2, [r7, #12]
 8012b24:	4b11      	ldr	r3, [pc, #68]	; (8012b6c <SendReJoinReq+0x8c>)
 8012b26:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8012b2a:	f7fc fb79 	bl	800f220 <SecureElementGetJoinEui>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	2208      	movs	r2, #8
 8012b32:	4619      	mov	r1, r3
 8012b34:	480f      	ldr	r0, [pc, #60]	; (8012b74 <SendReJoinReq+0x94>)
 8012b36:	f006 fe76 	bl	8019826 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8012b3a:	f7fc fb4f 	bl	800f1dc <SecureElementGetDevEui>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	2208      	movs	r2, #8
 8012b42:	4619      	mov	r1, r3
 8012b44:	480c      	ldr	r0, [pc, #48]	; (8012b78 <SendReJoinReq+0x98>)
 8012b46:	f006 fe6e 	bl	8019826 <memcpy1>

            allowDelayedTx = false;
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	73fb      	strb	r3, [r7, #15]

            break;
 8012b4e:	e002      	b.n	8012b56 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012b50:	2302      	movs	r3, #2
 8012b52:	73bb      	strb	r3, [r7, #14]
            break;
 8012b54:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8012b56:	7bfb      	ldrb	r3, [r7, #15]
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f000 f8ff 	bl	8012d5c <ScheduleTx>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	73bb      	strb	r3, [r7, #14]
    return status;
 8012b62:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b64:	4618      	mov	r0, r3
 8012b66:	3710      	adds	r7, #16
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bd80      	pop	{r7, pc}
 8012b6c:	20000950 	.word	0x20000950
 8012b70:	20000952 	.word	0x20000952
 8012b74:	20000a5e 	.word	0x20000a5e
 8012b78:	20000a66 	.word	0x20000a66

08012b7c <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8012b80:	f002 fbe7 	bl	8015352 <LoRaMacClassBIsBeaconExpected>
 8012b84:	4603      	mov	r3, r0
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d001      	beq.n	8012b8e <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8012b8a:	230e      	movs	r3, #14
 8012b8c:	e013      	b.n	8012bb6 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012b8e:	4b0b      	ldr	r3, [pc, #44]	; (8012bbc <CheckForClassBCollision+0x40>)
 8012b90:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012b94:	2b01      	cmp	r3, #1
 8012b96:	d10d      	bne.n	8012bb4 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8012b98:	f002 fbe2 	bl	8015360 <LoRaMacClassBIsPingExpected>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d001      	beq.n	8012ba6 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012ba2:	230f      	movs	r3, #15
 8012ba4:	e007      	b.n	8012bb6 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8012ba6:	f002 fbe2 	bl	801536e <LoRaMacClassBIsMulticastExpected>
 8012baa:	4603      	mov	r3, r0
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d001      	beq.n	8012bb4 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012bb0:	230f      	movs	r3, #15
 8012bb2:	e000      	b.n	8012bb6 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8012bb4:	2300      	movs	r3, #0
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	bd80      	pop	{r7, pc}
 8012bba:	bf00      	nop
 8012bbc:	20000e5c 	.word	0x20000e5c

08012bc0 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8012bc0:	b590      	push	{r4, r7, lr}
 8012bc2:	b083      	sub	sp, #12
 8012bc4:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012bc6:	4b2d      	ldr	r3, [pc, #180]	; (8012c7c <ComputeRxWindowParameters+0xbc>)
 8012bc8:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8012bcc:	4b2b      	ldr	r3, [pc, #172]	; (8012c7c <ComputeRxWindowParameters+0xbc>)
 8012bce:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012bd2:	4b2a      	ldr	r3, [pc, #168]	; (8012c7c <ComputeRxWindowParameters+0xbc>)
 8012bd4:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 8012bd8:	4b28      	ldr	r3, [pc, #160]	; (8012c7c <ComputeRxWindowParameters+0xbc>)
 8012bda:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8012bde:	4b27      	ldr	r3, [pc, #156]	; (8012c7c <ComputeRxWindowParameters+0xbc>)
 8012be0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8012be4:	b25b      	sxtb	r3, r3
 8012be6:	f004 fc72 	bl	80174ce <RegionApplyDrOffset>
 8012bea:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012bec:	b259      	sxtb	r1, r3
 8012bee:	4b23      	ldr	r3, [pc, #140]	; (8012c7c <ComputeRxWindowParameters+0xbc>)
 8012bf0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012bf4:	4b21      	ldr	r3, [pc, #132]	; (8012c7c <ComputeRxWindowParameters+0xbc>)
 8012bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bf8:	4821      	ldr	r0, [pc, #132]	; (8012c80 <ComputeRxWindowParameters+0xc0>)
 8012bfa:	9000      	str	r0, [sp, #0]
 8012bfc:	4620      	mov	r0, r4
 8012bfe:	f004 fb76 	bl	80172ee <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012c02:	4b1e      	ldr	r3, [pc, #120]	; (8012c7c <ComputeRxWindowParameters+0xbc>)
 8012c04:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8012c08:	4b1c      	ldr	r3, [pc, #112]	; (8012c7c <ComputeRxWindowParameters+0xbc>)
 8012c0a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012c0e:	b259      	sxtb	r1, r3
 8012c10:	4b1a      	ldr	r3, [pc, #104]	; (8012c7c <ComputeRxWindowParameters+0xbc>)
 8012c12:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012c16:	4b19      	ldr	r3, [pc, #100]	; (8012c7c <ComputeRxWindowParameters+0xbc>)
 8012c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c1a:	4c1a      	ldr	r4, [pc, #104]	; (8012c84 <ComputeRxWindowParameters+0xc4>)
 8012c1c:	9400      	str	r4, [sp, #0]
 8012c1e:	f004 fb66 	bl	80172ee <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8012c22:	4b16      	ldr	r3, [pc, #88]	; (8012c7c <ComputeRxWindowParameters+0xbc>)
 8012c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c26:	4a18      	ldr	r2, [pc, #96]	; (8012c88 <ComputeRxWindowParameters+0xc8>)
 8012c28:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8012c2c:	4413      	add	r3, r2
 8012c2e:	4a16      	ldr	r2, [pc, #88]	; (8012c88 <ComputeRxWindowParameters+0xc8>)
 8012c30:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012c34:	4b11      	ldr	r3, [pc, #68]	; (8012c7c <ComputeRxWindowParameters+0xbc>)
 8012c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c38:	4a13      	ldr	r2, [pc, #76]	; (8012c88 <ComputeRxWindowParameters+0xc8>)
 8012c3a:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8012c3e:	4413      	add	r3, r2
 8012c40:	4a11      	ldr	r2, [pc, #68]	; (8012c88 <ComputeRxWindowParameters+0xc8>)
 8012c42:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012c46:	4b0d      	ldr	r3, [pc, #52]	; (8012c7c <ComputeRxWindowParameters+0xbc>)
 8012c48:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d111      	bne.n	8012c74 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8012c50:	4b0a      	ldr	r3, [pc, #40]	; (8012c7c <ComputeRxWindowParameters+0xbc>)
 8012c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c54:	4a0c      	ldr	r2, [pc, #48]	; (8012c88 <ComputeRxWindowParameters+0xc8>)
 8012c56:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8012c5a:	4413      	add	r3, r2
 8012c5c:	4a0a      	ldr	r2, [pc, #40]	; (8012c88 <ComputeRxWindowParameters+0xc8>)
 8012c5e:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012c62:	4b06      	ldr	r3, [pc, #24]	; (8012c7c <ComputeRxWindowParameters+0xbc>)
 8012c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012c66:	4a08      	ldr	r2, [pc, #32]	; (8012c88 <ComputeRxWindowParameters+0xc8>)
 8012c68:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8012c6c:	4413      	add	r3, r2
 8012c6e:	4a06      	ldr	r2, [pc, #24]	; (8012c88 <ComputeRxWindowParameters+0xc8>)
 8012c70:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8012c74:	bf00      	nop
 8012c76:	3704      	adds	r7, #4
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd90      	pop	{r4, r7, pc}
 8012c7c:	20000e5c 	.word	0x20000e5c
 8012c80:	20000d08 	.word	0x20000d08
 8012c84:	20000d1c 	.word	0x20000d1c
 8012c88:	20000950 	.word	0x20000950

08012c8c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b082      	sub	sp, #8
 8012c90:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8012c92:	2300      	movs	r3, #0
 8012c94:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8012c96:	4b13      	ldr	r3, [pc, #76]	; (8012ce4 <VerifyTxFrame+0x58>)
 8012c98:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d01b      	beq.n	8012cd8 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012ca0:	1d3b      	adds	r3, r7, #4
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f002 fdbe 	bl	8015824 <LoRaMacCommandsGetSizeSerializedCmds>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d001      	beq.n	8012cb2 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012cae:	2313      	movs	r3, #19
 8012cb0:	e013      	b.n	8012cda <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8012cb2:	4b0d      	ldr	r3, [pc, #52]	; (8012ce8 <VerifyTxFrame+0x5c>)
 8012cb4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012cb8:	4a0a      	ldr	r2, [pc, #40]	; (8012ce4 <VerifyTxFrame+0x58>)
 8012cba:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8012cbe:	687a      	ldr	r2, [r7, #4]
 8012cc0:	b2d2      	uxtb	r2, r2
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f7ff f96c 	bl	8011fa0 <ValidatePayloadLength>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	f083 0301 	eor.w	r3, r3, #1
 8012cce:	b2db      	uxtb	r3, r3
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d001      	beq.n	8012cd8 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8012cd4:	2308      	movs	r3, #8
 8012cd6:	e000      	b.n	8012cda <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8012cd8:	2300      	movs	r3, #0
}
 8012cda:	4618      	mov	r0, r3
 8012cdc:	3708      	adds	r7, #8
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bd80      	pop	{r7, pc}
 8012ce2:	bf00      	nop
 8012ce4:	20000e5c 	.word	0x20000e5c
 8012ce8:	20000950 	.word	0x20000950

08012cec <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b082      	sub	sp, #8
 8012cf0:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8012cf2:	4b18      	ldr	r3, [pc, #96]	; (8012d54 <SerializeTxFrame+0x68>)
 8012cf4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d002      	beq.n	8012d02 <SerializeTxFrame+0x16>
 8012cfc:	2b04      	cmp	r3, #4
 8012cfe:	d011      	beq.n	8012d24 <SerializeTxFrame+0x38>
 8012d00:	e021      	b.n	8012d46 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8012d02:	4815      	ldr	r0, [pc, #84]	; (8012d58 <SerializeTxFrame+0x6c>)
 8012d04:	f004 f8f3 	bl	8016eee <LoRaMacSerializerJoinRequest>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8012d0c:	79fb      	ldrb	r3, [r7, #7]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d001      	beq.n	8012d16 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012d12:	2311      	movs	r3, #17
 8012d14:	e01a      	b.n	8012d4c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8012d16:	4b0f      	ldr	r3, [pc, #60]	; (8012d54 <SerializeTxFrame+0x68>)
 8012d18:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012d1c:	b29a      	uxth	r2, r3
 8012d1e:	4b0d      	ldr	r3, [pc, #52]	; (8012d54 <SerializeTxFrame+0x68>)
 8012d20:	801a      	strh	r2, [r3, #0]
            break;
 8012d22:	e012      	b.n	8012d4a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8012d24:	480c      	ldr	r0, [pc, #48]	; (8012d58 <SerializeTxFrame+0x6c>)
 8012d26:	f004 f964 	bl	8016ff2 <LoRaMacSerializerData>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8012d2e:	79fb      	ldrb	r3, [r7, #7]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d001      	beq.n	8012d38 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012d34:	2311      	movs	r3, #17
 8012d36:	e009      	b.n	8012d4c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012d38:	4b06      	ldr	r3, [pc, #24]	; (8012d54 <SerializeTxFrame+0x68>)
 8012d3a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012d3e:	b29a      	uxth	r2, r3
 8012d40:	4b04      	ldr	r3, [pc, #16]	; (8012d54 <SerializeTxFrame+0x68>)
 8012d42:	801a      	strh	r2, [r3, #0]
            break;
 8012d44:	e001      	b.n	8012d4a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012d46:	2303      	movs	r3, #3
 8012d48:	e000      	b.n	8012d4c <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8012d4a:	2300      	movs	r3, #0
}
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	3708      	adds	r7, #8
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd80      	pop	{r7, pc}
 8012d54:	20000950 	.word	0x20000950
 8012d58:	20000a58 	.word	0x20000a58

08012d5c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b090      	sub	sp, #64	; 0x40
 8012d60:	af02      	add	r7, sp, #8
 8012d62:	4603      	mov	r3, r0
 8012d64:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012d66:	2303      	movs	r3, #3
 8012d68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8012d6c:	f7ff ff06 	bl	8012b7c <CheckForClassBCollision>
 8012d70:	4603      	mov	r3, r0
 8012d72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8012d76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d002      	beq.n	8012d84 <ScheduleTx+0x28>
    {
        return status;
 8012d7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d82:	e08f      	b.n	8012ea4 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8012d84:	f000 f8fa 	bl	8012f7c <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8012d88:	f7ff ffb0 	bl	8012cec <SerializeTxFrame>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8012d92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d002      	beq.n	8012da0 <ScheduleTx+0x44>
    {
        return status;
 8012d9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d9e:	e081      	b.n	8012ea4 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8012da0:	4b42      	ldr	r3, [pc, #264]	; (8012eac <ScheduleTx+0x150>)
 8012da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012da4:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012da6:	4b41      	ldr	r3, [pc, #260]	; (8012eac <ScheduleTx+0x150>)
 8012da8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012dac:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8012dae:	4b3f      	ldr	r3, [pc, #252]	; (8012eac <ScheduleTx+0x150>)
 8012db0:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8012db4:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8012db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f00a f94c 	bl	801d058 <SysTimeGetMcuTime>
 8012dc0:	4638      	mov	r0, r7
 8012dc2:	4b3a      	ldr	r3, [pc, #232]	; (8012eac <ScheduleTx+0x150>)
 8012dc4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8012dc8:	9200      	str	r2, [sp, #0]
 8012dca:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8012dce:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012dd2:	ca06      	ldmia	r2, {r1, r2}
 8012dd4:	f00a f8a1 	bl	801cf1a <SysTimeSub>
 8012dd8:	f107 0320 	add.w	r3, r7, #32
 8012ddc:	463a      	mov	r2, r7
 8012dde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012de2:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8012de6:	4b31      	ldr	r3, [pc, #196]	; (8012eac <ScheduleTx+0x150>)
 8012de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dea:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8012dec:	2300      	movs	r3, #0
 8012dee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8012df2:	2301      	movs	r3, #1
 8012df4:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8012df6:	4b2e      	ldr	r3, [pc, #184]	; (8012eb0 <ScheduleTx+0x154>)
 8012df8:	881b      	ldrh	r3, [r3, #0]
 8012dfa:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012dfc:	4b2b      	ldr	r3, [pc, #172]	; (8012eac <ScheduleTx+0x150>)
 8012dfe:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d104      	bne.n	8012e10 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8012e06:	2301      	movs	r3, #1
 8012e08:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8012e10:	4b26      	ldr	r3, [pc, #152]	; (8012eac <ScheduleTx+0x150>)
 8012e12:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012e16:	f107 0114 	add.w	r1, r7, #20
 8012e1a:	4b26      	ldr	r3, [pc, #152]	; (8012eb4 <ScheduleTx+0x158>)
 8012e1c:	9300      	str	r3, [sp, #0]
 8012e1e:	4b26      	ldr	r3, [pc, #152]	; (8012eb8 <ScheduleTx+0x15c>)
 8012e20:	4a26      	ldr	r2, [pc, #152]	; (8012ebc <ScheduleTx+0x160>)
 8012e22:	f004 fb2a 	bl	801747a <RegionNextChannel>
 8012e26:	4603      	mov	r3, r0
 8012e28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8012e2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d022      	beq.n	8012e7a <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8012e34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e38:	2b0b      	cmp	r3, #11
 8012e3a:	d11b      	bne.n	8012e74 <ScheduleTx+0x118>
 8012e3c:	7bfb      	ldrb	r3, [r7, #15]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d018      	beq.n	8012e74 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8012e42:	4b1b      	ldr	r3, [pc, #108]	; (8012eb0 <ScheduleTx+0x154>)
 8012e44:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d011      	beq.n	8012e70 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8012e4c:	4b18      	ldr	r3, [pc, #96]	; (8012eb0 <ScheduleTx+0x154>)
 8012e4e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012e52:	f043 0320 	orr.w	r3, r3, #32
 8012e56:	4a16      	ldr	r2, [pc, #88]	; (8012eb0 <ScheduleTx+0x154>)
 8012e58:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8012e5c:	4b14      	ldr	r3, [pc, #80]	; (8012eb0 <ScheduleTx+0x154>)
 8012e5e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8012e62:	4619      	mov	r1, r3
 8012e64:	4816      	ldr	r0, [pc, #88]	; (8012ec0 <ScheduleTx+0x164>)
 8012e66:	f00a fe97 	bl	801db98 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8012e6a:	4815      	ldr	r0, [pc, #84]	; (8012ec0 <ScheduleTx+0x164>)
 8012e6c:	f00a fdb6 	bl	801d9dc <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8012e70:	2300      	movs	r3, #0
 8012e72:	e017      	b.n	8012ea4 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8012e74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e78:	e014      	b.n	8012ea4 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8012e7a:	f7ff fea1 	bl	8012bc0 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8012e7e:	f7ff ff05 	bl	8012c8c <VerifyTxFrame>
 8012e82:	4603      	mov	r3, r0
 8012e84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8012e88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d002      	beq.n	8012e96 <ScheduleTx+0x13a>
    {
        return status;
 8012e90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e94:	e006      	b.n	8012ea4 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8012e96:	4b06      	ldr	r3, [pc, #24]	; (8012eb0 <ScheduleTx+0x154>)
 8012e98:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f000 fb29 	bl	80134f4 <SendFrameOnChannel>
 8012ea2:	4603      	mov	r3, r0
}
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	3738      	adds	r7, #56	; 0x38
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}
 8012eac:	20000e5c 	.word	0x20000e5c
 8012eb0:	20000950 	.word	0x20000950
 8012eb4:	20000e8c 	.word	0x20000e8c
 8012eb8:	20000dd8 	.word	0x20000dd8
 8012ebc:	20000d65 	.word	0x20000d65
 8012ec0:	20000cb8 	.word	0x20000cb8

08012ec4 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b084      	sub	sp, #16
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	4603      	mov	r3, r0
 8012ecc:	460a      	mov	r2, r1
 8012ece:	71fb      	strb	r3, [r7, #7]
 8012ed0:	4613      	mov	r3, r2
 8012ed2:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8012ed4:	2313      	movs	r3, #19
 8012ed6:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8012edc:	4b25      	ldr	r3, [pc, #148]	; (8012f74 <SecureFrame+0xb0>)
 8012ede:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d002      	beq.n	8012eec <SecureFrame+0x28>
 8012ee6:	2b04      	cmp	r3, #4
 8012ee8:	d011      	beq.n	8012f0e <SecureFrame+0x4a>
 8012eea:	e03b      	b.n	8012f64 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8012eec:	4822      	ldr	r0, [pc, #136]	; (8012f78 <SecureFrame+0xb4>)
 8012eee:	f003 fbc7 	bl	8016680 <LoRaMacCryptoPrepareJoinRequest>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8012ef6:	7bfb      	ldrb	r3, [r7, #15]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d001      	beq.n	8012f00 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012efc:	2311      	movs	r3, #17
 8012efe:	e034      	b.n	8012f6a <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8012f00:	4b1c      	ldr	r3, [pc, #112]	; (8012f74 <SecureFrame+0xb0>)
 8012f02:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012f06:	b29a      	uxth	r2, r3
 8012f08:	4b1a      	ldr	r3, [pc, #104]	; (8012f74 <SecureFrame+0xb0>)
 8012f0a:	801a      	strh	r2, [r3, #0]
            break;
 8012f0c:	e02c      	b.n	8012f68 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8012f0e:	f107 0308 	add.w	r3, r7, #8
 8012f12:	4618      	mov	r0, r3
 8012f14:	f003 face 	bl	80164b4 <LoRaMacCryptoGetFCntUp>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d001      	beq.n	8012f22 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8012f1e:	2312      	movs	r3, #18
 8012f20:	e023      	b.n	8012f6a <SecureFrame+0xa6>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8012f22:	4b14      	ldr	r3, [pc, #80]	; (8012f74 <SecureFrame+0xb0>)
 8012f24:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d104      	bne.n	8012f36 <SecureFrame+0x72>
 8012f2c:	4b11      	ldr	r3, [pc, #68]	; (8012f74 <SecureFrame+0xb0>)
 8012f2e:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8012f32:	2b01      	cmp	r3, #1
 8012f34:	d902      	bls.n	8012f3c <SecureFrame+0x78>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	3b01      	subs	r3, #1
 8012f3a:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8012f3c:	68b8      	ldr	r0, [r7, #8]
 8012f3e:	79ba      	ldrb	r2, [r7, #6]
 8012f40:	79f9      	ldrb	r1, [r7, #7]
 8012f42:	4b0d      	ldr	r3, [pc, #52]	; (8012f78 <SecureFrame+0xb4>)
 8012f44:	f003 fcb4 	bl	80168b0 <LoRaMacCryptoSecureMessage>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8012f4c:	7bfb      	ldrb	r3, [r7, #15]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d001      	beq.n	8012f56 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f52:	2311      	movs	r3, #17
 8012f54:	e009      	b.n	8012f6a <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012f56:	4b07      	ldr	r3, [pc, #28]	; (8012f74 <SecureFrame+0xb0>)
 8012f58:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012f5c:	b29a      	uxth	r2, r3
 8012f5e:	4b05      	ldr	r3, [pc, #20]	; (8012f74 <SecureFrame+0xb0>)
 8012f60:	801a      	strh	r2, [r3, #0]
            break;
 8012f62:	e001      	b.n	8012f68 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012f64:	2303      	movs	r3, #3
 8012f66:	e000      	b.n	8012f6a <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8012f68:	2300      	movs	r3, #0
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3710      	adds	r7, #16
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}
 8012f72:	bf00      	nop
 8012f74:	20000950 	.word	0x20000950
 8012f78:	20000a58 	.word	0x20000a58

08012f7c <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8012f80:	4b09      	ldr	r3, [pc, #36]	; (8012fa8 <CalculateBackOff+0x2c>)
 8012f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d10a      	bne.n	8012f9e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8012f88:	4b07      	ldr	r3, [pc, #28]	; (8012fa8 <CalculateBackOff+0x2c>)
 8012f8a:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8012f8e:	3b01      	subs	r3, #1
 8012f90:	4a06      	ldr	r2, [pc, #24]	; (8012fac <CalculateBackOff+0x30>)
 8012f92:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 8012f96:	fb02 f303 	mul.w	r3, r2, r3
 8012f9a:	4a03      	ldr	r2, [pc, #12]	; (8012fa8 <CalculateBackOff+0x2c>)
 8012f9c:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8012f9e:	bf00      	nop
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bc80      	pop	{r7}
 8012fa4:	4770      	bx	lr
 8012fa6:	bf00      	nop
 8012fa8:	20000e5c 	.word	0x20000e5c
 8012fac:	20000950 	.word	0x20000950

08012fb0 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b082      	sub	sp, #8
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	7139      	strb	r1, [r7, #4]
 8012fba:	71fb      	strb	r3, [r7, #7]
 8012fbc:	4613      	mov	r3, r2
 8012fbe:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8012fc0:	79fb      	ldrb	r3, [r7, #7]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d002      	beq.n	8012fcc <RemoveMacCommands+0x1c>
 8012fc6:	79fb      	ldrb	r3, [r7, #7]
 8012fc8:	2b01      	cmp	r3, #1
 8012fca:	d10d      	bne.n	8012fe8 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8012fcc:	79bb      	ldrb	r3, [r7, #6]
 8012fce:	2b01      	cmp	r3, #1
 8012fd0:	d108      	bne.n	8012fe4 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8012fd2:	793b      	ldrb	r3, [r7, #4]
 8012fd4:	f003 0320 	and.w	r3, r3, #32
 8012fd8:	b2db      	uxtb	r3, r3
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d004      	beq.n	8012fe8 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8012fde:	f002 fbff 	bl	80157e0 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8012fe2:	e001      	b.n	8012fe8 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8012fe4:	f002 fbfc 	bl	80157e0 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8012fe8:	bf00      	nop
 8012fea:	3708      	adds	r7, #8
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}

08012ff0 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8012ff0:	b5b0      	push	{r4, r5, r7, lr}
 8012ff2:	b08e      	sub	sp, #56	; 0x38
 8012ff4:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8012ff6:	4b68      	ldr	r3, [pc, #416]	; (8013198 <ResetMacParameters+0x1a8>)
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8012ffe:	4b66      	ldr	r3, [pc, #408]	; (8013198 <ResetMacParameters+0x1a8>)
 8013000:	2200      	movs	r2, #0
 8013002:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8013004:	4b65      	ldr	r3, [pc, #404]	; (801319c <ResetMacParameters+0x1ac>)
 8013006:	2200      	movs	r2, #0
 8013008:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 801300c:	4b63      	ldr	r3, [pc, #396]	; (801319c <ResetMacParameters+0x1ac>)
 801300e:	2201      	movs	r2, #1
 8013010:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013014:	4b61      	ldr	r3, [pc, #388]	; (801319c <ResetMacParameters+0x1ac>)
 8013016:	2201      	movs	r2, #1
 8013018:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 801301c:	4b5f      	ldr	r3, [pc, #380]	; (801319c <ResetMacParameters+0x1ac>)
 801301e:	2200      	movs	r2, #0
 8013020:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8013024:	4b5c      	ldr	r3, [pc, #368]	; (8013198 <ResetMacParameters+0x1a8>)
 8013026:	2200      	movs	r2, #0
 8013028:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 801302c:	4b5a      	ldr	r3, [pc, #360]	; (8013198 <ResetMacParameters+0x1a8>)
 801302e:	2201      	movs	r2, #1
 8013030:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013034:	4b58      	ldr	r3, [pc, #352]	; (8013198 <ResetMacParameters+0x1a8>)
 8013036:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 801303a:	4b57      	ldr	r3, [pc, #348]	; (8013198 <ResetMacParameters+0x1a8>)
 801303c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013040:	4b55      	ldr	r3, [pc, #340]	; (8013198 <ResetMacParameters+0x1a8>)
 8013042:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8013046:	4b54      	ldr	r3, [pc, #336]	; (8013198 <ResetMacParameters+0x1a8>)
 8013048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 801304c:	4b52      	ldr	r3, [pc, #328]	; (8013198 <ResetMacParameters+0x1a8>)
 801304e:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 8013052:	4b51      	ldr	r3, [pc, #324]	; (8013198 <ResetMacParameters+0x1a8>)
 8013054:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013058:	4b4f      	ldr	r3, [pc, #316]	; (8013198 <ResetMacParameters+0x1a8>)
 801305a:	4a4f      	ldr	r2, [pc, #316]	; (8013198 <ResetMacParameters+0x1a8>)
 801305c:	3364      	adds	r3, #100	; 0x64
 801305e:	32a8      	adds	r2, #168	; 0xa8
 8013060:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013064:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013068:	4b4b      	ldr	r3, [pc, #300]	; (8013198 <ResetMacParameters+0x1a8>)
 801306a:	4a4b      	ldr	r2, [pc, #300]	; (8013198 <ResetMacParameters+0x1a8>)
 801306c:	336c      	adds	r3, #108	; 0x6c
 801306e:	32b0      	adds	r2, #176	; 0xb0
 8013070:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013074:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8013078:	4b47      	ldr	r3, [pc, #284]	; (8013198 <ResetMacParameters+0x1a8>)
 801307a:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 801307e:	4b46      	ldr	r3, [pc, #280]	; (8013198 <ResetMacParameters+0x1a8>)
 8013080:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8013084:	4b44      	ldr	r3, [pc, #272]	; (8013198 <ResetMacParameters+0x1a8>)
 8013086:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 801308a:	4b43      	ldr	r3, [pc, #268]	; (8013198 <ResetMacParameters+0x1a8>)
 801308c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8013090:	4b41      	ldr	r3, [pc, #260]	; (8013198 <ResetMacParameters+0x1a8>)
 8013092:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013096:	4a40      	ldr	r2, [pc, #256]	; (8013198 <ResetMacParameters+0x1a8>)
 8013098:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801309a:	4b3f      	ldr	r3, [pc, #252]	; (8013198 <ResetMacParameters+0x1a8>)
 801309c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80130a0:	4a3d      	ldr	r2, [pc, #244]	; (8013198 <ResetMacParameters+0x1a8>)
 80130a2:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 80130a4:	4b3d      	ldr	r3, [pc, #244]	; (801319c <ResetMacParameters+0x1ac>)
 80130a6:	2200      	movs	r2, #0
 80130a8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 80130ac:	4b3a      	ldr	r3, [pc, #232]	; (8013198 <ResetMacParameters+0x1a8>)
 80130ae:	2200      	movs	r2, #0
 80130b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80130b4:	2301      	movs	r3, #1
 80130b6:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80130b8:	4b39      	ldr	r3, [pc, #228]	; (80131a0 <ResetMacParameters+0x1b0>)
 80130ba:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80130bc:	4b39      	ldr	r3, [pc, #228]	; (80131a4 <ResetMacParameters+0x1b4>)
 80130be:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80130c0:	4b35      	ldr	r3, [pc, #212]	; (8013198 <ResetMacParameters+0x1a8>)
 80130c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80130c6:	1d3a      	adds	r2, r7, #4
 80130c8:	4611      	mov	r1, r2
 80130ca:	4618      	mov	r0, r3
 80130cc:	f004 f8c1 	bl	8017252 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80130d0:	4b32      	ldr	r3, [pc, #200]	; (801319c <ResetMacParameters+0x1ac>)
 80130d2:	2200      	movs	r2, #0
 80130d4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80130d8:	4b30      	ldr	r3, [pc, #192]	; (801319c <ResetMacParameters+0x1ac>)
 80130da:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80130de:	4b2f      	ldr	r3, [pc, #188]	; (801319c <ResetMacParameters+0x1ac>)
 80130e0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80130e4:	4b2c      	ldr	r3, [pc, #176]	; (8013198 <ResetMacParameters+0x1a8>)
 80130e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80130e8:	4a2c      	ldr	r2, [pc, #176]	; (801319c <ResetMacParameters+0x1ac>)
 80130ea:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80130ee:	4b2a      	ldr	r3, [pc, #168]	; (8013198 <ResetMacParameters+0x1a8>)
 80130f0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80130f4:	4b29      	ldr	r3, [pc, #164]	; (801319c <ResetMacParameters+0x1ac>)
 80130f6:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80130fa:	4b27      	ldr	r3, [pc, #156]	; (8013198 <ResetMacParameters+0x1a8>)
 80130fc:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8013100:	4b26      	ldr	r3, [pc, #152]	; (801319c <ResetMacParameters+0x1ac>)
 8013102:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8013106:	4b25      	ldr	r3, [pc, #148]	; (801319c <ResetMacParameters+0x1ac>)
 8013108:	2200      	movs	r2, #0
 801310a:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801310e:	4b23      	ldr	r3, [pc, #140]	; (801319c <ResetMacParameters+0x1ac>)
 8013110:	2201      	movs	r2, #1
 8013112:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8013116:	4a21      	ldr	r2, [pc, #132]	; (801319c <ResetMacParameters+0x1ac>)
 8013118:	4b20      	ldr	r3, [pc, #128]	; (801319c <ResetMacParameters+0x1ac>)
 801311a:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 801311e:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8013122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013126:	682b      	ldr	r3, [r5, #0]
 8013128:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801312a:	4b1c      	ldr	r3, [pc, #112]	; (801319c <ResetMacParameters+0x1ac>)
 801312c:	2201      	movs	r2, #1
 801312e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013132:	4b1a      	ldr	r3, [pc, #104]	; (801319c <ResetMacParameters+0x1ac>)
 8013134:	2202      	movs	r2, #2
 8013136:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801313a:	2300      	movs	r3, #0
 801313c:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 801313e:	2300      	movs	r3, #0
 8013140:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 8013142:	4b16      	ldr	r3, [pc, #88]	; (801319c <ResetMacParameters+0x1ac>)
 8013144:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013148:	2b00      	cmp	r3, #0
 801314a:	d009      	beq.n	8013160 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 801314c:	4b13      	ldr	r3, [pc, #76]	; (801319c <ResetMacParameters+0x1ac>)
 801314e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013152:	685b      	ldr	r3, [r3, #4]
 8013154:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8013156:	4b11      	ldr	r3, [pc, #68]	; (801319c <ResetMacParameters+0x1ac>)
 8013158:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801315c:	691b      	ldr	r3, [r3, #16]
 801315e:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8013160:	4b11      	ldr	r3, [pc, #68]	; (80131a8 <ResetMacParameters+0x1b8>)
 8013162:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8013164:	4b11      	ldr	r3, [pc, #68]	; (80131ac <ResetMacParameters+0x1bc>)
 8013166:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8013168:	4b11      	ldr	r3, [pc, #68]	; (80131b0 <ResetMacParameters+0x1c0>)
 801316a:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 801316c:	4b11      	ldr	r3, [pc, #68]	; (80131b4 <ResetMacParameters+0x1c4>)
 801316e:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8013170:	4b11      	ldr	r3, [pc, #68]	; (80131b8 <ResetMacParameters+0x1c8>)
 8013172:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8013174:	4b11      	ldr	r3, [pc, #68]	; (80131bc <ResetMacParameters+0x1cc>)
 8013176:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8013178:	4b11      	ldr	r3, [pc, #68]	; (80131c0 <ResetMacParameters+0x1d0>)
 801317a:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 801317c:	4b11      	ldr	r3, [pc, #68]	; (80131c4 <ResetMacParameters+0x1d4>)
 801317e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8013180:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8013184:	f107 0310 	add.w	r3, r7, #16
 8013188:	4a0f      	ldr	r2, [pc, #60]	; (80131c8 <ResetMacParameters+0x1d8>)
 801318a:	4618      	mov	r0, r3
 801318c:	f002 f88a 	bl	80152a4 <LoRaMacClassBInit>
}
 8013190:	bf00      	nop
 8013192:	3738      	adds	r7, #56	; 0x38
 8013194:	46bd      	mov	sp, r7
 8013196:	bdb0      	pop	{r4, r5, r7, pc}
 8013198:	20000e5c 	.word	0x20000e5c
 801319c:	20000950 	.word	0x20000950
 80131a0:	2000103c 	.word	0x2000103c
 80131a4:	200010d0 	.word	0x200010d0
 80131a8:	20000db0 	.word	0x20000db0
 80131ac:	20000d6c 	.word	0x20000d6c
 80131b0:	20000d9c 	.word	0x20000d9c
 80131b4:	20000dd5 	.word	0x20000dd5
 80131b8:	20000f30 	.word	0x20000f30
 80131bc:	20000e9c 	.word	0x20000e9c
 80131c0:	20000ea0 	.word	0x20000ea0
 80131c4:	20000f34 	.word	0x20000f34
 80131c8:	2000156c 	.word	0x2000156c

080131cc <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80131d6:	6878      	ldr	r0, [r7, #4]
 80131d8:	f00a fc6e 	bl	801dab8 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80131dc:	4b11      	ldr	r3, [pc, #68]	; (8013224 <RxWindowSetup+0x58>)
 80131de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131e0:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80131e2:	4b11      	ldr	r3, [pc, #68]	; (8013228 <RxWindowSetup+0x5c>)
 80131e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80131e8:	4a10      	ldr	r2, [pc, #64]	; (801322c <RxWindowSetup+0x60>)
 80131ea:	6839      	ldr	r1, [r7, #0]
 80131ec:	4618      	mov	r0, r3
 80131ee:	f004 f898 	bl	8017322 <RegionRxConfig>
 80131f2:	4603      	mov	r3, r0
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d010      	beq.n	801321a <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80131f8:	4b0d      	ldr	r3, [pc, #52]	; (8013230 <RxWindowSetup+0x64>)
 80131fa:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 80131fe:	4b0c      	ldr	r3, [pc, #48]	; (8013230 <RxWindowSetup+0x64>)
 8013200:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8013204:	4b07      	ldr	r3, [pc, #28]	; (8013224 <RxWindowSetup+0x58>)
 8013206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013208:	4a07      	ldr	r2, [pc, #28]	; (8013228 <RxWindowSetup+0x5c>)
 801320a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801320c:	4610      	mov	r0, r2
 801320e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	7cda      	ldrb	r2, [r3, #19]
 8013214:	4b06      	ldr	r3, [pc, #24]	; (8013230 <RxWindowSetup+0x64>)
 8013216:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 801321a:	bf00      	nop
 801321c:	3708      	adds	r7, #8
 801321e:	46bd      	mov	sp, r7
 8013220:	bd80      	pop	{r7, pc}
 8013222:	bf00      	nop
 8013224:	0801f374 	.word	0x0801f374
 8013228:	20000e5c 	.word	0x20000e5c
 801322c:	20000d70 	.word	0x20000d70
 8013230:	20000950 	.word	0x20000950

08013234 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8013234:	b590      	push	{r4, r7, lr}
 8013236:	b083      	sub	sp, #12
 8013238:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801323a:	4b1b      	ldr	r3, [pc, #108]	; (80132a8 <OpenContinuousRxCWindow+0x74>)
 801323c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8013240:	4b19      	ldr	r3, [pc, #100]	; (80132a8 <OpenContinuousRxCWindow+0x74>)
 8013242:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013246:	b259      	sxtb	r1, r3
 8013248:	4b17      	ldr	r3, [pc, #92]	; (80132a8 <OpenContinuousRxCWindow+0x74>)
 801324a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801324e:	4b16      	ldr	r3, [pc, #88]	; (80132a8 <OpenContinuousRxCWindow+0x74>)
 8013250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013252:	4c16      	ldr	r4, [pc, #88]	; (80132ac <OpenContinuousRxCWindow+0x78>)
 8013254:	9400      	str	r4, [sp, #0]
 8013256:	f004 f84a 	bl	80172ee <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801325a:	4b15      	ldr	r3, [pc, #84]	; (80132b0 <OpenContinuousRxCWindow+0x7c>)
 801325c:	2202      	movs	r2, #2
 801325e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013262:	4b13      	ldr	r3, [pc, #76]	; (80132b0 <OpenContinuousRxCWindow+0x7c>)
 8013264:	2201      	movs	r2, #1
 8013266:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801326a:	4b0f      	ldr	r3, [pc, #60]	; (80132a8 <OpenContinuousRxCWindow+0x74>)
 801326c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013270:	4a10      	ldr	r2, [pc, #64]	; (80132b4 <OpenContinuousRxCWindow+0x80>)
 8013272:	490e      	ldr	r1, [pc, #56]	; (80132ac <OpenContinuousRxCWindow+0x78>)
 8013274:	4618      	mov	r0, r3
 8013276:	f004 f854 	bl	8017322 <RegionRxConfig>
 801327a:	4603      	mov	r3, r0
 801327c:	2b00      	cmp	r3, #0
 801327e:	d00f      	beq.n	80132a0 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8013280:	4b0b      	ldr	r3, [pc, #44]	; (80132b0 <OpenContinuousRxCWindow+0x7c>)
 8013282:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 8013286:	4b0a      	ldr	r3, [pc, #40]	; (80132b0 <OpenContinuousRxCWindow+0x7c>)
 8013288:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 801328c:	4b0a      	ldr	r3, [pc, #40]	; (80132b8 <OpenContinuousRxCWindow+0x84>)
 801328e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013290:	2000      	movs	r0, #0
 8013292:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8013294:	4b06      	ldr	r3, [pc, #24]	; (80132b0 <OpenContinuousRxCWindow+0x7c>)
 8013296:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 801329a:	4b05      	ldr	r3, [pc, #20]	; (80132b0 <OpenContinuousRxCWindow+0x7c>)
 801329c:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 80132a0:	bf00      	nop
 80132a2:	3704      	adds	r7, #4
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd90      	pop	{r4, r7, pc}
 80132a8:	20000e5c 	.word	0x20000e5c
 80132ac:	20000d30 	.word	0x20000d30
 80132b0:	20000950 	.word	0x20000950
 80132b4:	20000d70 	.word	0x20000d70
 80132b8:	0801f374 	.word	0x0801f374

080132bc <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b088      	sub	sp, #32
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	60f8      	str	r0, [r7, #12]
 80132c4:	60b9      	str	r1, [r7, #8]
 80132c6:	603b      	str	r3, [r7, #0]
 80132c8:	4613      	mov	r3, r2
 80132ca:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80132cc:	4b82      	ldr	r3, [pc, #520]	; (80134d8 <PrepareFrame+0x21c>)
 80132ce:	2200      	movs	r2, #0
 80132d0:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80132d2:	4b81      	ldr	r3, [pc, #516]	; (80134d8 <PrepareFrame+0x21c>)
 80132d4:	2200      	movs	r2, #0
 80132d6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 80132da:	2300      	movs	r3, #0
 80132dc:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80132de:	2300      	movs	r3, #0
 80132e0:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80132e2:	2300      	movs	r3, #0
 80132e4:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80132e6:	683b      	ldr	r3, [r7, #0]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d101      	bne.n	80132f0 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80132ec:	2300      	movs	r3, #0
 80132ee:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80132f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80132f2:	461a      	mov	r2, r3
 80132f4:	6839      	ldr	r1, [r7, #0]
 80132f6:	4879      	ldr	r0, [pc, #484]	; (80134dc <PrepareFrame+0x220>)
 80132f8:	f006 fa95 	bl	8019826 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80132fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80132fe:	b2da      	uxtb	r2, r3
 8013300:	4b75      	ldr	r3, [pc, #468]	; (80134d8 <PrepareFrame+0x21c>)
 8013302:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	781a      	ldrb	r2, [r3, #0]
 801330a:	4b73      	ldr	r3, [pc, #460]	; (80134d8 <PrepareFrame+0x21c>)
 801330c:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	781b      	ldrb	r3, [r3, #0]
 8013312:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8013316:	b2db      	uxtb	r3, r3
 8013318:	2b07      	cmp	r3, #7
 801331a:	f000 80b9 	beq.w	8013490 <PrepareFrame+0x1d4>
 801331e:	2b07      	cmp	r3, #7
 8013320:	f300 80d0 	bgt.w	80134c4 <PrepareFrame+0x208>
 8013324:	2b02      	cmp	r3, #2
 8013326:	d006      	beq.n	8013336 <PrepareFrame+0x7a>
 8013328:	2b04      	cmp	r3, #4
 801332a:	f040 80cb 	bne.w	80134c4 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801332e:	4b6a      	ldr	r3, [pc, #424]	; (80134d8 <PrepareFrame+0x21c>)
 8013330:	2201      	movs	r2, #1
 8013332:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8013336:	4b68      	ldr	r3, [pc, #416]	; (80134d8 <PrepareFrame+0x21c>)
 8013338:	2204      	movs	r2, #4
 801333a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801333e:	4b66      	ldr	r3, [pc, #408]	; (80134d8 <PrepareFrame+0x21c>)
 8013340:	4a67      	ldr	r2, [pc, #412]	; (80134e0 <PrepareFrame+0x224>)
 8013342:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8013346:	4b64      	ldr	r3, [pc, #400]	; (80134d8 <PrepareFrame+0x21c>)
 8013348:	22ff      	movs	r2, #255	; 0xff
 801334a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	781a      	ldrb	r2, [r3, #0]
 8013352:	4b61      	ldr	r3, [pc, #388]	; (80134d8 <PrepareFrame+0x21c>)
 8013354:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8013358:	4a5f      	ldr	r2, [pc, #380]	; (80134d8 <PrepareFrame+0x21c>)
 801335a:	79fb      	ldrb	r3, [r7, #7]
 801335c:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8013360:	4b60      	ldr	r3, [pc, #384]	; (80134e4 <PrepareFrame+0x228>)
 8013362:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8013366:	4a5c      	ldr	r2, [pc, #368]	; (80134d8 <PrepareFrame+0x21c>)
 8013368:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801336c:	68bb      	ldr	r3, [r7, #8]
 801336e:	781a      	ldrb	r2, [r3, #0]
 8013370:	4b59      	ldr	r3, [pc, #356]	; (80134d8 <PrepareFrame+0x21c>)
 8013372:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8013376:	4b58      	ldr	r3, [pc, #352]	; (80134d8 <PrepareFrame+0x21c>)
 8013378:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 801337c:	4b56      	ldr	r3, [pc, #344]	; (80134d8 <PrepareFrame+0x21c>)
 801337e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8013382:	4b55      	ldr	r3, [pc, #340]	; (80134d8 <PrepareFrame+0x21c>)
 8013384:	4a55      	ldr	r2, [pc, #340]	; (80134dc <PrepareFrame+0x220>)
 8013386:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801338a:	f107 0318 	add.w	r3, r7, #24
 801338e:	4618      	mov	r0, r3
 8013390:	f003 f890 	bl	80164b4 <LoRaMacCryptoGetFCntUp>
 8013394:	4603      	mov	r3, r0
 8013396:	2b00      	cmp	r3, #0
 8013398:	d001      	beq.n	801339e <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801339a:	2312      	movs	r3, #18
 801339c:	e098      	b.n	80134d0 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801339e:	69bb      	ldr	r3, [r7, #24]
 80133a0:	b29a      	uxth	r2, r3
 80133a2:	4b4d      	ldr	r3, [pc, #308]	; (80134d8 <PrepareFrame+0x21c>)
 80133a4:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 80133a8:	4b4b      	ldr	r3, [pc, #300]	; (80134d8 <PrepareFrame+0x21c>)
 80133aa:	2200      	movs	r2, #0
 80133ac:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80133b0:	4b49      	ldr	r3, [pc, #292]	; (80134d8 <PrepareFrame+0x21c>)
 80133b2:	2200      	movs	r2, #0
 80133b4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80133b8:	69bb      	ldr	r3, [r7, #24]
 80133ba:	4a47      	ldr	r2, [pc, #284]	; (80134d8 <PrepareFrame+0x21c>)
 80133bc:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80133c0:	f107 0314 	add.w	r3, r7, #20
 80133c4:	4618      	mov	r0, r3
 80133c6:	f002 fa2d 	bl	8015824 <LoRaMacCommandsGetSizeSerializedCmds>
 80133ca:	4603      	mov	r3, r0
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d001      	beq.n	80133d4 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80133d0:	2313      	movs	r3, #19
 80133d2:	e07d      	b.n	80134d0 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80133d4:	697b      	ldr	r3, [r7, #20]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d076      	beq.n	80134c8 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80133da:	4b42      	ldr	r3, [pc, #264]	; (80134e4 <PrepareFrame+0x228>)
 80133dc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80133e0:	4618      	mov	r0, r3
 80133e2:	f7fe fdb5 	bl	8011f50 <GetMaxAppPayloadWithoutFOptsLength>
 80133e6:	4603      	mov	r3, r0
 80133e8:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80133ea:	4b3b      	ldr	r3, [pc, #236]	; (80134d8 <PrepareFrame+0x21c>)
 80133ec:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d01d      	beq.n	8013430 <PrepareFrame+0x174>
 80133f4:	697b      	ldr	r3, [r7, #20]
 80133f6:	2b0f      	cmp	r3, #15
 80133f8:	d81a      	bhi.n	8013430 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80133fa:	f107 0314 	add.w	r3, r7, #20
 80133fe:	4a3a      	ldr	r2, [pc, #232]	; (80134e8 <PrepareFrame+0x22c>)
 8013400:	4619      	mov	r1, r3
 8013402:	200f      	movs	r0, #15
 8013404:	f002 fa24 	bl	8015850 <LoRaMacCommandsSerializeCmds>
 8013408:	4603      	mov	r3, r0
 801340a:	2b00      	cmp	r3, #0
 801340c:	d001      	beq.n	8013412 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801340e:	2313      	movs	r3, #19
 8013410:	e05e      	b.n	80134d0 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8013412:	697b      	ldr	r3, [r7, #20]
 8013414:	f003 030f 	and.w	r3, r3, #15
 8013418:	b2d9      	uxtb	r1, r3
 801341a:	68ba      	ldr	r2, [r7, #8]
 801341c:	7813      	ldrb	r3, [r2, #0]
 801341e:	f361 0303 	bfi	r3, r1, #0, #4
 8013422:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013424:	68bb      	ldr	r3, [r7, #8]
 8013426:	781a      	ldrb	r2, [r3, #0]
 8013428:	4b2b      	ldr	r3, [pc, #172]	; (80134d8 <PrepareFrame+0x21c>)
 801342a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801342e:	e04b      	b.n	80134c8 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013430:	4b29      	ldr	r3, [pc, #164]	; (80134d8 <PrepareFrame+0x21c>)
 8013432:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013436:	2b00      	cmp	r3, #0
 8013438:	d010      	beq.n	801345c <PrepareFrame+0x1a0>
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	2b0f      	cmp	r3, #15
 801343e:	d90d      	bls.n	801345c <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013440:	7ffb      	ldrb	r3, [r7, #31]
 8013442:	f107 0114 	add.w	r1, r7, #20
 8013446:	4a29      	ldr	r2, [pc, #164]	; (80134ec <PrepareFrame+0x230>)
 8013448:	4618      	mov	r0, r3
 801344a:	f002 fa01 	bl	8015850 <LoRaMacCommandsSerializeCmds>
 801344e:	4603      	mov	r3, r0
 8013450:	2b00      	cmp	r3, #0
 8013452:	d001      	beq.n	8013458 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013454:	2313      	movs	r3, #19
 8013456:	e03b      	b.n	80134d0 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8013458:	230a      	movs	r3, #10
 801345a:	e039      	b.n	80134d0 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801345c:	7ffb      	ldrb	r3, [r7, #31]
 801345e:	f107 0114 	add.w	r1, r7, #20
 8013462:	4a22      	ldr	r2, [pc, #136]	; (80134ec <PrepareFrame+0x230>)
 8013464:	4618      	mov	r0, r3
 8013466:	f002 f9f3 	bl	8015850 <LoRaMacCommandsSerializeCmds>
 801346a:	4603      	mov	r3, r0
 801346c:	2b00      	cmp	r3, #0
 801346e:	d001      	beq.n	8013474 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013470:	2313      	movs	r3, #19
 8013472:	e02d      	b.n	80134d0 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8013474:	4b18      	ldr	r3, [pc, #96]	; (80134d8 <PrepareFrame+0x21c>)
 8013476:	2200      	movs	r2, #0
 8013478:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 801347c:	4b16      	ldr	r3, [pc, #88]	; (80134d8 <PrepareFrame+0x21c>)
 801347e:	4a1b      	ldr	r2, [pc, #108]	; (80134ec <PrepareFrame+0x230>)
 8013480:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8013484:	697b      	ldr	r3, [r7, #20]
 8013486:	b2da      	uxtb	r2, r3
 8013488:	4b13      	ldr	r3, [pc, #76]	; (80134d8 <PrepareFrame+0x21c>)
 801348a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 801348e:	e01b      	b.n	80134c8 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d01a      	beq.n	80134cc <PrepareFrame+0x210>
 8013496:	4b10      	ldr	r3, [pc, #64]	; (80134d8 <PrepareFrame+0x21c>)
 8013498:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801349c:	2b00      	cmp	r3, #0
 801349e:	d015      	beq.n	80134cc <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80134a0:	4813      	ldr	r0, [pc, #76]	; (80134f0 <PrepareFrame+0x234>)
 80134a2:	4b0d      	ldr	r3, [pc, #52]	; (80134d8 <PrepareFrame+0x21c>)
 80134a4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80134a8:	b29b      	uxth	r3, r3
 80134aa:	461a      	mov	r2, r3
 80134ac:	6839      	ldr	r1, [r7, #0]
 80134ae:	f006 f9ba 	bl	8019826 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80134b2:	4b09      	ldr	r3, [pc, #36]	; (80134d8 <PrepareFrame+0x21c>)
 80134b4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80134b8:	b29b      	uxth	r3, r3
 80134ba:	3301      	adds	r3, #1
 80134bc:	b29a      	uxth	r2, r3
 80134be:	4b06      	ldr	r3, [pc, #24]	; (80134d8 <PrepareFrame+0x21c>)
 80134c0:	801a      	strh	r2, [r3, #0]
            }
            break;
 80134c2:	e003      	b.n	80134cc <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80134c4:	2302      	movs	r3, #2
 80134c6:	e003      	b.n	80134d0 <PrepareFrame+0x214>
            break;
 80134c8:	bf00      	nop
 80134ca:	e000      	b.n	80134ce <PrepareFrame+0x212>
            break;
 80134cc:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80134ce:	2300      	movs	r3, #0
}
 80134d0:	4618      	mov	r0, r3
 80134d2:	3720      	adds	r7, #32
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}
 80134d8:	20000950 	.word	0x20000950
 80134dc:	20000a88 	.word	0x20000a88
 80134e0:	20000952 	.word	0x20000952
 80134e4:	20000e5c 	.word	0x20000e5c
 80134e8:	20000a68 	.word	0x20000a68
 80134ec:	20000ddc 	.word	0x20000ddc
 80134f0:	20000953 	.word	0x20000953

080134f4 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b08a      	sub	sp, #40	; 0x28
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	4603      	mov	r3, r0
 80134fc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80134fe:	2303      	movs	r3, #3
 8013500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8013504:	2300      	movs	r3, #0
 8013506:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8013508:	79fb      	ldrb	r3, [r7, #7]
 801350a:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801350c:	4b47      	ldr	r3, [pc, #284]	; (801362c <SendFrameOnChannel+0x138>)
 801350e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013512:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013514:	4b45      	ldr	r3, [pc, #276]	; (801362c <SendFrameOnChannel+0x138>)
 8013516:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801351a:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 801351c:	4b43      	ldr	r3, [pc, #268]	; (801362c <SendFrameOnChannel+0x138>)
 801351e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013520:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013522:	4b42      	ldr	r3, [pc, #264]	; (801362c <SendFrameOnChannel+0x138>)
 8013524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013526:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8013528:	4b41      	ldr	r3, [pc, #260]	; (8013630 <SendFrameOnChannel+0x13c>)
 801352a:	881b      	ldrh	r3, [r3, #0]
 801352c:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801352e:	4b3f      	ldr	r3, [pc, #252]	; (801362c <SendFrameOnChannel+0x138>)
 8013530:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8013534:	f107 020f 	add.w	r2, r7, #15
 8013538:	f107 0110 	add.w	r1, r7, #16
 801353c:	4b3d      	ldr	r3, [pc, #244]	; (8013634 <SendFrameOnChannel+0x140>)
 801353e:	f003 ff05 	bl	801734c <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013542:	4b3b      	ldr	r3, [pc, #236]	; (8013630 <SendFrameOnChannel+0x13c>)
 8013544:	2201      	movs	r2, #1
 8013546:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801354a:	4b38      	ldr	r3, [pc, #224]	; (801362c <SendFrameOnChannel+0x138>)
 801354c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013550:	b2da      	uxtb	r2, r3
 8013552:	4b37      	ldr	r3, [pc, #220]	; (8013630 <SendFrameOnChannel+0x13c>)
 8013554:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8013558:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801355c:	4b34      	ldr	r3, [pc, #208]	; (8013630 <SendFrameOnChannel+0x13c>)
 801355e:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 8013562:	79fb      	ldrb	r3, [r7, #7]
 8013564:	4a32      	ldr	r2, [pc, #200]	; (8013630 <SendFrameOnChannel+0x13c>)
 8013566:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801356a:	4b31      	ldr	r3, [pc, #196]	; (8013630 <SendFrameOnChannel+0x13c>)
 801356c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8013570:	4a2f      	ldr	r2, [pc, #188]	; (8013630 <SendFrameOnChannel+0x13c>)
 8013572:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013576:	4b2e      	ldr	r3, [pc, #184]	; (8013630 <SendFrameOnChannel+0x13c>)
 8013578:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 801357c:	4a2c      	ldr	r2, [pc, #176]	; (8013630 <SendFrameOnChannel+0x13c>)
 801357e:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8013582:	f001 fefb 	bl	801537c <LoRaMacClassBIsBeaconModeActive>
 8013586:	4603      	mov	r3, r0
 8013588:	2b00      	cmp	r3, #0
 801358a:	d00b      	beq.n	80135a4 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 801358c:	4b28      	ldr	r3, [pc, #160]	; (8013630 <SendFrameOnChannel+0x13c>)
 801358e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8013592:	4618      	mov	r0, r3
 8013594:	f001 ff5d 	bl	8015452 <LoRaMacClassBIsUplinkCollision>
 8013598:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801359a:	6a3b      	ldr	r3, [r7, #32]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d001      	beq.n	80135a4 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80135a0:	2310      	movs	r3, #16
 80135a2:	e03e      	b.n	8013622 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80135a4:	4b21      	ldr	r3, [pc, #132]	; (801362c <SendFrameOnChannel+0x138>)
 80135a6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80135aa:	2b01      	cmp	r3, #1
 80135ac:	d101      	bne.n	80135b2 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80135ae:	f001 ff5a 	bl	8015466 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80135b2:	f001 fef4 	bl	801539e <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80135b6:	4b1d      	ldr	r3, [pc, #116]	; (801362c <SendFrameOnChannel+0x138>)
 80135b8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80135bc:	b2db      	uxtb	r3, r3
 80135be:	4a1c      	ldr	r2, [pc, #112]	; (8013630 <SendFrameOnChannel+0x13c>)
 80135c0:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 80135c4:	4611      	mov	r1, r2
 80135c6:	4618      	mov	r0, r3
 80135c8:	f7ff fc7c 	bl	8012ec4 <SecureFrame>
 80135cc:	4603      	mov	r3, r0
 80135ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 80135d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d002      	beq.n	80135e0 <SendFrameOnChannel+0xec>
    {
        return status;
 80135da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135de:	e020      	b.n	8013622 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80135e0:	4b13      	ldr	r3, [pc, #76]	; (8013630 <SendFrameOnChannel+0x13c>)
 80135e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80135e6:	f043 0302 	orr.w	r3, r3, #2
 80135ea:	4a11      	ldr	r2, [pc, #68]	; (8013630 <SendFrameOnChannel+0x13c>)
 80135ec:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 80135f0:	4b0f      	ldr	r3, [pc, #60]	; (8013630 <SendFrameOnChannel+0x13c>)
 80135f2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80135f6:	f083 0301 	eor.w	r3, r3, #1
 80135fa:	b2db      	uxtb	r3, r3
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d007      	beq.n	8013610 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8013600:	4b0b      	ldr	r3, [pc, #44]	; (8013630 <SendFrameOnChannel+0x13c>)
 8013602:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8013606:	3301      	adds	r3, #1
 8013608:	b2da      	uxtb	r2, r3
 801360a:	4b09      	ldr	r3, [pc, #36]	; (8013630 <SendFrameOnChannel+0x13c>)
 801360c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8013610:	4b09      	ldr	r3, [pc, #36]	; (8013638 <SendFrameOnChannel+0x144>)
 8013612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013614:	4a06      	ldr	r2, [pc, #24]	; (8013630 <SendFrameOnChannel+0x13c>)
 8013616:	8812      	ldrh	r2, [r2, #0]
 8013618:	b2d2      	uxtb	r2, r2
 801361a:	4611      	mov	r1, r2
 801361c:	4807      	ldr	r0, [pc, #28]	; (801363c <SendFrameOnChannel+0x148>)
 801361e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8013620:	2300      	movs	r3, #0
}
 8013622:	4618      	mov	r0, r3
 8013624:	3728      	adds	r7, #40	; 0x28
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}
 801362a:	bf00      	nop
 801362c:	20000e5c 	.word	0x20000e5c
 8013630:	20000950 	.word	0x20000950
 8013634:	20000d68 	.word	0x20000d68
 8013638:	0801f374 	.word	0x0801f374
 801363c:	20000952 	.word	0x20000952

08013640 <SetTxContinuousWave>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b086      	sub	sp, #24
 8013644:	af00      	add	r7, sp, #0
 8013646:	4603      	mov	r3, r0
 8013648:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 801364a:	4b15      	ldr	r3, [pc, #84]	; (80136a0 <SetTxContinuousWave+0x60>)
 801364c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8013650:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013652:	4b14      	ldr	r3, [pc, #80]	; (80136a4 <SetTxContinuousWave+0x64>)
 8013654:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013658:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801365a:	4b12      	ldr	r3, [pc, #72]	; (80136a4 <SetTxContinuousWave+0x64>)
 801365c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013660:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013662:	4b10      	ldr	r3, [pc, #64]	; (80136a4 <SetTxContinuousWave+0x64>)
 8013664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013666:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013668:	4b0e      	ldr	r3, [pc, #56]	; (80136a4 <SetTxContinuousWave+0x64>)
 801366a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801366c:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 801366e:	88fb      	ldrh	r3, [r7, #6]
 8013670:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8013672:	4b0c      	ldr	r3, [pc, #48]	; (80136a4 <SetTxContinuousWave+0x64>)
 8013674:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013678:	f107 0208 	add.w	r2, r7, #8
 801367c:	4611      	mov	r1, r2
 801367e:	4618      	mov	r0, r3
 8013680:	f003 ff13 	bl	80174aa <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013684:	4b06      	ldr	r3, [pc, #24]	; (80136a0 <SetTxContinuousWave+0x60>)
 8013686:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801368a:	f043 0302 	orr.w	r3, r3, #2
 801368e:	4a04      	ldr	r2, [pc, #16]	; (80136a0 <SetTxContinuousWave+0x60>)
 8013690:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013694:	2300      	movs	r3, #0
}
 8013696:	4618      	mov	r0, r3
 8013698:	3718      	adds	r7, #24
 801369a:	46bd      	mov	sp, r7
 801369c:	bd80      	pop	{r7, pc}
 801369e:	bf00      	nop
 80136a0:	20000950 	.word	0x20000950
 80136a4:	20000e5c 	.word	0x20000e5c

080136a8 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b082      	sub	sp, #8
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	4603      	mov	r3, r0
 80136b0:	6039      	str	r1, [r7, #0]
 80136b2:	80fb      	strh	r3, [r7, #6]
 80136b4:	4613      	mov	r3, r2
 80136b6:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80136b8:	4b09      	ldr	r3, [pc, #36]	; (80136e0 <SetTxContinuousWave1+0x38>)
 80136ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136bc:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80136c0:	88fa      	ldrh	r2, [r7, #6]
 80136c2:	6838      	ldr	r0, [r7, #0]
 80136c4:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80136c6:	4b07      	ldr	r3, [pc, #28]	; (80136e4 <SetTxContinuousWave1+0x3c>)
 80136c8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80136cc:	f043 0302 	orr.w	r3, r3, #2
 80136d0:	4a04      	ldr	r2, [pc, #16]	; (80136e4 <SetTxContinuousWave1+0x3c>)
 80136d2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80136d6:	2300      	movs	r3, #0
}
 80136d8:	4618      	mov	r0, r3
 80136da:	3708      	adds	r7, #8
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}
 80136e0:	0801f374 	.word	0x0801f374
 80136e4:	20000950 	.word	0x20000950

080136e8 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b082      	sub	sp, #8
 80136ec:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 80136ee:	2300      	movs	r3, #0
 80136f0:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80136f2:	4b3e      	ldr	r3, [pc, #248]	; (80137ec <RestoreNvmData+0x104>)
 80136f4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80136f8:	2b01      	cmp	r3, #1
 80136fa:	d001      	beq.n	8013700 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 80136fc:	2301      	movs	r3, #1
 80136fe:	e071      	b.n	80137e4 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8013700:	2124      	movs	r1, #36	; 0x24
 8013702:	483b      	ldr	r0, [pc, #236]	; (80137f0 <RestoreNvmData+0x108>)
 8013704:	f006 f8e4 	bl	80198d0 <Crc32>
 8013708:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 801370a:	4b39      	ldr	r3, [pc, #228]	; (80137f0 <RestoreNvmData+0x108>)
 801370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801370e:	687a      	ldr	r2, [r7, #4]
 8013710:	429a      	cmp	r2, r3
 8013712:	d001      	beq.n	8013718 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013714:	2317      	movs	r3, #23
 8013716:	e065      	b.n	80137e4 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8013718:	2114      	movs	r1, #20
 801371a:	4836      	ldr	r0, [pc, #216]	; (80137f4 <RestoreNvmData+0x10c>)
 801371c:	f006 f8d8 	bl	80198d0 <Crc32>
 8013720:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8013722:	4b33      	ldr	r3, [pc, #204]	; (80137f0 <RestoreNvmData+0x108>)
 8013724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013726:	687a      	ldr	r2, [r7, #4]
 8013728:	429a      	cmp	r2, r3
 801372a:	d001      	beq.n	8013730 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801372c:	2317      	movs	r3, #23
 801372e:	e059      	b.n	80137e4 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8013730:	21dc      	movs	r1, #220	; 0xdc
 8013732:	4831      	ldr	r0, [pc, #196]	; (80137f8 <RestoreNvmData+0x110>)
 8013734:	f006 f8cc 	bl	80198d0 <Crc32>
 8013738:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 801373a:	4b2d      	ldr	r3, [pc, #180]	; (80137f0 <RestoreNvmData+0x108>)
 801373c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013740:	687a      	ldr	r2, [r7, #4]
 8013742:	429a      	cmp	r2, r3
 8013744:	d001      	beq.n	801374a <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013746:	2317      	movs	r3, #23
 8013748:	e04c      	b.n	80137e4 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 801374a:	21bc      	movs	r1, #188	; 0xbc
 801374c:	482b      	ldr	r0, [pc, #172]	; (80137fc <RestoreNvmData+0x114>)
 801374e:	f006 f8bf 	bl	80198d0 <Crc32>
 8013752:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8013754:	4b26      	ldr	r3, [pc, #152]	; (80137f0 <RestoreNvmData+0x108>)
 8013756:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801375a:	687a      	ldr	r2, [r7, #4]
 801375c:	429a      	cmp	r2, r3
 801375e:	d001      	beq.n	8013764 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013760:	2317      	movs	r3, #23
 8013762:	e03f      	b.n	80137e4 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8013764:	2190      	movs	r1, #144	; 0x90
 8013766:	4826      	ldr	r0, [pc, #152]	; (8013800 <RestoreNvmData+0x118>)
 8013768:	f006 f8b2 	bl	80198d0 <Crc32>
 801376c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 801376e:	4b20      	ldr	r3, [pc, #128]	; (80137f0 <RestoreNvmData+0x108>)
 8013770:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013774:	687a      	ldr	r2, [r7, #4]
 8013776:	429a      	cmp	r2, r3
 8013778:	d001      	beq.n	801377e <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801377a:	2317      	movs	r3, #23
 801377c:	e032      	b.n	80137e4 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 801377e:	2114      	movs	r1, #20
 8013780:	4820      	ldr	r0, [pc, #128]	; (8013804 <RestoreNvmData+0x11c>)
 8013782:	f006 f8a5 	bl	80198d0 <Crc32>
 8013786:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8013788:	4b19      	ldr	r3, [pc, #100]	; (80137f0 <RestoreNvmData+0x108>)
 801378a:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 801378e:	687a      	ldr	r2, [r7, #4]
 8013790:	429a      	cmp	r2, r3
 8013792:	d001      	beq.n	8013798 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013794:	2317      	movs	r3, #23
 8013796:	e025      	b.n	80137e4 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8013798:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 801379c:	4914      	ldr	r1, [pc, #80]	; (80137f0 <RestoreNvmData+0x108>)
 801379e:	481a      	ldr	r0, [pc, #104]	; (8013808 <RestoreNvmData+0x120>)
 80137a0:	f006 f841 	bl	8019826 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 80137a4:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80137a8:	2100      	movs	r1, #0
 80137aa:	4811      	ldr	r0, [pc, #68]	; (80137f0 <RestoreNvmData+0x108>)
 80137ac:	f006 f876 	bl	801989c <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80137b0:	4b0e      	ldr	r3, [pc, #56]	; (80137ec <RestoreNvmData+0x104>)
 80137b2:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80137b6:	4b0d      	ldr	r3, [pc, #52]	; (80137ec <RestoreNvmData+0x104>)
 80137b8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80137bc:	4b12      	ldr	r3, [pc, #72]	; (8013808 <RestoreNvmData+0x120>)
 80137be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137c0:	4a0a      	ldr	r2, [pc, #40]	; (80137ec <RestoreNvmData+0x104>)
 80137c2:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80137c6:	4b10      	ldr	r3, [pc, #64]	; (8013808 <RestoreNvmData+0x120>)
 80137c8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80137cc:	4b07      	ldr	r3, [pc, #28]	; (80137ec <RestoreNvmData+0x104>)
 80137ce:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80137d2:	4b06      	ldr	r3, [pc, #24]	; (80137ec <RestoreNvmData+0x104>)
 80137d4:	2201      	movs	r2, #1
 80137d6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80137da:	4b04      	ldr	r3, [pc, #16]	; (80137ec <RestoreNvmData+0x104>)
 80137dc:	2202      	movs	r2, #2
 80137de:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    return LORAMAC_STATUS_OK;
 80137e2:	2300      	movs	r3, #0
}
 80137e4:	4618      	mov	r0, r3
 80137e6:	3708      	adds	r7, #8
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bd80      	pop	{r7, pc}
 80137ec:	20000950 	.word	0x20000950
 80137f0:	20001584 	.word	0x20001584
 80137f4:	200015ac 	.word	0x200015ac
 80137f8:	200015c4 	.word	0x200015c4
 80137fc:	200016a4 	.word	0x200016a4
 8013800:	20001764 	.word	0x20001764
 8013804:	20001c94 	.word	0x20001c94
 8013808:	20000e5c 	.word	0x20000e5c

0801380c <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 801380c:	b480      	push	{r7}
 801380e:	b083      	sub	sp, #12
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
 8013814:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d002      	beq.n	8013822 <DetermineFrameType+0x16>
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d101      	bne.n	8013826 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013822:	2303      	movs	r3, #3
 8013824:	e03b      	b.n	801389e <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	7b1b      	ldrb	r3, [r3, #12]
 801382a:	f003 030f 	and.w	r3, r3, #15
 801382e:	b2db      	uxtb	r3, r3
 8013830:	2b00      	cmp	r3, #0
 8013832:	d008      	beq.n	8013846 <DetermineFrameType+0x3a>
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	f893 3020 	ldrb.w	r3, [r3, #32]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d003      	beq.n	8013846 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	2200      	movs	r2, #0
 8013842:	701a      	strb	r2, [r3, #0]
 8013844:	e02a      	b.n	801389c <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801384c:	2b00      	cmp	r3, #0
 801384e:	d103      	bne.n	8013858 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8013850:	683b      	ldr	r3, [r7, #0]
 8013852:	2201      	movs	r2, #1
 8013854:	701a      	strb	r2, [r3, #0]
 8013856:	e021      	b.n	801389c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	7b1b      	ldrb	r3, [r3, #12]
 801385c:	f003 030f 	and.w	r3, r3, #15
 8013860:	b2db      	uxtb	r3, r3
 8013862:	2b00      	cmp	r3, #0
 8013864:	d108      	bne.n	8013878 <DetermineFrameType+0x6c>
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	f893 3020 	ldrb.w	r3, [r3, #32]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d103      	bne.n	8013878 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	2202      	movs	r2, #2
 8013874:	701a      	strb	r2, [r3, #0]
 8013876:	e011      	b.n	801389c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	7b1b      	ldrb	r3, [r3, #12]
 801387c:	f003 030f 	and.w	r3, r3, #15
 8013880:	b2db      	uxtb	r3, r3
 8013882:	2b00      	cmp	r3, #0
 8013884:	d108      	bne.n	8013898 <DetermineFrameType+0x8c>
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	f893 3020 	ldrb.w	r3, [r3, #32]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d003      	beq.n	8013898 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8013890:	683b      	ldr	r3, [r7, #0]
 8013892:	2203      	movs	r2, #3
 8013894:	701a      	strb	r2, [r3, #0]
 8013896:	e001      	b.n	801389c <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8013898:	2318      	movs	r3, #24
 801389a:	e000      	b.n	801389e <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 801389c:	2300      	movs	r3, #0
}
 801389e:	4618      	mov	r0, r3
 80138a0:	370c      	adds	r7, #12
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bc80      	pop	{r7}
 80138a6:	4770      	bx	lr

080138a8 <CheckRetransUnconfirmedUplink>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 80138a8:	b480      	push	{r7}
 80138aa:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 80138ac:	4b12      	ldr	r3, [pc, #72]	; (80138f8 <CheckRetransUnconfirmedUplink+0x50>)
 80138ae:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 80138b2:	4b12      	ldr	r3, [pc, #72]	; (80138fc <CheckRetransUnconfirmedUplink+0x54>)
 80138b4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 80138b8:	429a      	cmp	r2, r3
 80138ba:	d301      	bcc.n	80138c0 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 80138bc:	2301      	movs	r3, #1
 80138be:	e016      	b.n	80138ee <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80138c0:	4b0d      	ldr	r3, [pc, #52]	; (80138f8 <CheckRetransUnconfirmedUplink+0x50>)
 80138c2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80138c6:	f003 0302 	and.w	r3, r3, #2
 80138ca:	b2db      	uxtb	r3, r3
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d00d      	beq.n	80138ec <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80138d0:	4b0a      	ldr	r3, [pc, #40]	; (80138fc <CheckRetransUnconfirmedUplink+0x54>)
 80138d2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d101      	bne.n	80138de <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 80138da:	2301      	movs	r3, #1
 80138dc:	e007      	b.n	80138ee <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 80138de:	4b06      	ldr	r3, [pc, #24]	; (80138f8 <CheckRetransUnconfirmedUplink+0x50>)
 80138e0:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d101      	bne.n	80138ec <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 80138e8:	2301      	movs	r3, #1
 80138ea:	e000      	b.n	80138ee <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 80138ec:	2300      	movs	r3, #0
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bc80      	pop	{r7}
 80138f4:	4770      	bx	lr
 80138f6:	bf00      	nop
 80138f8:	20000950 	.word	0x20000950
 80138fc:	20000e5c 	.word	0x20000e5c

08013900 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8013900:	b480      	push	{r7}
 8013902:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013904:	4b0e      	ldr	r3, [pc, #56]	; (8013940 <CheckRetransConfirmedUplink+0x40>)
 8013906:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 801390a:	4b0d      	ldr	r3, [pc, #52]	; (8013940 <CheckRetransConfirmedUplink+0x40>)
 801390c:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013910:	429a      	cmp	r2, r3
 8013912:	d301      	bcc.n	8013918 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8013914:	2301      	movs	r3, #1
 8013916:	e00f      	b.n	8013938 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013918:	4b09      	ldr	r3, [pc, #36]	; (8013940 <CheckRetransConfirmedUplink+0x40>)
 801391a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801391e:	f003 0302 	and.w	r3, r3, #2
 8013922:	b2db      	uxtb	r3, r3
 8013924:	2b00      	cmp	r3, #0
 8013926:	d006      	beq.n	8013936 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8013928:	4b05      	ldr	r3, [pc, #20]	; (8013940 <CheckRetransConfirmedUplink+0x40>)
 801392a:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 801392e:	2b00      	cmp	r3, #0
 8013930:	d001      	beq.n	8013936 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8013932:	2301      	movs	r3, #1
 8013934:	e000      	b.n	8013938 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8013936:	2300      	movs	r3, #0
}
 8013938:	4618      	mov	r0, r3
 801393a:	46bd      	mov	sp, r7
 801393c:	bc80      	pop	{r7}
 801393e:	4770      	bx	lr
 8013940:	20000950 	.word	0x20000950

08013944 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8013944:	b480      	push	{r7}
 8013946:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013948:	4b1a      	ldr	r3, [pc, #104]	; (80139b4 <StopRetransmission+0x70>)
 801394a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801394e:	f003 0302 	and.w	r3, r3, #2
 8013952:	b2db      	uxtb	r3, r3
 8013954:	2b00      	cmp	r3, #0
 8013956:	d009      	beq.n	801396c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013958:	4b16      	ldr	r3, [pc, #88]	; (80139b4 <StopRetransmission+0x70>)
 801395a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801395e:	2b00      	cmp	r3, #0
 8013960:	d00e      	beq.n	8013980 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8013962:	4b14      	ldr	r3, [pc, #80]	; (80139b4 <StopRetransmission+0x70>)
 8013964:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013968:	2b01      	cmp	r3, #1
 801396a:	d009      	beq.n	8013980 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 801396c:	4b12      	ldr	r3, [pc, #72]	; (80139b8 <StopRetransmission+0x74>)
 801396e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8013972:	2b00      	cmp	r3, #0
 8013974:	d004      	beq.n	8013980 <StopRetransmission+0x3c>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8013976:	4b10      	ldr	r3, [pc, #64]	; (80139b8 <StopRetransmission+0x74>)
 8013978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801397a:	3301      	adds	r3, #1
 801397c:	4a0e      	ldr	r2, [pc, #56]	; (80139b8 <StopRetransmission+0x74>)
 801397e:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8013980:	4b0c      	ldr	r3, [pc, #48]	; (80139b4 <StopRetransmission+0x70>)
 8013982:	2200      	movs	r2, #0
 8013984:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8013988:	4b0a      	ldr	r3, [pc, #40]	; (80139b4 <StopRetransmission+0x70>)
 801398a:	2200      	movs	r2, #0
 801398c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8013990:	4b08      	ldr	r3, [pc, #32]	; (80139b4 <StopRetransmission+0x70>)
 8013992:	2200      	movs	r2, #0
 8013994:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013998:	4b06      	ldr	r3, [pc, #24]	; (80139b4 <StopRetransmission+0x70>)
 801399a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801399e:	f023 0302 	bic.w	r3, r3, #2
 80139a2:	4a04      	ldr	r2, [pc, #16]	; (80139b4 <StopRetransmission+0x70>)
 80139a4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 80139a8:	2301      	movs	r3, #1
}
 80139aa:	4618      	mov	r0, r3
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bc80      	pop	{r7}
 80139b0:	4770      	bx	lr
 80139b2:	bf00      	nop
 80139b4:	20000950 	.word	0x20000950
 80139b8:	20000e5c 	.word	0x20000e5c

080139bc <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b082      	sub	sp, #8
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	4603      	mov	r3, r0
 80139c4:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80139c6:	4b0b      	ldr	r3, [pc, #44]	; (80139f4 <CallNvmDataChangeCallback+0x38>)
 80139c8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d00c      	beq.n	80139ea <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80139d0:	4b08      	ldr	r3, [pc, #32]	; (80139f4 <CallNvmDataChangeCallback+0x38>)
 80139d2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80139d6:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d006      	beq.n	80139ea <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80139dc:	4b05      	ldr	r3, [pc, #20]	; (80139f4 <CallNvmDataChangeCallback+0x38>)
 80139de:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80139e2:	68db      	ldr	r3, [r3, #12]
 80139e4:	88fa      	ldrh	r2, [r7, #6]
 80139e6:	4610      	mov	r0, r2
 80139e8:	4798      	blx	r3
    }
}
 80139ea:	bf00      	nop
 80139ec:	3708      	adds	r7, #8
 80139ee:	46bd      	mov	sp, r7
 80139f0:	bd80      	pop	{r7, pc}
 80139f2:	bf00      	nop
 80139f4:	20000950 	.word	0x20000950

080139f8 <AckTimeoutRetriesProcess>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b084      	sub	sp, #16
 80139fc:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 80139fe:	4b1b      	ldr	r3, [pc, #108]	; (8013a6c <AckTimeoutRetriesProcess+0x74>)
 8013a00:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8013a04:	4b19      	ldr	r3, [pc, #100]	; (8013a6c <AckTimeoutRetriesProcess+0x74>)
 8013a06:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d229      	bcs.n	8013a62 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8013a0e:	4b17      	ldr	r3, [pc, #92]	; (8013a6c <AckTimeoutRetriesProcess+0x74>)
 8013a10:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8013a14:	3301      	adds	r3, #1
 8013a16:	b2da      	uxtb	r2, r3
 8013a18:	4b14      	ldr	r3, [pc, #80]	; (8013a6c <AckTimeoutRetriesProcess+0x74>)
 8013a1a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8013a1e:	4b13      	ldr	r3, [pc, #76]	; (8013a6c <AckTimeoutRetriesProcess+0x74>)
 8013a20:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8013a24:	f003 0301 	and.w	r3, r3, #1
 8013a28:	b2db      	uxtb	r3, r3
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d019      	beq.n	8013a62 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013a2e:	2322      	movs	r3, #34	; 0x22
 8013a30:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013a32:	4b0f      	ldr	r3, [pc, #60]	; (8013a70 <AckTimeoutRetriesProcess+0x78>)
 8013a34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013a38:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013a3a:	4b0d      	ldr	r3, [pc, #52]	; (8013a70 <AckTimeoutRetriesProcess+0x78>)
 8013a3c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013a40:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013a42:	4b0b      	ldr	r3, [pc, #44]	; (8013a70 <AckTimeoutRetriesProcess+0x78>)
 8013a44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013a48:	f107 0208 	add.w	r2, r7, #8
 8013a4c:	4611      	mov	r1, r2
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f003 fbd6 	bl	8017200 <RegionGetPhyParam>
 8013a54:	4603      	mov	r3, r0
 8013a56:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	b25a      	sxtb	r2, r3
 8013a5c:	4b04      	ldr	r3, [pc, #16]	; (8013a70 <AckTimeoutRetriesProcess+0x78>)
 8013a5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8013a62:	bf00      	nop
 8013a64:	3710      	adds	r7, #16
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}
 8013a6a:	bf00      	nop
 8013a6c:	20000950 	.word	0x20000950
 8013a70:	20000e5c 	.word	0x20000e5c

08013a74 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b084      	sub	sp, #16
 8013a78:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8013a7a:	4b14      	ldr	r3, [pc, #80]	; (8013acc <AckTimeoutRetriesFinalize+0x58>)
 8013a7c:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8013a80:	f083 0301 	eor.w	r3, r3, #1
 8013a84:	b2db      	uxtb	r3, r3
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d015      	beq.n	8013ab6 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013a8a:	2302      	movs	r3, #2
 8013a8c:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8013a8e:	4b10      	ldr	r3, [pc, #64]	; (8013ad0 <AckTimeoutRetriesFinalize+0x5c>)
 8013a90:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8013a92:	4b10      	ldr	r3, [pc, #64]	; (8013ad4 <AckTimeoutRetriesFinalize+0x60>)
 8013a94:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013a96:	4b10      	ldr	r3, [pc, #64]	; (8013ad8 <AckTimeoutRetriesFinalize+0x64>)
 8013a98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013a9c:	1d3a      	adds	r2, r7, #4
 8013a9e:	4611      	mov	r1, r2
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	f003 fbd6 	bl	8017252 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8013aa6:	4b09      	ldr	r3, [pc, #36]	; (8013acc <AckTimeoutRetriesFinalize+0x58>)
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8013aae:	4b07      	ldr	r3, [pc, #28]	; (8013acc <AckTimeoutRetriesFinalize+0x58>)
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8013ab6:	4b05      	ldr	r3, [pc, #20]	; (8013acc <AckTimeoutRetriesFinalize+0x58>)
 8013ab8:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8013abc:	4b03      	ldr	r3, [pc, #12]	; (8013acc <AckTimeoutRetriesFinalize+0x58>)
 8013abe:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8013ac2:	bf00      	nop
 8013ac4:	3710      	adds	r7, #16
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}
 8013aca:	bf00      	nop
 8013acc:	20000950 	.word	0x20000950
 8013ad0:	2000103c 	.word	0x2000103c
 8013ad4:	200010d0 	.word	0x200010d0
 8013ad8:	20000e5c 	.word	0x20000e5c

08013adc <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8013adc:	b480      	push	{r7}
 8013ade:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013ae0:	4b0b      	ldr	r3, [pc, #44]	; (8013b10 <IsRequestPending+0x34>)
 8013ae2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8013ae6:	f003 0304 	and.w	r3, r3, #4
 8013aea:	b2db      	uxtb	r3, r3
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d107      	bne.n	8013b00 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8013af0:	4b07      	ldr	r3, [pc, #28]	; (8013b10 <IsRequestPending+0x34>)
 8013af2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8013af6:	f003 0301 	and.w	r3, r3, #1
 8013afa:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d001      	beq.n	8013b04 <IsRequestPending+0x28>
    {
        return 1;
 8013b00:	2301      	movs	r3, #1
 8013b02:	e000      	b.n	8013b06 <IsRequestPending+0x2a>
    }
    return 0;
 8013b04:	2300      	movs	r3, #0
}
 8013b06:	4618      	mov	r0, r3
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bc80      	pop	{r7}
 8013b0c:	4770      	bx	lr
 8013b0e:	bf00      	nop
 8013b10:	20000950 	.word	0x20000950

08013b14 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8013b14:	b590      	push	{r4, r7, lr}
 8013b16:	b08f      	sub	sp, #60	; 0x3c
 8013b18:	af02      	add	r7, sp, #8
 8013b1a:	6178      	str	r0, [r7, #20]
 8013b1c:	6139      	str	r1, [r7, #16]
 8013b1e:	4613      	mov	r3, r2
 8013b20:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8013b22:	697b      	ldr	r3, [r7, #20]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d002      	beq.n	8013b2e <LoRaMacInitialization+0x1a>
 8013b28:	693b      	ldr	r3, [r7, #16]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d101      	bne.n	8013b32 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013b2e:	2303      	movs	r3, #3
 8013b30:	e275      	b.n	801401e <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d00b      	beq.n	8013b52 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8013b3a:	697b      	ldr	r3, [r7, #20]
 8013b3c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d007      	beq.n	8013b52 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d003      	beq.n	8013b52 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8013b4a:	697b      	ldr	r3, [r7, #20]
 8013b4c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d101      	bne.n	8013b56 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013b52:	2303      	movs	r3, #3
 8013b54:	e263      	b.n	801401e <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8013b56:	7bfb      	ldrb	r3, [r7, #15]
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f003 fb41 	bl	80171e0 <RegionIsActive>
 8013b5e:	4603      	mov	r3, r0
 8013b60:	f083 0301 	eor.w	r3, r3, #1
 8013b64:	b2db      	uxtb	r3, r3
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d001      	beq.n	8013b6e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013b6a:	2309      	movs	r3, #9
 8013b6c:	e257      	b.n	801401e <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8013b6e:	6978      	ldr	r0, [r7, #20]
 8013b70:	f001 ffb8 	bl	8015ae4 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8013b74:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8013b78:	2100      	movs	r1, #0
 8013b7a:	48c7      	ldr	r0, [pc, #796]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013b7c:	f005 fe8e 	bl	801989c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8013b80:	f240 520c 	movw	r2, #1292	; 0x50c
 8013b84:	2100      	movs	r1, #0
 8013b86:	48c5      	ldr	r0, [pc, #788]	; (8013e9c <LoRaMacInitialization+0x388>)
 8013b88:	f005 fe88 	bl	801989c <memset1>

    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013b8c:	4bc3      	ldr	r3, [pc, #780]	; (8013e9c <LoRaMacInitialization+0x388>)
 8013b8e:	2201      	movs	r2, #1
 8013b90:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8013b94:	4bc1      	ldr	r3, [pc, #772]	; (8013e9c <LoRaMacInitialization+0x388>)
 8013b96:	2201      	movs	r2, #1
 8013b98:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8013b9c:	4abe      	ldr	r2, [pc, #760]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013b9e:	7bfb      	ldrb	r3, [r7, #15]
 8013ba0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8013ba4:	4bbc      	ldr	r3, [pc, #752]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8013bac:	4bba      	ldr	r3, [pc, #744]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013bae:	2200      	movs	r2, #0
 8013bb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8013bb4:	4bb8      	ldr	r3, [pc, #736]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013bb6:	4aba      	ldr	r2, [pc, #744]	; (8013ea0 <LoRaMacInitialization+0x38c>)
 8013bb8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8013bbc:	230f      	movs	r3, #15
 8013bbe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013bc2:	4bb5      	ldr	r3, [pc, #724]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013bc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013bc8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013bcc:	4611      	mov	r1, r2
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f003 fb16 	bl	8017200 <RegionGetPhyParam>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8013bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	bf14      	ite	ne
 8013bde:	2301      	movne	r3, #1
 8013be0:	2300      	moveq	r3, #0
 8013be2:	b2da      	uxtb	r2, r3
 8013be4:	4bac      	ldr	r3, [pc, #688]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013be6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8013bea:	230a      	movs	r3, #10
 8013bec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013bf0:	4ba9      	ldr	r3, [pc, #676]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013bf6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013bfa:	4611      	mov	r1, r2
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f003 faff 	bl	8017200 <RegionGetPhyParam>
 8013c02:	4603      	mov	r3, r0
 8013c04:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8013c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c08:	b25a      	sxtb	r2, r3
 8013c0a:	4ba3      	ldr	r3, [pc, #652]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013c0c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8013c10:	2306      	movs	r3, #6
 8013c12:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c16:	4ba0      	ldr	r3, [pc, #640]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013c18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013c1c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013c20:	4611      	mov	r1, r2
 8013c22:	4618      	mov	r0, r3
 8013c24:	f003 faec 	bl	8017200 <RegionGetPhyParam>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8013c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2e:	b25a      	sxtb	r2, r3
 8013c30:	4b99      	ldr	r3, [pc, #612]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013c32:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8013c36:	2310      	movs	r3, #16
 8013c38:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c3c:	4b96      	ldr	r3, [pc, #600]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013c42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013c46:	4611      	mov	r1, r2
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f003 fad9 	bl	8017200 <RegionGetPhyParam>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8013c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c54:	4a90      	ldr	r2, [pc, #576]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8013c5a:	2311      	movs	r3, #17
 8013c5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c60:	4b8d      	ldr	r3, [pc, #564]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013c66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013c6a:	4611      	mov	r1, r2
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f003 fac7 	bl	8017200 <RegionGetPhyParam>
 8013c72:	4603      	mov	r3, r0
 8013c74:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8013c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c78:	4a87      	ldr	r2, [pc, #540]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013c7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8013c7e:	2312      	movs	r3, #18
 8013c80:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c84:	4b84      	ldr	r3, [pc, #528]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013c8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013c8e:	4611      	mov	r1, r2
 8013c90:	4618      	mov	r0, r3
 8013c92:	f003 fab5 	bl	8017200 <RegionGetPhyParam>
 8013c96:	4603      	mov	r3, r0
 8013c98:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8013c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c9c:	4a7e      	ldr	r2, [pc, #504]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013c9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8013ca2:	2313      	movs	r3, #19
 8013ca4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013ca8:	4b7b      	ldr	r3, [pc, #492]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013caa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013cae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013cb2:	4611      	mov	r1, r2
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f003 faa3 	bl	8017200 <RegionGetPhyParam>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8013cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc0:	4a75      	ldr	r2, [pc, #468]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013cc2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8013cc6:	2314      	movs	r3, #20
 8013cc8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013ccc:	4b72      	ldr	r3, [pc, #456]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013cce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013cd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013cd6:	4611      	mov	r1, r2
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f003 fa91 	bl	8017200 <RegionGetPhyParam>
 8013cde:	4603      	mov	r3, r0
 8013ce0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8013ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce4:	4a6c      	ldr	r2, [pc, #432]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013ce6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8013cea:	2317      	movs	r3, #23
 8013cec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013cf0:	4b69      	ldr	r3, [pc, #420]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013cf6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013cfa:	4611      	mov	r1, r2
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f003 fa7f 	bl	8017200 <RegionGetPhyParam>
 8013d02:	4603      	mov	r3, r0
 8013d04:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8013d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d08:	b2da      	uxtb	r2, r3
 8013d0a:	4b63      	ldr	r3, [pc, #396]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013d0c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8013d10:	2318      	movs	r3, #24
 8013d12:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013d16:	4b60      	ldr	r3, [pc, #384]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013d18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013d1c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013d20:	4611      	mov	r1, r2
 8013d22:	4618      	mov	r0, r3
 8013d24:	f003 fa6c 	bl	8017200 <RegionGetPhyParam>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8013d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d2e:	4a5a      	ldr	r2, [pc, #360]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013d30:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8013d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d36:	4a58      	ldr	r2, [pc, #352]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013d38:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8013d3c:	2319      	movs	r3, #25
 8013d3e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013d42:	4b55      	ldr	r3, [pc, #340]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013d44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013d48:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013d4c:	4611      	mov	r1, r2
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f003 fa56 	bl	8017200 <RegionGetPhyParam>
 8013d54:	4603      	mov	r3, r0
 8013d56:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8013d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d5a:	b2da      	uxtb	r2, r3
 8013d5c:	4b4e      	ldr	r3, [pc, #312]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013d5e:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8013d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d64:	b2da      	uxtb	r2, r3
 8013d66:	4b4c      	ldr	r3, [pc, #304]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013d68:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8013d6c:	231e      	movs	r3, #30
 8013d6e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013d72:	4b49      	ldr	r3, [pc, #292]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013d74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013d78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013d7c:	4611      	mov	r1, r2
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f003 fa3e 	bl	8017200 <RegionGetPhyParam>
 8013d84:	4603      	mov	r3, r0
 8013d86:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8013d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8a:	b2da      	uxtb	r2, r3
 8013d8c:	4b42      	ldr	r3, [pc, #264]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013d8e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8013d92:	231f      	movs	r3, #31
 8013d94:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013d98:	4b3f      	ldr	r3, [pc, #252]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013d9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013da2:	4611      	mov	r1, r2
 8013da4:	4618      	mov	r0, r3
 8013da6:	f003 fa2b 	bl	8017200 <RegionGetPhyParam>
 8013daa:	4603      	mov	r3, r0
 8013dac:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8013dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db0:	b2da      	uxtb	r2, r3
 8013db2:	4b39      	ldr	r3, [pc, #228]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013db4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8013db8:	2320      	movs	r3, #32
 8013dba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013dbe:	4b36      	ldr	r3, [pc, #216]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013dc4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013dc8:	4611      	mov	r1, r2
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f003 fa18 	bl	8017200 <RegionGetPhyParam>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8013dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd6:	4a30      	ldr	r2, [pc, #192]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013dd8:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8013ddc:	2321      	movs	r3, #33	; 0x21
 8013dde:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013de2:	4b2d      	ldr	r3, [pc, #180]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013de8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013dec:	4611      	mov	r1, r2
 8013dee:	4618      	mov	r0, r3
 8013df0:	f003 fa06 	bl	8017200 <RegionGetPhyParam>
 8013df4:	4603      	mov	r3, r0
 8013df6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8013df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dfa:	4a27      	ldr	r2, [pc, #156]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013dfc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8013e00:	230b      	movs	r3, #11
 8013e02:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013e06:	4b24      	ldr	r3, [pc, #144]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013e08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013e0c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013e10:	4611      	mov	r1, r2
 8013e12:	4618      	mov	r0, r3
 8013e14:	f003 f9f4 	bl	8017200 <RegionGetPhyParam>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8013e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e1e:	b29a      	uxth	r2, r3
 8013e20:	4b1e      	ldr	r3, [pc, #120]	; (8013e9c <LoRaMacInitialization+0x388>)
 8013e22:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8013e26:	230c      	movs	r3, #12
 8013e28:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013e2c:	4b1a      	ldr	r3, [pc, #104]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013e32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013e36:	4611      	mov	r1, r2
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f003 f9e1 	bl	8017200 <RegionGetPhyParam>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8013e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e44:	b29a      	uxth	r2, r3
 8013e46:	4b15      	ldr	r3, [pc, #84]	; (8013e9c <LoRaMacInitialization+0x388>)
 8013e48:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8013e4c:	4b12      	ldr	r3, [pc, #72]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013e4e:	2201      	movs	r2, #1
 8013e50:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8013e54:	4b10      	ldr	r3, [pc, #64]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013e56:	220a      	movs	r2, #10
 8013e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8013e5c:	4b0e      	ldr	r3, [pc, #56]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013e5e:	2206      	movs	r2, #6
 8013e60:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8013e64:	4b0c      	ldr	r3, [pc, #48]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013e6a:	4a0b      	ldr	r2, [pc, #44]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013e6c:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8013e6e:	4b0a      	ldr	r3, [pc, #40]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013e70:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8013e74:	4b08      	ldr	r3, [pc, #32]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013e76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8013e7a:	4b07      	ldr	r3, [pc, #28]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e80:	4a05      	ldr	r2, [pc, #20]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013e82:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8013e84:	4b04      	ldr	r3, [pc, #16]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013e8a:	4a03      	ldr	r2, [pc, #12]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013e8c:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8013e8e:	4b02      	ldr	r3, [pc, #8]	; (8013e98 <LoRaMacInitialization+0x384>)
 8013e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013e94:	e006      	b.n	8013ea4 <LoRaMacInitialization+0x390>
 8013e96:	bf00      	nop
 8013e98:	20000e5c 	.word	0x20000e5c
 8013e9c:	20000950 	.word	0x20000950
 8013ea0:	01000300 	.word	0x01000300
 8013ea4:	4a60      	ldr	r2, [pc, #384]	; (8014028 <LoRaMacInitialization+0x514>)
 8013ea6:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8013ea8:	4b5f      	ldr	r3, [pc, #380]	; (8014028 <LoRaMacInitialization+0x514>)
 8013eaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013eae:	4a5e      	ldr	r2, [pc, #376]	; (8014028 <LoRaMacInitialization+0x514>)
 8013eb0:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8013eb2:	4b5d      	ldr	r3, [pc, #372]	; (8014028 <LoRaMacInitialization+0x514>)
 8013eb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013eb8:	4a5b      	ldr	r2, [pc, #364]	; (8014028 <LoRaMacInitialization+0x514>)
 8013eba:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8013ebc:	4b5a      	ldr	r3, [pc, #360]	; (8014028 <LoRaMacInitialization+0x514>)
 8013ebe:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8013ec2:	4b59      	ldr	r3, [pc, #356]	; (8014028 <LoRaMacInitialization+0x514>)
 8013ec4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8013ec8:	2300      	movs	r3, #0
 8013eca:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8013ece:	4b57      	ldr	r3, [pc, #348]	; (801402c <LoRaMacInitialization+0x518>)
 8013ed0:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013ed2:	4b57      	ldr	r3, [pc, #348]	; (8014030 <LoRaMacInitialization+0x51c>)
 8013ed4:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013ed6:	4b54      	ldr	r3, [pc, #336]	; (8014028 <LoRaMacInitialization+0x514>)
 8013ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013edc:	f107 0218 	add.w	r2, r7, #24
 8013ee0:	4611      	mov	r1, r2
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f003 f9b5 	bl	8017252 <RegionInitDefaults>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8013ee8:	4a52      	ldr	r2, [pc, #328]	; (8014034 <LoRaMacInitialization+0x520>)
 8013eea:	693b      	ldr	r3, [r7, #16]
 8013eec:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8013ef0:	f7ff f87e 	bl	8012ff0 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8013ef4:	4b4c      	ldr	r3, [pc, #304]	; (8014028 <LoRaMacInitialization+0x514>)
 8013ef6:	2201      	movs	r2, #1
 8013ef8:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 8013efc:	4a4d      	ldr	r2, [pc, #308]	; (8014034 <LoRaMacInitialization+0x520>)
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8013f04:	4b4b      	ldr	r3, [pc, #300]	; (8014034 <LoRaMacInitialization+0x520>)
 8013f06:	2200      	movs	r2, #0
 8013f08:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 8013f0c:	4b49      	ldr	r3, [pc, #292]	; (8014034 <LoRaMacInitialization+0x520>)
 8013f0e:	2201      	movs	r2, #1
 8013f10:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8013f14:	4b44      	ldr	r3, [pc, #272]	; (8014028 <LoRaMacInitialization+0x514>)
 8013f16:	2200      	movs	r2, #0
 8013f18:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8013f1a:	4b43      	ldr	r3, [pc, #268]	; (8014028 <LoRaMacInitialization+0x514>)
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8013f20:	2300      	movs	r3, #0
 8013f22:	9300      	str	r3, [sp, #0]
 8013f24:	4b44      	ldr	r3, [pc, #272]	; (8014038 <LoRaMacInitialization+0x524>)
 8013f26:	2200      	movs	r2, #0
 8013f28:	f04f 31ff 	mov.w	r1, #4294967295
 8013f2c:	4843      	ldr	r0, [pc, #268]	; (801403c <LoRaMacInitialization+0x528>)
 8013f2e:	f009 fd1f 	bl	801d970 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8013f32:	2300      	movs	r3, #0
 8013f34:	9300      	str	r3, [sp, #0]
 8013f36:	4b42      	ldr	r3, [pc, #264]	; (8014040 <LoRaMacInitialization+0x52c>)
 8013f38:	2200      	movs	r2, #0
 8013f3a:	f04f 31ff 	mov.w	r1, #4294967295
 8013f3e:	4841      	ldr	r0, [pc, #260]	; (8014044 <LoRaMacInitialization+0x530>)
 8013f40:	f009 fd16 	bl	801d970 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8013f44:	2300      	movs	r3, #0
 8013f46:	9300      	str	r3, [sp, #0]
 8013f48:	4b3f      	ldr	r3, [pc, #252]	; (8014048 <LoRaMacInitialization+0x534>)
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8013f50:	483e      	ldr	r0, [pc, #248]	; (801404c <LoRaMacInitialization+0x538>)
 8013f52:	f009 fd0d 	bl	801d970 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8013f56:	2300      	movs	r3, #0
 8013f58:	9300      	str	r3, [sp, #0]
 8013f5a:	4b3d      	ldr	r3, [pc, #244]	; (8014050 <LoRaMacInitialization+0x53c>)
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	f04f 31ff 	mov.w	r1, #4294967295
 8013f62:	483c      	ldr	r0, [pc, #240]	; (8014054 <LoRaMacInitialization+0x540>)
 8013f64:	f009 fd04 	bl	801d970 <UTIL_TIMER_Create>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8013f68:	4c2f      	ldr	r4, [pc, #188]	; (8014028 <LoRaMacInitialization+0x514>)
 8013f6a:	463b      	mov	r3, r7
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f009 f873 	bl	801d058 <SysTimeGetMcuTime>
 8013f72:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8013f76:	463a      	mov	r2, r7
 8013f78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013f7c:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8013f80:	4b2c      	ldr	r3, [pc, #176]	; (8014034 <LoRaMacInitialization+0x520>)
 8013f82:	4a35      	ldr	r2, [pc, #212]	; (8014058 <LoRaMacInitialization+0x544>)
 8013f84:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8013f88:	4b2a      	ldr	r3, [pc, #168]	; (8014034 <LoRaMacInitialization+0x520>)
 8013f8a:	4a34      	ldr	r2, [pc, #208]	; (801405c <LoRaMacInitialization+0x548>)
 8013f8c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8013f90:	4b28      	ldr	r3, [pc, #160]	; (8014034 <LoRaMacInitialization+0x520>)
 8013f92:	4a33      	ldr	r2, [pc, #204]	; (8014060 <LoRaMacInitialization+0x54c>)
 8013f94:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8013f98:	4b26      	ldr	r3, [pc, #152]	; (8014034 <LoRaMacInitialization+0x520>)
 8013f9a:	4a32      	ldr	r2, [pc, #200]	; (8014064 <LoRaMacInitialization+0x550>)
 8013f9c:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8013fa0:	4b24      	ldr	r3, [pc, #144]	; (8014034 <LoRaMacInitialization+0x520>)
 8013fa2:	4a31      	ldr	r2, [pc, #196]	; (8014068 <LoRaMacInitialization+0x554>)
 8013fa4:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8013fa8:	4b30      	ldr	r3, [pc, #192]	; (801406c <LoRaMacInitialization+0x558>)
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	4830      	ldr	r0, [pc, #192]	; (8014070 <LoRaMacInitialization+0x55c>)
 8013fae:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8013fb0:	693b      	ldr	r3, [r7, #16]
 8013fb2:	689b      	ldr	r3, [r3, #8]
 8013fb4:	4619      	mov	r1, r3
 8013fb6:	482f      	ldr	r0, [pc, #188]	; (8014074 <LoRaMacInitialization+0x560>)
 8013fb8:	f7fa fe24 	bl	800ec04 <SecureElementInit>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d001      	beq.n	8013fc6 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013fc2:	2311      	movs	r3, #17
 8013fc4:	e02b      	b.n	801401e <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8013fc6:	4818      	ldr	r0, [pc, #96]	; (8014028 <LoRaMacInitialization+0x514>)
 8013fc8:	f002 fa38 	bl	801643c <LoRaMacCryptoInit>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d001      	beq.n	8013fd6 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013fd2:	2311      	movs	r3, #17
 8013fd4:	e023      	b.n	801401e <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8013fd6:	f001 fb57 	bl	8015688 <LoRaMacCommandsInit>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d001      	beq.n	8013fe4 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013fe0:	2313      	movs	r3, #19
 8013fe2:	e01c      	b.n	801401e <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8013fe4:	4824      	ldr	r0, [pc, #144]	; (8014078 <LoRaMacInitialization+0x564>)
 8013fe6:	f002 faf3 	bl	80165d0 <LoRaMacCryptoSetMulticastReference>
 8013fea:	4603      	mov	r3, r0
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d001      	beq.n	8013ff4 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013ff0:	2311      	movs	r3, #17
 8013ff2:	e014      	b.n	801401e <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8013ff4:	4b1d      	ldr	r3, [pc, #116]	; (801406c <LoRaMacInitialization+0x558>)
 8013ff6:	695b      	ldr	r3, [r3, #20]
 8013ff8:	4798      	blx	r3
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f005 fbed 	bl	80197dc <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014002:	4b1a      	ldr	r3, [pc, #104]	; (801406c <LoRaMacInitialization+0x558>)
 8014004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014006:	4a08      	ldr	r2, [pc, #32]	; (8014028 <LoRaMacInitialization+0x514>)
 8014008:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 801400c:	4610      	mov	r0, r2
 801400e:	4798      	blx	r3
    Radio.Sleep( );
 8014010:	4b16      	ldr	r3, [pc, #88]	; (801406c <LoRaMacInitialization+0x558>)
 8014012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014014:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8014016:	2001      	movs	r0, #1
 8014018:	f7fd faf2 	bl	8011600 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801401c:	2300      	movs	r3, #0
}
 801401e:	4618      	mov	r0, r3
 8014020:	3734      	adds	r7, #52	; 0x34
 8014022:	46bd      	mov	sp, r7
 8014024:	bd90      	pop	{r4, r7, pc}
 8014026:	bf00      	nop
 8014028:	20000e5c 	.word	0x20000e5c
 801402c:	2000103c 	.word	0x2000103c
 8014030:	200010d0 	.word	0x200010d0
 8014034:	20000950 	.word	0x20000950
 8014038:	08011b6d 	.word	0x08011b6d
 801403c:	20000cb8 	.word	0x20000cb8
 8014040:	08011be1 	.word	0x08011be1
 8014044:	20000cd0 	.word	0x20000cd0
 8014048:	08011c4d 	.word	0x08011c4d
 801404c:	20000ce8 	.word	0x20000ce8
 8014050:	08011cc1 	.word	0x08011cc1
 8014054:	20000d48 	.word	0x20000d48
 8014058:	0801077d 	.word	0x0801077d
 801405c:	080107f5 	.word	0x080107f5
 8014060:	080108cd 	.word	0x080108cd
 8014064:	08010881 	.word	0x08010881
 8014068:	08010909 	.word	0x08010909
 801406c:	0801f374 	.word	0x0801f374
 8014070:	20000c9c 	.word	0x20000c9c
 8014074:	20000f7c 	.word	0x20000f7c
 8014078:	20000f34 	.word	0x20000f34

0801407c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 801407c:	b480      	push	{r7}
 801407e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8014080:	4b04      	ldr	r3, [pc, #16]	; (8014094 <LoRaMacStart+0x18>)
 8014082:	2200      	movs	r2, #0
 8014084:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8014088:	2300      	movs	r3, #0
}
 801408a:	4618      	mov	r0, r3
 801408c:	46bd      	mov	sp, r7
 801408e:	bc80      	pop	{r7}
 8014090:	4770      	bx	lr
 8014092:	bf00      	nop
 8014094:	20000950 	.word	0x20000950

08014098 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8014098:	b580      	push	{r7, lr}
 801409a:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 801409c:	f7fd fa9a 	bl	80115d4 <LoRaMacIsBusy>
 80140a0:	4603      	mov	r3, r0
 80140a2:	f083 0301 	eor.w	r3, r3, #1
 80140a6:	b2db      	uxtb	r3, r3
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d005      	beq.n	80140b8 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 80140ac:	4b07      	ldr	r3, [pc, #28]	; (80140cc <LoRaMacStop+0x34>)
 80140ae:	2201      	movs	r2, #1
 80140b0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 80140b4:	2300      	movs	r3, #0
 80140b6:	e007      	b.n	80140c8 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80140b8:	4b04      	ldr	r3, [pc, #16]	; (80140cc <LoRaMacStop+0x34>)
 80140ba:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80140be:	2b01      	cmp	r3, #1
 80140c0:	d101      	bne.n	80140c6 <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 80140c2:	2300      	movs	r3, #0
 80140c4:	e000      	b.n	80140c8 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 80140c6:	2301      	movs	r3, #1
}
 80140c8:	4618      	mov	r0, r3
 80140ca:	bd80      	pop	{r7, pc}
 80140cc:	20000950 	.word	0x20000950

080140d0 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80140d4:	4812      	ldr	r0, [pc, #72]	; (8014120 <LoRaMacHalt+0x50>)
 80140d6:	f009 fcef 	bl	801dab8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80140da:	4812      	ldr	r0, [pc, #72]	; (8014124 <LoRaMacHalt+0x54>)
 80140dc:	f009 fcec 	bl	801dab8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80140e0:	4811      	ldr	r0, [pc, #68]	; (8014128 <LoRaMacHalt+0x58>)
 80140e2:	f009 fce9 	bl	801dab8 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 80140e6:	4811      	ldr	r0, [pc, #68]	; (801412c <LoRaMacHalt+0x5c>)
 80140e8:	f009 fce6 	bl	801dab8 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80140ec:	f001 f957 	bl	801539e <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80140f0:	4b0f      	ldr	r3, [pc, #60]	; (8014130 <LoRaMacHalt+0x60>)
 80140f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140f4:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80140f6:	4b0f      	ldr	r3, [pc, #60]	; (8014134 <LoRaMacHalt+0x64>)
 80140f8:	2200      	movs	r2, #0
 80140fa:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 80140fe:	480e      	ldr	r0, [pc, #56]	; (8014138 <LoRaMacHalt+0x68>)
 8014100:	f7fd fc2e 	bl	8011960 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8014104:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8014108:	490b      	ldr	r1, [pc, #44]	; (8014138 <LoRaMacHalt+0x68>)
 801410a:	480c      	ldr	r0, [pc, #48]	; (801413c <LoRaMacHalt+0x6c>)
 801410c:	f005 fb8b 	bl	8019826 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8014110:	4b08      	ldr	r3, [pc, #32]	; (8014134 <LoRaMacHalt+0x64>)
 8014112:	2201      	movs	r2, #1
 8014114:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8014118:	2300      	movs	r3, #0
}
 801411a:	4618      	mov	r0, r3
 801411c:	bd80      	pop	{r7, pc}
 801411e:	bf00      	nop
 8014120:	20000cb8 	.word	0x20000cb8
 8014124:	20000cd0 	.word	0x20000cd0
 8014128:	20000ce8 	.word	0x20000ce8
 801412c:	20000d48 	.word	0x20000d48
 8014130:	0801f374 	.word	0x0801f374
 8014134:	20000950 	.word	0x20000950
 8014138:	20000e5c 	.word	0x20000e5c
 801413c:	20001584 	.word	0x20001584

08014140 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b08a      	sub	sp, #40	; 0x28
 8014144:	af00      	add	r7, sp, #0
 8014146:	4603      	mov	r3, r0
 8014148:	6039      	str	r1, [r7, #0]
 801414a:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801414c:	4b3e      	ldr	r3, [pc, #248]	; (8014248 <LoRaMacQueryTxPossible+0x108>)
 801414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014150:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014152:	4b3d      	ldr	r3, [pc, #244]	; (8014248 <LoRaMacQueryTxPossible+0x108>)
 8014154:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8014158:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801415a:	4b3b      	ldr	r3, [pc, #236]	; (8014248 <LoRaMacQueryTxPossible+0x108>)
 801415c:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 8014160:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8014162:	2300      	movs	r3, #0
 8014164:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8014166:	683b      	ldr	r3, [r7, #0]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d101      	bne.n	8014170 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801416c:	2303      	movs	r3, #3
 801416e:	e066      	b.n	801423e <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8014170:	4b35      	ldr	r3, [pc, #212]	; (8014248 <LoRaMacQueryTxPossible+0x108>)
 8014172:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8014176:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8014178:	2300      	movs	r3, #0
 801417a:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801417c:	4b32      	ldr	r3, [pc, #200]	; (8014248 <LoRaMacQueryTxPossible+0x108>)
 801417e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8014182:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014184:	4b30      	ldr	r3, [pc, #192]	; (8014248 <LoRaMacQueryTxPossible+0x108>)
 8014186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014188:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 801418a:	4b30      	ldr	r3, [pc, #192]	; (801424c <LoRaMacQueryTxPossible+0x10c>)
 801418c:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8014190:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8014192:	4b2e      	ldr	r3, [pc, #184]	; (801424c <LoRaMacQueryTxPossible+0x10c>)
 8014194:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8014198:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801419a:	4b2b      	ldr	r3, [pc, #172]	; (8014248 <LoRaMacQueryTxPossible+0x108>)
 801419c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80141a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80141a4:	4b28      	ldr	r3, [pc, #160]	; (8014248 <LoRaMacQueryTxPossible+0x108>)
 80141a6:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80141aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80141ae:	4b26      	ldr	r3, [pc, #152]	; (8014248 <LoRaMacQueryTxPossible+0x108>)
 80141b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80141b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80141b8:	4b23      	ldr	r3, [pc, #140]	; (8014248 <LoRaMacQueryTxPossible+0x108>)
 80141ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80141be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80141c2:	f107 0310 	add.w	r3, r7, #16
 80141c6:	f107 020e 	add.w	r2, r7, #14
 80141ca:	f107 010f 	add.w	r1, r7, #15
 80141ce:	f107 0014 	add.w	r0, r7, #20
 80141d2:	f001 f84f 	bl	8015274 <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80141d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141da:	4618      	mov	r0, r3
 80141dc:	f7fd feb8 	bl	8011f50 <GetMaxAppPayloadWithoutFOptsLength>
 80141e0:	4603      	mov	r3, r0
 80141e2:	461a      	mov	r2, r3
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80141e8:	f107 0308 	add.w	r3, r7, #8
 80141ec:	4618      	mov	r0, r3
 80141ee:	f001 fb19 	bl	8015824 <LoRaMacCommandsGetSizeSerializedCmds>
 80141f2:	4603      	mov	r3, r0
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d001      	beq.n	80141fc <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80141f8:	2313      	movs	r3, #19
 80141fa:	e020      	b.n	801423e <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	2b0f      	cmp	r3, #15
 8014200:	d819      	bhi.n	8014236 <LoRaMacQueryTxPossible+0xf6>
 8014202:	683b      	ldr	r3, [r7, #0]
 8014204:	785b      	ldrb	r3, [r3, #1]
 8014206:	461a      	mov	r2, r3
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	429a      	cmp	r2, r3
 801420c:	d313      	bcc.n	8014236 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 801420e:	683b      	ldr	r3, [r7, #0]
 8014210:	785a      	ldrb	r2, [r3, #1]
 8014212:	68bb      	ldr	r3, [r7, #8]
 8014214:	b2db      	uxtb	r3, r3
 8014216:	1ad3      	subs	r3, r2, r3
 8014218:	b2da      	uxtb	r2, r3
 801421a:	683b      	ldr	r3, [r7, #0]
 801421c:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 801421e:	683b      	ldr	r3, [r7, #0]
 8014220:	785b      	ldrb	r3, [r3, #1]
 8014222:	4619      	mov	r1, r3
 8014224:	79fa      	ldrb	r2, [r7, #7]
 8014226:	68bb      	ldr	r3, [r7, #8]
 8014228:	4413      	add	r3, r2
 801422a:	4299      	cmp	r1, r3
 801422c:	d301      	bcc.n	8014232 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 801422e:	2300      	movs	r3, #0
 8014230:	e005      	b.n	801423e <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8014232:	2308      	movs	r3, #8
 8014234:	e003      	b.n	801423e <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8014236:	683b      	ldr	r3, [r7, #0]
 8014238:	2200      	movs	r2, #0
 801423a:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 801423c:	2308      	movs	r3, #8
    }
}
 801423e:	4618      	mov	r0, r3
 8014240:	3728      	adds	r7, #40	; 0x28
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}
 8014246:	bf00      	nop
 8014248:	20000e5c 	.word	0x20000e5c
 801424c:	20000950 	.word	0x20000950

08014250 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8014250:	b590      	push	{r4, r7, lr}
 8014252:	b087      	sub	sp, #28
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014258:	2300      	movs	r3, #0
 801425a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d101      	bne.n	8014266 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014262:	2303      	movs	r3, #3
 8014264:	e171      	b.n	801454a <LoRaMacMibGetRequestConfirm+0x2fa>
    }

    switch( mibGet->Type )
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	781b      	ldrb	r3, [r3, #0]
 801426a:	2b37      	cmp	r3, #55	; 0x37
 801426c:	f200 8166 	bhi.w	801453c <LoRaMacMibGetRequestConfirm+0x2ec>
 8014270:	a201      	add	r2, pc, #4	; (adr r2, 8014278 <LoRaMacMibGetRequestConfirm+0x28>)
 8014272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014276:	bf00      	nop
 8014278:	08014359 	.word	0x08014359
 801427c:	08014365 	.word	0x08014365
 8014280:	08014371 	.word	0x08014371
 8014284:	0801437d 	.word	0x0801437d
 8014288:	08014389 	.word	0x08014389
 801428c:	08014395 	.word	0x08014395
 8014290:	080143a1 	.word	0x080143a1
 8014294:	0801453d 	.word	0x0801453d
 8014298:	0801453d 	.word	0x0801453d
 801429c:	0801453d 	.word	0x0801453d
 80142a0:	0801453d 	.word	0x0801453d
 80142a4:	0801453d 	.word	0x0801453d
 80142a8:	0801453d 	.word	0x0801453d
 80142ac:	0801453d 	.word	0x0801453d
 80142b0:	0801453d 	.word	0x0801453d
 80142b4:	080143ad 	.word	0x080143ad
 80142b8:	080143b9 	.word	0x080143b9
 80142bc:	080143c5 	.word	0x080143c5
 80142c0:	080143e7 	.word	0x080143e7
 80142c4:	080143f9 	.word	0x080143f9
 80142c8:	0801440b 	.word	0x0801440b
 80142cc:	0801441d 	.word	0x0801441d
 80142d0:	08014451 	.word	0x08014451
 80142d4:	0801442f 	.word	0x0801442f
 80142d8:	08014473 	.word	0x08014473
 80142dc:	0801447f 	.word	0x0801447f
 80142e0:	08014489 	.word	0x08014489
 80142e4:	08014493 	.word	0x08014493
 80142e8:	0801449d 	.word	0x0801449d
 80142ec:	080144a7 	.word	0x080144a7
 80142f0:	080144b1 	.word	0x080144b1
 80142f4:	080144bd 	.word	0x080144bd
 80142f8:	080144d5 	.word	0x080144d5
 80142fc:	080144c9 	.word	0x080144c9
 8014300:	080144e1 	.word	0x080144e1
 8014304:	080144eb 	.word	0x080144eb
 8014308:	080144f7 	.word	0x080144f7
 801430c:	08014511 	.word	0x08014511
 8014310:	08014501 	.word	0x08014501
 8014314:	08014509 	.word	0x08014509
 8014318:	0801453d 	.word	0x0801453d
 801431c:	0801451d 	.word	0x0801451d
 8014320:	0801453d 	.word	0x0801453d
 8014324:	0801453d 	.word	0x0801453d
 8014328:	0801453d 	.word	0x0801453d
 801432c:	0801453d 	.word	0x0801453d
 8014330:	0801453d 	.word	0x0801453d
 8014334:	0801453d 	.word	0x0801453d
 8014338:	0801453d 	.word	0x0801453d
 801433c:	0801453d 	.word	0x0801453d
 8014340:	0801453d 	.word	0x0801453d
 8014344:	0801453d 	.word	0x0801453d
 8014348:	0801453d 	.word	0x0801453d
 801434c:	0801453d 	.word	0x0801453d
 8014350:	0801453d 	.word	0x0801453d
 8014354:	08014531 	.word	0x08014531
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8014358:	4b7e      	ldr	r3, [pc, #504]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 801435a:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	711a      	strb	r2, [r3, #4]
            break;
 8014362:	e0f1      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014364:	4b7b      	ldr	r3, [pc, #492]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 8014366:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	711a      	strb	r2, [r3, #4]
            break;
 801436e:	e0eb      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8014370:	f7fa ff34 	bl	800f1dc <SecureElementGetDevEui>
 8014374:	4602      	mov	r2, r0
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	605a      	str	r2, [r3, #4]
            break;
 801437a:	e0e5      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 801437c:	f7fa ff50 	bl	800f220 <SecureElementGetJoinEui>
 8014380:	4602      	mov	r2, r0
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	605a      	str	r2, [r3, #4]
            break;
 8014386:	e0df      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8014388:	4b72      	ldr	r3, [pc, #456]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 801438a:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	711a      	strb	r2, [r3, #4]
            break;
 8014392:	e0d9      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8014394:	4b6f      	ldr	r3, [pc, #444]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 8014396:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	605a      	str	r2, [r3, #4]
            break;
 801439e:	e0d3      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80143a0:	4b6c      	ldr	r3, [pc, #432]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 80143a2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	605a      	str	r2, [r3, #4]
            break;
 80143aa:	e0cd      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80143ac:	4b69      	ldr	r3, [pc, #420]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 80143ae:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	711a      	strb	r2, [r3, #4]
            break;
 80143b6:	e0c7      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80143b8:	4b66      	ldr	r3, [pc, #408]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 80143ba:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	711a      	strb	r2, [r3, #4]
            break;
 80143c2:	e0c1      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80143c4:	231d      	movs	r3, #29
 80143c6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143c8:	4b62      	ldr	r3, [pc, #392]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 80143ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80143ce:	f107 0210 	add.w	r2, r7, #16
 80143d2:	4611      	mov	r1, r2
 80143d4:	4618      	mov	r0, r3
 80143d6:	f002 ff13 	bl	8017200 <RegionGetPhyParam>
 80143da:	4603      	mov	r3, r0
 80143dc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80143de:	68fa      	ldr	r2, [r7, #12]
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	605a      	str	r2, [r3, #4]
            break;
 80143e4:	e0b0      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	4a5a      	ldr	r2, [pc, #360]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 80143ea:	3304      	adds	r3, #4
 80143ec:	3264      	adds	r2, #100	; 0x64
 80143ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80143f2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80143f6:	e0a7      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	4a56      	ldr	r2, [pc, #344]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 80143fc:	3304      	adds	r3, #4
 80143fe:	32a8      	adds	r2, #168	; 0xa8
 8014400:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014404:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014408:	e09e      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	4a51      	ldr	r2, [pc, #324]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 801440e:	3304      	adds	r3, #4
 8014410:	326c      	adds	r2, #108	; 0x6c
 8014412:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014416:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801441a:	e095      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	4a4d      	ldr	r2, [pc, #308]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 8014420:	3304      	adds	r3, #4
 8014422:	32b0      	adds	r2, #176	; 0xb0
 8014424:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014428:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801442c:	e08c      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801442e:	231b      	movs	r3, #27
 8014430:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014432:	4b48      	ldr	r3, [pc, #288]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 8014434:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014438:	f107 0210 	add.w	r2, r7, #16
 801443c:	4611      	mov	r1, r2
 801443e:	4618      	mov	r0, r3
 8014440:	f002 fede 	bl	8017200 <RegionGetPhyParam>
 8014444:	4603      	mov	r3, r0
 8014446:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8014448:	68fa      	ldr	r2, [r7, #12]
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	605a      	str	r2, [r3, #4]
            break;
 801444e:	e07b      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8014450:	231a      	movs	r3, #26
 8014452:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014454:	4b3f      	ldr	r3, [pc, #252]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 8014456:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801445a:	f107 0210 	add.w	r2, r7, #16
 801445e:	4611      	mov	r1, r2
 8014460:	4618      	mov	r0, r3
 8014462:	f002 fecd 	bl	8017200 <RegionGetPhyParam>
 8014466:	4603      	mov	r3, r0
 8014468:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801446a:	68fa      	ldr	r2, [r7, #12]
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	605a      	str	r2, [r3, #4]
            break;
 8014470:	e06a      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8014472:	4b38      	ldr	r3, [pc, #224]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 8014474:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	711a      	strb	r2, [r3, #4]
            break;
 801447c:	e064      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801447e:	4b35      	ldr	r3, [pc, #212]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 8014480:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	605a      	str	r2, [r3, #4]
            break;
 8014486:	e05f      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8014488:	4b32      	ldr	r3, [pc, #200]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 801448a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	605a      	str	r2, [r3, #4]
            break;
 8014490:	e05a      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8014492:	4b30      	ldr	r3, [pc, #192]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 8014494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	605a      	str	r2, [r3, #4]
            break;
 801449a:	e055      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 801449c:	4b2d      	ldr	r3, [pc, #180]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 801449e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	605a      	str	r2, [r3, #4]
            break;
 80144a4:	e050      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80144a6:	4b2b      	ldr	r3, [pc, #172]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 80144a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	605a      	str	r2, [r3, #4]
            break;
 80144ae:	e04b      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80144b0:	4b28      	ldr	r3, [pc, #160]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 80144b2:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	711a      	strb	r2, [r3, #4]
            break;
 80144ba:	e045      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80144bc:	4b25      	ldr	r3, [pc, #148]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 80144be:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	711a      	strb	r2, [r3, #4]
            break;
 80144c6:	e03f      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80144c8:	4b22      	ldr	r3, [pc, #136]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 80144ca:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	711a      	strb	r2, [r3, #4]
            break;
 80144d2:	e039      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80144d4:	4b1f      	ldr	r3, [pc, #124]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 80144d6:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	711a      	strb	r2, [r3, #4]
            break;
 80144de:	e033      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80144e0:	4b1c      	ldr	r3, [pc, #112]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 80144e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	605a      	str	r2, [r3, #4]
            break;
 80144e8:	e02e      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80144ea:	4b1a      	ldr	r3, [pc, #104]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 80144ec:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	711a      	strb	r2, [r3, #4]
            break;
 80144f4:	e028      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80144f6:	4b17      	ldr	r3, [pc, #92]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 80144f8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	605a      	str	r2, [r3, #4]
            break;
 80144fe:	e023      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	4a14      	ldr	r2, [pc, #80]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 8014504:	605a      	str	r2, [r3, #4]
            break;
 8014506:	e01f      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	4a13      	ldr	r2, [pc, #76]	; (8014558 <LoRaMacMibGetRequestConfirm+0x308>)
 801450c:	605a      	str	r2, [r3, #4]
            break;
 801450e:	e01b      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8014510:	4b10      	ldr	r3, [pc, #64]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 8014512:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	605a      	str	r2, [r3, #4]
            break;
 801451a:	e015      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	4a0d      	ldr	r2, [pc, #52]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 8014520:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 8014524:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8014526:	687c      	ldr	r4, [r7, #4]
 8014528:	f002 fff2 	bl	8017510 <RegionGetVersion>
 801452c:	60a0      	str	r0, [r4, #8]
            break;
 801452e:	e00b      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8014530:	4b08      	ldr	r3, [pc, #32]	; (8014554 <LoRaMacMibGetRequestConfirm+0x304>)
 8014532:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	605a      	str	r2, [r3, #4]
            break;
 801453a:	e005      	b.n	8014548 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 801453c:	6878      	ldr	r0, [r7, #4]
 801453e:	f000 ff45 	bl	80153cc <LoRaMacClassBMibGetRequestConfirm>
 8014542:	4603      	mov	r3, r0
 8014544:	75fb      	strb	r3, [r7, #23]
            break;
 8014546:	bf00      	nop
        }
    }
    return status;
 8014548:	7dfb      	ldrb	r3, [r7, #23]
}
 801454a:	4618      	mov	r0, r3
 801454c:	371c      	adds	r7, #28
 801454e:	46bd      	mov	sp, r7
 8014550:	bd90      	pop	{r4, r7, pc}
 8014552:	bf00      	nop
 8014554:	20000e5c 	.word	0x20000e5c
 8014558:	20001584 	.word	0x20001584

0801455c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b086      	sub	sp, #24
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014564:	2300      	movs	r3, #0
 8014566:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d101      	bne.n	8014572 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801456e:	2303      	movs	r3, #3
 8014570:	e348      	b.n	8014c04 <LoRaMacMibSetRequestConfirm+0x6a8>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8014572:	4bb7      	ldr	r3, [pc, #732]	; (8014850 <LoRaMacMibSetRequestConfirm+0x2f4>)
 8014574:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014578:	f003 0302 	and.w	r3, r3, #2
 801457c:	2b00      	cmp	r3, #0
 801457e:	d001      	beq.n	8014584 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8014580:	2301      	movs	r3, #1
 8014582:	e33f      	b.n	8014c04 <LoRaMacMibSetRequestConfirm+0x6a8>
    }

    switch( mibSet->Type )
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	781b      	ldrb	r3, [r3, #0]
 8014588:	2b37      	cmp	r3, #55	; 0x37
 801458a:	f200 8319 	bhi.w	8014bc0 <LoRaMacMibSetRequestConfirm+0x664>
 801458e:	a201      	add	r2, pc, #4	; (adr r2, 8014594 <LoRaMacMibSetRequestConfirm+0x38>)
 8014590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014594:	08014675 	.word	0x08014675
 8014598:	08014685 	.word	0x08014685
 801459c:	0801469f 	.word	0x0801469f
 80145a0:	080146b7 	.word	0x080146b7
 80145a4:	080146cf 	.word	0x080146cf
 80145a8:	080146db 	.word	0x080146db
 80145ac:	080146e7 	.word	0x080146e7
 80145b0:	080146f3 	.word	0x080146f3
 80145b4:	08014719 	.word	0x08014719
 80145b8:	0801473f 	.word	0x0801473f
 80145bc:	08014765 	.word	0x08014765
 80145c0:	0801478b 	.word	0x0801478b
 80145c4:	080147b1 	.word	0x080147b1
 80145c8:	080147d7 	.word	0x080147d7
 80145cc:	080147fd 	.word	0x080147fd
 80145d0:	08014823 	.word	0x08014823
 80145d4:	08014843 	.word	0x08014843
 80145d8:	08014bc1 	.word	0x08014bc1
 80145dc:	0801485d 	.word	0x0801485d
 80145e0:	080148cd 	.word	0x080148cd
 80145e4:	0801490d 	.word	0x0801490d
 80145e8:	0801496f 	.word	0x0801496f
 80145ec:	080149df 	.word	0x080149df
 80145f0:	080149af 	.word	0x080149af
 80145f4:	08014a0f 	.word	0x08014a0f
 80145f8:	08014a31 	.word	0x08014a31
 80145fc:	08014a3b 	.word	0x08014a3b
 8014600:	08014a45 	.word	0x08014a45
 8014604:	08014a4f 	.word	0x08014a4f
 8014608:	08014a59 	.word	0x08014a59
 801460c:	08014a63 	.word	0x08014a63
 8014610:	08014a95 	.word	0x08014a95
 8014614:	08014b01 	.word	0x08014b01
 8014618:	08014acf 	.word	0x08014acf
 801461c:	08014b3d 	.word	0x08014b3d
 8014620:	08014b53 	.word	0x08014b53
 8014624:	08014b6b 	.word	0x08014b6b
 8014628:	08014b75 	.word	0x08014b75
 801462c:	08014b81 	.word	0x08014b81
 8014630:	08014bc1 	.word	0x08014bc1
 8014634:	08014b8b 	.word	0x08014b8b
 8014638:	08014bc1 	.word	0x08014bc1
 801463c:	08014bc1 	.word	0x08014bc1
 8014640:	08014bc1 	.word	0x08014bc1
 8014644:	08014bc1 	.word	0x08014bc1
 8014648:	08014bc1 	.word	0x08014bc1
 801464c:	08014bc1 	.word	0x08014bc1
 8014650:	08014bc1 	.word	0x08014bc1
 8014654:	08014bc1 	.word	0x08014bc1
 8014658:	08014bc1 	.word	0x08014bc1
 801465c:	08014bc1 	.word	0x08014bc1
 8014660:	08014bc1 	.word	0x08014bc1
 8014664:	08014bc1 	.word	0x08014bc1
 8014668:	08014bc1 	.word	0x08014bc1
 801466c:	08014bc1 	.word	0x08014bc1
 8014670:	08014bb5 	.word	0x08014bb5
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	791b      	ldrb	r3, [r3, #4]
 8014678:	4618      	mov	r0, r3
 801467a:	f7fd fb99 	bl	8011db0 <SwitchClass>
 801467e:	4603      	mov	r3, r0
 8014680:	75fb      	strb	r3, [r7, #23]
            break;
 8014682:	e2be      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	791b      	ldrb	r3, [r3, #4]
 8014688:	2b02      	cmp	r3, #2
 801468a:	d005      	beq.n	8014698 <LoRaMacMibSetRequestConfirm+0x13c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	791a      	ldrb	r2, [r3, #4]
 8014690:	4b70      	ldr	r3, [pc, #448]	; (8014854 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8014692:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014696:	e2b4      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014698:	2303      	movs	r3, #3
 801469a:	75fb      	strb	r3, [r7, #23]
            break;
 801469c:	e2b1      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	685b      	ldr	r3, [r3, #4]
 80146a2:	4618      	mov	r0, r3
 80146a4:	f7fa fd82 	bl	800f1ac <SecureElementSetDevEui>
 80146a8:	4603      	mov	r3, r0
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	f000 828e 	beq.w	8014bcc <LoRaMacMibSetRequestConfirm+0x670>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80146b0:	2303      	movs	r3, #3
 80146b2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80146b4:	e28a      	b.n	8014bcc <LoRaMacMibSetRequestConfirm+0x670>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	685b      	ldr	r3, [r3, #4]
 80146ba:	4618      	mov	r0, r3
 80146bc:	f7fa fd98 	bl	800f1f0 <SecureElementSetJoinEui>
 80146c0:	4603      	mov	r3, r0
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	f000 8284 	beq.w	8014bd0 <LoRaMacMibSetRequestConfirm+0x674>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80146c8:	2303      	movs	r3, #3
 80146ca:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80146cc:	e280      	b.n	8014bd0 <LoRaMacMibSetRequestConfirm+0x674>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	791a      	ldrb	r2, [r3, #4]
 80146d2:	4b60      	ldr	r3, [pc, #384]	; (8014854 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80146d4:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 80146d8:	e293      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	685b      	ldr	r3, [r3, #4]
 80146de:	4a5d      	ldr	r2, [pc, #372]	; (8014854 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80146e0:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 80146e4:	e28d      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	685b      	ldr	r3, [r3, #4]
 80146ea:	4a5a      	ldr	r2, [pc, #360]	; (8014854 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80146ec:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 80146f0:	e287      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	685b      	ldr	r3, [r3, #4]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d00b      	beq.n	8014712 <LoRaMacMibSetRequestConfirm+0x1b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	685b      	ldr	r3, [r3, #4]
 80146fe:	4619      	mov	r1, r3
 8014700:	2000      	movs	r0, #0
 8014702:	f001 ff8d 	bl	8016620 <LoRaMacCryptoSetKey>
 8014706:	4603      	mov	r3, r0
 8014708:	2b00      	cmp	r3, #0
 801470a:	f000 8263 	beq.w	8014bd4 <LoRaMacMibSetRequestConfirm+0x678>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801470e:	2311      	movs	r3, #17
 8014710:	e278      	b.n	8014c04 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014712:	2303      	movs	r3, #3
 8014714:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014716:	e25d      	b.n	8014bd4 <LoRaMacMibSetRequestConfirm+0x678>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	685b      	ldr	r3, [r3, #4]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d00b      	beq.n	8014738 <LoRaMacMibSetRequestConfirm+0x1dc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	685b      	ldr	r3, [r3, #4]
 8014724:	4619      	mov	r1, r3
 8014726:	2001      	movs	r0, #1
 8014728:	f001 ff7a 	bl	8016620 <LoRaMacCryptoSetKey>
 801472c:	4603      	mov	r3, r0
 801472e:	2b00      	cmp	r3, #0
 8014730:	f000 8252 	beq.w	8014bd8 <LoRaMacMibSetRequestConfirm+0x67c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014734:	2311      	movs	r3, #17
 8014736:	e265      	b.n	8014c04 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014738:	2303      	movs	r3, #3
 801473a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801473c:	e24c      	b.n	8014bd8 <LoRaMacMibSetRequestConfirm+0x67c>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	685b      	ldr	r3, [r3, #4]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d00b      	beq.n	801475e <LoRaMacMibSetRequestConfirm+0x202>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	685b      	ldr	r3, [r3, #4]
 801474a:	4619      	mov	r1, r3
 801474c:	2002      	movs	r0, #2
 801474e:	f001 ff67 	bl	8016620 <LoRaMacCryptoSetKey>
 8014752:	4603      	mov	r3, r0
 8014754:	2b00      	cmp	r3, #0
 8014756:	f000 8241 	beq.w	8014bdc <LoRaMacMibSetRequestConfirm+0x680>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801475a:	2311      	movs	r3, #17
 801475c:	e252      	b.n	8014c04 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801475e:	2303      	movs	r3, #3
 8014760:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014762:	e23b      	b.n	8014bdc <LoRaMacMibSetRequestConfirm+0x680>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	685b      	ldr	r3, [r3, #4]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d00b      	beq.n	8014784 <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	685b      	ldr	r3, [r3, #4]
 8014770:	4619      	mov	r1, r3
 8014772:	2003      	movs	r0, #3
 8014774:	f001 ff54 	bl	8016620 <LoRaMacCryptoSetKey>
 8014778:	4603      	mov	r3, r0
 801477a:	2b00      	cmp	r3, #0
 801477c:	f000 8230 	beq.w	8014be0 <LoRaMacMibSetRequestConfirm+0x684>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014780:	2311      	movs	r3, #17
 8014782:	e23f      	b.n	8014c04 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014784:	2303      	movs	r3, #3
 8014786:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014788:	e22a      	b.n	8014be0 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	685b      	ldr	r3, [r3, #4]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d00b      	beq.n	80147aa <LoRaMacMibSetRequestConfirm+0x24e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	685b      	ldr	r3, [r3, #4]
 8014796:	4619      	mov	r1, r3
 8014798:	207f      	movs	r0, #127	; 0x7f
 801479a:	f001 ff41 	bl	8016620 <LoRaMacCryptoSetKey>
 801479e:	4603      	mov	r3, r0
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	f000 821f 	beq.w	8014be4 <LoRaMacMibSetRequestConfirm+0x688>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80147a6:	2311      	movs	r3, #17
 80147a8:	e22c      	b.n	8014c04 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80147aa:	2303      	movs	r3, #3
 80147ac:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80147ae:	e219      	b.n	8014be4 <LoRaMacMibSetRequestConfirm+0x688>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	685b      	ldr	r3, [r3, #4]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d00b      	beq.n	80147d0 <LoRaMacMibSetRequestConfirm+0x274>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	685b      	ldr	r3, [r3, #4]
 80147bc:	4619      	mov	r1, r3
 80147be:	2080      	movs	r0, #128	; 0x80
 80147c0:	f001 ff2e 	bl	8016620 <LoRaMacCryptoSetKey>
 80147c4:	4603      	mov	r3, r0
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	f000 820e 	beq.w	8014be8 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80147cc:	2311      	movs	r3, #17
 80147ce:	e219      	b.n	8014c04 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80147d0:	2303      	movs	r3, #3
 80147d2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80147d4:	e208      	b.n	8014be8 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	685b      	ldr	r3, [r3, #4]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d00b      	beq.n	80147f6 <LoRaMacMibSetRequestConfirm+0x29a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	685b      	ldr	r3, [r3, #4]
 80147e2:	4619      	mov	r1, r3
 80147e4:	2081      	movs	r0, #129	; 0x81
 80147e6:	f001 ff1b 	bl	8016620 <LoRaMacCryptoSetKey>
 80147ea:	4603      	mov	r3, r0
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	f000 81fd 	beq.w	8014bec <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80147f2:	2311      	movs	r3, #17
 80147f4:	e206      	b.n	8014c04 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80147f6:	2303      	movs	r3, #3
 80147f8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80147fa:	e1f7      	b.n	8014bec <LoRaMacMibSetRequestConfirm+0x690>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	685b      	ldr	r3, [r3, #4]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d00b      	beq.n	801481c <LoRaMacMibSetRequestConfirm+0x2c0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	685b      	ldr	r3, [r3, #4]
 8014808:	4619      	mov	r1, r3
 801480a:	2082      	movs	r0, #130	; 0x82
 801480c:	f001 ff08 	bl	8016620 <LoRaMacCryptoSetKey>
 8014810:	4603      	mov	r3, r0
 8014812:	2b00      	cmp	r3, #0
 8014814:	f000 81ec 	beq.w	8014bf0 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014818:	2311      	movs	r3, #17
 801481a:	e1f3      	b.n	8014c04 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801481c:	2303      	movs	r3, #3
 801481e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014820:	e1e6      	b.n	8014bf0 <LoRaMacMibSetRequestConfirm+0x694>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	791a      	ldrb	r2, [r3, #4]
 8014826:	4b0b      	ldr	r3, [pc, #44]	; (8014854 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8014828:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801482c:	4b0a      	ldr	r3, [pc, #40]	; (8014858 <LoRaMacMibSetRequestConfirm+0x2fc>)
 801482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014830:	4a08      	ldr	r2, [pc, #32]	; (8014854 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8014832:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8014836:	4610      	mov	r0, r2
 8014838:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 801483a:	4b07      	ldr	r3, [pc, #28]	; (8014858 <LoRaMacMibSetRequestConfirm+0x2fc>)
 801483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801483e:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8014840:	e1df      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	791a      	ldrb	r2, [r3, #4]
 8014846:	4b03      	ldr	r3, [pc, #12]	; (8014854 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8014848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 801484c:	e1d9      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
 801484e:	bf00      	nop
 8014850:	20000950 	.word	0x20000950
 8014854:	20000e5c 	.word	0x20000e5c
 8014858:	0801f374 	.word	0x0801f374
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	7a1b      	ldrb	r3, [r3, #8]
 8014860:	b25b      	sxtb	r3, r3
 8014862:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014864:	4bb3      	ldr	r3, [pc, #716]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014866:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801486a:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 801486c:	4bb1      	ldr	r3, [pc, #708]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801486e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014872:	f107 0108 	add.w	r1, r7, #8
 8014876:	2207      	movs	r2, #7
 8014878:	4618      	mov	r0, r3
 801487a:	f002 fcfc 	bl	8017276 <RegionVerify>
 801487e:	4603      	mov	r3, r0
 8014880:	f083 0301 	eor.w	r3, r3, #1
 8014884:	b2db      	uxtb	r3, r3
 8014886:	2b00      	cmp	r3, #0
 8014888:	d002      	beq.n	8014890 <LoRaMacMibSetRequestConfirm+0x334>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801488a:	2303      	movs	r3, #3
 801488c:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 801488e:	e1b8      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	685b      	ldr	r3, [r3, #4]
 8014894:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8014896:	4ba7      	ldr	r3, [pc, #668]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014898:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801489c:	f107 0108 	add.w	r1, r7, #8
 80148a0:	2200      	movs	r2, #0
 80148a2:	4618      	mov	r0, r3
 80148a4:	f002 fce7 	bl	8017276 <RegionVerify>
 80148a8:	4603      	mov	r3, r0
 80148aa:	f083 0301 	eor.w	r3, r3, #1
 80148ae:	b2db      	uxtb	r3, r3
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d002      	beq.n	80148ba <LoRaMacMibSetRequestConfirm+0x35e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80148b4:	2303      	movs	r3, #3
 80148b6:	75fb      	strb	r3, [r7, #23]
            break;
 80148b8:	e1a3      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80148ba:	4b9e      	ldr	r3, [pc, #632]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80148bc:	687a      	ldr	r2, [r7, #4]
 80148be:	3364      	adds	r3, #100	; 0x64
 80148c0:	3204      	adds	r2, #4
 80148c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148c6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80148ca:	e19a      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	7a1b      	ldrb	r3, [r3, #8]
 80148d0:	b25b      	sxtb	r3, r3
 80148d2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80148d4:	4b97      	ldr	r3, [pc, #604]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80148d6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80148da:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80148dc:	4b95      	ldr	r3, [pc, #596]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80148de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80148e2:	f107 0108 	add.w	r1, r7, #8
 80148e6:	2207      	movs	r2, #7
 80148e8:	4618      	mov	r0, r3
 80148ea:	f002 fcc4 	bl	8017276 <RegionVerify>
 80148ee:	4603      	mov	r3, r0
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d008      	beq.n	8014906 <LoRaMacMibSetRequestConfirm+0x3aa>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80148f4:	4b8f      	ldr	r3, [pc, #572]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80148f6:	687a      	ldr	r2, [r7, #4]
 80148f8:	33a8      	adds	r3, #168	; 0xa8
 80148fa:	3204      	adds	r2, #4
 80148fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014900:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014904:	e17d      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014906:	2303      	movs	r3, #3
 8014908:	75fb      	strb	r3, [r7, #23]
            break;
 801490a:	e17a      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	7a1b      	ldrb	r3, [r3, #8]
 8014910:	b25b      	sxtb	r3, r3
 8014912:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014914:	4b87      	ldr	r3, [pc, #540]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014916:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801491a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801491c:	4b85      	ldr	r3, [pc, #532]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801491e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014922:	f107 0108 	add.w	r1, r7, #8
 8014926:	2207      	movs	r2, #7
 8014928:	4618      	mov	r0, r3
 801492a:	f002 fca4 	bl	8017276 <RegionVerify>
 801492e:	4603      	mov	r3, r0
 8014930:	2b00      	cmp	r3, #0
 8014932:	d019      	beq.n	8014968 <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8014934:	4b7f      	ldr	r3, [pc, #508]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014936:	687a      	ldr	r2, [r7, #4]
 8014938:	336c      	adds	r3, #108	; 0x6c
 801493a:	3204      	adds	r2, #4
 801493c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014940:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8014944:	4b7b      	ldr	r3, [pc, #492]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014946:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801494a:	2b02      	cmp	r3, #2
 801494c:	f040 8152 	bne.w	8014bf4 <LoRaMacMibSetRequestConfirm+0x698>
 8014950:	4b78      	ldr	r3, [pc, #480]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014952:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014956:	2b00      	cmp	r3, #0
 8014958:	f000 814c 	beq.w	8014bf4 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 801495c:	4b76      	ldr	r3, [pc, #472]	; (8014b38 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014960:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8014962:	f7fe fc67 	bl	8013234 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014966:	e145      	b.n	8014bf4 <LoRaMacMibSetRequestConfirm+0x698>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014968:	2303      	movs	r3, #3
 801496a:	75fb      	strb	r3, [r7, #23]
            break;
 801496c:	e142      	b.n	8014bf4 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	7a1b      	ldrb	r3, [r3, #8]
 8014972:	b25b      	sxtb	r3, r3
 8014974:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014976:	4b6f      	ldr	r3, [pc, #444]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014978:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801497c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801497e:	4b6d      	ldr	r3, [pc, #436]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014980:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014984:	f107 0108 	add.w	r1, r7, #8
 8014988:	2207      	movs	r2, #7
 801498a:	4618      	mov	r0, r3
 801498c:	f002 fc73 	bl	8017276 <RegionVerify>
 8014990:	4603      	mov	r3, r0
 8014992:	2b00      	cmp	r3, #0
 8014994:	d008      	beq.n	80149a8 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8014996:	4b67      	ldr	r3, [pc, #412]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014998:	687a      	ldr	r2, [r7, #4]
 801499a:	33b0      	adds	r3, #176	; 0xb0
 801499c:	3204      	adds	r2, #4
 801499e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80149a2:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80149a6:	e12c      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80149a8:	2303      	movs	r3, #3
 80149aa:	75fb      	strb	r3, [r7, #23]
            break;
 80149ac:	e129      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	685b      	ldr	r3, [r3, #4]
 80149b2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80149b4:	2301      	movs	r3, #1
 80149b6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80149b8:	4b5e      	ldr	r3, [pc, #376]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80149ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80149be:	f107 020c 	add.w	r2, r7, #12
 80149c2:	4611      	mov	r1, r2
 80149c4:	4618      	mov	r0, r3
 80149c6:	f002 fc7f 	bl	80172c8 <RegionChanMaskSet>
 80149ca:	4603      	mov	r3, r0
 80149cc:	f083 0301 	eor.w	r3, r3, #1
 80149d0:	b2db      	uxtb	r3, r3
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	f000 8110 	beq.w	8014bf8 <LoRaMacMibSetRequestConfirm+0x69c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80149d8:	2303      	movs	r3, #3
 80149da:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80149dc:	e10c      	b.n	8014bf8 <LoRaMacMibSetRequestConfirm+0x69c>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	685b      	ldr	r3, [r3, #4]
 80149e2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80149e4:	2300      	movs	r3, #0
 80149e6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80149e8:	4b52      	ldr	r3, [pc, #328]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80149ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80149ee:	f107 020c 	add.w	r2, r7, #12
 80149f2:	4611      	mov	r1, r2
 80149f4:	4618      	mov	r0, r3
 80149f6:	f002 fc67 	bl	80172c8 <RegionChanMaskSet>
 80149fa:	4603      	mov	r3, r0
 80149fc:	f083 0301 	eor.w	r3, r3, #1
 8014a00:	b2db      	uxtb	r3, r3
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	f000 80fa 	beq.w	8014bfc <LoRaMacMibSetRequestConfirm+0x6a0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014a08:	2303      	movs	r3, #3
 8014a0a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014a0c:	e0f6      	b.n	8014bfc <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	791b      	ldrb	r3, [r3, #4]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d009      	beq.n	8014a2a <LoRaMacMibSetRequestConfirm+0x4ce>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014a1a:	2b0f      	cmp	r3, #15
 8014a1c:	d805      	bhi.n	8014a2a <LoRaMacMibSetRequestConfirm+0x4ce>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	791a      	ldrb	r2, [r3, #4]
 8014a22:	4b44      	ldr	r3, [pc, #272]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014a24:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014a28:	e0eb      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014a2a:	2303      	movs	r3, #3
 8014a2c:	75fb      	strb	r3, [r7, #23]
            break;
 8014a2e:	e0e8      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	685b      	ldr	r3, [r3, #4]
 8014a34:	4a3f      	ldr	r2, [pc, #252]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014a36:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8014a38:	e0e3      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	685b      	ldr	r3, [r3, #4]
 8014a3e:	4a3d      	ldr	r2, [pc, #244]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014a40:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8014a42:	e0de      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	685b      	ldr	r3, [r3, #4]
 8014a48:	4a3a      	ldr	r2, [pc, #232]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014a4a:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8014a4c:	e0d9      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	685b      	ldr	r3, [r3, #4]
 8014a52:	4a38      	ldr	r2, [pc, #224]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014a54:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8014a56:	e0d4      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	685b      	ldr	r3, [r3, #4]
 8014a5c:	4a35      	ldr	r2, [pc, #212]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014a5e:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8014a60:	e0cf      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014a68:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8014a6a:	4b32      	ldr	r3, [pc, #200]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014a70:	f107 0108 	add.w	r1, r7, #8
 8014a74:	2206      	movs	r2, #6
 8014a76:	4618      	mov	r0, r3
 8014a78:	f002 fbfd 	bl	8017276 <RegionVerify>
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d005      	beq.n	8014a8e <LoRaMacMibSetRequestConfirm+0x532>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8014a82:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014a86:	4b2b      	ldr	r3, [pc, #172]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014a88:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014a8c:	e0b9      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014a8e:	2303      	movs	r3, #3
 8014a90:	75fb      	strb	r3, [r7, #23]
            break;
 8014a92:	e0b6      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014a9a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014a9c:	4b25      	ldr	r3, [pc, #148]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014a9e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8014aa2:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014aa4:	4b23      	ldr	r3, [pc, #140]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014aaa:	f107 0108 	add.w	r1, r7, #8
 8014aae:	2205      	movs	r2, #5
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f002 fbe0 	bl	8017276 <RegionVerify>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d005      	beq.n	8014ac8 <LoRaMacMibSetRequestConfirm+0x56c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014abc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014ac0:	4b1c      	ldr	r3, [pc, #112]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014ac2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014ac6:	e09c      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ac8:	2303      	movs	r3, #3
 8014aca:	75fb      	strb	r3, [r7, #23]
            break;
 8014acc:	e099      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014ad4:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8014ad6:	4b17      	ldr	r3, [pc, #92]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014ad8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014adc:	f107 0108 	add.w	r1, r7, #8
 8014ae0:	220a      	movs	r2, #10
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f002 fbc7 	bl	8017276 <RegionVerify>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d005      	beq.n	8014afa <LoRaMacMibSetRequestConfirm+0x59e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8014aee:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014af2:	4b10      	ldr	r3, [pc, #64]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014af4:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014af8:	e083      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014afa:	2303      	movs	r3, #3
 8014afc:	75fb      	strb	r3, [r7, #23]
            break;
 8014afe:	e080      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014b06:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8014b08:	4b0a      	ldr	r3, [pc, #40]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014b0e:	f107 0108 	add.w	r1, r7, #8
 8014b12:	2209      	movs	r2, #9
 8014b14:	4618      	mov	r0, r3
 8014b16:	f002 fbae 	bl	8017276 <RegionVerify>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d005      	beq.n	8014b2c <LoRaMacMibSetRequestConfirm+0x5d0>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8014b20:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014b24:	4b03      	ldr	r3, [pc, #12]	; (8014b34 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014b26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014b2a:	e06a      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b2c:	2303      	movs	r3, #3
 8014b2e:	75fb      	strb	r3, [r7, #23]
            break;
 8014b30:	e067      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
 8014b32:	bf00      	nop
 8014b34:	20000e5c 	.word	0x20000e5c
 8014b38:	0801f374 	.word	0x0801f374
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	685b      	ldr	r3, [r3, #4]
 8014b40:	4a32      	ldr	r2, [pc, #200]	; (8014c0c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014b42:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8014b46:	4b31      	ldr	r3, [pc, #196]	; (8014c0c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014b4c:	4a2f      	ldr	r2, [pc, #188]	; (8014c0c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014b4e:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8014b50:	e057      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	791a      	ldrb	r2, [r3, #4]
 8014b56:	4b2d      	ldr	r3, [pc, #180]	; (8014c0c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014b58:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8014b5c:	4b2b      	ldr	r3, [pc, #172]	; (8014c0c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014b5e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8014b62:	4b2a      	ldr	r3, [pc, #168]	; (8014c0c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014b64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8014b68:	e04b      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	685b      	ldr	r3, [r3, #4]
 8014b6e:	4a27      	ldr	r2, [pc, #156]	; (8014c0c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014b70:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8014b72:	e046      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	685b      	ldr	r3, [r3, #4]
 8014b78:	4a24      	ldr	r2, [pc, #144]	; (8014c0c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014b7a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 8014b7e:	e040      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8014b80:	f7fe fdb2 	bl	80136e8 <RestoreNvmData>
 8014b84:	4603      	mov	r3, r0
 8014b86:	75fb      	strb	r3, [r7, #23]
            break;
 8014b88:	e03b      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	799b      	ldrb	r3, [r3, #6]
 8014b8e:	2b01      	cmp	r3, #1
 8014b90:	d80d      	bhi.n	8014bae <LoRaMacMibSetRequestConfirm+0x652>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8014b92:	4a1e      	ldr	r2, [pc, #120]	; (8014c0c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	685b      	ldr	r3, [r3, #4]
 8014b98:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	6858      	ldr	r0, [r3, #4]
 8014ba0:	f001 fc78 	bl	8016494 <LoRaMacCryptoSetLrWanVersion>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d02a      	beq.n	8014c00 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014baa:	2311      	movs	r3, #17
 8014bac:	e02a      	b.n	8014c04 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014bae:	2303      	movs	r3, #3
 8014bb0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014bb2:	e025      	b.n	8014c00 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	685b      	ldr	r3, [r3, #4]
 8014bb8:	4a14      	ldr	r2, [pc, #80]	; (8014c0c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014bba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8014bbe:	e020      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8014bc0:	6878      	ldr	r0, [r7, #4]
 8014bc2:	f000 fc0d 	bl	80153e0 <LoRaMacMibClassBSetRequestConfirm>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	75fb      	strb	r3, [r7, #23]
            break;
 8014bca:	e01a      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014bcc:	bf00      	nop
 8014bce:	e018      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014bd0:	bf00      	nop
 8014bd2:	e016      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014bd4:	bf00      	nop
 8014bd6:	e014      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014bd8:	bf00      	nop
 8014bda:	e012      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014bdc:	bf00      	nop
 8014bde:	e010      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014be0:	bf00      	nop
 8014be2:	e00e      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014be4:	bf00      	nop
 8014be6:	e00c      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014be8:	bf00      	nop
 8014bea:	e00a      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014bec:	bf00      	nop
 8014bee:	e008      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014bf0:	bf00      	nop
 8014bf2:	e006      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014bf4:	bf00      	nop
 8014bf6:	e004      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014bf8:	bf00      	nop
 8014bfa:	e002      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014bfc:	bf00      	nop
 8014bfe:	e000      	b.n	8014c02 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014c00:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8014c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c04:	4618      	mov	r0, r3
 8014c06:	3718      	adds	r7, #24
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	bd80      	pop	{r7, pc}
 8014c0c:	20000e5c 	.word	0x20000e5c

08014c10 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b086      	sub	sp, #24
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014c18:	2302      	movs	r3, #2
 8014c1a:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d101      	bne.n	8014c2a <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014c26:	2303      	movs	r3, #3
 8014c28:	e127      	b.n	8014e7a <LoRaMacMlmeRequest+0x26a>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8014c2a:	f7fc fcd3 	bl	80115d4 <LoRaMacIsBusy>
 8014c2e:	4603      	mov	r3, r0
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d001      	beq.n	8014c38 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8014c34:	2301      	movs	r3, #1
 8014c36:	e120      	b.n	8014e7a <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8014c38:	f001 f8d0 	bl	8015ddc <LoRaMacConfirmQueueIsFull>
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d001      	beq.n	8014c46 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8014c42:	2301      	movs	r3, #1
 8014c44:	e119      	b.n	8014e7a <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014c46:	f001 f8bd 	bl	8015dc4 <LoRaMacConfirmQueueGetCnt>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d104      	bne.n	8014c5a <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8014c50:	2214      	movs	r2, #20
 8014c52:	2100      	movs	r1, #0
 8014c54:	488b      	ldr	r0, [pc, #556]	; (8014e84 <LoRaMacMlmeRequest+0x274>)
 8014c56:	f004 fe21 	bl	801989c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014c5a:	4b8b      	ldr	r3, [pc, #556]	; (8014e88 <LoRaMacMlmeRequest+0x278>)
 8014c5c:	2201      	movs	r2, #1
 8014c5e:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8014c62:	4a89      	ldr	r2, [pc, #548]	; (8014e88 <LoRaMacMlmeRequest+0x278>)
 8014c64:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8014c68:	f043 0304 	orr.w	r3, r3, #4
 8014c6c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	781b      	ldrb	r3, [r3, #0]
 8014c74:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014c76:	2301      	movs	r3, #1
 8014c78:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	74fb      	strb	r3, [r7, #19]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	781b      	ldrb	r3, [r3, #0]
 8014c82:	3b01      	subs	r3, #1
 8014c84:	2b0d      	cmp	r3, #13
 8014c86:	f200 80ce 	bhi.w	8014e26 <LoRaMacMlmeRequest+0x216>
 8014c8a:	a201      	add	r2, pc, #4	; (adr r2, 8014c90 <LoRaMacMlmeRequest+0x80>)
 8014c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c90:	08014cc9 	.word	0x08014cc9
 8014c94:	08014e27 	.word	0x08014e27
 8014c98:	08014e27 	.word	0x08014e27
 8014c9c:	08014d33 	.word	0x08014d33
 8014ca0:	08014d51 	.word	0x08014d51
 8014ca4:	08014d61 	.word	0x08014d61
 8014ca8:	08014e27 	.word	0x08014e27
 8014cac:	08014e27 	.word	0x08014e27
 8014cb0:	08014e27 	.word	0x08014e27
 8014cb4:	08014d7d 	.word	0x08014d7d
 8014cb8:	08014e27 	.word	0x08014e27
 8014cbc:	08014dfb 	.word	0x08014dfb
 8014cc0:	08014d9b 	.word	0x08014d9b
 8014cc4:	08014ddd 	.word	0x08014ddd
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8014cc8:	4b6f      	ldr	r3, [pc, #444]	; (8014e88 <LoRaMacMlmeRequest+0x278>)
 8014cca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014cce:	f003 0320 	and.w	r3, r3, #32
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d001      	beq.n	8014cda <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8014cd6:	2301      	movs	r3, #1
 8014cd8:	e0cf      	b.n	8014e7a <LoRaMacMlmeRequest+0x26a>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( );
 8014cda:	f7fe f989 	bl	8012ff0 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8014cde:	4b6b      	ldr	r3, [pc, #428]	; (8014e8c <LoRaMacMlmeRequest+0x27c>)
 8014ce0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	795b      	ldrb	r3, [r3, #5]
 8014ce8:	b25b      	sxtb	r3, r3
 8014cea:	2200      	movs	r2, #0
 8014cec:	4619      	mov	r1, r3
 8014cee:	f002 fbaa 	bl	8017446 <RegionAlternateDr>
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	461a      	mov	r2, r3
 8014cf6:	4b65      	ldr	r3, [pc, #404]	; (8014e8c <LoRaMacMlmeRequest+0x27c>)
 8014cf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8014cfc:	2307      	movs	r3, #7
 8014cfe:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8014d00:	20ff      	movs	r0, #255	; 0xff
 8014d02:	f7fd feed 	bl	8012ae0 <SendReJoinReq>
 8014d06:	4603      	mov	r3, r0
 8014d08:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8014d0a:	7dfb      	ldrb	r3, [r7, #23]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	f000 808c 	beq.w	8014e2a <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8014d12:	4b5e      	ldr	r3, [pc, #376]	; (8014e8c <LoRaMacMlmeRequest+0x27c>)
 8014d14:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	795b      	ldrb	r3, [r3, #5]
 8014d1c:	b25b      	sxtb	r3, r3
 8014d1e:	2201      	movs	r2, #1
 8014d20:	4619      	mov	r1, r3
 8014d22:	f002 fb90 	bl	8017446 <RegionAlternateDr>
 8014d26:	4603      	mov	r3, r0
 8014d28:	461a      	mov	r2, r3
 8014d2a:	4b58      	ldr	r3, [pc, #352]	; (8014e8c <LoRaMacMlmeRequest+0x27c>)
 8014d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8014d30:	e07b      	b.n	8014e2a <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014d32:	2300      	movs	r3, #0
 8014d34:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014d36:	f107 030c 	add.w	r3, r7, #12
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	4619      	mov	r1, r3
 8014d3e:	2002      	movs	r0, #2
 8014d40:	f000 fcb2 	bl	80156a8 <LoRaMacCommandsAddCmd>
 8014d44:	4603      	mov	r3, r0
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d071      	beq.n	8014e2e <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014d4a:	2313      	movs	r3, #19
 8014d4c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d4e:	e06e      	b.n	8014e2e <LoRaMacMlmeRequest+0x21e>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	889b      	ldrh	r3, [r3, #4]
 8014d54:	4618      	mov	r0, r3
 8014d56:	f7fe fc73 	bl	8013640 <SetTxContinuousWave>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	75fb      	strb	r3, [r7, #23]
            break;
 8014d5e:	e06d      	b.n	8014e3c <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	8898      	ldrh	r0, [r3, #4]
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	6899      	ldr	r1, [r3, #8]
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8014d6e:	b2db      	uxtb	r3, r3
 8014d70:	461a      	mov	r2, r3
 8014d72:	f7fe fc99 	bl	80136a8 <SetTxContinuousWave1>
 8014d76:	4603      	mov	r3, r0
 8014d78:	75fb      	strb	r3, [r7, #23]
            break;
 8014d7a:	e05f      	b.n	8014e3c <LoRaMacMlmeRequest+0x22c>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014d80:	f107 030c 	add.w	r3, r7, #12
 8014d84:	2200      	movs	r2, #0
 8014d86:	4619      	mov	r1, r3
 8014d88:	200d      	movs	r0, #13
 8014d8a:	f000 fc8d 	bl	80156a8 <LoRaMacCommandsAddCmd>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d04e      	beq.n	8014e32 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014d94:	2313      	movs	r3, #19
 8014d96:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d98:	e04b      	b.n	8014e32 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8014d9a:	4b3c      	ldr	r3, [pc, #240]	; (8014e8c <LoRaMacMlmeRequest+0x27c>)
 8014d9c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d148      	bne.n	8014e36 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	791b      	ldrb	r3, [r3, #4]
 8014da8:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	791b      	ldrb	r3, [r3, #4]
 8014dae:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8014db2:	b2db      	uxtb	r3, r3
 8014db4:	4618      	mov	r0, r3
 8014db6:	f000 fae8 	bl	801538a <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8014dba:	7dbb      	ldrb	r3, [r7, #22]
 8014dbc:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8014dc2:	f107 030c 	add.w	r3, r7, #12
 8014dc6:	2201      	movs	r2, #1
 8014dc8:	4619      	mov	r1, r3
 8014dca:	2010      	movs	r0, #16
 8014dcc:	f000 fc6c 	bl	80156a8 <LoRaMacCommandsAddCmd>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d02f      	beq.n	8014e36 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014dd6:	2313      	movs	r3, #19
 8014dd8:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8014dda:	e02c      	b.n	8014e36 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014ddc:	2300      	movs	r3, #0
 8014dde:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014de0:	f107 030c 	add.w	r3, r7, #12
 8014de4:	2200      	movs	r2, #0
 8014de6:	4619      	mov	r1, r3
 8014de8:	2012      	movs	r0, #18
 8014dea:	f000 fc5d 	bl	80156a8 <LoRaMacCommandsAddCmd>
 8014dee:	4603      	mov	r3, r0
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d022      	beq.n	8014e3a <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014df4:	2313      	movs	r3, #19
 8014df6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014df8:	e01f      	b.n	8014e3a <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8014dfa:	2301      	movs	r3, #1
 8014dfc:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8014dfe:	f000 fa7a 	bl	80152f6 <LoRaMacClassBIsAcquisitionInProgress>
 8014e02:	4603      	mov	r3, r0
 8014e04:	f083 0301 	eor.w	r3, r3, #1
 8014e08:	b2db      	uxtb	r3, r3
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d008      	beq.n	8014e20 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8014e0e:	2000      	movs	r0, #0
 8014e10:	f000 fa53 	bl	80152ba <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8014e14:	2000      	movs	r0, #0
 8014e16:	f000 fa75 	bl	8015304 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8014e1e:	e00d      	b.n	8014e3c <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8014e20:	2301      	movs	r3, #1
 8014e22:	75fb      	strb	r3, [r7, #23]
            break;
 8014e24:	e00a      	b.n	8014e3c <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8014e26:	bf00      	nop
 8014e28:	e008      	b.n	8014e3c <LoRaMacMlmeRequest+0x22c>
            break;
 8014e2a:	bf00      	nop
 8014e2c:	e006      	b.n	8014e3c <LoRaMacMlmeRequest+0x22c>
            break;
 8014e2e:	bf00      	nop
 8014e30:	e004      	b.n	8014e3c <LoRaMacMlmeRequest+0x22c>
            break;
 8014e32:	bf00      	nop
 8014e34:	e002      	b.n	8014e3c <LoRaMacMlmeRequest+0x22c>
            break;
 8014e36:	bf00      	nop
 8014e38:	e000      	b.n	8014e3c <LoRaMacMlmeRequest+0x22c>
            break;
 8014e3a:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8014e3c:	4b12      	ldr	r3, [pc, #72]	; (8014e88 <LoRaMacMlmeRequest+0x278>)
 8014e3e:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8014e46:	7dfb      	ldrb	r3, [r7, #23]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d010      	beq.n	8014e6e <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014e4c:	f000 ffba 	bl	8015dc4 <LoRaMacConfirmQueueGetCnt>
 8014e50:	4603      	mov	r3, r0
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d110      	bne.n	8014e78 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8014e56:	4b0c      	ldr	r3, [pc, #48]	; (8014e88 <LoRaMacMlmeRequest+0x278>)
 8014e58:	2200      	movs	r2, #0
 8014e5a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8014e5e:	4a0a      	ldr	r2, [pc, #40]	; (8014e88 <LoRaMacMlmeRequest+0x278>)
 8014e60:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8014e64:	f36f 0382 	bfc	r3, #2, #1
 8014e68:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8014e6c:	e004      	b.n	8014e78 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8014e6e:	f107 0310 	add.w	r3, r7, #16
 8014e72:	4618      	mov	r0, r3
 8014e74:	f000 fe58 	bl	8015b28 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8014e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	3718      	adds	r7, #24
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	bd80      	pop	{r7, pc}
 8014e82:	bf00      	nop
 8014e84:	20000d9c 	.word	0x20000d9c
 8014e88:	20000950 	.word	0x20000950
 8014e8c:	20000e5c 	.word	0x20000e5c

08014e90 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b08c      	sub	sp, #48	; 0x30
 8014e94:	af02      	add	r7, sp, #8
 8014e96:	6078      	str	r0, [r7, #4]
 8014e98:	460b      	mov	r3, r1
 8014e9a:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014e9c:	2302      	movs	r3, #2
 8014e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8014eac:	2300      	movs	r3, #0
 8014eae:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d101      	bne.n	8014ebe <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014eba:	2303      	movs	r3, #3
 8014ebc:	e0d4      	b.n	8015068 <LoRaMacMcpsRequest+0x1d8>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8014ebe:	f7fc fb89 	bl	80115d4 <LoRaMacIsBusy>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d001      	beq.n	8014ecc <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8014ec8:	2301      	movs	r3, #1
 8014eca:	e0cd      	b.n	8015068 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8014ecc:	2300      	movs	r3, #0
 8014ece:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8014ed0:	2214      	movs	r2, #20
 8014ed2:	2100      	movs	r1, #0
 8014ed4:	4866      	ldr	r0, [pc, #408]	; (8015070 <LoRaMacMcpsRequest+0x1e0>)
 8014ed6:	f004 fce1 	bl	801989c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014eda:	4b66      	ldr	r3, [pc, #408]	; (8015074 <LoRaMacMcpsRequest+0x1e4>)
 8014edc:	2201      	movs	r2, #1
 8014ede:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8014ee2:	4b64      	ldr	r3, [pc, #400]	; (8015074 <LoRaMacMcpsRequest+0x1e4>)
 8014ee4:	2201      	movs	r2, #1
 8014ee6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	781b      	ldrb	r3, [r3, #0]
 8014eee:	2b03      	cmp	r3, #3
 8014ef0:	d03d      	beq.n	8014f6e <LoRaMacMcpsRequest+0xde>
 8014ef2:	2b03      	cmp	r3, #3
 8014ef4:	dc4f      	bgt.n	8014f96 <LoRaMacMcpsRequest+0x106>
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d002      	beq.n	8014f00 <LoRaMacMcpsRequest+0x70>
 8014efa:	2b01      	cmp	r3, #1
 8014efc:	d019      	beq.n	8014f32 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8014efe:	e04a      	b.n	8014f96 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8014f00:	2301      	movs	r3, #1
 8014f02:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8014f04:	4b5b      	ldr	r3, [pc, #364]	; (8015074 <LoRaMacMcpsRequest+0x1e4>)
 8014f06:	2201      	movs	r2, #1
 8014f08:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8014f0c:	7b3b      	ldrb	r3, [r7, #12]
 8014f0e:	2202      	movs	r2, #2
 8014f10:	f362 1347 	bfi	r3, r2, #5, #3
 8014f14:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	791b      	ldrb	r3, [r3, #4]
 8014f1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	689b      	ldr	r3, [r3, #8]
 8014f22:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	899b      	ldrh	r3, [r3, #12]
 8014f28:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	7b9b      	ldrb	r3, [r3, #14]
 8014f2e:	777b      	strb	r3, [r7, #29]
            break;
 8014f30:	e032      	b.n	8014f98 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8014f32:	2301      	movs	r3, #1
 8014f34:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	7bdb      	ldrb	r3, [r3, #15]
 8014f3a:	2b08      	cmp	r3, #8
 8014f3c:	bf28      	it	cs
 8014f3e:	2308      	movcs	r3, #8
 8014f40:	b2da      	uxtb	r2, r3
 8014f42:	4b4c      	ldr	r3, [pc, #304]	; (8015074 <LoRaMacMcpsRequest+0x1e4>)
 8014f44:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8014f48:	7b3b      	ldrb	r3, [r7, #12]
 8014f4a:	2204      	movs	r2, #4
 8014f4c:	f362 1347 	bfi	r3, r2, #5, #3
 8014f50:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	791b      	ldrb	r3, [r3, #4]
 8014f56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	689b      	ldr	r3, [r3, #8]
 8014f5e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	899b      	ldrh	r3, [r3, #12]
 8014f64:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	7b9b      	ldrb	r3, [r3, #14]
 8014f6a:	777b      	strb	r3, [r7, #29]
            break;
 8014f6c:	e014      	b.n	8014f98 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8014f6e:	2301      	movs	r3, #1
 8014f70:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8014f72:	4b40      	ldr	r3, [pc, #256]	; (8015074 <LoRaMacMcpsRequest+0x1e4>)
 8014f74:	2201      	movs	r2, #1
 8014f76:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8014f7a:	7b3b      	ldrb	r3, [r7, #12]
 8014f7c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8014f80:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	685b      	ldr	r3, [r3, #4]
 8014f86:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	891b      	ldrh	r3, [r3, #8]
 8014f8c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	7a9b      	ldrb	r3, [r3, #10]
 8014f92:	777b      	strb	r3, [r7, #29]
            break;
 8014f94:	e000      	b.n	8014f98 <LoRaMacMcpsRequest+0x108>
            break;
 8014f96:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8014f98:	2302      	movs	r3, #2
 8014f9a:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014f9c:	4b36      	ldr	r3, [pc, #216]	; (8015078 <LoRaMacMcpsRequest+0x1e8>)
 8014f9e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8014fa2:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014fa4:	4b34      	ldr	r3, [pc, #208]	; (8015078 <LoRaMacMcpsRequest+0x1e8>)
 8014fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014faa:	f107 0214 	add.w	r2, r7, #20
 8014fae:	4611      	mov	r1, r2
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f002 f925 	bl	8017200 <RegionGetPhyParam>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8014fba:	693b      	ldr	r3, [r7, #16]
 8014fbc:	b25b      	sxtb	r3, r3
 8014fbe:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8014fc2:	4293      	cmp	r3, r2
 8014fc4:	bfb8      	it	lt
 8014fc6:	4613      	movlt	r3, r2
 8014fc8:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8014fca:	7f3b      	ldrb	r3, [r7, #28]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d044      	beq.n	801505a <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8014fd0:	4b29      	ldr	r3, [pc, #164]	; (8015078 <LoRaMacMcpsRequest+0x1e8>)
 8014fd2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8014fd6:	f083 0301 	eor.w	r3, r3, #1
 8014fda:	b2db      	uxtb	r3, r3
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d019      	beq.n	8015014 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8014fe0:	7f7b      	ldrb	r3, [r7, #29]
 8014fe2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014fe4:	4b24      	ldr	r3, [pc, #144]	; (8015078 <LoRaMacMcpsRequest+0x1e8>)
 8014fe6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8014fea:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014fec:	4b22      	ldr	r3, [pc, #136]	; (8015078 <LoRaMacMcpsRequest+0x1e8>)
 8014fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014ff2:	f107 0108 	add.w	r1, r7, #8
 8014ff6:	2205      	movs	r2, #5
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	f002 f93c 	bl	8017276 <RegionVerify>
 8014ffe:	4603      	mov	r3, r0
 8015000:	2b00      	cmp	r3, #0
 8015002:	d005      	beq.n	8015010 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8015004:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015008:	4b1b      	ldr	r3, [pc, #108]	; (8015078 <LoRaMacMcpsRequest+0x1e8>)
 801500a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 801500e:	e001      	b.n	8015014 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8015010:	2303      	movs	r3, #3
 8015012:	e029      	b.n	8015068 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8015014:	8bfa      	ldrh	r2, [r7, #30]
 8015016:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 801501a:	f107 000c 	add.w	r0, r7, #12
 801501e:	78fb      	ldrb	r3, [r7, #3]
 8015020:	9300      	str	r3, [sp, #0]
 8015022:	4613      	mov	r3, r2
 8015024:	6a3a      	ldr	r2, [r7, #32]
 8015026:	f7fd fc7b 	bl	8012920 <Send>
 801502a:	4603      	mov	r3, r0
 801502c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8015030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015034:	2b00      	cmp	r3, #0
 8015036:	d10c      	bne.n	8015052 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	781a      	ldrb	r2, [r3, #0]
 801503c:	4b0d      	ldr	r3, [pc, #52]	; (8015074 <LoRaMacMcpsRequest+0x1e4>)
 801503e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8015042:	4a0c      	ldr	r2, [pc, #48]	; (8015074 <LoRaMacMcpsRequest+0x1e4>)
 8015044:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8015048:	f043 0301 	orr.w	r3, r3, #1
 801504c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8015050:	e003      	b.n	801505a <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8015052:	4b08      	ldr	r3, [pc, #32]	; (8015074 <LoRaMacMcpsRequest+0x1e4>)
 8015054:	2200      	movs	r2, #0
 8015056:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801505a:	4b06      	ldr	r3, [pc, #24]	; (8015074 <LoRaMacMcpsRequest+0x1e4>)
 801505c:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	611a      	str	r2, [r3, #16]

    return status;
 8015064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8015068:	4618      	mov	r0, r3
 801506a:	3728      	adds	r7, #40	; 0x28
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}
 8015070:	20000d88 	.word	0x20000d88
 8015074:	20000950 	.word	0x20000950
 8015078:	20000e5c 	.word	0x20000e5c

0801507c <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b084      	sub	sp, #16
 8015080:	af00      	add	r7, sp, #0
 8015082:	4603      	mov	r3, r0
 8015084:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8015086:	79fb      	ldrb	r3, [r7, #7]
 8015088:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801508a:	4b0a      	ldr	r3, [pc, #40]	; (80150b4 <LoRaMacTestSetDutyCycleOn+0x38>)
 801508c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015090:	f107 010c 	add.w	r1, r7, #12
 8015094:	220f      	movs	r2, #15
 8015096:	4618      	mov	r0, r3
 8015098:	f002 f8ed 	bl	8017276 <RegionVerify>
 801509c:	4603      	mov	r3, r0
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d003      	beq.n	80150aa <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80150a2:	4a04      	ldr	r2, [pc, #16]	; (80150b4 <LoRaMacTestSetDutyCycleOn+0x38>)
 80150a4:	79fb      	ldrb	r3, [r7, #7]
 80150a6:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 80150aa:	bf00      	nop
 80150ac:	3710      	adds	r7, #16
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bd80      	pop	{r7, pc}
 80150b2:	bf00      	nop
 80150b4:	20000e5c 	.word	0x20000e5c

080150b8 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 80150bc:	f7fe ffec 	bl	8014098 <LoRaMacStop>
 80150c0:	4603      	mov	r3, r0
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d114      	bne.n	80150f0 <LoRaMacDeInitialization+0x38>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 80150c6:	480c      	ldr	r0, [pc, #48]	; (80150f8 <LoRaMacDeInitialization+0x40>)
 80150c8:	f008 fcf6 	bl	801dab8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 80150cc:	480b      	ldr	r0, [pc, #44]	; (80150fc <LoRaMacDeInitialization+0x44>)
 80150ce:	f008 fcf3 	bl	801dab8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 80150d2:	480b      	ldr	r0, [pc, #44]	; (8015100 <LoRaMacDeInitialization+0x48>)
 80150d4:	f008 fcf0 	bl	801dab8 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 80150d8:	480a      	ldr	r0, [pc, #40]	; (8015104 <LoRaMacDeInitialization+0x4c>)
 80150da:	f008 fced 	bl	801dab8 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 80150de:	f000 f95e 	bl	801539e <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 80150e2:	f7fd ff85 	bl	8012ff0 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 80150e6:	4b08      	ldr	r3, [pc, #32]	; (8015108 <LoRaMacDeInitialization+0x50>)
 80150e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150ea:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 80150ec:	2300      	movs	r3, #0
 80150ee:	e000      	b.n	80150f2 <LoRaMacDeInitialization+0x3a>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 80150f0:	2301      	movs	r3, #1
    }
}
 80150f2:	4618      	mov	r0, r3
 80150f4:	bd80      	pop	{r7, pc}
 80150f6:	bf00      	nop
 80150f8:	20000cb8 	.word	0x20000cb8
 80150fc:	20000cd0 	.word	0x20000cd0
 8015100:	20000ce8 	.word	0x20000ce8
 8015104:	20000d48 	.word	0x20000d48
 8015108:	0801f374 	.word	0x0801f374

0801510c <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b08c      	sub	sp, #48	; 0x30
 8015110:	af00      	add	r7, sp, #0
 8015112:	60f8      	str	r0, [r7, #12]
 8015114:	60b9      	str	r1, [r7, #8]
 8015116:	607a      	str	r2, [r7, #4]
 8015118:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801511a:	2300      	movs	r3, #0
 801511c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	7c1b      	ldrb	r3, [r3, #16]
 8015124:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	7c5b      	ldrb	r3, [r3, #17]
 801512c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	689a      	ldr	r2, [r3, #8]
 8015134:	683b      	ldr	r3, [r7, #0]
 8015136:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	795b      	ldrb	r3, [r3, #5]
 801513c:	2b00      	cmp	r3, #0
 801513e:	f000 808b 	beq.w	8015258 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8015142:	2302      	movs	r3, #2
 8015144:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	7c9b      	ldrb	r3, [r3, #18]
 801514c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	7cdb      	ldrb	r3, [r3, #19]
 8015154:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015158:	4611      	mov	r1, r2
 801515a:	4618      	mov	r0, r3
 801515c:	f002 f850 	bl	8017200 <RegionGetPhyParam>
 8015160:	4603      	mov	r3, r0
 8015162:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8015164:	6a3b      	ldr	r3, [r7, #32]
 8015166:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 801516a:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 801516e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8015172:	4293      	cmp	r3, r2
 8015174:	bfb8      	it	lt
 8015176:	4613      	movlt	r3, r2
 8015178:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 801517c:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015180:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8015184:	429a      	cmp	r2, r3
 8015186:	d106      	bne.n	8015196 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8015188:	683b      	ldr	r3, [r7, #0]
 801518a:	2200      	movs	r2, #0
 801518c:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 801518e:	2300      	movs	r3, #0
 8015190:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015194:	e060      	b.n	8015258 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	689b      	ldr	r3, [r3, #8]
 801519a:	68fa      	ldr	r2, [r7, #12]
 801519c:	8992      	ldrh	r2, [r2, #12]
 801519e:	4293      	cmp	r3, r2
 80151a0:	d303      	bcc.n	80151aa <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 80151a2:	2301      	movs	r3, #1
 80151a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80151a8:	e002      	b.n	80151b0 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 80151aa:	2300      	movs	r3, #0
 80151ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	689b      	ldr	r3, [r3, #8]
 80151b4:	68fa      	ldr	r2, [r7, #12]
 80151b6:	8992      	ldrh	r2, [r2, #12]
 80151b8:	4611      	mov	r1, r2
 80151ba:	68fa      	ldr	r2, [r7, #12]
 80151bc:	89d2      	ldrh	r2, [r2, #14]
 80151be:	440a      	add	r2, r1
 80151c0:	4293      	cmp	r3, r2
 80151c2:	d349      	bcc.n	8015258 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80151c4:	2308      	movs	r3, #8
 80151c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	7cdb      	ldrb	r3, [r3, #19]
 80151ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80151d2:	4611      	mov	r1, r2
 80151d4:	4618      	mov	r0, r3
 80151d6:	f002 f813 	bl	8017200 <RegionGetPhyParam>
 80151da:	4603      	mov	r3, r0
 80151dc:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 80151de:	6a3b      	ldr	r3, [r7, #32]
 80151e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	689b      	ldr	r3, [r3, #8]
 80151e8:	68fa      	ldr	r2, [r7, #12]
 80151ea:	89d2      	ldrh	r2, [r2, #14]
 80151ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80151f0:	fb01 f202 	mul.w	r2, r1, r2
 80151f4:	1a9b      	subs	r3, r3, r2
 80151f6:	2b01      	cmp	r3, #1
 80151f8:	d12e      	bne.n	8015258 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80151fa:	2322      	movs	r3, #34	; 0x22
 80151fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8015200:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015204:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	7c9b      	ldrb	r3, [r3, #18]
 801520c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	7cdb      	ldrb	r3, [r3, #19]
 8015214:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015218:	4611      	mov	r1, r2
 801521a:	4618      	mov	r0, r3
 801521c:	f001 fff0 	bl	8017200 <RegionGetPhyParam>
 8015220:	4603      	mov	r3, r0
 8015222:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8015224:	6a3b      	ldr	r3, [r7, #32]
 8015226:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 801522a:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801522e:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8015232:	429a      	cmp	r2, r3
 8015234:	d110      	bne.n	8015258 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8015236:	2300      	movs	r3, #0
 8015238:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	791b      	ldrb	r3, [r3, #4]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d009      	beq.n	8015258 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015244:	2302      	movs	r3, #2
 8015246:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	7cdb      	ldrb	r3, [r3, #19]
 801524c:	f107 0214 	add.w	r2, r7, #20
 8015250:	4611      	mov	r1, r2
 8015252:	4618      	mov	r0, r3
 8015254:	f001 fffd 	bl	8017252 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8015258:	68bb      	ldr	r3, [r7, #8]
 801525a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801525e:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015266:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8015268:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801526c:	4618      	mov	r0, r3
 801526e:	3730      	adds	r7, #48	; 0x30
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}

08015274 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b084      	sub	sp, #16
 8015278:	af00      	add	r7, sp, #0
 801527a:	60f8      	str	r0, [r7, #12]
 801527c:	60b9      	str	r1, [r7, #8]
 801527e:	607a      	str	r2, [r7, #4]
 8015280:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	789b      	ldrb	r3, [r3, #2]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d107      	bne.n	801529a <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 801528a:	683b      	ldr	r3, [r7, #0]
 801528c:	687a      	ldr	r2, [r7, #4]
 801528e:	68b9      	ldr	r1, [r7, #8]
 8015290:	68f8      	ldr	r0, [r7, #12]
 8015292:	f7ff ff3b 	bl	801510c <CalcNextV10X>
 8015296:	4603      	mov	r3, r0
 8015298:	e000      	b.n	801529c <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 801529a:	2300      	movs	r3, #0
}
 801529c:	4618      	mov	r0, r3
 801529e:	3710      	adds	r7, #16
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd80      	pop	{r7, pc}

080152a4 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80152a4:	b480      	push	{r7}
 80152a6:	b085      	sub	sp, #20
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	60f8      	str	r0, [r7, #12]
 80152ac:	60b9      	str	r1, [r7, #8]
 80152ae:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80152b0:	bf00      	nop
 80152b2:	3714      	adds	r7, #20
 80152b4:	46bd      	mov	sp, r7
 80152b6:	bc80      	pop	{r7}
 80152b8:	4770      	bx	lr

080152ba <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80152ba:	b480      	push	{r7}
 80152bc:	b083      	sub	sp, #12
 80152be:	af00      	add	r7, sp, #0
 80152c0:	4603      	mov	r3, r0
 80152c2:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80152c4:	bf00      	nop
 80152c6:	370c      	adds	r7, #12
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bc80      	pop	{r7}
 80152cc:	4770      	bx	lr

080152ce <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80152ce:	b480      	push	{r7}
 80152d0:	b083      	sub	sp, #12
 80152d2:	af00      	add	r7, sp, #0
 80152d4:	4603      	mov	r3, r0
 80152d6:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80152d8:	bf00      	nop
 80152da:	370c      	adds	r7, #12
 80152dc:	46bd      	mov	sp, r7
 80152de:	bc80      	pop	{r7}
 80152e0:	4770      	bx	lr

080152e2 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80152e2:	b480      	push	{r7}
 80152e4:	b083      	sub	sp, #12
 80152e6:	af00      	add	r7, sp, #0
 80152e8:	4603      	mov	r3, r0
 80152ea:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80152ec:	bf00      	nop
 80152ee:	370c      	adds	r7, #12
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bc80      	pop	{r7}
 80152f4:	4770      	bx	lr

080152f6 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80152f6:	b480      	push	{r7}
 80152f8:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80152fa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80152fc:	4618      	mov	r0, r3
 80152fe:	46bd      	mov	sp, r7
 8015300:	bc80      	pop	{r7}
 8015302:	4770      	bx	lr

08015304 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8015304:	b480      	push	{r7}
 8015306:	b083      	sub	sp, #12
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801530c:	bf00      	nop
 801530e:	370c      	adds	r7, #12
 8015310:	46bd      	mov	sp, r7
 8015312:	bc80      	pop	{r7}
 8015314:	4770      	bx	lr

08015316 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8015316:	b480      	push	{r7}
 8015318:	b083      	sub	sp, #12
 801531a:	af00      	add	r7, sp, #0
 801531c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801531e:	bf00      	nop
 8015320:	370c      	adds	r7, #12
 8015322:	46bd      	mov	sp, r7
 8015324:	bc80      	pop	{r7}
 8015326:	4770      	bx	lr

08015328 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8015328:	b480      	push	{r7}
 801532a:	b083      	sub	sp, #12
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015330:	bf00      	nop
 8015332:	370c      	adds	r7, #12
 8015334:	46bd      	mov	sp, r7
 8015336:	bc80      	pop	{r7}
 8015338:	4770      	bx	lr

0801533a <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801533a:	b480      	push	{r7}
 801533c:	b083      	sub	sp, #12
 801533e:	af00      	add	r7, sp, #0
 8015340:	6078      	str	r0, [r7, #4]
 8015342:	460b      	mov	r3, r1
 8015344:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8015346:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015348:	4618      	mov	r0, r3
 801534a:	370c      	adds	r7, #12
 801534c:	46bd      	mov	sp, r7
 801534e:	bc80      	pop	{r7}
 8015350:	4770      	bx	lr

08015352 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8015352:	b480      	push	{r7}
 8015354:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015356:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015358:	4618      	mov	r0, r3
 801535a:	46bd      	mov	sp, r7
 801535c:	bc80      	pop	{r7}
 801535e:	4770      	bx	lr

08015360 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8015360:	b480      	push	{r7}
 8015362:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015364:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015366:	4618      	mov	r0, r3
 8015368:	46bd      	mov	sp, r7
 801536a:	bc80      	pop	{r7}
 801536c:	4770      	bx	lr

0801536e <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801536e:	b480      	push	{r7}
 8015370:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015372:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015374:	4618      	mov	r0, r3
 8015376:	46bd      	mov	sp, r7
 8015378:	bc80      	pop	{r7}
 801537a:	4770      	bx	lr

0801537c <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 801537c:	b480      	push	{r7}
 801537e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015380:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015382:	4618      	mov	r0, r3
 8015384:	46bd      	mov	sp, r7
 8015386:	bc80      	pop	{r7}
 8015388:	4770      	bx	lr

0801538a <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 801538a:	b480      	push	{r7}
 801538c:	b083      	sub	sp, #12
 801538e:	af00      	add	r7, sp, #0
 8015390:	4603      	mov	r3, r0
 8015392:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015394:	bf00      	nop
 8015396:	370c      	adds	r7, #12
 8015398:	46bd      	mov	sp, r7
 801539a:	bc80      	pop	{r7}
 801539c:	4770      	bx	lr

0801539e <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801539e:	b480      	push	{r7}
 80153a0:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153a2:	bf00      	nop
 80153a4:	46bd      	mov	sp, r7
 80153a6:	bc80      	pop	{r7}
 80153a8:	4770      	bx	lr

080153aa <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80153aa:	b480      	push	{r7}
 80153ac:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153ae:	bf00      	nop
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bc80      	pop	{r7}
 80153b4:	4770      	bx	lr

080153b6 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80153b6:	b480      	push	{r7}
 80153b8:	b083      	sub	sp, #12
 80153ba:	af00      	add	r7, sp, #0
 80153bc:	4603      	mov	r3, r0
 80153be:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80153c0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153c2:	4618      	mov	r0, r3
 80153c4:	370c      	adds	r7, #12
 80153c6:	46bd      	mov	sp, r7
 80153c8:	bc80      	pop	{r7}
 80153ca:	4770      	bx	lr

080153cc <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80153cc:	b480      	push	{r7}
 80153ce:	b083      	sub	sp, #12
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80153d4:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153d6:	4618      	mov	r0, r3
 80153d8:	370c      	adds	r7, #12
 80153da:	46bd      	mov	sp, r7
 80153dc:	bc80      	pop	{r7}
 80153de:	4770      	bx	lr

080153e0 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80153e0:	b480      	push	{r7}
 80153e2:	b083      	sub	sp, #12
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80153e8:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153ea:	4618      	mov	r0, r3
 80153ec:	370c      	adds	r7, #12
 80153ee:	46bd      	mov	sp, r7
 80153f0:	bc80      	pop	{r7}
 80153f2:	4770      	bx	lr

080153f4 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80153f4:	b480      	push	{r7}
 80153f6:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153f8:	bf00      	nop
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bc80      	pop	{r7}
 80153fe:	4770      	bx	lr

08015400 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8015400:	b480      	push	{r7}
 8015402:	b083      	sub	sp, #12
 8015404:	af00      	add	r7, sp, #0
 8015406:	4603      	mov	r3, r0
 8015408:	6039      	str	r1, [r7, #0]
 801540a:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801540c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801540e:	4618      	mov	r0, r3
 8015410:	370c      	adds	r7, #12
 8015412:	46bd      	mov	sp, r7
 8015414:	bc80      	pop	{r7}
 8015416:	4770      	bx	lr

08015418 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8015418:	b480      	push	{r7}
 801541a:	b083      	sub	sp, #12
 801541c:	af00      	add	r7, sp, #0
 801541e:	4603      	mov	r3, r0
 8015420:	603a      	str	r2, [r7, #0]
 8015422:	80fb      	strh	r3, [r7, #6]
 8015424:	460b      	mov	r3, r1
 8015426:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015428:	bf00      	nop
 801542a:	370c      	adds	r7, #12
 801542c:	46bd      	mov	sp, r7
 801542e:	bc80      	pop	{r7}
 8015430:	4770      	bx	lr

08015432 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8015432:	b480      	push	{r7}
 8015434:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015436:	bf00      	nop
 8015438:	46bd      	mov	sp, r7
 801543a:	bc80      	pop	{r7}
 801543c:	4770      	bx	lr

0801543e <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801543e:	b480      	push	{r7}
 8015440:	b083      	sub	sp, #12
 8015442:	af00      	add	r7, sp, #0
 8015444:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8015446:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015448:	4618      	mov	r0, r3
 801544a:	370c      	adds	r7, #12
 801544c:	46bd      	mov	sp, r7
 801544e:	bc80      	pop	{r7}
 8015450:	4770      	bx	lr

08015452 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8015452:	b480      	push	{r7}
 8015454:	b083      	sub	sp, #12
 8015456:	af00      	add	r7, sp, #0
 8015458:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 801545a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801545c:	4618      	mov	r0, r3
 801545e:	370c      	adds	r7, #12
 8015460:	46bd      	mov	sp, r7
 8015462:	bc80      	pop	{r7}
 8015464:	4770      	bx	lr

08015466 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8015466:	b480      	push	{r7}
 8015468:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801546a:	bf00      	nop
 801546c:	46bd      	mov	sp, r7
 801546e:	bc80      	pop	{r7}
 8015470:	4770      	bx	lr

08015472 <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8015472:	b480      	push	{r7}
 8015474:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015476:	bf00      	nop
 8015478:	46bd      	mov	sp, r7
 801547a:	bc80      	pop	{r7}
 801547c:	4770      	bx	lr

0801547e <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 801547e:	b480      	push	{r7}
 8015480:	b085      	sub	sp, #20
 8015482:	af00      	add	r7, sp, #0
 8015484:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801548a:	2300      	movs	r3, #0
 801548c:	81fb      	strh	r3, [r7, #14]
 801548e:	e00a      	b.n	80154a6 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8015490:	89fb      	ldrh	r3, [r7, #14]
 8015492:	68ba      	ldr	r2, [r7, #8]
 8015494:	4413      	add	r3, r2
 8015496:	781b      	ldrb	r3, [r3, #0]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d001      	beq.n	80154a0 <IsSlotFree+0x22>
        {
            return false;
 801549c:	2300      	movs	r3, #0
 801549e:	e006      	b.n	80154ae <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80154a0:	89fb      	ldrh	r3, [r7, #14]
 80154a2:	3301      	adds	r3, #1
 80154a4:	81fb      	strh	r3, [r7, #14]
 80154a6:	89fb      	ldrh	r3, [r7, #14]
 80154a8:	2b0f      	cmp	r3, #15
 80154aa:	d9f1      	bls.n	8015490 <IsSlotFree+0x12>
        }
    }
    return true;
 80154ac:	2301      	movs	r3, #1
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3714      	adds	r7, #20
 80154b2:	46bd      	mov	sp, r7
 80154b4:	bc80      	pop	{r7}
 80154b6:	4770      	bx	lr

080154b8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b082      	sub	sp, #8
 80154bc:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80154be:	2300      	movs	r3, #0
 80154c0:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80154c2:	e007      	b.n	80154d4 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80154c4:	79fb      	ldrb	r3, [r7, #7]
 80154c6:	3301      	adds	r3, #1
 80154c8:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80154ca:	79fb      	ldrb	r3, [r7, #7]
 80154cc:	2b0f      	cmp	r3, #15
 80154ce:	d101      	bne.n	80154d4 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80154d0:	2300      	movs	r3, #0
 80154d2:	e012      	b.n	80154fa <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80154d4:	79fb      	ldrb	r3, [r7, #7]
 80154d6:	011b      	lsls	r3, r3, #4
 80154d8:	3308      	adds	r3, #8
 80154da:	4a0a      	ldr	r2, [pc, #40]	; (8015504 <MallocNewMacCommandSlot+0x4c>)
 80154dc:	4413      	add	r3, r2
 80154de:	4618      	mov	r0, r3
 80154e0:	f7ff ffcd 	bl	801547e <IsSlotFree>
 80154e4:	4603      	mov	r3, r0
 80154e6:	f083 0301 	eor.w	r3, r3, #1
 80154ea:	b2db      	uxtb	r3, r3
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d1e9      	bne.n	80154c4 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80154f0:	79fb      	ldrb	r3, [r7, #7]
 80154f2:	011b      	lsls	r3, r3, #4
 80154f4:	3308      	adds	r3, #8
 80154f6:	4a03      	ldr	r2, [pc, #12]	; (8015504 <MallocNewMacCommandSlot+0x4c>)
 80154f8:	4413      	add	r3, r2
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	3708      	adds	r7, #8
 80154fe:	46bd      	mov	sp, r7
 8015500:	bd80      	pop	{r7, pc}
 8015502:	bf00      	nop
 8015504:	20001cc4 	.word	0x20001cc4

08015508 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b082      	sub	sp, #8
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d101      	bne.n	801551a <FreeMacCommandSlot+0x12>
    {
        return false;
 8015516:	2300      	movs	r3, #0
 8015518:	e005      	b.n	8015526 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801551a:	2210      	movs	r2, #16
 801551c:	2100      	movs	r1, #0
 801551e:	6878      	ldr	r0, [r7, #4]
 8015520:	f004 f9bc 	bl	801989c <memset1>

    return true;
 8015524:	2301      	movs	r3, #1
}
 8015526:	4618      	mov	r0, r3
 8015528:	3708      	adds	r7, #8
 801552a:	46bd      	mov	sp, r7
 801552c:	bd80      	pop	{r7, pc}

0801552e <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801552e:	b480      	push	{r7}
 8015530:	b083      	sub	sp, #12
 8015532:	af00      	add	r7, sp, #0
 8015534:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d101      	bne.n	8015540 <LinkedListInit+0x12>
    {
        return false;
 801553c:	2300      	movs	r3, #0
 801553e:	e006      	b.n	801554e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	2200      	movs	r2, #0
 8015544:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	2200      	movs	r2, #0
 801554a:	605a      	str	r2, [r3, #4]

    return true;
 801554c:	2301      	movs	r3, #1
}
 801554e:	4618      	mov	r0, r3
 8015550:	370c      	adds	r7, #12
 8015552:	46bd      	mov	sp, r7
 8015554:	bc80      	pop	{r7}
 8015556:	4770      	bx	lr

08015558 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015558:	b480      	push	{r7}
 801555a:	b083      	sub	sp, #12
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
 8015560:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d002      	beq.n	801556e <LinkedListAdd+0x16>
 8015568:	683b      	ldr	r3, [r7, #0]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d101      	bne.n	8015572 <LinkedListAdd+0x1a>
    {
        return false;
 801556e:	2300      	movs	r3, #0
 8015570:	e015      	b.n	801559e <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d102      	bne.n	8015580 <LinkedListAdd+0x28>
    {
        list->First = element;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	683a      	ldr	r2, [r7, #0]
 801557e:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	685b      	ldr	r3, [r3, #4]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d003      	beq.n	8015590 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	685b      	ldr	r3, [r3, #4]
 801558c:	683a      	ldr	r2, [r7, #0]
 801558e:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8015590:	683b      	ldr	r3, [r7, #0]
 8015592:	2200      	movs	r2, #0
 8015594:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	683a      	ldr	r2, [r7, #0]
 801559a:	605a      	str	r2, [r3, #4]

    return true;
 801559c:	2301      	movs	r3, #1
}
 801559e:	4618      	mov	r0, r3
 80155a0:	370c      	adds	r7, #12
 80155a2:	46bd      	mov	sp, r7
 80155a4:	bc80      	pop	{r7}
 80155a6:	4770      	bx	lr

080155a8 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80155a8:	b480      	push	{r7}
 80155aa:	b085      	sub	sp, #20
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
 80155b0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d002      	beq.n	80155be <LinkedListGetPrevious+0x16>
 80155b8:	683b      	ldr	r3, [r7, #0]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d101      	bne.n	80155c2 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80155be:	2300      	movs	r3, #0
 80155c0:	e016      	b.n	80155f0 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80155c8:	683a      	ldr	r2, [r7, #0]
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	429a      	cmp	r2, r3
 80155ce:	d00c      	beq.n	80155ea <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80155d0:	e002      	b.n	80155d8 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d007      	beq.n	80155ee <LinkedListGetPrevious+0x46>
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	683a      	ldr	r2, [r7, #0]
 80155e4:	429a      	cmp	r2, r3
 80155e6:	d1f4      	bne.n	80155d2 <LinkedListGetPrevious+0x2a>
 80155e8:	e001      	b.n	80155ee <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80155ea:	2300      	movs	r3, #0
 80155ec:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80155ee:	68fb      	ldr	r3, [r7, #12]
}
 80155f0:	4618      	mov	r0, r3
 80155f2:	3714      	adds	r7, #20
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bc80      	pop	{r7}
 80155f8:	4770      	bx	lr

080155fa <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80155fa:	b580      	push	{r7, lr}
 80155fc:	b084      	sub	sp, #16
 80155fe:	af00      	add	r7, sp, #0
 8015600:	6078      	str	r0, [r7, #4]
 8015602:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d002      	beq.n	8015610 <LinkedListRemove+0x16>
 801560a:	683b      	ldr	r3, [r7, #0]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d101      	bne.n	8015614 <LinkedListRemove+0x1a>
    {
        return false;
 8015610:	2300      	movs	r3, #0
 8015612:	e020      	b.n	8015656 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015614:	6839      	ldr	r1, [r7, #0]
 8015616:	6878      	ldr	r0, [r7, #4]
 8015618:	f7ff ffc6 	bl	80155a8 <LinkedListGetPrevious>
 801561c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	683a      	ldr	r2, [r7, #0]
 8015624:	429a      	cmp	r2, r3
 8015626:	d103      	bne.n	8015630 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	681a      	ldr	r2, [r3, #0]
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	685b      	ldr	r3, [r3, #4]
 8015634:	683a      	ldr	r2, [r7, #0]
 8015636:	429a      	cmp	r2, r3
 8015638:	d102      	bne.n	8015640 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	68fa      	ldr	r2, [r7, #12]
 801563e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d003      	beq.n	801564e <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8015646:	683b      	ldr	r3, [r7, #0]
 8015648:	681a      	ldr	r2, [r3, #0]
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801564e:	683b      	ldr	r3, [r7, #0]
 8015650:	2200      	movs	r2, #0
 8015652:	601a      	str	r2, [r3, #0]

    return true;
 8015654:	2301      	movs	r3, #1
}
 8015656:	4618      	mov	r0, r3
 8015658:	3710      	adds	r7, #16
 801565a:	46bd      	mov	sp, r7
 801565c:	bd80      	pop	{r7, pc}

0801565e <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801565e:	b480      	push	{r7}
 8015660:	b083      	sub	sp, #12
 8015662:	af00      	add	r7, sp, #0
 8015664:	4603      	mov	r3, r0
 8015666:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8015668:	79fb      	ldrb	r3, [r7, #7]
 801566a:	2b05      	cmp	r3, #5
 801566c:	d004      	beq.n	8015678 <IsSticky+0x1a>
 801566e:	2b05      	cmp	r3, #5
 8015670:	db04      	blt.n	801567c <IsSticky+0x1e>
 8015672:	3b08      	subs	r3, #8
 8015674:	2b02      	cmp	r3, #2
 8015676:	d801      	bhi.n	801567c <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8015678:	2301      	movs	r3, #1
 801567a:	e000      	b.n	801567e <IsSticky+0x20>
        default:
            return false;
 801567c:	2300      	movs	r3, #0
    }
}
 801567e:	4618      	mov	r0, r3
 8015680:	370c      	adds	r7, #12
 8015682:	46bd      	mov	sp, r7
 8015684:	bc80      	pop	{r7}
 8015686:	4770      	bx	lr

08015688 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8015688:	b580      	push	{r7, lr}
 801568a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 801568c:	22fc      	movs	r2, #252	; 0xfc
 801568e:	2100      	movs	r1, #0
 8015690:	4804      	ldr	r0, [pc, #16]	; (80156a4 <LoRaMacCommandsInit+0x1c>)
 8015692:	f004 f903 	bl	801989c <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8015696:	4803      	ldr	r0, [pc, #12]	; (80156a4 <LoRaMacCommandsInit+0x1c>)
 8015698:	f7ff ff49 	bl	801552e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 801569c:	2300      	movs	r3, #0
}
 801569e:	4618      	mov	r0, r3
 80156a0:	bd80      	pop	{r7, pc}
 80156a2:	bf00      	nop
 80156a4:	20001cc4 	.word	0x20001cc4

080156a8 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b086      	sub	sp, #24
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	4603      	mov	r3, r0
 80156b0:	60b9      	str	r1, [r7, #8]
 80156b2:	607a      	str	r2, [r7, #4]
 80156b4:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80156b6:	68bb      	ldr	r3, [r7, #8]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d101      	bne.n	80156c0 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80156bc:	2301      	movs	r3, #1
 80156be:	e033      	b.n	8015728 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80156c0:	f7ff fefa 	bl	80154b8 <MallocNewMacCommandSlot>
 80156c4:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d101      	bne.n	80156d0 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80156cc:	2302      	movs	r3, #2
 80156ce:	e02b      	b.n	8015728 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80156d0:	6979      	ldr	r1, [r7, #20]
 80156d2:	4817      	ldr	r0, [pc, #92]	; (8015730 <LoRaMacCommandsAddCmd+0x88>)
 80156d4:	f7ff ff40 	bl	8015558 <LinkedListAdd>
 80156d8:	4603      	mov	r3, r0
 80156da:	f083 0301 	eor.w	r3, r3, #1
 80156de:	b2db      	uxtb	r3, r3
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d001      	beq.n	80156e8 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80156e4:	2305      	movs	r3, #5
 80156e6:	e01f      	b.n	8015728 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 80156e8:	697b      	ldr	r3, [r7, #20]
 80156ea:	7bfa      	ldrb	r2, [r7, #15]
 80156ec:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80156ee:	697b      	ldr	r3, [r7, #20]
 80156f0:	687a      	ldr	r2, [r7, #4]
 80156f2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80156f4:	697b      	ldr	r3, [r7, #20]
 80156f6:	3305      	adds	r3, #5
 80156f8:	687a      	ldr	r2, [r7, #4]
 80156fa:	b292      	uxth	r2, r2
 80156fc:	68b9      	ldr	r1, [r7, #8]
 80156fe:	4618      	mov	r0, r3
 8015700:	f004 f891 	bl	8019826 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8015704:	7bfb      	ldrb	r3, [r7, #15]
 8015706:	4618      	mov	r0, r3
 8015708:	f7ff ffa9 	bl	801565e <IsSticky>
 801570c:	4603      	mov	r3, r0
 801570e:	461a      	mov	r2, r3
 8015710:	697b      	ldr	r3, [r7, #20]
 8015712:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8015714:	4b06      	ldr	r3, [pc, #24]	; (8015730 <LoRaMacCommandsAddCmd+0x88>)
 8015716:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	4413      	add	r3, r2
 801571e:	3301      	adds	r3, #1
 8015720:	4a03      	ldr	r2, [pc, #12]	; (8015730 <LoRaMacCommandsAddCmd+0x88>)
 8015722:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8015726:	2300      	movs	r3, #0
}
 8015728:	4618      	mov	r0, r3
 801572a:	3718      	adds	r7, #24
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}
 8015730:	20001cc4 	.word	0x20001cc4

08015734 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b082      	sub	sp, #8
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d101      	bne.n	8015746 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015742:	2301      	movs	r3, #1
 8015744:	e021      	b.n	801578a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8015746:	6879      	ldr	r1, [r7, #4]
 8015748:	4812      	ldr	r0, [pc, #72]	; (8015794 <LoRaMacCommandsRemoveCmd+0x60>)
 801574a:	f7ff ff56 	bl	80155fa <LinkedListRemove>
 801574e:	4603      	mov	r3, r0
 8015750:	f083 0301 	eor.w	r3, r3, #1
 8015754:	b2db      	uxtb	r3, r3
 8015756:	2b00      	cmp	r3, #0
 8015758:	d001      	beq.n	801575e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801575a:	2303      	movs	r3, #3
 801575c:	e015      	b.n	801578a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801575e:	4b0d      	ldr	r3, [pc, #52]	; (8015794 <LoRaMacCommandsRemoveCmd+0x60>)
 8015760:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	689b      	ldr	r3, [r3, #8]
 8015768:	1ad3      	subs	r3, r2, r3
 801576a:	3b01      	subs	r3, #1
 801576c:	4a09      	ldr	r2, [pc, #36]	; (8015794 <LoRaMacCommandsRemoveCmd+0x60>)
 801576e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8015772:	6878      	ldr	r0, [r7, #4]
 8015774:	f7ff fec8 	bl	8015508 <FreeMacCommandSlot>
 8015778:	4603      	mov	r3, r0
 801577a:	f083 0301 	eor.w	r3, r3, #1
 801577e:	b2db      	uxtb	r3, r3
 8015780:	2b00      	cmp	r3, #0
 8015782:	d001      	beq.n	8015788 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015784:	2305      	movs	r3, #5
 8015786:	e000      	b.n	801578a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015788:	2300      	movs	r3, #0
}
 801578a:	4618      	mov	r0, r3
 801578c:	3708      	adds	r7, #8
 801578e:	46bd      	mov	sp, r7
 8015790:	bd80      	pop	{r7, pc}
 8015792:	bf00      	nop
 8015794:	20001cc4 	.word	0x20001cc4

08015798 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b082      	sub	sp, #8
 801579c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801579e:	4b0f      	ldr	r3, [pc, #60]	; (80157dc <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80157a4:	e012      	b.n	80157cc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	7b1b      	ldrb	r3, [r3, #12]
 80157aa:	f083 0301 	eor.w	r3, r3, #1
 80157ae:	b2db      	uxtb	r3, r3
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d008      	beq.n	80157c6 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80157ba:	6878      	ldr	r0, [r7, #4]
 80157bc:	f7ff ffba 	bl	8015734 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80157c0:	683b      	ldr	r3, [r7, #0]
 80157c2:	607b      	str	r3, [r7, #4]
 80157c4:	e002      	b.n	80157cc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d1e9      	bne.n	80157a6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80157d2:	2300      	movs	r3, #0
}
 80157d4:	4618      	mov	r0, r3
 80157d6:	3708      	adds	r7, #8
 80157d8:	46bd      	mov	sp, r7
 80157da:	bd80      	pop	{r7, pc}
 80157dc:	20001cc4 	.word	0x20001cc4

080157e0 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b082      	sub	sp, #8
 80157e4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80157e6:	4b0e      	ldr	r3, [pc, #56]	; (8015820 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80157ec:	e00f      	b.n	801580e <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	791b      	ldrb	r3, [r3, #4]
 80157f8:	4618      	mov	r0, r3
 80157fa:	f7ff ff30 	bl	801565e <IsSticky>
 80157fe:	4603      	mov	r3, r0
 8015800:	2b00      	cmp	r3, #0
 8015802:	d002      	beq.n	801580a <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8015804:	6878      	ldr	r0, [r7, #4]
 8015806:	f7ff ff95 	bl	8015734 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801580a:	683b      	ldr	r3, [r7, #0]
 801580c:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d1ec      	bne.n	80157ee <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015814:	2300      	movs	r3, #0
}
 8015816:	4618      	mov	r0, r3
 8015818:	3708      	adds	r7, #8
 801581a:	46bd      	mov	sp, r7
 801581c:	bd80      	pop	{r7, pc}
 801581e:	bf00      	nop
 8015820:	20001cc4 	.word	0x20001cc4

08015824 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8015824:	b480      	push	{r7}
 8015826:	b083      	sub	sp, #12
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d101      	bne.n	8015836 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015832:	2301      	movs	r3, #1
 8015834:	e005      	b.n	8015842 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8015836:	4b05      	ldr	r3, [pc, #20]	; (801584c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8015838:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8015840:	2300      	movs	r3, #0
}
 8015842:	4618      	mov	r0, r3
 8015844:	370c      	adds	r7, #12
 8015846:	46bd      	mov	sp, r7
 8015848:	bc80      	pop	{r7}
 801584a:	4770      	bx	lr
 801584c:	20001cc4 	.word	0x20001cc4

08015850 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b088      	sub	sp, #32
 8015854:	af00      	add	r7, sp, #0
 8015856:	60f8      	str	r0, [r7, #12]
 8015858:	60b9      	str	r1, [r7, #8]
 801585a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 801585c:	4b25      	ldr	r3, [pc, #148]	; (80158f4 <LoRaMacCommandsSerializeCmds+0xa4>)
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8015862:	2300      	movs	r3, #0
 8015864:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d002      	beq.n	8015872 <LoRaMacCommandsSerializeCmds+0x22>
 801586c:	68bb      	ldr	r3, [r7, #8]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d126      	bne.n	80158c0 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015872:	2301      	movs	r3, #1
 8015874:	e039      	b.n	80158ea <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8015876:	7efb      	ldrb	r3, [r7, #27]
 8015878:	68fa      	ldr	r2, [r7, #12]
 801587a:	1ad2      	subs	r2, r2, r3
 801587c:	69fb      	ldr	r3, [r7, #28]
 801587e:	689b      	ldr	r3, [r3, #8]
 8015880:	3301      	adds	r3, #1
 8015882:	429a      	cmp	r2, r3
 8015884:	d320      	bcc.n	80158c8 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8015886:	7efb      	ldrb	r3, [r7, #27]
 8015888:	1c5a      	adds	r2, r3, #1
 801588a:	76fa      	strb	r2, [r7, #27]
 801588c:	461a      	mov	r2, r3
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	4413      	add	r3, r2
 8015892:	69fa      	ldr	r2, [r7, #28]
 8015894:	7912      	ldrb	r2, [r2, #4]
 8015896:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8015898:	7efb      	ldrb	r3, [r7, #27]
 801589a:	687a      	ldr	r2, [r7, #4]
 801589c:	18d0      	adds	r0, r2, r3
 801589e:	69fb      	ldr	r3, [r7, #28]
 80158a0:	1d59      	adds	r1, r3, #5
 80158a2:	69fb      	ldr	r3, [r7, #28]
 80158a4:	689b      	ldr	r3, [r3, #8]
 80158a6:	b29b      	uxth	r3, r3
 80158a8:	461a      	mov	r2, r3
 80158aa:	f003 ffbc 	bl	8019826 <memcpy1>
            itr += curElement->PayloadSize;
 80158ae:	69fb      	ldr	r3, [r7, #28]
 80158b0:	689b      	ldr	r3, [r3, #8]
 80158b2:	b2da      	uxtb	r2, r3
 80158b4:	7efb      	ldrb	r3, [r7, #27]
 80158b6:	4413      	add	r3, r2
 80158b8:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80158ba:	69fb      	ldr	r3, [r7, #28]
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80158c0:	69fb      	ldr	r3, [r7, #28]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d1d7      	bne.n	8015876 <LoRaMacCommandsSerializeCmds+0x26>
 80158c6:	e009      	b.n	80158dc <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80158c8:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80158ca:	e007      	b.n	80158dc <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80158cc:	69fb      	ldr	r3, [r7, #28]
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80158d2:	69f8      	ldr	r0, [r7, #28]
 80158d4:	f7ff ff2e 	bl	8015734 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80158d8:	697b      	ldr	r3, [r7, #20]
 80158da:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80158dc:	69fb      	ldr	r3, [r7, #28]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d1f4      	bne.n	80158cc <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80158e2:	68b8      	ldr	r0, [r7, #8]
 80158e4:	f7ff ff9e 	bl	8015824 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80158e8:	2300      	movs	r3, #0
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	3720      	adds	r7, #32
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bd80      	pop	{r7, pc}
 80158f2:	bf00      	nop
 80158f4:	20001cc4 	.word	0x20001cc4

080158f8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80158f8:	b480      	push	{r7}
 80158fa:	b085      	sub	sp, #20
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d101      	bne.n	801590a <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015906:	2301      	movs	r3, #1
 8015908:	e016      	b.n	8015938 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 801590a:	4b0e      	ldr	r3, [pc, #56]	; (8015944 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	2200      	movs	r2, #0
 8015914:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8015916:	e00b      	b.n	8015930 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	7b1b      	ldrb	r3, [r3, #12]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d004      	beq.n	801592a <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	2201      	movs	r2, #1
 8015924:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8015926:	2300      	movs	r3, #0
 8015928:	e006      	b.n	8015938 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d1f0      	bne.n	8015918 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015936:	2300      	movs	r3, #0
}
 8015938:	4618      	mov	r0, r3
 801593a:	3714      	adds	r7, #20
 801593c:	46bd      	mov	sp, r7
 801593e:	bc80      	pop	{r7}
 8015940:	4770      	bx	lr
 8015942:	bf00      	nop
 8015944:	20001cc4 	.word	0x20001cc4

08015948 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8015948:	b480      	push	{r7}
 801594a:	b085      	sub	sp, #20
 801594c:	af00      	add	r7, sp, #0
 801594e:	4603      	mov	r3, r0
 8015950:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8015952:	2300      	movs	r3, #0
 8015954:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8015956:	79fb      	ldrb	r3, [r7, #7]
 8015958:	3b02      	subs	r3, #2
 801595a:	2b11      	cmp	r3, #17
 801595c:	d850      	bhi.n	8015a00 <LoRaMacCommandsGetCmdSize+0xb8>
 801595e:	a201      	add	r2, pc, #4	; (adr r2, 8015964 <LoRaMacCommandsGetCmdSize+0x1c>)
 8015960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015964:	080159ad 	.word	0x080159ad
 8015968:	080159b3 	.word	0x080159b3
 801596c:	080159b9 	.word	0x080159b9
 8015970:	080159bf 	.word	0x080159bf
 8015974:	080159c5 	.word	0x080159c5
 8015978:	080159cb 	.word	0x080159cb
 801597c:	080159d1 	.word	0x080159d1
 8015980:	080159d7 	.word	0x080159d7
 8015984:	080159dd 	.word	0x080159dd
 8015988:	08015a01 	.word	0x08015a01
 801598c:	08015a01 	.word	0x08015a01
 8015990:	080159e3 	.word	0x080159e3
 8015994:	08015a01 	.word	0x08015a01
 8015998:	08015a01 	.word	0x08015a01
 801599c:	080159e9 	.word	0x080159e9
 80159a0:	080159ef 	.word	0x080159ef
 80159a4:	080159f5 	.word	0x080159f5
 80159a8:	080159fb 	.word	0x080159fb
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80159ac:	2303      	movs	r3, #3
 80159ae:	73fb      	strb	r3, [r7, #15]
            break;
 80159b0:	e027      	b.n	8015a02 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80159b2:	2305      	movs	r3, #5
 80159b4:	73fb      	strb	r3, [r7, #15]
            break;
 80159b6:	e024      	b.n	8015a02 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80159b8:	2302      	movs	r3, #2
 80159ba:	73fb      	strb	r3, [r7, #15]
            break;
 80159bc:	e021      	b.n	8015a02 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80159be:	2305      	movs	r3, #5
 80159c0:	73fb      	strb	r3, [r7, #15]
            break;
 80159c2:	e01e      	b.n	8015a02 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80159c4:	2301      	movs	r3, #1
 80159c6:	73fb      	strb	r3, [r7, #15]
            break;
 80159c8:	e01b      	b.n	8015a02 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80159ca:	2306      	movs	r3, #6
 80159cc:	73fb      	strb	r3, [r7, #15]
            break;
 80159ce:	e018      	b.n	8015a02 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80159d0:	2302      	movs	r3, #2
 80159d2:	73fb      	strb	r3, [r7, #15]
            break;
 80159d4:	e015      	b.n	8015a02 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80159d6:	2302      	movs	r3, #2
 80159d8:	73fb      	strb	r3, [r7, #15]
            break;
 80159da:	e012      	b.n	8015a02 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80159dc:	2305      	movs	r3, #5
 80159de:	73fb      	strb	r3, [r7, #15]
            break;
 80159e0:	e00f      	b.n	8015a02 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80159e2:	2306      	movs	r3, #6
 80159e4:	73fb      	strb	r3, [r7, #15]
            break;
 80159e6:	e00c      	b.n	8015a02 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80159e8:	2301      	movs	r3, #1
 80159ea:	73fb      	strb	r3, [r7, #15]
            break;
 80159ec:	e009      	b.n	8015a02 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80159ee:	2305      	movs	r3, #5
 80159f0:	73fb      	strb	r3, [r7, #15]
            break;
 80159f2:	e006      	b.n	8015a02 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80159f4:	2304      	movs	r3, #4
 80159f6:	73fb      	strb	r3, [r7, #15]
            break;
 80159f8:	e003      	b.n	8015a02 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80159fa:	2304      	movs	r3, #4
 80159fc:	73fb      	strb	r3, [r7, #15]
            break;
 80159fe:	e000      	b.n	8015a02 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8015a00:	bf00      	nop
        }
    }
    return cidSize;
 8015a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a04:	4618      	mov	r0, r3
 8015a06:	3714      	adds	r7, #20
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bc80      	pop	{r7}
 8015a0c:	4770      	bx	lr
 8015a0e:	bf00      	nop

08015a10 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8015a10:	b480      	push	{r7}
 8015a12:	b083      	sub	sp, #12
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	4a07      	ldr	r2, [pc, #28]	; (8015a38 <IncreaseBufferPointer+0x28>)
 8015a1c:	4293      	cmp	r3, r2
 8015a1e:	d102      	bne.n	8015a26 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015a20:	4b06      	ldr	r3, [pc, #24]	; (8015a3c <IncreaseBufferPointer+0x2c>)
 8015a22:	607b      	str	r3, [r7, #4]
 8015a24:	e002      	b.n	8015a2c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	3304      	adds	r3, #4
 8015a2a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8015a2c:	687b      	ldr	r3, [r7, #4]
}
 8015a2e:	4618      	mov	r0, r3
 8015a30:	370c      	adds	r7, #12
 8015a32:	46bd      	mov	sp, r7
 8015a34:	bc80      	pop	{r7}
 8015a36:	4770      	bx	lr
 8015a38:	20001ddc 	.word	0x20001ddc
 8015a3c:	20001dcc 	.word	0x20001dcc

08015a40 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8015a40:	b480      	push	{r7}
 8015a42:	b083      	sub	sp, #12
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	4603      	mov	r3, r0
 8015a48:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8015a4a:	79fb      	ldrb	r3, [r7, #7]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d101      	bne.n	8015a54 <IsListEmpty+0x14>
    {
        return true;
 8015a50:	2301      	movs	r3, #1
 8015a52:	e000      	b.n	8015a56 <IsListEmpty+0x16>
    }
    return false;
 8015a54:	2300      	movs	r3, #0
}
 8015a56:	4618      	mov	r0, r3
 8015a58:	370c      	adds	r7, #12
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bc80      	pop	{r7}
 8015a5e:	4770      	bx	lr

08015a60 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8015a60:	b480      	push	{r7}
 8015a62:	b083      	sub	sp, #12
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	4603      	mov	r3, r0
 8015a68:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8015a6a:	79fb      	ldrb	r3, [r7, #7]
 8015a6c:	2b04      	cmp	r3, #4
 8015a6e:	d901      	bls.n	8015a74 <IsListFull+0x14>
    {
        return true;
 8015a70:	2301      	movs	r3, #1
 8015a72:	e000      	b.n	8015a76 <IsListFull+0x16>
    }
    return false;
 8015a74:	2300      	movs	r3, #0
}
 8015a76:	4618      	mov	r0, r3
 8015a78:	370c      	adds	r7, #12
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	bc80      	pop	{r7}
 8015a7e:	4770      	bx	lr

08015a80 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b086      	sub	sp, #24
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	4603      	mov	r3, r0
 8015a88:	60b9      	str	r1, [r7, #8]
 8015a8a:	607a      	str	r2, [r7, #4]
 8015a8c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8015a8e:	68bb      	ldr	r3, [r7, #8]
 8015a90:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015a92:	4b13      	ldr	r3, [pc, #76]	; (8015ae0 <GetElement+0x60>)
 8015a94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015a98:	4618      	mov	r0, r3
 8015a9a:	f7ff ffd1 	bl	8015a40 <IsListEmpty>
 8015a9e:	4603      	mov	r3, r0
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d001      	beq.n	8015aa8 <GetElement+0x28>
    {
        return NULL;
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	e017      	b.n	8015ad8 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	74fb      	strb	r3, [r7, #19]
 8015aac:	e00d      	b.n	8015aca <GetElement+0x4a>
    {
        if( element->Request == request )
 8015aae:	697b      	ldr	r3, [r7, #20]
 8015ab0:	781b      	ldrb	r3, [r3, #0]
 8015ab2:	7bfa      	ldrb	r2, [r7, #15]
 8015ab4:	429a      	cmp	r2, r3
 8015ab6:	d101      	bne.n	8015abc <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8015ab8:	697b      	ldr	r3, [r7, #20]
 8015aba:	e00d      	b.n	8015ad8 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8015abc:	6978      	ldr	r0, [r7, #20]
 8015abe:	f7ff ffa7 	bl	8015a10 <IncreaseBufferPointer>
 8015ac2:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8015ac4:	7cfb      	ldrb	r3, [r7, #19]
 8015ac6:	3301      	adds	r3, #1
 8015ac8:	74fb      	strb	r3, [r7, #19]
 8015aca:	4b05      	ldr	r3, [pc, #20]	; (8015ae0 <GetElement+0x60>)
 8015acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015ad0:	7cfa      	ldrb	r2, [r7, #19]
 8015ad2:	429a      	cmp	r2, r3
 8015ad4:	d3eb      	bcc.n	8015aae <GetElement+0x2e>
    }

    return NULL;
 8015ad6:	2300      	movs	r3, #0
}
 8015ad8:	4618      	mov	r0, r3
 8015ada:	3718      	adds	r7, #24
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd80      	pop	{r7, pc}
 8015ae0:	20001dc0 	.word	0x20001dc0

08015ae4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b082      	sub	sp, #8
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8015aec:	4a0c      	ldr	r2, [pc, #48]	; (8015b20 <LoRaMacConfirmQueueInit+0x3c>)
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8015af2:	4b0b      	ldr	r3, [pc, #44]	; (8015b20 <LoRaMacConfirmQueueInit+0x3c>)
 8015af4:	2200      	movs	r2, #0
 8015af6:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015afa:	4b09      	ldr	r3, [pc, #36]	; (8015b20 <LoRaMacConfirmQueueInit+0x3c>)
 8015afc:	4a09      	ldr	r2, [pc, #36]	; (8015b24 <LoRaMacConfirmQueueInit+0x40>)
 8015afe:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015b00:	4b07      	ldr	r3, [pc, #28]	; (8015b20 <LoRaMacConfirmQueueInit+0x3c>)
 8015b02:	4a08      	ldr	r2, [pc, #32]	; (8015b24 <LoRaMacConfirmQueueInit+0x40>)
 8015b04:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8015b06:	2214      	movs	r2, #20
 8015b08:	21ff      	movs	r1, #255	; 0xff
 8015b0a:	4806      	ldr	r0, [pc, #24]	; (8015b24 <LoRaMacConfirmQueueInit+0x40>)
 8015b0c:	f003 fec6 	bl	801989c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015b10:	4b03      	ldr	r3, [pc, #12]	; (8015b20 <LoRaMacConfirmQueueInit+0x3c>)
 8015b12:	2201      	movs	r2, #1
 8015b14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8015b18:	bf00      	nop
 8015b1a:	3708      	adds	r7, #8
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bd80      	pop	{r7, pc}
 8015b20:	20001dc0 	.word	0x20001dc0
 8015b24:	20001dcc 	.word	0x20001dcc

08015b28 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b082      	sub	sp, #8
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015b30:	4b19      	ldr	r3, [pc, #100]	; (8015b98 <LoRaMacConfirmQueueAdd+0x70>)
 8015b32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7ff ff92 	bl	8015a60 <IsListFull>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d001      	beq.n	8015b46 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8015b42:	2300      	movs	r3, #0
 8015b44:	e023      	b.n	8015b8e <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8015b46:	4b14      	ldr	r3, [pc, #80]	; (8015b98 <LoRaMacConfirmQueueAdd+0x70>)
 8015b48:	689b      	ldr	r3, [r3, #8]
 8015b4a:	687a      	ldr	r2, [r7, #4]
 8015b4c:	7812      	ldrb	r2, [r2, #0]
 8015b4e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8015b50:	4b11      	ldr	r3, [pc, #68]	; (8015b98 <LoRaMacConfirmQueueAdd+0x70>)
 8015b52:	689b      	ldr	r3, [r3, #8]
 8015b54:	687a      	ldr	r2, [r7, #4]
 8015b56:	7852      	ldrb	r2, [r2, #1]
 8015b58:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8015b5a:	4b0f      	ldr	r3, [pc, #60]	; (8015b98 <LoRaMacConfirmQueueAdd+0x70>)
 8015b5c:	689b      	ldr	r3, [r3, #8]
 8015b5e:	687a      	ldr	r2, [r7, #4]
 8015b60:	78d2      	ldrb	r2, [r2, #3]
 8015b62:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8015b64:	4b0c      	ldr	r3, [pc, #48]	; (8015b98 <LoRaMacConfirmQueueAdd+0x70>)
 8015b66:	689b      	ldr	r3, [r3, #8]
 8015b68:	2200      	movs	r2, #0
 8015b6a:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8015b6c:	4b0a      	ldr	r3, [pc, #40]	; (8015b98 <LoRaMacConfirmQueueAdd+0x70>)
 8015b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015b72:	3301      	adds	r3, #1
 8015b74:	b2da      	uxtb	r2, r3
 8015b76:	4b08      	ldr	r3, [pc, #32]	; (8015b98 <LoRaMacConfirmQueueAdd+0x70>)
 8015b78:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8015b7c:	4b06      	ldr	r3, [pc, #24]	; (8015b98 <LoRaMacConfirmQueueAdd+0x70>)
 8015b7e:	689b      	ldr	r3, [r3, #8]
 8015b80:	4618      	mov	r0, r3
 8015b82:	f7ff ff45 	bl	8015a10 <IncreaseBufferPointer>
 8015b86:	4603      	mov	r3, r0
 8015b88:	4a03      	ldr	r2, [pc, #12]	; (8015b98 <LoRaMacConfirmQueueAdd+0x70>)
 8015b8a:	6093      	str	r3, [r2, #8]

    return true;
 8015b8c:	2301      	movs	r3, #1
}
 8015b8e:	4618      	mov	r0, r3
 8015b90:	3708      	adds	r7, #8
 8015b92:	46bd      	mov	sp, r7
 8015b94:	bd80      	pop	{r7, pc}
 8015b96:	bf00      	nop
 8015b98:	20001dc0 	.word	0x20001dc0

08015b9c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015ba0:	4b0e      	ldr	r3, [pc, #56]	; (8015bdc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	f7ff ff4a 	bl	8015a40 <IsListEmpty>
 8015bac:	4603      	mov	r3, r0
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d001      	beq.n	8015bb6 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	e010      	b.n	8015bd8 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8015bb6:	4b09      	ldr	r3, [pc, #36]	; (8015bdc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015bbc:	3b01      	subs	r3, #1
 8015bbe:	b2da      	uxtb	r2, r3
 8015bc0:	4b06      	ldr	r3, [pc, #24]	; (8015bdc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015bc2:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8015bc6:	4b05      	ldr	r3, [pc, #20]	; (8015bdc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015bc8:	685b      	ldr	r3, [r3, #4]
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f7ff ff20 	bl	8015a10 <IncreaseBufferPointer>
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	4a02      	ldr	r2, [pc, #8]	; (8015bdc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015bd4:	6053      	str	r3, [r2, #4]

    return true;
 8015bd6:	2301      	movs	r3, #1
}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	bd80      	pop	{r7, pc}
 8015bdc:	20001dc0 	.word	0x20001dc0

08015be0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b084      	sub	sp, #16
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	4603      	mov	r3, r0
 8015be8:	460a      	mov	r2, r1
 8015bea:	71fb      	strb	r3, [r7, #7]
 8015bec:	4613      	mov	r3, r2
 8015bee:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015bf4:	4b10      	ldr	r3, [pc, #64]	; (8015c38 <LoRaMacConfirmQueueSetStatus+0x58>)
 8015bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f7ff ff20 	bl	8015a40 <IsListEmpty>
 8015c00:	4603      	mov	r3, r0
 8015c02:	f083 0301 	eor.w	r3, r3, #1
 8015c06:	b2db      	uxtb	r3, r3
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d011      	beq.n	8015c30 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015c0c:	4b0a      	ldr	r3, [pc, #40]	; (8015c38 <LoRaMacConfirmQueueSetStatus+0x58>)
 8015c0e:	6859      	ldr	r1, [r3, #4]
 8015c10:	4b09      	ldr	r3, [pc, #36]	; (8015c38 <LoRaMacConfirmQueueSetStatus+0x58>)
 8015c12:	689a      	ldr	r2, [r3, #8]
 8015c14:	79bb      	ldrb	r3, [r7, #6]
 8015c16:	4618      	mov	r0, r3
 8015c18:	f7ff ff32 	bl	8015a80 <GetElement>
 8015c1c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d005      	beq.n	8015c30 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	79fa      	ldrb	r2, [r7, #7]
 8015c28:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	2201      	movs	r2, #1
 8015c2e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8015c30:	bf00      	nop
 8015c32:	3710      	adds	r7, #16
 8015c34:	46bd      	mov	sp, r7
 8015c36:	bd80      	pop	{r7, pc}
 8015c38:	20001dc0 	.word	0x20001dc0

08015c3c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b084      	sub	sp, #16
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	4603      	mov	r3, r0
 8015c44:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8015c46:	2300      	movs	r3, #0
 8015c48:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015c4a:	4b10      	ldr	r3, [pc, #64]	; (8015c8c <LoRaMacConfirmQueueGetStatus+0x50>)
 8015c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015c50:	4618      	mov	r0, r3
 8015c52:	f7ff fef5 	bl	8015a40 <IsListEmpty>
 8015c56:	4603      	mov	r3, r0
 8015c58:	f083 0301 	eor.w	r3, r3, #1
 8015c5c:	b2db      	uxtb	r3, r3
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d00e      	beq.n	8015c80 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015c62:	4b0a      	ldr	r3, [pc, #40]	; (8015c8c <LoRaMacConfirmQueueGetStatus+0x50>)
 8015c64:	6859      	ldr	r1, [r3, #4]
 8015c66:	4b09      	ldr	r3, [pc, #36]	; (8015c8c <LoRaMacConfirmQueueGetStatus+0x50>)
 8015c68:	689a      	ldr	r2, [r3, #8]
 8015c6a:	79fb      	ldrb	r3, [r7, #7]
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	f7ff ff07 	bl	8015a80 <GetElement>
 8015c72:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d002      	beq.n	8015c80 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	785b      	ldrb	r3, [r3, #1]
 8015c7e:	e000      	b.n	8015c82 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015c80:	2301      	movs	r3, #1
}
 8015c82:	4618      	mov	r0, r3
 8015c84:	3710      	adds	r7, #16
 8015c86:	46bd      	mov	sp, r7
 8015c88:	bd80      	pop	{r7, pc}
 8015c8a:	bf00      	nop
 8015c8c:	20001dc0 	.word	0x20001dc0

08015c90 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b084      	sub	sp, #16
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	4603      	mov	r3, r0
 8015c98:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8015c9a:	4b16      	ldr	r3, [pc, #88]	; (8015cf4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015c9c:	685b      	ldr	r3, [r3, #4]
 8015c9e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8015ca0:	4a14      	ldr	r2, [pc, #80]	; (8015cf4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015ca2:	79fb      	ldrb	r3, [r7, #7]
 8015ca4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015ca8:	4b12      	ldr	r3, [pc, #72]	; (8015cf4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015caa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f7ff fec6 	bl	8015a40 <IsListEmpty>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	f083 0301 	eor.w	r3, r3, #1
 8015cba:	b2db      	uxtb	r3, r3
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d015      	beq.n	8015cec <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	79fa      	ldrb	r2, [r7, #7]
 8015cc4:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	78db      	ldrb	r3, [r3, #3]
 8015cca:	f083 0301 	eor.w	r3, r3, #1
 8015cce:	b2db      	uxtb	r3, r3
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d002      	beq.n	8015cda <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	2201      	movs	r2, #1
 8015cd8:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8015cda:	68f8      	ldr	r0, [r7, #12]
 8015cdc:	f7ff fe98 	bl	8015a10 <IncreaseBufferPointer>
 8015ce0:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8015ce2:	4b04      	ldr	r3, [pc, #16]	; (8015cf4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015ce4:	689b      	ldr	r3, [r3, #8]
 8015ce6:	68fa      	ldr	r2, [r7, #12]
 8015ce8:	429a      	cmp	r2, r3
 8015cea:	d1e9      	bne.n	8015cc0 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8015cec:	bf00      	nop
 8015cee:	3710      	adds	r7, #16
 8015cf0:	46bd      	mov	sp, r7
 8015cf2:	bd80      	pop	{r7, pc}
 8015cf4:	20001dc0 	.word	0x20001dc0

08015cf8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b082      	sub	sp, #8
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	4603      	mov	r3, r0
 8015d00:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8015d02:	4b09      	ldr	r3, [pc, #36]	; (8015d28 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015d04:	6859      	ldr	r1, [r3, #4]
 8015d06:	4b08      	ldr	r3, [pc, #32]	; (8015d28 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015d08:	689a      	ldr	r2, [r3, #8]
 8015d0a:	79fb      	ldrb	r3, [r7, #7]
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	f7ff feb7 	bl	8015a80 <GetElement>
 8015d12:	4603      	mov	r3, r0
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d001      	beq.n	8015d1c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8015d18:	2301      	movs	r3, #1
 8015d1a:	e000      	b.n	8015d1e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8015d1c:	2300      	movs	r3, #0
}
 8015d1e:	4618      	mov	r0, r3
 8015d20:	3708      	adds	r7, #8
 8015d22:	46bd      	mov	sp, r7
 8015d24:	bd80      	pop	{r7, pc}
 8015d26:	bf00      	nop
 8015d28:	20001dc0 	.word	0x20001dc0

08015d2c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b084      	sub	sp, #16
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8015d34:	4b22      	ldr	r3, [pc, #136]	; (8015dc0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8015d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015d3a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8015d40:	2300      	movs	r3, #0
 8015d42:	73fb      	strb	r3, [r7, #15]
 8015d44:	e032      	b.n	8015dac <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8015d46:	4b1e      	ldr	r3, [pc, #120]	; (8015dc0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8015d48:	685b      	ldr	r3, [r3, #4]
 8015d4a:	781a      	ldrb	r2, [r3, #0]
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8015d50:	4b1b      	ldr	r3, [pc, #108]	; (8015dc0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8015d52:	685b      	ldr	r3, [r3, #4]
 8015d54:	785a      	ldrb	r2, [r3, #1]
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8015d5a:	4b19      	ldr	r3, [pc, #100]	; (8015dc0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8015d5c:	685b      	ldr	r3, [r3, #4]
 8015d5e:	789b      	ldrb	r3, [r3, #2]
 8015d60:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8015d62:	7b7b      	ldrb	r3, [r7, #13]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d005      	beq.n	8015d74 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8015d68:	4b15      	ldr	r3, [pc, #84]	; (8015dc0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	689b      	ldr	r3, [r3, #8]
 8015d6e:	6878      	ldr	r0, [r7, #4]
 8015d70:	4798      	blx	r3
 8015d72:	e00b      	b.n	8015d8c <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8015d74:	4b12      	ldr	r3, [pc, #72]	; (8015dc0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8015d76:	685b      	ldr	r3, [r3, #4]
 8015d78:	781b      	ldrb	r3, [r3, #0]
 8015d7a:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8015d7c:	4b10      	ldr	r3, [pc, #64]	; (8015dc0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8015d7e:	685b      	ldr	r3, [r3, #4]
 8015d80:	785b      	ldrb	r3, [r3, #1]
 8015d82:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8015d84:	4b0e      	ldr	r3, [pc, #56]	; (8015dc0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8015d86:	685b      	ldr	r3, [r3, #4]
 8015d88:	78db      	ldrb	r3, [r3, #3]
 8015d8a:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8015d8c:	f7ff ff06 	bl	8015b9c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8015d90:	7b7b      	ldrb	r3, [r7, #13]
 8015d92:	f083 0301 	eor.w	r3, r3, #1
 8015d96:	b2db      	uxtb	r3, r3
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d004      	beq.n	8015da6 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8015d9c:	f107 0308 	add.w	r3, r7, #8
 8015da0:	4618      	mov	r0, r3
 8015da2:	f7ff fec1 	bl	8015b28 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8015da6:	7bfb      	ldrb	r3, [r7, #15]
 8015da8:	3301      	adds	r3, #1
 8015daa:	73fb      	strb	r3, [r7, #15]
 8015dac:	7bfa      	ldrb	r2, [r7, #15]
 8015dae:	7bbb      	ldrb	r3, [r7, #14]
 8015db0:	429a      	cmp	r2, r3
 8015db2:	d3c8      	bcc.n	8015d46 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8015db4:	bf00      	nop
 8015db6:	bf00      	nop
 8015db8:	3710      	adds	r7, #16
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}
 8015dbe:	bf00      	nop
 8015dc0:	20001dc0 	.word	0x20001dc0

08015dc4 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8015dc4:	b480      	push	{r7}
 8015dc6:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8015dc8:	4b03      	ldr	r3, [pc, #12]	; (8015dd8 <LoRaMacConfirmQueueGetCnt+0x14>)
 8015dca:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8015dce:	4618      	mov	r0, r3
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	bc80      	pop	{r7}
 8015dd4:	4770      	bx	lr
 8015dd6:	bf00      	nop
 8015dd8:	20001dc0 	.word	0x20001dc0

08015ddc <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015de0:	4b06      	ldr	r3, [pc, #24]	; (8015dfc <LoRaMacConfirmQueueIsFull+0x20>)
 8015de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015de6:	4618      	mov	r0, r3
 8015de8:	f7ff fe3a 	bl	8015a60 <IsListFull>
 8015dec:	4603      	mov	r3, r0
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d001      	beq.n	8015df6 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8015df2:	2301      	movs	r3, #1
 8015df4:	e000      	b.n	8015df8 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8015df6:	2300      	movs	r3, #0
    }
}
 8015df8:	4618      	mov	r0, r3
 8015dfa:	bd80      	pop	{r7, pc}
 8015dfc:	20001dc0 	.word	0x20001dc0

08015e00 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8015e00:	b580      	push	{r7, lr}
 8015e02:	b08e      	sub	sp, #56	; 0x38
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	60f8      	str	r0, [r7, #12]
 8015e08:	607b      	str	r3, [r7, #4]
 8015e0a:	460b      	mov	r3, r1
 8015e0c:	817b      	strh	r3, [r7, #10]
 8015e0e:	4613      	mov	r3, r2
 8015e10:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d101      	bne.n	8015e1c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015e18:	230a      	movs	r3, #10
 8015e1a:	e086      	b.n	8015f2a <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8015e22:	2301      	movs	r3, #1
 8015e24:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8015e26:	2300      	movs	r3, #0
 8015e28:	623b      	str	r3, [r7, #32]
 8015e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015e2e:	2200      	movs	r2, #0
 8015e30:	601a      	str	r2, [r3, #0]
 8015e32:	605a      	str	r2, [r3, #4]
 8015e34:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8015e36:	2300      	movs	r3, #0
 8015e38:	613b      	str	r3, [r7, #16]
 8015e3a:	f107 0314 	add.w	r3, r7, #20
 8015e3e:	2200      	movs	r2, #0
 8015e40:	601a      	str	r2, [r3, #0]
 8015e42:	605a      	str	r2, [r3, #4]
 8015e44:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8015e46:	2301      	movs	r3, #1
 8015e48:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8015e4a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8015e4e:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	b2db      	uxtb	r3, r3
 8015e54:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	0a1b      	lsrs	r3, r3, #8
 8015e5a:	b2db      	uxtb	r3, r3
 8015e5c:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	0c1b      	lsrs	r3, r3, #16
 8015e62:	b2db      	uxtb	r3, r3
 8015e64:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	0e1b      	lsrs	r3, r3, #24
 8015e6a:	b2db      	uxtb	r3, r3
 8015e6c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8015e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e70:	b2db      	uxtb	r3, r3
 8015e72:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8015e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e76:	0a1b      	lsrs	r3, r3, #8
 8015e78:	b2db      	uxtb	r3, r3
 8015e7a:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8015e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e7e:	0c1b      	lsrs	r3, r3, #16
 8015e80:	b2db      	uxtb	r3, r3
 8015e82:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8015e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e86:	0e1b      	lsrs	r3, r3, #24
 8015e88:	b2db      	uxtb	r3, r3
 8015e8a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8015e8c:	e048      	b.n	8015f20 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8015e8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015e90:	b2db      	uxtb	r3, r3
 8015e92:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8015e94:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015e96:	3301      	adds	r3, #1
 8015e98:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8015e9a:	f107 0320 	add.w	r3, r7, #32
 8015e9e:	7a7a      	ldrb	r2, [r7, #9]
 8015ea0:	f107 0010 	add.w	r0, r7, #16
 8015ea4:	2110      	movs	r1, #16
 8015ea6:	f7f9 f846 	bl	800ef36 <SecureElementAesEncrypt>
 8015eaa:	4603      	mov	r3, r0
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d001      	beq.n	8015eb4 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015eb0:	230f      	movs	r3, #15
 8015eb2:	e03a      	b.n	8015f2a <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015eba:	e01e      	b.n	8015efa <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8015ebc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015ec0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015ec4:	4413      	add	r3, r2
 8015ec6:	461a      	mov	r2, r3
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	4413      	add	r3, r2
 8015ecc:	7819      	ldrb	r1, [r3, #0]
 8015ece:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015ed2:	3338      	adds	r3, #56	; 0x38
 8015ed4:	443b      	add	r3, r7
 8015ed6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8015eda:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8015ede:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015ee2:	4403      	add	r3, r0
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	4403      	add	r3, r0
 8015eea:	404a      	eors	r2, r1
 8015eec:	b2d2      	uxtb	r2, r2
 8015eee:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015ef0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015ef4:	3301      	adds	r3, #1
 8015ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015efa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015efe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8015f02:	2a10      	cmp	r2, #16
 8015f04:	bfa8      	it	ge
 8015f06:	2210      	movge	r2, #16
 8015f08:	b212      	sxth	r2, r2
 8015f0a:	4293      	cmp	r3, r2
 8015f0c:	dbd6      	blt.n	8015ebc <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8015f0e:	897b      	ldrh	r3, [r7, #10]
 8015f10:	3b10      	subs	r3, #16
 8015f12:	b29b      	uxth	r3, r3
 8015f14:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8015f16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015f1a:	3310      	adds	r3, #16
 8015f1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8015f20:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	dcb2      	bgt.n	8015e8e <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015f28:	2300      	movs	r3, #0
}
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	3738      	adds	r7, #56	; 0x38
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	bd80      	pop	{r7, pc}

08015f32 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8015f32:	b490      	push	{r4, r7}
 8015f34:	b082      	sub	sp, #8
 8015f36:	af00      	add	r7, sp, #0
 8015f38:	4604      	mov	r4, r0
 8015f3a:	4608      	mov	r0, r1
 8015f3c:	4611      	mov	r1, r2
 8015f3e:	461a      	mov	r2, r3
 8015f40:	4623      	mov	r3, r4
 8015f42:	80fb      	strh	r3, [r7, #6]
 8015f44:	4603      	mov	r3, r0
 8015f46:	717b      	strb	r3, [r7, #5]
 8015f48:	460b      	mov	r3, r1
 8015f4a:	713b      	strb	r3, [r7, #4]
 8015f4c:	4613      	mov	r3, r2
 8015f4e:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8015f50:	69bb      	ldr	r3, [r7, #24]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d101      	bne.n	8015f5a <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015f56:	230a      	movs	r3, #10
 8015f58:	e04e      	b.n	8015ff8 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8015f5a:	69bb      	ldr	r3, [r7, #24]
 8015f5c:	2249      	movs	r2, #73	; 0x49
 8015f5e:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8015f60:	69bb      	ldr	r3, [r7, #24]
 8015f62:	3301      	adds	r3, #1
 8015f64:	2200      	movs	r2, #0
 8015f66:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8015f68:	69bb      	ldr	r3, [r7, #24]
 8015f6a:	3302      	adds	r3, #2
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8015f70:	69bb      	ldr	r3, [r7, #24]
 8015f72:	3303      	adds	r3, #3
 8015f74:	2200      	movs	r2, #0
 8015f76:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8015f78:	69bb      	ldr	r3, [r7, #24]
 8015f7a:	3304      	adds	r3, #4
 8015f7c:	2200      	movs	r2, #0
 8015f7e:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8015f80:	69bb      	ldr	r3, [r7, #24]
 8015f82:	3305      	adds	r3, #5
 8015f84:	78fa      	ldrb	r2, [r7, #3]
 8015f86:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8015f88:	69bb      	ldr	r3, [r7, #24]
 8015f8a:	3306      	adds	r3, #6
 8015f8c:	693a      	ldr	r2, [r7, #16]
 8015f8e:	b2d2      	uxtb	r2, r2
 8015f90:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8015f92:	693b      	ldr	r3, [r7, #16]
 8015f94:	0a1a      	lsrs	r2, r3, #8
 8015f96:	69bb      	ldr	r3, [r7, #24]
 8015f98:	3307      	adds	r3, #7
 8015f9a:	b2d2      	uxtb	r2, r2
 8015f9c:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8015f9e:	693b      	ldr	r3, [r7, #16]
 8015fa0:	0c1a      	lsrs	r2, r3, #16
 8015fa2:	69bb      	ldr	r3, [r7, #24]
 8015fa4:	3308      	adds	r3, #8
 8015fa6:	b2d2      	uxtb	r2, r2
 8015fa8:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8015faa:	693b      	ldr	r3, [r7, #16]
 8015fac:	0e1a      	lsrs	r2, r3, #24
 8015fae:	69bb      	ldr	r3, [r7, #24]
 8015fb0:	3309      	adds	r3, #9
 8015fb2:	b2d2      	uxtb	r2, r2
 8015fb4:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8015fb6:	69bb      	ldr	r3, [r7, #24]
 8015fb8:	330a      	adds	r3, #10
 8015fba:	697a      	ldr	r2, [r7, #20]
 8015fbc:	b2d2      	uxtb	r2, r2
 8015fbe:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8015fc0:	697b      	ldr	r3, [r7, #20]
 8015fc2:	0a1a      	lsrs	r2, r3, #8
 8015fc4:	69bb      	ldr	r3, [r7, #24]
 8015fc6:	330b      	adds	r3, #11
 8015fc8:	b2d2      	uxtb	r2, r2
 8015fca:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	0c1a      	lsrs	r2, r3, #16
 8015fd0:	69bb      	ldr	r3, [r7, #24]
 8015fd2:	330c      	adds	r3, #12
 8015fd4:	b2d2      	uxtb	r2, r2
 8015fd6:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8015fd8:	697b      	ldr	r3, [r7, #20]
 8015fda:	0e1a      	lsrs	r2, r3, #24
 8015fdc:	69bb      	ldr	r3, [r7, #24]
 8015fde:	330d      	adds	r3, #13
 8015fe0:	b2d2      	uxtb	r2, r2
 8015fe2:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8015fe4:	69bb      	ldr	r3, [r7, #24]
 8015fe6:	330e      	adds	r3, #14
 8015fe8:	2200      	movs	r2, #0
 8015fea:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8015fec:	69bb      	ldr	r3, [r7, #24]
 8015fee:	330f      	adds	r3, #15
 8015ff0:	88fa      	ldrh	r2, [r7, #6]
 8015ff2:	b2d2      	uxtb	r2, r2
 8015ff4:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015ff6:	2300      	movs	r3, #0
}
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	3708      	adds	r7, #8
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	bc90      	pop	{r4, r7}
 8016000:	4770      	bx	lr

08016002 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8016002:	b590      	push	{r4, r7, lr}
 8016004:	b08b      	sub	sp, #44	; 0x2c
 8016006:	af04      	add	r7, sp, #16
 8016008:	6078      	str	r0, [r7, #4]
 801600a:	4608      	mov	r0, r1
 801600c:	4611      	mov	r1, r2
 801600e:	461a      	mov	r2, r3
 8016010:	4603      	mov	r3, r0
 8016012:	807b      	strh	r3, [r7, #2]
 8016014:	460b      	mov	r3, r1
 8016016:	707b      	strb	r3, [r7, #1]
 8016018:	4613      	mov	r3, r2
 801601a:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d002      	beq.n	8016028 <ComputeCmacB0+0x26>
 8016022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016024:	2b00      	cmp	r3, #0
 8016026:	d101      	bne.n	801602c <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016028:	230a      	movs	r3, #10
 801602a:	e024      	b.n	8016076 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801602c:	887b      	ldrh	r3, [r7, #2]
 801602e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016032:	d901      	bls.n	8016038 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016034:	230e      	movs	r3, #14
 8016036:	e01e      	b.n	8016076 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016038:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 801603c:	783a      	ldrb	r2, [r7, #0]
 801603e:	7879      	ldrb	r1, [r7, #1]
 8016040:	8878      	ldrh	r0, [r7, #2]
 8016042:	f107 0308 	add.w	r3, r7, #8
 8016046:	9302      	str	r3, [sp, #8]
 8016048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801604a:	9301      	str	r3, [sp, #4]
 801604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801604e:	9300      	str	r3, [sp, #0]
 8016050:	4623      	mov	r3, r4
 8016052:	f7ff ff6e 	bl	8015f32 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8016056:	7879      	ldrb	r1, [r7, #1]
 8016058:	887a      	ldrh	r2, [r7, #2]
 801605a:	f107 0008 	add.w	r0, r7, #8
 801605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016060:	9300      	str	r3, [sp, #0]
 8016062:	460b      	mov	r3, r1
 8016064:	6879      	ldr	r1, [r7, #4]
 8016066:	f7f8 ff19 	bl	800ee9c <SecureElementComputeAesCmac>
 801606a:	4603      	mov	r3, r0
 801606c:	2b00      	cmp	r3, #0
 801606e:	d001      	beq.n	8016074 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016070:	230f      	movs	r3, #15
 8016072:	e000      	b.n	8016076 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016074:	2300      	movs	r3, #0
}
 8016076:	4618      	mov	r0, r3
 8016078:	371c      	adds	r7, #28
 801607a:	46bd      	mov	sp, r7
 801607c:	bd90      	pop	{r4, r7, pc}

0801607e <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801607e:	b590      	push	{r4, r7, lr}
 8016080:	b0cd      	sub	sp, #308	; 0x134
 8016082:	af04      	add	r7, sp, #16
 8016084:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8016088:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 801608c:	6020      	str	r0, [r4, #0]
 801608e:	460c      	mov	r4, r1
 8016090:	4610      	mov	r0, r2
 8016092:	4619      	mov	r1, r3
 8016094:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016098:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801609c:	4622      	mov	r2, r4
 801609e:	801a      	strh	r2, [r3, #0]
 80160a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80160a4:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80160a8:	4602      	mov	r2, r0
 80160aa:	701a      	strb	r2, [r3, #0]
 80160ac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80160b0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80160b4:	460a      	mov	r2, r1
 80160b6:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80160b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80160bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d101      	bne.n	80160ca <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80160c6:	230a      	movs	r3, #10
 80160c8:	e063      	b.n	8016192 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80160ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80160ce:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80160d2:	881b      	ldrh	r3, [r3, #0]
 80160d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80160d8:	d901      	bls.n	80160de <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80160da:	230e      	movs	r3, #14
 80160dc:	e059      	b.n	8016192 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80160de:	f107 030c 	add.w	r3, r7, #12
 80160e2:	f44f 7288 	mov.w	r2, #272	; 0x110
 80160e6:	2100      	movs	r1, #0
 80160e8:	4618      	mov	r0, r3
 80160ea:	f003 fbd7 	bl	801989c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80160ee:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 80160f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80160f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80160fa:	781a      	ldrb	r2, [r3, #0]
 80160fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016100:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016104:	7819      	ldrb	r1, [r3, #0]
 8016106:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801610a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801610e:	8818      	ldrh	r0, [r3, #0]
 8016110:	f107 030c 	add.w	r3, r7, #12
 8016114:	9302      	str	r3, [sp, #8]
 8016116:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801611a:	9301      	str	r3, [sp, #4]
 801611c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016120:	9300      	str	r3, [sp, #0]
 8016122:	4623      	mov	r3, r4
 8016124:	f7ff ff05 	bl	8015f32 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8016128:	f107 030c 	add.w	r3, r7, #12
 801612c:	3310      	adds	r3, #16
 801612e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8016132:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8016136:	8812      	ldrh	r2, [r2, #0]
 8016138:	f507 7190 	add.w	r1, r7, #288	; 0x120
 801613c:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8016140:	6809      	ldr	r1, [r1, #0]
 8016142:	4618      	mov	r0, r3
 8016144:	f003 fb6f 	bl	8019826 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8016148:	2306      	movs	r3, #6
 801614a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801614e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016152:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016156:	881b      	ldrh	r3, [r3, #0]
 8016158:	3310      	adds	r3, #16
 801615a:	b299      	uxth	r1, r3
 801615c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016160:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016164:	781b      	ldrb	r3, [r3, #0]
 8016166:	f107 000c 	add.w	r0, r7, #12
 801616a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801616e:	f7f8 feb3 	bl	800eed8 <SecureElementVerifyAesCmac>
 8016172:	4603      	mov	r3, r0
 8016174:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8016178:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801617c:	2b00      	cmp	r3, #0
 801617e:	d101      	bne.n	8016184 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8016180:	2300      	movs	r3, #0
 8016182:	e006      	b.n	8016192 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8016184:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016188:	2b01      	cmp	r3, #1
 801618a:	d101      	bne.n	8016190 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 801618c:	2301      	movs	r3, #1
 801618e:	e000      	b.n	8016192 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016190:	230f      	movs	r3, #15
}
 8016192:	4618      	mov	r0, r3
 8016194:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8016198:	46bd      	mov	sp, r7
 801619a:	bd90      	pop	{r4, r7, pc}

0801619c <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 801619c:	b480      	push	{r7}
 801619e:	b085      	sub	sp, #20
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	4603      	mov	r3, r0
 80161a4:	6039      	str	r1, [r7, #0]
 80161a6:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80161a8:	2300      	movs	r3, #0
 80161aa:	73fb      	strb	r3, [r7, #15]
 80161ac:	e011      	b.n	80161d2 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80161ae:	7bfb      	ldrb	r3, [r7, #15]
 80161b0:	4a0c      	ldr	r2, [pc, #48]	; (80161e4 <GetKeyAddrItem+0x48>)
 80161b2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80161b6:	79fa      	ldrb	r2, [r7, #7]
 80161b8:	429a      	cmp	r2, r3
 80161ba:	d107      	bne.n	80161cc <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80161bc:	7bfb      	ldrb	r3, [r7, #15]
 80161be:	009b      	lsls	r3, r3, #2
 80161c0:	4a08      	ldr	r2, [pc, #32]	; (80161e4 <GetKeyAddrItem+0x48>)
 80161c2:	441a      	add	r2, r3
 80161c4:	683b      	ldr	r3, [r7, #0]
 80161c6:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80161c8:	2300      	movs	r3, #0
 80161ca:	e006      	b.n	80161da <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80161cc:	7bfb      	ldrb	r3, [r7, #15]
 80161ce:	3301      	adds	r3, #1
 80161d0:	73fb      	strb	r3, [r7, #15]
 80161d2:	7bfb      	ldrb	r3, [r7, #15]
 80161d4:	2b01      	cmp	r3, #1
 80161d6:	d9ea      	bls.n	80161ae <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80161d8:	230c      	movs	r3, #12
}
 80161da:	4618      	mov	r0, r3
 80161dc:	3714      	adds	r7, #20
 80161de:	46bd      	mov	sp, r7
 80161e0:	bc80      	pop	{r7}
 80161e2:	4770      	bx	lr
 80161e4:	2000013c 	.word	0x2000013c

080161e8 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b088      	sub	sp, #32
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	60b9      	str	r1, [r7, #8]
 80161f0:	607a      	str	r2, [r7, #4]
 80161f2:	461a      	mov	r2, r3
 80161f4:	4603      	mov	r3, r0
 80161f6:	73fb      	strb	r3, [r7, #15]
 80161f8:	4613      	mov	r3, r2
 80161fa:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80161fc:	2300      	movs	r3, #0
 80161fe:	613b      	str	r3, [r7, #16]
 8016200:	f107 0314 	add.w	r3, r7, #20
 8016204:	2200      	movs	r2, #0
 8016206:	601a      	str	r2, [r3, #0]
 8016208:	605a      	str	r2, [r3, #4]
 801620a:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 801620c:	7bfb      	ldrb	r3, [r7, #15]
 801620e:	2b02      	cmp	r3, #2
 8016210:	d002      	beq.n	8016218 <DeriveSessionKey10x+0x30>
 8016212:	2b03      	cmp	r3, #3
 8016214:	d003      	beq.n	801621e <DeriveSessionKey10x+0x36>
 8016216:	e005      	b.n	8016224 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8016218:	2301      	movs	r3, #1
 801621a:	743b      	strb	r3, [r7, #16]
            break;
 801621c:	e004      	b.n	8016228 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 801621e:	2302      	movs	r3, #2
 8016220:	743b      	strb	r3, [r7, #16]
            break;
 8016222:	e001      	b.n	8016228 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016224:	230b      	movs	r3, #11
 8016226:	e02a      	b.n	801627e <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8016228:	68bb      	ldr	r3, [r7, #8]
 801622a:	b2db      	uxtb	r3, r3
 801622c:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 801622e:	68bb      	ldr	r3, [r7, #8]
 8016230:	0a1b      	lsrs	r3, r3, #8
 8016232:	b2db      	uxtb	r3, r3
 8016234:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8016236:	68bb      	ldr	r3, [r7, #8]
 8016238:	0c1b      	lsrs	r3, r3, #16
 801623a:	b2db      	uxtb	r3, r3
 801623c:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	b2db      	uxtb	r3, r3
 8016242:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	0a1b      	lsrs	r3, r3, #8
 8016248:	b2db      	uxtb	r3, r3
 801624a:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	0c1b      	lsrs	r3, r3, #16
 8016250:	b2db      	uxtb	r3, r3
 8016252:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8016254:	89bb      	ldrh	r3, [r7, #12]
 8016256:	b2db      	uxtb	r3, r3
 8016258:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801625a:	89bb      	ldrh	r3, [r7, #12]
 801625c:	0a1b      	lsrs	r3, r3, #8
 801625e:	b29b      	uxth	r3, r3
 8016260:	b2db      	uxtb	r3, r3
 8016262:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8016264:	7bfa      	ldrb	r2, [r7, #15]
 8016266:	f107 0310 	add.w	r3, r7, #16
 801626a:	2101      	movs	r1, #1
 801626c:	4618      	mov	r0, r3
 801626e:	f7f8 fec9 	bl	800f004 <SecureElementDeriveAndStoreKey>
 8016272:	4603      	mov	r3, r0
 8016274:	2b00      	cmp	r3, #0
 8016276:	d001      	beq.n	801627c <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016278:	230f      	movs	r3, #15
 801627a:	e000      	b.n	801627e <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801627c:	2300      	movs	r3, #0
}
 801627e:	4618      	mov	r0, r3
 8016280:	3720      	adds	r7, #32
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}
	...

08016288 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8016288:	b480      	push	{r7}
 801628a:	b083      	sub	sp, #12
 801628c:	af00      	add	r7, sp, #0
 801628e:	4603      	mov	r3, r0
 8016290:	6039      	str	r1, [r7, #0]
 8016292:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8016294:	683b      	ldr	r3, [r7, #0]
 8016296:	2b00      	cmp	r3, #0
 8016298:	d101      	bne.n	801629e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801629a:	230a      	movs	r3, #10
 801629c:	e03b      	b.n	8016316 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 801629e:	79fb      	ldrb	r3, [r7, #7]
 80162a0:	3b01      	subs	r3, #1
 80162a2:	2b03      	cmp	r3, #3
 80162a4:	d834      	bhi.n	8016310 <GetLastFcntDown+0x88>
 80162a6:	a201      	add	r2, pc, #4	; (adr r2, 80162ac <GetLastFcntDown+0x24>)
 80162a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162ac:	080162bd 	.word	0x080162bd
 80162b0:	080162d5 	.word	0x080162d5
 80162b4:	080162ed 	.word	0x080162ed
 80162b8:	08016305 	.word	0x08016305
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80162bc:	4b18      	ldr	r3, [pc, #96]	; (8016320 <GetLastFcntDown+0x98>)
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	691a      	ldr	r2, [r3, #16]
 80162c2:	683b      	ldr	r3, [r7, #0]
 80162c4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 80162c6:	4b16      	ldr	r3, [pc, #88]	; (8016320 <GetLastFcntDown+0x98>)
 80162c8:	681a      	ldr	r2, [r3, #0]
 80162ca:	4b15      	ldr	r3, [pc, #84]	; (8016320 <GetLastFcntDown+0x98>)
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	6912      	ldr	r2, [r2, #16]
 80162d0:	621a      	str	r2, [r3, #32]
            break;
 80162d2:	e01f      	b.n	8016314 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80162d4:	4b12      	ldr	r3, [pc, #72]	; (8016320 <GetLastFcntDown+0x98>)
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	695a      	ldr	r2, [r3, #20]
 80162da:	683b      	ldr	r3, [r7, #0]
 80162dc:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 80162de:	4b10      	ldr	r3, [pc, #64]	; (8016320 <GetLastFcntDown+0x98>)
 80162e0:	681a      	ldr	r2, [r3, #0]
 80162e2:	4b0f      	ldr	r3, [pc, #60]	; (8016320 <GetLastFcntDown+0x98>)
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	6952      	ldr	r2, [r2, #20]
 80162e8:	621a      	str	r2, [r3, #32]
            break;
 80162ea:	e013      	b.n	8016314 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80162ec:	4b0c      	ldr	r3, [pc, #48]	; (8016320 <GetLastFcntDown+0x98>)
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	699a      	ldr	r2, [r3, #24]
 80162f2:	683b      	ldr	r3, [r7, #0]
 80162f4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80162f6:	4b0a      	ldr	r3, [pc, #40]	; (8016320 <GetLastFcntDown+0x98>)
 80162f8:	681a      	ldr	r2, [r3, #0]
 80162fa:	4b09      	ldr	r3, [pc, #36]	; (8016320 <GetLastFcntDown+0x98>)
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	6992      	ldr	r2, [r2, #24]
 8016300:	621a      	str	r2, [r3, #32]
            break;
 8016302:	e007      	b.n	8016314 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8016304:	4b06      	ldr	r3, [pc, #24]	; (8016320 <GetLastFcntDown+0x98>)
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	69da      	ldr	r2, [r3, #28]
 801630a:	683b      	ldr	r3, [r7, #0]
 801630c:	601a      	str	r2, [r3, #0]
            break;
 801630e:	e001      	b.n	8016314 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8016310:	2305      	movs	r3, #5
 8016312:	e000      	b.n	8016316 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016314:	2300      	movs	r3, #0
}
 8016316:	4618      	mov	r0, r3
 8016318:	370c      	adds	r7, #12
 801631a:	46bd      	mov	sp, r7
 801631c:	bc80      	pop	{r7}
 801631e:	4770      	bx	lr
 8016320:	20001de4 	.word	0x20001de4

08016324 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016324:	b580      	push	{r7, lr}
 8016326:	b084      	sub	sp, #16
 8016328:	af00      	add	r7, sp, #0
 801632a:	4603      	mov	r3, r0
 801632c:	6039      	str	r1, [r7, #0]
 801632e:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8016330:	2300      	movs	r3, #0
 8016332:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8016334:	f107 020c 	add.w	r2, r7, #12
 8016338:	79fb      	ldrb	r3, [r7, #7]
 801633a:	4611      	mov	r1, r2
 801633c:	4618      	mov	r0, r3
 801633e:	f7ff ffa3 	bl	8016288 <GetLastFcntDown>
 8016342:	4603      	mov	r3, r0
 8016344:	2b00      	cmp	r3, #0
 8016346:	d001      	beq.n	801634c <CheckFCntDown+0x28>
    {
        return false;
 8016348:	2300      	movs	r3, #0
 801634a:	e00a      	b.n	8016362 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	683a      	ldr	r2, [r7, #0]
 8016350:	429a      	cmp	r2, r3
 8016352:	d803      	bhi.n	801635c <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8016354:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8016356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801635a:	d101      	bne.n	8016360 <CheckFCntDown+0x3c>
    {
        return true;
 801635c:	2301      	movs	r3, #1
 801635e:	e000      	b.n	8016362 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8016360:	2300      	movs	r3, #0
    }
}
 8016362:	4618      	mov	r0, r3
 8016364:	3710      	adds	r7, #16
 8016366:	46bd      	mov	sp, r7
 8016368:	bd80      	pop	{r7, pc}
	...

0801636c <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801636c:	b480      	push	{r7}
 801636e:	b083      	sub	sp, #12
 8016370:	af00      	add	r7, sp, #0
 8016372:	4603      	mov	r3, r0
 8016374:	6039      	str	r1, [r7, #0]
 8016376:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8016378:	79fb      	ldrb	r3, [r7, #7]
 801637a:	3b01      	subs	r3, #1
 801637c:	2b03      	cmp	r3, #3
 801637e:	d81f      	bhi.n	80163c0 <UpdateFCntDown+0x54>
 8016380:	a201      	add	r2, pc, #4	; (adr r2, 8016388 <UpdateFCntDown+0x1c>)
 8016382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016386:	bf00      	nop
 8016388:	08016399 	.word	0x08016399
 801638c:	080163a3 	.word	0x080163a3
 8016390:	080163ad 	.word	0x080163ad
 8016394:	080163b7 	.word	0x080163b7
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8016398:	4b0c      	ldr	r3, [pc, #48]	; (80163cc <UpdateFCntDown+0x60>)
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	683a      	ldr	r2, [r7, #0]
 801639e:	611a      	str	r2, [r3, #16]
            break;
 80163a0:	e00f      	b.n	80163c2 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80163a2:	4b0a      	ldr	r3, [pc, #40]	; (80163cc <UpdateFCntDown+0x60>)
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	683a      	ldr	r2, [r7, #0]
 80163a8:	615a      	str	r2, [r3, #20]
            break;
 80163aa:	e00a      	b.n	80163c2 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80163ac:	4b07      	ldr	r3, [pc, #28]	; (80163cc <UpdateFCntDown+0x60>)
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	683a      	ldr	r2, [r7, #0]
 80163b2:	619a      	str	r2, [r3, #24]
            break;
 80163b4:	e005      	b.n	80163c2 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80163b6:	4b05      	ldr	r3, [pc, #20]	; (80163cc <UpdateFCntDown+0x60>)
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	683a      	ldr	r2, [r7, #0]
 80163bc:	61da      	str	r2, [r3, #28]
            break;
 80163be:	e000      	b.n	80163c2 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80163c0:	bf00      	nop
    }
}
 80163c2:	bf00      	nop
 80163c4:	370c      	adds	r7, #12
 80163c6:	46bd      	mov	sp, r7
 80163c8:	bc80      	pop	{r7}
 80163ca:	4770      	bx	lr
 80163cc:	20001de4 	.word	0x20001de4

080163d0 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80163d0:	b480      	push	{r7}
 80163d2:	b083      	sub	sp, #12
 80163d4:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80163d6:	4b18      	ldr	r3, [pc, #96]	; (8016438 <ResetFCnts+0x68>)
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	2200      	movs	r2, #0
 80163dc:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80163de:	4b16      	ldr	r3, [pc, #88]	; (8016438 <ResetFCnts+0x68>)
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	f04f 32ff 	mov.w	r2, #4294967295
 80163e6:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80163e8:	4b13      	ldr	r3, [pc, #76]	; (8016438 <ResetFCnts+0x68>)
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	f04f 32ff 	mov.w	r2, #4294967295
 80163f0:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80163f2:	4b11      	ldr	r3, [pc, #68]	; (8016438 <ResetFCnts+0x68>)
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	f04f 32ff 	mov.w	r2, #4294967295
 80163fa:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80163fc:	4b0e      	ldr	r3, [pc, #56]	; (8016438 <ResetFCnts+0x68>)
 80163fe:	681a      	ldr	r2, [r3, #0]
 8016400:	4b0d      	ldr	r3, [pc, #52]	; (8016438 <ResetFCnts+0x68>)
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	6992      	ldr	r2, [r2, #24]
 8016406:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016408:	2300      	movs	r3, #0
 801640a:	607b      	str	r3, [r7, #4]
 801640c:	e00b      	b.n	8016426 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 801640e:	4b0a      	ldr	r3, [pc, #40]	; (8016438 <ResetFCnts+0x68>)
 8016410:	681a      	ldr	r2, [r3, #0]
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	3306      	adds	r3, #6
 8016416:	009b      	lsls	r3, r3, #2
 8016418:	4413      	add	r3, r2
 801641a:	f04f 32ff 	mov.w	r2, #4294967295
 801641e:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	3301      	adds	r3, #1
 8016424:	607b      	str	r3, [r7, #4]
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	2b00      	cmp	r3, #0
 801642a:	ddf0      	ble.n	801640e <ResetFCnts+0x3e>
    }
}
 801642c:	bf00      	nop
 801642e:	bf00      	nop
 8016430:	370c      	adds	r7, #12
 8016432:	46bd      	mov	sp, r7
 8016434:	bc80      	pop	{r7}
 8016436:	4770      	bx	lr
 8016438:	20001de4 	.word	0x20001de4

0801643c <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b082      	sub	sp, #8
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	2b00      	cmp	r3, #0
 8016448:	d101      	bne.n	801644e <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801644a:	2309      	movs	r3, #9
 801644c:	e01c      	b.n	8016488 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801644e:	4a10      	ldr	r2, [pc, #64]	; (8016490 <LoRaMacCryptoInit+0x54>)
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8016454:	4b0e      	ldr	r3, [pc, #56]	; (8016490 <LoRaMacCryptoInit+0x54>)
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	2228      	movs	r2, #40	; 0x28
 801645a:	2100      	movs	r1, #0
 801645c:	4618      	mov	r0, r3
 801645e:	f003 fa1d 	bl	801989c <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8016462:	4b0b      	ldr	r3, [pc, #44]	; (8016490 <LoRaMacCryptoInit+0x54>)
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	2201      	movs	r2, #1
 8016468:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801646a:	4b09      	ldr	r3, [pc, #36]	; (8016490 <LoRaMacCryptoInit+0x54>)
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	2201      	movs	r2, #1
 8016470:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8016472:	4b07      	ldr	r3, [pc, #28]	; (8016490 <LoRaMacCryptoInit+0x54>)
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	2201      	movs	r2, #1
 8016478:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801647a:	4b05      	ldr	r3, [pc, #20]	; (8016490 <LoRaMacCryptoInit+0x54>)
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	2200      	movs	r2, #0
 8016480:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8016482:	f7ff ffa5 	bl	80163d0 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8016486:	2300      	movs	r3, #0
}
 8016488:	4618      	mov	r0, r3
 801648a:	3708      	adds	r7, #8
 801648c:	46bd      	mov	sp, r7
 801648e:	bd80      	pop	{r7, pc}
 8016490:	20001de4 	.word	0x20001de4

08016494 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8016494:	b480      	push	{r7}
 8016496:	b083      	sub	sp, #12
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 801649c:	4b04      	ldr	r3, [pc, #16]	; (80164b0 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	687a      	ldr	r2, [r7, #4]
 80164a2:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80164a4:	2300      	movs	r3, #0
}
 80164a6:	4618      	mov	r0, r3
 80164a8:	370c      	adds	r7, #12
 80164aa:	46bd      	mov	sp, r7
 80164ac:	bc80      	pop	{r7}
 80164ae:	4770      	bx	lr
 80164b0:	20001de4 	.word	0x20001de4

080164b4 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80164b4:	b480      	push	{r7}
 80164b6:	b083      	sub	sp, #12
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d101      	bne.n	80164c6 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80164c2:	230a      	movs	r3, #10
 80164c4:	e006      	b.n	80164d4 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80164c6:	4b06      	ldr	r3, [pc, #24]	; (80164e0 <LoRaMacCryptoGetFCntUp+0x2c>)
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	68db      	ldr	r3, [r3, #12]
 80164cc:	1c5a      	adds	r2, r3, #1
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80164d2:	2300      	movs	r3, #0
}
 80164d4:	4618      	mov	r0, r3
 80164d6:	370c      	adds	r7, #12
 80164d8:	46bd      	mov	sp, r7
 80164da:	bc80      	pop	{r7}
 80164dc:	4770      	bx	lr
 80164de:	bf00      	nop
 80164e0:	20001de4 	.word	0x20001de4

080164e4 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80164e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80164e8:	b08a      	sub	sp, #40	; 0x28
 80164ea:	af00      	add	r7, sp, #0
 80164ec:	613a      	str	r2, [r7, #16]
 80164ee:	60fb      	str	r3, [r7, #12]
 80164f0:	4603      	mov	r3, r0
 80164f2:	75fb      	strb	r3, [r7, #23]
 80164f4:	460b      	mov	r3, r1
 80164f6:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 80164f8:	2300      	movs	r3, #0
 80164fa:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 80164fc:	2300      	movs	r3, #0
 80164fe:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8016500:	2313      	movs	r3, #19
 8016502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d101      	bne.n	8016510 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801650c:	230a      	movs	r3, #10
 801650e:	e057      	b.n	80165c0 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016510:	f107 021c 	add.w	r2, r7, #28
 8016514:	7dfb      	ldrb	r3, [r7, #23]
 8016516:	4611      	mov	r1, r2
 8016518:	4618      	mov	r0, r3
 801651a:	f7ff feb5 	bl	8016288 <GetLastFcntDown>
 801651e:	4603      	mov	r3, r0
 8016520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8016524:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016528:	2b00      	cmp	r3, #0
 801652a:	d002      	beq.n	8016532 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 801652c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016530:	e046      	b.n	80165c0 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8016532:	69fb      	ldr	r3, [r7, #28]
 8016534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016538:	d103      	bne.n	8016542 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	693a      	ldr	r2, [r7, #16]
 801653e:	601a      	str	r2, [r3, #0]
 8016540:	e01e      	b.n	8016580 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016542:	69fb      	ldr	r3, [r7, #28]
 8016544:	b29b      	uxth	r3, r3
 8016546:	693a      	ldr	r2, [r7, #16]
 8016548:	1ad3      	subs	r3, r2, r3
 801654a:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 801654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801654e:	2b00      	cmp	r3, #0
 8016550:	dd05      	ble.n	801655e <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8016552:	69fa      	ldr	r2, [r7, #28]
 8016554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016556:	441a      	add	r2, r3
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	601a      	str	r2, [r3, #0]
 801655c:	e010      	b.n	8016580 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 801655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016560:	2b00      	cmp	r3, #0
 8016562:	d104      	bne.n	801656e <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8016564:	69fa      	ldr	r2, [r7, #28]
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 801656a:	2307      	movs	r3, #7
 801656c:	e028      	b.n	80165c0 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801656e:	69fb      	ldr	r3, [r7, #28]
 8016570:	0c1b      	lsrs	r3, r3, #16
 8016572:	041b      	lsls	r3, r3, #16
 8016574:	693a      	ldr	r2, [r7, #16]
 8016576:	4413      	add	r3, r2
 8016578:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8016580:	4b12      	ldr	r3, [pc, #72]	; (80165cc <LoRaMacCryptoGetFCntDown+0xe8>)
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	789b      	ldrb	r3, [r3, #2]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d119      	bne.n	80165be <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	2200      	movs	r2, #0
 8016590:	603b      	str	r3, [r7, #0]
 8016592:	607a      	str	r2, [r7, #4]
 8016594:	69fb      	ldr	r3, [r7, #28]
 8016596:	2200      	movs	r2, #0
 8016598:	469a      	mov	sl, r3
 801659a:	4693      	mov	fp, r2
 801659c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80165a0:	4611      	mov	r1, r2
 80165a2:	ebb1 040a 	subs.w	r4, r1, sl
 80165a6:	eb63 050b 	sbc.w	r5, r3, fp
 80165aa:	8abb      	ldrh	r3, [r7, #20]
 80165ac:	2200      	movs	r2, #0
 80165ae:	4698      	mov	r8, r3
 80165b0:	4691      	mov	r9, r2
 80165b2:	4544      	cmp	r4, r8
 80165b4:	eb75 0309 	sbcs.w	r3, r5, r9
 80165b8:	db01      	blt.n	80165be <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 80165ba:	2308      	movs	r3, #8
 80165bc:	e000      	b.n	80165c0 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80165be:	2300      	movs	r3, #0
}
 80165c0:	4618      	mov	r0, r3
 80165c2:	3728      	adds	r7, #40	; 0x28
 80165c4:	46bd      	mov	sp, r7
 80165c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80165ca:	bf00      	nop
 80165cc:	20001de4 	.word	0x20001de4

080165d0 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80165d0:	b480      	push	{r7}
 80165d2:	b085      	sub	sp, #20
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d101      	bne.n	80165e2 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80165de:	230a      	movs	r3, #10
 80165e0:	e017      	b.n	8016612 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80165e2:	2300      	movs	r3, #0
 80165e4:	60fb      	str	r3, [r7, #12]
 80165e6:	e010      	b.n	801660a <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80165e8:	4b0c      	ldr	r3, [pc, #48]	; (801661c <LoRaMacCryptoSetMulticastReference+0x4c>)
 80165ea:	6819      	ldr	r1, [r3, #0]
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	222c      	movs	r2, #44	; 0x2c
 80165f0:	fb02 f303 	mul.w	r3, r2, r3
 80165f4:	687a      	ldr	r2, [r7, #4]
 80165f6:	4413      	add	r3, r2
 80165f8:	68fa      	ldr	r2, [r7, #12]
 80165fa:	3206      	adds	r2, #6
 80165fc:	0092      	lsls	r2, r2, #2
 80165fe:	440a      	add	r2, r1
 8016600:	3204      	adds	r2, #4
 8016602:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	3301      	adds	r3, #1
 8016608:	60fb      	str	r3, [r7, #12]
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	2b00      	cmp	r3, #0
 801660e:	ddeb      	ble.n	80165e8 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016610:	2300      	movs	r3, #0
}
 8016612:	4618      	mov	r0, r3
 8016614:	3714      	adds	r7, #20
 8016616:	46bd      	mov	sp, r7
 8016618:	bc80      	pop	{r7}
 801661a:	4770      	bx	lr
 801661c:	20001de4 	.word	0x20001de4

08016620 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016620:	b580      	push	{r7, lr}
 8016622:	b082      	sub	sp, #8
 8016624:	af00      	add	r7, sp, #0
 8016626:	4603      	mov	r3, r0
 8016628:	6039      	str	r1, [r7, #0]
 801662a:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 801662c:	79fb      	ldrb	r3, [r7, #7]
 801662e:	6839      	ldr	r1, [r7, #0]
 8016630:	4618      	mov	r0, r3
 8016632:	f7f8 fbd5 	bl	800ede0 <SecureElementSetKey>
 8016636:	4603      	mov	r3, r0
 8016638:	2b00      	cmp	r3, #0
 801663a:	d001      	beq.n	8016640 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801663c:	230f      	movs	r3, #15
 801663e:	e018      	b.n	8016672 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8016640:	79fb      	ldrb	r3, [r7, #7]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d114      	bne.n	8016670 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8016646:	4b0d      	ldr	r3, [pc, #52]	; (801667c <LoRaMacCryptoSetKey+0x5c>)
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	789b      	ldrb	r3, [r3, #2]
 801664c:	79fa      	ldrb	r2, [r7, #7]
 801664e:	4611      	mov	r1, r2
 8016650:	4618      	mov	r0, r3
 8016652:	f000 fa3f 	bl	8016ad4 <LoRaMacCryptoDeriveMcRootKey>
 8016656:	4603      	mov	r3, r0
 8016658:	2b00      	cmp	r3, #0
 801665a:	d001      	beq.n	8016660 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801665c:	230f      	movs	r3, #15
 801665e:	e008      	b.n	8016672 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016660:	2004      	movs	r0, #4
 8016662:	f000 fa62 	bl	8016b2a <LoRaMacCryptoDeriveMcKEKey>
 8016666:	4603      	mov	r3, r0
 8016668:	2b00      	cmp	r3, #0
 801666a:	d001      	beq.n	8016670 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801666c:	230f      	movs	r3, #15
 801666e:	e000      	b.n	8016672 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016670:	2300      	movs	r3, #0
}
 8016672:	4618      	mov	r0, r3
 8016674:	3708      	adds	r7, #8
 8016676:	46bd      	mov	sp, r7
 8016678:	bd80      	pop	{r7, pc}
 801667a:	bf00      	nop
 801667c:	20001de4 	.word	0x20001de4

08016680 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b086      	sub	sp, #24
 8016684:	af02      	add	r7, sp, #8
 8016686:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d101      	bne.n	8016692 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801668e:	230a      	movs	r3, #10
 8016690:	e033      	b.n	80166fa <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8016692:	2301      	movs	r3, #1
 8016694:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8016696:	2300      	movs	r3, #0
 8016698:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 801669a:	f107 0308 	add.w	r3, r7, #8
 801669e:	4618      	mov	r0, r3
 80166a0:	f7f8 fd6e 	bl	800f180 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 80166a4:	68ba      	ldr	r2, [r7, #8]
 80166a6:	4b17      	ldr	r3, [pc, #92]	; (8016704 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	b292      	uxth	r2, r2
 80166ac:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80166ae:	4b15      	ldr	r3, [pc, #84]	; (8016704 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	889a      	ldrh	r2, [r3, #4]
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80166b8:	6878      	ldr	r0, [r7, #4]
 80166ba:	f000 fc18 	bl	8016eee <LoRaMacSerializerJoinRequest>
 80166be:	4603      	mov	r3, r0
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d001      	beq.n	80166c8 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80166c4:	2311      	movs	r3, #17
 80166c6:	e018      	b.n	80166fa <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	6819      	ldr	r1, [r3, #0]
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	3318      	adds	r3, #24
 80166d0:	7bfa      	ldrb	r2, [r7, #15]
 80166d2:	9300      	str	r3, [sp, #0]
 80166d4:	4613      	mov	r3, r2
 80166d6:	2213      	movs	r2, #19
 80166d8:	2000      	movs	r0, #0
 80166da:	f7f8 fbdf 	bl	800ee9c <SecureElementComputeAesCmac>
 80166de:	4603      	mov	r3, r0
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d001      	beq.n	80166e8 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80166e4:	230f      	movs	r3, #15
 80166e6:	e008      	b.n	80166fa <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	f000 fc00 	bl	8016eee <LoRaMacSerializerJoinRequest>
 80166ee:	4603      	mov	r3, r0
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d001      	beq.n	80166f8 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80166f4:	2311      	movs	r3, #17
 80166f6:	e000      	b.n	80166fa <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80166f8:	2300      	movs	r3, #0
}
 80166fa:	4618      	mov	r0, r3
 80166fc:	3710      	adds	r7, #16
 80166fe:	46bd      	mov	sp, r7
 8016700:	bd80      	pop	{r7, pc}
 8016702:	bf00      	nop
 8016704:	20001de4 	.word	0x20001de4

08016708 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8016708:	b590      	push	{r4, r7, lr}
 801670a:	b097      	sub	sp, #92	; 0x5c
 801670c:	af04      	add	r7, sp, #16
 801670e:	4603      	mov	r3, r0
 8016710:	60b9      	str	r1, [r7, #8]
 8016712:	607a      	str	r2, [r7, #4]
 8016714:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d002      	beq.n	8016722 <LoRaMacCryptoHandleJoinAccept+0x1a>
 801671c:	68bb      	ldr	r3, [r7, #8]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d101      	bne.n	8016726 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016722:	230a      	movs	r3, #10
 8016724:	e0bd      	b.n	80168a2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016726:	2313      	movs	r3, #19
 8016728:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 801672c:	2300      	movs	r3, #0
 801672e:	61bb      	str	r3, [r7, #24]
 8016730:	f107 031c 	add.w	r3, r7, #28
 8016734:	221d      	movs	r2, #29
 8016736:	2100      	movs	r1, #0
 8016738:	4618      	mov	r0, r3
 801673a:	f007 fe3f 	bl	801e3bc <memset>
    uint8_t versionMinor         = 0;
 801673e:	2300      	movs	r3, #0
 8016740:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8016742:	4b5a      	ldr	r3, [pc, #360]	; (80168ac <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	889b      	ldrh	r3, [r3, #4]
 8016748:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	681c      	ldr	r4, [r3, #0]
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	791b      	ldrb	r3, [r3, #4]
 8016754:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8016758:	7bf8      	ldrb	r0, [r7, #15]
 801675a:	f107 0217 	add.w	r2, r7, #23
 801675e:	9202      	str	r2, [sp, #8]
 8016760:	f107 0218 	add.w	r2, r7, #24
 8016764:	9201      	str	r2, [sp, #4]
 8016766:	9300      	str	r3, [sp, #0]
 8016768:	4623      	mov	r3, r4
 801676a:	460a      	mov	r2, r1
 801676c:	68b9      	ldr	r1, [r7, #8]
 801676e:	f7f8 fc89 	bl	800f084 <SecureElementProcessJoinAccept>
 8016772:	4603      	mov	r3, r0
 8016774:	2b00      	cmp	r3, #0
 8016776:	d001      	beq.n	801677c <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016778:	230f      	movs	r3, #15
 801677a:	e092      	b.n	80168a2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	6818      	ldr	r0, [r3, #0]
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	791b      	ldrb	r3, [r3, #4]
 8016784:	b29a      	uxth	r2, r3
 8016786:	f107 0318 	add.w	r3, r7, #24
 801678a:	4619      	mov	r1, r3
 801678c:	f003 f84b 	bl	8019826 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016790:	6878      	ldr	r0, [r7, #4]
 8016792:	f000 f9ed 	bl	8016b70 <LoRaMacParserJoinAccept>
 8016796:	4603      	mov	r3, r0
 8016798:	2b00      	cmp	r3, #0
 801679a:	d001      	beq.n	80167a0 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801679c:	2310      	movs	r3, #16
 801679e:	e080      	b.n	80168a2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	799b      	ldrb	r3, [r3, #6]
 80167a4:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	79db      	ldrb	r3, [r3, #7]
 80167aa:	021b      	lsls	r3, r3, #8
 80167ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80167ae:	4313      	orrs	r3, r2
 80167b0:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	7a1b      	ldrb	r3, [r3, #8]
 80167b6:	041b      	lsls	r3, r3, #16
 80167b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80167ba:	4313      	orrs	r3, r2
 80167bc:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 80167be:	4b3b      	ldr	r3, [pc, #236]	; (80168ac <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	689b      	ldr	r3, [r3, #8]
 80167c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80167c6:	429a      	cmp	r2, r3
 80167c8:	d010      	beq.n	80167ec <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80167ca:	4b38      	ldr	r3, [pc, #224]	; (80168ac <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80167d0:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 80167d2:	7dfb      	ldrb	r3, [r7, #23]
 80167d4:	2100      	movs	r1, #0
 80167d6:	4618      	mov	r0, r3
 80167d8:	f000 f97c 	bl	8016ad4 <LoRaMacCryptoDeriveMcRootKey>
 80167dc:	4603      	mov	r3, r0
 80167de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80167e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d005      	beq.n	80167f6 <LoRaMacCryptoHandleJoinAccept+0xee>
 80167ea:	e001      	b.n	80167f0 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80167ec:	2303      	movs	r3, #3
 80167ee:	e058      	b.n	80168a2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 80167f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80167f4:	e055      	b.n	80168a2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80167f6:	2004      	movs	r0, #4
 80167f8:	f000 f997 	bl	8016b2a <LoRaMacCryptoDeriveMcKEKey>
 80167fc:	4603      	mov	r3, r0
 80167fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016802:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016806:	2b00      	cmp	r3, #0
 8016808:	d002      	beq.n	8016810 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 801680a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801680e:	e048      	b.n	80168a2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	7a5b      	ldrb	r3, [r3, #9]
 8016814:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	7a9b      	ldrb	r3, [r3, #10]
 801681a:	021b      	lsls	r3, r3, #8
 801681c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801681e:	4313      	orrs	r3, r2
 8016820:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	7adb      	ldrb	r3, [r3, #11]
 8016826:	041b      	lsls	r3, r3, #16
 8016828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801682a:	4313      	orrs	r3, r2
 801682c:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801682e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016832:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016834:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016836:	2003      	movs	r0, #3
 8016838:	f7ff fcd6 	bl	80161e8 <DeriveSessionKey10x>
 801683c:	4603      	mov	r3, r0
 801683e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016842:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016846:	2b00      	cmp	r3, #0
 8016848:	d002      	beq.n	8016850 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 801684a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801684e:	e028      	b.n	80168a2 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8016850:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016856:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016858:	2002      	movs	r0, #2
 801685a:	f7ff fcc5 	bl	80161e8 <DeriveSessionKey10x>
 801685e:	4603      	mov	r3, r0
 8016860:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016864:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016868:	2b00      	cmp	r3, #0
 801686a:	d002      	beq.n	8016872 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 801686c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016870:	e017      	b.n	80168a2 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8016872:	4b0e      	ldr	r3, [pc, #56]	; (80168ac <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	7dfa      	ldrb	r2, [r7, #23]
 8016878:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 801687a:	4b0c      	ldr	r3, [pc, #48]	; (80168ac <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	2200      	movs	r2, #0
 8016880:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8016882:	4b0a      	ldr	r3, [pc, #40]	; (80168ac <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	f04f 32ff 	mov.w	r2, #4294967295
 801688a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801688c:	4b07      	ldr	r3, [pc, #28]	; (80168ac <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	f04f 32ff 	mov.w	r2, #4294967295
 8016894:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016896:	4b05      	ldr	r3, [pc, #20]	; (80168ac <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	f04f 32ff 	mov.w	r2, #4294967295
 801689e:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80168a0:	2300      	movs	r3, #0
}
 80168a2:	4618      	mov	r0, r3
 80168a4:	374c      	adds	r7, #76	; 0x4c
 80168a6:	46bd      	mov	sp, r7
 80168a8:	bd90      	pop	{r4, r7, pc}
 80168aa:	bf00      	nop
 80168ac:	20001de4 	.word	0x20001de4

080168b0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80168b0:	b590      	push	{r4, r7, lr}
 80168b2:	b08b      	sub	sp, #44	; 0x2c
 80168b4:	af04      	add	r7, sp, #16
 80168b6:	60f8      	str	r0, [r7, #12]
 80168b8:	607b      	str	r3, [r7, #4]
 80168ba:	460b      	mov	r3, r1
 80168bc:	72fb      	strb	r3, [r7, #11]
 80168be:	4613      	mov	r3, r2
 80168c0:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80168c2:	2313      	movs	r3, #19
 80168c4:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80168c6:	2303      	movs	r3, #3
 80168c8:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d101      	bne.n	80168d4 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80168d0:	230a      	movs	r3, #10
 80168d2:	e05f      	b.n	8016994 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80168d4:	4b31      	ldr	r3, [pc, #196]	; (801699c <LoRaMacCryptoSecureMessage+0xec>)
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	68db      	ldr	r3, [r3, #12]
 80168da:	68fa      	ldr	r2, [r7, #12]
 80168dc:	429a      	cmp	r2, r3
 80168de:	d201      	bcs.n	80168e4 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80168e0:	2306      	movs	r3, #6
 80168e2:	e057      	b.n	8016994 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d101      	bne.n	80168f2 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80168ee:	2302      	movs	r3, #2
 80168f0:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80168f2:	4b2a      	ldr	r3, [pc, #168]	; (801699c <LoRaMacCryptoSecureMessage+0xec>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	68db      	ldr	r3, [r3, #12]
 80168f8:	68fa      	ldr	r2, [r7, #12]
 80168fa:	429a      	cmp	r2, r3
 80168fc:	d916      	bls.n	801692c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016908:	b219      	sxth	r1, r3
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	689c      	ldr	r4, [r3, #8]
 801690e:	7dfa      	ldrb	r2, [r7, #23]
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	9301      	str	r3, [sp, #4]
 8016914:	2300      	movs	r3, #0
 8016916:	9300      	str	r3, [sp, #0]
 8016918:	4623      	mov	r3, r4
 801691a:	f7ff fa71 	bl	8015e00 <PayloadEncrypt>
 801691e:	4603      	mov	r3, r0
 8016920:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016922:	7dbb      	ldrb	r3, [r7, #22]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d001      	beq.n	801692c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8016928:	7dbb      	ldrb	r3, [r7, #22]
 801692a:	e033      	b.n	8016994 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801692c:	6878      	ldr	r0, [r7, #4]
 801692e:	f000 fb60 	bl	8016ff2 <LoRaMacSerializerData>
 8016932:	4603      	mov	r3, r0
 8016934:	2b00      	cmp	r3, #0
 8016936:	d001      	beq.n	801693c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016938:	2311      	movs	r3, #17
 801693a:	e02b      	b.n	8016994 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801693c:	2302      	movs	r3, #2
 801693e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	6818      	ldr	r0, [r3, #0]
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	791b      	ldrb	r3, [r3, #4]
 8016948:	b29b      	uxth	r3, r3
 801694a:	3b04      	subs	r3, #4
 801694c:	b299      	uxth	r1, r3
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	689b      	ldr	r3, [r3, #8]
 8016952:	687a      	ldr	r2, [r7, #4]
 8016954:	322c      	adds	r2, #44	; 0x2c
 8016956:	7dfc      	ldrb	r4, [r7, #23]
 8016958:	9203      	str	r2, [sp, #12]
 801695a:	68fa      	ldr	r2, [r7, #12]
 801695c:	9202      	str	r2, [sp, #8]
 801695e:	9301      	str	r3, [sp, #4]
 8016960:	2300      	movs	r3, #0
 8016962:	9300      	str	r3, [sp, #0]
 8016964:	2300      	movs	r3, #0
 8016966:	4622      	mov	r2, r4
 8016968:	f7ff fb4b 	bl	8016002 <ComputeCmacB0>
 801696c:	4603      	mov	r3, r0
 801696e:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016970:	7dbb      	ldrb	r3, [r7, #22]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d001      	beq.n	801697a <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8016976:	7dbb      	ldrb	r3, [r7, #22]
 8016978:	e00c      	b.n	8016994 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801697a:	6878      	ldr	r0, [r7, #4]
 801697c:	f000 fb39 	bl	8016ff2 <LoRaMacSerializerData>
 8016980:	4603      	mov	r3, r0
 8016982:	2b00      	cmp	r3, #0
 8016984:	d001      	beq.n	801698a <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016986:	2311      	movs	r3, #17
 8016988:	e004      	b.n	8016994 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801698a:	4b04      	ldr	r3, [pc, #16]	; (801699c <LoRaMacCryptoSecureMessage+0xec>)
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	68fa      	ldr	r2, [r7, #12]
 8016990:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8016992:	2300      	movs	r3, #0
}
 8016994:	4618      	mov	r0, r3
 8016996:	371c      	adds	r7, #28
 8016998:	46bd      	mov	sp, r7
 801699a:	bd90      	pop	{r4, r7, pc}
 801699c:	20001de4 	.word	0x20001de4

080169a0 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80169a0:	b590      	push	{r4, r7, lr}
 80169a2:	b08b      	sub	sp, #44	; 0x2c
 80169a4:	af04      	add	r7, sp, #16
 80169a6:	60b9      	str	r1, [r7, #8]
 80169a8:	607b      	str	r3, [r7, #4]
 80169aa:	4603      	mov	r3, r0
 80169ac:	73fb      	strb	r3, [r7, #15]
 80169ae:	4613      	mov	r3, r2
 80169b0:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80169b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d101      	bne.n	80169bc <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80169b8:	230a      	movs	r3, #10
 80169ba:	e084      	b.n	8016ac6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80169bc:	7bbb      	ldrb	r3, [r7, #14]
 80169be:	6879      	ldr	r1, [r7, #4]
 80169c0:	4618      	mov	r0, r3
 80169c2:	f7ff fcaf 	bl	8016324 <CheckFCntDown>
 80169c6:	4603      	mov	r3, r0
 80169c8:	f083 0301 	eor.w	r3, r3, #1
 80169cc:	b2db      	uxtb	r3, r3
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d001      	beq.n	80169d6 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80169d2:	2306      	movs	r3, #6
 80169d4:	e077      	b.n	8016ac6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80169d6:	2313      	movs	r3, #19
 80169d8:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80169da:	2303      	movs	r3, #3
 80169dc:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80169de:	2302      	movs	r3, #2
 80169e0:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80169e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80169e4:	f000 f98f 	bl	8016d06 <LoRaMacParserData>
 80169e8:	4603      	mov	r3, r0
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d001      	beq.n	80169f2 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80169ee:	2310      	movs	r3, #16
 80169f0:	e069      	b.n	8016ac6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80169f2:	f107 0210 	add.w	r2, r7, #16
 80169f6:	7bfb      	ldrb	r3, [r7, #15]
 80169f8:	4611      	mov	r1, r2
 80169fa:	4618      	mov	r0, r3
 80169fc:	f7ff fbce 	bl	801619c <GetKeyAddrItem>
 8016a00:	4603      	mov	r3, r0
 8016a02:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016a04:	7d7b      	ldrb	r3, [r7, #21]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d001      	beq.n	8016a0e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8016a0a:	7d7b      	ldrb	r3, [r7, #21]
 8016a0c:	e05b      	b.n	8016ac6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8016a0e:	693b      	ldr	r3, [r7, #16]
 8016a10:	785b      	ldrb	r3, [r3, #1]
 8016a12:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8016a14:	693b      	ldr	r3, [r7, #16]
 8016a16:	789b      	ldrb	r3, [r3, #2]
 8016a18:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8016a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a1c:	689b      	ldr	r3, [r3, #8]
 8016a1e:	68ba      	ldr	r2, [r7, #8]
 8016a20:	429a      	cmp	r2, r3
 8016a22:	d001      	beq.n	8016a28 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8016a24:	2302      	movs	r3, #2
 8016a26:	e04e      	b.n	8016ac6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8016a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a2a:	7b1b      	ldrb	r3, [r3, #12]
 8016a2c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8016a30:	b2db      	uxtb	r3, r3
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	bf14      	ite	ne
 8016a36:	2301      	movne	r3, #1
 8016a38:	2300      	moveq	r3, #0
 8016a3a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8016a3c:	4b24      	ldr	r3, [pc, #144]	; (8016ad0 <LoRaMacCryptoUnsecureMessage+0x130>)
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	789b      	ldrb	r3, [r3, #2]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d101      	bne.n	8016a4a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8016a46:	2300      	movs	r3, #0
 8016a48:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8016a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a4c:	6818      	ldr	r0, [r3, #0]
 8016a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a50:	791b      	ldrb	r3, [r3, #4]
 8016a52:	b29b      	uxth	r3, r3
 8016a54:	3b04      	subs	r3, #4
 8016a56:	b299      	uxth	r1, r3
 8016a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a5c:	7dbc      	ldrb	r4, [r7, #22]
 8016a5e:	7d3a      	ldrb	r2, [r7, #20]
 8016a60:	9303      	str	r3, [sp, #12]
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	9302      	str	r3, [sp, #8]
 8016a66:	68bb      	ldr	r3, [r7, #8]
 8016a68:	9301      	str	r3, [sp, #4]
 8016a6a:	2301      	movs	r3, #1
 8016a6c:	9300      	str	r3, [sp, #0]
 8016a6e:	4623      	mov	r3, r4
 8016a70:	f7ff fb05 	bl	801607e <VerifyCmacB0>
 8016a74:	4603      	mov	r3, r0
 8016a76:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016a78:	7d7b      	ldrb	r3, [r7, #21]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d001      	beq.n	8016a82 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8016a7e:	7d7b      	ldrb	r3, [r7, #21]
 8016a80:	e021      	b.n	8016ac6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8016a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d101      	bne.n	8016a90 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8016a8c:	2302      	movs	r3, #2
 8016a8e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8016a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a92:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016a9a:	b219      	sxth	r1, r3
 8016a9c:	7dfa      	ldrb	r2, [r7, #23]
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	9301      	str	r3, [sp, #4]
 8016aa2:	2301      	movs	r3, #1
 8016aa4:	9300      	str	r3, [sp, #0]
 8016aa6:	68bb      	ldr	r3, [r7, #8]
 8016aa8:	f7ff f9aa 	bl	8015e00 <PayloadEncrypt>
 8016aac:	4603      	mov	r3, r0
 8016aae:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016ab0:	7d7b      	ldrb	r3, [r7, #21]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d001      	beq.n	8016aba <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8016ab6:	7d7b      	ldrb	r3, [r7, #21]
 8016ab8:	e005      	b.n	8016ac6 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8016aba:	7bbb      	ldrb	r3, [r7, #14]
 8016abc:	6879      	ldr	r1, [r7, #4]
 8016abe:	4618      	mov	r0, r3
 8016ac0:	f7ff fc54 	bl	801636c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8016ac4:	2300      	movs	r3, #0
}
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	371c      	adds	r7, #28
 8016aca:	46bd      	mov	sp, r7
 8016acc:	bd90      	pop	{r4, r7, pc}
 8016ace:	bf00      	nop
 8016ad0:	20001de4 	.word	0x20001de4

08016ad4 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b086      	sub	sp, #24
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	4603      	mov	r3, r0
 8016adc:	460a      	mov	r2, r1
 8016ade:	71fb      	strb	r3, [r7, #7]
 8016ae0:	4613      	mov	r3, r2
 8016ae2:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8016ae4:	79bb      	ldrb	r3, [r7, #6]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d001      	beq.n	8016aee <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016aea:	230b      	movs	r3, #11
 8016aec:	e019      	b.n	8016b22 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8016aee:	2300      	movs	r3, #0
 8016af0:	60bb      	str	r3, [r7, #8]
 8016af2:	f107 030c 	add.w	r3, r7, #12
 8016af6:	2200      	movs	r2, #0
 8016af8:	601a      	str	r2, [r3, #0]
 8016afa:	605a      	str	r2, [r3, #4]
 8016afc:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8016afe:	79fb      	ldrb	r3, [r7, #7]
 8016b00:	2b01      	cmp	r3, #1
 8016b02:	d101      	bne.n	8016b08 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8016b04:	2320      	movs	r3, #32
 8016b06:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8016b08:	79b9      	ldrb	r1, [r7, #6]
 8016b0a:	f107 0308 	add.w	r3, r7, #8
 8016b0e:	2204      	movs	r2, #4
 8016b10:	4618      	mov	r0, r3
 8016b12:	f7f8 fa77 	bl	800f004 <SecureElementDeriveAndStoreKey>
 8016b16:	4603      	mov	r3, r0
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d001      	beq.n	8016b20 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016b1c:	230f      	movs	r3, #15
 8016b1e:	e000      	b.n	8016b22 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016b20:	2300      	movs	r3, #0
}
 8016b22:	4618      	mov	r0, r3
 8016b24:	3718      	adds	r7, #24
 8016b26:	46bd      	mov	sp, r7
 8016b28:	bd80      	pop	{r7, pc}

08016b2a <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8016b2a:	b580      	push	{r7, lr}
 8016b2c:	b086      	sub	sp, #24
 8016b2e:	af00      	add	r7, sp, #0
 8016b30:	4603      	mov	r3, r0
 8016b32:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8016b34:	79fb      	ldrb	r3, [r7, #7]
 8016b36:	2b04      	cmp	r3, #4
 8016b38:	d001      	beq.n	8016b3e <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016b3a:	230b      	movs	r3, #11
 8016b3c:	e014      	b.n	8016b68 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8016b3e:	2300      	movs	r3, #0
 8016b40:	60bb      	str	r3, [r7, #8]
 8016b42:	f107 030c 	add.w	r3, r7, #12
 8016b46:	2200      	movs	r2, #0
 8016b48:	601a      	str	r2, [r3, #0]
 8016b4a:	605a      	str	r2, [r3, #4]
 8016b4c:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8016b4e:	79f9      	ldrb	r1, [r7, #7]
 8016b50:	f107 0308 	add.w	r3, r7, #8
 8016b54:	227f      	movs	r2, #127	; 0x7f
 8016b56:	4618      	mov	r0, r3
 8016b58:	f7f8 fa54 	bl	800f004 <SecureElementDeriveAndStoreKey>
 8016b5c:	4603      	mov	r3, r0
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d001      	beq.n	8016b66 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016b62:	230f      	movs	r3, #15
 8016b64:	e000      	b.n	8016b68 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016b66:	2300      	movs	r3, #0
}
 8016b68:	4618      	mov	r0, r3
 8016b6a:	3718      	adds	r7, #24
 8016b6c:	46bd      	mov	sp, r7
 8016b6e:	bd80      	pop	{r7, pc}

08016b70 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8016b70:	b580      	push	{r7, lr}
 8016b72:	b084      	sub	sp, #16
 8016b74:	af00      	add	r7, sp, #0
 8016b76:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d003      	beq.n	8016b86 <LoRaMacParserJoinAccept+0x16>
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d101      	bne.n	8016b8a <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016b86:	2302      	movs	r3, #2
 8016b88:	e0b9      	b.n	8016cfe <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8016b8a:	2300      	movs	r3, #0
 8016b8c:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	681a      	ldr	r2, [r3, #0]
 8016b92:	89fb      	ldrh	r3, [r7, #14]
 8016b94:	1c59      	adds	r1, r3, #1
 8016b96:	81f9      	strh	r1, [r7, #14]
 8016b98:	4413      	add	r3, r2
 8016b9a:	781a      	ldrb	r2, [r3, #0]
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	1d98      	adds	r0, r3, #6
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	681a      	ldr	r2, [r3, #0]
 8016ba8:	89fb      	ldrh	r3, [r7, #14]
 8016baa:	4413      	add	r3, r2
 8016bac:	2203      	movs	r2, #3
 8016bae:	4619      	mov	r1, r3
 8016bb0:	f002 fe39 	bl	8019826 <memcpy1>
    bufItr = bufItr + 3;
 8016bb4:	89fb      	ldrh	r3, [r7, #14]
 8016bb6:	3303      	adds	r3, #3
 8016bb8:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	f103 0009 	add.w	r0, r3, #9
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	681a      	ldr	r2, [r3, #0]
 8016bc4:	89fb      	ldrh	r3, [r7, #14]
 8016bc6:	4413      	add	r3, r2
 8016bc8:	2203      	movs	r2, #3
 8016bca:	4619      	mov	r1, r3
 8016bcc:	f002 fe2b 	bl	8019826 <memcpy1>
    bufItr = bufItr + 3;
 8016bd0:	89fb      	ldrh	r3, [r7, #14]
 8016bd2:	3303      	adds	r3, #3
 8016bd4:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	681a      	ldr	r2, [r3, #0]
 8016bda:	89fb      	ldrh	r3, [r7, #14]
 8016bdc:	1c59      	adds	r1, r3, #1
 8016bde:	81f9      	strh	r1, [r7, #14]
 8016be0:	4413      	add	r3, r2
 8016be2:	781b      	ldrb	r3, [r3, #0]
 8016be4:	461a      	mov	r2, r3
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	681a      	ldr	r2, [r3, #0]
 8016bee:	89fb      	ldrh	r3, [r7, #14]
 8016bf0:	1c59      	adds	r1, r3, #1
 8016bf2:	81f9      	strh	r1, [r7, #14]
 8016bf4:	4413      	add	r3, r2
 8016bf6:	781b      	ldrb	r3, [r3, #0]
 8016bf8:	021a      	lsls	r2, r3, #8
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	68db      	ldr	r3, [r3, #12]
 8016bfe:	431a      	orrs	r2, r3
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	681a      	ldr	r2, [r3, #0]
 8016c08:	89fb      	ldrh	r3, [r7, #14]
 8016c0a:	1c59      	adds	r1, r3, #1
 8016c0c:	81f9      	strh	r1, [r7, #14]
 8016c0e:	4413      	add	r3, r2
 8016c10:	781b      	ldrb	r3, [r3, #0]
 8016c12:	041a      	lsls	r2, r3, #16
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	68db      	ldr	r3, [r3, #12]
 8016c18:	431a      	orrs	r2, r3
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	681a      	ldr	r2, [r3, #0]
 8016c22:	89fb      	ldrh	r3, [r7, #14]
 8016c24:	1c59      	adds	r1, r3, #1
 8016c26:	81f9      	strh	r1, [r7, #14]
 8016c28:	4413      	add	r3, r2
 8016c2a:	781b      	ldrb	r3, [r3, #0]
 8016c2c:	061a      	lsls	r2, r3, #24
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	68db      	ldr	r3, [r3, #12]
 8016c32:	431a      	orrs	r2, r3
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	681a      	ldr	r2, [r3, #0]
 8016c3c:	89fb      	ldrh	r3, [r7, #14]
 8016c3e:	1c59      	adds	r1, r3, #1
 8016c40:	81f9      	strh	r1, [r7, #14]
 8016c42:	4413      	add	r3, r2
 8016c44:	781a      	ldrb	r2, [r3, #0]
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	681a      	ldr	r2, [r3, #0]
 8016c4e:	89fb      	ldrh	r3, [r7, #14]
 8016c50:	1c59      	adds	r1, r3, #1
 8016c52:	81f9      	strh	r1, [r7, #14]
 8016c54:	4413      	add	r3, r2
 8016c56:	781a      	ldrb	r2, [r3, #0]
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	791b      	ldrb	r3, [r3, #4]
 8016c60:	1f1a      	subs	r2, r3, #4
 8016c62:	89fb      	ldrh	r3, [r7, #14]
 8016c64:	1ad3      	subs	r3, r2, r3
 8016c66:	2b10      	cmp	r3, #16
 8016c68:	d10e      	bne.n	8016c88 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	f103 0012 	add.w	r0, r3, #18
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	681a      	ldr	r2, [r3, #0]
 8016c74:	89fb      	ldrh	r3, [r7, #14]
 8016c76:	4413      	add	r3, r2
 8016c78:	2210      	movs	r2, #16
 8016c7a:	4619      	mov	r1, r3
 8016c7c:	f002 fdd3 	bl	8019826 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8016c80:	89fb      	ldrh	r3, [r7, #14]
 8016c82:	3310      	adds	r3, #16
 8016c84:	81fb      	strh	r3, [r7, #14]
 8016c86:	e008      	b.n	8016c9a <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	791b      	ldrb	r3, [r3, #4]
 8016c8c:	1f1a      	subs	r2, r3, #4
 8016c8e:	89fb      	ldrh	r3, [r7, #14]
 8016c90:	1ad3      	subs	r3, r2, r3
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	dd01      	ble.n	8016c9a <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8016c96:	2301      	movs	r3, #1
 8016c98:	e031      	b.n	8016cfe <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	681a      	ldr	r2, [r3, #0]
 8016c9e:	89fb      	ldrh	r3, [r7, #14]
 8016ca0:	1c59      	adds	r1, r3, #1
 8016ca2:	81f9      	strh	r1, [r7, #14]
 8016ca4:	4413      	add	r3, r2
 8016ca6:	781b      	ldrb	r3, [r3, #0]
 8016ca8:	461a      	mov	r2, r3
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	681a      	ldr	r2, [r3, #0]
 8016cb2:	89fb      	ldrh	r3, [r7, #14]
 8016cb4:	1c59      	adds	r1, r3, #1
 8016cb6:	81f9      	strh	r1, [r7, #14]
 8016cb8:	4413      	add	r3, r2
 8016cba:	781b      	ldrb	r3, [r3, #0]
 8016cbc:	021a      	lsls	r2, r3, #8
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cc2:	431a      	orrs	r2, r3
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	681a      	ldr	r2, [r3, #0]
 8016ccc:	89fb      	ldrh	r3, [r7, #14]
 8016cce:	1c59      	adds	r1, r3, #1
 8016cd0:	81f9      	strh	r1, [r7, #14]
 8016cd2:	4413      	add	r3, r2
 8016cd4:	781b      	ldrb	r3, [r3, #0]
 8016cd6:	041a      	lsls	r2, r3, #16
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cdc:	431a      	orrs	r2, r3
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	681a      	ldr	r2, [r3, #0]
 8016ce6:	89fb      	ldrh	r3, [r7, #14]
 8016ce8:	1c59      	adds	r1, r3, #1
 8016cea:	81f9      	strh	r1, [r7, #14]
 8016cec:	4413      	add	r3, r2
 8016cee:	781b      	ldrb	r3, [r3, #0]
 8016cf0:	061a      	lsls	r2, r3, #24
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cf6:	431a      	orrs	r2, r3
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8016cfc:	2300      	movs	r3, #0
}
 8016cfe:	4618      	mov	r0, r3
 8016d00:	3710      	adds	r7, #16
 8016d02:	46bd      	mov	sp, r7
 8016d04:	bd80      	pop	{r7, pc}

08016d06 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8016d06:	b580      	push	{r7, lr}
 8016d08:	b084      	sub	sp, #16
 8016d0a:	af00      	add	r7, sp, #0
 8016d0c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d003      	beq.n	8016d1c <LoRaMacParserData+0x16>
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d101      	bne.n	8016d20 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016d1c:	2302      	movs	r3, #2
 8016d1e:	e0e2      	b.n	8016ee6 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8016d20:	2300      	movs	r3, #0
 8016d22:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	681a      	ldr	r2, [r3, #0]
 8016d28:	89fb      	ldrh	r3, [r7, #14]
 8016d2a:	1c59      	adds	r1, r3, #1
 8016d2c:	81f9      	strh	r1, [r7, #14]
 8016d2e:	4413      	add	r3, r2
 8016d30:	781a      	ldrb	r2, [r3, #0]
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	681a      	ldr	r2, [r3, #0]
 8016d3a:	89fb      	ldrh	r3, [r7, #14]
 8016d3c:	1c59      	adds	r1, r3, #1
 8016d3e:	81f9      	strh	r1, [r7, #14]
 8016d40:	4413      	add	r3, r2
 8016d42:	781b      	ldrb	r3, [r3, #0]
 8016d44:	461a      	mov	r2, r3
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	681a      	ldr	r2, [r3, #0]
 8016d4e:	89fb      	ldrh	r3, [r7, #14]
 8016d50:	1c59      	adds	r1, r3, #1
 8016d52:	81f9      	strh	r1, [r7, #14]
 8016d54:	4413      	add	r3, r2
 8016d56:	781b      	ldrb	r3, [r3, #0]
 8016d58:	021a      	lsls	r2, r3, #8
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	689b      	ldr	r3, [r3, #8]
 8016d5e:	431a      	orrs	r2, r3
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	681a      	ldr	r2, [r3, #0]
 8016d68:	89fb      	ldrh	r3, [r7, #14]
 8016d6a:	1c59      	adds	r1, r3, #1
 8016d6c:	81f9      	strh	r1, [r7, #14]
 8016d6e:	4413      	add	r3, r2
 8016d70:	781b      	ldrb	r3, [r3, #0]
 8016d72:	041a      	lsls	r2, r3, #16
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	689b      	ldr	r3, [r3, #8]
 8016d78:	431a      	orrs	r2, r3
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	681a      	ldr	r2, [r3, #0]
 8016d82:	89fb      	ldrh	r3, [r7, #14]
 8016d84:	1c59      	adds	r1, r3, #1
 8016d86:	81f9      	strh	r1, [r7, #14]
 8016d88:	4413      	add	r3, r2
 8016d8a:	781b      	ldrb	r3, [r3, #0]
 8016d8c:	061a      	lsls	r2, r3, #24
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	689b      	ldr	r3, [r3, #8]
 8016d92:	431a      	orrs	r2, r3
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	681a      	ldr	r2, [r3, #0]
 8016d9c:	89fb      	ldrh	r3, [r7, #14]
 8016d9e:	1c59      	adds	r1, r3, #1
 8016da0:	81f9      	strh	r1, [r7, #14]
 8016da2:	4413      	add	r3, r2
 8016da4:	781a      	ldrb	r2, [r3, #0]
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	681a      	ldr	r2, [r3, #0]
 8016dae:	89fb      	ldrh	r3, [r7, #14]
 8016db0:	1c59      	adds	r1, r3, #1
 8016db2:	81f9      	strh	r1, [r7, #14]
 8016db4:	4413      	add	r3, r2
 8016db6:	781b      	ldrb	r3, [r3, #0]
 8016db8:	b29a      	uxth	r2, r3
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	681a      	ldr	r2, [r3, #0]
 8016dc2:	89fb      	ldrh	r3, [r7, #14]
 8016dc4:	1c59      	adds	r1, r3, #1
 8016dc6:	81f9      	strh	r1, [r7, #14]
 8016dc8:	4413      	add	r3, r2
 8016dca:	781b      	ldrb	r3, [r3, #0]
 8016dcc:	0219      	lsls	r1, r3, #8
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	89db      	ldrh	r3, [r3, #14]
 8016dd2:	b21a      	sxth	r2, r3
 8016dd4:	b20b      	sxth	r3, r1
 8016dd6:	4313      	orrs	r3, r2
 8016dd8:	b21b      	sxth	r3, r3
 8016dda:	b29a      	uxth	r2, r3
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	f103 0010 	add.w	r0, r3, #16
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	681a      	ldr	r2, [r3, #0]
 8016dea:	89fb      	ldrh	r3, [r7, #14]
 8016dec:	18d1      	adds	r1, r2, r3
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	7b1b      	ldrb	r3, [r3, #12]
 8016df2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016df6:	b2db      	uxtb	r3, r3
 8016df8:	b29b      	uxth	r3, r3
 8016dfa:	461a      	mov	r2, r3
 8016dfc:	f002 fd13 	bl	8019826 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	7b1b      	ldrb	r3, [r3, #12]
 8016e04:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016e08:	b2db      	uxtb	r3, r3
 8016e0a:	b29a      	uxth	r2, r3
 8016e0c:	89fb      	ldrh	r3, [r7, #14]
 8016e0e:	4413      	add	r3, r2
 8016e10:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	2200      	movs	r2, #0
 8016e16:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	2200      	movs	r2, #0
 8016e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	791b      	ldrb	r3, [r3, #4]
 8016e26:	461a      	mov	r2, r3
 8016e28:	89fb      	ldrh	r3, [r7, #14]
 8016e2a:	1ad3      	subs	r3, r2, r3
 8016e2c:	2b04      	cmp	r3, #4
 8016e2e:	dd28      	ble.n	8016e82 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	681a      	ldr	r2, [r3, #0]
 8016e34:	89fb      	ldrh	r3, [r7, #14]
 8016e36:	1c59      	adds	r1, r3, #1
 8016e38:	81f9      	strh	r1, [r7, #14]
 8016e3a:	4413      	add	r3, r2
 8016e3c:	781a      	ldrb	r2, [r3, #0]
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	791a      	ldrb	r2, [r3, #4]
 8016e48:	89fb      	ldrh	r3, [r7, #14]
 8016e4a:	b2db      	uxtb	r3, r3
 8016e4c:	1ad3      	subs	r3, r2, r3
 8016e4e:	b2db      	uxtb	r3, r3
 8016e50:	3b04      	subs	r3, #4
 8016e52:	b2da      	uxtb	r2, r3
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	681a      	ldr	r2, [r3, #0]
 8016e62:	89fb      	ldrh	r3, [r7, #14]
 8016e64:	18d1      	adds	r1, r2, r3
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016e6c:	b29b      	uxth	r3, r3
 8016e6e:	461a      	mov	r2, r3
 8016e70:	f002 fcd9 	bl	8019826 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016e7a:	b29a      	uxth	r2, r3
 8016e7c:	89fb      	ldrh	r3, [r7, #14]
 8016e7e:	4413      	add	r3, r2
 8016e80:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	681a      	ldr	r2, [r3, #0]
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	791b      	ldrb	r3, [r3, #4]
 8016e8a:	3b04      	subs	r3, #4
 8016e8c:	4413      	add	r3, r2
 8016e8e:	781b      	ldrb	r3, [r3, #0]
 8016e90:	461a      	mov	r2, r3
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	6819      	ldr	r1, [r3, #0]
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	791b      	ldrb	r3, [r3, #4]
 8016ea2:	3b03      	subs	r3, #3
 8016ea4:	440b      	add	r3, r1
 8016ea6:	781b      	ldrb	r3, [r3, #0]
 8016ea8:	021b      	lsls	r3, r3, #8
 8016eaa:	431a      	orrs	r2, r3
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	6819      	ldr	r1, [r3, #0]
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	791b      	ldrb	r3, [r3, #4]
 8016ebc:	3b02      	subs	r3, #2
 8016ebe:	440b      	add	r3, r1
 8016ec0:	781b      	ldrb	r3, [r3, #0]
 8016ec2:	041b      	lsls	r3, r3, #16
 8016ec4:	431a      	orrs	r2, r3
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	6819      	ldr	r1, [r3, #0]
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	791b      	ldrb	r3, [r3, #4]
 8016ed6:	3b01      	subs	r3, #1
 8016ed8:	440b      	add	r3, r1
 8016eda:	781b      	ldrb	r3, [r3, #0]
 8016edc:	061b      	lsls	r3, r3, #24
 8016ede:	431a      	orrs	r2, r3
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8016ee4:	2300      	movs	r3, #0
}
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	3710      	adds	r7, #16
 8016eea:	46bd      	mov	sp, r7
 8016eec:	bd80      	pop	{r7, pc}

08016eee <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016eee:	b580      	push	{r7, lr}
 8016ef0:	b084      	sub	sp, #16
 8016ef2:	af00      	add	r7, sp, #0
 8016ef4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d003      	beq.n	8016f04 <LoRaMacSerializerJoinRequest+0x16>
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d101      	bne.n	8016f08 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8016f04:	2301      	movs	r3, #1
 8016f06:	e070      	b.n	8016fea <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8016f08:	2300      	movs	r3, #0
 8016f0a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	791b      	ldrb	r3, [r3, #4]
 8016f10:	2b16      	cmp	r3, #22
 8016f12:	d801      	bhi.n	8016f18 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016f14:	2302      	movs	r3, #2
 8016f16:	e068      	b.n	8016fea <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	681a      	ldr	r2, [r3, #0]
 8016f1c:	89fb      	ldrh	r3, [r7, #14]
 8016f1e:	1c59      	adds	r1, r3, #1
 8016f20:	81f9      	strh	r1, [r7, #14]
 8016f22:	4413      	add	r3, r2
 8016f24:	687a      	ldr	r2, [r7, #4]
 8016f26:	7952      	ldrb	r2, [r2, #5]
 8016f28:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	681a      	ldr	r2, [r3, #0]
 8016f2e:	89fb      	ldrh	r3, [r7, #14]
 8016f30:	18d0      	adds	r0, r2, r3
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	3306      	adds	r3, #6
 8016f36:	2208      	movs	r2, #8
 8016f38:	4619      	mov	r1, r3
 8016f3a:	f002 fc8f 	bl	801985c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8016f3e:	89fb      	ldrh	r3, [r7, #14]
 8016f40:	3308      	adds	r3, #8
 8016f42:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	681a      	ldr	r2, [r3, #0]
 8016f48:	89fb      	ldrh	r3, [r7, #14]
 8016f4a:	18d0      	adds	r0, r2, r3
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	330e      	adds	r3, #14
 8016f50:	2208      	movs	r2, #8
 8016f52:	4619      	mov	r1, r3
 8016f54:	f002 fc82 	bl	801985c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8016f58:	89fb      	ldrh	r3, [r7, #14]
 8016f5a:	3308      	adds	r3, #8
 8016f5c:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	8ad9      	ldrh	r1, [r3, #22]
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	681a      	ldr	r2, [r3, #0]
 8016f66:	89fb      	ldrh	r3, [r7, #14]
 8016f68:	1c58      	adds	r0, r3, #1
 8016f6a:	81f8      	strh	r0, [r7, #14]
 8016f6c:	4413      	add	r3, r2
 8016f6e:	b2ca      	uxtb	r2, r1
 8016f70:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	8adb      	ldrh	r3, [r3, #22]
 8016f76:	0a1b      	lsrs	r3, r3, #8
 8016f78:	b299      	uxth	r1, r3
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	681a      	ldr	r2, [r3, #0]
 8016f7e:	89fb      	ldrh	r3, [r7, #14]
 8016f80:	1c58      	adds	r0, r3, #1
 8016f82:	81f8      	strh	r0, [r7, #14]
 8016f84:	4413      	add	r3, r2
 8016f86:	b2ca      	uxtb	r2, r1
 8016f88:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	6999      	ldr	r1, [r3, #24]
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	681a      	ldr	r2, [r3, #0]
 8016f92:	89fb      	ldrh	r3, [r7, #14]
 8016f94:	1c58      	adds	r0, r3, #1
 8016f96:	81f8      	strh	r0, [r7, #14]
 8016f98:	4413      	add	r3, r2
 8016f9a:	b2ca      	uxtb	r2, r1
 8016f9c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	699b      	ldr	r3, [r3, #24]
 8016fa2:	0a19      	lsrs	r1, r3, #8
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	681a      	ldr	r2, [r3, #0]
 8016fa8:	89fb      	ldrh	r3, [r7, #14]
 8016faa:	1c58      	adds	r0, r3, #1
 8016fac:	81f8      	strh	r0, [r7, #14]
 8016fae:	4413      	add	r3, r2
 8016fb0:	b2ca      	uxtb	r2, r1
 8016fb2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	699b      	ldr	r3, [r3, #24]
 8016fb8:	0c19      	lsrs	r1, r3, #16
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	681a      	ldr	r2, [r3, #0]
 8016fbe:	89fb      	ldrh	r3, [r7, #14]
 8016fc0:	1c58      	adds	r0, r3, #1
 8016fc2:	81f8      	strh	r0, [r7, #14]
 8016fc4:	4413      	add	r3, r2
 8016fc6:	b2ca      	uxtb	r2, r1
 8016fc8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	699b      	ldr	r3, [r3, #24]
 8016fce:	0e19      	lsrs	r1, r3, #24
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	681a      	ldr	r2, [r3, #0]
 8016fd4:	89fb      	ldrh	r3, [r7, #14]
 8016fd6:	1c58      	adds	r0, r3, #1
 8016fd8:	81f8      	strh	r0, [r7, #14]
 8016fda:	4413      	add	r3, r2
 8016fdc:	b2ca      	uxtb	r2, r1
 8016fde:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016fe0:	89fb      	ldrh	r3, [r7, #14]
 8016fe2:	b2da      	uxtb	r2, r3
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016fe8:	2300      	movs	r3, #0
}
 8016fea:	4618      	mov	r0, r3
 8016fec:	3710      	adds	r7, #16
 8016fee:	46bd      	mov	sp, r7
 8016ff0:	bd80      	pop	{r7, pc}

08016ff2 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8016ff2:	b580      	push	{r7, lr}
 8016ff4:	b084      	sub	sp, #16
 8016ff6:	af00      	add	r7, sp, #0
 8016ff8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d003      	beq.n	8017008 <LoRaMacSerializerData+0x16>
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	2b00      	cmp	r3, #0
 8017006:	d101      	bne.n	801700c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017008:	2301      	movs	r3, #1
 801700a:	e0e5      	b.n	80171d8 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 801700c:	2300      	movs	r3, #0
 801700e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8017010:	2308      	movs	r3, #8
 8017012:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	7b1b      	ldrb	r3, [r3, #12]
 8017018:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801701c:	b2db      	uxtb	r3, r3
 801701e:	b29a      	uxth	r2, r3
 8017020:	89bb      	ldrh	r3, [r7, #12]
 8017022:	4413      	add	r3, r2
 8017024:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801702c:	2b00      	cmp	r3, #0
 801702e:	d002      	beq.n	8017036 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8017030:	89bb      	ldrh	r3, [r7, #12]
 8017032:	3301      	adds	r3, #1
 8017034:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801703c:	b29a      	uxth	r2, r3
 801703e:	89bb      	ldrh	r3, [r7, #12]
 8017040:	4413      	add	r3, r2
 8017042:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8017044:	89bb      	ldrh	r3, [r7, #12]
 8017046:	3304      	adds	r3, #4
 8017048:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	791b      	ldrb	r3, [r3, #4]
 801704e:	b29b      	uxth	r3, r3
 8017050:	89ba      	ldrh	r2, [r7, #12]
 8017052:	429a      	cmp	r2, r3
 8017054:	d901      	bls.n	801705a <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017056:	2302      	movs	r3, #2
 8017058:	e0be      	b.n	80171d8 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	681a      	ldr	r2, [r3, #0]
 801705e:	89fb      	ldrh	r3, [r7, #14]
 8017060:	1c59      	adds	r1, r3, #1
 8017062:	81f9      	strh	r1, [r7, #14]
 8017064:	4413      	add	r3, r2
 8017066:	687a      	ldr	r2, [r7, #4]
 8017068:	7952      	ldrb	r2, [r2, #5]
 801706a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	6899      	ldr	r1, [r3, #8]
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	681a      	ldr	r2, [r3, #0]
 8017074:	89fb      	ldrh	r3, [r7, #14]
 8017076:	1c58      	adds	r0, r3, #1
 8017078:	81f8      	strh	r0, [r7, #14]
 801707a:	4413      	add	r3, r2
 801707c:	b2ca      	uxtb	r2, r1
 801707e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	689b      	ldr	r3, [r3, #8]
 8017084:	0a19      	lsrs	r1, r3, #8
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	681a      	ldr	r2, [r3, #0]
 801708a:	89fb      	ldrh	r3, [r7, #14]
 801708c:	1c58      	adds	r0, r3, #1
 801708e:	81f8      	strh	r0, [r7, #14]
 8017090:	4413      	add	r3, r2
 8017092:	b2ca      	uxtb	r2, r1
 8017094:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	689b      	ldr	r3, [r3, #8]
 801709a:	0c19      	lsrs	r1, r3, #16
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	681a      	ldr	r2, [r3, #0]
 80170a0:	89fb      	ldrh	r3, [r7, #14]
 80170a2:	1c58      	adds	r0, r3, #1
 80170a4:	81f8      	strh	r0, [r7, #14]
 80170a6:	4413      	add	r3, r2
 80170a8:	b2ca      	uxtb	r2, r1
 80170aa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	689b      	ldr	r3, [r3, #8]
 80170b0:	0e19      	lsrs	r1, r3, #24
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	681a      	ldr	r2, [r3, #0]
 80170b6:	89fb      	ldrh	r3, [r7, #14]
 80170b8:	1c58      	adds	r0, r3, #1
 80170ba:	81f8      	strh	r0, [r7, #14]
 80170bc:	4413      	add	r3, r2
 80170be:	b2ca      	uxtb	r2, r1
 80170c0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	681a      	ldr	r2, [r3, #0]
 80170c6:	89fb      	ldrh	r3, [r7, #14]
 80170c8:	1c59      	adds	r1, r3, #1
 80170ca:	81f9      	strh	r1, [r7, #14]
 80170cc:	4413      	add	r3, r2
 80170ce:	687a      	ldr	r2, [r7, #4]
 80170d0:	7b12      	ldrb	r2, [r2, #12]
 80170d2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	89d9      	ldrh	r1, [r3, #14]
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	681a      	ldr	r2, [r3, #0]
 80170dc:	89fb      	ldrh	r3, [r7, #14]
 80170de:	1c58      	adds	r0, r3, #1
 80170e0:	81f8      	strh	r0, [r7, #14]
 80170e2:	4413      	add	r3, r2
 80170e4:	b2ca      	uxtb	r2, r1
 80170e6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	89db      	ldrh	r3, [r3, #14]
 80170ec:	0a1b      	lsrs	r3, r3, #8
 80170ee:	b299      	uxth	r1, r3
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	681a      	ldr	r2, [r3, #0]
 80170f4:	89fb      	ldrh	r3, [r7, #14]
 80170f6:	1c58      	adds	r0, r3, #1
 80170f8:	81f8      	strh	r0, [r7, #14]
 80170fa:	4413      	add	r3, r2
 80170fc:	b2ca      	uxtb	r2, r1
 80170fe:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	681a      	ldr	r2, [r3, #0]
 8017104:	89fb      	ldrh	r3, [r7, #14]
 8017106:	18d0      	adds	r0, r2, r3
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	f103 0110 	add.w	r1, r3, #16
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	7b1b      	ldrb	r3, [r3, #12]
 8017112:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017116:	b2db      	uxtb	r3, r3
 8017118:	b29b      	uxth	r3, r3
 801711a:	461a      	mov	r2, r3
 801711c:	f002 fb83 	bl	8019826 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	7b1b      	ldrb	r3, [r3, #12]
 8017124:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017128:	b2db      	uxtb	r3, r3
 801712a:	b29a      	uxth	r2, r3
 801712c:	89fb      	ldrh	r3, [r7, #14]
 801712e:	4413      	add	r3, r2
 8017130:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017138:	2b00      	cmp	r3, #0
 801713a:	d009      	beq.n	8017150 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	681a      	ldr	r2, [r3, #0]
 8017140:	89fb      	ldrh	r3, [r7, #14]
 8017142:	1c59      	adds	r1, r3, #1
 8017144:	81f9      	strh	r1, [r7, #14]
 8017146:	4413      	add	r3, r2
 8017148:	687a      	ldr	r2, [r7, #4]
 801714a:	f892 2020 	ldrb.w	r2, [r2, #32]
 801714e:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	681a      	ldr	r2, [r3, #0]
 8017154:	89fb      	ldrh	r3, [r7, #14]
 8017156:	18d0      	adds	r0, r2, r3
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017162:	b29b      	uxth	r3, r3
 8017164:	461a      	mov	r2, r3
 8017166:	f002 fb5e 	bl	8019826 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017170:	b29a      	uxth	r2, r3
 8017172:	89fb      	ldrh	r3, [r7, #14]
 8017174:	4413      	add	r3, r2
 8017176:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	681a      	ldr	r2, [r3, #0]
 8017180:	89fb      	ldrh	r3, [r7, #14]
 8017182:	1c58      	adds	r0, r3, #1
 8017184:	81f8      	strh	r0, [r7, #14]
 8017186:	4413      	add	r3, r2
 8017188:	b2ca      	uxtb	r2, r1
 801718a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017190:	0a19      	lsrs	r1, r3, #8
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	681a      	ldr	r2, [r3, #0]
 8017196:	89fb      	ldrh	r3, [r7, #14]
 8017198:	1c58      	adds	r0, r3, #1
 801719a:	81f8      	strh	r0, [r7, #14]
 801719c:	4413      	add	r3, r2
 801719e:	b2ca      	uxtb	r2, r1
 80171a0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171a6:	0c19      	lsrs	r1, r3, #16
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	681a      	ldr	r2, [r3, #0]
 80171ac:	89fb      	ldrh	r3, [r7, #14]
 80171ae:	1c58      	adds	r0, r3, #1
 80171b0:	81f8      	strh	r0, [r7, #14]
 80171b2:	4413      	add	r3, r2
 80171b4:	b2ca      	uxtb	r2, r1
 80171b6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171bc:	0e19      	lsrs	r1, r3, #24
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	681a      	ldr	r2, [r3, #0]
 80171c2:	89fb      	ldrh	r3, [r7, #14]
 80171c4:	1c58      	adds	r0, r3, #1
 80171c6:	81f8      	strh	r0, [r7, #14]
 80171c8:	4413      	add	r3, r2
 80171ca:	b2ca      	uxtb	r2, r1
 80171cc:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80171ce:	89fb      	ldrh	r3, [r7, #14]
 80171d0:	b2da      	uxtb	r2, r3
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80171d6:	2300      	movs	r3, #0
}
 80171d8:	4618      	mov	r0, r3
 80171da:	3710      	adds	r7, #16
 80171dc:	46bd      	mov	sp, r7
 80171de:	bd80      	pop	{r7, pc}

080171e0 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80171e0:	b480      	push	{r7}
 80171e2:	b083      	sub	sp, #12
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	4603      	mov	r3, r0
 80171e8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80171ea:	79fb      	ldrb	r3, [r7, #7]
 80171ec:	2b05      	cmp	r3, #5
 80171ee:	d101      	bne.n	80171f4 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80171f0:	2301      	movs	r3, #1
 80171f2:	e000      	b.n	80171f6 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80171f4:	2300      	movs	r3, #0
        }
    }
}
 80171f6:	4618      	mov	r0, r3
 80171f8:	370c      	adds	r7, #12
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bc80      	pop	{r7}
 80171fe:	4770      	bx	lr

08017200 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b084      	sub	sp, #16
 8017204:	af00      	add	r7, sp, #0
 8017206:	4603      	mov	r3, r0
 8017208:	6039      	str	r1, [r7, #0]
 801720a:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 801720c:	2300      	movs	r3, #0
 801720e:	60bb      	str	r3, [r7, #8]
    switch( region )
 8017210:	79fb      	ldrb	r3, [r7, #7]
 8017212:	2b05      	cmp	r3, #5
 8017214:	d105      	bne.n	8017222 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8017216:	6838      	ldr	r0, [r7, #0]
 8017218:	f001 f994 	bl	8018544 <RegionEU868GetPhyParam>
 801721c:	4603      	mov	r3, r0
 801721e:	60fb      	str	r3, [r7, #12]
 8017220:	e001      	b.n	8017226 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8017222:	68bb      	ldr	r3, [r7, #8]
 8017224:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	4618      	mov	r0, r3
 801722a:	3710      	adds	r7, #16
 801722c:	46bd      	mov	sp, r7
 801722e:	bd80      	pop	{r7, pc}

08017230 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b082      	sub	sp, #8
 8017234:	af00      	add	r7, sp, #0
 8017236:	4603      	mov	r3, r0
 8017238:	6039      	str	r1, [r7, #0]
 801723a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801723c:	79fb      	ldrb	r3, [r7, #7]
 801723e:	2b05      	cmp	r3, #5
 8017240:	d103      	bne.n	801724a <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8017242:	6838      	ldr	r0, [r7, #0]
 8017244:	f001 faca 	bl	80187dc <RegionEU868SetBandTxDone>
 8017248:	e000      	b.n	801724c <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801724a:	bf00      	nop
        }
    }
}
 801724c:	3708      	adds	r7, #8
 801724e:	46bd      	mov	sp, r7
 8017250:	bd80      	pop	{r7, pc}

08017252 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8017252:	b580      	push	{r7, lr}
 8017254:	b082      	sub	sp, #8
 8017256:	af00      	add	r7, sp, #0
 8017258:	4603      	mov	r3, r0
 801725a:	6039      	str	r1, [r7, #0]
 801725c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801725e:	79fb      	ldrb	r3, [r7, #7]
 8017260:	2b05      	cmp	r3, #5
 8017262:	d103      	bne.n	801726c <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8017264:	6838      	ldr	r0, [r7, #0]
 8017266:	f001 fae5 	bl	8018834 <RegionEU868InitDefaults>
 801726a:	e000      	b.n	801726e <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801726c:	bf00      	nop
        }
    }
}
 801726e:	bf00      	nop
 8017270:	3708      	adds	r7, #8
 8017272:	46bd      	mov	sp, r7
 8017274:	bd80      	pop	{r7, pc}

08017276 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017276:	b580      	push	{r7, lr}
 8017278:	b082      	sub	sp, #8
 801727a:	af00      	add	r7, sp, #0
 801727c:	4603      	mov	r3, r0
 801727e:	6039      	str	r1, [r7, #0]
 8017280:	71fb      	strb	r3, [r7, #7]
 8017282:	4613      	mov	r3, r2
 8017284:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8017286:	79fb      	ldrb	r3, [r7, #7]
 8017288:	2b05      	cmp	r3, #5
 801728a:	d106      	bne.n	801729a <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 801728c:	79bb      	ldrb	r3, [r7, #6]
 801728e:	4619      	mov	r1, r3
 8017290:	6838      	ldr	r0, [r7, #0]
 8017292:	f001 fb6d 	bl	8018970 <RegionEU868Verify>
 8017296:	4603      	mov	r3, r0
 8017298:	e000      	b.n	801729c <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 801729a:	2300      	movs	r3, #0
        }
    }
}
 801729c:	4618      	mov	r0, r3
 801729e:	3708      	adds	r7, #8
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}

080172a4 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b082      	sub	sp, #8
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	4603      	mov	r3, r0
 80172ac:	6039      	str	r1, [r7, #0]
 80172ae:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80172b0:	79fb      	ldrb	r3, [r7, #7]
 80172b2:	2b05      	cmp	r3, #5
 80172b4:	d103      	bne.n	80172be <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 80172b6:	6838      	ldr	r0, [r7, #0]
 80172b8:	f001 fbd6 	bl	8018a68 <RegionEU868ApplyCFList>
 80172bc:	e000      	b.n	80172c0 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80172be:	bf00      	nop
        }
    }
}
 80172c0:	bf00      	nop
 80172c2:	3708      	adds	r7, #8
 80172c4:	46bd      	mov	sp, r7
 80172c6:	bd80      	pop	{r7, pc}

080172c8 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80172c8:	b580      	push	{r7, lr}
 80172ca:	b082      	sub	sp, #8
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	4603      	mov	r3, r0
 80172d0:	6039      	str	r1, [r7, #0]
 80172d2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80172d4:	79fb      	ldrb	r3, [r7, #7]
 80172d6:	2b05      	cmp	r3, #5
 80172d8:	d104      	bne.n	80172e4 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80172da:	6838      	ldr	r0, [r7, #0]
 80172dc:	f001 fc38 	bl	8018b50 <RegionEU868ChanMaskSet>
 80172e0:	4603      	mov	r3, r0
 80172e2:	e000      	b.n	80172e6 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80172e4:	2300      	movs	r3, #0
        }
    }
}
 80172e6:	4618      	mov	r0, r3
 80172e8:	3708      	adds	r7, #8
 80172ea:	46bd      	mov	sp, r7
 80172ec:	bd80      	pop	{r7, pc}

080172ee <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80172ee:	b580      	push	{r7, lr}
 80172f0:	b082      	sub	sp, #8
 80172f2:	af00      	add	r7, sp, #0
 80172f4:	603b      	str	r3, [r7, #0]
 80172f6:	4603      	mov	r3, r0
 80172f8:	71fb      	strb	r3, [r7, #7]
 80172fa:	460b      	mov	r3, r1
 80172fc:	71bb      	strb	r3, [r7, #6]
 80172fe:	4613      	mov	r3, r2
 8017300:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017302:	79fb      	ldrb	r3, [r7, #7]
 8017304:	2b05      	cmp	r3, #5
 8017306:	d107      	bne.n	8017318 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8017308:	7979      	ldrb	r1, [r7, #5]
 801730a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801730e:	693b      	ldr	r3, [r7, #16]
 8017310:	683a      	ldr	r2, [r7, #0]
 8017312:	f001 fc47 	bl	8018ba4 <RegionEU868ComputeRxWindowParameters>
 8017316:	e000      	b.n	801731a <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8017318:	bf00      	nop
        }
    }
}
 801731a:	bf00      	nop
 801731c:	3708      	adds	r7, #8
 801731e:	46bd      	mov	sp, r7
 8017320:	bd80      	pop	{r7, pc}

08017322 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017322:	b580      	push	{r7, lr}
 8017324:	b084      	sub	sp, #16
 8017326:	af00      	add	r7, sp, #0
 8017328:	4603      	mov	r3, r0
 801732a:	60b9      	str	r1, [r7, #8]
 801732c:	607a      	str	r2, [r7, #4]
 801732e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017330:	7bfb      	ldrb	r3, [r7, #15]
 8017332:	2b05      	cmp	r3, #5
 8017334:	d105      	bne.n	8017342 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8017336:	6879      	ldr	r1, [r7, #4]
 8017338:	68b8      	ldr	r0, [r7, #8]
 801733a:	f001 fc8d 	bl	8018c58 <RegionEU868RxConfig>
 801733e:	4603      	mov	r3, r0
 8017340:	e000      	b.n	8017344 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8017342:	2300      	movs	r3, #0
        }
    }
}
 8017344:	4618      	mov	r0, r3
 8017346:	3710      	adds	r7, #16
 8017348:	46bd      	mov	sp, r7
 801734a:	bd80      	pop	{r7, pc}

0801734c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b084      	sub	sp, #16
 8017350:	af00      	add	r7, sp, #0
 8017352:	60b9      	str	r1, [r7, #8]
 8017354:	607a      	str	r2, [r7, #4]
 8017356:	603b      	str	r3, [r7, #0]
 8017358:	4603      	mov	r3, r0
 801735a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801735c:	7bfb      	ldrb	r3, [r7, #15]
 801735e:	2b05      	cmp	r3, #5
 8017360:	d106      	bne.n	8017370 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8017362:	683a      	ldr	r2, [r7, #0]
 8017364:	6879      	ldr	r1, [r7, #4]
 8017366:	68b8      	ldr	r0, [r7, #8]
 8017368:	f001 fd46 	bl	8018df8 <RegionEU868TxConfig>
 801736c:	4603      	mov	r3, r0
 801736e:	e000      	b.n	8017372 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8017370:	2300      	movs	r3, #0
        }
    }
}
 8017372:	4618      	mov	r0, r3
 8017374:	3710      	adds	r7, #16
 8017376:	46bd      	mov	sp, r7
 8017378:	bd80      	pop	{r7, pc}

0801737a <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801737a:	b580      	push	{r7, lr}
 801737c:	b086      	sub	sp, #24
 801737e:	af02      	add	r7, sp, #8
 8017380:	60b9      	str	r1, [r7, #8]
 8017382:	607a      	str	r2, [r7, #4]
 8017384:	603b      	str	r3, [r7, #0]
 8017386:	4603      	mov	r3, r0
 8017388:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801738a:	7bfb      	ldrb	r3, [r7, #15]
 801738c:	2b05      	cmp	r3, #5
 801738e:	d109      	bne.n	80173a4 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8017390:	69fb      	ldr	r3, [r7, #28]
 8017392:	9300      	str	r3, [sp, #0]
 8017394:	69bb      	ldr	r3, [r7, #24]
 8017396:	683a      	ldr	r2, [r7, #0]
 8017398:	6879      	ldr	r1, [r7, #4]
 801739a:	68b8      	ldr	r0, [r7, #8]
 801739c:	f001 fdfc 	bl	8018f98 <RegionEU868LinkAdrReq>
 80173a0:	4603      	mov	r3, r0
 80173a2:	e000      	b.n	80173a6 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80173a4:	2300      	movs	r3, #0
        }
    }
}
 80173a6:	4618      	mov	r0, r3
 80173a8:	3710      	adds	r7, #16
 80173aa:	46bd      	mov	sp, r7
 80173ac:	bd80      	pop	{r7, pc}

080173ae <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80173ae:	b580      	push	{r7, lr}
 80173b0:	b082      	sub	sp, #8
 80173b2:	af00      	add	r7, sp, #0
 80173b4:	4603      	mov	r3, r0
 80173b6:	6039      	str	r1, [r7, #0]
 80173b8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80173ba:	79fb      	ldrb	r3, [r7, #7]
 80173bc:	2b05      	cmp	r3, #5
 80173be:	d104      	bne.n	80173ca <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80173c0:	6838      	ldr	r0, [r7, #0]
 80173c2:	f001 ff0b 	bl	80191dc <RegionEU868RxParamSetupReq>
 80173c6:	4603      	mov	r3, r0
 80173c8:	e000      	b.n	80173cc <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80173ca:	2300      	movs	r3, #0
        }
    }
}
 80173cc:	4618      	mov	r0, r3
 80173ce:	3708      	adds	r7, #8
 80173d0:	46bd      	mov	sp, r7
 80173d2:	bd80      	pop	{r7, pc}

080173d4 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80173d4:	b580      	push	{r7, lr}
 80173d6:	b082      	sub	sp, #8
 80173d8:	af00      	add	r7, sp, #0
 80173da:	4603      	mov	r3, r0
 80173dc:	6039      	str	r1, [r7, #0]
 80173de:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80173e0:	79fb      	ldrb	r3, [r7, #7]
 80173e2:	2b05      	cmp	r3, #5
 80173e4:	d104      	bne.n	80173f0 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80173e6:	6838      	ldr	r0, [r7, #0]
 80173e8:	f001 ff36 	bl	8019258 <RegionEU868NewChannelReq>
 80173ec:	4603      	mov	r3, r0
 80173ee:	e000      	b.n	80173f2 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80173f0:	2300      	movs	r3, #0
        }
    }
}
 80173f2:	4618      	mov	r0, r3
 80173f4:	3708      	adds	r7, #8
 80173f6:	46bd      	mov	sp, r7
 80173f8:	bd80      	pop	{r7, pc}

080173fa <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80173fa:	b580      	push	{r7, lr}
 80173fc:	b082      	sub	sp, #8
 80173fe:	af00      	add	r7, sp, #0
 8017400:	4603      	mov	r3, r0
 8017402:	6039      	str	r1, [r7, #0]
 8017404:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017406:	79fb      	ldrb	r3, [r7, #7]
 8017408:	2b05      	cmp	r3, #5
 801740a:	d104      	bne.n	8017416 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 801740c:	6838      	ldr	r0, [r7, #0]
 801740e:	f001 ff81 	bl	8019314 <RegionEU868TxParamSetupReq>
 8017412:	4603      	mov	r3, r0
 8017414:	e000      	b.n	8017418 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017416:	2300      	movs	r3, #0
        }
    }
}
 8017418:	4618      	mov	r0, r3
 801741a:	3708      	adds	r7, #8
 801741c:	46bd      	mov	sp, r7
 801741e:	bd80      	pop	{r7, pc}

08017420 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8017420:	b580      	push	{r7, lr}
 8017422:	b082      	sub	sp, #8
 8017424:	af00      	add	r7, sp, #0
 8017426:	4603      	mov	r3, r0
 8017428:	6039      	str	r1, [r7, #0]
 801742a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801742c:	79fb      	ldrb	r3, [r7, #7]
 801742e:	2b05      	cmp	r3, #5
 8017430:	d104      	bne.n	801743c <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8017432:	6838      	ldr	r0, [r7, #0]
 8017434:	f001 ff7a 	bl	801932c <RegionEU868DlChannelReq>
 8017438:	4603      	mov	r3, r0
 801743a:	e000      	b.n	801743e <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801743c:	2300      	movs	r3, #0
        }
    }
}
 801743e:	4618      	mov	r0, r3
 8017440:	3708      	adds	r7, #8
 8017442:	46bd      	mov	sp, r7
 8017444:	bd80      	pop	{r7, pc}

08017446 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017446:	b580      	push	{r7, lr}
 8017448:	b082      	sub	sp, #8
 801744a:	af00      	add	r7, sp, #0
 801744c:	4603      	mov	r3, r0
 801744e:	71fb      	strb	r3, [r7, #7]
 8017450:	460b      	mov	r3, r1
 8017452:	71bb      	strb	r3, [r7, #6]
 8017454:	4613      	mov	r3, r2
 8017456:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017458:	79fb      	ldrb	r3, [r7, #7]
 801745a:	2b05      	cmp	r3, #5
 801745c:	d108      	bne.n	8017470 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 801745e:	797a      	ldrb	r2, [r7, #5]
 8017460:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017464:	4611      	mov	r1, r2
 8017466:	4618      	mov	r0, r3
 8017468:	f001 ffa4 	bl	80193b4 <RegionEU868AlternateDr>
 801746c:	4603      	mov	r3, r0
 801746e:	e000      	b.n	8017472 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8017470:	2300      	movs	r3, #0
        }
    }
}
 8017472:	4618      	mov	r0, r3
 8017474:	3708      	adds	r7, #8
 8017476:	46bd      	mov	sp, r7
 8017478:	bd80      	pop	{r7, pc}

0801747a <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801747a:	b580      	push	{r7, lr}
 801747c:	b084      	sub	sp, #16
 801747e:	af00      	add	r7, sp, #0
 8017480:	60b9      	str	r1, [r7, #8]
 8017482:	607a      	str	r2, [r7, #4]
 8017484:	603b      	str	r3, [r7, #0]
 8017486:	4603      	mov	r3, r0
 8017488:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801748a:	7bfb      	ldrb	r3, [r7, #15]
 801748c:	2b05      	cmp	r3, #5
 801748e:	d107      	bne.n	80174a0 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8017490:	69bb      	ldr	r3, [r7, #24]
 8017492:	683a      	ldr	r2, [r7, #0]
 8017494:	6879      	ldr	r1, [r7, #4]
 8017496:	68b8      	ldr	r0, [r7, #8]
 8017498:	f001 ff9c 	bl	80193d4 <RegionEU868NextChannel>
 801749c:	4603      	mov	r3, r0
 801749e:	e000      	b.n	80174a2 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80174a0:	2309      	movs	r3, #9
        }
    }
}
 80174a2:	4618      	mov	r0, r3
 80174a4:	3710      	adds	r7, #16
 80174a6:	46bd      	mov	sp, r7
 80174a8:	bd80      	pop	{r7, pc}

080174aa <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 80174aa:	b580      	push	{r7, lr}
 80174ac:	b082      	sub	sp, #8
 80174ae:	af00      	add	r7, sp, #0
 80174b0:	4603      	mov	r3, r0
 80174b2:	6039      	str	r1, [r7, #0]
 80174b4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80174b6:	79fb      	ldrb	r3, [r7, #7]
 80174b8:	2b05      	cmp	r3, #5
 80174ba:	d103      	bne.n	80174c4 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 80174bc:	6838      	ldr	r0, [r7, #0]
 80174be:	f002 f903 	bl	80196c8 <RegionEU868SetContinuousWave>
 80174c2:	e000      	b.n	80174c6 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80174c4:	bf00      	nop
        }
    }
}
 80174c6:	bf00      	nop
 80174c8:	3708      	adds	r7, #8
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bd80      	pop	{r7, pc}

080174ce <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80174ce:	b590      	push	{r4, r7, lr}
 80174d0:	b083      	sub	sp, #12
 80174d2:	af00      	add	r7, sp, #0
 80174d4:	4604      	mov	r4, r0
 80174d6:	4608      	mov	r0, r1
 80174d8:	4611      	mov	r1, r2
 80174da:	461a      	mov	r2, r3
 80174dc:	4623      	mov	r3, r4
 80174de:	71fb      	strb	r3, [r7, #7]
 80174e0:	4603      	mov	r3, r0
 80174e2:	71bb      	strb	r3, [r7, #6]
 80174e4:	460b      	mov	r3, r1
 80174e6:	717b      	strb	r3, [r7, #5]
 80174e8:	4613      	mov	r3, r2
 80174ea:	713b      	strb	r3, [r7, #4]
    switch( region )
 80174ec:	79fb      	ldrb	r3, [r7, #7]
 80174ee:	2b05      	cmp	r3, #5
 80174f0:	d109      	bne.n	8017506 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80174f2:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80174f6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80174fa:	79bb      	ldrb	r3, [r7, #6]
 80174fc:	4618      	mov	r0, r3
 80174fe:	f002 f931 	bl	8019764 <RegionEU868ApplyDrOffset>
 8017502:	4603      	mov	r3, r0
 8017504:	e000      	b.n	8017508 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017506:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8017508:	4618      	mov	r0, r3
 801750a:	370c      	adds	r7, #12
 801750c:	46bd      	mov	sp, r7
 801750e:	bd90      	pop	{r4, r7, pc}

08017510 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017510:	b480      	push	{r7}
 8017512:	b083      	sub	sp, #12
 8017514:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017516:	4b04      	ldr	r3, [pc, #16]	; (8017528 <RegionGetVersion+0x18>)
 8017518:	607b      	str	r3, [r7, #4]

    return version;
 801751a:	687b      	ldr	r3, [r7, #4]
}
 801751c:	4618      	mov	r0, r3
 801751e:	370c      	adds	r7, #12
 8017520:	46bd      	mov	sp, r7
 8017522:	bc80      	pop	{r7}
 8017524:	4770      	bx	lr
 8017526:	bf00      	nop
 8017528:	01010003 	.word	0x01010003

0801752c <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801752c:	b480      	push	{r7}
 801752e:	b087      	sub	sp, #28
 8017530:	af00      	add	r7, sp, #0
 8017532:	60f8      	str	r0, [r7, #12]
 8017534:	4608      	mov	r0, r1
 8017536:	4639      	mov	r1, r7
 8017538:	e881 000c 	stmia.w	r1, {r2, r3}
 801753c:	4603      	mov	r3, r0
 801753e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	881b      	ldrh	r3, [r3, #0]
 8017544:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8017546:	7afb      	ldrb	r3, [r7, #11]
 8017548:	f083 0301 	eor.w	r3, r3, #1
 801754c:	b2db      	uxtb	r3, r3
 801754e:	2b00      	cmp	r3, #0
 8017550:	d01b      	beq.n	801758a <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017552:	f242 7310 	movw	r3, #10000	; 0x2710
 8017556:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8017558:	683b      	ldr	r3, [r7, #0]
 801755a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801755e:	d202      	bcs.n	8017566 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8017560:	2364      	movs	r3, #100	; 0x64
 8017562:	82bb      	strh	r3, [r7, #20]
 8017564:	e00b      	b.n	801757e <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8017566:	683b      	ldr	r3, [r7, #0]
 8017568:	f649 22af 	movw	r2, #39599	; 0x9aaf
 801756c:	4293      	cmp	r3, r2
 801756e:	d803      	bhi.n	8017578 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8017570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017574:	82bb      	strh	r3, [r7, #20]
 8017576:	e002      	b.n	801757e <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017578:	f242 7310 	movw	r3, #10000	; 0x2710
 801757c:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801757e:	8aba      	ldrh	r2, [r7, #20]
 8017580:	8afb      	ldrh	r3, [r7, #22]
 8017582:	4293      	cmp	r3, r2
 8017584:	bf38      	it	cc
 8017586:	4613      	movcc	r3, r2
 8017588:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801758a:	8afb      	ldrh	r3, [r7, #22]
 801758c:	2b00      	cmp	r3, #0
 801758e:	d101      	bne.n	8017594 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8017590:	2301      	movs	r3, #1
 8017592:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8017594:	8afb      	ldrh	r3, [r7, #22]
}
 8017596:	4618      	mov	r0, r3
 8017598:	371c      	adds	r7, #28
 801759a:	46bd      	mov	sp, r7
 801759c:	bc80      	pop	{r7}
 801759e:	4770      	bx	lr

080175a0 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80175a0:	b580      	push	{r7, lr}
 80175a2:	b08e      	sub	sp, #56	; 0x38
 80175a4:	af02      	add	r7, sp, #8
 80175a6:	60f8      	str	r0, [r7, #12]
 80175a8:	4608      	mov	r0, r1
 80175aa:	4639      	mov	r1, r7
 80175ac:	e881 000c 	stmia.w	r1, {r2, r3}
 80175b0:	4603      	mov	r3, r0
 80175b2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	881b      	ldrh	r3, [r3, #0]
 80175b8:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80175ba:	4b4b      	ldr	r3, [pc, #300]	; (80176e8 <SetMaxTimeCredits+0x148>)
 80175bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80175be:	463b      	mov	r3, r7
 80175c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80175c4:	f005 fd68 	bl	801d098 <SysTimeToMs>
 80175c8:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80175ca:	f107 0314 	add.w	r3, r7, #20
 80175ce:	2200      	movs	r2, #0
 80175d0:	601a      	str	r2, [r3, #0]
 80175d2:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80175d4:	7af9      	ldrb	r1, [r7, #11]
 80175d6:	463b      	mov	r3, r7
 80175d8:	cb0c      	ldmia	r3, {r2, r3}
 80175da:	68f8      	ldr	r0, [r7, #12]
 80175dc:	f7ff ffa6 	bl	801752c <GetDutyCycle>
 80175e0:	4603      	mov	r3, r0
 80175e2:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80175e4:	7afb      	ldrb	r3, [r7, #11]
 80175e6:	f083 0301 	eor.w	r3, r3, #1
 80175ea:	b2db      	uxtb	r3, r3
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d062      	beq.n	80176b6 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80175f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80175f2:	2b64      	cmp	r3, #100	; 0x64
 80175f4:	d105      	bne.n	8017602 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80175f6:	4b3c      	ldr	r3, [pc, #240]	; (80176e8 <SetMaxTimeCredits+0x148>)
 80175f8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175fe:	609a      	str	r2, [r3, #8]
 8017600:	e00b      	b.n	801761a <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017602:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017604:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017608:	d105      	bne.n	8017616 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801760a:	4b38      	ldr	r3, [pc, #224]	; (80176ec <SetMaxTimeCredits+0x14c>)
 801760c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017612:	609a      	str	r2, [r3, #8]
 8017614:	e001      	b.n	801761a <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8017616:	4b36      	ldr	r3, [pc, #216]	; (80176f0 <SetMaxTimeCredits+0x150>)
 8017618:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	689a      	ldr	r2, [r3, #8]
 801761e:	f107 031c 	add.w	r3, r7, #28
 8017622:	4611      	mov	r1, r2
 8017624:	4618      	mov	r0, r3
 8017626:	f005 fd5f 	bl	801d0e8 <SysTimeFromMs>
 801762a:	f107 0014 	add.w	r0, r7, #20
 801762e:	6a3b      	ldr	r3, [r7, #32]
 8017630:	9300      	str	r3, [sp, #0]
 8017632:	69fb      	ldr	r3, [r7, #28]
 8017634:	463a      	mov	r2, r7
 8017636:	ca06      	ldmia	r2, {r1, r2}
 8017638:	f005 fc6f 	bl	801cf1a <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801763c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017640:	f083 0301 	eor.w	r3, r3, #1
 8017644:	b2db      	uxtb	r3, r3
 8017646:	2b00      	cmp	r3, #0
 8017648:	d006      	beq.n	8017658 <SetMaxTimeCredits+0xb8>
 801764a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801764e:	f083 0301 	eor.w	r3, r3, #1
 8017652:	b2db      	uxtb	r3, r3
 8017654:	2b00      	cmp	r3, #0
 8017656:	d108      	bne.n	801766a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801765c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801765e:	429a      	cmp	r2, r3
 8017660:	d103      	bne.n	801766a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8017662:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8017664:	4a23      	ldr	r2, [pc, #140]	; (80176f4 <SetMaxTimeCredits+0x154>)
 8017666:	4293      	cmp	r3, r2
 8017668:	d92f      	bls.n	80176ca <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801766e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017670:	683b      	ldr	r3, [r7, #0]
 8017672:	4a21      	ldr	r2, [pc, #132]	; (80176f8 <SetMaxTimeCredits+0x158>)
 8017674:	4293      	cmp	r3, r2
 8017676:	d928      	bls.n	80176ca <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8017678:	683b      	ldr	r3, [r7, #0]
 801767a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801767e:	3b30      	subs	r3, #48	; 0x30
 8017680:	4a1e      	ldr	r2, [pc, #120]	; (80176fc <SetMaxTimeCredits+0x15c>)
 8017682:	fba2 2303 	umull	r2, r3, r2, r3
 8017686:	0c1b      	lsrs	r3, r3, #16
 8017688:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801768a:	697b      	ldr	r3, [r7, #20]
 801768c:	4a1c      	ldr	r2, [pc, #112]	; (8017700 <SetMaxTimeCredits+0x160>)
 801768e:	fb02 f303 	mul.w	r3, r2, r3
 8017692:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017694:	697b      	ldr	r3, [r7, #20]
 8017696:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801769a:	3330      	adds	r3, #48	; 0x30
 801769c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801769e:	2300      	movs	r3, #0
 80176a0:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80176a2:	f107 0314 	add.w	r3, r7, #20
 80176a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80176aa:	f005 fcf5 	bl	801d098 <SysTimeToMs>
 80176ae:	4602      	mov	r2, r0
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	609a      	str	r2, [r3, #8]
 80176b4:	e009      	b.n	80176ca <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80176b6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80176ba:	f083 0301 	eor.w	r3, r3, #1
 80176be:	b2db      	uxtb	r3, r3
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d002      	beq.n	80176ca <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80176c8:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	685b      	ldr	r3, [r3, #4]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d102      	bne.n	80176d8 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80176d6:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80176dc:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80176de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80176e0:	4618      	mov	r0, r3
 80176e2:	3730      	adds	r7, #48	; 0x30
 80176e4:	46bd      	mov	sp, r7
 80176e6:	bd80      	pop	{r7, pc}
 80176e8:	001b7740 	.word	0x001b7740
 80176ec:	0112a880 	.word	0x0112a880
 80176f0:	02932e00 	.word	0x02932e00
 80176f4:	0001517f 	.word	0x0001517f
 80176f8:	0001ec2f 	.word	0x0001ec2f
 80176fc:	c22e4507 	.word	0xc22e4507
 8017700:	00015180 	.word	0x00015180

08017704 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b086      	sub	sp, #24
 8017708:	af02      	add	r7, sp, #8
 801770a:	6078      	str	r0, [r7, #4]
 801770c:	4608      	mov	r0, r1
 801770e:	4611      	mov	r1, r2
 8017710:	461a      	mov	r2, r3
 8017712:	4603      	mov	r3, r0
 8017714:	70fb      	strb	r3, [r7, #3]
 8017716:	460b      	mov	r3, r1
 8017718:	70bb      	strb	r3, [r7, #2]
 801771a:	4613      	mov	r3, r2
 801771c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801771e:	78f9      	ldrb	r1, [r7, #3]
 8017720:	787b      	ldrb	r3, [r7, #1]
 8017722:	9301      	str	r3, [sp, #4]
 8017724:	78bb      	ldrb	r3, [r7, #2]
 8017726:	9300      	str	r3, [sp, #0]
 8017728:	f107 0318 	add.w	r3, r7, #24
 801772c:	cb0c      	ldmia	r3, {r2, r3}
 801772e:	6878      	ldr	r0, [r7, #4]
 8017730:	f7ff ff36 	bl	80175a0 <SetMaxTimeCredits>
 8017734:	4603      	mov	r3, r0
 8017736:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8017738:	78fb      	ldrb	r3, [r7, #3]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d00a      	beq.n	8017754 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	685b      	ldr	r3, [r3, #4]
 8017742:	4618      	mov	r0, r3
 8017744:	f006 fae4 	bl	801dd10 <UTIL_TIMER_GetElapsedTime>
 8017748:	4602      	mov	r2, r0
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	68db      	ldr	r3, [r3, #12]
 801774e:	441a      	add	r2, r3
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	68da      	ldr	r2, [r3, #12]
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	691b      	ldr	r3, [r3, #16]
 801775c:	429a      	cmp	r2, r3
 801775e:	d903      	bls.n	8017768 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	691a      	ldr	r2, [r3, #16]
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	6a3a      	ldr	r2, [r7, #32]
 801776c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801776e:	89fb      	ldrh	r3, [r7, #14]
}
 8017770:	4618      	mov	r0, r3
 8017772:	3710      	adds	r7, #16
 8017774:	46bd      	mov	sp, r7
 8017776:	bd80      	pop	{r7, pc}

08017778 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8017778:	b480      	push	{r7}
 801777a:	b085      	sub	sp, #20
 801777c:	af00      	add	r7, sp, #0
 801777e:	4603      	mov	r3, r0
 8017780:	460a      	mov	r2, r1
 8017782:	80fb      	strh	r3, [r7, #6]
 8017784:	4613      	mov	r3, r2
 8017786:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8017788:	2300      	movs	r3, #0
 801778a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 801778c:	2300      	movs	r3, #0
 801778e:	73bb      	strb	r3, [r7, #14]
 8017790:	e011      	b.n	80177b6 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8017792:	88fa      	ldrh	r2, [r7, #6]
 8017794:	7bbb      	ldrb	r3, [r7, #14]
 8017796:	2101      	movs	r1, #1
 8017798:	fa01 f303 	lsl.w	r3, r1, r3
 801779c:	401a      	ands	r2, r3
 801779e:	7bbb      	ldrb	r3, [r7, #14]
 80177a0:	2101      	movs	r1, #1
 80177a2:	fa01 f303 	lsl.w	r3, r1, r3
 80177a6:	429a      	cmp	r2, r3
 80177a8:	d102      	bne.n	80177b0 <CountChannels+0x38>
        {
            nbActiveBits++;
 80177aa:	7bfb      	ldrb	r3, [r7, #15]
 80177ac:	3301      	adds	r3, #1
 80177ae:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80177b0:	7bbb      	ldrb	r3, [r7, #14]
 80177b2:	3301      	adds	r3, #1
 80177b4:	73bb      	strb	r3, [r7, #14]
 80177b6:	7bba      	ldrb	r2, [r7, #14]
 80177b8:	797b      	ldrb	r3, [r7, #5]
 80177ba:	429a      	cmp	r2, r3
 80177bc:	d3e9      	bcc.n	8017792 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80177be:	7bfb      	ldrb	r3, [r7, #15]
}
 80177c0:	4618      	mov	r0, r3
 80177c2:	3714      	adds	r7, #20
 80177c4:	46bd      	mov	sp, r7
 80177c6:	bc80      	pop	{r7}
 80177c8:	4770      	bx	lr

080177ca <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80177ca:	b580      	push	{r7, lr}
 80177cc:	b084      	sub	sp, #16
 80177ce:	af00      	add	r7, sp, #0
 80177d0:	6039      	str	r1, [r7, #0]
 80177d2:	4611      	mov	r1, r2
 80177d4:	461a      	mov	r2, r3
 80177d6:	4603      	mov	r3, r0
 80177d8:	71fb      	strb	r3, [r7, #7]
 80177da:	460b      	mov	r3, r1
 80177dc:	71bb      	strb	r3, [r7, #6]
 80177de:	4613      	mov	r3, r2
 80177e0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80177e2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80177e6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80177ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80177ee:	4618      	mov	r0, r3
 80177f0:	f000 f85d 	bl	80178ae <RegionCommonValueInRange>
 80177f4:	4603      	mov	r3, r0
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d101      	bne.n	80177fe <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80177fa:	2300      	movs	r3, #0
 80177fc:	e053      	b.n	80178a6 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80177fe:	2300      	movs	r3, #0
 8017800:	73fb      	strb	r3, [r7, #15]
 8017802:	2300      	movs	r3, #0
 8017804:	73bb      	strb	r3, [r7, #14]
 8017806:	e049      	b.n	801789c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017808:	2300      	movs	r3, #0
 801780a:	737b      	strb	r3, [r7, #13]
 801780c:	e03d      	b.n	801788a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801780e:	7bbb      	ldrb	r3, [r7, #14]
 8017810:	005b      	lsls	r3, r3, #1
 8017812:	683a      	ldr	r2, [r7, #0]
 8017814:	4413      	add	r3, r2
 8017816:	881b      	ldrh	r3, [r3, #0]
 8017818:	461a      	mov	r2, r3
 801781a:	7b7b      	ldrb	r3, [r7, #13]
 801781c:	fa42 f303 	asr.w	r3, r2, r3
 8017820:	f003 0301 	and.w	r3, r3, #1
 8017824:	2b00      	cmp	r3, #0
 8017826:	d02d      	beq.n	8017884 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017828:	7bfa      	ldrb	r2, [r7, #15]
 801782a:	7b7b      	ldrb	r3, [r7, #13]
 801782c:	4413      	add	r3, r2
 801782e:	461a      	mov	r2, r3
 8017830:	4613      	mov	r3, r2
 8017832:	005b      	lsls	r3, r3, #1
 8017834:	4413      	add	r3, r2
 8017836:	009b      	lsls	r3, r3, #2
 8017838:	461a      	mov	r2, r3
 801783a:	69fb      	ldr	r3, [r7, #28]
 801783c:	4413      	add	r3, r2
 801783e:	7a1b      	ldrb	r3, [r3, #8]
 8017840:	f343 0303 	sbfx	r3, r3, #0, #4
 8017844:	b25b      	sxtb	r3, r3
 8017846:	f003 030f 	and.w	r3, r3, #15
 801784a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801784c:	7bfa      	ldrb	r2, [r7, #15]
 801784e:	7b7b      	ldrb	r3, [r7, #13]
 8017850:	4413      	add	r3, r2
 8017852:	461a      	mov	r2, r3
 8017854:	4613      	mov	r3, r2
 8017856:	005b      	lsls	r3, r3, #1
 8017858:	4413      	add	r3, r2
 801785a:	009b      	lsls	r3, r3, #2
 801785c:	461a      	mov	r2, r3
 801785e:	69fb      	ldr	r3, [r7, #28]
 8017860:	4413      	add	r3, r2
 8017862:	7a1b      	ldrb	r3, [r3, #8]
 8017864:	f343 1303 	sbfx	r3, r3, #4, #4
 8017868:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801786a:	f003 030f 	and.w	r3, r3, #15
 801786e:	b25a      	sxtb	r2, r3
 8017870:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017874:	4618      	mov	r0, r3
 8017876:	f000 f81a 	bl	80178ae <RegionCommonValueInRange>
 801787a:	4603      	mov	r3, r0
 801787c:	2b01      	cmp	r3, #1
 801787e:	d101      	bne.n	8017884 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8017880:	2301      	movs	r3, #1
 8017882:	e010      	b.n	80178a6 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8017884:	7b7b      	ldrb	r3, [r7, #13]
 8017886:	3301      	adds	r3, #1
 8017888:	737b      	strb	r3, [r7, #13]
 801788a:	7b7b      	ldrb	r3, [r7, #13]
 801788c:	2b0f      	cmp	r3, #15
 801788e:	d9be      	bls.n	801780e <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017890:	7bfb      	ldrb	r3, [r7, #15]
 8017892:	3310      	adds	r3, #16
 8017894:	73fb      	strb	r3, [r7, #15]
 8017896:	7bbb      	ldrb	r3, [r7, #14]
 8017898:	3301      	adds	r3, #1
 801789a:	73bb      	strb	r3, [r7, #14]
 801789c:	7bfa      	ldrb	r2, [r7, #15]
 801789e:	79fb      	ldrb	r3, [r7, #7]
 80178a0:	429a      	cmp	r2, r3
 80178a2:	d3b1      	bcc.n	8017808 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80178a4:	2300      	movs	r3, #0
}
 80178a6:	4618      	mov	r0, r3
 80178a8:	3710      	adds	r7, #16
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bd80      	pop	{r7, pc}

080178ae <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80178ae:	b480      	push	{r7}
 80178b0:	b083      	sub	sp, #12
 80178b2:	af00      	add	r7, sp, #0
 80178b4:	4603      	mov	r3, r0
 80178b6:	71fb      	strb	r3, [r7, #7]
 80178b8:	460b      	mov	r3, r1
 80178ba:	71bb      	strb	r3, [r7, #6]
 80178bc:	4613      	mov	r3, r2
 80178be:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80178c0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80178c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80178c8:	429a      	cmp	r2, r3
 80178ca:	db07      	blt.n	80178dc <RegionCommonValueInRange+0x2e>
 80178cc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80178d0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80178d4:	429a      	cmp	r2, r3
 80178d6:	dc01      	bgt.n	80178dc <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80178d8:	2301      	movs	r3, #1
 80178da:	e000      	b.n	80178de <RegionCommonValueInRange+0x30>
    }
    return 0;
 80178dc:	2300      	movs	r3, #0
}
 80178de:	4618      	mov	r0, r3
 80178e0:	370c      	adds	r7, #12
 80178e2:	46bd      	mov	sp, r7
 80178e4:	bc80      	pop	{r7}
 80178e6:	4770      	bx	lr

080178e8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80178e8:	b480      	push	{r7}
 80178ea:	b085      	sub	sp, #20
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	6078      	str	r0, [r7, #4]
 80178f0:	460b      	mov	r3, r1
 80178f2:	70fb      	strb	r3, [r7, #3]
 80178f4:	4613      	mov	r3, r2
 80178f6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80178f8:	78fb      	ldrb	r3, [r7, #3]
 80178fa:	091b      	lsrs	r3, r3, #4
 80178fc:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80178fe:	78bb      	ldrb	r3, [r7, #2]
 8017900:	091b      	lsrs	r3, r3, #4
 8017902:	b2db      	uxtb	r3, r3
 8017904:	7bfa      	ldrb	r2, [r7, #15]
 8017906:	429a      	cmp	r2, r3
 8017908:	d803      	bhi.n	8017912 <RegionCommonChanDisable+0x2a>
 801790a:	78fa      	ldrb	r2, [r7, #3]
 801790c:	78bb      	ldrb	r3, [r7, #2]
 801790e:	429a      	cmp	r2, r3
 8017910:	d301      	bcc.n	8017916 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8017912:	2300      	movs	r3, #0
 8017914:	e017      	b.n	8017946 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8017916:	7bfb      	ldrb	r3, [r7, #15]
 8017918:	005b      	lsls	r3, r3, #1
 801791a:	687a      	ldr	r2, [r7, #4]
 801791c:	4413      	add	r3, r2
 801791e:	881b      	ldrh	r3, [r3, #0]
 8017920:	b21a      	sxth	r2, r3
 8017922:	78fb      	ldrb	r3, [r7, #3]
 8017924:	f003 030f 	and.w	r3, r3, #15
 8017928:	2101      	movs	r1, #1
 801792a:	fa01 f303 	lsl.w	r3, r1, r3
 801792e:	b21b      	sxth	r3, r3
 8017930:	43db      	mvns	r3, r3
 8017932:	b21b      	sxth	r3, r3
 8017934:	4013      	ands	r3, r2
 8017936:	b219      	sxth	r1, r3
 8017938:	7bfb      	ldrb	r3, [r7, #15]
 801793a:	005b      	lsls	r3, r3, #1
 801793c:	687a      	ldr	r2, [r7, #4]
 801793e:	4413      	add	r3, r2
 8017940:	b28a      	uxth	r2, r1
 8017942:	801a      	strh	r2, [r3, #0]

    return true;
 8017944:	2301      	movs	r3, #1
}
 8017946:	4618      	mov	r0, r3
 8017948:	3714      	adds	r7, #20
 801794a:	46bd      	mov	sp, r7
 801794c:	bc80      	pop	{r7}
 801794e:	4770      	bx	lr

08017950 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8017950:	b580      	push	{r7, lr}
 8017952:	b084      	sub	sp, #16
 8017954:	af00      	add	r7, sp, #0
 8017956:	6078      	str	r0, [r7, #4]
 8017958:	460b      	mov	r3, r1
 801795a:	70fb      	strb	r3, [r7, #3]
 801795c:	4613      	mov	r3, r2
 801795e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8017960:	2300      	movs	r3, #0
 8017962:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	2b00      	cmp	r3, #0
 8017968:	d101      	bne.n	801796e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801796a:	2300      	movs	r3, #0
 801796c:	e018      	b.n	80179a0 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801796e:	78fb      	ldrb	r3, [r7, #3]
 8017970:	73bb      	strb	r3, [r7, #14]
 8017972:	e010      	b.n	8017996 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8017974:	7bbb      	ldrb	r3, [r7, #14]
 8017976:	005b      	lsls	r3, r3, #1
 8017978:	687a      	ldr	r2, [r7, #4]
 801797a:	4413      	add	r3, r2
 801797c:	881b      	ldrh	r3, [r3, #0]
 801797e:	2110      	movs	r1, #16
 8017980:	4618      	mov	r0, r3
 8017982:	f7ff fef9 	bl	8017778 <CountChannels>
 8017986:	4603      	mov	r3, r0
 8017988:	461a      	mov	r2, r3
 801798a:	7bfb      	ldrb	r3, [r7, #15]
 801798c:	4413      	add	r3, r2
 801798e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017990:	7bbb      	ldrb	r3, [r7, #14]
 8017992:	3301      	adds	r3, #1
 8017994:	73bb      	strb	r3, [r7, #14]
 8017996:	7bba      	ldrb	r2, [r7, #14]
 8017998:	78bb      	ldrb	r3, [r7, #2]
 801799a:	429a      	cmp	r2, r3
 801799c:	d3ea      	bcc.n	8017974 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801799e:	7bfb      	ldrb	r3, [r7, #15]
}
 80179a0:	4618      	mov	r0, r3
 80179a2:	3710      	adds	r7, #16
 80179a4:	46bd      	mov	sp, r7
 80179a6:	bd80      	pop	{r7, pc}

080179a8 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80179a8:	b480      	push	{r7}
 80179aa:	b087      	sub	sp, #28
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	60f8      	str	r0, [r7, #12]
 80179b0:	60b9      	str	r1, [r7, #8]
 80179b2:	4613      	mov	r3, r2
 80179b4:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d016      	beq.n	80179ea <RegionCommonChanMaskCopy+0x42>
 80179bc:	68bb      	ldr	r3, [r7, #8]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d013      	beq.n	80179ea <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80179c2:	2300      	movs	r3, #0
 80179c4:	75fb      	strb	r3, [r7, #23]
 80179c6:	e00c      	b.n	80179e2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80179c8:	7dfb      	ldrb	r3, [r7, #23]
 80179ca:	005b      	lsls	r3, r3, #1
 80179cc:	68ba      	ldr	r2, [r7, #8]
 80179ce:	441a      	add	r2, r3
 80179d0:	7dfb      	ldrb	r3, [r7, #23]
 80179d2:	005b      	lsls	r3, r3, #1
 80179d4:	68f9      	ldr	r1, [r7, #12]
 80179d6:	440b      	add	r3, r1
 80179d8:	8812      	ldrh	r2, [r2, #0]
 80179da:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80179dc:	7dfb      	ldrb	r3, [r7, #23]
 80179de:	3301      	adds	r3, #1
 80179e0:	75fb      	strb	r3, [r7, #23]
 80179e2:	7dfa      	ldrb	r2, [r7, #23]
 80179e4:	79fb      	ldrb	r3, [r7, #7]
 80179e6:	429a      	cmp	r2, r3
 80179e8:	d3ee      	bcc.n	80179c8 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80179ea:	bf00      	nop
 80179ec:	371c      	adds	r7, #28
 80179ee:	46bd      	mov	sp, r7
 80179f0:	bc80      	pop	{r7}
 80179f2:	4770      	bx	lr

080179f4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80179f4:	b082      	sub	sp, #8
 80179f6:	b580      	push	{r7, lr}
 80179f8:	b086      	sub	sp, #24
 80179fa:	af00      	add	r7, sp, #0
 80179fc:	60f8      	str	r0, [r7, #12]
 80179fe:	60b9      	str	r1, [r7, #8]
 8017a00:	627b      	str	r3, [r7, #36]	; 0x24
 8017a02:	4613      	mov	r3, r2
 8017a04:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017a06:	79f9      	ldrb	r1, [r7, #7]
 8017a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017a0c:	cb0c      	ldmia	r3, {r2, r3}
 8017a0e:	68f8      	ldr	r0, [r7, #12]
 8017a10:	f7ff fd8c 	bl	801752c <GetDutyCycle>
 8017a14:	4603      	mov	r3, r0
 8017a16:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	68da      	ldr	r2, [r3, #12]
 8017a1c:	8afb      	ldrh	r3, [r7, #22]
 8017a1e:	68b9      	ldr	r1, [r7, #8]
 8017a20:	fb01 f303 	mul.w	r3, r1, r3
 8017a24:	429a      	cmp	r2, r3
 8017a26:	d909      	bls.n	8017a3c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	68da      	ldr	r2, [r3, #12]
 8017a2c:	8afb      	ldrh	r3, [r7, #22]
 8017a2e:	68b9      	ldr	r1, [r7, #8]
 8017a30:	fb01 f303 	mul.w	r3, r1, r3
 8017a34:	1ad2      	subs	r2, r2, r3
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8017a3a:	e002      	b.n	8017a42 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	2200      	movs	r2, #0
 8017a40:	60da      	str	r2, [r3, #12]
}
 8017a42:	bf00      	nop
 8017a44:	3718      	adds	r7, #24
 8017a46:	46bd      	mov	sp, r7
 8017a48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8017a4c:	b002      	add	sp, #8
 8017a4e:	4770      	bx	lr

08017a50 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8017a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a52:	b08f      	sub	sp, #60	; 0x3c
 8017a54:	af04      	add	r7, sp, #16
 8017a56:	6039      	str	r1, [r7, #0]
 8017a58:	4611      	mov	r1, r2
 8017a5a:	461a      	mov	r2, r3
 8017a5c:	4603      	mov	r3, r0
 8017a5e:	71fb      	strb	r3, [r7, #7]
 8017a60:	460b      	mov	r3, r1
 8017a62:	71bb      	strb	r3, [r7, #6]
 8017a64:	4613      	mov	r3, r2
 8017a66:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8017a68:	f04f 33ff 	mov.w	r3, #4294967295
 8017a6c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017a6e:	f006 f93d 	bl	801dcec <UTIL_TIMER_GetCurrentTime>
 8017a72:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8017a74:	2300      	movs	r3, #0
 8017a76:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8017a78:	2301      	movs	r3, #1
 8017a7a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8017a7c:	2300      	movs	r3, #0
 8017a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8017a82:	2300      	movs	r3, #0
 8017a84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8017a88:	e0ba      	b.n	8017c00 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8017a8a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017a8e:	4613      	mov	r3, r2
 8017a90:	005b      	lsls	r3, r3, #1
 8017a92:	4413      	add	r3, r2
 8017a94:	00db      	lsls	r3, r3, #3
 8017a96:	461a      	mov	r2, r3
 8017a98:	683b      	ldr	r3, [r7, #0]
 8017a9a:	189c      	adds	r4, r3, r2
 8017a9c:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8017aa0:	797a      	ldrb	r2, [r7, #5]
 8017aa2:	79fd      	ldrb	r5, [r7, #7]
 8017aa4:	69fb      	ldr	r3, [r7, #28]
 8017aa6:	9302      	str	r3, [sp, #8]
 8017aa8:	46ec      	mov	ip, sp
 8017aaa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017aae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017ab2:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017ab6:	4633      	mov	r3, r6
 8017ab8:	4629      	mov	r1, r5
 8017aba:	4620      	mov	r0, r4
 8017abc:	f7ff fe22 	bl	8017704 <UpdateTimeCredits>
 8017ac0:	4603      	mov	r3, r0
 8017ac2:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8017ac4:	8afa      	ldrh	r2, [r7, #22]
 8017ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017ac8:	fb02 f303 	mul.w	r3, r2, r3
 8017acc:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8017ace:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017ad2:	4613      	mov	r3, r2
 8017ad4:	005b      	lsls	r3, r3, #1
 8017ad6:	4413      	add	r3, r2
 8017ad8:	00db      	lsls	r3, r3, #3
 8017ada:	461a      	mov	r2, r3
 8017adc:	683b      	ldr	r3, [r7, #0]
 8017ade:	4413      	add	r3, r2
 8017ae0:	68db      	ldr	r3, [r3, #12]
 8017ae2:	69ba      	ldr	r2, [r7, #24]
 8017ae4:	429a      	cmp	r2, r3
 8017ae6:	d308      	bcc.n	8017afa <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017ae8:	797b      	ldrb	r3, [r7, #5]
 8017aea:	f083 0301 	eor.w	r3, r3, #1
 8017aee:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d013      	beq.n	8017b1c <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017af4:	79fb      	ldrb	r3, [r7, #7]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d010      	beq.n	8017b1c <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8017afa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017afe:	4613      	mov	r3, r2
 8017b00:	005b      	lsls	r3, r3, #1
 8017b02:	4413      	add	r3, r2
 8017b04:	00db      	lsls	r3, r3, #3
 8017b06:	461a      	mov	r2, r3
 8017b08:	683b      	ldr	r3, [r7, #0]
 8017b0a:	4413      	add	r3, r2
 8017b0c:	2201      	movs	r2, #1
 8017b0e:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017b10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017b14:	3301      	adds	r3, #1
 8017b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8017b1a:	e06c      	b.n	8017bf6 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8017b1c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017b20:	4613      	mov	r3, r2
 8017b22:	005b      	lsls	r3, r3, #1
 8017b24:	4413      	add	r3, r2
 8017b26:	00db      	lsls	r3, r3, #3
 8017b28:	461a      	mov	r2, r3
 8017b2a:	683b      	ldr	r3, [r7, #0]
 8017b2c:	4413      	add	r3, r2
 8017b2e:	2200      	movs	r2, #0
 8017b30:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8017b32:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017b36:	4613      	mov	r3, r2
 8017b38:	005b      	lsls	r3, r3, #1
 8017b3a:	4413      	add	r3, r2
 8017b3c:	00db      	lsls	r3, r3, #3
 8017b3e:	461a      	mov	r2, r3
 8017b40:	683b      	ldr	r3, [r7, #0]
 8017b42:	4413      	add	r3, r2
 8017b44:	691b      	ldr	r3, [r3, #16]
 8017b46:	69ba      	ldr	r2, [r7, #24]
 8017b48:	429a      	cmp	r2, r3
 8017b4a:	d215      	bcs.n	8017b78 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8017b4c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017b50:	4613      	mov	r3, r2
 8017b52:	005b      	lsls	r3, r3, #1
 8017b54:	4413      	add	r3, r2
 8017b56:	00db      	lsls	r3, r3, #3
 8017b58:	461a      	mov	r2, r3
 8017b5a:	683b      	ldr	r3, [r7, #0]
 8017b5c:	4413      	add	r3, r2
 8017b5e:	68db      	ldr	r3, [r3, #12]
 8017b60:	69ba      	ldr	r2, [r7, #24]
 8017b62:	1ad3      	subs	r3, r2, r3
 8017b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b66:	4293      	cmp	r3, r2
 8017b68:	bf28      	it	cs
 8017b6a:	4613      	movcs	r3, r2
 8017b6c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8017b6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017b72:	3301      	adds	r3, #1
 8017b74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8017b78:	79fb      	ldrb	r3, [r7, #7]
 8017b7a:	f083 0301 	eor.w	r3, r3, #1
 8017b7e:	b2db      	uxtb	r3, r3
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d038      	beq.n	8017bf6 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8017b84:	2300      	movs	r3, #0
 8017b86:	60fb      	str	r3, [r7, #12]
 8017b88:	2300      	movs	r3, #0
 8017b8a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017b8c:	8afb      	ldrh	r3, [r7, #22]
 8017b8e:	2b64      	cmp	r3, #100	; 0x64
 8017b90:	d103      	bne.n	8017b9a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8017b92:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8017b96:	60fb      	str	r3, [r7, #12]
 8017b98:	e009      	b.n	8017bae <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017b9a:	8afb      	ldrh	r3, [r7, #22]
 8017b9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017ba0:	d103      	bne.n	8017baa <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8017ba2:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8017ba6:	60fb      	str	r3, [r7, #12]
 8017ba8:	e001      	b.n	8017bae <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017baa:	4b1e      	ldr	r3, [pc, #120]	; (8017c24 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8017bac:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017bb0:	4a1c      	ldr	r2, [pc, #112]	; (8017c24 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8017bb2:	4293      	cmp	r3, r2
 8017bb4:	d90e      	bls.n	8017bd4 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8017bb6:	68fa      	ldr	r2, [r7, #12]
 8017bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017bba:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8017bbe:	3b30      	subs	r3, #48	; 0x30
 8017bc0:	4919      	ldr	r1, [pc, #100]	; (8017c28 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8017bc2:	fba1 1303 	umull	r1, r3, r1, r3
 8017bc6:	0c1b      	lsrs	r3, r3, #16
 8017bc8:	3301      	adds	r3, #1
 8017bca:	4918      	ldr	r1, [pc, #96]	; (8017c2c <RegionCommonUpdateBandTimeOff+0x1dc>)
 8017bcc:	fb01 f303 	mul.w	r3, r1, r3
 8017bd0:	4413      	add	r3, r2
 8017bd2:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8017bd4:	f107 000c 	add.w	r0, r7, #12
 8017bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017bda:	9300      	str	r3, [sp, #0]
 8017bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017bde:	f107 020c 	add.w	r2, r7, #12
 8017be2:	ca06      	ldmia	r2, {r1, r2}
 8017be4:	f005 f999 	bl	801cf1a <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8017be8:	f107 030c 	add.w	r3, r7, #12
 8017bec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017bf0:	f005 fa52 	bl	801d098 <SysTimeToMs>
 8017bf4:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8017bf6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017bfa:	3301      	adds	r3, #1
 8017bfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8017c00:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017c04:	79bb      	ldrb	r3, [r7, #6]
 8017c06:	429a      	cmp	r2, r3
 8017c08:	f4ff af3f 	bcc.w	8017a8a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8017c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d102      	bne.n	8017c1a <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8017c14:	f04f 33ff 	mov.w	r3, #4294967295
 8017c18:	e000      	b.n	8017c1c <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8017c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	372c      	adds	r7, #44	; 0x2c
 8017c20:	46bd      	mov	sp, r7
 8017c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c24:	0001ec30 	.word	0x0001ec30
 8017c28:	c22e4507 	.word	0xc22e4507
 8017c2c:	00015180 	.word	0x00015180

08017c30 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8017c30:	b480      	push	{r7}
 8017c32:	b085      	sub	sp, #20
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	6078      	str	r0, [r7, #4]
 8017c38:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	781b      	ldrb	r3, [r3, #0]
 8017c42:	2b03      	cmp	r3, #3
 8017c44:	d13f      	bne.n	8017cc6 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	3301      	adds	r3, #1
 8017c4a:	781b      	ldrb	r3, [r3, #0]
 8017c4c:	b25a      	sxtb	r2, r3
 8017c4e:	683b      	ldr	r3, [r7, #0]
 8017c50:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8017c52:	683b      	ldr	r3, [r7, #0]
 8017c54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017c58:	f003 030f 	and.w	r3, r3, #15
 8017c5c:	b25a      	sxtb	r2, r3
 8017c5e:	683b      	ldr	r3, [r7, #0]
 8017c60:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8017c62:	683b      	ldr	r3, [r7, #0]
 8017c64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017c68:	b2db      	uxtb	r3, r3
 8017c6a:	091b      	lsrs	r3, r3, #4
 8017c6c:	b2db      	uxtb	r3, r3
 8017c6e:	b25a      	sxtb	r2, r3
 8017c70:	683b      	ldr	r3, [r7, #0]
 8017c72:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	3302      	adds	r3, #2
 8017c78:	781b      	ldrb	r3, [r3, #0]
 8017c7a:	b29a      	uxth	r2, r3
 8017c7c:	683b      	ldr	r3, [r7, #0]
 8017c7e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017c80:	683b      	ldr	r3, [r7, #0]
 8017c82:	889b      	ldrh	r3, [r3, #4]
 8017c84:	b21a      	sxth	r2, r3
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	3303      	adds	r3, #3
 8017c8a:	781b      	ldrb	r3, [r3, #0]
 8017c8c:	021b      	lsls	r3, r3, #8
 8017c8e:	b21b      	sxth	r3, r3
 8017c90:	4313      	orrs	r3, r2
 8017c92:	b21b      	sxth	r3, r3
 8017c94:	b29a      	uxth	r2, r3
 8017c96:	683b      	ldr	r3, [r7, #0]
 8017c98:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	791a      	ldrb	r2, [r3, #4]
 8017c9e:	683b      	ldr	r3, [r7, #0]
 8017ca0:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8017ca2:	683b      	ldr	r3, [r7, #0]
 8017ca4:	781b      	ldrb	r3, [r3, #0]
 8017ca6:	091b      	lsrs	r3, r3, #4
 8017ca8:	b2db      	uxtb	r3, r3
 8017caa:	f003 0307 	and.w	r3, r3, #7
 8017cae:	b2da      	uxtb	r2, r3
 8017cb0:	683b      	ldr	r3, [r7, #0]
 8017cb2:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017cb4:	683b      	ldr	r3, [r7, #0]
 8017cb6:	781b      	ldrb	r3, [r3, #0]
 8017cb8:	f003 030f 	and.w	r3, r3, #15
 8017cbc:	b2da      	uxtb	r2, r3
 8017cbe:	683b      	ldr	r3, [r7, #0]
 8017cc0:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8017cc2:	2305      	movs	r3, #5
 8017cc4:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8017cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cc8:	4618      	mov	r0, r3
 8017cca:	3714      	adds	r7, #20
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	bc80      	pop	{r7}
 8017cd0:	4770      	bx	lr

08017cd2 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017cd2:	b5b0      	push	{r4, r5, r7, lr}
 8017cd4:	b088      	sub	sp, #32
 8017cd6:	af02      	add	r7, sp, #8
 8017cd8:	60f8      	str	r0, [r7, #12]
 8017cda:	60b9      	str	r1, [r7, #8]
 8017cdc:	607a      	str	r2, [r7, #4]
 8017cde:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	791b      	ldrb	r3, [r3, #4]
 8017ce4:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	799b      	ldrb	r3, [r3, #6]
 8017cea:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	79db      	ldrb	r3, [r3, #7]
 8017cf0:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	7a1b      	ldrb	r3, [r3, #8]
 8017cf6:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	795b      	ldrb	r3, [r3, #5]
 8017cfc:	f083 0301 	eor.w	r3, r3, #1
 8017d00:	b2db      	uxtb	r3, r3
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d008      	beq.n	8017d18 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	7adb      	ldrb	r3, [r3, #11]
 8017d0a:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	7a5b      	ldrb	r3, [r3, #9]
 8017d10:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	7a9b      	ldrb	r3, [r3, #10]
 8017d16:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8017d18:	7dfb      	ldrb	r3, [r7, #23]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d04a      	beq.n	8017db4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8017d1e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8017d22:	2b0f      	cmp	r3, #15
 8017d24:	d103      	bne.n	8017d2e <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	7a5b      	ldrb	r3, [r3, #9]
 8017d2a:	75bb      	strb	r3, [r7, #22]
 8017d2c:	e01d      	b.n	8017d6a <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	7b18      	ldrb	r0, [r3, #12]
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	6919      	ldr	r1, [r3, #16]
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8017d42:	68fa      	ldr	r2, [r7, #12]
 8017d44:	6992      	ldr	r2, [r2, #24]
 8017d46:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8017d4a:	9201      	str	r2, [sp, #4]
 8017d4c:	9300      	str	r3, [sp, #0]
 8017d4e:	462b      	mov	r3, r5
 8017d50:	4622      	mov	r2, r4
 8017d52:	f7ff fd3a 	bl	80177ca <RegionCommonChanVerifyDr>
 8017d56:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8017d58:	f083 0301 	eor.w	r3, r3, #1
 8017d5c:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d003      	beq.n	8017d6a <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8017d62:	7dfb      	ldrb	r3, [r7, #23]
 8017d64:	f023 0302 	bic.w	r3, r3, #2
 8017d68:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8017d6a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8017d6e:	2b0f      	cmp	r3, #15
 8017d70:	d103      	bne.n	8017d7a <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	7a9b      	ldrb	r3, [r3, #10]
 8017d76:	757b      	strb	r3, [r7, #21]
 8017d78:	e01c      	b.n	8017db4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8017d86:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	f7ff fd8f 	bl	80178ae <RegionCommonValueInRange>
 8017d90:	4603      	mov	r3, r0
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d10e      	bne.n	8017db4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8017d9c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8017da0:	429a      	cmp	r2, r3
 8017da2:	da03      	bge.n	8017dac <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	7f5b      	ldrb	r3, [r3, #29]
 8017da8:	757b      	strb	r3, [r7, #21]
 8017daa:	e003      	b.n	8017db4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8017dac:	7dfb      	ldrb	r3, [r7, #23]
 8017dae:	f023 0304 	bic.w	r3, r3, #4
 8017db2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8017db4:	7dfb      	ldrb	r3, [r7, #23]
 8017db6:	2b07      	cmp	r3, #7
 8017db8:	d105      	bne.n	8017dc6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8017dba:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d101      	bne.n	8017dc6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8017dc2:	2301      	movs	r3, #1
 8017dc4:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8017dc6:	68bb      	ldr	r3, [r7, #8]
 8017dc8:	7dba      	ldrb	r2, [r7, #22]
 8017dca:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	7d7a      	ldrb	r2, [r7, #21]
 8017dd0:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017dd2:	7d3a      	ldrb	r2, [r7, #20]
 8017dd4:	683b      	ldr	r3, [r7, #0]
 8017dd6:	701a      	strb	r2, [r3, #0]

    return status;
 8017dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8017dda:	4618      	mov	r0, r3
 8017ddc:	3718      	adds	r7, #24
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017de4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8017de4:	b480      	push	{r7}
 8017de6:	b083      	sub	sp, #12
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	4603      	mov	r3, r0
 8017dec:	6039      	str	r1, [r7, #0]
 8017dee:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8017df0:	79fb      	ldrb	r3, [r7, #7]
 8017df2:	4a06      	ldr	r2, [pc, #24]	; (8017e0c <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8017df4:	fa02 f303 	lsl.w	r3, r2, r3
 8017df8:	461a      	mov	r2, r3
 8017dfa:	683b      	ldr	r3, [r7, #0]
 8017dfc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017e00:	4618      	mov	r0, r3
 8017e02:	370c      	adds	r7, #12
 8017e04:	46bd      	mov	sp, r7
 8017e06:	bc80      	pop	{r7}
 8017e08:	4770      	bx	lr
 8017e0a:	bf00      	nop
 8017e0c:	000f4240 	.word	0x000f4240

08017e10 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8017e10:	b480      	push	{r7}
 8017e12:	b083      	sub	sp, #12
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	4603      	mov	r3, r0
 8017e18:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8017e1a:	79fb      	ldrb	r3, [r7, #7]
 8017e1c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017e20:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017e24:	4618      	mov	r0, r3
 8017e26:	370c      	adds	r7, #12
 8017e28:	46bd      	mov	sp, r7
 8017e2a:	bc80      	pop	{r7}
 8017e2c:	4770      	bx	lr
	...

08017e30 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8017e30:	b480      	push	{r7}
 8017e32:	b085      	sub	sp, #20
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	60f8      	str	r0, [r7, #12]
 8017e38:	607a      	str	r2, [r7, #4]
 8017e3a:	603b      	str	r3, [r7, #0]
 8017e3c:	460b      	mov	r3, r1
 8017e3e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8017e40:	7afa      	ldrb	r2, [r7, #11]
 8017e42:	7afb      	ldrb	r3, [r7, #11]
 8017e44:	3b04      	subs	r3, #4
 8017e46:	4619      	mov	r1, r3
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	fb03 f101 	mul.w	r1, r3, r1
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017e54:	fb00 f303 	mul.w	r3, r0, r3
 8017e58:	440b      	add	r3, r1
 8017e5a:	005b      	lsls	r3, r3, #1
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d013      	beq.n	8017e88 <RegionCommonComputeRxWindowParameters+0x58>
 8017e60:	7afb      	ldrb	r3, [r7, #11]
 8017e62:	3b04      	subs	r3, #4
 8017e64:	4619      	mov	r1, r3
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	fb03 f101 	mul.w	r1, r3, r1
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017e72:	fb00 f303 	mul.w	r3, r0, r3
 8017e76:	440b      	add	r3, r1
 8017e78:	0059      	lsls	r1, r3, #1
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	440b      	add	r3, r1
 8017e7e:	1e59      	subs	r1, r3, #1
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	fbb1 f3f3 	udiv	r3, r1, r3
 8017e86:	e00f      	b.n	8017ea8 <RegionCommonComputeRxWindowParameters+0x78>
 8017e88:	7afb      	ldrb	r3, [r7, #11]
 8017e8a:	3b04      	subs	r3, #4
 8017e8c:	4619      	mov	r1, r3
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	fb03 f101 	mul.w	r1, r3, r1
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017e9a:	fb00 f303 	mul.w	r3, r0, r3
 8017e9e:	440b      	add	r3, r1
 8017ea0:	0059      	lsls	r1, r3, #1
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8017ea8:	429a      	cmp	r2, r3
 8017eaa:	bf38      	it	cc
 8017eac:	461a      	movcc	r2, r3
 8017eae:	69bb      	ldr	r3, [r7, #24]
 8017eb0:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	009b      	lsls	r3, r3, #2
 8017eb6:	4619      	mov	r1, r3
 8017eb8:	69bb      	ldr	r3, [r7, #24]
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	68fa      	ldr	r2, [r7, #12]
 8017ebe:	fb02 f303 	mul.w	r3, r2, r3
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d007      	beq.n	8017ed6 <RegionCommonComputeRxWindowParameters+0xa6>
 8017ec6:	69bb      	ldr	r3, [r7, #24]
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	68fa      	ldr	r2, [r7, #12]
 8017ecc:	fb02 f303 	mul.w	r3, r2, r3
 8017ed0:	3301      	adds	r3, #1
 8017ed2:	085b      	lsrs	r3, r3, #1
 8017ed4:	e005      	b.n	8017ee2 <RegionCommonComputeRxWindowParameters+0xb2>
 8017ed6:	69bb      	ldr	r3, [r7, #24]
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	68fa      	ldr	r2, [r7, #12]
 8017edc:	fb02 f303 	mul.w	r3, r2, r3
 8017ee0:	085b      	lsrs	r3, r3, #1
 8017ee2:	1acb      	subs	r3, r1, r3
 8017ee4:	683a      	ldr	r2, [r7, #0]
 8017ee6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017eea:	fb01 f202 	mul.w	r2, r1, r2
 8017eee:	1a9b      	subs	r3, r3, r2
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	dd27      	ble.n	8017f44 <RegionCommonComputeRxWindowParameters+0x114>
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	009b      	lsls	r3, r3, #2
 8017ef8:	4619      	mov	r1, r3
 8017efa:	69bb      	ldr	r3, [r7, #24]
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	68fa      	ldr	r2, [r7, #12]
 8017f00:	fb02 f303 	mul.w	r3, r2, r3
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d007      	beq.n	8017f18 <RegionCommonComputeRxWindowParameters+0xe8>
 8017f08:	69bb      	ldr	r3, [r7, #24]
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	68fa      	ldr	r2, [r7, #12]
 8017f0e:	fb02 f303 	mul.w	r3, r2, r3
 8017f12:	3301      	adds	r3, #1
 8017f14:	085b      	lsrs	r3, r3, #1
 8017f16:	e005      	b.n	8017f24 <RegionCommonComputeRxWindowParameters+0xf4>
 8017f18:	69bb      	ldr	r3, [r7, #24]
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	68fa      	ldr	r2, [r7, #12]
 8017f1e:	fb02 f303 	mul.w	r3, r2, r3
 8017f22:	085b      	lsrs	r3, r3, #1
 8017f24:	1acb      	subs	r3, r1, r3
 8017f26:	683a      	ldr	r2, [r7, #0]
 8017f28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017f2c:	fb01 f202 	mul.w	r2, r1, r2
 8017f30:	1a9b      	subs	r3, r3, r2
 8017f32:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8017f36:	4a19      	ldr	r2, [pc, #100]	; (8017f9c <RegionCommonComputeRxWindowParameters+0x16c>)
 8017f38:	fb82 1203 	smull	r1, r2, r2, r3
 8017f3c:	1192      	asrs	r2, r2, #6
 8017f3e:	17db      	asrs	r3, r3, #31
 8017f40:	1ad3      	subs	r3, r2, r3
 8017f42:	e024      	b.n	8017f8e <RegionCommonComputeRxWindowParameters+0x15e>
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	009b      	lsls	r3, r3, #2
 8017f48:	4619      	mov	r1, r3
 8017f4a:	69bb      	ldr	r3, [r7, #24]
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	68fa      	ldr	r2, [r7, #12]
 8017f50:	fb02 f303 	mul.w	r3, r2, r3
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d007      	beq.n	8017f68 <RegionCommonComputeRxWindowParameters+0x138>
 8017f58:	69bb      	ldr	r3, [r7, #24]
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	68fa      	ldr	r2, [r7, #12]
 8017f5e:	fb02 f303 	mul.w	r3, r2, r3
 8017f62:	3301      	adds	r3, #1
 8017f64:	085b      	lsrs	r3, r3, #1
 8017f66:	e005      	b.n	8017f74 <RegionCommonComputeRxWindowParameters+0x144>
 8017f68:	69bb      	ldr	r3, [r7, #24]
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	68fa      	ldr	r2, [r7, #12]
 8017f6e:	fb02 f303 	mul.w	r3, r2, r3
 8017f72:	085b      	lsrs	r3, r3, #1
 8017f74:	1acb      	subs	r3, r1, r3
 8017f76:	683a      	ldr	r2, [r7, #0]
 8017f78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017f7c:	fb01 f202 	mul.w	r2, r1, r2
 8017f80:	1a9b      	subs	r3, r3, r2
 8017f82:	4a06      	ldr	r2, [pc, #24]	; (8017f9c <RegionCommonComputeRxWindowParameters+0x16c>)
 8017f84:	fb82 1203 	smull	r1, r2, r2, r3
 8017f88:	1192      	asrs	r2, r2, #6
 8017f8a:	17db      	asrs	r3, r3, #31
 8017f8c:	1ad3      	subs	r3, r2, r3
 8017f8e:	69fa      	ldr	r2, [r7, #28]
 8017f90:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8017f92:	bf00      	nop
 8017f94:	3714      	adds	r7, #20
 8017f96:	46bd      	mov	sp, r7
 8017f98:	bc80      	pop	{r7}
 8017f9a:	4770      	bx	lr
 8017f9c:	10624dd3 	.word	0x10624dd3

08017fa0 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b086      	sub	sp, #24
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	60b9      	str	r1, [r7, #8]
 8017faa:	607a      	str	r2, [r7, #4]
 8017fac:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8017fae:	2300      	movs	r3, #0
 8017fb0:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8017fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017fb6:	005b      	lsls	r3, r3, #1
 8017fb8:	4618      	mov	r0, r3
 8017fba:	f7e8 fe69 	bl	8000c90 <__aeabi_ui2f>
 8017fbe:	4603      	mov	r3, r0
 8017fc0:	4619      	mov	r1, r3
 8017fc2:	68b8      	ldr	r0, [r7, #8]
 8017fc4:	f7e8 fdb2 	bl	8000b2c <__aeabi_fsub>
 8017fc8:	4603      	mov	r3, r0
 8017fca:	6879      	ldr	r1, [r7, #4]
 8017fcc:	4618      	mov	r0, r3
 8017fce:	f7e8 fdad 	bl	8000b2c <__aeabi_fsub>
 8017fd2:	4603      	mov	r3, r0
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	f7e8 fa3b 	bl	8000450 <__aeabi_f2d>
 8017fda:	4602      	mov	r2, r0
 8017fdc:	460b      	mov	r3, r1
 8017fde:	4610      	mov	r0, r2
 8017fe0:	4619      	mov	r1, r3
 8017fe2:	f006 fa7d 	bl	801e4e0 <floor>
 8017fe6:	4602      	mov	r2, r0
 8017fe8:	460b      	mov	r3, r1
 8017fea:	4610      	mov	r0, r2
 8017fec:	4619      	mov	r1, r3
 8017fee:	f7e8 fd21 	bl	8000a34 <__aeabi_d2iz>
 8017ff2:	4603      	mov	r3, r0
 8017ff4:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8017ff6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	3718      	adds	r7, #24
 8017ffe:	46bd      	mov	sp, r7
 8018000:	bd80      	pop	{r7, pc}

08018002 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8018002:	b590      	push	{r4, r7, lr}
 8018004:	b087      	sub	sp, #28
 8018006:	af00      	add	r7, sp, #0
 8018008:	60f8      	str	r0, [r7, #12]
 801800a:	60b9      	str	r1, [r7, #8]
 801800c:	607a      	str	r2, [r7, #4]
 801800e:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8018010:	2300      	movs	r3, #0
 8018012:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8018014:	2300      	movs	r3, #0
 8018016:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018018:	2300      	movs	r3, #0
 801801a:	757b      	strb	r3, [r7, #21]
 801801c:	2300      	movs	r3, #0
 801801e:	753b      	strb	r3, [r7, #20]
 8018020:	e09c      	b.n	801815c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018022:	2300      	movs	r3, #0
 8018024:	74fb      	strb	r3, [r7, #19]
 8018026:	e08f      	b.n	8018148 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	685a      	ldr	r2, [r3, #4]
 801802c:	7d3b      	ldrb	r3, [r7, #20]
 801802e:	005b      	lsls	r3, r3, #1
 8018030:	4413      	add	r3, r2
 8018032:	881b      	ldrh	r3, [r3, #0]
 8018034:	461a      	mov	r2, r3
 8018036:	7cfb      	ldrb	r3, [r7, #19]
 8018038:	fa42 f303 	asr.w	r3, r2, r3
 801803c:	f003 0301 	and.w	r3, r3, #1
 8018040:	2b00      	cmp	r3, #0
 8018042:	d07e      	beq.n	8018142 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	689a      	ldr	r2, [r3, #8]
 8018048:	7d79      	ldrb	r1, [r7, #21]
 801804a:	7cfb      	ldrb	r3, [r7, #19]
 801804c:	440b      	add	r3, r1
 801804e:	4619      	mov	r1, r3
 8018050:	460b      	mov	r3, r1
 8018052:	005b      	lsls	r3, r3, #1
 8018054:	440b      	add	r3, r1
 8018056:	009b      	lsls	r3, r3, #2
 8018058:	4413      	add	r3, r2
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d06b      	beq.n	8018138 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	781b      	ldrb	r3, [r3, #0]
 8018064:	f083 0301 	eor.w	r3, r3, #1
 8018068:	b2db      	uxtb	r3, r3
 801806a:	2b00      	cmp	r3, #0
 801806c:	d011      	beq.n	8018092 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018072:	2b00      	cmp	r3, #0
 8018074:	d00d      	beq.n	8018092 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	695a      	ldr	r2, [r3, #20]
 801807a:	7d3b      	ldrb	r3, [r7, #20]
 801807c:	005b      	lsls	r3, r3, #1
 801807e:	4413      	add	r3, r2
 8018080:	881b      	ldrh	r3, [r3, #0]
 8018082:	461a      	mov	r2, r3
 8018084:	7cfb      	ldrb	r3, [r7, #19]
 8018086:	fa42 f303 	asr.w	r3, r2, r3
 801808a:	f003 0301 	and.w	r3, r3, #1
 801808e:	2b00      	cmp	r3, #0
 8018090:	d054      	beq.n	801813c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	785b      	ldrb	r3, [r3, #1]
 8018096:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	689a      	ldr	r2, [r3, #8]
 801809c:	7d79      	ldrb	r1, [r7, #21]
 801809e:	7cfb      	ldrb	r3, [r7, #19]
 80180a0:	440b      	add	r3, r1
 80180a2:	4619      	mov	r1, r3
 80180a4:	460b      	mov	r3, r1
 80180a6:	005b      	lsls	r3, r3, #1
 80180a8:	440b      	add	r3, r1
 80180aa:	009b      	lsls	r3, r3, #2
 80180ac:	4413      	add	r3, r2
 80180ae:	7a1b      	ldrb	r3, [r3, #8]
 80180b0:	f343 0303 	sbfx	r3, r3, #0, #4
 80180b4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80180b6:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	689a      	ldr	r2, [r3, #8]
 80180bc:	7d79      	ldrb	r1, [r7, #21]
 80180be:	7cfb      	ldrb	r3, [r7, #19]
 80180c0:	440b      	add	r3, r1
 80180c2:	4619      	mov	r1, r3
 80180c4:	460b      	mov	r3, r1
 80180c6:	005b      	lsls	r3, r3, #1
 80180c8:	440b      	add	r3, r1
 80180ca:	009b      	lsls	r3, r3, #2
 80180cc:	4413      	add	r3, r2
 80180ce:	7a1b      	ldrb	r3, [r3, #8]
 80180d0:	f343 1303 	sbfx	r3, r3, #4, #4
 80180d4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80180d6:	461a      	mov	r2, r3
 80180d8:	4621      	mov	r1, r4
 80180da:	f7ff fbe8 	bl	80178ae <RegionCommonValueInRange>
 80180de:	4603      	mov	r3, r0
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d02d      	beq.n	8018140 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80180e4:	68fb      	ldr	r3, [r7, #12]
 80180e6:	68da      	ldr	r2, [r3, #12]
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	6899      	ldr	r1, [r3, #8]
 80180ec:	7d78      	ldrb	r0, [r7, #21]
 80180ee:	7cfb      	ldrb	r3, [r7, #19]
 80180f0:	4403      	add	r3, r0
 80180f2:	4618      	mov	r0, r3
 80180f4:	4603      	mov	r3, r0
 80180f6:	005b      	lsls	r3, r3, #1
 80180f8:	4403      	add	r3, r0
 80180fa:	009b      	lsls	r3, r3, #2
 80180fc:	440b      	add	r3, r1
 80180fe:	7a5b      	ldrb	r3, [r3, #9]
 8018100:	4619      	mov	r1, r3
 8018102:	460b      	mov	r3, r1
 8018104:	005b      	lsls	r3, r3, #1
 8018106:	440b      	add	r3, r1
 8018108:	00db      	lsls	r3, r3, #3
 801810a:	4413      	add	r3, r2
 801810c:	7d1b      	ldrb	r3, [r3, #20]
 801810e:	f083 0301 	eor.w	r3, r3, #1
 8018112:	b2db      	uxtb	r3, r3
 8018114:	2b00      	cmp	r3, #0
 8018116:	d003      	beq.n	8018120 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8018118:	7dbb      	ldrb	r3, [r7, #22]
 801811a:	3301      	adds	r3, #1
 801811c:	75bb      	strb	r3, [r7, #22]
                    continue;
 801811e:	e010      	b.n	8018142 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8018120:	7dfb      	ldrb	r3, [r7, #23]
 8018122:	1c5a      	adds	r2, r3, #1
 8018124:	75fa      	strb	r2, [r7, #23]
 8018126:	461a      	mov	r2, r3
 8018128:	68bb      	ldr	r3, [r7, #8]
 801812a:	4413      	add	r3, r2
 801812c:	7d79      	ldrb	r1, [r7, #21]
 801812e:	7cfa      	ldrb	r2, [r7, #19]
 8018130:	440a      	add	r2, r1
 8018132:	b2d2      	uxtb	r2, r2
 8018134:	701a      	strb	r2, [r3, #0]
 8018136:	e004      	b.n	8018142 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018138:	bf00      	nop
 801813a:	e002      	b.n	8018142 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 801813c:	bf00      	nop
 801813e:	e000      	b.n	8018142 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018140:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8018142:	7cfb      	ldrb	r3, [r7, #19]
 8018144:	3301      	adds	r3, #1
 8018146:	74fb      	strb	r3, [r7, #19]
 8018148:	7cfb      	ldrb	r3, [r7, #19]
 801814a:	2b0f      	cmp	r3, #15
 801814c:	f67f af6c 	bls.w	8018028 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018150:	7d7b      	ldrb	r3, [r7, #21]
 8018152:	3310      	adds	r3, #16
 8018154:	757b      	strb	r3, [r7, #21]
 8018156:	7d3b      	ldrb	r3, [r7, #20]
 8018158:	3301      	adds	r3, #1
 801815a:	753b      	strb	r3, [r7, #20]
 801815c:	7d7b      	ldrb	r3, [r7, #21]
 801815e:	b29a      	uxth	r2, r3
 8018160:	68fb      	ldr	r3, [r7, #12]
 8018162:	8a1b      	ldrh	r3, [r3, #16]
 8018164:	429a      	cmp	r2, r3
 8018166:	f4ff af5c 	bcc.w	8018022 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	7dfa      	ldrb	r2, [r7, #23]
 801816e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8018170:	683b      	ldr	r3, [r7, #0]
 8018172:	7dba      	ldrb	r2, [r7, #22]
 8018174:	701a      	strb	r2, [r3, #0]
}
 8018176:	bf00      	nop
 8018178:	371c      	adds	r7, #28
 801817a:	46bd      	mov	sp, r7
 801817c:	bd90      	pop	{r4, r7, pc}

0801817e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801817e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018180:	b08b      	sub	sp, #44	; 0x2c
 8018182:	af04      	add	r7, sp, #16
 8018184:	60f8      	str	r0, [r7, #12]
 8018186:	60b9      	str	r1, [r7, #8]
 8018188:	607a      	str	r2, [r7, #4]
 801818a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801818c:	68fb      	ldr	r3, [r7, #12]
 801818e:	685b      	ldr	r3, [r3, #4]
 8018190:	4618      	mov	r0, r3
 8018192:	f005 fdbd 	bl	801dd10 <UTIL_TIMER_GetElapsedTime>
 8018196:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	681a      	ldr	r2, [r3, #0]
 801819c:	697b      	ldr	r3, [r7, #20]
 801819e:	1ad2      	subs	r2, r2, r3
 80181a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181a2:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80181a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181a6:	2201      	movs	r2, #1
 80181a8:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80181aa:	683b      	ldr	r3, [r7, #0]
 80181ac:	2200      	movs	r2, #0
 80181ae:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	685b      	ldr	r3, [r3, #4]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d004      	beq.n	80181c2 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80181bc:	697a      	ldr	r2, [r7, #20]
 80181be:	429a      	cmp	r2, r3
 80181c0:	d32b      	bcc.n	801821a <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80181c2:	68bb      	ldr	r3, [r7, #8]
 80181c4:	2200      	movs	r2, #0
 80181c6:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	69db      	ldr	r3, [r3, #28]
 80181cc:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80181d2:	68dd      	ldr	r5, [r3, #12]
 80181d4:	68fb      	ldr	r3, [r7, #12]
 80181d6:	7a5e      	ldrb	r6, [r3, #9]
 80181d8:	68fb      	ldr	r3, [r7, #12]
 80181da:	f893 c008 	ldrb.w	ip, [r3, #8]
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	7d1b      	ldrb	r3, [r3, #20]
 80181e2:	68fa      	ldr	r2, [r7, #12]
 80181e4:	6992      	ldr	r2, [r2, #24]
 80181e6:	9203      	str	r2, [sp, #12]
 80181e8:	68fa      	ldr	r2, [r7, #12]
 80181ea:	f10d 0e04 	add.w	lr, sp, #4
 80181ee:	320c      	adds	r2, #12
 80181f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80181f4:	e88e 0003 	stmia.w	lr, {r0, r1}
 80181f8:	9300      	str	r3, [sp, #0]
 80181fa:	4663      	mov	r3, ip
 80181fc:	4632      	mov	r2, r6
 80181fe:	4629      	mov	r1, r5
 8018200:	4620      	mov	r0, r4
 8018202:	f7ff fc25 	bl	8017a50 <RegionCommonUpdateBandTimeOff>
 8018206:	4602      	mov	r2, r0
 8018208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801820a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	69d8      	ldr	r0, [r3, #28]
 8018210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018212:	683a      	ldr	r2, [r7, #0]
 8018214:	6879      	ldr	r1, [r7, #4]
 8018216:	f7ff fef4 	bl	8018002 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801821a:	683b      	ldr	r3, [r7, #0]
 801821c:	781b      	ldrb	r3, [r3, #0]
 801821e:	2b00      	cmp	r3, #0
 8018220:	d004      	beq.n	801822c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8018222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018224:	2200      	movs	r2, #0
 8018226:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018228:	2300      	movs	r3, #0
 801822a:	e006      	b.n	801823a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 801822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801822e:	781b      	ldrb	r3, [r3, #0]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d001      	beq.n	8018238 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018234:	230b      	movs	r3, #11
 8018236:	e000      	b.n	801823a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018238:	230c      	movs	r3, #12
    }
}
 801823a:	4618      	mov	r0, r3
 801823c:	371c      	adds	r7, #28
 801823e:	46bd      	mov	sp, r7
 8018240:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018242 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8018242:	b5b0      	push	{r4, r5, r7, lr}
 8018244:	b086      	sub	sp, #24
 8018246:	af02      	add	r7, sp, #8
 8018248:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	781b      	ldrb	r3, [r3, #0]
 801824e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	f993 2000 	ldrsb.w	r2, [r3]
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801825c:	429a      	cmp	r2, r3
 801825e:	d103      	bne.n	8018268 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018266:	e026      	b.n	80182b6 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8018268:	7bfb      	ldrb	r3, [r7, #15]
 801826a:	3b01      	subs	r3, #1
 801826c:	b2db      	uxtb	r3, r3
 801826e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018276:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801827a:	429a      	cmp	r2, r3
 801827c:	d019      	beq.n	80182b2 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	78d8      	ldrb	r0, [r3, #3]
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	6859      	ldr	r1, [r3, #4]
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	f993 5002 	ldrsb.w	r5, [r3, #2]
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018292:	687a      	ldr	r2, [r7, #4]
 8018294:	6892      	ldr	r2, [r2, #8]
 8018296:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801829a:	9201      	str	r2, [sp, #4]
 801829c:	9300      	str	r3, [sp, #0]
 801829e:	462b      	mov	r3, r5
 80182a0:	4622      	mov	r2, r4
 80182a2:	f7ff fa92 	bl	80177ca <RegionCommonChanVerifyDr>
 80182a6:	4603      	mov	r3, r0
 80182a8:	f083 0301 	eor.w	r3, r3, #1
 80182ac:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d1da      	bne.n	8018268 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80182b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80182b6:	4618      	mov	r0, r3
 80182b8:	3710      	adds	r7, #16
 80182ba:	46bd      	mov	sp, r7
 80182bc:	bdb0      	pop	{r4, r5, r7, pc}

080182be <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80182be:	b480      	push	{r7}
 80182c0:	b083      	sub	sp, #12
 80182c2:	af00      	add	r7, sp, #0
 80182c4:	4603      	mov	r3, r0
 80182c6:	460a      	mov	r2, r1
 80182c8:	71fb      	strb	r3, [r7, #7]
 80182ca:	4613      	mov	r3, r2
 80182cc:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80182ce:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80182d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80182d6:	4293      	cmp	r3, r2
 80182d8:	bfb8      	it	lt
 80182da:	4613      	movlt	r3, r2
 80182dc:	b25b      	sxtb	r3, r3
}
 80182de:	4618      	mov	r0, r3
 80182e0:	370c      	adds	r7, #12
 80182e2:	46bd      	mov	sp, r7
 80182e4:	bc80      	pop	{r7}
 80182e6:	4770      	bx	lr

080182e8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80182e8:	b480      	push	{r7}
 80182ea:	b083      	sub	sp, #12
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	6078      	str	r0, [r7, #4]
 80182f0:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	009b      	lsls	r3, r3, #2
 80182f6:	683a      	ldr	r2, [r7, #0]
 80182f8:	4413      	add	r3, r2
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	4a07      	ldr	r2, [pc, #28]	; (801831c <RegionCommonGetBandwidth+0x34>)
 80182fe:	4293      	cmp	r3, r2
 8018300:	d004      	beq.n	801830c <RegionCommonGetBandwidth+0x24>
 8018302:	4a07      	ldr	r2, [pc, #28]	; (8018320 <RegionCommonGetBandwidth+0x38>)
 8018304:	4293      	cmp	r3, r2
 8018306:	d003      	beq.n	8018310 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8018308:	2300      	movs	r3, #0
 801830a:	e002      	b.n	8018312 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 801830c:	2301      	movs	r3, #1
 801830e:	e000      	b.n	8018312 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8018310:	2302      	movs	r3, #2
    }
}
 8018312:	4618      	mov	r0, r3
 8018314:	370c      	adds	r7, #12
 8018316:	46bd      	mov	sp, r7
 8018318:	bc80      	pop	{r7}
 801831a:	4770      	bx	lr
 801831c:	0003d090 	.word	0x0003d090
 8018320:	0007a120 	.word	0x0007a120

08018324 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018324:	b580      	push	{r7, lr}
 8018326:	b086      	sub	sp, #24
 8018328:	af04      	add	r7, sp, #16
 801832a:	4603      	mov	r3, r0
 801832c:	6039      	str	r1, [r7, #0]
 801832e:	71fb      	strb	r3, [r7, #7]
 8018330:	4613      	mov	r3, r2
 8018332:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8018334:	79fb      	ldrb	r3, [r7, #7]
 8018336:	2b05      	cmp	r3, #5
 8018338:	d810      	bhi.n	801835c <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801833a:	79fb      	ldrb	r3, [r7, #7]
 801833c:	4a0f      	ldr	r2, [pc, #60]	; (801837c <RegionCommonRxConfigPrint+0x58>)
 801833e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018342:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018346:	9202      	str	r2, [sp, #8]
 8018348:	683a      	ldr	r2, [r7, #0]
 801834a:	9201      	str	r2, [sp, #4]
 801834c:	9300      	str	r3, [sp, #0]
 801834e:	4b0c      	ldr	r3, [pc, #48]	; (8018380 <RegionCommonRxConfigPrint+0x5c>)
 8018350:	2201      	movs	r2, #1
 8018352:	2100      	movs	r1, #0
 8018354:	2002      	movs	r0, #2
 8018356:	f005 fdb9 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801835a:	e00a      	b.n	8018372 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801835c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018360:	9301      	str	r3, [sp, #4]
 8018362:	683b      	ldr	r3, [r7, #0]
 8018364:	9300      	str	r3, [sp, #0]
 8018366:	4b07      	ldr	r3, [pc, #28]	; (8018384 <RegionCommonRxConfigPrint+0x60>)
 8018368:	2201      	movs	r2, #1
 801836a:	2100      	movs	r1, #0
 801836c:	2002      	movs	r0, #2
 801836e:	f005 fdad 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
}
 8018372:	bf00      	nop
 8018374:	3708      	adds	r7, #8
 8018376:	46bd      	mov	sp, r7
 8018378:	bd80      	pop	{r7, pc}
 801837a:	bf00      	nop
 801837c:	20000144 	.word	0x20000144
 8018380:	0801ed98 	.word	0x0801ed98
 8018384:	0801edb8 	.word	0x0801edb8

08018388 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8018388:	b580      	push	{r7, lr}
 801838a:	b084      	sub	sp, #16
 801838c:	af02      	add	r7, sp, #8
 801838e:	6078      	str	r0, [r7, #4]
 8018390:	460b      	mov	r3, r1
 8018392:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018398:	9301      	str	r3, [sp, #4]
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	9300      	str	r3, [sp, #0]
 801839e:	4b05      	ldr	r3, [pc, #20]	; (80183b4 <RegionCommonTxConfigPrint+0x2c>)
 80183a0:	2201      	movs	r2, #1
 80183a2:	2100      	movs	r1, #0
 80183a4:	2002      	movs	r0, #2
 80183a6:	f005 fd91 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
}
 80183aa:	bf00      	nop
 80183ac:	3708      	adds	r7, #8
 80183ae:	46bd      	mov	sp, r7
 80183b0:	bd80      	pop	{r7, pc}
 80183b2:	bf00      	nop
 80183b4:	0801edd4 	.word	0x0801edd4

080183b8 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b082      	sub	sp, #8
 80183bc:	af00      	add	r7, sp, #0
 80183be:	6078      	str	r0, [r7, #4]
 80183c0:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80183c2:	4b2d      	ldr	r3, [pc, #180]	; (8018478 <VerifyRfFreq+0xc0>)
 80183c4:	6a1b      	ldr	r3, [r3, #32]
 80183c6:	6878      	ldr	r0, [r7, #4]
 80183c8:	4798      	blx	r3
 80183ca:	4603      	mov	r3, r0
 80183cc:	f083 0301 	eor.w	r3, r3, #1
 80183d0:	b2db      	uxtb	r3, r3
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d001      	beq.n	80183da <VerifyRfFreq+0x22>
    {
        return false;
 80183d6:	2300      	movs	r3, #0
 80183d8:	e04a      	b.n	8018470 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	4a27      	ldr	r2, [pc, #156]	; (801847c <VerifyRfFreq+0xc4>)
 80183de:	4293      	cmp	r3, r2
 80183e0:	d307      	bcc.n	80183f2 <VerifyRfFreq+0x3a>
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	4a26      	ldr	r2, [pc, #152]	; (8018480 <VerifyRfFreq+0xc8>)
 80183e6:	4293      	cmp	r3, r2
 80183e8:	d803      	bhi.n	80183f2 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80183ea:	683b      	ldr	r3, [r7, #0]
 80183ec:	2202      	movs	r2, #2
 80183ee:	701a      	strb	r2, [r3, #0]
 80183f0:	e03d      	b.n	801846e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	4a22      	ldr	r2, [pc, #136]	; (8018480 <VerifyRfFreq+0xc8>)
 80183f6:	4293      	cmp	r3, r2
 80183f8:	d907      	bls.n	801840a <VerifyRfFreq+0x52>
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	4a21      	ldr	r2, [pc, #132]	; (8018484 <VerifyRfFreq+0xcc>)
 80183fe:	4293      	cmp	r3, r2
 8018400:	d803      	bhi.n	801840a <VerifyRfFreq+0x52>
    {
        *band = 0;
 8018402:	683b      	ldr	r3, [r7, #0]
 8018404:	2200      	movs	r2, #0
 8018406:	701a      	strb	r2, [r3, #0]
 8018408:	e031      	b.n	801846e <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	4a1d      	ldr	r2, [pc, #116]	; (8018484 <VerifyRfFreq+0xcc>)
 801840e:	4293      	cmp	r3, r2
 8018410:	d907      	bls.n	8018422 <VerifyRfFreq+0x6a>
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	4a1c      	ldr	r2, [pc, #112]	; (8018488 <VerifyRfFreq+0xd0>)
 8018416:	4293      	cmp	r3, r2
 8018418:	d803      	bhi.n	8018422 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801841a:	683b      	ldr	r3, [r7, #0]
 801841c:	2201      	movs	r2, #1
 801841e:	701a      	strb	r2, [r3, #0]
 8018420:	e025      	b.n	801846e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	4a19      	ldr	r2, [pc, #100]	; (801848c <VerifyRfFreq+0xd4>)
 8018426:	4293      	cmp	r3, r2
 8018428:	d907      	bls.n	801843a <VerifyRfFreq+0x82>
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	4a18      	ldr	r2, [pc, #96]	; (8018490 <VerifyRfFreq+0xd8>)
 801842e:	4293      	cmp	r3, r2
 8018430:	d803      	bhi.n	801843a <VerifyRfFreq+0x82>
    {
        *band = 5;
 8018432:	683b      	ldr	r3, [r7, #0]
 8018434:	2205      	movs	r2, #5
 8018436:	701a      	strb	r2, [r3, #0]
 8018438:	e019      	b.n	801846e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	4a15      	ldr	r2, [pc, #84]	; (8018494 <VerifyRfFreq+0xdc>)
 801843e:	4293      	cmp	r3, r2
 8018440:	d907      	bls.n	8018452 <VerifyRfFreq+0x9a>
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	4a14      	ldr	r2, [pc, #80]	; (8018498 <VerifyRfFreq+0xe0>)
 8018446:	4293      	cmp	r3, r2
 8018448:	d803      	bhi.n	8018452 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801844a:	683b      	ldr	r3, [r7, #0]
 801844c:	2203      	movs	r2, #3
 801844e:	701a      	strb	r2, [r3, #0]
 8018450:	e00d      	b.n	801846e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	4a11      	ldr	r2, [pc, #68]	; (801849c <VerifyRfFreq+0xe4>)
 8018456:	4293      	cmp	r3, r2
 8018458:	d307      	bcc.n	801846a <VerifyRfFreq+0xb2>
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	4a10      	ldr	r2, [pc, #64]	; (80184a0 <VerifyRfFreq+0xe8>)
 801845e:	4293      	cmp	r3, r2
 8018460:	d803      	bhi.n	801846a <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8018462:	683b      	ldr	r3, [r7, #0]
 8018464:	2204      	movs	r2, #4
 8018466:	701a      	strb	r2, [r3, #0]
 8018468:	e001      	b.n	801846e <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801846a:	2300      	movs	r3, #0
 801846c:	e000      	b.n	8018470 <VerifyRfFreq+0xb8>
    }
    return true;
 801846e:	2301      	movs	r3, #1
}
 8018470:	4618      	mov	r0, r3
 8018472:	3708      	adds	r7, #8
 8018474:	46bd      	mov	sp, r7
 8018476:	bd80      	pop	{r7, pc}
 8018478:	0801f374 	.word	0x0801f374
 801847c:	337055c0 	.word	0x337055c0
 8018480:	338eda3f 	.word	0x338eda3f
 8018484:	33bca100 	.word	0x33bca100
 8018488:	33c5c8c0 	.word	0x33c5c8c0
 801848c:	33c74f5f 	.word	0x33c74f5f
 8018490:	33cef080 	.word	0x33cef080
 8018494:	33d1fdbf 	.word	0x33d1fdbf
 8018498:	33d5ce50 	.word	0x33d5ce50
 801849c:	33d691a0 	.word	0x33d691a0
 80184a0:	33db2580 	.word	0x33db2580

080184a4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80184a4:	b590      	push	{r4, r7, lr}
 80184a6:	b08b      	sub	sp, #44	; 0x2c
 80184a8:	af04      	add	r7, sp, #16
 80184aa:	4603      	mov	r3, r0
 80184ac:	460a      	mov	r2, r1
 80184ae:	71fb      	strb	r3, [r7, #7]
 80184b0:	4613      	mov	r3, r2
 80184b2:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 80184b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80184b8:	4a1f      	ldr	r2, [pc, #124]	; (8018538 <GetTimeOnAir+0x94>)
 80184ba:	5cd3      	ldrb	r3, [r2, r3]
 80184bc:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80184be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80184c2:	491e      	ldr	r1, [pc, #120]	; (801853c <GetTimeOnAir+0x98>)
 80184c4:	4618      	mov	r0, r3
 80184c6:	f7ff ff0f 	bl	80182e8 <RegionCommonGetBandwidth>
 80184ca:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80184cc:	2300      	movs	r3, #0
 80184ce:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80184d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80184d4:	2b07      	cmp	r3, #7
 80184d6:	d118      	bne.n	801850a <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80184d8:	4b19      	ldr	r3, [pc, #100]	; (8018540 <GetTimeOnAir+0x9c>)
 80184da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80184dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80184e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80184e4:	fb02 f303 	mul.w	r3, r2, r3
 80184e8:	4619      	mov	r1, r3
 80184ea:	88bb      	ldrh	r3, [r7, #4]
 80184ec:	b2db      	uxtb	r3, r3
 80184ee:	2201      	movs	r2, #1
 80184f0:	9203      	str	r2, [sp, #12]
 80184f2:	9302      	str	r3, [sp, #8]
 80184f4:	2300      	movs	r3, #0
 80184f6:	9301      	str	r3, [sp, #4]
 80184f8:	2305      	movs	r3, #5
 80184fa:	9300      	str	r3, [sp, #0]
 80184fc:	2300      	movs	r3, #0
 80184fe:	460a      	mov	r2, r1
 8018500:	68f9      	ldr	r1, [r7, #12]
 8018502:	2000      	movs	r0, #0
 8018504:	47a0      	blx	r4
 8018506:	6178      	str	r0, [r7, #20]
 8018508:	e011      	b.n	801852e <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801850a:	4b0d      	ldr	r3, [pc, #52]	; (8018540 <GetTimeOnAir+0x9c>)
 801850c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801850e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018512:	88bb      	ldrh	r3, [r7, #4]
 8018514:	b2db      	uxtb	r3, r3
 8018516:	2101      	movs	r1, #1
 8018518:	9103      	str	r1, [sp, #12]
 801851a:	9302      	str	r3, [sp, #8]
 801851c:	2300      	movs	r3, #0
 801851e:	9301      	str	r3, [sp, #4]
 8018520:	2308      	movs	r3, #8
 8018522:	9300      	str	r3, [sp, #0]
 8018524:	2301      	movs	r3, #1
 8018526:	68f9      	ldr	r1, [r7, #12]
 8018528:	2001      	movs	r0, #1
 801852a:	47a0      	blx	r4
 801852c:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 801852e:	697b      	ldr	r3, [r7, #20]
}
 8018530:	4618      	mov	r0, r3
 8018532:	371c      	adds	r7, #28
 8018534:	46bd      	mov	sp, r7
 8018536:	bd90      	pop	{r4, r7, pc}
 8018538:	0801f33c 	.word	0x0801f33c
 801853c:	0801f344 	.word	0x0801f344
 8018540:	0801f374 	.word	0x0801f374

08018544 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8018544:	b580      	push	{r7, lr}
 8018546:	b088      	sub	sp, #32
 8018548:	af00      	add	r7, sp, #0
 801854a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801854c:	2300      	movs	r3, #0
 801854e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	781b      	ldrb	r3, [r3, #0]
 8018554:	3b01      	subs	r3, #1
 8018556:	2b38      	cmp	r3, #56	; 0x38
 8018558:	f200 8128 	bhi.w	80187ac <RegionEU868GetPhyParam+0x268>
 801855c:	a201      	add	r2, pc, #4	; (adr r2, 8018564 <RegionEU868GetPhyParam+0x20>)
 801855e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018562:	bf00      	nop
 8018564:	08018649 	.word	0x08018649
 8018568:	0801864f 	.word	0x0801864f
 801856c:	080187ad 	.word	0x080187ad
 8018570:	080187ad 	.word	0x080187ad
 8018574:	080187ad 	.word	0x080187ad
 8018578:	08018655 	.word	0x08018655
 801857c:	080187ad 	.word	0x080187ad
 8018580:	0801868f 	.word	0x0801868f
 8018584:	080187ad 	.word	0x080187ad
 8018588:	08018695 	.word	0x08018695
 801858c:	0801869b 	.word	0x0801869b
 8018590:	080186a1 	.word	0x080186a1
 8018594:	080186a7 	.word	0x080186a7
 8018598:	080186b7 	.word	0x080186b7
 801859c:	080186c7 	.word	0x080186c7
 80185a0:	080186cd 	.word	0x080186cd
 80185a4:	080186d5 	.word	0x080186d5
 80185a8:	080186dd 	.word	0x080186dd
 80185ac:	080186e5 	.word	0x080186e5
 80185b0:	080186ed 	.word	0x080186ed
 80185b4:	080186f5 	.word	0x080186f5
 80185b8:	080186fd 	.word	0x080186fd
 80185bc:	08018711 	.word	0x08018711
 80185c0:	08018717 	.word	0x08018717
 80185c4:	0801871d 	.word	0x0801871d
 80185c8:	08018723 	.word	0x08018723
 80185cc:	0801872f 	.word	0x0801872f
 80185d0:	0801873b 	.word	0x0801873b
 80185d4:	08018741 	.word	0x08018741
 80185d8:	08018749 	.word	0x08018749
 80185dc:	0801874f 	.word	0x0801874f
 80185e0:	08018755 	.word	0x08018755
 80185e4:	0801875d 	.word	0x0801875d
 80185e8:	0801865b 	.word	0x0801865b
 80185ec:	080187ad 	.word	0x080187ad
 80185f0:	080187ad 	.word	0x080187ad
 80185f4:	080187ad 	.word	0x080187ad
 80185f8:	080187ad 	.word	0x080187ad
 80185fc:	080187ad 	.word	0x080187ad
 8018600:	080187ad 	.word	0x080187ad
 8018604:	080187ad 	.word	0x080187ad
 8018608:	080187ad 	.word	0x080187ad
 801860c:	080187ad 	.word	0x080187ad
 8018610:	080187ad 	.word	0x080187ad
 8018614:	080187ad 	.word	0x080187ad
 8018618:	080187ad 	.word	0x080187ad
 801861c:	080187ad 	.word	0x080187ad
 8018620:	08018763 	.word	0x08018763
 8018624:	08018769 	.word	0x08018769
 8018628:	08018777 	.word	0x08018777
 801862c:	080187ad 	.word	0x080187ad
 8018630:	080187ad 	.word	0x080187ad
 8018634:	0801877d 	.word	0x0801877d
 8018638:	08018783 	.word	0x08018783
 801863c:	080187ad 	.word	0x080187ad
 8018640:	08018789 	.word	0x08018789
 8018644:	08018799 	.word	0x08018799
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8018648:	2300      	movs	r3, #0
 801864a:	61bb      	str	r3, [r7, #24]
            break;
 801864c:	e0af      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801864e:	2300      	movs	r3, #0
 8018650:	61bb      	str	r3, [r7, #24]
            break;
 8018652:	e0ac      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8018654:	2300      	movs	r3, #0
 8018656:	61bb      	str	r3, [r7, #24]
            break;
 8018658:	e0a9      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018660:	733b      	strb	r3, [r7, #12]
 8018662:	2307      	movs	r3, #7
 8018664:	737b      	strb	r3, [r7, #13]
 8018666:	2300      	movs	r3, #0
 8018668:	73bb      	strb	r3, [r7, #14]
 801866a:	2310      	movs	r3, #16
 801866c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801866e:	4b53      	ldr	r3, [pc, #332]	; (80187bc <RegionEU868GetPhyParam+0x278>)
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018676:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8018678:	4b50      	ldr	r3, [pc, #320]	; (80187bc <RegionEU868GetPhyParam+0x278>)
 801867a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801867c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801867e:	f107 030c 	add.w	r3, r7, #12
 8018682:	4618      	mov	r0, r3
 8018684:	f7ff fddd 	bl	8018242 <RegionCommonGetNextLowerTxDr>
 8018688:	4603      	mov	r3, r0
 801868a:	61bb      	str	r3, [r7, #24]
            break;
 801868c:	e08f      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801868e:	2300      	movs	r3, #0
 8018690:	61bb      	str	r3, [r7, #24]
            break;
 8018692:	e08c      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8018694:	2300      	movs	r3, #0
 8018696:	61bb      	str	r3, [r7, #24]
            break;
 8018698:	e089      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801869a:	2340      	movs	r3, #64	; 0x40
 801869c:	61bb      	str	r3, [r7, #24]
            break;
 801869e:	e086      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80186a0:	2320      	movs	r3, #32
 80186a2:	61bb      	str	r3, [r7, #24]
            break;
 80186a4:	e083      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80186ac:	461a      	mov	r2, r3
 80186ae:	4b44      	ldr	r3, [pc, #272]	; (80187c0 <RegionEU868GetPhyParam+0x27c>)
 80186b0:	5c9b      	ldrb	r3, [r3, r2]
 80186b2:	61bb      	str	r3, [r7, #24]
            break;
 80186b4:	e07b      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80186bc:	461a      	mov	r2, r3
 80186be:	4b41      	ldr	r3, [pc, #260]	; (80187c4 <RegionEU868GetPhyParam+0x280>)
 80186c0:	5c9b      	ldrb	r3, [r3, r2]
 80186c2:	61bb      	str	r3, [r7, #24]
            break;
 80186c4:	e073      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80186c6:	2301      	movs	r3, #1
 80186c8:	61bb      	str	r3, [r7, #24]
            break;
 80186ca:	e070      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80186cc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80186d0:	61bb      	str	r3, [r7, #24]
            break;
 80186d2:	e06c      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80186d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80186d8:	61bb      	str	r3, [r7, #24]
            break;
 80186da:	e068      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80186dc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80186e0:	61bb      	str	r3, [r7, #24]
            break;
 80186e2:	e064      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80186e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80186e8:	61bb      	str	r3, [r7, #24]
            break;
 80186ea:	e060      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80186ec:	f241 7370 	movw	r3, #6000	; 0x1770
 80186f0:	61bb      	str	r3, [r7, #24]
            break;
 80186f2:	e05c      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80186f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80186f8:	61bb      	str	r3, [r7, #24]
            break;
 80186fa:	e058      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80186fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018700:	4831      	ldr	r0, [pc, #196]	; (80187c8 <RegionEU868GetPhyParam+0x284>)
 8018702:	f001 f879 	bl	80197f8 <randr>
 8018706:	4603      	mov	r3, r0
 8018708:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801870c:	61bb      	str	r3, [r7, #24]
            break;
 801870e:	e04e      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8018710:	2300      	movs	r3, #0
 8018712:	61bb      	str	r3, [r7, #24]
            break;
 8018714:	e04b      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8018716:	4b2d      	ldr	r3, [pc, #180]	; (80187cc <RegionEU868GetPhyParam+0x288>)
 8018718:	61bb      	str	r3, [r7, #24]
            break;
 801871a:	e048      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 801871c:	2300      	movs	r3, #0
 801871e:	61bb      	str	r3, [r7, #24]
            break;
 8018720:	e045      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018722:	4b26      	ldr	r3, [pc, #152]	; (80187bc <RegionEU868GetPhyParam+0x278>)
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801872a:	61bb      	str	r3, [r7, #24]
            break;
 801872c:	e03f      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801872e:	4b23      	ldr	r3, [pc, #140]	; (80187bc <RegionEU868GetPhyParam+0x278>)
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018736:	61bb      	str	r3, [r7, #24]
            break;
 8018738:	e039      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801873a:	2310      	movs	r3, #16
 801873c:	61bb      	str	r3, [r7, #24]
            break;
 801873e:	e036      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8018740:	4b1e      	ldr	r3, [pc, #120]	; (80187bc <RegionEU868GetPhyParam+0x278>)
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	61bb      	str	r3, [r7, #24]
            break;
 8018746:	e032      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8018748:	2300      	movs	r3, #0
 801874a:	61bb      	str	r3, [r7, #24]
            break;
 801874c:	e02f      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801874e:	2300      	movs	r3, #0
 8018750:	61bb      	str	r3, [r7, #24]
            break;
 8018752:	e02c      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8018754:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8018758:	61bb      	str	r3, [r7, #24]
            break;
 801875a:	e028      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801875c:	4b1c      	ldr	r3, [pc, #112]	; (80187d0 <RegionEU868GetPhyParam+0x28c>)
 801875e:	61bb      	str	r3, [r7, #24]
            break;
 8018760:	e025      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8018762:	4b1a      	ldr	r3, [pc, #104]	; (80187cc <RegionEU868GetPhyParam+0x288>)
 8018764:	61bb      	str	r3, [r7, #24]
            break;
 8018766:	e022      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8018768:	2311      	movs	r3, #17
 801876a:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801876c:	2302      	movs	r3, #2
 801876e:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8018770:	2300      	movs	r3, #0
 8018772:	76bb      	strb	r3, [r7, #26]
            break;
 8018774:	e01b      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8018776:	2303      	movs	r3, #3
 8018778:	61bb      	str	r3, [r7, #24]
            break;
 801877a:	e018      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 801877c:	4b13      	ldr	r3, [pc, #76]	; (80187cc <RegionEU868GetPhyParam+0x288>)
 801877e:	61bb      	str	r3, [r7, #24]
            break;
 8018780:	e015      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8018782:	2303      	movs	r3, #3
 8018784:	61bb      	str	r3, [r7, #24]
            break;
 8018786:	e012      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801878e:	461a      	mov	r2, r3
 8018790:	4b10      	ldr	r3, [pc, #64]	; (80187d4 <RegionEU868GetPhyParam+0x290>)
 8018792:	5c9b      	ldrb	r3, [r3, r2]
 8018794:	61bb      	str	r3, [r7, #24]
            break;
 8018796:	e00a      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801879e:	490e      	ldr	r1, [pc, #56]	; (80187d8 <RegionEU868GetPhyParam+0x294>)
 80187a0:	4618      	mov	r0, r3
 80187a2:	f7ff fda1 	bl	80182e8 <RegionCommonGetBandwidth>
 80187a6:	4603      	mov	r3, r0
 80187a8:	61bb      	str	r3, [r7, #24]
            break;
 80187aa:	e000      	b.n	80187ae <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 80187ac:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 80187ae:	69bb      	ldr	r3, [r7, #24]
 80187b0:	61fb      	str	r3, [r7, #28]
 80187b2:	69fb      	ldr	r3, [r7, #28]
}
 80187b4:	4618      	mov	r0, r3
 80187b6:	3720      	adds	r7, #32
 80187b8:	46bd      	mov	sp, r7
 80187ba:	bd80      	pop	{r7, pc}
 80187bc:	20001dec 	.word	0x20001dec
 80187c0:	0801f364 	.word	0x0801f364
 80187c4:	0801f36c 	.word	0x0801f36c
 80187c8:	fffffc18 	.word	0xfffffc18
 80187cc:	33d3e608 	.word	0x33d3e608
 80187d0:	4009999a 	.word	0x4009999a
 80187d4:	0801f33c 	.word	0x0801f33c
 80187d8:	0801f344 	.word	0x0801f344

080187dc <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80187dc:	b590      	push	{r4, r7, lr}
 80187de:	b085      	sub	sp, #20
 80187e0:	af02      	add	r7, sp, #8
 80187e2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80187e4:	4b11      	ldr	r3, [pc, #68]	; (801882c <RegionEU868SetBandTxDone+0x50>)
 80187e6:	681a      	ldr	r2, [r3, #0]
 80187e8:	4b11      	ldr	r3, [pc, #68]	; (8018830 <RegionEU868SetBandTxDone+0x54>)
 80187ea:	6819      	ldr	r1, [r3, #0]
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	781b      	ldrb	r3, [r3, #0]
 80187f0:	4618      	mov	r0, r3
 80187f2:	4603      	mov	r3, r0
 80187f4:	005b      	lsls	r3, r3, #1
 80187f6:	4403      	add	r3, r0
 80187f8:	009b      	lsls	r3, r3, #2
 80187fa:	440b      	add	r3, r1
 80187fc:	3309      	adds	r3, #9
 80187fe:	781b      	ldrb	r3, [r3, #0]
 8018800:	4619      	mov	r1, r3
 8018802:	460b      	mov	r3, r1
 8018804:	005b      	lsls	r3, r3, #1
 8018806:	440b      	add	r3, r1
 8018808:	00db      	lsls	r3, r3, #3
 801880a:	18d0      	adds	r0, r2, r3
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	6899      	ldr	r1, [r3, #8]
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	785c      	ldrb	r4, [r3, #1]
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	691a      	ldr	r2, [r3, #16]
 8018818:	9200      	str	r2, [sp, #0]
 801881a:	68db      	ldr	r3, [r3, #12]
 801881c:	4622      	mov	r2, r4
 801881e:	f7ff f8e9 	bl	80179f4 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8018822:	bf00      	nop
 8018824:	370c      	adds	r7, #12
 8018826:	46bd      	mov	sp, r7
 8018828:	bd90      	pop	{r4, r7, pc}
 801882a:	bf00      	nop
 801882c:	20001de8 	.word	0x20001de8
 8018830:	20001dec 	.word	0x20001dec

08018834 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8018834:	b580      	push	{r7, lr}
 8018836:	b0b0      	sub	sp, #192	; 0xc0
 8018838:	af00      	add	r7, sp, #0
 801883a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 801883c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018840:	2290      	movs	r2, #144	; 0x90
 8018842:	2100      	movs	r1, #0
 8018844:	4618      	mov	r0, r3
 8018846:	f005 fdb9 	bl	801e3bc <memset>
 801884a:	2364      	movs	r3, #100	; 0x64
 801884c:	863b      	strh	r3, [r7, #48]	; 0x30
 801884e:	2364      	movs	r3, #100	; 0x64
 8018850:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018858:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 801885c:	230a      	movs	r3, #10
 801885e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8018862:	2364      	movs	r3, #100	; 0x64
 8018864:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8018868:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801886c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	7a1b      	ldrb	r3, [r3, #8]
 8018874:	2b02      	cmp	r3, #2
 8018876:	d05e      	beq.n	8018936 <RegionEU868InitDefaults+0x102>
 8018878:	2b02      	cmp	r3, #2
 801887a:	dc6b      	bgt.n	8018954 <RegionEU868InitDefaults+0x120>
 801887c:	2b00      	cmp	r3, #0
 801887e:	d002      	beq.n	8018886 <RegionEU868InitDefaults+0x52>
 8018880:	2b01      	cmp	r3, #1
 8018882:	d03f      	beq.n	8018904 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8018884:	e066      	b.n	8018954 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d063      	beq.n	8018956 <RegionEU868InitDefaults+0x122>
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	685b      	ldr	r3, [r3, #4]
 8018892:	2b00      	cmp	r3, #0
 8018894:	d05f      	beq.n	8018956 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	4a30      	ldr	r2, [pc, #192]	; (801895c <RegionEU868InitDefaults+0x128>)
 801889c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	685b      	ldr	r3, [r3, #4]
 80188a2:	4a2f      	ldr	r2, [pc, #188]	; (8018960 <RegionEU868InitDefaults+0x12c>)
 80188a4:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80188a6:	4b2d      	ldr	r3, [pc, #180]	; (801895c <RegionEU868InitDefaults+0x128>)
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	4618      	mov	r0, r3
 80188ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80188b0:	2290      	movs	r2, #144	; 0x90
 80188b2:	4619      	mov	r1, r3
 80188b4:	f000 ffb7 	bl	8019826 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80188b8:	4b29      	ldr	r3, [pc, #164]	; (8018960 <RegionEU868InitDefaults+0x12c>)
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	4a29      	ldr	r2, [pc, #164]	; (8018964 <RegionEU868InitDefaults+0x130>)
 80188be:	ca07      	ldmia	r2, {r0, r1, r2}
 80188c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80188c4:	4b26      	ldr	r3, [pc, #152]	; (8018960 <RegionEU868InitDefaults+0x12c>)
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	4a27      	ldr	r2, [pc, #156]	; (8018968 <RegionEU868InitDefaults+0x134>)
 80188ca:	330c      	adds	r3, #12
 80188cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80188ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80188d2:	4b23      	ldr	r3, [pc, #140]	; (8018960 <RegionEU868InitDefaults+0x12c>)
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	4a25      	ldr	r2, [pc, #148]	; (801896c <RegionEU868InitDefaults+0x138>)
 80188d8:	3318      	adds	r3, #24
 80188da:	ca07      	ldmia	r2, {r0, r1, r2}
 80188dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80188e0:	4b1f      	ldr	r3, [pc, #124]	; (8018960 <RegionEU868InitDefaults+0x12c>)
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	2207      	movs	r2, #7
 80188e6:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80188ea:	4b1d      	ldr	r3, [pc, #116]	; (8018960 <RegionEU868InitDefaults+0x12c>)
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 80188f2:	4b1b      	ldr	r3, [pc, #108]	; (8018960 <RegionEU868InitDefaults+0x12c>)
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80188fa:	2201      	movs	r2, #1
 80188fc:	4619      	mov	r1, r3
 80188fe:	f7ff f853 	bl	80179a8 <RegionCommonChanMaskCopy>
 8018902:	e028      	b.n	8018956 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8018904:	4b16      	ldr	r3, [pc, #88]	; (8018960 <RegionEU868InitDefaults+0x12c>)
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	2200      	movs	r2, #0
 801890a:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801890c:	4b14      	ldr	r3, [pc, #80]	; (8018960 <RegionEU868InitDefaults+0x12c>)
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	2200      	movs	r2, #0
 8018912:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8018914:	4b12      	ldr	r3, [pc, #72]	; (8018960 <RegionEU868InitDefaults+0x12c>)
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	2200      	movs	r2, #0
 801891a:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801891c:	4b10      	ldr	r3, [pc, #64]	; (8018960 <RegionEU868InitDefaults+0x12c>)
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018924:	4b0e      	ldr	r3, [pc, #56]	; (8018960 <RegionEU868InitDefaults+0x12c>)
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801892c:	2201      	movs	r2, #1
 801892e:	4619      	mov	r1, r3
 8018930:	f7ff f83a 	bl	80179a8 <RegionCommonChanMaskCopy>
            break;
 8018934:	e00f      	b.n	8018956 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8018936:	4b0a      	ldr	r3, [pc, #40]	; (8018960 <RegionEU868InitDefaults+0x12c>)
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 801893e:	4b08      	ldr	r3, [pc, #32]	; (8018960 <RegionEU868InitDefaults+0x12c>)
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8018946:	4b06      	ldr	r3, [pc, #24]	; (8018960 <RegionEU868InitDefaults+0x12c>)
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	430a      	orrs	r2, r1
 801894c:	b292      	uxth	r2, r2
 801894e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 8018952:	e000      	b.n	8018956 <RegionEU868InitDefaults+0x122>
            break;
 8018954:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8018956:	37c0      	adds	r7, #192	; 0xc0
 8018958:	46bd      	mov	sp, r7
 801895a:	bd80      	pop	{r7, pc}
 801895c:	20001de8 	.word	0x20001de8
 8018960:	20001dec 	.word	0x20001dec
 8018964:	0801edf0 	.word	0x0801edf0
 8018968:	0801edfc 	.word	0x0801edfc
 801896c:	0801ee08 	.word	0x0801ee08

08018970 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8018970:	b580      	push	{r7, lr}
 8018972:	b084      	sub	sp, #16
 8018974:	af00      	add	r7, sp, #0
 8018976:	6078      	str	r0, [r7, #4]
 8018978:	460b      	mov	r3, r1
 801897a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 801897c:	78fb      	ldrb	r3, [r7, #3]
 801897e:	2b0f      	cmp	r3, #15
 8018980:	d86c      	bhi.n	8018a5c <RegionEU868Verify+0xec>
 8018982:	a201      	add	r2, pc, #4	; (adr r2, 8018988 <RegionEU868Verify+0x18>)
 8018984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018988:	080189c9 	.word	0x080189c9
 801898c:	08018a5d 	.word	0x08018a5d
 8018990:	08018a5d 	.word	0x08018a5d
 8018994:	08018a5d 	.word	0x08018a5d
 8018998:	08018a5d 	.word	0x08018a5d
 801899c:	080189e1 	.word	0x080189e1
 80189a0:	080189ff 	.word	0x080189ff
 80189a4:	08018a1d 	.word	0x08018a1d
 80189a8:	08018a5d 	.word	0x08018a5d
 80189ac:	08018a3b 	.word	0x08018a3b
 80189b0:	08018a3b 	.word	0x08018a3b
 80189b4:	08018a5d 	.word	0x08018a5d
 80189b8:	08018a5d 	.word	0x08018a5d
 80189bc:	08018a5d 	.word	0x08018a5d
 80189c0:	08018a5d 	.word	0x08018a5d
 80189c4:	08018a59 	.word	0x08018a59
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80189c8:	2300      	movs	r3, #0
 80189ca:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	f107 020f 	add.w	r2, r7, #15
 80189d4:	4611      	mov	r1, r2
 80189d6:	4618      	mov	r0, r3
 80189d8:	f7ff fcee 	bl	80183b8 <VerifyRfFreq>
 80189dc:	4603      	mov	r3, r0
 80189de:	e03e      	b.n	8018a5e <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	f993 3000 	ldrsb.w	r3, [r3]
 80189e6:	2207      	movs	r2, #7
 80189e8:	2100      	movs	r1, #0
 80189ea:	4618      	mov	r0, r3
 80189ec:	f7fe ff5f 	bl	80178ae <RegionCommonValueInRange>
 80189f0:	4603      	mov	r3, r0
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	bf14      	ite	ne
 80189f6:	2301      	movne	r3, #1
 80189f8:	2300      	moveq	r3, #0
 80189fa:	b2db      	uxtb	r3, r3
 80189fc:	e02f      	b.n	8018a5e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	f993 3000 	ldrsb.w	r3, [r3]
 8018a04:	2205      	movs	r2, #5
 8018a06:	2100      	movs	r1, #0
 8018a08:	4618      	mov	r0, r3
 8018a0a:	f7fe ff50 	bl	80178ae <RegionCommonValueInRange>
 8018a0e:	4603      	mov	r3, r0
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	bf14      	ite	ne
 8018a14:	2301      	movne	r3, #1
 8018a16:	2300      	moveq	r3, #0
 8018a18:	b2db      	uxtb	r3, r3
 8018a1a:	e020      	b.n	8018a5e <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	f993 3000 	ldrsb.w	r3, [r3]
 8018a22:	2207      	movs	r2, #7
 8018a24:	2100      	movs	r1, #0
 8018a26:	4618      	mov	r0, r3
 8018a28:	f7fe ff41 	bl	80178ae <RegionCommonValueInRange>
 8018a2c:	4603      	mov	r3, r0
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	bf14      	ite	ne
 8018a32:	2301      	movne	r3, #1
 8018a34:	2300      	moveq	r3, #0
 8018a36:	b2db      	uxtb	r3, r3
 8018a38:	e011      	b.n	8018a5e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	f993 3000 	ldrsb.w	r3, [r3]
 8018a40:	2207      	movs	r2, #7
 8018a42:	2100      	movs	r1, #0
 8018a44:	4618      	mov	r0, r3
 8018a46:	f7fe ff32 	bl	80178ae <RegionCommonValueInRange>
 8018a4a:	4603      	mov	r3, r0
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	bf14      	ite	ne
 8018a50:	2301      	movne	r3, #1
 8018a52:	2300      	moveq	r3, #0
 8018a54:	b2db      	uxtb	r3, r3
 8018a56:	e002      	b.n	8018a5e <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8018a58:	2301      	movs	r3, #1
 8018a5a:	e000      	b.n	8018a5e <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8018a5c:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8018a5e:	4618      	mov	r0, r3
 8018a60:	3710      	adds	r7, #16
 8018a62:	46bd      	mov	sp, r7
 8018a64:	bd80      	pop	{r7, pc}
 8018a66:	bf00      	nop

08018a68 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8018a68:	b580      	push	{r7, lr}
 8018a6a:	b08a      	sub	sp, #40	; 0x28
 8018a6c:	af00      	add	r7, sp, #0
 8018a6e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8018a70:	2350      	movs	r3, #80	; 0x50
 8018a72:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	791b      	ldrb	r3, [r3, #4]
 8018a7a:	2b10      	cmp	r3, #16
 8018a7c:	d162      	bne.n	8018b44 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	330f      	adds	r3, #15
 8018a84:	781b      	ldrb	r3, [r3, #0]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d15e      	bne.n	8018b48 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018a8a:	2300      	movs	r3, #0
 8018a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018a90:	2303      	movs	r3, #3
 8018a92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018a96:	e050      	b.n	8018b3a <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8018a98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018a9c:	2b07      	cmp	r3, #7
 8018a9e:	d824      	bhi.n	8018aea <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	681a      	ldr	r2, [r3, #0]
 8018aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018aa8:	4413      	add	r3, r2
 8018aaa:	781b      	ldrb	r3, [r3, #0]
 8018aac:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8018aae:	69ba      	ldr	r2, [r7, #24]
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	6819      	ldr	r1, [r3, #0]
 8018ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ab8:	3301      	adds	r3, #1
 8018aba:	440b      	add	r3, r1
 8018abc:	781b      	ldrb	r3, [r3, #0]
 8018abe:	021b      	lsls	r3, r3, #8
 8018ac0:	4313      	orrs	r3, r2
 8018ac2:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8018ac4:	69ba      	ldr	r2, [r7, #24]
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	6819      	ldr	r1, [r3, #0]
 8018aca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ace:	3302      	adds	r3, #2
 8018ad0:	440b      	add	r3, r1
 8018ad2:	781b      	ldrb	r3, [r3, #0]
 8018ad4:	041b      	lsls	r3, r3, #16
 8018ad6:	4313      	orrs	r3, r2
 8018ad8:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8018ada:	69bb      	ldr	r3, [r7, #24]
 8018adc:	2264      	movs	r2, #100	; 0x64
 8018ade:	fb02 f303 	mul.w	r3, r2, r3
 8018ae2:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8018ae4:	2300      	movs	r3, #0
 8018ae6:	61fb      	str	r3, [r7, #28]
 8018ae8:	e006      	b.n	8018af8 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8018aea:	2300      	movs	r3, #0
 8018aec:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8018aee:	2300      	movs	r3, #0
 8018af0:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8018af4:	2300      	movs	r3, #0
 8018af6:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8018af8:	69bb      	ldr	r3, [r7, #24]
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d00b      	beq.n	8018b16 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8018afe:	f107 0318 	add.w	r3, r7, #24
 8018b02:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8018b04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b08:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8018b0a:	f107 0310 	add.w	r3, r7, #16
 8018b0e:	4618      	mov	r0, r3
 8018b10:	f000 fd0e 	bl	8019530 <RegionEU868ChannelAdd>
 8018b14:	e007      	b.n	8018b26 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8018b16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b1a:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8018b1c:	f107 030c 	add.w	r3, r7, #12
 8018b20:	4618      	mov	r0, r3
 8018b22:	f000 fda7 	bl	8019674 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018b26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b2a:	3303      	adds	r3, #3
 8018b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018b30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b34:	3301      	adds	r3, #1
 8018b36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018b3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b3e:	2b0f      	cmp	r3, #15
 8018b40:	d9aa      	bls.n	8018a98 <RegionEU868ApplyCFList+0x30>
 8018b42:	e002      	b.n	8018b4a <RegionEU868ApplyCFList+0xe2>
        return;
 8018b44:	bf00      	nop
 8018b46:	e000      	b.n	8018b4a <RegionEU868ApplyCFList+0xe2>
        return;
 8018b48:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8018b4a:	3728      	adds	r7, #40	; 0x28
 8018b4c:	46bd      	mov	sp, r7
 8018b4e:	bd80      	pop	{r7, pc}

08018b50 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018b50:	b580      	push	{r7, lr}
 8018b52:	b082      	sub	sp, #8
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	791b      	ldrb	r3, [r3, #4]
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d002      	beq.n	8018b66 <RegionEU868ChanMaskSet+0x16>
 8018b60:	2b01      	cmp	r3, #1
 8018b62:	d00b      	beq.n	8018b7c <RegionEU868ChanMaskSet+0x2c>
 8018b64:	e015      	b.n	8018b92 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018b66:	4b0e      	ldr	r3, [pc, #56]	; (8018ba0 <RegionEU868ChanMaskSet+0x50>)
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	2201      	movs	r2, #1
 8018b74:	4619      	mov	r1, r3
 8018b76:	f7fe ff17 	bl	80179a8 <RegionCommonChanMaskCopy>
            break;
 8018b7a:	e00c      	b.n	8018b96 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018b7c:	4b08      	ldr	r3, [pc, #32]	; (8018ba0 <RegionEU868ChanMaskSet+0x50>)
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	2201      	movs	r2, #1
 8018b8a:	4619      	mov	r1, r3
 8018b8c:	f7fe ff0c 	bl	80179a8 <RegionCommonChanMaskCopy>
            break;
 8018b90:	e001      	b.n	8018b96 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8018b92:	2300      	movs	r3, #0
 8018b94:	e000      	b.n	8018b98 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8018b96:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8018b98:	4618      	mov	r0, r3
 8018b9a:	3708      	adds	r7, #8
 8018b9c:	46bd      	mov	sp, r7
 8018b9e:	bd80      	pop	{r7, pc}
 8018ba0:	20001dec 	.word	0x20001dec

08018ba4 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8018ba4:	b580      	push	{r7, lr}
 8018ba6:	b088      	sub	sp, #32
 8018ba8:	af02      	add	r7, sp, #8
 8018baa:	60ba      	str	r2, [r7, #8]
 8018bac:	607b      	str	r3, [r7, #4]
 8018bae:	4603      	mov	r3, r0
 8018bb0:	73fb      	strb	r3, [r7, #15]
 8018bb2:	460b      	mov	r3, r1
 8018bb4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8018bb6:	2300      	movs	r3, #0
 8018bb8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8018bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018bbe:	2b07      	cmp	r3, #7
 8018bc0:	bfa8      	it	ge
 8018bc2:	2307      	movge	r3, #7
 8018bc4:	b25a      	sxtb	r2, r3
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018bd0:	491e      	ldr	r1, [pc, #120]	; (8018c4c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	f7ff fb88 	bl	80182e8 <RegionCommonGetBandwidth>
 8018bd8:	4603      	mov	r3, r0
 8018bda:	b2da      	uxtb	r2, r3
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018be6:	2b07      	cmp	r3, #7
 8018be8:	d10a      	bne.n	8018c00 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018bf0:	461a      	mov	r2, r3
 8018bf2:	4b17      	ldr	r3, [pc, #92]	; (8018c50 <RegionEU868ComputeRxWindowParameters+0xac>)
 8018bf4:	5c9b      	ldrb	r3, [r3, r2]
 8018bf6:	4618      	mov	r0, r3
 8018bf8:	f7ff f90a 	bl	8017e10 <RegionCommonComputeSymbolTimeFsk>
 8018bfc:	6178      	str	r0, [r7, #20]
 8018bfe:	e011      	b.n	8018c24 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c06:	461a      	mov	r2, r3
 8018c08:	4b11      	ldr	r3, [pc, #68]	; (8018c50 <RegionEU868ComputeRxWindowParameters+0xac>)
 8018c0a:	5c9a      	ldrb	r2, [r3, r2]
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c12:	4619      	mov	r1, r3
 8018c14:	4b0d      	ldr	r3, [pc, #52]	; (8018c4c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8018c16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018c1a:	4619      	mov	r1, r3
 8018c1c:	4610      	mov	r0, r2
 8018c1e:	f7ff f8e1 	bl	8017de4 <RegionCommonComputeSymbolTimeLoRa>
 8018c22:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018c24:	4b0b      	ldr	r3, [pc, #44]	; (8018c54 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8018c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c28:	4798      	blx	r3
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	3308      	adds	r3, #8
 8018c2e:	687a      	ldr	r2, [r7, #4]
 8018c30:	320c      	adds	r2, #12
 8018c32:	7bb9      	ldrb	r1, [r7, #14]
 8018c34:	9201      	str	r2, [sp, #4]
 8018c36:	9300      	str	r3, [sp, #0]
 8018c38:	4603      	mov	r3, r0
 8018c3a:	68ba      	ldr	r2, [r7, #8]
 8018c3c:	6978      	ldr	r0, [r7, #20]
 8018c3e:	f7ff f8f7 	bl	8017e30 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8018c42:	bf00      	nop
 8018c44:	3718      	adds	r7, #24
 8018c46:	46bd      	mov	sp, r7
 8018c48:	bd80      	pop	{r7, pc}
 8018c4a:	bf00      	nop
 8018c4c:	0801f344 	.word	0x0801f344
 8018c50:	0801f33c 	.word	0x0801f33c
 8018c54:	0801f374 	.word	0x0801f374

08018c58 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018c58:	b5b0      	push	{r4, r5, r7, lr}
 8018c5a:	b090      	sub	sp, #64	; 0x40
 8018c5c:	af0a      	add	r7, sp, #40	; 0x28
 8018c5e:	6078      	str	r0, [r7, #4]
 8018c60:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	785b      	ldrb	r3, [r3, #1]
 8018c66:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8018c68:	2300      	movs	r3, #0
 8018c6a:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8018c6c:	2300      	movs	r3, #0
 8018c6e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	685b      	ldr	r3, [r3, #4]
 8018c74:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8018c76:	4b5a      	ldr	r3, [pc, #360]	; (8018de0 <RegionEU868RxConfig+0x188>)
 8018c78:	685b      	ldr	r3, [r3, #4]
 8018c7a:	4798      	blx	r3
 8018c7c:	4603      	mov	r3, r0
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d001      	beq.n	8018c86 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8018c82:	2300      	movs	r3, #0
 8018c84:	e0a8      	b.n	8018dd8 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	7cdb      	ldrb	r3, [r3, #19]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d126      	bne.n	8018cdc <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8018c8e:	4b55      	ldr	r3, [pc, #340]	; (8018de4 <RegionEU868RxConfig+0x18c>)
 8018c90:	681a      	ldr	r2, [r3, #0]
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	781b      	ldrb	r3, [r3, #0]
 8018c96:	4619      	mov	r1, r3
 8018c98:	460b      	mov	r3, r1
 8018c9a:	005b      	lsls	r3, r3, #1
 8018c9c:	440b      	add	r3, r1
 8018c9e:	009b      	lsls	r3, r3, #2
 8018ca0:	4413      	add	r3, r2
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8018ca6:	4b4f      	ldr	r3, [pc, #316]	; (8018de4 <RegionEU868RxConfig+0x18c>)
 8018ca8:	681a      	ldr	r2, [r3, #0]
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	781b      	ldrb	r3, [r3, #0]
 8018cae:	4619      	mov	r1, r3
 8018cb0:	460b      	mov	r3, r1
 8018cb2:	005b      	lsls	r3, r3, #1
 8018cb4:	440b      	add	r3, r1
 8018cb6:	009b      	lsls	r3, r3, #2
 8018cb8:	4413      	add	r3, r2
 8018cba:	3304      	adds	r3, #4
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d00c      	beq.n	8018cdc <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8018cc2:	4b48      	ldr	r3, [pc, #288]	; (8018de4 <RegionEU868RxConfig+0x18c>)
 8018cc4:	681a      	ldr	r2, [r3, #0]
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	781b      	ldrb	r3, [r3, #0]
 8018cca:	4619      	mov	r1, r3
 8018ccc:	460b      	mov	r3, r1
 8018cce:	005b      	lsls	r3, r3, #1
 8018cd0:	440b      	add	r3, r1
 8018cd2:	009b      	lsls	r3, r3, #2
 8018cd4:	4413      	add	r3, r2
 8018cd6:	3304      	adds	r3, #4
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8018cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018ce0:	4a41      	ldr	r2, [pc, #260]	; (8018de8 <RegionEU868RxConfig+0x190>)
 8018ce2:	5cd3      	ldrb	r3, [r2, r3]
 8018ce4:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8018ce6:	4b3e      	ldr	r3, [pc, #248]	; (8018de0 <RegionEU868RxConfig+0x188>)
 8018ce8:	68db      	ldr	r3, [r3, #12]
 8018cea:	6938      	ldr	r0, [r7, #16]
 8018cec:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8018cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018cf2:	2b07      	cmp	r3, #7
 8018cf4:	d128      	bne.n	8018d48 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8018cf6:	2300      	movs	r3, #0
 8018cf8:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8018cfa:	4b39      	ldr	r3, [pc, #228]	; (8018de0 <RegionEU868RxConfig+0x188>)
 8018cfc:	699c      	ldr	r4, [r3, #24]
 8018cfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018d02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018d06:	fb02 f303 	mul.w	r3, r2, r3
 8018d0a:	4619      	mov	r1, r3
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	689b      	ldr	r3, [r3, #8]
 8018d10:	b29b      	uxth	r3, r3
 8018d12:	687a      	ldr	r2, [r7, #4]
 8018d14:	7c92      	ldrb	r2, [r2, #18]
 8018d16:	7df8      	ldrb	r0, [r7, #23]
 8018d18:	9209      	str	r2, [sp, #36]	; 0x24
 8018d1a:	2200      	movs	r2, #0
 8018d1c:	9208      	str	r2, [sp, #32]
 8018d1e:	2200      	movs	r2, #0
 8018d20:	9207      	str	r2, [sp, #28]
 8018d22:	2200      	movs	r2, #0
 8018d24:	9206      	str	r2, [sp, #24]
 8018d26:	2201      	movs	r2, #1
 8018d28:	9205      	str	r2, [sp, #20]
 8018d2a:	2200      	movs	r2, #0
 8018d2c:	9204      	str	r2, [sp, #16]
 8018d2e:	2200      	movs	r2, #0
 8018d30:	9203      	str	r2, [sp, #12]
 8018d32:	9302      	str	r3, [sp, #8]
 8018d34:	2305      	movs	r3, #5
 8018d36:	9301      	str	r3, [sp, #4]
 8018d38:	4b2c      	ldr	r3, [pc, #176]	; (8018dec <RegionEU868RxConfig+0x194>)
 8018d3a:	9300      	str	r3, [sp, #0]
 8018d3c:	2300      	movs	r3, #0
 8018d3e:	460a      	mov	r2, r1
 8018d40:	f24c 3150 	movw	r1, #50000	; 0xc350
 8018d44:	47a0      	blx	r4
 8018d46:	e024      	b.n	8018d92 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8018d48:	2301      	movs	r3, #1
 8018d4a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8018d4c:	4b24      	ldr	r3, [pc, #144]	; (8018de0 <RegionEU868RxConfig+0x188>)
 8018d4e:	699c      	ldr	r4, [r3, #24]
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	789b      	ldrb	r3, [r3, #2]
 8018d54:	461d      	mov	r5, r3
 8018d56:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	689b      	ldr	r3, [r3, #8]
 8018d5e:	b29b      	uxth	r3, r3
 8018d60:	687a      	ldr	r2, [r7, #4]
 8018d62:	7c92      	ldrb	r2, [r2, #18]
 8018d64:	7df8      	ldrb	r0, [r7, #23]
 8018d66:	9209      	str	r2, [sp, #36]	; 0x24
 8018d68:	2201      	movs	r2, #1
 8018d6a:	9208      	str	r2, [sp, #32]
 8018d6c:	2200      	movs	r2, #0
 8018d6e:	9207      	str	r2, [sp, #28]
 8018d70:	2200      	movs	r2, #0
 8018d72:	9206      	str	r2, [sp, #24]
 8018d74:	2200      	movs	r2, #0
 8018d76:	9205      	str	r2, [sp, #20]
 8018d78:	2200      	movs	r2, #0
 8018d7a:	9204      	str	r2, [sp, #16]
 8018d7c:	2200      	movs	r2, #0
 8018d7e:	9203      	str	r2, [sp, #12]
 8018d80:	9302      	str	r3, [sp, #8]
 8018d82:	2308      	movs	r3, #8
 8018d84:	9301      	str	r3, [sp, #4]
 8018d86:	2300      	movs	r3, #0
 8018d88:	9300      	str	r3, [sp, #0]
 8018d8a:	2301      	movs	r3, #1
 8018d8c:	460a      	mov	r2, r1
 8018d8e:	4629      	mov	r1, r5
 8018d90:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	7c5b      	ldrb	r3, [r3, #17]
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d005      	beq.n	8018da6 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8018d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d9e:	4a14      	ldr	r2, [pc, #80]	; (8018df0 <RegionEU868RxConfig+0x198>)
 8018da0:	5cd3      	ldrb	r3, [r2, r3]
 8018da2:	75bb      	strb	r3, [r7, #22]
 8018da4:	e004      	b.n	8018db0 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8018da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018daa:	4a12      	ldr	r2, [pc, #72]	; (8018df4 <RegionEU868RxConfig+0x19c>)
 8018dac:	5cd3      	ldrb	r3, [r2, r3]
 8018dae:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018db0:	4b0b      	ldr	r3, [pc, #44]	; (8018de0 <RegionEU868RxConfig+0x188>)
 8018db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018db4:	7dba      	ldrb	r2, [r7, #22]
 8018db6:	320d      	adds	r2, #13
 8018db8:	b2d1      	uxtb	r1, r2
 8018dba:	7dfa      	ldrb	r2, [r7, #23]
 8018dbc:	4610      	mov	r0, r2
 8018dbe:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	7cdb      	ldrb	r3, [r3, #19]
 8018dc4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018dc8:	6939      	ldr	r1, [r7, #16]
 8018dca:	4618      	mov	r0, r3
 8018dcc:	f7ff faaa 	bl	8018324 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8018dd0:	683b      	ldr	r3, [r7, #0]
 8018dd2:	7bfa      	ldrb	r2, [r7, #15]
 8018dd4:	701a      	strb	r2, [r3, #0]
    return true;
 8018dd6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8018dd8:	4618      	mov	r0, r3
 8018dda:	3718      	adds	r7, #24
 8018ddc:	46bd      	mov	sp, r7
 8018dde:	bdb0      	pop	{r4, r5, r7, pc}
 8018de0:	0801f374 	.word	0x0801f374
 8018de4:	20001dec 	.word	0x20001dec
 8018de8:	0801f33c 	.word	0x0801f33c
 8018dec:	00014585 	.word	0x00014585
 8018df0:	0801f36c 	.word	0x0801f36c
 8018df4:	0801f364 	.word	0x0801f364

08018df8 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018df8:	b590      	push	{r4, r7, lr}
 8018dfa:	b093      	sub	sp, #76	; 0x4c
 8018dfc:	af0a      	add	r7, sp, #40	; 0x28
 8018dfe:	60f8      	str	r0, [r7, #12]
 8018e00:	60b9      	str	r1, [r7, #8]
 8018e02:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018e0a:	461a      	mov	r2, r3
 8018e0c:	4b5d      	ldr	r3, [pc, #372]	; (8018f84 <RegionEU868TxConfig+0x18c>)
 8018e0e:	5c9b      	ldrb	r3, [r3, r2]
 8018e10:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8018e12:	68fb      	ldr	r3, [r7, #12]
 8018e14:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018e18:	4b5b      	ldr	r3, [pc, #364]	; (8018f88 <RegionEU868TxConfig+0x190>)
 8018e1a:	681a      	ldr	r2, [r3, #0]
 8018e1c:	4b5b      	ldr	r3, [pc, #364]	; (8018f8c <RegionEU868TxConfig+0x194>)
 8018e1e:	6819      	ldr	r1, [r3, #0]
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	781b      	ldrb	r3, [r3, #0]
 8018e24:	461c      	mov	r4, r3
 8018e26:	4623      	mov	r3, r4
 8018e28:	005b      	lsls	r3, r3, #1
 8018e2a:	4423      	add	r3, r4
 8018e2c:	009b      	lsls	r3, r3, #2
 8018e2e:	440b      	add	r3, r1
 8018e30:	3309      	adds	r3, #9
 8018e32:	781b      	ldrb	r3, [r3, #0]
 8018e34:	4619      	mov	r1, r3
 8018e36:	460b      	mov	r3, r1
 8018e38:	005b      	lsls	r3, r3, #1
 8018e3a:	440b      	add	r3, r1
 8018e3c:	00db      	lsls	r3, r3, #3
 8018e3e:	4413      	add	r3, r2
 8018e40:	3302      	adds	r3, #2
 8018e42:	f993 3000 	ldrsb.w	r3, [r3]
 8018e46:	4619      	mov	r1, r3
 8018e48:	f7ff fa39 	bl	80182be <RegionCommonLimitTxPower>
 8018e4c:	4603      	mov	r3, r0
 8018e4e:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018e56:	494e      	ldr	r1, [pc, #312]	; (8018f90 <RegionEU868TxConfig+0x198>)
 8018e58:	4618      	mov	r0, r3
 8018e5a:	f7ff fa45 	bl	80182e8 <RegionCommonGetBandwidth>
 8018e5e:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8018e60:	2300      	movs	r3, #0
 8018e62:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8018e64:	68fb      	ldr	r3, [r7, #12]
 8018e66:	6859      	ldr	r1, [r3, #4]
 8018e68:	68fb      	ldr	r3, [r7, #12]
 8018e6a:	689a      	ldr	r2, [r3, #8]
 8018e6c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8018e70:	4618      	mov	r0, r3
 8018e72:	f7ff f895 	bl	8017fa0 <RegionCommonComputeTxPower>
 8018e76:	4603      	mov	r3, r0
 8018e78:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8018e7a:	4b46      	ldr	r3, [pc, #280]	; (8018f94 <RegionEU868TxConfig+0x19c>)
 8018e7c:	68da      	ldr	r2, [r3, #12]
 8018e7e:	4b43      	ldr	r3, [pc, #268]	; (8018f8c <RegionEU868TxConfig+0x194>)
 8018e80:	6819      	ldr	r1, [r3, #0]
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	781b      	ldrb	r3, [r3, #0]
 8018e86:	4618      	mov	r0, r3
 8018e88:	4603      	mov	r3, r0
 8018e8a:	005b      	lsls	r3, r3, #1
 8018e8c:	4403      	add	r3, r0
 8018e8e:	009b      	lsls	r3, r3, #2
 8018e90:	440b      	add	r3, r1
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	4618      	mov	r0, r3
 8018e96:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018e9e:	2b07      	cmp	r3, #7
 8018ea0:	d124      	bne.n	8018eec <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8018ea6:	4b3b      	ldr	r3, [pc, #236]	; (8018f94 <RegionEU868TxConfig+0x19c>)
 8018ea8:	69dc      	ldr	r4, [r3, #28]
 8018eaa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018eae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018eb2:	fb02 f303 	mul.w	r3, r2, r3
 8018eb6:	461a      	mov	r2, r3
 8018eb8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018ebc:	7ff8      	ldrb	r0, [r7, #31]
 8018ebe:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8018ec2:	9308      	str	r3, [sp, #32]
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	9307      	str	r3, [sp, #28]
 8018ec8:	2300      	movs	r3, #0
 8018eca:	9306      	str	r3, [sp, #24]
 8018ecc:	2300      	movs	r3, #0
 8018ece:	9305      	str	r3, [sp, #20]
 8018ed0:	2301      	movs	r3, #1
 8018ed2:	9304      	str	r3, [sp, #16]
 8018ed4:	2300      	movs	r3, #0
 8018ed6:	9303      	str	r3, [sp, #12]
 8018ed8:	2305      	movs	r3, #5
 8018eda:	9302      	str	r3, [sp, #8]
 8018edc:	2300      	movs	r3, #0
 8018ede:	9301      	str	r3, [sp, #4]
 8018ee0:	9200      	str	r2, [sp, #0]
 8018ee2:	69bb      	ldr	r3, [r7, #24]
 8018ee4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8018ee8:	47a0      	blx	r4
 8018eea:	e01d      	b.n	8018f28 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8018eec:	2301      	movs	r3, #1
 8018eee:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018ef0:	4b28      	ldr	r3, [pc, #160]	; (8018f94 <RegionEU868TxConfig+0x19c>)
 8018ef2:	69dc      	ldr	r4, [r3, #28]
 8018ef4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018ef8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018efc:	7ff8      	ldrb	r0, [r7, #31]
 8018efe:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8018f02:	9208      	str	r2, [sp, #32]
 8018f04:	2200      	movs	r2, #0
 8018f06:	9207      	str	r2, [sp, #28]
 8018f08:	2200      	movs	r2, #0
 8018f0a:	9206      	str	r2, [sp, #24]
 8018f0c:	2200      	movs	r2, #0
 8018f0e:	9205      	str	r2, [sp, #20]
 8018f10:	2201      	movs	r2, #1
 8018f12:	9204      	str	r2, [sp, #16]
 8018f14:	2200      	movs	r2, #0
 8018f16:	9203      	str	r2, [sp, #12]
 8018f18:	2208      	movs	r2, #8
 8018f1a:	9202      	str	r2, [sp, #8]
 8018f1c:	2201      	movs	r2, #1
 8018f1e:	9201      	str	r2, [sp, #4]
 8018f20:	9300      	str	r3, [sp, #0]
 8018f22:	69bb      	ldr	r3, [r7, #24]
 8018f24:	2200      	movs	r2, #0
 8018f26:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8018f28:	4b18      	ldr	r3, [pc, #96]	; (8018f8c <RegionEU868TxConfig+0x194>)
 8018f2a:	681a      	ldr	r2, [r3, #0]
 8018f2c:	68fb      	ldr	r3, [r7, #12]
 8018f2e:	781b      	ldrb	r3, [r3, #0]
 8018f30:	4619      	mov	r1, r3
 8018f32:	460b      	mov	r3, r1
 8018f34:	005b      	lsls	r3, r3, #1
 8018f36:	440b      	add	r3, r1
 8018f38:	009b      	lsls	r3, r3, #2
 8018f3a:	4413      	add	r3, r2
 8018f3c:	681a      	ldr	r2, [r3, #0]
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018f44:	4619      	mov	r1, r3
 8018f46:	4610      	mov	r0, r2
 8018f48:	f7ff fa1e 	bl	8018388 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	899b      	ldrh	r3, [r3, #12]
 8018f56:	4619      	mov	r1, r3
 8018f58:	4610      	mov	r0, r2
 8018f5a:	f7ff faa3 	bl	80184a4 <GetTimeOnAir>
 8018f5e:	4602      	mov	r2, r0
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8018f64:	4b0b      	ldr	r3, [pc, #44]	; (8018f94 <RegionEU868TxConfig+0x19c>)
 8018f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018f68:	68fa      	ldr	r2, [r7, #12]
 8018f6a:	8992      	ldrh	r2, [r2, #12]
 8018f6c:	b2d1      	uxtb	r1, r2
 8018f6e:	7ffa      	ldrb	r2, [r7, #31]
 8018f70:	4610      	mov	r0, r2
 8018f72:	4798      	blx	r3

    *txPower = txPowerLimited;
 8018f74:	68bb      	ldr	r3, [r7, #8]
 8018f76:	7f7a      	ldrb	r2, [r7, #29]
 8018f78:	701a      	strb	r2, [r3, #0]
    return true;
 8018f7a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	3724      	adds	r7, #36	; 0x24
 8018f80:	46bd      	mov	sp, r7
 8018f82:	bd90      	pop	{r4, r7, pc}
 8018f84:	0801f33c 	.word	0x0801f33c
 8018f88:	20001de8 	.word	0x20001de8
 8018f8c:	20001dec 	.word	0x20001dec
 8018f90:	0801f344 	.word	0x0801f344
 8018f94:	0801f374 	.word	0x0801f374

08018f98 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8018f98:	b590      	push	{r4, r7, lr}
 8018f9a:	b093      	sub	sp, #76	; 0x4c
 8018f9c:	af00      	add	r7, sp, #0
 8018f9e:	60f8      	str	r0, [r7, #12]
 8018fa0:	60b9      	str	r1, [r7, #8]
 8018fa2:	607a      	str	r2, [r7, #4]
 8018fa4:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8018fa6:	2307      	movs	r3, #7
 8018fa8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018fac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018fb0:	2200      	movs	r2, #0
 8018fb2:	601a      	str	r2, [r3, #0]
 8018fb4:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8018fb6:	2300      	movs	r3, #0
 8018fb8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8018fbc:	2300      	movs	r3, #0
 8018fbe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8018fc2:	2300      	movs	r3, #0
 8018fc4:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018fc6:	e085      	b.n	80190d4 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	685a      	ldr	r2, [r3, #4]
 8018fcc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8018fd0:	4413      	add	r3, r2
 8018fd2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8018fd6:	4611      	mov	r1, r2
 8018fd8:	4618      	mov	r0, r3
 8018fda:	f7fe fe29 	bl	8017c30 <RegionCommonParseLinkAdrReq>
 8018fde:	4603      	mov	r3, r0
 8018fe0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8018fe4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d07b      	beq.n	80190e4 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8018fec:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8018ff0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8018ff4:	4413      	add	r3, r2
 8018ff6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8018ffa:	2307      	movs	r3, #7
 8018ffc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8019000:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019004:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8019006:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801900a:	2b00      	cmp	r3, #0
 801900c:	d109      	bne.n	8019022 <RegionEU868LinkAdrReq+0x8a>
 801900e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019010:	2b00      	cmp	r3, #0
 8019012:	d106      	bne.n	8019022 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8019014:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019018:	f023 0301 	bic.w	r3, r3, #1
 801901c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019020:	e058      	b.n	80190d4 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019022:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019026:	2b00      	cmp	r3, #0
 8019028:	d003      	beq.n	8019032 <RegionEU868LinkAdrReq+0x9a>
 801902a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801902e:	2b05      	cmp	r3, #5
 8019030:	d903      	bls.n	801903a <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8019032:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019036:	2b06      	cmp	r3, #6
 8019038:	d906      	bls.n	8019048 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801903a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801903e:	f023 0301 	bic.w	r3, r3, #1
 8019042:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019046:	e045      	b.n	80190d4 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019048:	2300      	movs	r3, #0
 801904a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801904e:	e03d      	b.n	80190cc <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8019050:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019054:	2b06      	cmp	r3, #6
 8019056:	d118      	bne.n	801908a <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8019058:	4b5f      	ldr	r3, [pc, #380]	; (80191d8 <RegionEU868LinkAdrReq+0x240>)
 801905a:	6819      	ldr	r1, [r3, #0]
 801905c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019060:	4613      	mov	r3, r2
 8019062:	005b      	lsls	r3, r3, #1
 8019064:	4413      	add	r3, r2
 8019066:	009b      	lsls	r3, r3, #2
 8019068:	440b      	add	r3, r1
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	2b00      	cmp	r3, #0
 801906e:	d028      	beq.n	80190c2 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8019070:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019074:	2201      	movs	r2, #1
 8019076:	fa02 f303 	lsl.w	r3, r2, r3
 801907a:	b21a      	sxth	r2, r3
 801907c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801907e:	b21b      	sxth	r3, r3
 8019080:	4313      	orrs	r3, r2
 8019082:	b21b      	sxth	r3, r3
 8019084:	b29b      	uxth	r3, r3
 8019086:	877b      	strh	r3, [r7, #58]	; 0x3a
 8019088:	e01b      	b.n	80190c2 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801908a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801908c:	461a      	mov	r2, r3
 801908e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019092:	fa42 f303 	asr.w	r3, r2, r3
 8019096:	f003 0301 	and.w	r3, r3, #1
 801909a:	2b00      	cmp	r3, #0
 801909c:	d011      	beq.n	80190c2 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801909e:	4b4e      	ldr	r3, [pc, #312]	; (80191d8 <RegionEU868LinkAdrReq+0x240>)
 80190a0:	6819      	ldr	r1, [r3, #0]
 80190a2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80190a6:	4613      	mov	r3, r2
 80190a8:	005b      	lsls	r3, r3, #1
 80190aa:	4413      	add	r3, r2
 80190ac:	009b      	lsls	r3, r3, #2
 80190ae:	440b      	add	r3, r1
 80190b0:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d105      	bne.n	80190c2 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80190b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80190ba:	f023 0301 	bic.w	r3, r3, #1
 80190be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80190c2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80190c6:	3301      	adds	r3, #1
 80190c8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80190cc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80190d0:	2b0f      	cmp	r3, #15
 80190d2:	d9bd      	bls.n	8019050 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	7a1b      	ldrb	r3, [r3, #8]
 80190d8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80190dc:	429a      	cmp	r2, r3
 80190de:	f4ff af73 	bcc.w	8018fc8 <RegionEU868LinkAdrReq+0x30>
 80190e2:	e000      	b.n	80190e6 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80190e4:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80190e6:	2302      	movs	r3, #2
 80190e8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80190ec:	68fb      	ldr	r3, [r7, #12]
 80190ee:	7a5b      	ldrb	r3, [r3, #9]
 80190f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80190f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80190f8:	4618      	mov	r0, r3
 80190fa:	f7ff fa23 	bl	8018544 <RegionEU868GetPhyParam>
 80190fe:	4603      	mov	r3, r0
 8019100:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8019102:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019106:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	7a9b      	ldrb	r3, [r3, #10]
 801910c:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801910e:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8019112:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019114:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8019118:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801911a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801911e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8019126:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8019128:	68fb      	ldr	r3, [r7, #12]
 801912a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801912e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	7b5b      	ldrb	r3, [r3, #13]
 8019134:	b25b      	sxtb	r3, r3
 8019136:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8019138:	2310      	movs	r3, #16
 801913a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801913c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8019140:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8019142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019144:	b25b      	sxtb	r3, r3
 8019146:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801914a:	2307      	movs	r3, #7
 801914c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8019150:	4b21      	ldr	r3, [pc, #132]	; (80191d8 <RegionEU868LinkAdrReq+0x240>)
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8019156:	2307      	movs	r3, #7
 8019158:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801915c:	2300      	movs	r3, #0
 801915e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019168:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801916c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019170:	1c9a      	adds	r2, r3, #2
 8019172:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019176:	1c59      	adds	r1, r3, #1
 8019178:	f107 0010 	add.w	r0, r7, #16
 801917c:	4623      	mov	r3, r4
 801917e:	f7fe fda8 	bl	8017cd2 <RegionCommonLinkAdrReqVerifyParams>
 8019182:	4603      	mov	r3, r0
 8019184:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8019188:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801918c:	2b07      	cmp	r3, #7
 801918e:	d10d      	bne.n	80191ac <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8019190:	4b11      	ldr	r3, [pc, #68]	; (80191d8 <RegionEU868LinkAdrReq+0x240>)
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019198:	220c      	movs	r2, #12
 801919a:	2100      	movs	r1, #0
 801919c:	4618      	mov	r0, r3
 801919e:	f000 fb7d 	bl	801989c <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80191a2:	4b0d      	ldr	r3, [pc, #52]	; (80191d8 <RegionEU868LinkAdrReq+0x240>)
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80191a8:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80191ac:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 80191b0:	68bb      	ldr	r3, [r7, #8]
 80191b2:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80191b4:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80191bc:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80191c0:	683b      	ldr	r3, [r7, #0]
 80191c2:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80191c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80191c6:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80191ca:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80191cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80191d0:	4618      	mov	r0, r3
 80191d2:	374c      	adds	r7, #76	; 0x4c
 80191d4:	46bd      	mov	sp, r7
 80191d6:	bd90      	pop	{r4, r7, pc}
 80191d8:	20001dec 	.word	0x20001dec

080191dc <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b084      	sub	sp, #16
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80191e4:	2307      	movs	r3, #7
 80191e6:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80191e8:	2300      	movs	r3, #0
 80191ea:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	685b      	ldr	r3, [r3, #4]
 80191f0:	f107 020e 	add.w	r2, r7, #14
 80191f4:	4611      	mov	r1, r2
 80191f6:	4618      	mov	r0, r3
 80191f8:	f7ff f8de 	bl	80183b8 <VerifyRfFreq>
 80191fc:	4603      	mov	r3, r0
 80191fe:	f083 0301 	eor.w	r3, r3, #1
 8019202:	b2db      	uxtb	r3, r3
 8019204:	2b00      	cmp	r3, #0
 8019206:	d003      	beq.n	8019210 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8019208:	7bfb      	ldrb	r3, [r7, #15]
 801920a:	f023 0301 	bic.w	r3, r3, #1
 801920e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	f993 3000 	ldrsb.w	r3, [r3]
 8019216:	2207      	movs	r2, #7
 8019218:	2100      	movs	r1, #0
 801921a:	4618      	mov	r0, r3
 801921c:	f7fe fb47 	bl	80178ae <RegionCommonValueInRange>
 8019220:	4603      	mov	r3, r0
 8019222:	2b00      	cmp	r3, #0
 8019224:	d103      	bne.n	801922e <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8019226:	7bfb      	ldrb	r3, [r7, #15]
 8019228:	f023 0302 	bic.w	r3, r3, #2
 801922c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019234:	2205      	movs	r2, #5
 8019236:	2100      	movs	r1, #0
 8019238:	4618      	mov	r0, r3
 801923a:	f7fe fb38 	bl	80178ae <RegionCommonValueInRange>
 801923e:	4603      	mov	r3, r0
 8019240:	2b00      	cmp	r3, #0
 8019242:	d103      	bne.n	801924c <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019244:	7bfb      	ldrb	r3, [r7, #15]
 8019246:	f023 0304 	bic.w	r3, r3, #4
 801924a:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 801924c:	7bfb      	ldrb	r3, [r7, #15]
}
 801924e:	4618      	mov	r0, r3
 8019250:	3710      	adds	r7, #16
 8019252:	46bd      	mov	sp, r7
 8019254:	bd80      	pop	{r7, pc}
	...

08019258 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019258:	b580      	push	{r7, lr}
 801925a:	b086      	sub	sp, #24
 801925c:	af00      	add	r7, sp, #0
 801925e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019260:	2303      	movs	r3, #3
 8019262:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	2b00      	cmp	r3, #0
 801926c:	d114      	bne.n	8019298 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019274:	b2db      	uxtb	r3, r3
 8019276:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8019278:	f107 0308 	add.w	r3, r7, #8
 801927c:	4618      	mov	r0, r3
 801927e:	f000 f9f9 	bl	8019674 <RegionEU868ChannelsRemove>
 8019282:	4603      	mov	r3, r0
 8019284:	f083 0301 	eor.w	r3, r3, #1
 8019288:	b2db      	uxtb	r3, r3
 801928a:	2b00      	cmp	r3, #0
 801928c:	d03b      	beq.n	8019306 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801928e:	7dfb      	ldrb	r3, [r7, #23]
 8019290:	f023 0303 	bic.w	r3, r3, #3
 8019294:	75fb      	strb	r3, [r7, #23]
 8019296:	e036      	b.n	8019306 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80192a4:	b2db      	uxtb	r3, r3
 80192a6:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80192a8:	f107 030c 	add.w	r3, r7, #12
 80192ac:	4618      	mov	r0, r3
 80192ae:	f000 f93f 	bl	8019530 <RegionEU868ChannelAdd>
 80192b2:	4603      	mov	r3, r0
 80192b4:	2b06      	cmp	r3, #6
 80192b6:	d820      	bhi.n	80192fa <RegionEU868NewChannelReq+0xa2>
 80192b8:	a201      	add	r2, pc, #4	; (adr r2, 80192c0 <RegionEU868NewChannelReq+0x68>)
 80192ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80192be:	bf00      	nop
 80192c0:	08019305 	.word	0x08019305
 80192c4:	080192fb 	.word	0x080192fb
 80192c8:	080192fb 	.word	0x080192fb
 80192cc:	080192fb 	.word	0x080192fb
 80192d0:	080192dd 	.word	0x080192dd
 80192d4:	080192e7 	.word	0x080192e7
 80192d8:	080192f1 	.word	0x080192f1
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80192dc:	7dfb      	ldrb	r3, [r7, #23]
 80192de:	f023 0301 	bic.w	r3, r3, #1
 80192e2:	75fb      	strb	r3, [r7, #23]
                break;
 80192e4:	e00f      	b.n	8019306 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80192e6:	7dfb      	ldrb	r3, [r7, #23]
 80192e8:	f023 0302 	bic.w	r3, r3, #2
 80192ec:	75fb      	strb	r3, [r7, #23]
                break;
 80192ee:	e00a      	b.n	8019306 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80192f0:	7dfb      	ldrb	r3, [r7, #23]
 80192f2:	f023 0303 	bic.w	r3, r3, #3
 80192f6:	75fb      	strb	r3, [r7, #23]
                break;
 80192f8:	e005      	b.n	8019306 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80192fa:	7dfb      	ldrb	r3, [r7, #23]
 80192fc:	f023 0303 	bic.w	r3, r3, #3
 8019300:	75fb      	strb	r3, [r7, #23]
                break;
 8019302:	e000      	b.n	8019306 <RegionEU868NewChannelReq+0xae>
                break;
 8019304:	bf00      	nop
            }
        }
    }

    return status;
 8019306:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801930a:	4618      	mov	r0, r3
 801930c:	3718      	adds	r7, #24
 801930e:	46bd      	mov	sp, r7
 8019310:	bd80      	pop	{r7, pc}
 8019312:	bf00      	nop

08019314 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019314:	b480      	push	{r7}
 8019316:	b083      	sub	sp, #12
 8019318:	af00      	add	r7, sp, #0
 801931a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801931c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019320:	4618      	mov	r0, r3
 8019322:	370c      	adds	r7, #12
 8019324:	46bd      	mov	sp, r7
 8019326:	bc80      	pop	{r7}
 8019328:	4770      	bx	lr
	...

0801932c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801932c:	b580      	push	{r7, lr}
 801932e:	b084      	sub	sp, #16
 8019330:	af00      	add	r7, sp, #0
 8019332:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019334:	2303      	movs	r3, #3
 8019336:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019338:	2300      	movs	r3, #0
 801933a:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	685b      	ldr	r3, [r3, #4]
 8019340:	f107 020e 	add.w	r2, r7, #14
 8019344:	4611      	mov	r1, r2
 8019346:	4618      	mov	r0, r3
 8019348:	f7ff f836 	bl	80183b8 <VerifyRfFreq>
 801934c:	4603      	mov	r3, r0
 801934e:	f083 0301 	eor.w	r3, r3, #1
 8019352:	b2db      	uxtb	r3, r3
 8019354:	2b00      	cmp	r3, #0
 8019356:	d003      	beq.n	8019360 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8019358:	7bfb      	ldrb	r3, [r7, #15]
 801935a:	f023 0301 	bic.w	r3, r3, #1
 801935e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8019360:	4b13      	ldr	r3, [pc, #76]	; (80193b0 <RegionEU868DlChannelReq+0x84>)
 8019362:	681a      	ldr	r2, [r3, #0]
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	781b      	ldrb	r3, [r3, #0]
 8019368:	4619      	mov	r1, r3
 801936a:	460b      	mov	r3, r1
 801936c:	005b      	lsls	r3, r3, #1
 801936e:	440b      	add	r3, r1
 8019370:	009b      	lsls	r3, r3, #2
 8019372:	4413      	add	r3, r2
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	2b00      	cmp	r3, #0
 8019378:	d103      	bne.n	8019382 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 801937a:	7bfb      	ldrb	r3, [r7, #15]
 801937c:	f023 0302 	bic.w	r3, r3, #2
 8019380:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8019382:	7bfb      	ldrb	r3, [r7, #15]
 8019384:	2b03      	cmp	r3, #3
 8019386:	d10d      	bne.n	80193a4 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8019388:	4b09      	ldr	r3, [pc, #36]	; (80193b0 <RegionEU868DlChannelReq+0x84>)
 801938a:	6819      	ldr	r1, [r3, #0]
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	781b      	ldrb	r3, [r3, #0]
 8019390:	4618      	mov	r0, r3
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	685a      	ldr	r2, [r3, #4]
 8019396:	4603      	mov	r3, r0
 8019398:	005b      	lsls	r3, r3, #1
 801939a:	4403      	add	r3, r0
 801939c:	009b      	lsls	r3, r3, #2
 801939e:	440b      	add	r3, r1
 80193a0:	3304      	adds	r3, #4
 80193a2:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 80193a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80193a8:	4618      	mov	r0, r3
 80193aa:	3710      	adds	r7, #16
 80193ac:	46bd      	mov	sp, r7
 80193ae:	bd80      	pop	{r7, pc}
 80193b0:	20001dec 	.word	0x20001dec

080193b4 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80193b4:	b480      	push	{r7}
 80193b6:	b083      	sub	sp, #12
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	4603      	mov	r3, r0
 80193bc:	460a      	mov	r2, r1
 80193be:	71fb      	strb	r3, [r7, #7]
 80193c0:	4613      	mov	r3, r2
 80193c2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 80193c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 80193c8:	4618      	mov	r0, r3
 80193ca:	370c      	adds	r7, #12
 80193cc:	46bd      	mov	sp, r7
 80193ce:	bc80      	pop	{r7}
 80193d0:	4770      	bx	lr
	...

080193d4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80193d4:	b580      	push	{r7, lr}
 80193d6:	b09a      	sub	sp, #104	; 0x68
 80193d8:	af02      	add	r7, sp, #8
 80193da:	60f8      	str	r0, [r7, #12]
 80193dc:	60b9      	str	r1, [r7, #8]
 80193de:	607a      	str	r2, [r7, #4]
 80193e0:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80193e2:	2300      	movs	r3, #0
 80193e4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 80193e8:	2300      	movs	r3, #0
 80193ea:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80193ee:	2300      	movs	r3, #0
 80193f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80193f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80193f6:	2200      	movs	r2, #0
 80193f8:	601a      	str	r2, [r3, #0]
 80193fa:	605a      	str	r2, [r3, #4]
 80193fc:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80193fe:	230c      	movs	r3, #12
 8019400:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8019404:	2307      	movs	r3, #7
 8019406:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8019408:	4b47      	ldr	r3, [pc, #284]	; (8019528 <RegionEU868NextChannel+0x154>)
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019410:	2201      	movs	r2, #1
 8019412:	2100      	movs	r1, #0
 8019414:	4618      	mov	r0, r3
 8019416:	f7fe fa9b 	bl	8017950 <RegionCommonCountChannels>
 801941a:	4603      	mov	r3, r0
 801941c:	2b00      	cmp	r3, #0
 801941e:	d10a      	bne.n	8019436 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019420:	4b41      	ldr	r3, [pc, #260]	; (8019528 <RegionEU868NextChannel+0x154>)
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8019428:	4b3f      	ldr	r3, [pc, #252]	; (8019528 <RegionEU868NextChannel+0x154>)
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	f042 0207 	orr.w	r2, r2, #7
 8019430:	b292      	uxth	r2, r2
 8019432:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	7a5b      	ldrb	r3, [r3, #9]
 801943a:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019442:	b2db      	uxtb	r3, r3
 8019444:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8019446:	4b38      	ldr	r3, [pc, #224]	; (8019528 <RegionEU868NextChannel+0x154>)
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801944e:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8019450:	4b35      	ldr	r3, [pc, #212]	; (8019528 <RegionEU868NextChannel+0x154>)
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8019456:	4b35      	ldr	r3, [pc, #212]	; (801952c <RegionEU868NextChannel+0x158>)
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801945c:	2310      	movs	r3, #16
 801945e:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8019460:	f107 0312 	add.w	r3, r7, #18
 8019464:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801946c:	68fb      	ldr	r3, [r7, #12]
 801946e:	685b      	ldr	r3, [r3, #4]
 8019470:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	7a9b      	ldrb	r3, [r3, #10]
 8019476:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801947a:	2306      	movs	r3, #6
 801947c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8019480:	68fa      	ldr	r2, [r7, #12]
 8019482:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019486:	320c      	adds	r2, #12
 8019488:	e892 0003 	ldmia.w	r2, {r0, r1}
 801948c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	7d1b      	ldrb	r3, [r3, #20]
 8019494:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8019498:	68fb      	ldr	r3, [r7, #12]
 801949a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801949e:	68fb      	ldr	r3, [r7, #12]
 80194a0:	8adb      	ldrh	r3, [r3, #22]
 80194a2:	4619      	mov	r1, r3
 80194a4:	4610      	mov	r0, r2
 80194a6:	f7fe fffd 	bl	80184a4 <GetTimeOnAir>
 80194aa:	4603      	mov	r3, r0
 80194ac:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80194ae:	f107 0314 	add.w	r3, r7, #20
 80194b2:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80194b4:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 80194b8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80194bc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	9301      	str	r3, [sp, #4]
 80194c4:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 80194c8:	9300      	str	r3, [sp, #0]
 80194ca:	460b      	mov	r3, r1
 80194cc:	6839      	ldr	r1, [r7, #0]
 80194ce:	f7fe fe56 	bl	801817e <RegionCommonIdentifyChannels>
 80194d2:	4603      	mov	r3, r0
 80194d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80194d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d10e      	bne.n	80194fe <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80194e0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80194e4:	3b01      	subs	r3, #1
 80194e6:	4619      	mov	r1, r3
 80194e8:	2000      	movs	r0, #0
 80194ea:	f000 f985 	bl	80197f8 <randr>
 80194ee:	4603      	mov	r3, r0
 80194f0:	3360      	adds	r3, #96	; 0x60
 80194f2:	443b      	add	r3, r7
 80194f4:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80194f8:	68bb      	ldr	r3, [r7, #8]
 80194fa:	701a      	strb	r2, [r3, #0]
 80194fc:	e00e      	b.n	801951c <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80194fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019502:	2b0c      	cmp	r3, #12
 8019504:	d10a      	bne.n	801951c <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019506:	4b08      	ldr	r3, [pc, #32]	; (8019528 <RegionEU868NextChannel+0x154>)
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 801950e:	4b06      	ldr	r3, [pc, #24]	; (8019528 <RegionEU868NextChannel+0x154>)
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	f042 0207 	orr.w	r2, r2, #7
 8019516:	b292      	uxth	r2, r2
 8019518:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 801951c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019520:	4618      	mov	r0, r3
 8019522:	3760      	adds	r7, #96	; 0x60
 8019524:	46bd      	mov	sp, r7
 8019526:	bd80      	pop	{r7, pc}
 8019528:	20001dec 	.word	0x20001dec
 801952c:	20001de8 	.word	0x20001de8

08019530 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019530:	b580      	push	{r7, lr}
 8019532:	b084      	sub	sp, #16
 8019534:	af00      	add	r7, sp, #0
 8019536:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019538:	2300      	movs	r3, #0
 801953a:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 801953c:	2300      	movs	r3, #0
 801953e:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8019540:	2300      	movs	r3, #0
 8019542:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	791b      	ldrb	r3, [r3, #4]
 8019548:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801954a:	7b7b      	ldrb	r3, [r7, #13]
 801954c:	2b02      	cmp	r3, #2
 801954e:	d801      	bhi.n	8019554 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019550:	2306      	movs	r3, #6
 8019552:	e089      	b.n	8019668 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8019554:	7b7b      	ldrb	r3, [r7, #13]
 8019556:	2b0f      	cmp	r3, #15
 8019558:	d901      	bls.n	801955e <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801955a:	2303      	movs	r3, #3
 801955c:	e084      	b.n	8019668 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	7a1b      	ldrb	r3, [r3, #8]
 8019564:	f343 0303 	sbfx	r3, r3, #0, #4
 8019568:	b25b      	sxtb	r3, r3
 801956a:	2207      	movs	r2, #7
 801956c:	2100      	movs	r1, #0
 801956e:	4618      	mov	r0, r3
 8019570:	f7fe f99d 	bl	80178ae <RegionCommonValueInRange>
 8019574:	4603      	mov	r3, r0
 8019576:	2b00      	cmp	r3, #0
 8019578:	d101      	bne.n	801957e <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801957a:	2301      	movs	r3, #1
 801957c:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	7a1b      	ldrb	r3, [r3, #8]
 8019584:	f343 1303 	sbfx	r3, r3, #4, #4
 8019588:	b25b      	sxtb	r3, r3
 801958a:	2207      	movs	r2, #7
 801958c:	2100      	movs	r1, #0
 801958e:	4618      	mov	r0, r3
 8019590:	f7fe f98d 	bl	80178ae <RegionCommonValueInRange>
 8019594:	4603      	mov	r3, r0
 8019596:	2b00      	cmp	r3, #0
 8019598:	d101      	bne.n	801959e <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801959a:	2301      	movs	r3, #1
 801959c:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	7a1b      	ldrb	r3, [r3, #8]
 80195a4:	f343 0303 	sbfx	r3, r3, #0, #4
 80195a8:	b25a      	sxtb	r2, r3
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	7a1b      	ldrb	r3, [r3, #8]
 80195b0:	f343 1303 	sbfx	r3, r3, #4, #4
 80195b4:	b25b      	sxtb	r3, r3
 80195b6:	429a      	cmp	r2, r3
 80195b8:	dd01      	ble.n	80195be <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 80195ba:	2301      	movs	r3, #1
 80195bc:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 80195be:	7bbb      	ldrb	r3, [r7, #14]
 80195c0:	f083 0301 	eor.w	r3, r3, #1
 80195c4:	b2db      	uxtb	r3, r3
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d010      	beq.n	80195ec <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	f107 020c 	add.w	r2, r7, #12
 80195d4:	4611      	mov	r1, r2
 80195d6:	4618      	mov	r0, r3
 80195d8:	f7fe feee 	bl	80183b8 <VerifyRfFreq>
 80195dc:	4603      	mov	r3, r0
 80195de:	f083 0301 	eor.w	r3, r3, #1
 80195e2:	b2db      	uxtb	r3, r3
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d001      	beq.n	80195ec <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80195e8:	2301      	movs	r3, #1
 80195ea:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80195ec:	7bfb      	ldrb	r3, [r7, #15]
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d004      	beq.n	80195fc <RegionEU868ChannelAdd+0xcc>
 80195f2:	7bbb      	ldrb	r3, [r7, #14]
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d001      	beq.n	80195fc <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80195f8:	2306      	movs	r3, #6
 80195fa:	e035      	b.n	8019668 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80195fc:	7bfb      	ldrb	r3, [r7, #15]
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d001      	beq.n	8019606 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019602:	2305      	movs	r3, #5
 8019604:	e030      	b.n	8019668 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8019606:	7bbb      	ldrb	r3, [r7, #14]
 8019608:	2b00      	cmp	r3, #0
 801960a:	d001      	beq.n	8019610 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801960c:	2304      	movs	r3, #4
 801960e:	e02b      	b.n	8019668 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8019610:	4b17      	ldr	r3, [pc, #92]	; (8019670 <RegionEU868ChannelAdd+0x140>)
 8019612:	6819      	ldr	r1, [r3, #0]
 8019614:	7b7a      	ldrb	r2, [r7, #13]
 8019616:	4613      	mov	r3, r2
 8019618:	005b      	lsls	r3, r3, #1
 801961a:	4413      	add	r3, r2
 801961c:	009b      	lsls	r3, r3, #2
 801961e:	18c8      	adds	r0, r1, r3
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	220c      	movs	r2, #12
 8019626:	4619      	mov	r1, r3
 8019628:	f000 f8fd 	bl	8019826 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801962c:	4b10      	ldr	r3, [pc, #64]	; (8019670 <RegionEU868ChannelAdd+0x140>)
 801962e:	6819      	ldr	r1, [r3, #0]
 8019630:	7b7a      	ldrb	r2, [r7, #13]
 8019632:	7b38      	ldrb	r0, [r7, #12]
 8019634:	4613      	mov	r3, r2
 8019636:	005b      	lsls	r3, r3, #1
 8019638:	4413      	add	r3, r2
 801963a:	009b      	lsls	r3, r3, #2
 801963c:	440b      	add	r3, r1
 801963e:	3309      	adds	r3, #9
 8019640:	4602      	mov	r2, r0
 8019642:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8019644:	4b0a      	ldr	r3, [pc, #40]	; (8019670 <RegionEU868ChannelAdd+0x140>)
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 801964c:	b21a      	sxth	r2, r3
 801964e:	7b7b      	ldrb	r3, [r7, #13]
 8019650:	2101      	movs	r1, #1
 8019652:	fa01 f303 	lsl.w	r3, r1, r3
 8019656:	b21b      	sxth	r3, r3
 8019658:	4313      	orrs	r3, r2
 801965a:	b21a      	sxth	r2, r3
 801965c:	4b04      	ldr	r3, [pc, #16]	; (8019670 <RegionEU868ChannelAdd+0x140>)
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	b292      	uxth	r2, r2
 8019662:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8019666:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019668:	4618      	mov	r0, r3
 801966a:	3710      	adds	r7, #16
 801966c:	46bd      	mov	sp, r7
 801966e:	bd80      	pop	{r7, pc}
 8019670:	20001dec 	.word	0x20001dec

08019674 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019674:	b580      	push	{r7, lr}
 8019676:	b086      	sub	sp, #24
 8019678:	af00      	add	r7, sp, #0
 801967a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	781b      	ldrb	r3, [r3, #0]
 8019680:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019682:	7dfb      	ldrb	r3, [r7, #23]
 8019684:	2b02      	cmp	r3, #2
 8019686:	d801      	bhi.n	801968c <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8019688:	2300      	movs	r3, #0
 801968a:	e016      	b.n	80196ba <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801968c:	4b0d      	ldr	r3, [pc, #52]	; (80196c4 <RegionEU868ChannelsRemove+0x50>)
 801968e:	6819      	ldr	r1, [r3, #0]
 8019690:	7dfa      	ldrb	r2, [r7, #23]
 8019692:	4613      	mov	r3, r2
 8019694:	005b      	lsls	r3, r3, #1
 8019696:	4413      	add	r3, r2
 8019698:	009b      	lsls	r3, r3, #2
 801969a:	440b      	add	r3, r1
 801969c:	461a      	mov	r2, r3
 801969e:	2300      	movs	r3, #0
 80196a0:	6013      	str	r3, [r2, #0]
 80196a2:	6053      	str	r3, [r2, #4]
 80196a4:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80196a6:	4b07      	ldr	r3, [pc, #28]	; (80196c4 <RegionEU868ChannelsRemove+0x50>)
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80196ae:	7df9      	ldrb	r1, [r7, #23]
 80196b0:	2210      	movs	r2, #16
 80196b2:	4618      	mov	r0, r3
 80196b4:	f7fe f918 	bl	80178e8 <RegionCommonChanDisable>
 80196b8:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 80196ba:	4618      	mov	r0, r3
 80196bc:	3718      	adds	r7, #24
 80196be:	46bd      	mov	sp, r7
 80196c0:	bd80      	pop	{r7, pc}
 80196c2:	bf00      	nop
 80196c4:	20001dec 	.word	0x20001dec

080196c8 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80196c8:	b590      	push	{r4, r7, lr}
 80196ca:	b085      	sub	sp, #20
 80196cc:	af00      	add	r7, sp, #0
 80196ce:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80196d6:	4b20      	ldr	r3, [pc, #128]	; (8019758 <RegionEU868SetContinuousWave+0x90>)
 80196d8:	681a      	ldr	r2, [r3, #0]
 80196da:	4b20      	ldr	r3, [pc, #128]	; (801975c <RegionEU868SetContinuousWave+0x94>)
 80196dc:	6819      	ldr	r1, [r3, #0]
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	781b      	ldrb	r3, [r3, #0]
 80196e2:	461c      	mov	r4, r3
 80196e4:	4623      	mov	r3, r4
 80196e6:	005b      	lsls	r3, r3, #1
 80196e8:	4423      	add	r3, r4
 80196ea:	009b      	lsls	r3, r3, #2
 80196ec:	440b      	add	r3, r1
 80196ee:	3309      	adds	r3, #9
 80196f0:	781b      	ldrb	r3, [r3, #0]
 80196f2:	4619      	mov	r1, r3
 80196f4:	460b      	mov	r3, r1
 80196f6:	005b      	lsls	r3, r3, #1
 80196f8:	440b      	add	r3, r1
 80196fa:	00db      	lsls	r3, r3, #3
 80196fc:	4413      	add	r3, r2
 80196fe:	3302      	adds	r3, #2
 8019700:	f993 3000 	ldrsb.w	r3, [r3]
 8019704:	4619      	mov	r1, r3
 8019706:	f7fe fdda 	bl	80182be <RegionCommonLimitTxPower>
 801970a:	4603      	mov	r3, r0
 801970c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801970e:	2300      	movs	r3, #0
 8019710:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8019712:	4b12      	ldr	r3, [pc, #72]	; (801975c <RegionEU868SetContinuousWave+0x94>)
 8019714:	681a      	ldr	r2, [r3, #0]
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	781b      	ldrb	r3, [r3, #0]
 801971a:	4619      	mov	r1, r3
 801971c:	460b      	mov	r3, r1
 801971e:	005b      	lsls	r3, r3, #1
 8019720:	440b      	add	r3, r1
 8019722:	009b      	lsls	r3, r3, #2
 8019724:	4413      	add	r3, r2
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	6859      	ldr	r1, [r3, #4]
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	689a      	ldr	r2, [r3, #8]
 8019732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019736:	4618      	mov	r0, r3
 8019738:	f7fe fc32 	bl	8017fa0 <RegionCommonComputeTxPower>
 801973c:	4603      	mov	r3, r0
 801973e:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8019740:	4b07      	ldr	r3, [pc, #28]	; (8019760 <RegionEU868SetContinuousWave+0x98>)
 8019742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019744:	687a      	ldr	r2, [r7, #4]
 8019746:	8992      	ldrh	r2, [r2, #12]
 8019748:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801974c:	68b8      	ldr	r0, [r7, #8]
 801974e:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8019750:	bf00      	nop
 8019752:	3714      	adds	r7, #20
 8019754:	46bd      	mov	sp, r7
 8019756:	bd90      	pop	{r4, r7, pc}
 8019758:	20001de8 	.word	0x20001de8
 801975c:	20001dec 	.word	0x20001dec
 8019760:	0801f374 	.word	0x0801f374

08019764 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019764:	b480      	push	{r7}
 8019766:	b085      	sub	sp, #20
 8019768:	af00      	add	r7, sp, #0
 801976a:	4603      	mov	r3, r0
 801976c:	71fb      	strb	r3, [r7, #7]
 801976e:	460b      	mov	r3, r1
 8019770:	71bb      	strb	r3, [r7, #6]
 8019772:	4613      	mov	r3, r2
 8019774:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8019776:	79ba      	ldrb	r2, [r7, #6]
 8019778:	797b      	ldrb	r3, [r7, #5]
 801977a:	1ad3      	subs	r3, r2, r3
 801977c:	b2db      	uxtb	r3, r3
 801977e:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8019780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019784:	2b00      	cmp	r3, #0
 8019786:	da01      	bge.n	801978c <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8019788:	2300      	movs	r3, #0
 801978a:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801978c:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801978e:	4618      	mov	r0, r3
 8019790:	3714      	adds	r7, #20
 8019792:	46bd      	mov	sp, r7
 8019794:	bc80      	pop	{r7}
 8019796:	4770      	bx	lr

08019798 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8019798:	b480      	push	{r7}
 801979a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801979c:	4b0d      	ldr	r3, [pc, #52]	; (80197d4 <rand1+0x3c>)
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	4a0d      	ldr	r2, [pc, #52]	; (80197d8 <rand1+0x40>)
 80197a2:	fb02 f303 	mul.w	r3, r2, r3
 80197a6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80197aa:	3339      	adds	r3, #57	; 0x39
 80197ac:	4a09      	ldr	r2, [pc, #36]	; (80197d4 <rand1+0x3c>)
 80197ae:	6013      	str	r3, [r2, #0]
 80197b0:	4b08      	ldr	r3, [pc, #32]	; (80197d4 <rand1+0x3c>)
 80197b2:	681a      	ldr	r2, [r3, #0]
 80197b4:	2303      	movs	r3, #3
 80197b6:	fba3 1302 	umull	r1, r3, r3, r2
 80197ba:	1ad1      	subs	r1, r2, r3
 80197bc:	0849      	lsrs	r1, r1, #1
 80197be:	440b      	add	r3, r1
 80197c0:	0f99      	lsrs	r1, r3, #30
 80197c2:	460b      	mov	r3, r1
 80197c4:	07db      	lsls	r3, r3, #31
 80197c6:	1a5b      	subs	r3, r3, r1
 80197c8:	1ad1      	subs	r1, r2, r3
 80197ca:	460b      	mov	r3, r1
}
 80197cc:	4618      	mov	r0, r3
 80197ce:	46bd      	mov	sp, r7
 80197d0:	bc80      	pop	{r7}
 80197d2:	4770      	bx	lr
 80197d4:	2000015c 	.word	0x2000015c
 80197d8:	41c64e6d 	.word	0x41c64e6d

080197dc <srand1>:

void srand1( uint32_t seed )
{
 80197dc:	b480      	push	{r7}
 80197de:	b083      	sub	sp, #12
 80197e0:	af00      	add	r7, sp, #0
 80197e2:	6078      	str	r0, [r7, #4]
    next = seed;
 80197e4:	4a03      	ldr	r2, [pc, #12]	; (80197f4 <srand1+0x18>)
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	6013      	str	r3, [r2, #0]
}
 80197ea:	bf00      	nop
 80197ec:	370c      	adds	r7, #12
 80197ee:	46bd      	mov	sp, r7
 80197f0:	bc80      	pop	{r7}
 80197f2:	4770      	bx	lr
 80197f4:	2000015c 	.word	0x2000015c

080197f8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80197f8:	b580      	push	{r7, lr}
 80197fa:	b082      	sub	sp, #8
 80197fc:	af00      	add	r7, sp, #0
 80197fe:	6078      	str	r0, [r7, #4]
 8019800:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8019802:	f7ff ffc9 	bl	8019798 <rand1>
 8019806:	4602      	mov	r2, r0
 8019808:	6839      	ldr	r1, [r7, #0]
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	1acb      	subs	r3, r1, r3
 801980e:	3301      	adds	r3, #1
 8019810:	fb92 f1f3 	sdiv	r1, r2, r3
 8019814:	fb01 f303 	mul.w	r3, r1, r3
 8019818:	1ad2      	subs	r2, r2, r3
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	4413      	add	r3, r2
}
 801981e:	4618      	mov	r0, r3
 8019820:	3708      	adds	r7, #8
 8019822:	46bd      	mov	sp, r7
 8019824:	bd80      	pop	{r7, pc}

08019826 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019826:	b480      	push	{r7}
 8019828:	b085      	sub	sp, #20
 801982a:	af00      	add	r7, sp, #0
 801982c:	60f8      	str	r0, [r7, #12]
 801982e:	60b9      	str	r1, [r7, #8]
 8019830:	4613      	mov	r3, r2
 8019832:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8019834:	e007      	b.n	8019846 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8019836:	68ba      	ldr	r2, [r7, #8]
 8019838:	1c53      	adds	r3, r2, #1
 801983a:	60bb      	str	r3, [r7, #8]
 801983c:	68fb      	ldr	r3, [r7, #12]
 801983e:	1c59      	adds	r1, r3, #1
 8019840:	60f9      	str	r1, [r7, #12]
 8019842:	7812      	ldrb	r2, [r2, #0]
 8019844:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019846:	88fb      	ldrh	r3, [r7, #6]
 8019848:	1e5a      	subs	r2, r3, #1
 801984a:	80fa      	strh	r2, [r7, #6]
 801984c:	2b00      	cmp	r3, #0
 801984e:	d1f2      	bne.n	8019836 <memcpy1+0x10>
    }
}
 8019850:	bf00      	nop
 8019852:	bf00      	nop
 8019854:	3714      	adds	r7, #20
 8019856:	46bd      	mov	sp, r7
 8019858:	bc80      	pop	{r7}
 801985a:	4770      	bx	lr

0801985c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801985c:	b480      	push	{r7}
 801985e:	b085      	sub	sp, #20
 8019860:	af00      	add	r7, sp, #0
 8019862:	60f8      	str	r0, [r7, #12]
 8019864:	60b9      	str	r1, [r7, #8]
 8019866:	4613      	mov	r3, r2
 8019868:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801986a:	88fb      	ldrh	r3, [r7, #6]
 801986c:	3b01      	subs	r3, #1
 801986e:	68fa      	ldr	r2, [r7, #12]
 8019870:	4413      	add	r3, r2
 8019872:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8019874:	e007      	b.n	8019886 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8019876:	68ba      	ldr	r2, [r7, #8]
 8019878:	1c53      	adds	r3, r2, #1
 801987a:	60bb      	str	r3, [r7, #8]
 801987c:	68fb      	ldr	r3, [r7, #12]
 801987e:	1e59      	subs	r1, r3, #1
 8019880:	60f9      	str	r1, [r7, #12]
 8019882:	7812      	ldrb	r2, [r2, #0]
 8019884:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019886:	88fb      	ldrh	r3, [r7, #6]
 8019888:	1e5a      	subs	r2, r3, #1
 801988a:	80fa      	strh	r2, [r7, #6]
 801988c:	2b00      	cmp	r3, #0
 801988e:	d1f2      	bne.n	8019876 <memcpyr+0x1a>
    }
}
 8019890:	bf00      	nop
 8019892:	bf00      	nop
 8019894:	3714      	adds	r7, #20
 8019896:	46bd      	mov	sp, r7
 8019898:	bc80      	pop	{r7}
 801989a:	4770      	bx	lr

0801989c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801989c:	b480      	push	{r7}
 801989e:	b083      	sub	sp, #12
 80198a0:	af00      	add	r7, sp, #0
 80198a2:	6078      	str	r0, [r7, #4]
 80198a4:	460b      	mov	r3, r1
 80198a6:	70fb      	strb	r3, [r7, #3]
 80198a8:	4613      	mov	r3, r2
 80198aa:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80198ac:	e004      	b.n	80198b8 <memset1+0x1c>
    {
        *dst++ = value;
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	1c5a      	adds	r2, r3, #1
 80198b2:	607a      	str	r2, [r7, #4]
 80198b4:	78fa      	ldrb	r2, [r7, #3]
 80198b6:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80198b8:	883b      	ldrh	r3, [r7, #0]
 80198ba:	1e5a      	subs	r2, r3, #1
 80198bc:	803a      	strh	r2, [r7, #0]
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d1f5      	bne.n	80198ae <memset1+0x12>
    }
}
 80198c2:	bf00      	nop
 80198c4:	bf00      	nop
 80198c6:	370c      	adds	r7, #12
 80198c8:	46bd      	mov	sp, r7
 80198ca:	bc80      	pop	{r7}
 80198cc:	4770      	bx	lr
	...

080198d0 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80198d0:	b480      	push	{r7}
 80198d2:	b085      	sub	sp, #20
 80198d4:	af00      	add	r7, sp, #0
 80198d6:	6078      	str	r0, [r7, #4]
 80198d8:	460b      	mov	r3, r1
 80198da:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80198dc:	f04f 33ff 	mov.w	r3, #4294967295
 80198e0:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d101      	bne.n	80198ec <Crc32+0x1c>
    {
        return 0;
 80198e8:	2300      	movs	r3, #0
 80198ea:	e026      	b.n	801993a <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 80198ec:	2300      	movs	r3, #0
 80198ee:	817b      	strh	r3, [r7, #10]
 80198f0:	e01d      	b.n	801992e <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 80198f2:	897b      	ldrh	r3, [r7, #10]
 80198f4:	687a      	ldr	r2, [r7, #4]
 80198f6:	4413      	add	r3, r2
 80198f8:	781b      	ldrb	r3, [r3, #0]
 80198fa:	461a      	mov	r2, r3
 80198fc:	68fb      	ldr	r3, [r7, #12]
 80198fe:	4053      	eors	r3, r2
 8019900:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019902:	2300      	movs	r3, #0
 8019904:	813b      	strh	r3, [r7, #8]
 8019906:	e00c      	b.n	8019922 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	085a      	lsrs	r2, r3, #1
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	f003 0301 	and.w	r3, r3, #1
 8019912:	425b      	negs	r3, r3
 8019914:	490b      	ldr	r1, [pc, #44]	; (8019944 <Crc32+0x74>)
 8019916:	400b      	ands	r3, r1
 8019918:	4053      	eors	r3, r2
 801991a:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801991c:	893b      	ldrh	r3, [r7, #8]
 801991e:	3301      	adds	r3, #1
 8019920:	813b      	strh	r3, [r7, #8]
 8019922:	893b      	ldrh	r3, [r7, #8]
 8019924:	2b07      	cmp	r3, #7
 8019926:	d9ef      	bls.n	8019908 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8019928:	897b      	ldrh	r3, [r7, #10]
 801992a:	3301      	adds	r3, #1
 801992c:	817b      	strh	r3, [r7, #10]
 801992e:	897a      	ldrh	r2, [r7, #10]
 8019930:	887b      	ldrh	r3, [r7, #2]
 8019932:	429a      	cmp	r2, r3
 8019934:	d3dd      	bcc.n	80198f2 <Crc32+0x22>
        }
    }

    return ~crc;
 8019936:	68fb      	ldr	r3, [r7, #12]
 8019938:	43db      	mvns	r3, r3
}
 801993a:	4618      	mov	r0, r3
 801993c:	3714      	adds	r7, #20
 801993e:	46bd      	mov	sp, r7
 8019940:	bc80      	pop	{r7}
 8019942:	4770      	bx	lr
 8019944:	edb88320 	.word	0xedb88320

08019948 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8019948:	b580      	push	{r7, lr}
 801994a:	b084      	sub	sp, #16
 801994c:	af02      	add	r7, sp, #8
 801994e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8019950:	4a24      	ldr	r2, [pc, #144]	; (80199e4 <RadioInit+0x9c>)
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8019956:	4b24      	ldr	r3, [pc, #144]	; (80199e8 <RadioInit+0xa0>)
 8019958:	2200      	movs	r2, #0
 801995a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801995c:	4b22      	ldr	r3, [pc, #136]	; (80199e8 <RadioInit+0xa0>)
 801995e:	2200      	movs	r2, #0
 8019960:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8019962:	4b21      	ldr	r3, [pc, #132]	; (80199e8 <RadioInit+0xa0>)
 8019964:	2200      	movs	r2, #0
 8019966:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019968:	4b1f      	ldr	r3, [pc, #124]	; (80199e8 <RadioInit+0xa0>)
 801996a:	2200      	movs	r2, #0
 801996c:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 801996e:	481f      	ldr	r0, [pc, #124]	; (80199ec <RadioInit+0xa4>)
 8019970:	f001 ff8a 	bl	801b888 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8019974:	4b1c      	ldr	r3, [pc, #112]	; (80199e8 <RadioInit+0xa0>)
 8019976:	2200      	movs	r2, #0
 8019978:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801997a:	4b1b      	ldr	r3, [pc, #108]	; (80199e8 <RadioInit+0xa0>)
 801997c:	2200      	movs	r2, #0
 801997e:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8019980:	f002 fa18 	bl	801bdb4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8019984:	2100      	movs	r1, #0
 8019986:	2000      	movs	r0, #0
 8019988:	f002 fde0 	bl	801c54c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801998c:	2204      	movs	r2, #4
 801998e:	2100      	movs	r1, #0
 8019990:	2001      	movs	r0, #1
 8019992:	f002 fb9d 	bl	801c0d0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019996:	2300      	movs	r3, #0
 8019998:	2200      	movs	r2, #0
 801999a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801999e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80199a2:	f002 facd 	bl	801bf40 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 80199a6:	f000 fe83 	bl	801a6b0 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80199aa:	2300      	movs	r3, #0
 80199ac:	9300      	str	r3, [sp, #0]
 80199ae:	4b10      	ldr	r3, [pc, #64]	; (80199f0 <RadioInit+0xa8>)
 80199b0:	2200      	movs	r2, #0
 80199b2:	f04f 31ff 	mov.w	r1, #4294967295
 80199b6:	480f      	ldr	r0, [pc, #60]	; (80199f4 <RadioInit+0xac>)
 80199b8:	f003 ffda 	bl	801d970 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80199bc:	2300      	movs	r3, #0
 80199be:	9300      	str	r3, [sp, #0]
 80199c0:	4b0d      	ldr	r3, [pc, #52]	; (80199f8 <RadioInit+0xb0>)
 80199c2:	2200      	movs	r2, #0
 80199c4:	f04f 31ff 	mov.w	r1, #4294967295
 80199c8:	480c      	ldr	r0, [pc, #48]	; (80199fc <RadioInit+0xb4>)
 80199ca:	f003 ffd1 	bl	801d970 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80199ce:	4809      	ldr	r0, [pc, #36]	; (80199f4 <RadioInit+0xac>)
 80199d0:	f004 f872 	bl	801dab8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80199d4:	4809      	ldr	r0, [pc, #36]	; (80199fc <RadioInit+0xb4>)
 80199d6:	f004 f86f 	bl	801dab8 <UTIL_TIMER_Stop>
}
 80199da:	bf00      	nop
 80199dc:	3708      	adds	r7, #8
 80199de:	46bd      	mov	sp, r7
 80199e0:	bd80      	pop	{r7, pc}
 80199e2:	bf00      	nop
 80199e4:	20001ef0 	.word	0x20001ef0
 80199e8:	20001ef4 	.word	0x20001ef4
 80199ec:	0801aa9d 	.word	0x0801aa9d
 80199f0:	0801aa25 	.word	0x0801aa25
 80199f4:	20001f50 	.word	0x20001f50
 80199f8:	0801aa39 	.word	0x0801aa39
 80199fc:	20001f68 	.word	0x20001f68

08019a00 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8019a00:	b580      	push	{r7, lr}
 8019a02:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8019a04:	f001 ff82 	bl	801b90c <SUBGRF_GetOperatingMode>
 8019a08:	4603      	mov	r3, r0
 8019a0a:	2b07      	cmp	r3, #7
 8019a0c:	d00a      	beq.n	8019a24 <RadioGetStatus+0x24>
 8019a0e:	2b07      	cmp	r3, #7
 8019a10:	dc0a      	bgt.n	8019a28 <RadioGetStatus+0x28>
 8019a12:	2b04      	cmp	r3, #4
 8019a14:	d002      	beq.n	8019a1c <RadioGetStatus+0x1c>
 8019a16:	2b05      	cmp	r3, #5
 8019a18:	d002      	beq.n	8019a20 <RadioGetStatus+0x20>
 8019a1a:	e005      	b.n	8019a28 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8019a1c:	2302      	movs	r3, #2
 8019a1e:	e004      	b.n	8019a2a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8019a20:	2301      	movs	r3, #1
 8019a22:	e002      	b.n	8019a2a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8019a24:	2303      	movs	r3, #3
 8019a26:	e000      	b.n	8019a2a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8019a28:	2300      	movs	r3, #0
    }
}
 8019a2a:	4618      	mov	r0, r3
 8019a2c:	bd80      	pop	{r7, pc}
	...

08019a30 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8019a30:	b580      	push	{r7, lr}
 8019a32:	b082      	sub	sp, #8
 8019a34:	af00      	add	r7, sp, #0
 8019a36:	4603      	mov	r3, r0
 8019a38:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8019a3a:	4a2a      	ldr	r2, [pc, #168]	; (8019ae4 <RadioSetModem+0xb4>)
 8019a3c:	79fb      	ldrb	r3, [r7, #7]
 8019a3e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8019a40:	79fb      	ldrb	r3, [r7, #7]
 8019a42:	4618      	mov	r0, r3
 8019a44:	f003 f945 	bl	801ccd2 <RFW_SetRadioModem>
    switch( modem )
 8019a48:	79fb      	ldrb	r3, [r7, #7]
 8019a4a:	2b05      	cmp	r3, #5
 8019a4c:	d80e      	bhi.n	8019a6c <RadioSetModem+0x3c>
 8019a4e:	a201      	add	r2, pc, #4	; (adr r2, 8019a54 <RadioSetModem+0x24>)
 8019a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a54:	08019a7b 	.word	0x08019a7b
 8019a58:	08019a89 	.word	0x08019a89
 8019a5c:	08019a6d 	.word	0x08019a6d
 8019a60:	08019aaf 	.word	0x08019aaf
 8019a64:	08019abd 	.word	0x08019abd
 8019a68:	08019acb 	.word	0x08019acb
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8019a6c:	2003      	movs	r0, #3
 8019a6e:	f002 fb09 	bl	801c084 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019a72:	4b1c      	ldr	r3, [pc, #112]	; (8019ae4 <RadioSetModem+0xb4>)
 8019a74:	2200      	movs	r2, #0
 8019a76:	735a      	strb	r2, [r3, #13]
        break;
 8019a78:	e02f      	b.n	8019ada <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8019a7a:	2000      	movs	r0, #0
 8019a7c:	f002 fb02 	bl	801c084 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019a80:	4b18      	ldr	r3, [pc, #96]	; (8019ae4 <RadioSetModem+0xb4>)
 8019a82:	2200      	movs	r2, #0
 8019a84:	735a      	strb	r2, [r3, #13]
        break;
 8019a86:	e028      	b.n	8019ada <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8019a88:	2001      	movs	r0, #1
 8019a8a:	f002 fafb 	bl	801c084 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8019a8e:	4b15      	ldr	r3, [pc, #84]	; (8019ae4 <RadioSetModem+0xb4>)
 8019a90:	7b5a      	ldrb	r2, [r3, #13]
 8019a92:	4b14      	ldr	r3, [pc, #80]	; (8019ae4 <RadioSetModem+0xb4>)
 8019a94:	7b1b      	ldrb	r3, [r3, #12]
 8019a96:	429a      	cmp	r2, r3
 8019a98:	d01e      	beq.n	8019ad8 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8019a9a:	4b12      	ldr	r3, [pc, #72]	; (8019ae4 <RadioSetModem+0xb4>)
 8019a9c:	7b1a      	ldrb	r2, [r3, #12]
 8019a9e:	4b11      	ldr	r3, [pc, #68]	; (8019ae4 <RadioSetModem+0xb4>)
 8019aa0:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8019aa2:	4b10      	ldr	r3, [pc, #64]	; (8019ae4 <RadioSetModem+0xb4>)
 8019aa4:	7b5b      	ldrb	r3, [r3, #13]
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	f000 ff86 	bl	801a9b8 <RadioSetPublicNetwork>
        }
        break;
 8019aac:	e014      	b.n	8019ad8 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019aae:	2002      	movs	r0, #2
 8019ab0:	f002 fae8 	bl	801c084 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019ab4:	4b0b      	ldr	r3, [pc, #44]	; (8019ae4 <RadioSetModem+0xb4>)
 8019ab6:	2200      	movs	r2, #0
 8019ab8:	735a      	strb	r2, [r3, #13]
        break;
 8019aba:	e00e      	b.n	8019ada <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019abc:	2002      	movs	r0, #2
 8019abe:	f002 fae1 	bl	801c084 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019ac2:	4b08      	ldr	r3, [pc, #32]	; (8019ae4 <RadioSetModem+0xb4>)
 8019ac4:	2200      	movs	r2, #0
 8019ac6:	735a      	strb	r2, [r3, #13]
        break;
 8019ac8:	e007      	b.n	8019ada <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8019aca:	2000      	movs	r0, #0
 8019acc:	f002 fada 	bl	801c084 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019ad0:	4b04      	ldr	r3, [pc, #16]	; (8019ae4 <RadioSetModem+0xb4>)
 8019ad2:	2200      	movs	r2, #0
 8019ad4:	735a      	strb	r2, [r3, #13]
        break;
 8019ad6:	e000      	b.n	8019ada <RadioSetModem+0xaa>
        break;
 8019ad8:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8019ada:	bf00      	nop
 8019adc:	3708      	adds	r7, #8
 8019ade:	46bd      	mov	sp, r7
 8019ae0:	bd80      	pop	{r7, pc}
 8019ae2:	bf00      	nop
 8019ae4:	20001ef4 	.word	0x20001ef4

08019ae8 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8019ae8:	b580      	push	{r7, lr}
 8019aea:	b082      	sub	sp, #8
 8019aec:	af00      	add	r7, sp, #0
 8019aee:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8019af0:	6878      	ldr	r0, [r7, #4]
 8019af2:	f002 fa81 	bl	801bff8 <SUBGRF_SetRfFrequency>
}
 8019af6:	bf00      	nop
 8019af8:	3708      	adds	r7, #8
 8019afa:	46bd      	mov	sp, r7
 8019afc:	bd80      	pop	{r7, pc}

08019afe <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8019afe:	b580      	push	{r7, lr}
 8019b00:	b090      	sub	sp, #64	; 0x40
 8019b02:	af0a      	add	r7, sp, #40	; 0x28
 8019b04:	60f8      	str	r0, [r7, #12]
 8019b06:	60b9      	str	r1, [r7, #8]
 8019b08:	603b      	str	r3, [r7, #0]
 8019b0a:	4613      	mov	r3, r2
 8019b0c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8019b0e:	2301      	movs	r3, #1
 8019b10:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8019b12:	2300      	movs	r3, #0
 8019b14:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8019b16:	2300      	movs	r3, #0
 8019b18:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8019b1a:	f000 fddc 	bl	801a6d6 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8019b1e:	2000      	movs	r0, #0
 8019b20:	f7ff ff86 	bl	8019a30 <RadioSetModem>

    RadioSetChannel( freq );
 8019b24:	68f8      	ldr	r0, [r7, #12]
 8019b26:	f7ff ffdf 	bl	8019ae8 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8019b2a:	2301      	movs	r3, #1
 8019b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8019b2e:	2300      	movs	r3, #0
 8019b30:	9308      	str	r3, [sp, #32]
 8019b32:	2300      	movs	r3, #0
 8019b34:	9307      	str	r3, [sp, #28]
 8019b36:	2300      	movs	r3, #0
 8019b38:	9306      	str	r3, [sp, #24]
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	9305      	str	r3, [sp, #20]
 8019b3e:	2300      	movs	r3, #0
 8019b40:	9304      	str	r3, [sp, #16]
 8019b42:	2300      	movs	r3, #0
 8019b44:	9303      	str	r3, [sp, #12]
 8019b46:	2300      	movs	r3, #0
 8019b48:	9302      	str	r3, [sp, #8]
 8019b4a:	2303      	movs	r3, #3
 8019b4c:	9301      	str	r3, [sp, #4]
 8019b4e:	68bb      	ldr	r3, [r7, #8]
 8019b50:	9300      	str	r3, [sp, #0]
 8019b52:	2300      	movs	r3, #0
 8019b54:	f44f 7216 	mov.w	r2, #600	; 0x258
 8019b58:	68b9      	ldr	r1, [r7, #8]
 8019b5a:	2000      	movs	r0, #0
 8019b5c:	f000 f83c 	bl	8019bd8 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8019b60:	2000      	movs	r0, #0
 8019b62:	f000 fdbf 	bl	801a6e4 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8019b66:	f000 ff55 	bl	801aa14 <RadioGetWakeupTime>
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	f7e8 ff9b 	bl	8002aa8 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8019b72:	f004 f8bb 	bl	801dcec <UTIL_TIMER_GetCurrentTime>
 8019b76:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019b78:	e00d      	b.n	8019b96 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8019b7a:	2000      	movs	r0, #0
 8019b7c:	f000 fe9a 	bl	801a8b4 <RadioRssi>
 8019b80:	4603      	mov	r3, r0
 8019b82:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8019b84:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019b8c:	429a      	cmp	r2, r3
 8019b8e:	dd02      	ble.n	8019b96 <RadioIsChannelFree+0x98>
        {
            status = false;
 8019b90:	2300      	movs	r3, #0
 8019b92:	75fb      	strb	r3, [r7, #23]
            break;
 8019b94:	e006      	b.n	8019ba4 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019b96:	6938      	ldr	r0, [r7, #16]
 8019b98:	f004 f8ba 	bl	801dd10 <UTIL_TIMER_GetElapsedTime>
 8019b9c:	4602      	mov	r2, r0
 8019b9e:	683b      	ldr	r3, [r7, #0]
 8019ba0:	4293      	cmp	r3, r2
 8019ba2:	d8ea      	bhi.n	8019b7a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8019ba4:	f000 fd97 	bl	801a6d6 <RadioStandby>

    return status;
 8019ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8019baa:	4618      	mov	r0, r3
 8019bac:	3718      	adds	r7, #24
 8019bae:	46bd      	mov	sp, r7
 8019bb0:	bd80      	pop	{r7, pc}

08019bb2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8019bb2:	b580      	push	{r7, lr}
 8019bb4:	b082      	sub	sp, #8
 8019bb6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8019bb8:	2300      	movs	r3, #0
 8019bba:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	2200      	movs	r2, #0
 8019bc0:	2100      	movs	r1, #0
 8019bc2:	2000      	movs	r0, #0
 8019bc4:	f002 f9bc 	bl	801bf40 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8019bc8:	f001 ff71 	bl	801baae <SUBGRF_GetRandom>
 8019bcc:	6078      	str	r0, [r7, #4]

    return rnd;
 8019bce:	687b      	ldr	r3, [r7, #4]
}
 8019bd0:	4618      	mov	r0, r3
 8019bd2:	3708      	adds	r7, #8
 8019bd4:	46bd      	mov	sp, r7
 8019bd6:	bd80      	pop	{r7, pc}

08019bd8 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	b08a      	sub	sp, #40	; 0x28
 8019bdc:	af00      	add	r7, sp, #0
 8019bde:	60b9      	str	r1, [r7, #8]
 8019be0:	607a      	str	r2, [r7, #4]
 8019be2:	461a      	mov	r2, r3
 8019be4:	4603      	mov	r3, r0
 8019be6:	73fb      	strb	r3, [r7, #15]
 8019be8:	4613      	mov	r3, r2
 8019bea:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8019bec:	4ab9      	ldr	r2, [pc, #740]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019bee:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019bf2:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8019bf4:	f003 f82b 	bl	801cc4e <RFW_DeInit>
    if( rxContinuous == true )
 8019bf8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d001      	beq.n	8019c04 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8019c00:	2300      	movs	r3, #0
 8019c02:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8019c04:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d004      	beq.n	8019c16 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8019c0c:	4ab2      	ldr	r2, [pc, #712]	; (8019ed8 <RadioSetRxConfig+0x300>)
 8019c0e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8019c12:	7013      	strb	r3, [r2, #0]
 8019c14:	e002      	b.n	8019c1c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8019c16:	4bb0      	ldr	r3, [pc, #704]	; (8019ed8 <RadioSetRxConfig+0x300>)
 8019c18:	22ff      	movs	r2, #255	; 0xff
 8019c1a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8019c1c:	7bfb      	ldrb	r3, [r7, #15]
 8019c1e:	2b05      	cmp	r3, #5
 8019c20:	d009      	beq.n	8019c36 <RadioSetRxConfig+0x5e>
 8019c22:	2b05      	cmp	r3, #5
 8019c24:	f300 81ca 	bgt.w	8019fbc <RadioSetRxConfig+0x3e4>
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	f000 80bf 	beq.w	8019dac <RadioSetRxConfig+0x1d4>
 8019c2e:	2b01      	cmp	r3, #1
 8019c30:	f000 8124 	beq.w	8019e7c <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8019c34:	e1c2      	b.n	8019fbc <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8019c36:	2001      	movs	r0, #1
 8019c38:	f002 f87e 	bl	801bd38 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019c3c:	4ba5      	ldr	r3, [pc, #660]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019c3e:	2200      	movs	r2, #0
 8019c40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019c44:	4aa3      	ldr	r2, [pc, #652]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8019c4a:	4ba2      	ldr	r3, [pc, #648]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019c4c:	2209      	movs	r2, #9
 8019c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8019c52:	4ba0      	ldr	r3, [pc, #640]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019c54:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019c58:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019c5a:	68b8      	ldr	r0, [r7, #8]
 8019c5c:	f002 ff2a 	bl	801cab4 <SUBGRF_GetFskBandwidthRegValue>
 8019c60:	4603      	mov	r3, r0
 8019c62:	461a      	mov	r2, r3
 8019c64:	4b9b      	ldr	r3, [pc, #620]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019c6a:	4b9a      	ldr	r3, [pc, #616]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019c6c:	2200      	movs	r2, #0
 8019c6e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019c70:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019c72:	00db      	lsls	r3, r3, #3
 8019c74:	b29a      	uxth	r2, r3
 8019c76:	4b97      	ldr	r3, [pc, #604]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019c78:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8019c7a:	4b96      	ldr	r3, [pc, #600]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019c7c:	2200      	movs	r2, #0
 8019c7e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8019c80:	4b94      	ldr	r3, [pc, #592]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019c82:	2210      	movs	r2, #16
 8019c84:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019c86:	4b93      	ldr	r3, [pc, #588]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019c88:	2200      	movs	r2, #0
 8019c8a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8019c8c:	4b91      	ldr	r3, [pc, #580]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019c8e:	2200      	movs	r2, #0
 8019c90:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019c92:	4b91      	ldr	r3, [pc, #580]	; (8019ed8 <RadioSetRxConfig+0x300>)
 8019c94:	781a      	ldrb	r2, [r3, #0]
 8019c96:	4b8f      	ldr	r3, [pc, #572]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019c98:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019c9a:	4b8e      	ldr	r3, [pc, #568]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019c9c:	2201      	movs	r2, #1
 8019c9e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8019ca0:	4b8c      	ldr	r3, [pc, #560]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019ca2:	2200      	movs	r2, #0
 8019ca4:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8019ca6:	2005      	movs	r0, #5
 8019ca8:	f7ff fec2 	bl	8019a30 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019cac:	488b      	ldr	r0, [pc, #556]	; (8019edc <RadioSetRxConfig+0x304>)
 8019cae:	f002 fadd 	bl	801c26c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019cb2:	488b      	ldr	r0, [pc, #556]	; (8019ee0 <RadioSetRxConfig+0x308>)
 8019cb4:	f002 fbac 	bl	801c410 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019cb8:	4a8a      	ldr	r2, [pc, #552]	; (8019ee4 <RadioSetRxConfig+0x30c>)
 8019cba:	f107 031c 	add.w	r3, r7, #28
 8019cbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019cc2:	e883 0003 	stmia.w	r3, {r0, r1}
 8019cc6:	f107 031c 	add.w	r3, r7, #28
 8019cca:	4618      	mov	r0, r3
 8019ccc:	f001 fe6d 	bl	801b9aa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019cd0:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019cd4:	f001 feb8 	bl	801ba48 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8019cd8:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019cdc:	f000 fe09 	bl	801a8f2 <RadioRead>
 8019ce0:	4603      	mov	r3, r0
 8019ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8019ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019cea:	f023 0310 	bic.w	r3, r3, #16
 8019cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8019cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019cf6:	4619      	mov	r1, r3
 8019cf8:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019cfc:	f000 fde7 	bl	801a8ce <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8019d00:	2104      	movs	r1, #4
 8019d02:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8019d06:	f000 fde2 	bl	801a8ce <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8019d0a:	f640 009b 	movw	r0, #2203	; 0x89b
 8019d0e:	f000 fdf0 	bl	801a8f2 <RadioRead>
 8019d12:	4603      	mov	r3, r0
 8019d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d1c:	f023 031c 	bic.w	r3, r3, #28
 8019d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8019d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d28:	f043 0308 	orr.w	r3, r3, #8
 8019d2c:	b2db      	uxtb	r3, r3
 8019d2e:	4619      	mov	r1, r3
 8019d30:	f640 009b 	movw	r0, #2203	; 0x89b
 8019d34:	f000 fdcb 	bl	801a8ce <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8019d38:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019d3c:	f000 fdd9 	bl	801a8f2 <RadioRead>
 8019d40:	4603      	mov	r3, r0
 8019d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d4a:	f023 0318 	bic.w	r3, r3, #24
 8019d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8019d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d56:	f043 0318 	orr.w	r3, r3, #24
 8019d5a:	b2db      	uxtb	r3, r3
 8019d5c:	4619      	mov	r1, r3
 8019d5e:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019d62:	f000 fdb4 	bl	801a8ce <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8019d66:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8019d6a:	f000 fdc2 	bl	801a8f2 <RadioRead>
 8019d6e:	4603      	mov	r3, r0
 8019d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8019d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8019d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d84:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8019d88:	b2db      	uxtb	r3, r3
 8019d8a:	4619      	mov	r1, r3
 8019d8c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8019d90:	f000 fd9d 	bl	801a8ce <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019d94:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019d96:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019d9a:	fb02 f303 	mul.w	r3, r2, r3
 8019d9e:	461a      	mov	r2, r3
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8019da6:	4a4b      	ldr	r2, [pc, #300]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019da8:	6093      	str	r3, [r2, #8]
            break;
 8019daa:	e108      	b.n	8019fbe <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019dac:	2000      	movs	r0, #0
 8019dae:	f001 ffc3 	bl	801bd38 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019db2:	4b48      	ldr	r3, [pc, #288]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019db4:	2200      	movs	r2, #0
 8019db6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019dba:	4a46      	ldr	r2, [pc, #280]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019dc0:	4b44      	ldr	r3, [pc, #272]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019dc2:	220b      	movs	r2, #11
 8019dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019dc8:	68b8      	ldr	r0, [r7, #8]
 8019dca:	f002 fe73 	bl	801cab4 <SUBGRF_GetFskBandwidthRegValue>
 8019dce:	4603      	mov	r3, r0
 8019dd0:	461a      	mov	r2, r3
 8019dd2:	4b40      	ldr	r3, [pc, #256]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019dd8:	4b3e      	ldr	r3, [pc, #248]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019dda:	2200      	movs	r2, #0
 8019ddc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019dde:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019de0:	00db      	lsls	r3, r3, #3
 8019de2:	b29a      	uxth	r2, r3
 8019de4:	4b3b      	ldr	r3, [pc, #236]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019de6:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8019de8:	4b3a      	ldr	r3, [pc, #232]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019dea:	2204      	movs	r2, #4
 8019dec:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8019dee:	4b39      	ldr	r3, [pc, #228]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019df0:	2218      	movs	r2, #24
 8019df2:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019df4:	4b37      	ldr	r3, [pc, #220]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019df6:	2200      	movs	r2, #0
 8019df8:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019dfa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019dfe:	f083 0301 	eor.w	r3, r3, #1
 8019e02:	b2db      	uxtb	r3, r3
 8019e04:	461a      	mov	r2, r3
 8019e06:	4b33      	ldr	r3, [pc, #204]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019e08:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019e0a:	4b33      	ldr	r3, [pc, #204]	; (8019ed8 <RadioSetRxConfig+0x300>)
 8019e0c:	781a      	ldrb	r2, [r3, #0]
 8019e0e:	4b31      	ldr	r3, [pc, #196]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019e10:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8019e12:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d003      	beq.n	8019e22 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019e1a:	4b2e      	ldr	r3, [pc, #184]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019e1c:	22f2      	movs	r2, #242	; 0xf2
 8019e1e:	75da      	strb	r2, [r3, #23]
 8019e20:	e002      	b.n	8019e28 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019e22:	4b2c      	ldr	r3, [pc, #176]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019e24:	2201      	movs	r2, #1
 8019e26:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019e28:	4b2a      	ldr	r3, [pc, #168]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019e2a:	2201      	movs	r2, #1
 8019e2c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019e2e:	f000 fc52 	bl	801a6d6 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8019e32:	2000      	movs	r0, #0
 8019e34:	f7ff fdfc 	bl	8019a30 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019e38:	4828      	ldr	r0, [pc, #160]	; (8019edc <RadioSetRxConfig+0x304>)
 8019e3a:	f002 fa17 	bl	801c26c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019e3e:	4828      	ldr	r0, [pc, #160]	; (8019ee0 <RadioSetRxConfig+0x308>)
 8019e40:	f002 fae6 	bl	801c410 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019e44:	4a28      	ldr	r2, [pc, #160]	; (8019ee8 <RadioSetRxConfig+0x310>)
 8019e46:	f107 0314 	add.w	r3, r7, #20
 8019e4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019e4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8019e52:	f107 0314 	add.w	r3, r7, #20
 8019e56:	4618      	mov	r0, r3
 8019e58:	f001 fda7 	bl	801b9aa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019e5c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019e60:	f001 fdf2 	bl	801ba48 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019e64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019e66:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019e6a:	fb02 f303 	mul.w	r3, r2, r3
 8019e6e:	461a      	mov	r2, r3
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8019e76:	4a17      	ldr	r2, [pc, #92]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019e78:	6093      	str	r3, [r2, #8]
            break;
 8019e7a:	e0a0      	b.n	8019fbe <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019e7c:	2000      	movs	r0, #0
 8019e7e:	f001 ff5b 	bl	801bd38 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019e82:	4b14      	ldr	r3, [pc, #80]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019e84:	2201      	movs	r2, #1
 8019e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	b2da      	uxtb	r2, r3
 8019e8e:	4b11      	ldr	r3, [pc, #68]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8019e94:	4a15      	ldr	r2, [pc, #84]	; (8019eec <RadioSetRxConfig+0x314>)
 8019e96:	68bb      	ldr	r3, [r7, #8]
 8019e98:	4413      	add	r3, r2
 8019e9a:	781a      	ldrb	r2, [r3, #0]
 8019e9c:	4b0d      	ldr	r3, [pc, #52]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019e9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8019ea2:	4a0c      	ldr	r2, [pc, #48]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019ea4:	7bbb      	ldrb	r3, [r7, #14]
 8019ea6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019eaa:	68bb      	ldr	r3, [r7, #8]
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d105      	bne.n	8019ebc <RadioSetRxConfig+0x2e4>
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	2b0b      	cmp	r3, #11
 8019eb4:	d008      	beq.n	8019ec8 <RadioSetRxConfig+0x2f0>
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	2b0c      	cmp	r3, #12
 8019eba:	d005      	beq.n	8019ec8 <RadioSetRxConfig+0x2f0>
 8019ebc:	68bb      	ldr	r3, [r7, #8]
 8019ebe:	2b01      	cmp	r3, #1
 8019ec0:	d116      	bne.n	8019ef0 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	2b0c      	cmp	r3, #12
 8019ec6:	d113      	bne.n	8019ef0 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019ec8:	4b02      	ldr	r3, [pc, #8]	; (8019ed4 <RadioSetRxConfig+0x2fc>)
 8019eca:	2201      	movs	r2, #1
 8019ecc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8019ed0:	e012      	b.n	8019ef8 <RadioSetRxConfig+0x320>
 8019ed2:	bf00      	nop
 8019ed4:	20001ef4 	.word	0x20001ef4
 8019ed8:	20000160 	.word	0x20000160
 8019edc:	20001f2c 	.word	0x20001f2c
 8019ee0:	20001f02 	.word	0x20001f02
 8019ee4:	0801ee14 	.word	0x0801ee14
 8019ee8:	0801ee1c 	.word	0x0801ee1c
 8019eec:	0801f3f8 	.word	0x0801f3f8
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8019ef0:	4b35      	ldr	r3, [pc, #212]	; (8019fc8 <RadioSetRxConfig+0x3f0>)
 8019ef2:	2200      	movs	r2, #0
 8019ef4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019ef8:	4b33      	ldr	r3, [pc, #204]	; (8019fc8 <RadioSetRxConfig+0x3f0>)
 8019efa:	2201      	movs	r2, #1
 8019efc:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019efe:	4b32      	ldr	r3, [pc, #200]	; (8019fc8 <RadioSetRxConfig+0x3f0>)
 8019f00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019f04:	2b05      	cmp	r3, #5
 8019f06:	d004      	beq.n	8019f12 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019f08:	4b2f      	ldr	r3, [pc, #188]	; (8019fc8 <RadioSetRxConfig+0x3f0>)
 8019f0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019f0e:	2b06      	cmp	r3, #6
 8019f10:	d10a      	bne.n	8019f28 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8019f12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019f14:	2b0b      	cmp	r3, #11
 8019f16:	d803      	bhi.n	8019f20 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019f18:	4b2b      	ldr	r3, [pc, #172]	; (8019fc8 <RadioSetRxConfig+0x3f0>)
 8019f1a:	220c      	movs	r2, #12
 8019f1c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019f1e:	e006      	b.n	8019f2e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019f20:	4a29      	ldr	r2, [pc, #164]	; (8019fc8 <RadioSetRxConfig+0x3f0>)
 8019f22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019f24:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8019f26:	e002      	b.n	8019f2e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019f28:	4a27      	ldr	r2, [pc, #156]	; (8019fc8 <RadioSetRxConfig+0x3f0>)
 8019f2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019f2c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019f2e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019f32:	4b25      	ldr	r3, [pc, #148]	; (8019fc8 <RadioSetRxConfig+0x3f0>)
 8019f34:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019f36:	4b25      	ldr	r3, [pc, #148]	; (8019fcc <RadioSetRxConfig+0x3f4>)
 8019f38:	781a      	ldrb	r2, [r3, #0]
 8019f3a:	4b23      	ldr	r3, [pc, #140]	; (8019fc8 <RadioSetRxConfig+0x3f0>)
 8019f3c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019f3e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8019f42:	4b21      	ldr	r3, [pc, #132]	; (8019fc8 <RadioSetRxConfig+0x3f0>)
 8019f44:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8019f48:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8019f4c:	4b1e      	ldr	r3, [pc, #120]	; (8019fc8 <RadioSetRxConfig+0x3f0>)
 8019f4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8019f52:	f000 fbc0 	bl	801a6d6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8019f56:	2001      	movs	r0, #1
 8019f58:	f7ff fd6a 	bl	8019a30 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019f5c:	481c      	ldr	r0, [pc, #112]	; (8019fd0 <RadioSetRxConfig+0x3f8>)
 8019f5e:	f002 f985 	bl	801c26c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019f62:	481c      	ldr	r0, [pc, #112]	; (8019fd4 <RadioSetRxConfig+0x3fc>)
 8019f64:	f002 fa54 	bl	801c410 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019f68:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019f6a:	b2db      	uxtb	r3, r3
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	f001 fef2 	bl	801bd56 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019f72:	4b15      	ldr	r3, [pc, #84]	; (8019fc8 <RadioSetRxConfig+0x3f0>)
 8019f74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8019f78:	2b01      	cmp	r3, #1
 8019f7a:	d10d      	bne.n	8019f98 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8019f7c:	f240 7036 	movw	r0, #1846	; 0x736
 8019f80:	f002 fba2 	bl	801c6c8 <SUBGRF_ReadRegister>
 8019f84:	4603      	mov	r3, r0
 8019f86:	f023 0304 	bic.w	r3, r3, #4
 8019f8a:	b2db      	uxtb	r3, r3
 8019f8c:	4619      	mov	r1, r3
 8019f8e:	f240 7036 	movw	r0, #1846	; 0x736
 8019f92:	f002 fb85 	bl	801c6a0 <SUBGRF_WriteRegister>
 8019f96:	e00c      	b.n	8019fb2 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019f98:	f240 7036 	movw	r0, #1846	; 0x736
 8019f9c:	f002 fb94 	bl	801c6c8 <SUBGRF_ReadRegister>
 8019fa0:	4603      	mov	r3, r0
 8019fa2:	f043 0304 	orr.w	r3, r3, #4
 8019fa6:	b2db      	uxtb	r3, r3
 8019fa8:	4619      	mov	r1, r3
 8019faa:	f240 7036 	movw	r0, #1846	; 0x736
 8019fae:	f002 fb77 	bl	801c6a0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8019fb2:	4b05      	ldr	r3, [pc, #20]	; (8019fc8 <RadioSetRxConfig+0x3f0>)
 8019fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019fb8:	609a      	str	r2, [r3, #8]
            break;
 8019fba:	e000      	b.n	8019fbe <RadioSetRxConfig+0x3e6>
            break;
 8019fbc:	bf00      	nop
    }
}
 8019fbe:	bf00      	nop
 8019fc0:	3728      	adds	r7, #40	; 0x28
 8019fc2:	46bd      	mov	sp, r7
 8019fc4:	bd80      	pop	{r7, pc}
 8019fc6:	bf00      	nop
 8019fc8:	20001ef4 	.word	0x20001ef4
 8019fcc:	20000160 	.word	0x20000160
 8019fd0:	20001f2c 	.word	0x20001f2c
 8019fd4:	20001f02 	.word	0x20001f02

08019fd8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	b086      	sub	sp, #24
 8019fdc:	af00      	add	r7, sp, #0
 8019fde:	60ba      	str	r2, [r7, #8]
 8019fe0:	607b      	str	r3, [r7, #4]
 8019fe2:	4603      	mov	r3, r0
 8019fe4:	73fb      	strb	r3, [r7, #15]
 8019fe6:	460b      	mov	r3, r1
 8019fe8:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8019fea:	f002 fe30 	bl	801cc4e <RFW_DeInit>
    switch( modem )
 8019fee:	7bfb      	ldrb	r3, [r7, #15]
 8019ff0:	2b04      	cmp	r3, #4
 8019ff2:	f000 80c7 	beq.w	801a184 <RadioSetTxConfig+0x1ac>
 8019ff6:	2b04      	cmp	r3, #4
 8019ff8:	f300 80d6 	bgt.w	801a1a8 <RadioSetTxConfig+0x1d0>
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d002      	beq.n	801a006 <RadioSetTxConfig+0x2e>
 801a000:	2b01      	cmp	r3, #1
 801a002:	d059      	beq.n	801a0b8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a004:	e0d0      	b.n	801a1a8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a006:	4b74      	ldr	r3, [pc, #464]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a008:	2200      	movs	r2, #0
 801a00a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a00e:	4a72      	ldr	r2, [pc, #456]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a010:	6a3b      	ldr	r3, [r7, #32]
 801a012:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a014:	4b70      	ldr	r3, [pc, #448]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a016:	220b      	movs	r2, #11
 801a018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a01c:	6878      	ldr	r0, [r7, #4]
 801a01e:	f002 fd49 	bl	801cab4 <SUBGRF_GetFskBandwidthRegValue>
 801a022:	4603      	mov	r3, r0
 801a024:	461a      	mov	r2, r3
 801a026:	4b6c      	ldr	r3, [pc, #432]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801a02c:	4a6a      	ldr	r2, [pc, #424]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a02e:	68bb      	ldr	r3, [r7, #8]
 801a030:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a032:	4b69      	ldr	r3, [pc, #420]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a034:	2200      	movs	r2, #0
 801a036:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a038:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a03a:	00db      	lsls	r3, r3, #3
 801a03c:	b29a      	uxth	r2, r3
 801a03e:	4b66      	ldr	r3, [pc, #408]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a040:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a042:	4b65      	ldr	r3, [pc, #404]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a044:	2204      	movs	r2, #4
 801a046:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801a048:	4b63      	ldr	r3, [pc, #396]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a04a:	2218      	movs	r2, #24
 801a04c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a04e:	4b62      	ldr	r3, [pc, #392]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a050:	2200      	movs	r2, #0
 801a052:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a054:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a058:	f083 0301 	eor.w	r3, r3, #1
 801a05c:	b2db      	uxtb	r3, r3
 801a05e:	461a      	mov	r2, r3
 801a060:	4b5d      	ldr	r3, [pc, #372]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a062:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801a064:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d003      	beq.n	801a074 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a06c:	4b5a      	ldr	r3, [pc, #360]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a06e:	22f2      	movs	r2, #242	; 0xf2
 801a070:	75da      	strb	r2, [r3, #23]
 801a072:	e002      	b.n	801a07a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a074:	4b58      	ldr	r3, [pc, #352]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a076:	2201      	movs	r2, #1
 801a078:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a07a:	4b57      	ldr	r3, [pc, #348]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a07c:	2201      	movs	r2, #1
 801a07e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a080:	f000 fb29 	bl	801a6d6 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801a084:	2000      	movs	r0, #0
 801a086:	f7ff fcd3 	bl	8019a30 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a08a:	4854      	ldr	r0, [pc, #336]	; (801a1dc <RadioSetTxConfig+0x204>)
 801a08c:	f002 f8ee 	bl	801c26c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a090:	4853      	ldr	r0, [pc, #332]	; (801a1e0 <RadioSetTxConfig+0x208>)
 801a092:	f002 f9bd 	bl	801c410 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a096:	4a53      	ldr	r2, [pc, #332]	; (801a1e4 <RadioSetTxConfig+0x20c>)
 801a098:	f107 0310 	add.w	r3, r7, #16
 801a09c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a0a0:	e883 0003 	stmia.w	r3, {r0, r1}
 801a0a4:	f107 0310 	add.w	r3, r7, #16
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	f001 fc7e 	bl	801b9aa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a0ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a0b2:	f001 fcc9 	bl	801ba48 <SUBGRF_SetWhiteningSeed>
            break;
 801a0b6:	e078      	b.n	801a1aa <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a0b8:	4b47      	ldr	r3, [pc, #284]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a0ba:	2201      	movs	r2, #1
 801a0bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801a0c0:	6a3b      	ldr	r3, [r7, #32]
 801a0c2:	b2da      	uxtb	r2, r3
 801a0c4:	4b44      	ldr	r3, [pc, #272]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a0c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801a0ca:	4a47      	ldr	r2, [pc, #284]	; (801a1e8 <RadioSetTxConfig+0x210>)
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	4413      	add	r3, r2
 801a0d0:	781a      	ldrb	r2, [r3, #0]
 801a0d2:	4b41      	ldr	r3, [pc, #260]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a0d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801a0d8:	4a3f      	ldr	r2, [pc, #252]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a0da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a0de:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	d105      	bne.n	801a0f4 <RadioSetTxConfig+0x11c>
 801a0e8:	6a3b      	ldr	r3, [r7, #32]
 801a0ea:	2b0b      	cmp	r3, #11
 801a0ec:	d008      	beq.n	801a100 <RadioSetTxConfig+0x128>
 801a0ee:	6a3b      	ldr	r3, [r7, #32]
 801a0f0:	2b0c      	cmp	r3, #12
 801a0f2:	d005      	beq.n	801a100 <RadioSetTxConfig+0x128>
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	2b01      	cmp	r3, #1
 801a0f8:	d107      	bne.n	801a10a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a0fa:	6a3b      	ldr	r3, [r7, #32]
 801a0fc:	2b0c      	cmp	r3, #12
 801a0fe:	d104      	bne.n	801a10a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a100:	4b35      	ldr	r3, [pc, #212]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a102:	2201      	movs	r2, #1
 801a104:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a108:	e003      	b.n	801a112 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a10a:	4b33      	ldr	r3, [pc, #204]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a10c:	2200      	movs	r2, #0
 801a10e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a112:	4b31      	ldr	r3, [pc, #196]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a114:	2201      	movs	r2, #1
 801a116:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a118:	4b2f      	ldr	r3, [pc, #188]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a11a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a11e:	2b05      	cmp	r3, #5
 801a120:	d004      	beq.n	801a12c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a122:	4b2d      	ldr	r3, [pc, #180]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a124:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a128:	2b06      	cmp	r3, #6
 801a12a:	d10a      	bne.n	801a142 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801a12c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a12e:	2b0b      	cmp	r3, #11
 801a130:	d803      	bhi.n	801a13a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a132:	4b29      	ldr	r3, [pc, #164]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a134:	220c      	movs	r2, #12
 801a136:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a138:	e006      	b.n	801a148 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a13a:	4a27      	ldr	r2, [pc, #156]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a13c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a13e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a140:	e002      	b.n	801a148 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a142:	4a25      	ldr	r2, [pc, #148]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a144:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a146:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a148:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a14c:	4b22      	ldr	r3, [pc, #136]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a14e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a150:	4b26      	ldr	r3, [pc, #152]	; (801a1ec <RadioSetTxConfig+0x214>)
 801a152:	781a      	ldrb	r2, [r3, #0]
 801a154:	4b20      	ldr	r3, [pc, #128]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a156:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a158:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a15c:	4b1e      	ldr	r3, [pc, #120]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a15e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a162:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a166:	4b1c      	ldr	r3, [pc, #112]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a168:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a16c:	f000 fab3 	bl	801a6d6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a170:	2001      	movs	r0, #1
 801a172:	f7ff fc5d 	bl	8019a30 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a176:	4819      	ldr	r0, [pc, #100]	; (801a1dc <RadioSetTxConfig+0x204>)
 801a178:	f002 f878 	bl	801c26c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a17c:	4818      	ldr	r0, [pc, #96]	; (801a1e0 <RadioSetTxConfig+0x208>)
 801a17e:	f002 f947 	bl	801c410 <SUBGRF_SetPacketParams>
            break;
 801a182:	e012      	b.n	801a1aa <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801a184:	2004      	movs	r0, #4
 801a186:	f7ff fc53 	bl	8019a30 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a18a:	4b13      	ldr	r3, [pc, #76]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a18c:	2202      	movs	r2, #2
 801a18e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801a192:	4a11      	ldr	r2, [pc, #68]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a194:	6a3b      	ldr	r3, [r7, #32]
 801a196:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a198:	4b0f      	ldr	r3, [pc, #60]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a19a:	2216      	movs	r2, #22
 801a19c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a1a0:	480e      	ldr	r0, [pc, #56]	; (801a1dc <RadioSetTxConfig+0x204>)
 801a1a2:	f002 f863 	bl	801c26c <SUBGRF_SetModulationParams>
            break;
 801a1a6:	e000      	b.n	801a1aa <RadioSetTxConfig+0x1d2>
            break;
 801a1a8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a1aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a1ae:	4618      	mov	r0, r3
 801a1b0:	f002 fb92 	bl	801c8d8 <SUBGRF_SetRfTxPower>
 801a1b4:	4603      	mov	r3, r0
 801a1b6:	461a      	mov	r2, r3
 801a1b8:	4b07      	ldr	r3, [pc, #28]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a1ba:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 801a1be:	4b06      	ldr	r3, [pc, #24]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a1c0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a1c4:	4618      	mov	r0, r3
 801a1c6:	f002 fd56 	bl	801cc76 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a1ca:	4a03      	ldr	r2, [pc, #12]	; (801a1d8 <RadioSetTxConfig+0x200>)
 801a1cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a1ce:	6053      	str	r3, [r2, #4]
}
 801a1d0:	bf00      	nop
 801a1d2:	3718      	adds	r7, #24
 801a1d4:	46bd      	mov	sp, r7
 801a1d6:	bd80      	pop	{r7, pc}
 801a1d8:	20001ef4 	.word	0x20001ef4
 801a1dc:	20001f2c 	.word	0x20001f2c
 801a1e0:	20001f02 	.word	0x20001f02
 801a1e4:	0801ee1c 	.word	0x0801ee1c
 801a1e8:	0801f3f8 	.word	0x0801f3f8
 801a1ec:	20000160 	.word	0x20000160

0801a1f0 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801a1f0:	b480      	push	{r7}
 801a1f2:	b083      	sub	sp, #12
 801a1f4:	af00      	add	r7, sp, #0
 801a1f6:	6078      	str	r0, [r7, #4]
    return true;
 801a1f8:	2301      	movs	r3, #1
}
 801a1fa:	4618      	mov	r0, r3
 801a1fc:	370c      	adds	r7, #12
 801a1fe:	46bd      	mov	sp, r7
 801a200:	bc80      	pop	{r7}
 801a202:	4770      	bx	lr

0801a204 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801a204:	b480      	push	{r7}
 801a206:	b085      	sub	sp, #20
 801a208:	af00      	add	r7, sp, #0
 801a20a:	4603      	mov	r3, r0
 801a20c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801a20e:	2300      	movs	r3, #0
 801a210:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801a212:	79fb      	ldrb	r3, [r7, #7]
 801a214:	2b0a      	cmp	r3, #10
 801a216:	d83e      	bhi.n	801a296 <RadioGetLoRaBandwidthInHz+0x92>
 801a218:	a201      	add	r2, pc, #4	; (adr r2, 801a220 <RadioGetLoRaBandwidthInHz+0x1c>)
 801a21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a21e:	bf00      	nop
 801a220:	0801a24d 	.word	0x0801a24d
 801a224:	0801a25d 	.word	0x0801a25d
 801a228:	0801a26d 	.word	0x0801a26d
 801a22c:	0801a27d 	.word	0x0801a27d
 801a230:	0801a285 	.word	0x0801a285
 801a234:	0801a28b 	.word	0x0801a28b
 801a238:	0801a291 	.word	0x0801a291
 801a23c:	0801a297 	.word	0x0801a297
 801a240:	0801a255 	.word	0x0801a255
 801a244:	0801a265 	.word	0x0801a265
 801a248:	0801a275 	.word	0x0801a275
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801a24c:	f641 6384 	movw	r3, #7812	; 0x1e84
 801a250:	60fb      	str	r3, [r7, #12]
        break;
 801a252:	e020      	b.n	801a296 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801a254:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801a258:	60fb      	str	r3, [r7, #12]
        break;
 801a25a:	e01c      	b.n	801a296 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801a25c:	f643 5309 	movw	r3, #15625	; 0x3d09
 801a260:	60fb      	str	r3, [r7, #12]
        break;
 801a262:	e018      	b.n	801a296 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801a264:	f245 1361 	movw	r3, #20833	; 0x5161
 801a268:	60fb      	str	r3, [r7, #12]
        break;
 801a26a:	e014      	b.n	801a296 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801a26c:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a270:	60fb      	str	r3, [r7, #12]
        break;
 801a272:	e010      	b.n	801a296 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801a274:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801a278:	60fb      	str	r3, [r7, #12]
        break;
 801a27a:	e00c      	b.n	801a296 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801a27c:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a280:	60fb      	str	r3, [r7, #12]
        break;
 801a282:	e008      	b.n	801a296 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801a284:	4b07      	ldr	r3, [pc, #28]	; (801a2a4 <RadioGetLoRaBandwidthInHz+0xa0>)
 801a286:	60fb      	str	r3, [r7, #12]
        break;
 801a288:	e005      	b.n	801a296 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801a28a:	4b07      	ldr	r3, [pc, #28]	; (801a2a8 <RadioGetLoRaBandwidthInHz+0xa4>)
 801a28c:	60fb      	str	r3, [r7, #12]
        break;
 801a28e:	e002      	b.n	801a296 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801a290:	4b06      	ldr	r3, [pc, #24]	; (801a2ac <RadioGetLoRaBandwidthInHz+0xa8>)
 801a292:	60fb      	str	r3, [r7, #12]
        break;
 801a294:	bf00      	nop
    }

    return bandwidthInHz;
 801a296:	68fb      	ldr	r3, [r7, #12]
}
 801a298:	4618      	mov	r0, r3
 801a29a:	3714      	adds	r7, #20
 801a29c:	46bd      	mov	sp, r7
 801a29e:	bc80      	pop	{r7}
 801a2a0:	4770      	bx	lr
 801a2a2:	bf00      	nop
 801a2a4:	0001e848 	.word	0x0001e848
 801a2a8:	0003d090 	.word	0x0003d090
 801a2ac:	0007a120 	.word	0x0007a120

0801a2b0 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a2b0:	b480      	push	{r7}
 801a2b2:	b083      	sub	sp, #12
 801a2b4:	af00      	add	r7, sp, #0
 801a2b6:	6078      	str	r0, [r7, #4]
 801a2b8:	4608      	mov	r0, r1
 801a2ba:	4611      	mov	r1, r2
 801a2bc:	461a      	mov	r2, r3
 801a2be:	4603      	mov	r3, r0
 801a2c0:	70fb      	strb	r3, [r7, #3]
 801a2c2:	460b      	mov	r3, r1
 801a2c4:	803b      	strh	r3, [r7, #0]
 801a2c6:	4613      	mov	r3, r2
 801a2c8:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 801a2ca:	883b      	ldrh	r3, [r7, #0]
 801a2cc:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a2ce:	78ba      	ldrb	r2, [r7, #2]
 801a2d0:	f082 0201 	eor.w	r2, r2, #1
 801a2d4:	b2d2      	uxtb	r2, r2
 801a2d6:	2a00      	cmp	r2, #0
 801a2d8:	d001      	beq.n	801a2de <RadioGetGfskTimeOnAirNumerator+0x2e>
 801a2da:	2208      	movs	r2, #8
 801a2dc:	e000      	b.n	801a2e0 <RadioGetGfskTimeOnAirNumerator+0x30>
 801a2de:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801a2e0:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a2e2:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801a2e6:	7c3b      	ldrb	r3, [r7, #16]
 801a2e8:	7d39      	ldrb	r1, [r7, #20]
 801a2ea:	2900      	cmp	r1, #0
 801a2ec:	d001      	beq.n	801a2f2 <RadioGetGfskTimeOnAirNumerator+0x42>
 801a2ee:	2102      	movs	r1, #2
 801a2f0:	e000      	b.n	801a2f4 <RadioGetGfskTimeOnAirNumerator+0x44>
 801a2f2:	2100      	movs	r1, #0
 801a2f4:	440b      	add	r3, r1
 801a2f6:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a2f8:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 801a2fa:	4618      	mov	r0, r3
 801a2fc:	370c      	adds	r7, #12
 801a2fe:	46bd      	mov	sp, r7
 801a300:	bc80      	pop	{r7}
 801a302:	4770      	bx	lr

0801a304 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a304:	b480      	push	{r7}
 801a306:	b08b      	sub	sp, #44	; 0x2c
 801a308:	af00      	add	r7, sp, #0
 801a30a:	60f8      	str	r0, [r7, #12]
 801a30c:	60b9      	str	r1, [r7, #8]
 801a30e:	4611      	mov	r1, r2
 801a310:	461a      	mov	r2, r3
 801a312:	460b      	mov	r3, r1
 801a314:	71fb      	strb	r3, [r7, #7]
 801a316:	4613      	mov	r3, r2
 801a318:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801a31a:	79fb      	ldrb	r3, [r7, #7]
 801a31c:	3304      	adds	r3, #4
 801a31e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801a320:	2300      	movs	r3, #0
 801a322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801a326:	68bb      	ldr	r3, [r7, #8]
 801a328:	2b05      	cmp	r3, #5
 801a32a:	d002      	beq.n	801a332 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801a32c:	68bb      	ldr	r3, [r7, #8]
 801a32e:	2b06      	cmp	r3, #6
 801a330:	d104      	bne.n	801a33c <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801a332:	88bb      	ldrh	r3, [r7, #4]
 801a334:	2b0b      	cmp	r3, #11
 801a336:	d801      	bhi.n	801a33c <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801a338:	230c      	movs	r3, #12
 801a33a:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a33c:	68fb      	ldr	r3, [r7, #12]
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d105      	bne.n	801a34e <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801a342:	68bb      	ldr	r3, [r7, #8]
 801a344:	2b0b      	cmp	r3, #11
 801a346:	d008      	beq.n	801a35a <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a348:	68bb      	ldr	r3, [r7, #8]
 801a34a:	2b0c      	cmp	r3, #12
 801a34c:	d005      	beq.n	801a35a <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a34e:	68fb      	ldr	r3, [r7, #12]
 801a350:	2b01      	cmp	r3, #1
 801a352:	d105      	bne.n	801a360 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a354:	68bb      	ldr	r3, [r7, #8]
 801a356:	2b0c      	cmp	r3, #12
 801a358:	d102      	bne.n	801a360 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801a35a:	2301      	movs	r3, #1
 801a35c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a360:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801a364:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801a366:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a36a:	2a00      	cmp	r2, #0
 801a36c:	d001      	beq.n	801a372 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801a36e:	2210      	movs	r2, #16
 801a370:	e000      	b.n	801a374 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801a372:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a374:	4413      	add	r3, r2
 801a376:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801a378:	68bb      	ldr	r3, [r7, #8]
 801a37a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801a37c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801a37e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a382:	2a00      	cmp	r2, #0
 801a384:	d001      	beq.n	801a38a <RadioGetLoRaTimeOnAirNumerator+0x86>
 801a386:	2200      	movs	r2, #0
 801a388:	e000      	b.n	801a38c <RadioGetLoRaTimeOnAirNumerator+0x88>
 801a38a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801a38c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a38e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801a390:	68bb      	ldr	r3, [r7, #8]
 801a392:	2b06      	cmp	r3, #6
 801a394:	d803      	bhi.n	801a39e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801a396:	68bb      	ldr	r3, [r7, #8]
 801a398:	009b      	lsls	r3, r3, #2
 801a39a:	623b      	str	r3, [r7, #32]
 801a39c:	e00e      	b.n	801a3bc <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801a39e:	69fb      	ldr	r3, [r7, #28]
 801a3a0:	3308      	adds	r3, #8
 801a3a2:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801a3a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d004      	beq.n	801a3b6 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801a3ac:	68bb      	ldr	r3, [r7, #8]
 801a3ae:	3b02      	subs	r3, #2
 801a3b0:	009b      	lsls	r3, r3, #2
 801a3b2:	623b      	str	r3, [r7, #32]
 801a3b4:	e002      	b.n	801a3bc <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801a3b6:	68bb      	ldr	r3, [r7, #8]
 801a3b8:	009b      	lsls	r3, r3, #2
 801a3ba:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801a3bc:	69fb      	ldr	r3, [r7, #28]
 801a3be:	2b00      	cmp	r3, #0
 801a3c0:	da01      	bge.n	801a3c6 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801a3c6:	69fa      	ldr	r2, [r7, #28]
 801a3c8:	6a3b      	ldr	r3, [r7, #32]
 801a3ca:	4413      	add	r3, r2
 801a3cc:	1e5a      	subs	r2, r3, #1
 801a3ce:	6a3b      	ldr	r3, [r7, #32]
 801a3d0:	fb92 f3f3 	sdiv	r3, r2, r3
 801a3d4:	697a      	ldr	r2, [r7, #20]
 801a3d6:	fb03 f202 	mul.w	r2, r3, r2
 801a3da:	88bb      	ldrh	r3, [r7, #4]
 801a3dc:	4413      	add	r3, r2
    int32_t intermediate =
 801a3de:	330c      	adds	r3, #12
 801a3e0:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801a3e2:	68bb      	ldr	r3, [r7, #8]
 801a3e4:	2b06      	cmp	r3, #6
 801a3e6:	d802      	bhi.n	801a3ee <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801a3e8:	69bb      	ldr	r3, [r7, #24]
 801a3ea:	3302      	adds	r3, #2
 801a3ec:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801a3ee:	69bb      	ldr	r3, [r7, #24]
 801a3f0:	009b      	lsls	r3, r3, #2
 801a3f2:	1c5a      	adds	r2, r3, #1
 801a3f4:	68bb      	ldr	r3, [r7, #8]
 801a3f6:	3b02      	subs	r3, #2
 801a3f8:	fa02 f303 	lsl.w	r3, r2, r3
}
 801a3fc:	4618      	mov	r0, r3
 801a3fe:	372c      	adds	r7, #44	; 0x2c
 801a400:	46bd      	mov	sp, r7
 801a402:	bc80      	pop	{r7}
 801a404:	4770      	bx	lr
	...

0801a408 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801a408:	b580      	push	{r7, lr}
 801a40a:	b08a      	sub	sp, #40	; 0x28
 801a40c:	af04      	add	r7, sp, #16
 801a40e:	60b9      	str	r1, [r7, #8]
 801a410:	607a      	str	r2, [r7, #4]
 801a412:	461a      	mov	r2, r3
 801a414:	4603      	mov	r3, r0
 801a416:	73fb      	strb	r3, [r7, #15]
 801a418:	4613      	mov	r3, r2
 801a41a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801a41c:	2300      	movs	r3, #0
 801a41e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801a420:	2301      	movs	r3, #1
 801a422:	613b      	str	r3, [r7, #16]

    switch( modem )
 801a424:	7bfb      	ldrb	r3, [r7, #15]
 801a426:	2b00      	cmp	r3, #0
 801a428:	d002      	beq.n	801a430 <RadioTimeOnAir+0x28>
 801a42a:	2b01      	cmp	r3, #1
 801a42c:	d017      	beq.n	801a45e <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801a42e:	e035      	b.n	801a49c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801a430:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801a434:	8c3a      	ldrh	r2, [r7, #32]
 801a436:	7bb9      	ldrb	r1, [r7, #14]
 801a438:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a43c:	9301      	str	r3, [sp, #4]
 801a43e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a442:	9300      	str	r3, [sp, #0]
 801a444:	4603      	mov	r3, r0
 801a446:	6878      	ldr	r0, [r7, #4]
 801a448:	f7ff ff32 	bl	801a2b0 <RadioGetGfskTimeOnAirNumerator>
 801a44c:	4603      	mov	r3, r0
 801a44e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a452:	fb02 f303 	mul.w	r3, r2, r3
 801a456:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	613b      	str	r3, [r7, #16]
        break;
 801a45c:	e01e      	b.n	801a49c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801a45e:	8c39      	ldrh	r1, [r7, #32]
 801a460:	7bba      	ldrb	r2, [r7, #14]
 801a462:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a466:	9302      	str	r3, [sp, #8]
 801a468:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a46c:	9301      	str	r3, [sp, #4]
 801a46e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a472:	9300      	str	r3, [sp, #0]
 801a474:	460b      	mov	r3, r1
 801a476:	6879      	ldr	r1, [r7, #4]
 801a478:	68b8      	ldr	r0, [r7, #8]
 801a47a:	f7ff ff43 	bl	801a304 <RadioGetLoRaTimeOnAirNumerator>
 801a47e:	4603      	mov	r3, r0
 801a480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a484:	fb02 f303 	mul.w	r3, r2, r3
 801a488:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801a48a:	4a0a      	ldr	r2, [pc, #40]	; (801a4b4 <RadioTimeOnAir+0xac>)
 801a48c:	68bb      	ldr	r3, [r7, #8]
 801a48e:	4413      	add	r3, r2
 801a490:	781b      	ldrb	r3, [r3, #0]
 801a492:	4618      	mov	r0, r3
 801a494:	f7ff feb6 	bl	801a204 <RadioGetLoRaBandwidthInHz>
 801a498:	6138      	str	r0, [r7, #16]
        break;
 801a49a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 801a49c:	697a      	ldr	r2, [r7, #20]
 801a49e:	693b      	ldr	r3, [r7, #16]
 801a4a0:	4413      	add	r3, r2
 801a4a2:	1e5a      	subs	r2, r3, #1
 801a4a4:	693b      	ldr	r3, [r7, #16]
 801a4a6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801a4aa:	4618      	mov	r0, r3
 801a4ac:	3718      	adds	r7, #24
 801a4ae:	46bd      	mov	sp, r7
 801a4b0:	bd80      	pop	{r7, pc}
 801a4b2:	bf00      	nop
 801a4b4:	0801f3f8 	.word	0x0801f3f8

0801a4b8 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 801a4b8:	b580      	push	{r7, lr}
 801a4ba:	b084      	sub	sp, #16
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	6078      	str	r0, [r7, #4]
 801a4c0:	460b      	mov	r3, r1
 801a4c2:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801a4c4:	2300      	movs	r3, #0
 801a4c6:	2200      	movs	r2, #0
 801a4c8:	f240 2101 	movw	r1, #513	; 0x201
 801a4cc:	f240 2001 	movw	r0, #513	; 0x201
 801a4d0:	f001 fd36 	bl	801bf40 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a4d4:	4b71      	ldr	r3, [pc, #452]	; (801a69c <RadioSend+0x1e4>)
 801a4d6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a4da:	2101      	movs	r1, #1
 801a4dc:	4618      	mov	r0, r3
 801a4de:	f002 f9d3 	bl	801c888 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801a4e2:	4b6e      	ldr	r3, [pc, #440]	; (801a69c <RadioSend+0x1e4>)
 801a4e4:	781b      	ldrb	r3, [r3, #0]
 801a4e6:	2b01      	cmp	r3, #1
 801a4e8:	d112      	bne.n	801a510 <RadioSend+0x58>
 801a4ea:	4b6c      	ldr	r3, [pc, #432]	; (801a69c <RadioSend+0x1e4>)
 801a4ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a4f0:	2b06      	cmp	r3, #6
 801a4f2:	d10d      	bne.n	801a510 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801a4f4:	f640 0089 	movw	r0, #2185	; 0x889
 801a4f8:	f002 f8e6 	bl	801c6c8 <SUBGRF_ReadRegister>
 801a4fc:	4603      	mov	r3, r0
 801a4fe:	f023 0304 	bic.w	r3, r3, #4
 801a502:	b2db      	uxtb	r3, r3
 801a504:	4619      	mov	r1, r3
 801a506:	f640 0089 	movw	r0, #2185	; 0x889
 801a50a:	f002 f8c9 	bl	801c6a0 <SUBGRF_WriteRegister>
 801a50e:	e00c      	b.n	801a52a <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801a510:	f640 0089 	movw	r0, #2185	; 0x889
 801a514:	f002 f8d8 	bl	801c6c8 <SUBGRF_ReadRegister>
 801a518:	4603      	mov	r3, r0
 801a51a:	f043 0304 	orr.w	r3, r3, #4
 801a51e:	b2db      	uxtb	r3, r3
 801a520:	4619      	mov	r1, r3
 801a522:	f640 0089 	movw	r0, #2185	; 0x889
 801a526:	f002 f8bb 	bl	801c6a0 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 801a52a:	4b5c      	ldr	r3, [pc, #368]	; (801a69c <RadioSend+0x1e4>)
 801a52c:	781b      	ldrb	r3, [r3, #0]
 801a52e:	2b04      	cmp	r3, #4
 801a530:	f200 80a7 	bhi.w	801a682 <RadioSend+0x1ca>
 801a534:	a201      	add	r2, pc, #4	; (adr r2, 801a53c <RadioSend+0x84>)
 801a536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a53a:	bf00      	nop
 801a53c:	0801a56b 	.word	0x0801a56b
 801a540:	0801a551 	.word	0x0801a551
 801a544:	0801a56b 	.word	0x0801a56b
 801a548:	0801a5cb 	.word	0x0801a5cb
 801a54c:	0801a5eb 	.word	0x0801a5eb
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801a550:	4a52      	ldr	r2, [pc, #328]	; (801a69c <RadioSend+0x1e4>)
 801a552:	78fb      	ldrb	r3, [r7, #3]
 801a554:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a556:	4852      	ldr	r0, [pc, #328]	; (801a6a0 <RadioSend+0x1e8>)
 801a558:	f001 ff5a 	bl	801c410 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801a55c:	78fb      	ldrb	r3, [r7, #3]
 801a55e:	2200      	movs	r2, #0
 801a560:	4619      	mov	r1, r3
 801a562:	6878      	ldr	r0, [r7, #4]
 801a564:	f001 fa0e 	bl	801b984 <SUBGRF_SendPayload>
            break;
 801a568:	e08c      	b.n	801a684 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801a56a:	f002 fb76 	bl	801cc5a <RFW_Is_Init>
 801a56e:	4603      	mov	r3, r0
 801a570:	2b01      	cmp	r3, #1
 801a572:	d11d      	bne.n	801a5b0 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801a574:	f107 020d 	add.w	r2, r7, #13
 801a578:	78fb      	ldrb	r3, [r7, #3]
 801a57a:	4619      	mov	r1, r3
 801a57c:	6878      	ldr	r0, [r7, #4]
 801a57e:	f002 fb84 	bl	801cc8a <RFW_TransmitInit>
 801a582:	4603      	mov	r3, r0
 801a584:	2b00      	cmp	r3, #0
 801a586:	d10c      	bne.n	801a5a2 <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801a588:	7b7a      	ldrb	r2, [r7, #13]
 801a58a:	4b44      	ldr	r3, [pc, #272]	; (801a69c <RadioSend+0x1e4>)
 801a58c:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a58e:	4844      	ldr	r0, [pc, #272]	; (801a6a0 <RadioSend+0x1e8>)
 801a590:	f001 ff3e 	bl	801c410 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 801a594:	7b7b      	ldrb	r3, [r7, #13]
 801a596:	2200      	movs	r2, #0
 801a598:	4619      	mov	r1, r3
 801a59a:	6878      	ldr	r0, [r7, #4]
 801a59c:	f001 f9f2 	bl	801b984 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801a5a0:	e070      	b.n	801a684 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801a5a2:	4b40      	ldr	r3, [pc, #256]	; (801a6a4 <RadioSend+0x1ec>)
 801a5a4:	2201      	movs	r2, #1
 801a5a6:	2100      	movs	r1, #0
 801a5a8:	2002      	movs	r0, #2
 801a5aa:	f003 fc8f 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
 801a5ae:	e072      	b.n	801a696 <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801a5b0:	4a3a      	ldr	r2, [pc, #232]	; (801a69c <RadioSend+0x1e4>)
 801a5b2:	78fb      	ldrb	r3, [r7, #3]
 801a5b4:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a5b6:	483a      	ldr	r0, [pc, #232]	; (801a6a0 <RadioSend+0x1e8>)
 801a5b8:	f001 ff2a 	bl	801c410 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 801a5bc:	78fb      	ldrb	r3, [r7, #3]
 801a5be:	2200      	movs	r2, #0
 801a5c0:	4619      	mov	r1, r3
 801a5c2:	6878      	ldr	r0, [r7, #4]
 801a5c4:	f001 f9de 	bl	801b984 <SUBGRF_SendPayload>
            break;
 801a5c8:	e05c      	b.n	801a684 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801a5ca:	4b34      	ldr	r3, [pc, #208]	; (801a69c <RadioSend+0x1e4>)
 801a5cc:	2202      	movs	r2, #2
 801a5ce:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801a5d0:	4a32      	ldr	r2, [pc, #200]	; (801a69c <RadioSend+0x1e4>)
 801a5d2:	78fb      	ldrb	r3, [r7, #3]
 801a5d4:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a5d6:	4832      	ldr	r0, [pc, #200]	; (801a6a0 <RadioSend+0x1e8>)
 801a5d8:	f001 ff1a 	bl	801c410 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801a5dc:	78fb      	ldrb	r3, [r7, #3]
 801a5de:	2200      	movs	r2, #0
 801a5e0:	4619      	mov	r1, r3
 801a5e2:	6878      	ldr	r0, [r7, #4]
 801a5e4:	f001 f9ce 	bl	801b984 <SUBGRF_SendPayload>
            break;
 801a5e8:	e04c      	b.n	801a684 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801a5ea:	78fb      	ldrb	r3, [r7, #3]
 801a5ec:	461a      	mov	r2, r3
 801a5ee:	6879      	ldr	r1, [r7, #4]
 801a5f0:	482d      	ldr	r0, [pc, #180]	; (801a6a8 <RadioSend+0x1f0>)
 801a5f2:	f000 fcbe 	bl	801af72 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801a5f6:	4b29      	ldr	r3, [pc, #164]	; (801a69c <RadioSend+0x1e4>)
 801a5f8:	2202      	movs	r2, #2
 801a5fa:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801a5fc:	78fb      	ldrb	r3, [r7, #3]
 801a5fe:	3301      	adds	r3, #1
 801a600:	b2da      	uxtb	r2, r3
 801a602:	4b26      	ldr	r3, [pc, #152]	; (801a69c <RadioSend+0x1e4>)
 801a604:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a606:	4826      	ldr	r0, [pc, #152]	; (801a6a0 <RadioSend+0x1e8>)
 801a608:	f001 ff02 	bl	801c410 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801a60c:	2100      	movs	r1, #0
 801a60e:	20f1      	movs	r0, #241	; 0xf1
 801a610:	f000 f95d 	bl	801a8ce <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801a614:	2100      	movs	r1, #0
 801a616:	20f0      	movs	r0, #240	; 0xf0
 801a618:	f000 f959 	bl	801a8ce <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801a61c:	4b1f      	ldr	r3, [pc, #124]	; (801a69c <RadioSend+0x1e4>)
 801a61e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a620:	2b64      	cmp	r3, #100	; 0x64
 801a622:	d108      	bne.n	801a636 <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801a624:	2170      	movs	r1, #112	; 0x70
 801a626:	20f3      	movs	r0, #243	; 0xf3
 801a628:	f000 f951 	bl	801a8ce <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801a62c:	211d      	movs	r1, #29
 801a62e:	20f2      	movs	r0, #242	; 0xf2
 801a630:	f000 f94d 	bl	801a8ce <RadioWrite>
 801a634:	e007      	b.n	801a646 <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801a636:	21e1      	movs	r1, #225	; 0xe1
 801a638:	20f3      	movs	r0, #243	; 0xf3
 801a63a:	f000 f948 	bl	801a8ce <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801a63e:	2104      	movs	r1, #4
 801a640:	20f2      	movs	r0, #242	; 0xf2
 801a642:	f000 f944 	bl	801a8ce <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801a646:	78fb      	ldrb	r3, [r7, #3]
 801a648:	b29b      	uxth	r3, r3
 801a64a:	00db      	lsls	r3, r3, #3
 801a64c:	b29b      	uxth	r3, r3
 801a64e:	3302      	adds	r3, #2
 801a650:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801a652:	89fb      	ldrh	r3, [r7, #14]
 801a654:	0a1b      	lsrs	r3, r3, #8
 801a656:	b29b      	uxth	r3, r3
 801a658:	b2db      	uxtb	r3, r3
 801a65a:	4619      	mov	r1, r3
 801a65c:	20f4      	movs	r0, #244	; 0xf4
 801a65e:	f000 f936 	bl	801a8ce <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801a662:	89fb      	ldrh	r3, [r7, #14]
 801a664:	b2db      	uxtb	r3, r3
 801a666:	4619      	mov	r1, r3
 801a668:	20f5      	movs	r0, #245	; 0xf5
 801a66a:	f000 f930 	bl	801a8ce <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 801a66e:	78fb      	ldrb	r3, [r7, #3]
 801a670:	3301      	adds	r3, #1
 801a672:	b2db      	uxtb	r3, r3
 801a674:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801a678:	4619      	mov	r1, r3
 801a67a:	480b      	ldr	r0, [pc, #44]	; (801a6a8 <RadioSend+0x1f0>)
 801a67c:	f001 f982 	bl	801b984 <SUBGRF_SendPayload>
            break;
 801a680:	e000      	b.n	801a684 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a682:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801a684:	4b05      	ldr	r3, [pc, #20]	; (801a69c <RadioSend+0x1e4>)
 801a686:	685b      	ldr	r3, [r3, #4]
 801a688:	4619      	mov	r1, r3
 801a68a:	4808      	ldr	r0, [pc, #32]	; (801a6ac <RadioSend+0x1f4>)
 801a68c:	f003 fa84 	bl	801db98 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801a690:	4806      	ldr	r0, [pc, #24]	; (801a6ac <RadioSend+0x1f4>)
 801a692:	f003 f9a3 	bl	801d9dc <UTIL_TIMER_Start>
}
 801a696:	3710      	adds	r7, #16
 801a698:	46bd      	mov	sp, r7
 801a69a:	bd80      	pop	{r7, pc}
 801a69c:	20001ef4 	.word	0x20001ef4
 801a6a0:	20001f02 	.word	0x20001f02
 801a6a4:	0801ee24 	.word	0x0801ee24
 801a6a8:	20001df0 	.word	0x20001df0
 801a6ac:	20001f50 	.word	0x20001f50

0801a6b0 <RadioSleep>:

static void RadioSleep( void )
{
 801a6b0:	b580      	push	{r7, lr}
 801a6b2:	b082      	sub	sp, #8
 801a6b4:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801a6b6:	2300      	movs	r3, #0
 801a6b8:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801a6ba:	793b      	ldrb	r3, [r7, #4]
 801a6bc:	f043 0304 	orr.w	r3, r3, #4
 801a6c0:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801a6c2:	7938      	ldrb	r0, [r7, #4]
 801a6c4:	f001 fa3a 	bl	801bb3c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801a6c8:	2002      	movs	r0, #2
 801a6ca:	f7e8 f9ed 	bl	8002aa8 <HAL_Delay>
}
 801a6ce:	bf00      	nop
 801a6d0:	3708      	adds	r7, #8
 801a6d2:	46bd      	mov	sp, r7
 801a6d4:	bd80      	pop	{r7, pc}

0801a6d6 <RadioStandby>:

static void RadioStandby( void )
{
 801a6d6:	b580      	push	{r7, lr}
 801a6d8:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801a6da:	2000      	movs	r0, #0
 801a6dc:	f001 fa60 	bl	801bba0 <SUBGRF_SetStandby>
}
 801a6e0:	bf00      	nop
 801a6e2:	bd80      	pop	{r7, pc}

0801a6e4 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801a6e4:	b580      	push	{r7, lr}
 801a6e6:	b082      	sub	sp, #8
 801a6e8:	af00      	add	r7, sp, #0
 801a6ea:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 801a6ec:	f002 fab5 	bl	801cc5a <RFW_Is_Init>
 801a6f0:	4603      	mov	r3, r0
 801a6f2:	2b01      	cmp	r3, #1
 801a6f4:	d102      	bne.n	801a6fc <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801a6f6:	f002 fad8 	bl	801ccaa <RFW_ReceiveInit>
 801a6fa:	e007      	b.n	801a70c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a6fc:	2300      	movs	r3, #0
 801a6fe:	2200      	movs	r2, #0
 801a700:	f240 2162 	movw	r1, #610	; 0x262
 801a704:	f240 2062 	movw	r0, #610	; 0x262
 801a708:	f001 fc1a 	bl	801bf40 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d006      	beq.n	801a720 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801a712:	6879      	ldr	r1, [r7, #4]
 801a714:	4811      	ldr	r0, [pc, #68]	; (801a75c <RadioRx+0x78>)
 801a716:	f003 fa3f 	bl	801db98 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a71a:	4810      	ldr	r0, [pc, #64]	; (801a75c <RadioRx+0x78>)
 801a71c:	f003 f95e 	bl	801d9dc <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a720:	4b0f      	ldr	r3, [pc, #60]	; (801a760 <RadioRx+0x7c>)
 801a722:	2200      	movs	r2, #0
 801a724:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a726:	4b0e      	ldr	r3, [pc, #56]	; (801a760 <RadioRx+0x7c>)
 801a728:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a72c:	2100      	movs	r1, #0
 801a72e:	4618      	mov	r0, r3
 801a730:	f002 f8aa 	bl	801c888 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801a734:	4b0a      	ldr	r3, [pc, #40]	; (801a760 <RadioRx+0x7c>)
 801a736:	785b      	ldrb	r3, [r3, #1]
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d004      	beq.n	801a746 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a73c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a740:	f001 fa6a 	bl	801bc18 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801a744:	e005      	b.n	801a752 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801a746:	4b06      	ldr	r3, [pc, #24]	; (801a760 <RadioRx+0x7c>)
 801a748:	689b      	ldr	r3, [r3, #8]
 801a74a:	019b      	lsls	r3, r3, #6
 801a74c:	4618      	mov	r0, r3
 801a74e:	f001 fa63 	bl	801bc18 <SUBGRF_SetRx>
}
 801a752:	bf00      	nop
 801a754:	3708      	adds	r7, #8
 801a756:	46bd      	mov	sp, r7
 801a758:	bd80      	pop	{r7, pc}
 801a75a:	bf00      	nop
 801a75c:	20001f68 	.word	0x20001f68
 801a760:	20001ef4 	.word	0x20001ef4

0801a764 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b082      	sub	sp, #8
 801a768:	af00      	add	r7, sp, #0
 801a76a:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 801a76c:	f002 fa75 	bl	801cc5a <RFW_Is_Init>
 801a770:	4603      	mov	r3, r0
 801a772:	2b01      	cmp	r3, #1
 801a774:	d102      	bne.n	801a77c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801a776:	f002 fa98 	bl	801ccaa <RFW_ReceiveInit>
 801a77a:	e007      	b.n	801a78c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a77c:	2300      	movs	r3, #0
 801a77e:	2200      	movs	r2, #0
 801a780:	f240 2162 	movw	r1, #610	; 0x262
 801a784:	f240 2062 	movw	r0, #610	; 0x262
 801a788:	f001 fbda 	bl	801bf40 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d006      	beq.n	801a7a0 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801a792:	6879      	ldr	r1, [r7, #4]
 801a794:	4811      	ldr	r0, [pc, #68]	; (801a7dc <RadioRxBoosted+0x78>)
 801a796:	f003 f9ff 	bl	801db98 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a79a:	4810      	ldr	r0, [pc, #64]	; (801a7dc <RadioRxBoosted+0x78>)
 801a79c:	f003 f91e 	bl	801d9dc <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a7a0:	4b0f      	ldr	r3, [pc, #60]	; (801a7e0 <RadioRxBoosted+0x7c>)
 801a7a2:	2200      	movs	r2, #0
 801a7a4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a7a6:	4b0e      	ldr	r3, [pc, #56]	; (801a7e0 <RadioRxBoosted+0x7c>)
 801a7a8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a7ac:	2100      	movs	r1, #0
 801a7ae:	4618      	mov	r0, r3
 801a7b0:	f002 f86a 	bl	801c888 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801a7b4:	4b0a      	ldr	r3, [pc, #40]	; (801a7e0 <RadioRxBoosted+0x7c>)
 801a7b6:	785b      	ldrb	r3, [r3, #1]
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d004      	beq.n	801a7c6 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801a7bc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a7c0:	f001 fa4a 	bl	801bc58 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801a7c4:	e005      	b.n	801a7d2 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801a7c6:	4b06      	ldr	r3, [pc, #24]	; (801a7e0 <RadioRxBoosted+0x7c>)
 801a7c8:	689b      	ldr	r3, [r3, #8]
 801a7ca:	019b      	lsls	r3, r3, #6
 801a7cc:	4618      	mov	r0, r3
 801a7ce:	f001 fa43 	bl	801bc58 <SUBGRF_SetRxBoosted>
}
 801a7d2:	bf00      	nop
 801a7d4:	3708      	adds	r7, #8
 801a7d6:	46bd      	mov	sp, r7
 801a7d8:	bd80      	pop	{r7, pc}
 801a7da:	bf00      	nop
 801a7dc:	20001f68 	.word	0x20001f68
 801a7e0:	20001ef4 	.word	0x20001ef4

0801a7e4 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a7e4:	b580      	push	{r7, lr}
 801a7e6:	b082      	sub	sp, #8
 801a7e8:	af00      	add	r7, sp, #0
 801a7ea:	6078      	str	r0, [r7, #4]
 801a7ec:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	005a      	lsls	r2, r3, #1
 801a7f2:	683b      	ldr	r3, [r7, #0]
 801a7f4:	4413      	add	r3, r2
 801a7f6:	4a0c      	ldr	r2, [pc, #48]	; (801a828 <RadioSetRxDutyCycle+0x44>)
 801a7f8:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a7fa:	2300      	movs	r3, #0
 801a7fc:	2200      	movs	r2, #0
 801a7fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a802:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801a806:	f001 fb9b 	bl	801bf40 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a80a:	4b07      	ldr	r3, [pc, #28]	; (801a828 <RadioSetRxDutyCycle+0x44>)
 801a80c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a810:	2100      	movs	r1, #0
 801a812:	4618      	mov	r0, r3
 801a814:	f002 f838 	bl	801c888 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801a818:	6839      	ldr	r1, [r7, #0]
 801a81a:	6878      	ldr	r0, [r7, #4]
 801a81c:	f001 fa40 	bl	801bca0 <SUBGRF_SetRxDutyCycle>
}
 801a820:	bf00      	nop
 801a822:	3708      	adds	r7, #8
 801a824:	46bd      	mov	sp, r7
 801a826:	bd80      	pop	{r7, pc}
 801a828:	20001ef4 	.word	0x20001ef4

0801a82c <RadioStartCad>:

static void RadioStartCad( void )
{
 801a82c:	b580      	push	{r7, lr}
 801a82e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a830:	4b09      	ldr	r3, [pc, #36]	; (801a858 <RadioStartCad+0x2c>)
 801a832:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a836:	2100      	movs	r1, #0
 801a838:	4618      	mov	r0, r3
 801a83a:	f002 f825 	bl	801c888 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801a83e:	2300      	movs	r3, #0
 801a840:	2200      	movs	r2, #0
 801a842:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801a846:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801a84a:	f001 fb79 	bl	801bf40 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801a84e:	f001 fa53 	bl	801bcf8 <SUBGRF_SetCad>
}
 801a852:	bf00      	nop
 801a854:	bd80      	pop	{r7, pc}
 801a856:	bf00      	nop
 801a858:	20001ef4 	.word	0x20001ef4

0801a85c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801a85c:	b580      	push	{r7, lr}
 801a85e:	b084      	sub	sp, #16
 801a860:	af00      	add	r7, sp, #0
 801a862:	6078      	str	r0, [r7, #4]
 801a864:	460b      	mov	r3, r1
 801a866:	70fb      	strb	r3, [r7, #3]
 801a868:	4613      	mov	r3, r2
 801a86a:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801a86c:	883b      	ldrh	r3, [r7, #0]
 801a86e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a872:	fb02 f303 	mul.w	r3, r2, r3
 801a876:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801a878:	6878      	ldr	r0, [r7, #4]
 801a87a:	f001 fbbd 	bl	801bff8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801a87e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a882:	4618      	mov	r0, r3
 801a884:	f002 f828 	bl	801c8d8 <SUBGRF_SetRfTxPower>
 801a888:	4603      	mov	r3, r0
 801a88a:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801a88c:	7afb      	ldrb	r3, [r7, #11]
 801a88e:	2101      	movs	r1, #1
 801a890:	4618      	mov	r0, r3
 801a892:	f001 fff9 	bl	801c888 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801a896:	f001 fa3d 	bl	801bd14 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801a89a:	68f9      	ldr	r1, [r7, #12]
 801a89c:	4804      	ldr	r0, [pc, #16]	; (801a8b0 <RadioSetTxContinuousWave+0x54>)
 801a89e:	f003 f97b 	bl	801db98 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801a8a2:	4803      	ldr	r0, [pc, #12]	; (801a8b0 <RadioSetTxContinuousWave+0x54>)
 801a8a4:	f003 f89a 	bl	801d9dc <UTIL_TIMER_Start>
}
 801a8a8:	bf00      	nop
 801a8aa:	3710      	adds	r7, #16
 801a8ac:	46bd      	mov	sp, r7
 801a8ae:	bd80      	pop	{r7, pc}
 801a8b0:	20001f50 	.word	0x20001f50

0801a8b4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801a8b4:	b580      	push	{r7, lr}
 801a8b6:	b082      	sub	sp, #8
 801a8b8:	af00      	add	r7, sp, #0
 801a8ba:	4603      	mov	r3, r0
 801a8bc:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801a8be:	f001 fe5c 	bl	801c57a <SUBGRF_GetRssiInst>
 801a8c2:	4603      	mov	r3, r0
 801a8c4:	b21b      	sxth	r3, r3
}
 801a8c6:	4618      	mov	r0, r3
 801a8c8:	3708      	adds	r7, #8
 801a8ca:	46bd      	mov	sp, r7
 801a8cc:	bd80      	pop	{r7, pc}

0801a8ce <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801a8ce:	b580      	push	{r7, lr}
 801a8d0:	b082      	sub	sp, #8
 801a8d2:	af00      	add	r7, sp, #0
 801a8d4:	4603      	mov	r3, r0
 801a8d6:	460a      	mov	r2, r1
 801a8d8:	80fb      	strh	r3, [r7, #6]
 801a8da:	4613      	mov	r3, r2
 801a8dc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801a8de:	797a      	ldrb	r2, [r7, #5]
 801a8e0:	88fb      	ldrh	r3, [r7, #6]
 801a8e2:	4611      	mov	r1, r2
 801a8e4:	4618      	mov	r0, r3
 801a8e6:	f001 fedb 	bl	801c6a0 <SUBGRF_WriteRegister>
}
 801a8ea:	bf00      	nop
 801a8ec:	3708      	adds	r7, #8
 801a8ee:	46bd      	mov	sp, r7
 801a8f0:	bd80      	pop	{r7, pc}

0801a8f2 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801a8f2:	b580      	push	{r7, lr}
 801a8f4:	b082      	sub	sp, #8
 801a8f6:	af00      	add	r7, sp, #0
 801a8f8:	4603      	mov	r3, r0
 801a8fa:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801a8fc:	88fb      	ldrh	r3, [r7, #6]
 801a8fe:	4618      	mov	r0, r3
 801a900:	f001 fee2 	bl	801c6c8 <SUBGRF_ReadRegister>
 801a904:	4603      	mov	r3, r0
}
 801a906:	4618      	mov	r0, r3
 801a908:	3708      	adds	r7, #8
 801a90a:	46bd      	mov	sp, r7
 801a90c:	bd80      	pop	{r7, pc}

0801a90e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801a90e:	b580      	push	{r7, lr}
 801a910:	b082      	sub	sp, #8
 801a912:	af00      	add	r7, sp, #0
 801a914:	4603      	mov	r3, r0
 801a916:	6039      	str	r1, [r7, #0]
 801a918:	80fb      	strh	r3, [r7, #6]
 801a91a:	4613      	mov	r3, r2
 801a91c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801a91e:	797b      	ldrb	r3, [r7, #5]
 801a920:	b29a      	uxth	r2, r3
 801a922:	88fb      	ldrh	r3, [r7, #6]
 801a924:	6839      	ldr	r1, [r7, #0]
 801a926:	4618      	mov	r0, r3
 801a928:	f001 fee2 	bl	801c6f0 <SUBGRF_WriteRegisters>
}
 801a92c:	bf00      	nop
 801a92e:	3708      	adds	r7, #8
 801a930:	46bd      	mov	sp, r7
 801a932:	bd80      	pop	{r7, pc}

0801a934 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801a934:	b580      	push	{r7, lr}
 801a936:	b082      	sub	sp, #8
 801a938:	af00      	add	r7, sp, #0
 801a93a:	4603      	mov	r3, r0
 801a93c:	6039      	str	r1, [r7, #0]
 801a93e:	80fb      	strh	r3, [r7, #6]
 801a940:	4613      	mov	r3, r2
 801a942:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801a944:	797b      	ldrb	r3, [r7, #5]
 801a946:	b29a      	uxth	r2, r3
 801a948:	88fb      	ldrh	r3, [r7, #6]
 801a94a:	6839      	ldr	r1, [r7, #0]
 801a94c:	4618      	mov	r0, r3
 801a94e:	f001 fef1 	bl	801c734 <SUBGRF_ReadRegisters>
}
 801a952:	bf00      	nop
 801a954:	3708      	adds	r7, #8
 801a956:	46bd      	mov	sp, r7
 801a958:	bd80      	pop	{r7, pc}
	...

0801a95c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801a95c:	b580      	push	{r7, lr}
 801a95e:	b082      	sub	sp, #8
 801a960:	af00      	add	r7, sp, #0
 801a962:	4603      	mov	r3, r0
 801a964:	460a      	mov	r2, r1
 801a966:	71fb      	strb	r3, [r7, #7]
 801a968:	4613      	mov	r3, r2
 801a96a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801a96c:	79fb      	ldrb	r3, [r7, #7]
 801a96e:	2b01      	cmp	r3, #1
 801a970:	d10a      	bne.n	801a988 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801a972:	4a0e      	ldr	r2, [pc, #56]	; (801a9ac <RadioSetMaxPayloadLength+0x50>)
 801a974:	79bb      	ldrb	r3, [r7, #6]
 801a976:	7013      	strb	r3, [r2, #0]
 801a978:	4b0c      	ldr	r3, [pc, #48]	; (801a9ac <RadioSetMaxPayloadLength+0x50>)
 801a97a:	781a      	ldrb	r2, [r3, #0]
 801a97c:	4b0c      	ldr	r3, [pc, #48]	; (801a9b0 <RadioSetMaxPayloadLength+0x54>)
 801a97e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a980:	480c      	ldr	r0, [pc, #48]	; (801a9b4 <RadioSetMaxPayloadLength+0x58>)
 801a982:	f001 fd45 	bl	801c410 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801a986:	e00d      	b.n	801a9a4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801a988:	4b09      	ldr	r3, [pc, #36]	; (801a9b0 <RadioSetMaxPayloadLength+0x54>)
 801a98a:	7d5b      	ldrb	r3, [r3, #21]
 801a98c:	2b01      	cmp	r3, #1
 801a98e:	d109      	bne.n	801a9a4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801a990:	4a06      	ldr	r2, [pc, #24]	; (801a9ac <RadioSetMaxPayloadLength+0x50>)
 801a992:	79bb      	ldrb	r3, [r7, #6]
 801a994:	7013      	strb	r3, [r2, #0]
 801a996:	4b05      	ldr	r3, [pc, #20]	; (801a9ac <RadioSetMaxPayloadLength+0x50>)
 801a998:	781a      	ldrb	r2, [r3, #0]
 801a99a:	4b05      	ldr	r3, [pc, #20]	; (801a9b0 <RadioSetMaxPayloadLength+0x54>)
 801a99c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a99e:	4805      	ldr	r0, [pc, #20]	; (801a9b4 <RadioSetMaxPayloadLength+0x58>)
 801a9a0:	f001 fd36 	bl	801c410 <SUBGRF_SetPacketParams>
}
 801a9a4:	bf00      	nop
 801a9a6:	3708      	adds	r7, #8
 801a9a8:	46bd      	mov	sp, r7
 801a9aa:	bd80      	pop	{r7, pc}
 801a9ac:	20000160 	.word	0x20000160
 801a9b0:	20001ef4 	.word	0x20001ef4
 801a9b4:	20001f02 	.word	0x20001f02

0801a9b8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801a9b8:	b580      	push	{r7, lr}
 801a9ba:	b082      	sub	sp, #8
 801a9bc:	af00      	add	r7, sp, #0
 801a9be:	4603      	mov	r3, r0
 801a9c0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801a9c2:	4a13      	ldr	r2, [pc, #76]	; (801aa10 <RadioSetPublicNetwork+0x58>)
 801a9c4:	79fb      	ldrb	r3, [r7, #7]
 801a9c6:	7313      	strb	r3, [r2, #12]
 801a9c8:	4b11      	ldr	r3, [pc, #68]	; (801aa10 <RadioSetPublicNetwork+0x58>)
 801a9ca:	7b1a      	ldrb	r2, [r3, #12]
 801a9cc:	4b10      	ldr	r3, [pc, #64]	; (801aa10 <RadioSetPublicNetwork+0x58>)
 801a9ce:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801a9d0:	2001      	movs	r0, #1
 801a9d2:	f7ff f82d 	bl	8019a30 <RadioSetModem>
    if( enable == true )
 801a9d6:	79fb      	ldrb	r3, [r7, #7]
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d00a      	beq.n	801a9f2 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801a9dc:	2134      	movs	r1, #52	; 0x34
 801a9de:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801a9e2:	f001 fe5d 	bl	801c6a0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801a9e6:	2144      	movs	r1, #68	; 0x44
 801a9e8:	f240 7041 	movw	r0, #1857	; 0x741
 801a9ec:	f001 fe58 	bl	801c6a0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801a9f0:	e009      	b.n	801aa06 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801a9f2:	2114      	movs	r1, #20
 801a9f4:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801a9f8:	f001 fe52 	bl	801c6a0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801a9fc:	2124      	movs	r1, #36	; 0x24
 801a9fe:	f240 7041 	movw	r0, #1857	; 0x741
 801aa02:	f001 fe4d 	bl	801c6a0 <SUBGRF_WriteRegister>
}
 801aa06:	bf00      	nop
 801aa08:	3708      	adds	r7, #8
 801aa0a:	46bd      	mov	sp, r7
 801aa0c:	bd80      	pop	{r7, pc}
 801aa0e:	bf00      	nop
 801aa10:	20001ef4 	.word	0x20001ef4

0801aa14 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801aa14:	b580      	push	{r7, lr}
 801aa16:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801aa18:	f001 ff92 	bl	801c940 <SUBGRF_GetRadioWakeUpTime>
 801aa1c:	4603      	mov	r3, r0
 801aa1e:	3303      	adds	r3, #3
}
 801aa20:	4618      	mov	r0, r3
 801aa22:	bd80      	pop	{r7, pc}

0801aa24 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801aa24:	b580      	push	{r7, lr}
 801aa26:	b082      	sub	sp, #8
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801aa2c:	f000 f80e 	bl	801aa4c <RadioOnTxTimeoutProcess>
}
 801aa30:	bf00      	nop
 801aa32:	3708      	adds	r7, #8
 801aa34:	46bd      	mov	sp, r7
 801aa36:	bd80      	pop	{r7, pc}

0801aa38 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801aa38:	b580      	push	{r7, lr}
 801aa3a:	b082      	sub	sp, #8
 801aa3c:	af00      	add	r7, sp, #0
 801aa3e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801aa40:	f000 f818 	bl	801aa74 <RadioOnRxTimeoutProcess>
}
 801aa44:	bf00      	nop
 801aa46:	3708      	adds	r7, #8
 801aa48:	46bd      	mov	sp, r7
 801aa4a:	bd80      	pop	{r7, pc}

0801aa4c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801aa4c:	b580      	push	{r7, lr}
 801aa4e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801aa50:	4b07      	ldr	r3, [pc, #28]	; (801aa70 <RadioOnTxTimeoutProcess+0x24>)
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	d008      	beq.n	801aa6a <RadioOnTxTimeoutProcess+0x1e>
 801aa58:	4b05      	ldr	r3, [pc, #20]	; (801aa70 <RadioOnTxTimeoutProcess+0x24>)
 801aa5a:	681b      	ldr	r3, [r3, #0]
 801aa5c:	685b      	ldr	r3, [r3, #4]
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	d003      	beq.n	801aa6a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801aa62:	4b03      	ldr	r3, [pc, #12]	; (801aa70 <RadioOnTxTimeoutProcess+0x24>)
 801aa64:	681b      	ldr	r3, [r3, #0]
 801aa66:	685b      	ldr	r3, [r3, #4]
 801aa68:	4798      	blx	r3
    }
}
 801aa6a:	bf00      	nop
 801aa6c:	bd80      	pop	{r7, pc}
 801aa6e:	bf00      	nop
 801aa70:	20001ef0 	.word	0x20001ef0

0801aa74 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801aa74:	b580      	push	{r7, lr}
 801aa76:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801aa78:	4b07      	ldr	r3, [pc, #28]	; (801aa98 <RadioOnRxTimeoutProcess+0x24>)
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d008      	beq.n	801aa92 <RadioOnRxTimeoutProcess+0x1e>
 801aa80:	4b05      	ldr	r3, [pc, #20]	; (801aa98 <RadioOnRxTimeoutProcess+0x24>)
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	68db      	ldr	r3, [r3, #12]
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	d003      	beq.n	801aa92 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801aa8a:	4b03      	ldr	r3, [pc, #12]	; (801aa98 <RadioOnRxTimeoutProcess+0x24>)
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	68db      	ldr	r3, [r3, #12]
 801aa90:	4798      	blx	r3
    }
}
 801aa92:	bf00      	nop
 801aa94:	bd80      	pop	{r7, pc}
 801aa96:	bf00      	nop
 801aa98:	20001ef0 	.word	0x20001ef0

0801aa9c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801aa9c:	b580      	push	{r7, lr}
 801aa9e:	b082      	sub	sp, #8
 801aaa0:	af00      	add	r7, sp, #0
 801aaa2:	4603      	mov	r3, r0
 801aaa4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801aaa6:	4a05      	ldr	r2, [pc, #20]	; (801aabc <RadioOnDioIrq+0x20>)
 801aaa8:	88fb      	ldrh	r3, [r7, #6]
 801aaaa:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801aaae:	f000 f807 	bl	801aac0 <RadioIrqProcess>
}
 801aab2:	bf00      	nop
 801aab4:	3708      	adds	r7, #8
 801aab6:	46bd      	mov	sp, r7
 801aab8:	bd80      	pop	{r7, pc}
 801aaba:	bf00      	nop
 801aabc:	20001ef4 	.word	0x20001ef4

0801aac0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801aac0:	b5b0      	push	{r4, r5, r7, lr}
 801aac2:	b082      	sub	sp, #8
 801aac4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801aac6:	2300      	movs	r3, #0
 801aac8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801aaca:	2300      	movs	r3, #0
 801aacc:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801aace:	4ba8      	ldr	r3, [pc, #672]	; (801ad70 <RadioIrqProcess+0x2b0>)
 801aad0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801aad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801aad8:	f000 810d 	beq.w	801acf6 <RadioIrqProcess+0x236>
 801aadc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801aae0:	f300 81e8 	bgt.w	801aeb4 <RadioIrqProcess+0x3f4>
 801aae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801aae8:	f000 80f1 	beq.w	801acce <RadioIrqProcess+0x20e>
 801aaec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801aaf0:	f300 81e0 	bgt.w	801aeb4 <RadioIrqProcess+0x3f4>
 801aaf4:	2b80      	cmp	r3, #128	; 0x80
 801aaf6:	f000 80d6 	beq.w	801aca6 <RadioIrqProcess+0x1e6>
 801aafa:	2b80      	cmp	r3, #128	; 0x80
 801aafc:	f300 81da 	bgt.w	801aeb4 <RadioIrqProcess+0x3f4>
 801ab00:	2b20      	cmp	r3, #32
 801ab02:	dc49      	bgt.n	801ab98 <RadioIrqProcess+0xd8>
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	f340 81d5 	ble.w	801aeb4 <RadioIrqProcess+0x3f4>
 801ab0a:	3b01      	subs	r3, #1
 801ab0c:	2b1f      	cmp	r3, #31
 801ab0e:	f200 81d1 	bhi.w	801aeb4 <RadioIrqProcess+0x3f4>
 801ab12:	a201      	add	r2, pc, #4	; (adr r2, 801ab18 <RadioIrqProcess+0x58>)
 801ab14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ab18:	0801aba1 	.word	0x0801aba1
 801ab1c:	0801abdb 	.word	0x0801abdb
 801ab20:	0801aeb5 	.word	0x0801aeb5
 801ab24:	0801ad91 	.word	0x0801ad91
 801ab28:	0801aeb5 	.word	0x0801aeb5
 801ab2c:	0801aeb5 	.word	0x0801aeb5
 801ab30:	0801aeb5 	.word	0x0801aeb5
 801ab34:	0801ae0d 	.word	0x0801ae0d
 801ab38:	0801aeb5 	.word	0x0801aeb5
 801ab3c:	0801aeb5 	.word	0x0801aeb5
 801ab40:	0801aeb5 	.word	0x0801aeb5
 801ab44:	0801aeb5 	.word	0x0801aeb5
 801ab48:	0801aeb5 	.word	0x0801aeb5
 801ab4c:	0801aeb5 	.word	0x0801aeb5
 801ab50:	0801aeb5 	.word	0x0801aeb5
 801ab54:	0801ae29 	.word	0x0801ae29
 801ab58:	0801aeb5 	.word	0x0801aeb5
 801ab5c:	0801aeb5 	.word	0x0801aeb5
 801ab60:	0801aeb5 	.word	0x0801aeb5
 801ab64:	0801aeb5 	.word	0x0801aeb5
 801ab68:	0801aeb5 	.word	0x0801aeb5
 801ab6c:	0801aeb5 	.word	0x0801aeb5
 801ab70:	0801aeb5 	.word	0x0801aeb5
 801ab74:	0801aeb5 	.word	0x0801aeb5
 801ab78:	0801aeb5 	.word	0x0801aeb5
 801ab7c:	0801aeb5 	.word	0x0801aeb5
 801ab80:	0801aeb5 	.word	0x0801aeb5
 801ab84:	0801aeb5 	.word	0x0801aeb5
 801ab88:	0801aeb5 	.word	0x0801aeb5
 801ab8c:	0801aeb5 	.word	0x0801aeb5
 801ab90:	0801aeb5 	.word	0x0801aeb5
 801ab94:	0801ae37 	.word	0x0801ae37
 801ab98:	2b40      	cmp	r3, #64	; 0x40
 801ab9a:	f000 816d 	beq.w	801ae78 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801ab9e:	e189      	b.n	801aeb4 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801aba0:	4874      	ldr	r0, [pc, #464]	; (801ad74 <RadioIrqProcess+0x2b4>)
 801aba2:	f002 ff89 	bl	801dab8 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801aba6:	2000      	movs	r0, #0
 801aba8:	f000 fffa 	bl	801bba0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801abac:	f002 f85c 	bl	801cc68 <RFW_Is_LongPacketModeEnabled>
 801abb0:	4603      	mov	r3, r0
 801abb2:	2b01      	cmp	r3, #1
 801abb4:	d101      	bne.n	801abba <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801abb6:	f002 f880 	bl	801ccba <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801abba:	4b6f      	ldr	r3, [pc, #444]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801abbc:	681b      	ldr	r3, [r3, #0]
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	f000 817a 	beq.w	801aeb8 <RadioIrqProcess+0x3f8>
 801abc4:	4b6c      	ldr	r3, [pc, #432]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	2b00      	cmp	r3, #0
 801abcc:	f000 8174 	beq.w	801aeb8 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801abd0:	4b69      	ldr	r3, [pc, #420]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	4798      	blx	r3
        break;
 801abd8:	e16e      	b.n	801aeb8 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801abda:	4868      	ldr	r0, [pc, #416]	; (801ad7c <RadioIrqProcess+0x2bc>)
 801abdc:	f002 ff6c 	bl	801dab8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801abe0:	4b63      	ldr	r3, [pc, #396]	; (801ad70 <RadioIrqProcess+0x2b0>)
 801abe2:	785b      	ldrb	r3, [r3, #1]
 801abe4:	f083 0301 	eor.w	r3, r3, #1
 801abe8:	b2db      	uxtb	r3, r3
 801abea:	2b00      	cmp	r3, #0
 801abec:	d014      	beq.n	801ac18 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801abee:	2000      	movs	r0, #0
 801abf0:	f000 ffd6 	bl	801bba0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801abf4:	2100      	movs	r1, #0
 801abf6:	f640 1002 	movw	r0, #2306	; 0x902
 801abfa:	f001 fd51 	bl	801c6a0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801abfe:	f640 1044 	movw	r0, #2372	; 0x944
 801ac02:	f001 fd61 	bl	801c6c8 <SUBGRF_ReadRegister>
 801ac06:	4603      	mov	r3, r0
 801ac08:	f043 0302 	orr.w	r3, r3, #2
 801ac0c:	b2db      	uxtb	r3, r3
 801ac0e:	4619      	mov	r1, r3
 801ac10:	f640 1044 	movw	r0, #2372	; 0x944
 801ac14:	f001 fd44 	bl	801c6a0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801ac18:	1dfb      	adds	r3, r7, #7
 801ac1a:	22ff      	movs	r2, #255	; 0xff
 801ac1c:	4619      	mov	r1, r3
 801ac1e:	4858      	ldr	r0, [pc, #352]	; (801ad80 <RadioIrqProcess+0x2c0>)
 801ac20:	f000 fe8e 	bl	801b940 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801ac24:	4857      	ldr	r0, [pc, #348]	; (801ad84 <RadioIrqProcess+0x2c4>)
 801ac26:	f001 fce9 	bl	801c5fc <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801ac2a:	4b53      	ldr	r3, [pc, #332]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	f000 8144 	beq.w	801aebc <RadioIrqProcess+0x3fc>
 801ac34:	4b50      	ldr	r3, [pc, #320]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801ac36:	681b      	ldr	r3, [r3, #0]
 801ac38:	689b      	ldr	r3, [r3, #8]
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	f000 813e 	beq.w	801aebc <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801ac40:	4b4b      	ldr	r3, [pc, #300]	; (801ad70 <RadioIrqProcess+0x2b0>)
 801ac42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801ac46:	2b01      	cmp	r3, #1
 801ac48:	d10e      	bne.n	801ac68 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801ac4a:	4b4b      	ldr	r3, [pc, #300]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	689c      	ldr	r4, [r3, #8]
 801ac50:	79fb      	ldrb	r3, [r7, #7]
 801ac52:	b299      	uxth	r1, r3
 801ac54:	4b46      	ldr	r3, [pc, #280]	; (801ad70 <RadioIrqProcess+0x2b0>)
 801ac56:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801ac5a:	b21a      	sxth	r2, r3
 801ac5c:	4b44      	ldr	r3, [pc, #272]	; (801ad70 <RadioIrqProcess+0x2b0>)
 801ac5e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801ac62:	4847      	ldr	r0, [pc, #284]	; (801ad80 <RadioIrqProcess+0x2c0>)
 801ac64:	47a0      	blx	r4
                break;
 801ac66:	e01d      	b.n	801aca4 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801ac68:	4b41      	ldr	r3, [pc, #260]	; (801ad70 <RadioIrqProcess+0x2b0>)
 801ac6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ac6c:	463a      	mov	r2, r7
 801ac6e:	4611      	mov	r1, r2
 801ac70:	4618      	mov	r0, r3
 801ac72:	f001 ff47 	bl	801cb04 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801ac76:	4b40      	ldr	r3, [pc, #256]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801ac78:	681b      	ldr	r3, [r3, #0]
 801ac7a:	689c      	ldr	r4, [r3, #8]
 801ac7c:	79fb      	ldrb	r3, [r7, #7]
 801ac7e:	b299      	uxth	r1, r3
 801ac80:	4b3b      	ldr	r3, [pc, #236]	; (801ad70 <RadioIrqProcess+0x2b0>)
 801ac82:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801ac86:	b218      	sxth	r0, r3
 801ac88:	683b      	ldr	r3, [r7, #0]
 801ac8a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801ac8e:	4a3e      	ldr	r2, [pc, #248]	; (801ad88 <RadioIrqProcess+0x2c8>)
 801ac90:	fb82 5203 	smull	r5, r2, r2, r3
 801ac94:	1192      	asrs	r2, r2, #6
 801ac96:	17db      	asrs	r3, r3, #31
 801ac98:	1ad3      	subs	r3, r2, r3
 801ac9a:	b25b      	sxtb	r3, r3
 801ac9c:	4602      	mov	r2, r0
 801ac9e:	4838      	ldr	r0, [pc, #224]	; (801ad80 <RadioIrqProcess+0x2c0>)
 801aca0:	47a0      	blx	r4
                break;
 801aca2:	bf00      	nop
        break;
 801aca4:	e10a      	b.n	801aebc <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801aca6:	2000      	movs	r0, #0
 801aca8:	f000 ff7a 	bl	801bba0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801acac:	4b32      	ldr	r3, [pc, #200]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801acae:	681b      	ldr	r3, [r3, #0]
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	f000 8105 	beq.w	801aec0 <RadioIrqProcess+0x400>
 801acb6:	4b30      	ldr	r3, [pc, #192]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801acb8:	681b      	ldr	r3, [r3, #0]
 801acba:	699b      	ldr	r3, [r3, #24]
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	f000 80ff 	beq.w	801aec0 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801acc2:	4b2d      	ldr	r3, [pc, #180]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	699b      	ldr	r3, [r3, #24]
 801acc8:	2000      	movs	r0, #0
 801acca:	4798      	blx	r3
        break;
 801accc:	e0f8      	b.n	801aec0 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801acce:	2000      	movs	r0, #0
 801acd0:	f000 ff66 	bl	801bba0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801acd4:	4b28      	ldr	r3, [pc, #160]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	2b00      	cmp	r3, #0
 801acda:	f000 80f3 	beq.w	801aec4 <RadioIrqProcess+0x404>
 801acde:	4b26      	ldr	r3, [pc, #152]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	699b      	ldr	r3, [r3, #24]
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	f000 80ed 	beq.w	801aec4 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801acea:	4b23      	ldr	r3, [pc, #140]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	699b      	ldr	r3, [r3, #24]
 801acf0:	2001      	movs	r0, #1
 801acf2:	4798      	blx	r3
        break;
 801acf4:	e0e6      	b.n	801aec4 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801acf6:	4b25      	ldr	r3, [pc, #148]	; (801ad8c <RadioIrqProcess+0x2cc>)
 801acf8:	2201      	movs	r2, #1
 801acfa:	2100      	movs	r1, #0
 801acfc:	2002      	movs	r0, #2
 801acfe:	f003 f8e5 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801ad02:	f000 fe03 	bl	801b90c <SUBGRF_GetOperatingMode>
 801ad06:	4603      	mov	r3, r0
 801ad08:	2b04      	cmp	r3, #4
 801ad0a:	d115      	bne.n	801ad38 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801ad0c:	4819      	ldr	r0, [pc, #100]	; (801ad74 <RadioIrqProcess+0x2b4>)
 801ad0e:	f002 fed3 	bl	801dab8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801ad12:	2000      	movs	r0, #0
 801ad14:	f000 ff44 	bl	801bba0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801ad18:	4b17      	ldr	r3, [pc, #92]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	f000 80d3 	beq.w	801aec8 <RadioIrqProcess+0x408>
 801ad22:	4b15      	ldr	r3, [pc, #84]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	685b      	ldr	r3, [r3, #4]
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	f000 80cd 	beq.w	801aec8 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801ad2e:	4b12      	ldr	r3, [pc, #72]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801ad30:	681b      	ldr	r3, [r3, #0]
 801ad32:	685b      	ldr	r3, [r3, #4]
 801ad34:	4798      	blx	r3
        break;
 801ad36:	e0c7      	b.n	801aec8 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801ad38:	f000 fde8 	bl	801b90c <SUBGRF_GetOperatingMode>
 801ad3c:	4603      	mov	r3, r0
 801ad3e:	2b05      	cmp	r3, #5
 801ad40:	f040 80c2 	bne.w	801aec8 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801ad44:	480d      	ldr	r0, [pc, #52]	; (801ad7c <RadioIrqProcess+0x2bc>)
 801ad46:	f002 feb7 	bl	801dab8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801ad4a:	2000      	movs	r0, #0
 801ad4c:	f000 ff28 	bl	801bba0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ad50:	4b09      	ldr	r3, [pc, #36]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	f000 80b7 	beq.w	801aec8 <RadioIrqProcess+0x408>
 801ad5a:	4b07      	ldr	r3, [pc, #28]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	68db      	ldr	r3, [r3, #12]
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	f000 80b1 	beq.w	801aec8 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801ad66:	4b04      	ldr	r3, [pc, #16]	; (801ad78 <RadioIrqProcess+0x2b8>)
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	68db      	ldr	r3, [r3, #12]
 801ad6c:	4798      	blx	r3
        break;
 801ad6e:	e0ab      	b.n	801aec8 <RadioIrqProcess+0x408>
 801ad70:	20001ef4 	.word	0x20001ef4
 801ad74:	20001f50 	.word	0x20001f50
 801ad78:	20001ef0 	.word	0x20001ef0
 801ad7c:	20001f68 	.word	0x20001f68
 801ad80:	20001df0 	.word	0x20001df0
 801ad84:	20001f18 	.word	0x20001f18
 801ad88:	10624dd3 	.word	0x10624dd3
 801ad8c:	0801ee3c 	.word	0x0801ee3c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801ad90:	4b54      	ldr	r3, [pc, #336]	; (801aee4 <RadioIrqProcess+0x424>)
 801ad92:	2201      	movs	r2, #1
 801ad94:	2100      	movs	r1, #0
 801ad96:	2002      	movs	r0, #2
 801ad98:	f003 f898 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801ad9c:	4b52      	ldr	r3, [pc, #328]	; (801aee8 <RadioIrqProcess+0x428>)
 801ad9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	f000 8093 	beq.w	801aecc <RadioIrqProcess+0x40c>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 801ada6:	4a51      	ldr	r2, [pc, #324]	; (801aeec <RadioIrqProcess+0x42c>)
 801ada8:	4b4f      	ldr	r3, [pc, #316]	; (801aee8 <RadioIrqProcess+0x428>)
 801adaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801adac:	0c1b      	lsrs	r3, r3, #16
 801adae:	b2db      	uxtb	r3, r3
 801adb0:	4619      	mov	r1, r3
 801adb2:	f640 1003 	movw	r0, #2307	; 0x903
 801adb6:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 801adb8:	4a4c      	ldr	r2, [pc, #304]	; (801aeec <RadioIrqProcess+0x42c>)
 801adba:	4b4b      	ldr	r3, [pc, #300]	; (801aee8 <RadioIrqProcess+0x428>)
 801adbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801adbe:	0a1b      	lsrs	r3, r3, #8
 801adc0:	b2db      	uxtb	r3, r3
 801adc2:	4619      	mov	r1, r3
 801adc4:	f640 1004 	movw	r0, #2308	; 0x904
 801adc8:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 801adca:	4a48      	ldr	r2, [pc, #288]	; (801aeec <RadioIrqProcess+0x42c>)
 801adcc:	4b46      	ldr	r3, [pc, #280]	; (801aee8 <RadioIrqProcess+0x428>)
 801adce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801add0:	b2db      	uxtb	r3, r3
 801add2:	4619      	mov	r1, r3
 801add4:	f640 1005 	movw	r0, #2309	; 0x905
 801add8:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 801adda:	4c44      	ldr	r4, [pc, #272]	; (801aeec <RadioIrqProcess+0x42c>)
 801addc:	4b44      	ldr	r3, [pc, #272]	; (801aef0 <RadioIrqProcess+0x430>)
 801adde:	f640 1002 	movw	r0, #2306	; 0x902
 801ade2:	4798      	blx	r3
 801ade4:	4603      	mov	r3, r0
 801ade6:	f043 0301 	orr.w	r3, r3, #1
 801adea:	b2db      	uxtb	r3, r3
 801adec:	4619      	mov	r1, r3
 801adee:	f640 1002 	movw	r0, #2306	; 0x902
 801adf2:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 801adf4:	4b3c      	ldr	r3, [pc, #240]	; (801aee8 <RadioIrqProcess+0x428>)
 801adf6:	2200      	movs	r2, #0
 801adf8:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801adfa:	2300      	movs	r3, #0
 801adfc:	2200      	movs	r2, #0
 801adfe:	f240 2162 	movw	r1, #610	; 0x262
 801ae02:	f240 2062 	movw	r0, #610	; 0x262
 801ae06:	f001 f89b 	bl	801bf40 <SUBGRF_SetDioIrqParams>
        break;
 801ae0a:	e05f      	b.n	801aecc <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801ae0c:	4b39      	ldr	r3, [pc, #228]	; (801aef4 <RadioIrqProcess+0x434>)
 801ae0e:	2201      	movs	r2, #1
 801ae10:	2100      	movs	r1, #0
 801ae12:	2002      	movs	r0, #2
 801ae14:	f003 f85a 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801ae18:	f001 ff1f 	bl	801cc5a <RFW_Is_Init>
 801ae1c:	4603      	mov	r3, r0
 801ae1e:	2b01      	cmp	r3, #1
 801ae20:	d156      	bne.n	801aed0 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801ae22:	f001 ff50 	bl	801ccc6 <RFW_ReceivePayload>
        break;
 801ae26:	e053      	b.n	801aed0 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801ae28:	4b33      	ldr	r3, [pc, #204]	; (801aef8 <RadioIrqProcess+0x438>)
 801ae2a:	2201      	movs	r2, #1
 801ae2c:	2100      	movs	r1, #0
 801ae2e:	2002      	movs	r0, #2
 801ae30:	f003 f84c 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
        break;
 801ae34:	e051      	b.n	801aeda <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801ae36:	4831      	ldr	r0, [pc, #196]	; (801aefc <RadioIrqProcess+0x43c>)
 801ae38:	f002 fe3e 	bl	801dab8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801ae3c:	4b2a      	ldr	r3, [pc, #168]	; (801aee8 <RadioIrqProcess+0x428>)
 801ae3e:	785b      	ldrb	r3, [r3, #1]
 801ae40:	f083 0301 	eor.w	r3, r3, #1
 801ae44:	b2db      	uxtb	r3, r3
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d002      	beq.n	801ae50 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801ae4a:	2000      	movs	r0, #0
 801ae4c:	f000 fea8 	bl	801bba0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ae50:	4b2b      	ldr	r3, [pc, #172]	; (801af00 <RadioIrqProcess+0x440>)
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	d03d      	beq.n	801aed4 <RadioIrqProcess+0x414>
 801ae58:	4b29      	ldr	r3, [pc, #164]	; (801af00 <RadioIrqProcess+0x440>)
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	68db      	ldr	r3, [r3, #12]
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d038      	beq.n	801aed4 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801ae62:	4b27      	ldr	r3, [pc, #156]	; (801af00 <RadioIrqProcess+0x440>)
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	68db      	ldr	r3, [r3, #12]
 801ae68:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801ae6a:	4b26      	ldr	r3, [pc, #152]	; (801af04 <RadioIrqProcess+0x444>)
 801ae6c:	2201      	movs	r2, #1
 801ae6e:	2100      	movs	r1, #0
 801ae70:	2002      	movs	r0, #2
 801ae72:	f003 f82b 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
        break;
 801ae76:	e02d      	b.n	801aed4 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801ae78:	4b23      	ldr	r3, [pc, #140]	; (801af08 <RadioIrqProcess+0x448>)
 801ae7a:	2201      	movs	r2, #1
 801ae7c:	2100      	movs	r1, #0
 801ae7e:	2002      	movs	r0, #2
 801ae80:	f003 f824 	bl	801decc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801ae84:	4b18      	ldr	r3, [pc, #96]	; (801aee8 <RadioIrqProcess+0x428>)
 801ae86:	785b      	ldrb	r3, [r3, #1]
 801ae88:	f083 0301 	eor.w	r3, r3, #1
 801ae8c:	b2db      	uxtb	r3, r3
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d002      	beq.n	801ae98 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801ae92:	2000      	movs	r0, #0
 801ae94:	f000 fe84 	bl	801bba0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801ae98:	4b19      	ldr	r3, [pc, #100]	; (801af00 <RadioIrqProcess+0x440>)
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d01b      	beq.n	801aed8 <RadioIrqProcess+0x418>
 801aea0:	4b17      	ldr	r3, [pc, #92]	; (801af00 <RadioIrqProcess+0x440>)
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	691b      	ldr	r3, [r3, #16]
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	d016      	beq.n	801aed8 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801aeaa:	4b15      	ldr	r3, [pc, #84]	; (801af00 <RadioIrqProcess+0x440>)
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	691b      	ldr	r3, [r3, #16]
 801aeb0:	4798      	blx	r3
        break;
 801aeb2:	e011      	b.n	801aed8 <RadioIrqProcess+0x418>
        break;
 801aeb4:	bf00      	nop
 801aeb6:	e010      	b.n	801aeda <RadioIrqProcess+0x41a>
        break;
 801aeb8:	bf00      	nop
 801aeba:	e00e      	b.n	801aeda <RadioIrqProcess+0x41a>
        break;
 801aebc:	bf00      	nop
 801aebe:	e00c      	b.n	801aeda <RadioIrqProcess+0x41a>
        break;
 801aec0:	bf00      	nop
 801aec2:	e00a      	b.n	801aeda <RadioIrqProcess+0x41a>
        break;
 801aec4:	bf00      	nop
 801aec6:	e008      	b.n	801aeda <RadioIrqProcess+0x41a>
        break;
 801aec8:	bf00      	nop
 801aeca:	e006      	b.n	801aeda <RadioIrqProcess+0x41a>
        break;
 801aecc:	bf00      	nop
 801aece:	e004      	b.n	801aeda <RadioIrqProcess+0x41a>
        break;
 801aed0:	bf00      	nop
 801aed2:	e002      	b.n	801aeda <RadioIrqProcess+0x41a>
        break;
 801aed4:	bf00      	nop
 801aed6:	e000      	b.n	801aeda <RadioIrqProcess+0x41a>
        break;
 801aed8:	bf00      	nop
    }
}
 801aeda:	bf00      	nop
 801aedc:	3708      	adds	r7, #8
 801aede:	46bd      	mov	sp, r7
 801aee0:	bdb0      	pop	{r4, r5, r7, pc}
 801aee2:	bf00      	nop
 801aee4:	0801ee50 	.word	0x0801ee50
 801aee8:	20001ef4 	.word	0x20001ef4
 801aeec:	0801a8cf 	.word	0x0801a8cf
 801aef0:	0801a8f3 	.word	0x0801a8f3
 801aef4:	0801ee5c 	.word	0x0801ee5c
 801aef8:	0801ee68 	.word	0x0801ee68
 801aefc:	20001f68 	.word	0x20001f68
 801af00:	20001ef0 	.word	0x20001ef0
 801af04:	0801ee74 	.word	0x0801ee74
 801af08:	0801ee80 	.word	0x0801ee80

0801af0c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801af0c:	b580      	push	{r7, lr}
 801af0e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801af10:	4b09      	ldr	r3, [pc, #36]	; (801af38 <RadioTxPrbs+0x2c>)
 801af12:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801af16:	2101      	movs	r1, #1
 801af18:	4618      	mov	r0, r3
 801af1a:	f001 fcb5 	bl	801c888 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801af1e:	4b07      	ldr	r3, [pc, #28]	; (801af3c <RadioTxPrbs+0x30>)
 801af20:	212d      	movs	r1, #45	; 0x2d
 801af22:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801af26:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801af28:	f000 fefd 	bl	801bd26 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801af2c:	4804      	ldr	r0, [pc, #16]	; (801af40 <RadioTxPrbs+0x34>)
 801af2e:	f000 fe53 	bl	801bbd8 <SUBGRF_SetTx>
}
 801af32:	bf00      	nop
 801af34:	bd80      	pop	{r7, pc}
 801af36:	bf00      	nop
 801af38:	20001ef4 	.word	0x20001ef4
 801af3c:	0801a8cf 	.word	0x0801a8cf
 801af40:	000fffff 	.word	0x000fffff

0801af44 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801af44:	b580      	push	{r7, lr}
 801af46:	b084      	sub	sp, #16
 801af48:	af00      	add	r7, sp, #0
 801af4a:	4603      	mov	r3, r0
 801af4c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801af4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801af52:	4618      	mov	r0, r3
 801af54:	f001 fcc0 	bl	801c8d8 <SUBGRF_SetRfTxPower>
 801af58:	4603      	mov	r3, r0
 801af5a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801af5c:	7bfb      	ldrb	r3, [r7, #15]
 801af5e:	2101      	movs	r1, #1
 801af60:	4618      	mov	r0, r3
 801af62:	f001 fc91 	bl	801c888 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801af66:	f000 fed5 	bl	801bd14 <SUBGRF_SetTxContinuousWave>
}
 801af6a:	bf00      	nop
 801af6c:	3710      	adds	r7, #16
 801af6e:	46bd      	mov	sp, r7
 801af70:	bd80      	pop	{r7, pc}

0801af72 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801af72:	b480      	push	{r7}
 801af74:	b089      	sub	sp, #36	; 0x24
 801af76:	af00      	add	r7, sp, #0
 801af78:	60f8      	str	r0, [r7, #12]
 801af7a:	60b9      	str	r1, [r7, #8]
 801af7c:	4613      	mov	r3, r2
 801af7e:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801af80:	2300      	movs	r3, #0
 801af82:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801af84:	2300      	movs	r3, #0
 801af86:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801af88:	2300      	movs	r3, #0
 801af8a:	61bb      	str	r3, [r7, #24]
 801af8c:	e011      	b.n	801afb2 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801af8e:	69bb      	ldr	r3, [r7, #24]
 801af90:	68ba      	ldr	r2, [r7, #8]
 801af92:	4413      	add	r3, r2
 801af94:	781a      	ldrb	r2, [r3, #0]
 801af96:	69bb      	ldr	r3, [r7, #24]
 801af98:	68b9      	ldr	r1, [r7, #8]
 801af9a:	440b      	add	r3, r1
 801af9c:	43d2      	mvns	r2, r2
 801af9e:	b2d2      	uxtb	r2, r2
 801afa0:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801afa2:	69bb      	ldr	r3, [r7, #24]
 801afa4:	68fa      	ldr	r2, [r7, #12]
 801afa6:	4413      	add	r3, r2
 801afa8:	2200      	movs	r2, #0
 801afaa:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801afac:	69bb      	ldr	r3, [r7, #24]
 801afae:	3301      	adds	r3, #1
 801afb0:	61bb      	str	r3, [r7, #24]
 801afb2:	79fb      	ldrb	r3, [r7, #7]
 801afb4:	69ba      	ldr	r2, [r7, #24]
 801afb6:	429a      	cmp	r2, r3
 801afb8:	dbe9      	blt.n	801af8e <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801afba:	2300      	movs	r3, #0
 801afbc:	61bb      	str	r3, [r7, #24]
 801afbe:	e049      	b.n	801b054 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801afc0:	69bb      	ldr	r3, [r7, #24]
 801afc2:	425a      	negs	r2, r3
 801afc4:	f003 0307 	and.w	r3, r3, #7
 801afc8:	f002 0207 	and.w	r2, r2, #7
 801afcc:	bf58      	it	pl
 801afce:	4253      	negpl	r3, r2
 801afd0:	b2db      	uxtb	r3, r3
 801afd2:	f1c3 0307 	rsb	r3, r3, #7
 801afd6:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801afd8:	69bb      	ldr	r3, [r7, #24]
 801afda:	2b00      	cmp	r3, #0
 801afdc:	da00      	bge.n	801afe0 <payload_integration+0x6e>
 801afde:	3307      	adds	r3, #7
 801afe0:	10db      	asrs	r3, r3, #3
 801afe2:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801afe4:	69bb      	ldr	r3, [r7, #24]
 801afe6:	3301      	adds	r3, #1
 801afe8:	425a      	negs	r2, r3
 801afea:	f003 0307 	and.w	r3, r3, #7
 801afee:	f002 0207 	and.w	r2, r2, #7
 801aff2:	bf58      	it	pl
 801aff4:	4253      	negpl	r3, r2
 801aff6:	b2db      	uxtb	r3, r3
 801aff8:	f1c3 0307 	rsb	r3, r3, #7
 801affc:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801affe:	69bb      	ldr	r3, [r7, #24]
 801b000:	3301      	adds	r3, #1
 801b002:	2b00      	cmp	r3, #0
 801b004:	da00      	bge.n	801b008 <payload_integration+0x96>
 801b006:	3307      	adds	r3, #7
 801b008:	10db      	asrs	r3, r3, #3
 801b00a:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801b00c:	7dbb      	ldrb	r3, [r7, #22]
 801b00e:	68ba      	ldr	r2, [r7, #8]
 801b010:	4413      	add	r3, r2
 801b012:	781b      	ldrb	r3, [r3, #0]
 801b014:	461a      	mov	r2, r3
 801b016:	7dfb      	ldrb	r3, [r7, #23]
 801b018:	fa42 f303 	asr.w	r3, r2, r3
 801b01c:	b2db      	uxtb	r3, r3
 801b01e:	f003 0301 	and.w	r3, r3, #1
 801b022:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801b024:	7ffa      	ldrb	r2, [r7, #31]
 801b026:	7cfb      	ldrb	r3, [r7, #19]
 801b028:	4053      	eors	r3, r2
 801b02a:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801b02c:	7d3b      	ldrb	r3, [r7, #20]
 801b02e:	68fa      	ldr	r2, [r7, #12]
 801b030:	4413      	add	r3, r2
 801b032:	781b      	ldrb	r3, [r3, #0]
 801b034:	b25a      	sxtb	r2, r3
 801b036:	7ff9      	ldrb	r1, [r7, #31]
 801b038:	7d7b      	ldrb	r3, [r7, #21]
 801b03a:	fa01 f303 	lsl.w	r3, r1, r3
 801b03e:	b25b      	sxtb	r3, r3
 801b040:	4313      	orrs	r3, r2
 801b042:	b259      	sxtb	r1, r3
 801b044:	7d3b      	ldrb	r3, [r7, #20]
 801b046:	68fa      	ldr	r2, [r7, #12]
 801b048:	4413      	add	r3, r2
 801b04a:	b2ca      	uxtb	r2, r1
 801b04c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801b04e:	69bb      	ldr	r3, [r7, #24]
 801b050:	3301      	adds	r3, #1
 801b052:	61bb      	str	r3, [r7, #24]
 801b054:	79fb      	ldrb	r3, [r7, #7]
 801b056:	00db      	lsls	r3, r3, #3
 801b058:	69ba      	ldr	r2, [r7, #24]
 801b05a:	429a      	cmp	r2, r3
 801b05c:	dbb0      	blt.n	801afc0 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801b05e:	7ffb      	ldrb	r3, [r7, #31]
 801b060:	01db      	lsls	r3, r3, #7
 801b062:	b25a      	sxtb	r2, r3
 801b064:	7ffb      	ldrb	r3, [r7, #31]
 801b066:	019b      	lsls	r3, r3, #6
 801b068:	b25b      	sxtb	r3, r3
 801b06a:	4313      	orrs	r3, r2
 801b06c:	b25b      	sxtb	r3, r3
 801b06e:	7ffa      	ldrb	r2, [r7, #31]
 801b070:	2a00      	cmp	r2, #0
 801b072:	d101      	bne.n	801b078 <payload_integration+0x106>
 801b074:	2220      	movs	r2, #32
 801b076:	e000      	b.n	801b07a <payload_integration+0x108>
 801b078:	2200      	movs	r2, #0
 801b07a:	4313      	orrs	r3, r2
 801b07c:	b259      	sxtb	r1, r3
 801b07e:	79fb      	ldrb	r3, [r7, #7]
 801b080:	68fa      	ldr	r2, [r7, #12]
 801b082:	4413      	add	r3, r2
 801b084:	b2ca      	uxtb	r2, r1
 801b086:	701a      	strb	r2, [r3, #0]
}
 801b088:	bf00      	nop
 801b08a:	3724      	adds	r7, #36	; 0x24
 801b08c:	46bd      	mov	sp, r7
 801b08e:	bc80      	pop	{r7}
 801b090:	4770      	bx	lr
	...

0801b094 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 801b094:	b580      	push	{r7, lr}
 801b096:	b08c      	sub	sp, #48	; 0x30
 801b098:	af00      	add	r7, sp, #0
 801b09a:	60b9      	str	r1, [r7, #8]
 801b09c:	607a      	str	r2, [r7, #4]
 801b09e:	603b      	str	r3, [r7, #0]
 801b0a0:	4603      	mov	r3, r0
 801b0a2:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801b0a4:	2300      	movs	r3, #0
 801b0a6:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801b0a8:	2300      	movs	r3, #0
 801b0aa:	623b      	str	r3, [r7, #32]
 801b0ac:	2300      	movs	r3, #0
 801b0ae:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b0b0:	f001 fdcd 	bl	801cc4e <RFW_DeInit>

    if( rxContinuous != 0 )
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d001      	beq.n	801b0be <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801b0ba:	2300      	movs	r3, #0
 801b0bc:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	bf14      	ite	ne
 801b0c4:	2301      	movne	r3, #1
 801b0c6:	2300      	moveq	r3, #0
 801b0c8:	b2da      	uxtb	r2, r3
 801b0ca:	4ba3      	ldr	r3, [pc, #652]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b0cc:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801b0ce:	7bfb      	ldrb	r3, [r7, #15]
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d003      	beq.n	801b0dc <RadioSetRxGenericConfig+0x48>
 801b0d4:	2b01      	cmp	r3, #1
 801b0d6:	f000 80dc 	beq.w	801b292 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801b0da:	e194      	b.n	801b406 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801b0dc:	68bb      	ldr	r3, [r7, #8]
 801b0de:	689b      	ldr	r3, [r3, #8]
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d003      	beq.n	801b0ec <RadioSetRxGenericConfig+0x58>
 801b0e4:	68bb      	ldr	r3, [r7, #8]
 801b0e6:	68db      	ldr	r3, [r3, #12]
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d102      	bne.n	801b0f2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801b0ec:	f04f 33ff 	mov.w	r3, #4294967295
 801b0f0:	e18a      	b.n	801b408 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801b0f2:	68bb      	ldr	r3, [r7, #8]
 801b0f4:	7f9b      	ldrb	r3, [r3, #30]
 801b0f6:	2b08      	cmp	r3, #8
 801b0f8:	d902      	bls.n	801b100 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801b0fa:	f04f 33ff 	mov.w	r3, #4294967295
 801b0fe:	e183      	b.n	801b408 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801b100:	68bb      	ldr	r3, [r7, #8]
 801b102:	6919      	ldr	r1, [r3, #16]
 801b104:	68bb      	ldr	r3, [r7, #8]
 801b106:	7f9b      	ldrb	r3, [r3, #30]
 801b108:	b29a      	uxth	r2, r3
 801b10a:	f107 0320 	add.w	r3, r7, #32
 801b10e:	4618      	mov	r0, r3
 801b110:	f001 fe90 	bl	801ce34 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b114:	68bb      	ldr	r3, [r7, #8]
 801b116:	681b      	ldr	r3, [r3, #0]
 801b118:	2b00      	cmp	r3, #0
 801b11a:	bf14      	ite	ne
 801b11c:	2301      	movne	r3, #1
 801b11e:	2300      	moveq	r3, #0
 801b120:	b2db      	uxtb	r3, r3
 801b122:	4618      	mov	r0, r3
 801b124:	f000 fe08 	bl	801bd38 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b128:	4b8b      	ldr	r3, [pc, #556]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b12a:	2200      	movs	r2, #0
 801b12c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b130:	68bb      	ldr	r3, [r7, #8]
 801b132:	689b      	ldr	r3, [r3, #8]
 801b134:	4a88      	ldr	r2, [pc, #544]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b136:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801b138:	68bb      	ldr	r3, [r7, #8]
 801b13a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b13e:	4b86      	ldr	r3, [pc, #536]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801b144:	68bb      	ldr	r3, [r7, #8]
 801b146:	685b      	ldr	r3, [r3, #4]
 801b148:	4618      	mov	r0, r3
 801b14a:	f001 fcb3 	bl	801cab4 <SUBGRF_GetFskBandwidthRegValue>
 801b14e:	4603      	mov	r3, r0
 801b150:	461a      	mov	r2, r3
 801b152:	4b81      	ldr	r3, [pc, #516]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b158:	4b7f      	ldr	r3, [pc, #508]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b15a:	2200      	movs	r2, #0
 801b15c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801b15e:	68bb      	ldr	r3, [r7, #8]
 801b160:	68db      	ldr	r3, [r3, #12]
 801b162:	b29b      	uxth	r3, r3
 801b164:	00db      	lsls	r3, r3, #3
 801b166:	b29a      	uxth	r2, r3
 801b168:	4b7b      	ldr	r3, [pc, #492]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b16a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801b16c:	68bb      	ldr	r3, [r7, #8]
 801b16e:	7fda      	ldrb	r2, [r3, #31]
 801b170:	4b79      	ldr	r3, [pc, #484]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b172:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b174:	68bb      	ldr	r3, [r7, #8]
 801b176:	7f9b      	ldrb	r3, [r3, #30]
 801b178:	00db      	lsls	r3, r3, #3
 801b17a:	b2da      	uxtb	r2, r3
 801b17c:	4b76      	ldr	r3, [pc, #472]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b17e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801b180:	68bb      	ldr	r3, [r7, #8]
 801b182:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b186:	4b74      	ldr	r3, [pc, #464]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b188:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801b18a:	68bb      	ldr	r3, [r7, #8]
 801b18c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b190:	2b00      	cmp	r3, #0
 801b192:	d105      	bne.n	801b1a0 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801b194:	68bb      	ldr	r3, [r7, #8]
 801b196:	695b      	ldr	r3, [r3, #20]
 801b198:	b2da      	uxtb	r2, r3
 801b19a:	4b6f      	ldr	r3, [pc, #444]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b19c:	759a      	strb	r2, [r3, #22]
 801b19e:	e00b      	b.n	801b1b8 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801b1a0:	68bb      	ldr	r3, [r7, #8]
 801b1a2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b1a6:	2b02      	cmp	r3, #2
 801b1a8:	d103      	bne.n	801b1b2 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b1aa:	4b6b      	ldr	r3, [pc, #428]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b1ac:	22ff      	movs	r2, #255	; 0xff
 801b1ae:	759a      	strb	r2, [r3, #22]
 801b1b0:	e002      	b.n	801b1b8 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b1b2:	4b69      	ldr	r3, [pc, #420]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b1b4:	22ff      	movs	r2, #255	; 0xff
 801b1b6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b1b8:	68bb      	ldr	r3, [r7, #8]
 801b1ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b1be:	2b02      	cmp	r3, #2
 801b1c0:	d004      	beq.n	801b1cc <RadioSetRxGenericConfig+0x138>
 801b1c2:	68bb      	ldr	r3, [r7, #8]
 801b1c4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b1c8:	2b02      	cmp	r3, #2
 801b1ca:	d12d      	bne.n	801b228 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b1cc:	68bb      	ldr	r3, [r7, #8]
 801b1ce:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b1d2:	2bf1      	cmp	r3, #241	; 0xf1
 801b1d4:	d00c      	beq.n	801b1f0 <RadioSetRxGenericConfig+0x15c>
 801b1d6:	68bb      	ldr	r3, [r7, #8]
 801b1d8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b1dc:	2bf2      	cmp	r3, #242	; 0xf2
 801b1de:	d007      	beq.n	801b1f0 <RadioSetRxGenericConfig+0x15c>
 801b1e0:	68bb      	ldr	r3, [r7, #8]
 801b1e2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b1e6:	2b01      	cmp	r3, #1
 801b1e8:	d002      	beq.n	801b1f0 <RadioSetRxGenericConfig+0x15c>
            return -1;
 801b1ea:	f04f 33ff 	mov.w	r3, #4294967295
 801b1ee:	e10b      	b.n	801b408 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 801b1f0:	2300      	movs	r3, #0
 801b1f2:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 801b1f4:	68bb      	ldr	r3, [r7, #8]
 801b1f6:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801b1f8:	4b58      	ldr	r3, [pc, #352]	; (801b35c <RadioSetRxGenericConfig+0x2c8>)
 801b1fa:	6819      	ldr	r1, [r3, #0]
 801b1fc:	f107 0314 	add.w	r3, r7, #20
 801b200:	4a57      	ldr	r2, [pc, #348]	; (801b360 <RadioSetRxGenericConfig+0x2cc>)
 801b202:	4618      	mov	r0, r3
 801b204:	f001 fd16 	bl	801cc34 <RFW_Init>
 801b208:	4603      	mov	r3, r0
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d002      	beq.n	801b214 <RadioSetRxGenericConfig+0x180>
            return -1;
 801b20e:	f04f 33ff 	mov.w	r3, #4294967295
 801b212:	e0f9      	b.n	801b408 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b214:	4b50      	ldr	r3, [pc, #320]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b216:	2200      	movs	r2, #0
 801b218:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b21a:	4b4f      	ldr	r3, [pc, #316]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b21c:	2201      	movs	r2, #1
 801b21e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b220:	4b4d      	ldr	r3, [pc, #308]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b222:	2200      	movs	r2, #0
 801b224:	755a      	strb	r2, [r3, #21]
        {
 801b226:	e00e      	b.n	801b246 <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b228:	68bb      	ldr	r3, [r7, #8]
 801b22a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801b22e:	4b4a      	ldr	r3, [pc, #296]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b230:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b232:	68bb      	ldr	r3, [r7, #8]
 801b234:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801b238:	4b47      	ldr	r3, [pc, #284]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b23a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801b23c:	68bb      	ldr	r3, [r7, #8]
 801b23e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801b242:	4b45      	ldr	r3, [pc, #276]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b244:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801b246:	f7ff fa46 	bl	801a6d6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b24a:	2000      	movs	r0, #0
 801b24c:	f7fe fbf0 	bl	8019a30 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b250:	4844      	ldr	r0, [pc, #272]	; (801b364 <RadioSetRxGenericConfig+0x2d0>)
 801b252:	f001 f80b 	bl	801c26c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b256:	4844      	ldr	r0, [pc, #272]	; (801b368 <RadioSetRxGenericConfig+0x2d4>)
 801b258:	f001 f8da 	bl	801c410 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b25c:	f107 0320 	add.w	r3, r7, #32
 801b260:	4618      	mov	r0, r3
 801b262:	f000 fba2 	bl	801b9aa <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b266:	68bb      	ldr	r3, [r7, #8]
 801b268:	8b9b      	ldrh	r3, [r3, #28]
 801b26a:	4618      	mov	r0, r3
 801b26c:	f000 fbec 	bl	801ba48 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801b270:	68bb      	ldr	r3, [r7, #8]
 801b272:	8b1b      	ldrh	r3, [r3, #24]
 801b274:	4618      	mov	r0, r3
 801b276:	f000 fbc7 	bl	801ba08 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801b27a:	683b      	ldr	r3, [r7, #0]
 801b27c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801b280:	fb03 f202 	mul.w	r2, r3, r2
 801b284:	68bb      	ldr	r3, [r7, #8]
 801b286:	689b      	ldr	r3, [r3, #8]
 801b288:	fbb2 f3f3 	udiv	r3, r2, r3
 801b28c:	4a32      	ldr	r2, [pc, #200]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b28e:	6093      	str	r3, [r2, #8]
        break;
 801b290:	e0b9      	b.n	801b406 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801b292:	68bb      	ldr	r3, [r7, #8]
 801b294:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801b296:	2b00      	cmp	r3, #0
 801b298:	d102      	bne.n	801b2a0 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801b29a:	f04f 33ff 	mov.w	r3, #4294967295
 801b29e:	e0b3      	b.n	801b408 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801b2a0:	68bb      	ldr	r3, [r7, #8]
 801b2a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801b2a6:	2b01      	cmp	r3, #1
 801b2a8:	d104      	bne.n	801b2b4 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801b2aa:	68bb      	ldr	r3, [r7, #8]
 801b2ac:	695b      	ldr	r3, [r3, #20]
 801b2ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b2b2:	e002      	b.n	801b2ba <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801b2b4:	23ff      	movs	r3, #255	; 0xff
 801b2b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b2ba:	68bb      	ldr	r3, [r7, #8]
 801b2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	bf14      	ite	ne
 801b2c2:	2301      	movne	r3, #1
 801b2c4:	2300      	moveq	r3, #0
 801b2c6:	b2db      	uxtb	r3, r3
 801b2c8:	4618      	mov	r0, r3
 801b2ca:	f000 fd35 	bl	801bd38 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801b2ce:	683b      	ldr	r3, [r7, #0]
 801b2d0:	b2db      	uxtb	r3, r3
 801b2d2:	4618      	mov	r0, r3
 801b2d4:	f000 fd3f 	bl	801bd56 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b2d8:	4b1f      	ldr	r3, [pc, #124]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b2da:	2201      	movs	r2, #1
 801b2dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b2e0:	68bb      	ldr	r3, [r7, #8]
 801b2e2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801b2e6:	4b1c      	ldr	r3, [pc, #112]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b2e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b2ec:	68bb      	ldr	r3, [r7, #8]
 801b2ee:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801b2f2:	4b19      	ldr	r3, [pc, #100]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b2f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b2f8:	68bb      	ldr	r3, [r7, #8]
 801b2fa:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801b2fe:	4b16      	ldr	r3, [pc, #88]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b300:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801b304:	68bb      	ldr	r3, [r7, #8]
 801b306:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b30a:	2b02      	cmp	r3, #2
 801b30c:	d010      	beq.n	801b330 <RadioSetRxGenericConfig+0x29c>
 801b30e:	2b02      	cmp	r3, #2
 801b310:	dc2c      	bgt.n	801b36c <RadioSetRxGenericConfig+0x2d8>
 801b312:	2b00      	cmp	r3, #0
 801b314:	d002      	beq.n	801b31c <RadioSetRxGenericConfig+0x288>
 801b316:	2b01      	cmp	r3, #1
 801b318:	d005      	beq.n	801b326 <RadioSetRxGenericConfig+0x292>
            break;
 801b31a:	e027      	b.n	801b36c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b31c:	4b0e      	ldr	r3, [pc, #56]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b31e:	2200      	movs	r2, #0
 801b320:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b324:	e023      	b.n	801b36e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b326:	4b0c      	ldr	r3, [pc, #48]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b328:	2201      	movs	r2, #1
 801b32a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b32e:	e01e      	b.n	801b36e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b330:	68bb      	ldr	r3, [r7, #8]
 801b332:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b336:	2b0b      	cmp	r3, #11
 801b338:	d004      	beq.n	801b344 <RadioSetRxGenericConfig+0x2b0>
 801b33a:	68bb      	ldr	r3, [r7, #8]
 801b33c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b340:	2b0c      	cmp	r3, #12
 801b342:	d104      	bne.n	801b34e <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b344:	4b04      	ldr	r3, [pc, #16]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b346:	2201      	movs	r2, #1
 801b348:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b34c:	e00f      	b.n	801b36e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b34e:	4b02      	ldr	r3, [pc, #8]	; (801b358 <RadioSetRxGenericConfig+0x2c4>)
 801b350:	2200      	movs	r2, #0
 801b352:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b356:	e00a      	b.n	801b36e <RadioSetRxGenericConfig+0x2da>
 801b358:	20001ef4 	.word	0x20001ef4
 801b35c:	20001ef0 	.word	0x20001ef0
 801b360:	20001f68 	.word	0x20001f68
 801b364:	20001f2c 	.word	0x20001f2c
 801b368:	20001f02 	.word	0x20001f02
            break;
 801b36c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b36e:	4b28      	ldr	r3, [pc, #160]	; (801b410 <RadioSetRxGenericConfig+0x37c>)
 801b370:	2201      	movs	r2, #1
 801b372:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b374:	68bb      	ldr	r3, [r7, #8]
 801b376:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801b378:	4b25      	ldr	r3, [pc, #148]	; (801b410 <RadioSetRxGenericConfig+0x37c>)
 801b37a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b37c:	68bb      	ldr	r3, [r7, #8]
 801b37e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801b382:	4b23      	ldr	r3, [pc, #140]	; (801b410 <RadioSetRxGenericConfig+0x37c>)
 801b384:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801b386:	4a22      	ldr	r2, [pc, #136]	; (801b410 <RadioSetRxGenericConfig+0x37c>)
 801b388:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b38c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b38e:	68bb      	ldr	r3, [r7, #8]
 801b390:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801b394:	4b1e      	ldr	r3, [pc, #120]	; (801b410 <RadioSetRxGenericConfig+0x37c>)
 801b396:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b39a:	68bb      	ldr	r3, [r7, #8]
 801b39c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801b3a0:	4b1b      	ldr	r3, [pc, #108]	; (801b410 <RadioSetRxGenericConfig+0x37c>)
 801b3a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801b3a6:	f7ff f996 	bl	801a6d6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801b3aa:	2001      	movs	r0, #1
 801b3ac:	f7fe fb40 	bl	8019a30 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b3b0:	4818      	ldr	r0, [pc, #96]	; (801b414 <RadioSetRxGenericConfig+0x380>)
 801b3b2:	f000 ff5b 	bl	801c26c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b3b6:	4818      	ldr	r0, [pc, #96]	; (801b418 <RadioSetRxGenericConfig+0x384>)
 801b3b8:	f001 f82a 	bl	801c410 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801b3bc:	4b14      	ldr	r3, [pc, #80]	; (801b410 <RadioSetRxGenericConfig+0x37c>)
 801b3be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801b3c2:	2b01      	cmp	r3, #1
 801b3c4:	d10d      	bne.n	801b3e2 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801b3c6:	f240 7036 	movw	r0, #1846	; 0x736
 801b3ca:	f001 f97d 	bl	801c6c8 <SUBGRF_ReadRegister>
 801b3ce:	4603      	mov	r3, r0
 801b3d0:	f023 0304 	bic.w	r3, r3, #4
 801b3d4:	b2db      	uxtb	r3, r3
 801b3d6:	4619      	mov	r1, r3
 801b3d8:	f240 7036 	movw	r0, #1846	; 0x736
 801b3dc:	f001 f960 	bl	801c6a0 <SUBGRF_WriteRegister>
 801b3e0:	e00c      	b.n	801b3fc <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801b3e2:	f240 7036 	movw	r0, #1846	; 0x736
 801b3e6:	f001 f96f 	bl	801c6c8 <SUBGRF_ReadRegister>
 801b3ea:	4603      	mov	r3, r0
 801b3ec:	f043 0304 	orr.w	r3, r3, #4
 801b3f0:	b2db      	uxtb	r3, r3
 801b3f2:	4619      	mov	r1, r3
 801b3f4:	f240 7036 	movw	r0, #1846	; 0x736
 801b3f8:	f001 f952 	bl	801c6a0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801b3fc:	4b04      	ldr	r3, [pc, #16]	; (801b410 <RadioSetRxGenericConfig+0x37c>)
 801b3fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b402:	609a      	str	r2, [r3, #8]
        break;
 801b404:	bf00      	nop
    }
    return status;
 801b406:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801b408:	4618      	mov	r0, r3
 801b40a:	3730      	adds	r7, #48	; 0x30
 801b40c:	46bd      	mov	sp, r7
 801b40e:	bd80      	pop	{r7, pc}
 801b410:	20001ef4 	.word	0x20001ef4
 801b414:	20001f2c 	.word	0x20001f2c
 801b418:	20001f02 	.word	0x20001f02

0801b41c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801b41c:	b580      	push	{r7, lr}
 801b41e:	b08e      	sub	sp, #56	; 0x38
 801b420:	af00      	add	r7, sp, #0
 801b422:	60b9      	str	r1, [r7, #8]
 801b424:	607b      	str	r3, [r7, #4]
 801b426:	4603      	mov	r3, r0
 801b428:	73fb      	strb	r3, [r7, #15]
 801b42a:	4613      	mov	r3, r2
 801b42c:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801b42e:	2300      	movs	r3, #0
 801b430:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b432:	2300      	movs	r3, #0
 801b434:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b436:	f001 fc0a 	bl	801cc4e <RFW_DeInit>
    switch( modem )
 801b43a:	7bfb      	ldrb	r3, [r7, #15]
 801b43c:	2b03      	cmp	r3, #3
 801b43e:	f200 8204 	bhi.w	801b84a <RadioSetTxGenericConfig+0x42e>
 801b442:	a201      	add	r2, pc, #4	; (adr r2, 801b448 <RadioSetTxGenericConfig+0x2c>)
 801b444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b448:	0801b5cd 	.word	0x0801b5cd
 801b44c:	0801b715 	.word	0x0801b715
 801b450:	0801b80d 	.word	0x0801b80d
 801b454:	0801b459 	.word	0x0801b459
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801b458:	68bb      	ldr	r3, [r7, #8]
 801b45a:	7c9b      	ldrb	r3, [r3, #18]
 801b45c:	2b08      	cmp	r3, #8
 801b45e:	d902      	bls.n	801b466 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801b460:	f04f 33ff 	mov.w	r3, #4294967295
 801b464:	e206      	b.n	801b874 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 801b466:	68bb      	ldr	r3, [r7, #8]
 801b468:	6899      	ldr	r1, [r3, #8]
 801b46a:	68bb      	ldr	r3, [r7, #8]
 801b46c:	7c9b      	ldrb	r3, [r3, #18]
 801b46e:	b29a      	uxth	r2, r3
 801b470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b474:	4618      	mov	r0, r3
 801b476:	f001 fcdd 	bl	801ce34 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801b47a:	68bb      	ldr	r3, [r7, #8]
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	2b00      	cmp	r3, #0
 801b480:	d102      	bne.n	801b488 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801b482:	f04f 33ff 	mov.w	r3, #4294967295
 801b486:	e1f5      	b.n	801b874 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 801b488:	68bb      	ldr	r3, [r7, #8]
 801b48a:	681b      	ldr	r3, [r3, #0]
 801b48c:	f242 7210 	movw	r2, #10000	; 0x2710
 801b490:	4293      	cmp	r3, r2
 801b492:	d813      	bhi.n	801b4bc <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 801b494:	2302      	movs	r3, #2
 801b496:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801b49a:	4b99      	ldr	r3, [pc, #612]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b49c:	2203      	movs	r2, #3
 801b49e:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801b4a0:	4b97      	ldr	r3, [pc, #604]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b4a2:	2203      	movs	r2, #3
 801b4a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801b4a8:	68bb      	ldr	r3, [r7, #8]
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	4a94      	ldr	r2, [pc, #592]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b4ae:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801b4b0:	68bb      	ldr	r3, [r7, #8]
 801b4b2:	7cda      	ldrb	r2, [r3, #19]
 801b4b4:	4b92      	ldr	r3, [pc, #584]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b4b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801b4ba:	e017      	b.n	801b4ec <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 801b4bc:	2300      	movs	r3, #0
 801b4be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b4c2:	4b8f      	ldr	r3, [pc, #572]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b4c4:	2200      	movs	r2, #0
 801b4c6:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b4c8:	4b8d      	ldr	r3, [pc, #564]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b4ca:	2200      	movs	r2, #0
 801b4cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801b4d0:	68bb      	ldr	r3, [r7, #8]
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	4a8a      	ldr	r2, [pc, #552]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b4d6:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801b4d8:	68bb      	ldr	r3, [r7, #8]
 801b4da:	7cda      	ldrb	r2, [r3, #19]
 801b4dc:	4b88      	ldr	r3, [pc, #544]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b4de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 801b4e2:	68bb      	ldr	r3, [r7, #8]
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	089b      	lsrs	r3, r3, #2
 801b4e8:	4a85      	ldr	r2, [pc, #532]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b4ea:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801b4ec:	68bb      	ldr	r3, [r7, #8]
 801b4ee:	685b      	ldr	r3, [r3, #4]
 801b4f0:	b29b      	uxth	r3, r3
 801b4f2:	00db      	lsls	r3, r3, #3
 801b4f4:	b29a      	uxth	r2, r3
 801b4f6:	4b82      	ldr	r3, [pc, #520]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b4f8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801b4fa:	4b81      	ldr	r3, [pc, #516]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b4fc:	2204      	movs	r2, #4
 801b4fe:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801b500:	68bb      	ldr	r3, [r7, #8]
 801b502:	7c9b      	ldrb	r3, [r3, #18]
 801b504:	00db      	lsls	r3, r3, #3
 801b506:	b2da      	uxtb	r2, r3
 801b508:	4b7d      	ldr	r3, [pc, #500]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b50a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801b50c:	4b7c      	ldr	r3, [pc, #496]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b50e:	2200      	movs	r2, #0
 801b510:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b512:	68bb      	ldr	r3, [r7, #8]
 801b514:	7d9b      	ldrb	r3, [r3, #22]
 801b516:	2b02      	cmp	r3, #2
 801b518:	d003      	beq.n	801b522 <RadioSetTxGenericConfig+0x106>
 801b51a:	68bb      	ldr	r3, [r7, #8]
 801b51c:	7d1b      	ldrb	r3, [r3, #20]
 801b51e:	2b02      	cmp	r3, #2
 801b520:	d12b      	bne.n	801b57a <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b522:	68bb      	ldr	r3, [r7, #8]
 801b524:	7d5b      	ldrb	r3, [r3, #21]
 801b526:	2bf1      	cmp	r3, #241	; 0xf1
 801b528:	d00a      	beq.n	801b540 <RadioSetTxGenericConfig+0x124>
 801b52a:	68bb      	ldr	r3, [r7, #8]
 801b52c:	7d5b      	ldrb	r3, [r3, #21]
 801b52e:	2bf2      	cmp	r3, #242	; 0xf2
 801b530:	d006      	beq.n	801b540 <RadioSetTxGenericConfig+0x124>
 801b532:	68bb      	ldr	r3, [r7, #8]
 801b534:	7d5b      	ldrb	r3, [r3, #21]
 801b536:	2b01      	cmp	r3, #1
 801b538:	d002      	beq.n	801b540 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801b53a:	f04f 33ff 	mov.w	r3, #4294967295
 801b53e:	e199      	b.n	801b874 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 801b540:	68bb      	ldr	r3, [r7, #8]
 801b542:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801b544:	2301      	movs	r3, #1
 801b546:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801b54a:	4b6e      	ldr	r3, [pc, #440]	; (801b704 <RadioSetTxGenericConfig+0x2e8>)
 801b54c:	6819      	ldr	r1, [r3, #0]
 801b54e:	f107 0320 	add.w	r3, r7, #32
 801b552:	4a6d      	ldr	r2, [pc, #436]	; (801b708 <RadioSetTxGenericConfig+0x2ec>)
 801b554:	4618      	mov	r0, r3
 801b556:	f001 fb6d 	bl	801cc34 <RFW_Init>
 801b55a:	4603      	mov	r3, r0
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d002      	beq.n	801b566 <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 801b560:	f04f 33ff 	mov.w	r3, #4294967295
 801b564:	e186      	b.n	801b874 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b566:	4b66      	ldr	r3, [pc, #408]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b568:	2200      	movs	r2, #0
 801b56a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801b56c:	4b64      	ldr	r3, [pc, #400]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b56e:	2201      	movs	r2, #1
 801b570:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b572:	4b63      	ldr	r3, [pc, #396]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b574:	2200      	movs	r2, #0
 801b576:	755a      	strb	r2, [r3, #21]
        {
 801b578:	e00b      	b.n	801b592 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801b57a:	68bb      	ldr	r3, [r7, #8]
 801b57c:	7d5a      	ldrb	r2, [r3, #21]
 801b57e:	4b60      	ldr	r3, [pc, #384]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b580:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801b582:	68bb      	ldr	r3, [r7, #8]
 801b584:	7d9a      	ldrb	r2, [r3, #22]
 801b586:	4b5e      	ldr	r3, [pc, #376]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b588:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801b58a:	68bb      	ldr	r3, [r7, #8]
 801b58c:	7d1a      	ldrb	r2, [r3, #20]
 801b58e:	4b5c      	ldr	r3, [pc, #368]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b590:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801b592:	f7ff f8a0 	bl	801a6d6 <RadioStandby>
        RadioSetModem( radio_modem );
 801b596:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b59a:	4618      	mov	r0, r3
 801b59c:	f7fe fa48 	bl	8019a30 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b5a0:	485a      	ldr	r0, [pc, #360]	; (801b70c <RadioSetTxGenericConfig+0x2f0>)
 801b5a2:	f000 fe63 	bl	801c26c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b5a6:	485a      	ldr	r0, [pc, #360]	; (801b710 <RadioSetTxGenericConfig+0x2f4>)
 801b5a8:	f000 ff32 	bl	801c410 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b5ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b5b0:	4618      	mov	r0, r3
 801b5b2:	f000 f9fa 	bl	801b9aa <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801b5b6:	68bb      	ldr	r3, [r7, #8]
 801b5b8:	8a1b      	ldrh	r3, [r3, #16]
 801b5ba:	4618      	mov	r0, r3
 801b5bc:	f000 fa44 	bl	801ba48 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 801b5c0:	68bb      	ldr	r3, [r7, #8]
 801b5c2:	899b      	ldrh	r3, [r3, #12]
 801b5c4:	4618      	mov	r0, r3
 801b5c6:	f000 fa1f 	bl	801ba08 <SUBGRF_SetCrcPolynomial>
        break;
 801b5ca:	e13f      	b.n	801b84c <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801b5cc:	68bb      	ldr	r3, [r7, #8]
 801b5ce:	681b      	ldr	r3, [r3, #0]
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d102      	bne.n	801b5da <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801b5d4:	f04f 33ff 	mov.w	r3, #4294967295
 801b5d8:	e14c      	b.n	801b874 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801b5da:	68bb      	ldr	r3, [r7, #8]
 801b5dc:	7c9b      	ldrb	r3, [r3, #18]
 801b5de:	2b08      	cmp	r3, #8
 801b5e0:	d902      	bls.n	801b5e8 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801b5e2:	f04f 33ff 	mov.w	r3, #4294967295
 801b5e6:	e145      	b.n	801b874 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 801b5e8:	68bb      	ldr	r3, [r7, #8]
 801b5ea:	6899      	ldr	r1, [r3, #8]
 801b5ec:	68bb      	ldr	r3, [r7, #8]
 801b5ee:	7c9b      	ldrb	r3, [r3, #18]
 801b5f0:	b29a      	uxth	r2, r3
 801b5f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	f001 fc1c 	bl	801ce34 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b5fc:	4b40      	ldr	r3, [pc, #256]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b5fe:	2200      	movs	r2, #0
 801b600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b604:	68bb      	ldr	r3, [r7, #8]
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	4a3d      	ldr	r2, [pc, #244]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b60a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801b60c:	68bb      	ldr	r3, [r7, #8]
 801b60e:	7cda      	ldrb	r2, [r3, #19]
 801b610:	4b3b      	ldr	r3, [pc, #236]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801b616:	68bb      	ldr	r3, [r7, #8]
 801b618:	699b      	ldr	r3, [r3, #24]
 801b61a:	4a39      	ldr	r2, [pc, #228]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b61c:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b61e:	4b38      	ldr	r3, [pc, #224]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b620:	2200      	movs	r2, #0
 801b622:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801b624:	68bb      	ldr	r3, [r7, #8]
 801b626:	685b      	ldr	r3, [r3, #4]
 801b628:	b29b      	uxth	r3, r3
 801b62a:	00db      	lsls	r3, r3, #3
 801b62c:	b29a      	uxth	r2, r3
 801b62e:	4b34      	ldr	r3, [pc, #208]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b630:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801b632:	4b33      	ldr	r3, [pc, #204]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b634:	2204      	movs	r2, #4
 801b636:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b638:	68bb      	ldr	r3, [r7, #8]
 801b63a:	7c9b      	ldrb	r3, [r3, #18]
 801b63c:	00db      	lsls	r3, r3, #3
 801b63e:	b2da      	uxtb	r2, r3
 801b640:	4b2f      	ldr	r3, [pc, #188]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b642:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801b644:	4b2e      	ldr	r3, [pc, #184]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b646:	2200      	movs	r2, #0
 801b648:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b64a:	68bb      	ldr	r3, [r7, #8]
 801b64c:	7d9b      	ldrb	r3, [r3, #22]
 801b64e:	2b02      	cmp	r3, #2
 801b650:	d003      	beq.n	801b65a <RadioSetTxGenericConfig+0x23e>
 801b652:	68bb      	ldr	r3, [r7, #8]
 801b654:	7d1b      	ldrb	r3, [r3, #20]
 801b656:	2b02      	cmp	r3, #2
 801b658:	d12a      	bne.n	801b6b0 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b65a:	68bb      	ldr	r3, [r7, #8]
 801b65c:	7d5b      	ldrb	r3, [r3, #21]
 801b65e:	2bf1      	cmp	r3, #241	; 0xf1
 801b660:	d00a      	beq.n	801b678 <RadioSetTxGenericConfig+0x25c>
 801b662:	68bb      	ldr	r3, [r7, #8]
 801b664:	7d5b      	ldrb	r3, [r3, #21]
 801b666:	2bf2      	cmp	r3, #242	; 0xf2
 801b668:	d006      	beq.n	801b678 <RadioSetTxGenericConfig+0x25c>
 801b66a:	68bb      	ldr	r3, [r7, #8]
 801b66c:	7d5b      	ldrb	r3, [r3, #21]
 801b66e:	2b01      	cmp	r3, #1
 801b670:	d002      	beq.n	801b678 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801b672:	f04f 33ff 	mov.w	r3, #4294967295
 801b676:	e0fd      	b.n	801b874 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801b678:	2301      	movs	r3, #1
 801b67a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801b67c:	68bb      	ldr	r3, [r7, #8]
 801b67e:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801b680:	4b20      	ldr	r3, [pc, #128]	; (801b704 <RadioSetTxGenericConfig+0x2e8>)
 801b682:	6819      	ldr	r1, [r3, #0]
 801b684:	f107 0314 	add.w	r3, r7, #20
 801b688:	4a1f      	ldr	r2, [pc, #124]	; (801b708 <RadioSetTxGenericConfig+0x2ec>)
 801b68a:	4618      	mov	r0, r3
 801b68c:	f001 fad2 	bl	801cc34 <RFW_Init>
 801b690:	4603      	mov	r3, r0
 801b692:	2b00      	cmp	r3, #0
 801b694:	d002      	beq.n	801b69c <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 801b696:	f04f 33ff 	mov.w	r3, #4294967295
 801b69a:	e0eb      	b.n	801b874 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b69c:	4b18      	ldr	r3, [pc, #96]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b69e:	2200      	movs	r2, #0
 801b6a0:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801b6a2:	4b17      	ldr	r3, [pc, #92]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b6a4:	2201      	movs	r2, #1
 801b6a6:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b6a8:	4b15      	ldr	r3, [pc, #84]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b6aa:	2200      	movs	r2, #0
 801b6ac:	755a      	strb	r2, [r3, #21]
        {
 801b6ae:	e00b      	b.n	801b6c8 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b6b0:	68bb      	ldr	r3, [r7, #8]
 801b6b2:	7d5a      	ldrb	r2, [r3, #21]
 801b6b4:	4b12      	ldr	r3, [pc, #72]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b6b6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b6b8:	68bb      	ldr	r3, [r7, #8]
 801b6ba:	7d9a      	ldrb	r2, [r3, #22]
 801b6bc:	4b10      	ldr	r3, [pc, #64]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b6be:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801b6c0:	68bb      	ldr	r3, [r7, #8]
 801b6c2:	7d1a      	ldrb	r2, [r3, #20]
 801b6c4:	4b0e      	ldr	r3, [pc, #56]	; (801b700 <RadioSetTxGenericConfig+0x2e4>)
 801b6c6:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801b6c8:	f7ff f805 	bl	801a6d6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b6cc:	2000      	movs	r0, #0
 801b6ce:	f7fe f9af 	bl	8019a30 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b6d2:	480e      	ldr	r0, [pc, #56]	; (801b70c <RadioSetTxGenericConfig+0x2f0>)
 801b6d4:	f000 fdca 	bl	801c26c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b6d8:	480d      	ldr	r0, [pc, #52]	; (801b710 <RadioSetTxGenericConfig+0x2f4>)
 801b6da:	f000 fe99 	bl	801c410 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b6de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b6e2:	4618      	mov	r0, r3
 801b6e4:	f000 f961 	bl	801b9aa <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b6e8:	68bb      	ldr	r3, [r7, #8]
 801b6ea:	8a1b      	ldrh	r3, [r3, #16]
 801b6ec:	4618      	mov	r0, r3
 801b6ee:	f000 f9ab 	bl	801ba48 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801b6f2:	68bb      	ldr	r3, [r7, #8]
 801b6f4:	899b      	ldrh	r3, [r3, #12]
 801b6f6:	4618      	mov	r0, r3
 801b6f8:	f000 f986 	bl	801ba08 <SUBGRF_SetCrcPolynomial>
        break;
 801b6fc:	e0a6      	b.n	801b84c <RadioSetTxGenericConfig+0x430>
 801b6fe:	bf00      	nop
 801b700:	20001ef4 	.word	0x20001ef4
 801b704:	20001ef0 	.word	0x20001ef0
 801b708:	20001f50 	.word	0x20001f50
 801b70c:	20001f2c 	.word	0x20001f2c
 801b710:	20001f02 	.word	0x20001f02
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b714:	4b59      	ldr	r3, [pc, #356]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b716:	2201      	movs	r2, #1
 801b718:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b71c:	68bb      	ldr	r3, [r7, #8]
 801b71e:	781a      	ldrb	r2, [r3, #0]
 801b720:	4b56      	ldr	r3, [pc, #344]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b726:	68bb      	ldr	r3, [r7, #8]
 801b728:	785a      	ldrb	r2, [r3, #1]
 801b72a:	4b54      	ldr	r3, [pc, #336]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b72c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b730:	68bb      	ldr	r3, [r7, #8]
 801b732:	789a      	ldrb	r2, [r3, #2]
 801b734:	4b51      	ldr	r3, [pc, #324]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b736:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801b73a:	68bb      	ldr	r3, [r7, #8]
 801b73c:	78db      	ldrb	r3, [r3, #3]
 801b73e:	2b02      	cmp	r3, #2
 801b740:	d010      	beq.n	801b764 <RadioSetTxGenericConfig+0x348>
 801b742:	2b02      	cmp	r3, #2
 801b744:	dc20      	bgt.n	801b788 <RadioSetTxGenericConfig+0x36c>
 801b746:	2b00      	cmp	r3, #0
 801b748:	d002      	beq.n	801b750 <RadioSetTxGenericConfig+0x334>
 801b74a:	2b01      	cmp	r3, #1
 801b74c:	d005      	beq.n	801b75a <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 801b74e:	e01b      	b.n	801b788 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b750:	4b4a      	ldr	r3, [pc, #296]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b752:	2200      	movs	r2, #0
 801b754:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b758:	e017      	b.n	801b78a <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b75a:	4b48      	ldr	r3, [pc, #288]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b75c:	2201      	movs	r2, #1
 801b75e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b762:	e012      	b.n	801b78a <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b764:	68bb      	ldr	r3, [r7, #8]
 801b766:	781b      	ldrb	r3, [r3, #0]
 801b768:	2b0b      	cmp	r3, #11
 801b76a:	d003      	beq.n	801b774 <RadioSetTxGenericConfig+0x358>
 801b76c:	68bb      	ldr	r3, [r7, #8]
 801b76e:	781b      	ldrb	r3, [r3, #0]
 801b770:	2b0c      	cmp	r3, #12
 801b772:	d104      	bne.n	801b77e <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b774:	4b41      	ldr	r3, [pc, #260]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b776:	2201      	movs	r2, #1
 801b778:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b77c:	e005      	b.n	801b78a <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b77e:	4b3f      	ldr	r3, [pc, #252]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b780:	2200      	movs	r2, #0
 801b782:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b786:	e000      	b.n	801b78a <RadioSetTxGenericConfig+0x36e>
            break;
 801b788:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b78a:	4b3c      	ldr	r3, [pc, #240]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b78c:	2201      	movs	r2, #1
 801b78e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b790:	68bb      	ldr	r3, [r7, #8]
 801b792:	889a      	ldrh	r2, [r3, #4]
 801b794:	4b39      	ldr	r3, [pc, #228]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b796:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b798:	68bb      	ldr	r3, [r7, #8]
 801b79a:	799a      	ldrb	r2, [r3, #6]
 801b79c:	4b37      	ldr	r3, [pc, #220]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b79e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b7a0:	68bb      	ldr	r3, [r7, #8]
 801b7a2:	79da      	ldrb	r2, [r3, #7]
 801b7a4:	4b35      	ldr	r3, [pc, #212]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b7a6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b7aa:	68bb      	ldr	r3, [r7, #8]
 801b7ac:	7a1a      	ldrb	r2, [r3, #8]
 801b7ae:	4b33      	ldr	r3, [pc, #204]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b7b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801b7b4:	f7fe ff8f 	bl	801a6d6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801b7b8:	2001      	movs	r0, #1
 801b7ba:	f7fe f939 	bl	8019a30 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b7be:	4830      	ldr	r0, [pc, #192]	; (801b880 <RadioSetTxGenericConfig+0x464>)
 801b7c0:	f000 fd54 	bl	801c26c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b7c4:	482f      	ldr	r0, [pc, #188]	; (801b884 <RadioSetTxGenericConfig+0x468>)
 801b7c6:	f000 fe23 	bl	801c410 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801b7ca:	4b2c      	ldr	r3, [pc, #176]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b7cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801b7d0:	2b06      	cmp	r3, #6
 801b7d2:	d10d      	bne.n	801b7f0 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801b7d4:	f640 0089 	movw	r0, #2185	; 0x889
 801b7d8:	f000 ff76 	bl	801c6c8 <SUBGRF_ReadRegister>
 801b7dc:	4603      	mov	r3, r0
 801b7de:	f023 0304 	bic.w	r3, r3, #4
 801b7e2:	b2db      	uxtb	r3, r3
 801b7e4:	4619      	mov	r1, r3
 801b7e6:	f640 0089 	movw	r0, #2185	; 0x889
 801b7ea:	f000 ff59 	bl	801c6a0 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 801b7ee:	e02d      	b.n	801b84c <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801b7f0:	f640 0089 	movw	r0, #2185	; 0x889
 801b7f4:	f000 ff68 	bl	801c6c8 <SUBGRF_ReadRegister>
 801b7f8:	4603      	mov	r3, r0
 801b7fa:	f043 0304 	orr.w	r3, r3, #4
 801b7fe:	b2db      	uxtb	r3, r3
 801b800:	4619      	mov	r1, r3
 801b802:	f640 0089 	movw	r0, #2185	; 0x889
 801b806:	f000 ff4b 	bl	801c6a0 <SUBGRF_WriteRegister>
        break;
 801b80a:	e01f      	b.n	801b84c <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801b80c:	68bb      	ldr	r3, [r7, #8]
 801b80e:	681b      	ldr	r3, [r3, #0]
 801b810:	2b00      	cmp	r3, #0
 801b812:	d004      	beq.n	801b81e <RadioSetTxGenericConfig+0x402>
 801b814:	68bb      	ldr	r3, [r7, #8]
 801b816:	681b      	ldr	r3, [r3, #0]
 801b818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b81c:	d902      	bls.n	801b824 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801b81e:	f04f 33ff 	mov.w	r3, #4294967295
 801b822:	e027      	b.n	801b874 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801b824:	2003      	movs	r0, #3
 801b826:	f7fe f903 	bl	8019a30 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801b82a:	4b14      	ldr	r3, [pc, #80]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b82c:	2202      	movs	r2, #2
 801b82e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801b832:	68bb      	ldr	r3, [r7, #8]
 801b834:	681b      	ldr	r3, [r3, #0]
 801b836:	4a11      	ldr	r2, [pc, #68]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b838:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801b83a:	4b10      	ldr	r3, [pc, #64]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b83c:	2216      	movs	r2, #22
 801b83e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b842:	480f      	ldr	r0, [pc, #60]	; (801b880 <RadioSetTxGenericConfig+0x464>)
 801b844:	f000 fd12 	bl	801c26c <SUBGRF_SetModulationParams>
        break;
 801b848:	e000      	b.n	801b84c <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801b84a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801b84c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b850:	4618      	mov	r0, r3
 801b852:	f001 f841 	bl	801c8d8 <SUBGRF_SetRfTxPower>
 801b856:	4603      	mov	r3, r0
 801b858:	461a      	mov	r2, r3
 801b85a:	4b08      	ldr	r3, [pc, #32]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b85c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801b860:	4b06      	ldr	r3, [pc, #24]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b862:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b866:	4618      	mov	r0, r3
 801b868:	f001 fa05 	bl	801cc76 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801b86c:	4a03      	ldr	r2, [pc, #12]	; (801b87c <RadioSetTxGenericConfig+0x460>)
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	6053      	str	r3, [r2, #4]
    return 0;
 801b872:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801b874:	4618      	mov	r0, r3
 801b876:	3738      	adds	r7, #56	; 0x38
 801b878:	46bd      	mov	sp, r7
 801b87a:	bd80      	pop	{r7, pc}
 801b87c:	20001ef4 	.word	0x20001ef4
 801b880:	20001f2c 	.word	0x20001f2c
 801b884:	20001f02 	.word	0x20001f02

0801b888 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801b888:	b580      	push	{r7, lr}
 801b88a:	b084      	sub	sp, #16
 801b88c:	af00      	add	r7, sp, #0
 801b88e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	2b00      	cmp	r3, #0
 801b894:	d002      	beq.n	801b89c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801b896:	4a1a      	ldr	r2, [pc, #104]	; (801b900 <SUBGRF_Init+0x78>)
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801b89c:	f7e6 ff36 	bl	800270c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b8a0:	2002      	movs	r0, #2
 801b8a2:	f001 f8e5 	bl	801ca70 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801b8a6:	4b17      	ldr	r3, [pc, #92]	; (801b904 <SUBGRF_Init+0x7c>)
 801b8a8:	2200      	movs	r2, #0
 801b8aa:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801b8ac:	2000      	movs	r0, #0
 801b8ae:	f000 f977 	bl	801bba0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801b8b2:	f7f2 f849 	bl	800d948 <RBI_IsTCXO>
 801b8b6:	4603      	mov	r3, r0
 801b8b8:	2b01      	cmp	r3, #1
 801b8ba:	d10e      	bne.n	801b8da <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801b8bc:	2140      	movs	r1, #64	; 0x40
 801b8be:	2001      	movs	r0, #1
 801b8c0:	f000 fb78 	bl	801bfb4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801b8c4:	2100      	movs	r1, #0
 801b8c6:	f640 1011 	movw	r0, #2321	; 0x911
 801b8ca:	f000 fee9 	bl	801c6a0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801b8ce:	237f      	movs	r3, #127	; 0x7f
 801b8d0:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801b8d2:	7b38      	ldrb	r0, [r7, #12]
 801b8d4:	f000 fa85 	bl	801bde2 <SUBGRF_Calibrate>
 801b8d8:	e009      	b.n	801b8ee <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801b8da:	2120      	movs	r1, #32
 801b8dc:	f640 1011 	movw	r0, #2321	; 0x911
 801b8e0:	f000 fede 	bl	801c6a0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801b8e4:	2120      	movs	r1, #32
 801b8e6:	f640 1012 	movw	r0, #2322	; 0x912
 801b8ea:	f000 fed9 	bl	801c6a0 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801b8ee:	f7f2 f80f 	bl	800d910 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801b8f2:	4b05      	ldr	r3, [pc, #20]	; (801b908 <SUBGRF_Init+0x80>)
 801b8f4:	2201      	movs	r2, #1
 801b8f6:	701a      	strb	r2, [r3, #0]
}
 801b8f8:	bf00      	nop
 801b8fa:	3710      	adds	r7, #16
 801b8fc:	46bd      	mov	sp, r7
 801b8fe:	bd80      	pop	{r7, pc}
 801b900:	20001f8c 	.word	0x20001f8c
 801b904:	20001f88 	.word	0x20001f88
 801b908:	20001f80 	.word	0x20001f80

0801b90c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801b90c:	b480      	push	{r7}
 801b90e:	af00      	add	r7, sp, #0
    return OperatingMode;
 801b910:	4b02      	ldr	r3, [pc, #8]	; (801b91c <SUBGRF_GetOperatingMode+0x10>)
 801b912:	781b      	ldrb	r3, [r3, #0]
}
 801b914:	4618      	mov	r0, r3
 801b916:	46bd      	mov	sp, r7
 801b918:	bc80      	pop	{r7}
 801b91a:	4770      	bx	lr
 801b91c:	20001f80 	.word	0x20001f80

0801b920 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801b920:	b580      	push	{r7, lr}
 801b922:	b082      	sub	sp, #8
 801b924:	af00      	add	r7, sp, #0
 801b926:	6078      	str	r0, [r7, #4]
 801b928:	460b      	mov	r3, r1
 801b92a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801b92c:	78fb      	ldrb	r3, [r7, #3]
 801b92e:	461a      	mov	r2, r3
 801b930:	6879      	ldr	r1, [r7, #4]
 801b932:	2000      	movs	r0, #0
 801b934:	f000 ff20 	bl	801c778 <SUBGRF_WriteBuffer>
}
 801b938:	bf00      	nop
 801b93a:	3708      	adds	r7, #8
 801b93c:	46bd      	mov	sp, r7
 801b93e:	bd80      	pop	{r7, pc}

0801b940 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801b940:	b580      	push	{r7, lr}
 801b942:	b086      	sub	sp, #24
 801b944:	af00      	add	r7, sp, #0
 801b946:	60f8      	str	r0, [r7, #12]
 801b948:	60b9      	str	r1, [r7, #8]
 801b94a:	4613      	mov	r3, r2
 801b94c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801b94e:	2300      	movs	r3, #0
 801b950:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801b952:	f107 0317 	add.w	r3, r7, #23
 801b956:	4619      	mov	r1, r3
 801b958:	68b8      	ldr	r0, [r7, #8]
 801b95a:	f000 fe23 	bl	801c5a4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801b95e:	68bb      	ldr	r3, [r7, #8]
 801b960:	781b      	ldrb	r3, [r3, #0]
 801b962:	79fa      	ldrb	r2, [r7, #7]
 801b964:	429a      	cmp	r2, r3
 801b966:	d201      	bcs.n	801b96c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801b968:	2301      	movs	r3, #1
 801b96a:	e007      	b.n	801b97c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801b96c:	7df8      	ldrb	r0, [r7, #23]
 801b96e:	68bb      	ldr	r3, [r7, #8]
 801b970:	781b      	ldrb	r3, [r3, #0]
 801b972:	461a      	mov	r2, r3
 801b974:	68f9      	ldr	r1, [r7, #12]
 801b976:	f000 ff21 	bl	801c7bc <SUBGRF_ReadBuffer>

    return 0;
 801b97a:	2300      	movs	r3, #0
}
 801b97c:	4618      	mov	r0, r3
 801b97e:	3718      	adds	r7, #24
 801b980:	46bd      	mov	sp, r7
 801b982:	bd80      	pop	{r7, pc}

0801b984 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801b984:	b580      	push	{r7, lr}
 801b986:	b084      	sub	sp, #16
 801b988:	af00      	add	r7, sp, #0
 801b98a:	60f8      	str	r0, [r7, #12]
 801b98c:	460b      	mov	r3, r1
 801b98e:	607a      	str	r2, [r7, #4]
 801b990:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801b992:	7afb      	ldrb	r3, [r7, #11]
 801b994:	4619      	mov	r1, r3
 801b996:	68f8      	ldr	r0, [r7, #12]
 801b998:	f7ff ffc2 	bl	801b920 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801b99c:	6878      	ldr	r0, [r7, #4]
 801b99e:	f000 f91b 	bl	801bbd8 <SUBGRF_SetTx>
}
 801b9a2:	bf00      	nop
 801b9a4:	3710      	adds	r7, #16
 801b9a6:	46bd      	mov	sp, r7
 801b9a8:	bd80      	pop	{r7, pc}

0801b9aa <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801b9aa:	b580      	push	{r7, lr}
 801b9ac:	b082      	sub	sp, #8
 801b9ae:	af00      	add	r7, sp, #0
 801b9b0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801b9b2:	2208      	movs	r2, #8
 801b9b4:	6879      	ldr	r1, [r7, #4]
 801b9b6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801b9ba:	f000 fe99 	bl	801c6f0 <SUBGRF_WriteRegisters>
    return 0;
 801b9be:	2300      	movs	r3, #0
}
 801b9c0:	4618      	mov	r0, r3
 801b9c2:	3708      	adds	r7, #8
 801b9c4:	46bd      	mov	sp, r7
 801b9c6:	bd80      	pop	{r7, pc}

0801b9c8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801b9c8:	b580      	push	{r7, lr}
 801b9ca:	b084      	sub	sp, #16
 801b9cc:	af00      	add	r7, sp, #0
 801b9ce:	4603      	mov	r3, r0
 801b9d0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801b9d2:	88fb      	ldrh	r3, [r7, #6]
 801b9d4:	0a1b      	lsrs	r3, r3, #8
 801b9d6:	b29b      	uxth	r3, r3
 801b9d8:	b2db      	uxtb	r3, r3
 801b9da:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801b9dc:	88fb      	ldrh	r3, [r7, #6]
 801b9de:	b2db      	uxtb	r3, r3
 801b9e0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801b9e2:	f000 fb6b 	bl	801c0bc <SUBGRF_GetPacketType>
 801b9e6:	4603      	mov	r3, r0
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d108      	bne.n	801b9fe <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801b9ec:	f107 030c 	add.w	r3, r7, #12
 801b9f0:	2202      	movs	r2, #2
 801b9f2:	4619      	mov	r1, r3
 801b9f4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801b9f8:	f000 fe7a 	bl	801c6f0 <SUBGRF_WriteRegisters>
            break;
 801b9fc:	e000      	b.n	801ba00 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801b9fe:	bf00      	nop
    }
}
 801ba00:	bf00      	nop
 801ba02:	3710      	adds	r7, #16
 801ba04:	46bd      	mov	sp, r7
 801ba06:	bd80      	pop	{r7, pc}

0801ba08 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801ba08:	b580      	push	{r7, lr}
 801ba0a:	b084      	sub	sp, #16
 801ba0c:	af00      	add	r7, sp, #0
 801ba0e:	4603      	mov	r3, r0
 801ba10:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801ba12:	88fb      	ldrh	r3, [r7, #6]
 801ba14:	0a1b      	lsrs	r3, r3, #8
 801ba16:	b29b      	uxth	r3, r3
 801ba18:	b2db      	uxtb	r3, r3
 801ba1a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801ba1c:	88fb      	ldrh	r3, [r7, #6]
 801ba1e:	b2db      	uxtb	r3, r3
 801ba20:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801ba22:	f000 fb4b 	bl	801c0bc <SUBGRF_GetPacketType>
 801ba26:	4603      	mov	r3, r0
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d108      	bne.n	801ba3e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801ba2c:	f107 030c 	add.w	r3, r7, #12
 801ba30:	2202      	movs	r2, #2
 801ba32:	4619      	mov	r1, r3
 801ba34:	f240 60be 	movw	r0, #1726	; 0x6be
 801ba38:	f000 fe5a 	bl	801c6f0 <SUBGRF_WriteRegisters>
            break;
 801ba3c:	e000      	b.n	801ba40 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801ba3e:	bf00      	nop
    }
}
 801ba40:	bf00      	nop
 801ba42:	3710      	adds	r7, #16
 801ba44:	46bd      	mov	sp, r7
 801ba46:	bd80      	pop	{r7, pc}

0801ba48 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801ba48:	b580      	push	{r7, lr}
 801ba4a:	b084      	sub	sp, #16
 801ba4c:	af00      	add	r7, sp, #0
 801ba4e:	4603      	mov	r3, r0
 801ba50:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801ba52:	2300      	movs	r3, #0
 801ba54:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801ba56:	f000 fb31 	bl	801c0bc <SUBGRF_GetPacketType>
 801ba5a:	4603      	mov	r3, r0
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	d121      	bne.n	801baa4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801ba60:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801ba64:	f000 fe30 	bl	801c6c8 <SUBGRF_ReadRegister>
 801ba68:	4603      	mov	r3, r0
 801ba6a:	f023 0301 	bic.w	r3, r3, #1
 801ba6e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801ba70:	88fb      	ldrh	r3, [r7, #6]
 801ba72:	0a1b      	lsrs	r3, r3, #8
 801ba74:	b29b      	uxth	r3, r3
 801ba76:	b25b      	sxtb	r3, r3
 801ba78:	f003 0301 	and.w	r3, r3, #1
 801ba7c:	b25a      	sxtb	r2, r3
 801ba7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ba82:	4313      	orrs	r3, r2
 801ba84:	b25b      	sxtb	r3, r3
 801ba86:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801ba88:	7bfb      	ldrb	r3, [r7, #15]
 801ba8a:	4619      	mov	r1, r3
 801ba8c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801ba90:	f000 fe06 	bl	801c6a0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801ba94:	88fb      	ldrh	r3, [r7, #6]
 801ba96:	b2db      	uxtb	r3, r3
 801ba98:	4619      	mov	r1, r3
 801ba9a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801ba9e:	f000 fdff 	bl	801c6a0 <SUBGRF_WriteRegister>
            break;
 801baa2:	e000      	b.n	801baa6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801baa4:	bf00      	nop
    }
}
 801baa6:	bf00      	nop
 801baa8:	3710      	adds	r7, #16
 801baaa:	46bd      	mov	sp, r7
 801baac:	bd80      	pop	{r7, pc}

0801baae <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801baae:	b580      	push	{r7, lr}
 801bab0:	b082      	sub	sp, #8
 801bab2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801bab4:	2300      	movs	r3, #0
 801bab6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801bab8:	2300      	movs	r3, #0
 801baba:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801babc:	2300      	movs	r3, #0
 801babe:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801bac0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801bac4:	f000 fe00 	bl	801c6c8 <SUBGRF_ReadRegister>
 801bac8:	4603      	mov	r3, r0
 801baca:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801bacc:	79fb      	ldrb	r3, [r7, #7]
 801bace:	f023 0301 	bic.w	r3, r3, #1
 801bad2:	b2db      	uxtb	r3, r3
 801bad4:	4619      	mov	r1, r3
 801bad6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801bada:	f000 fde1 	bl	801c6a0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801bade:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801bae2:	f000 fdf1 	bl	801c6c8 <SUBGRF_ReadRegister>
 801bae6:	4603      	mov	r3, r0
 801bae8:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801baea:	79bb      	ldrb	r3, [r7, #6]
 801baec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801baf0:	b2db      	uxtb	r3, r3
 801baf2:	4619      	mov	r1, r3
 801baf4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801baf8:	f000 fdd2 	bl	801c6a0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801bafc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801bb00:	f000 f88a 	bl	801bc18 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801bb04:	463b      	mov	r3, r7
 801bb06:	2204      	movs	r2, #4
 801bb08:	4619      	mov	r1, r3
 801bb0a:	f640 0019 	movw	r0, #2073	; 0x819
 801bb0e:	f000 fe11 	bl	801c734 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801bb12:	2000      	movs	r0, #0
 801bb14:	f000 f844 	bl	801bba0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801bb18:	79fb      	ldrb	r3, [r7, #7]
 801bb1a:	4619      	mov	r1, r3
 801bb1c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801bb20:	f000 fdbe 	bl	801c6a0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801bb24:	79bb      	ldrb	r3, [r7, #6]
 801bb26:	4619      	mov	r1, r3
 801bb28:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801bb2c:	f000 fdb8 	bl	801c6a0 <SUBGRF_WriteRegister>

    return number;
 801bb30:	683b      	ldr	r3, [r7, #0]
}
 801bb32:	4618      	mov	r0, r3
 801bb34:	3708      	adds	r7, #8
 801bb36:	46bd      	mov	sp, r7
 801bb38:	bd80      	pop	{r7, pc}
	...

0801bb3c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801bb3c:	b580      	push	{r7, lr}
 801bb3e:	b084      	sub	sp, #16
 801bb40:	af00      	add	r7, sp, #0
 801bb42:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801bb44:	2000      	movs	r0, #0
 801bb46:	f7f1 feea 	bl	800d91e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801bb4a:	2002      	movs	r0, #2
 801bb4c:	f000 ff90 	bl	801ca70 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801bb50:	793b      	ldrb	r3, [r7, #4]
 801bb52:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801bb56:	b2db      	uxtb	r3, r3
 801bb58:	009b      	lsls	r3, r3, #2
 801bb5a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801bb5c:	793b      	ldrb	r3, [r7, #4]
 801bb5e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801bb62:	b2db      	uxtb	r3, r3
 801bb64:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801bb66:	b25b      	sxtb	r3, r3
 801bb68:	4313      	orrs	r3, r2
 801bb6a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801bb6c:	793b      	ldrb	r3, [r7, #4]
 801bb6e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801bb72:	b2db      	uxtb	r3, r3
 801bb74:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801bb76:	4313      	orrs	r3, r2
 801bb78:	b25b      	sxtb	r3, r3
 801bb7a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801bb7c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801bb7e:	f107 030f 	add.w	r3, r7, #15
 801bb82:	2201      	movs	r2, #1
 801bb84:	4619      	mov	r1, r3
 801bb86:	2084      	movs	r0, #132	; 0x84
 801bb88:	f000 fe3a 	bl	801c800 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801bb8c:	4b03      	ldr	r3, [pc, #12]	; (801bb9c <SUBGRF_SetSleep+0x60>)
 801bb8e:	2200      	movs	r2, #0
 801bb90:	701a      	strb	r2, [r3, #0]
}
 801bb92:	bf00      	nop
 801bb94:	3710      	adds	r7, #16
 801bb96:	46bd      	mov	sp, r7
 801bb98:	bd80      	pop	{r7, pc}
 801bb9a:	bf00      	nop
 801bb9c:	20001f80 	.word	0x20001f80

0801bba0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801bba0:	b580      	push	{r7, lr}
 801bba2:	b082      	sub	sp, #8
 801bba4:	af00      	add	r7, sp, #0
 801bba6:	4603      	mov	r3, r0
 801bba8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801bbaa:	1dfb      	adds	r3, r7, #7
 801bbac:	2201      	movs	r2, #1
 801bbae:	4619      	mov	r1, r3
 801bbb0:	2080      	movs	r0, #128	; 0x80
 801bbb2:	f000 fe25 	bl	801c800 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801bbb6:	79fb      	ldrb	r3, [r7, #7]
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d103      	bne.n	801bbc4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801bbbc:	4b05      	ldr	r3, [pc, #20]	; (801bbd4 <SUBGRF_SetStandby+0x34>)
 801bbbe:	2201      	movs	r2, #1
 801bbc0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801bbc2:	e002      	b.n	801bbca <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801bbc4:	4b03      	ldr	r3, [pc, #12]	; (801bbd4 <SUBGRF_SetStandby+0x34>)
 801bbc6:	2202      	movs	r2, #2
 801bbc8:	701a      	strb	r2, [r3, #0]
}
 801bbca:	bf00      	nop
 801bbcc:	3708      	adds	r7, #8
 801bbce:	46bd      	mov	sp, r7
 801bbd0:	bd80      	pop	{r7, pc}
 801bbd2:	bf00      	nop
 801bbd4:	20001f80 	.word	0x20001f80

0801bbd8 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801bbd8:	b580      	push	{r7, lr}
 801bbda:	b084      	sub	sp, #16
 801bbdc:	af00      	add	r7, sp, #0
 801bbde:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801bbe0:	4b0c      	ldr	r3, [pc, #48]	; (801bc14 <SUBGRF_SetTx+0x3c>)
 801bbe2:	2204      	movs	r2, #4
 801bbe4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	0c1b      	lsrs	r3, r3, #16
 801bbea:	b2db      	uxtb	r3, r3
 801bbec:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	0a1b      	lsrs	r3, r3, #8
 801bbf2:	b2db      	uxtb	r3, r3
 801bbf4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	b2db      	uxtb	r3, r3
 801bbfa:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801bbfc:	f107 030c 	add.w	r3, r7, #12
 801bc00:	2203      	movs	r2, #3
 801bc02:	4619      	mov	r1, r3
 801bc04:	2083      	movs	r0, #131	; 0x83
 801bc06:	f000 fdfb 	bl	801c800 <SUBGRF_WriteCommand>
}
 801bc0a:	bf00      	nop
 801bc0c:	3710      	adds	r7, #16
 801bc0e:	46bd      	mov	sp, r7
 801bc10:	bd80      	pop	{r7, pc}
 801bc12:	bf00      	nop
 801bc14:	20001f80 	.word	0x20001f80

0801bc18 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801bc18:	b580      	push	{r7, lr}
 801bc1a:	b084      	sub	sp, #16
 801bc1c:	af00      	add	r7, sp, #0
 801bc1e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801bc20:	4b0c      	ldr	r3, [pc, #48]	; (801bc54 <SUBGRF_SetRx+0x3c>)
 801bc22:	2205      	movs	r2, #5
 801bc24:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	0c1b      	lsrs	r3, r3, #16
 801bc2a:	b2db      	uxtb	r3, r3
 801bc2c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	0a1b      	lsrs	r3, r3, #8
 801bc32:	b2db      	uxtb	r3, r3
 801bc34:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	b2db      	uxtb	r3, r3
 801bc3a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801bc3c:	f107 030c 	add.w	r3, r7, #12
 801bc40:	2203      	movs	r2, #3
 801bc42:	4619      	mov	r1, r3
 801bc44:	2082      	movs	r0, #130	; 0x82
 801bc46:	f000 fddb 	bl	801c800 <SUBGRF_WriteCommand>
}
 801bc4a:	bf00      	nop
 801bc4c:	3710      	adds	r7, #16
 801bc4e:	46bd      	mov	sp, r7
 801bc50:	bd80      	pop	{r7, pc}
 801bc52:	bf00      	nop
 801bc54:	20001f80 	.word	0x20001f80

0801bc58 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801bc58:	b580      	push	{r7, lr}
 801bc5a:	b084      	sub	sp, #16
 801bc5c:	af00      	add	r7, sp, #0
 801bc5e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801bc60:	4b0e      	ldr	r3, [pc, #56]	; (801bc9c <SUBGRF_SetRxBoosted+0x44>)
 801bc62:	2205      	movs	r2, #5
 801bc64:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801bc66:	2197      	movs	r1, #151	; 0x97
 801bc68:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801bc6c:	f000 fd18 	bl	801c6a0 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	0c1b      	lsrs	r3, r3, #16
 801bc74:	b2db      	uxtb	r3, r3
 801bc76:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	0a1b      	lsrs	r3, r3, #8
 801bc7c:	b2db      	uxtb	r3, r3
 801bc7e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	b2db      	uxtb	r3, r3
 801bc84:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801bc86:	f107 030c 	add.w	r3, r7, #12
 801bc8a:	2203      	movs	r2, #3
 801bc8c:	4619      	mov	r1, r3
 801bc8e:	2082      	movs	r0, #130	; 0x82
 801bc90:	f000 fdb6 	bl	801c800 <SUBGRF_WriteCommand>
}
 801bc94:	bf00      	nop
 801bc96:	3710      	adds	r7, #16
 801bc98:	46bd      	mov	sp, r7
 801bc9a:	bd80      	pop	{r7, pc}
 801bc9c:	20001f80 	.word	0x20001f80

0801bca0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801bca0:	b580      	push	{r7, lr}
 801bca2:	b084      	sub	sp, #16
 801bca4:	af00      	add	r7, sp, #0
 801bca6:	6078      	str	r0, [r7, #4]
 801bca8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	0c1b      	lsrs	r3, r3, #16
 801bcae:	b2db      	uxtb	r3, r3
 801bcb0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	0a1b      	lsrs	r3, r3, #8
 801bcb6:	b2db      	uxtb	r3, r3
 801bcb8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	b2db      	uxtb	r3, r3
 801bcbe:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801bcc0:	683b      	ldr	r3, [r7, #0]
 801bcc2:	0c1b      	lsrs	r3, r3, #16
 801bcc4:	b2db      	uxtb	r3, r3
 801bcc6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801bcc8:	683b      	ldr	r3, [r7, #0]
 801bcca:	0a1b      	lsrs	r3, r3, #8
 801bccc:	b2db      	uxtb	r3, r3
 801bcce:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801bcd0:	683b      	ldr	r3, [r7, #0]
 801bcd2:	b2db      	uxtb	r3, r3
 801bcd4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801bcd6:	f107 0308 	add.w	r3, r7, #8
 801bcda:	2206      	movs	r2, #6
 801bcdc:	4619      	mov	r1, r3
 801bcde:	2094      	movs	r0, #148	; 0x94
 801bce0:	f000 fd8e 	bl	801c800 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801bce4:	4b03      	ldr	r3, [pc, #12]	; (801bcf4 <SUBGRF_SetRxDutyCycle+0x54>)
 801bce6:	2206      	movs	r2, #6
 801bce8:	701a      	strb	r2, [r3, #0]
}
 801bcea:	bf00      	nop
 801bcec:	3710      	adds	r7, #16
 801bcee:	46bd      	mov	sp, r7
 801bcf0:	bd80      	pop	{r7, pc}
 801bcf2:	bf00      	nop
 801bcf4:	20001f80 	.word	0x20001f80

0801bcf8 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801bcf8:	b580      	push	{r7, lr}
 801bcfa:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801bcfc:	2200      	movs	r2, #0
 801bcfe:	2100      	movs	r1, #0
 801bd00:	20c5      	movs	r0, #197	; 0xc5
 801bd02:	f000 fd7d 	bl	801c800 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801bd06:	4b02      	ldr	r3, [pc, #8]	; (801bd10 <SUBGRF_SetCad+0x18>)
 801bd08:	2207      	movs	r2, #7
 801bd0a:	701a      	strb	r2, [r3, #0]
}
 801bd0c:	bf00      	nop
 801bd0e:	bd80      	pop	{r7, pc}
 801bd10:	20001f80 	.word	0x20001f80

0801bd14 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801bd14:	b580      	push	{r7, lr}
 801bd16:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801bd18:	2200      	movs	r2, #0
 801bd1a:	2100      	movs	r1, #0
 801bd1c:	20d1      	movs	r0, #209	; 0xd1
 801bd1e:	f000 fd6f 	bl	801c800 <SUBGRF_WriteCommand>
}
 801bd22:	bf00      	nop
 801bd24:	bd80      	pop	{r7, pc}

0801bd26 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801bd26:	b580      	push	{r7, lr}
 801bd28:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801bd2a:	2200      	movs	r2, #0
 801bd2c:	2100      	movs	r1, #0
 801bd2e:	20d2      	movs	r0, #210	; 0xd2
 801bd30:	f000 fd66 	bl	801c800 <SUBGRF_WriteCommand>
}
 801bd34:	bf00      	nop
 801bd36:	bd80      	pop	{r7, pc}

0801bd38 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801bd38:	b580      	push	{r7, lr}
 801bd3a:	b082      	sub	sp, #8
 801bd3c:	af00      	add	r7, sp, #0
 801bd3e:	4603      	mov	r3, r0
 801bd40:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801bd42:	1dfb      	adds	r3, r7, #7
 801bd44:	2201      	movs	r2, #1
 801bd46:	4619      	mov	r1, r3
 801bd48:	209f      	movs	r0, #159	; 0x9f
 801bd4a:	f000 fd59 	bl	801c800 <SUBGRF_WriteCommand>
}
 801bd4e:	bf00      	nop
 801bd50:	3708      	adds	r7, #8
 801bd52:	46bd      	mov	sp, r7
 801bd54:	bd80      	pop	{r7, pc}

0801bd56 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801bd56:	b580      	push	{r7, lr}
 801bd58:	b084      	sub	sp, #16
 801bd5a:	af00      	add	r7, sp, #0
 801bd5c:	4603      	mov	r3, r0
 801bd5e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801bd60:	1dfb      	adds	r3, r7, #7
 801bd62:	2201      	movs	r2, #1
 801bd64:	4619      	mov	r1, r3
 801bd66:	20a0      	movs	r0, #160	; 0xa0
 801bd68:	f000 fd4a 	bl	801c800 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801bd6c:	79fb      	ldrb	r3, [r7, #7]
 801bd6e:	2b3f      	cmp	r3, #63	; 0x3f
 801bd70:	d91c      	bls.n	801bdac <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801bd72:	79fb      	ldrb	r3, [r7, #7]
 801bd74:	085b      	lsrs	r3, r3, #1
 801bd76:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801bd78:	2300      	movs	r3, #0
 801bd7a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801bd7c:	2300      	movs	r3, #0
 801bd7e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801bd80:	e005      	b.n	801bd8e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801bd82:	7bfb      	ldrb	r3, [r7, #15]
 801bd84:	089b      	lsrs	r3, r3, #2
 801bd86:	73fb      	strb	r3, [r7, #15]
            exp++;
 801bd88:	7bbb      	ldrb	r3, [r7, #14]
 801bd8a:	3301      	adds	r3, #1
 801bd8c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801bd8e:	7bfb      	ldrb	r3, [r7, #15]
 801bd90:	2b1f      	cmp	r3, #31
 801bd92:	d8f6      	bhi.n	801bd82 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801bd94:	7bfb      	ldrb	r3, [r7, #15]
 801bd96:	00db      	lsls	r3, r3, #3
 801bd98:	b2da      	uxtb	r2, r3
 801bd9a:	7bbb      	ldrb	r3, [r7, #14]
 801bd9c:	4413      	add	r3, r2
 801bd9e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801bda0:	7b7b      	ldrb	r3, [r7, #13]
 801bda2:	4619      	mov	r1, r3
 801bda4:	f240 7006 	movw	r0, #1798	; 0x706
 801bda8:	f000 fc7a 	bl	801c6a0 <SUBGRF_WriteRegister>
    }
}
 801bdac:	bf00      	nop
 801bdae:	3710      	adds	r7, #16
 801bdb0:	46bd      	mov	sp, r7
 801bdb2:	bd80      	pop	{r7, pc}

0801bdb4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	b082      	sub	sp, #8
 801bdb8:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801bdba:	f7f1 fdcc 	bl	800d956 <RBI_IsDCDC>
 801bdbe:	4603      	mov	r3, r0
 801bdc0:	2b01      	cmp	r3, #1
 801bdc2:	d102      	bne.n	801bdca <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801bdc4:	2301      	movs	r3, #1
 801bdc6:	71fb      	strb	r3, [r7, #7]
 801bdc8:	e001      	b.n	801bdce <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801bdca:	2300      	movs	r3, #0
 801bdcc:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801bdce:	1dfb      	adds	r3, r7, #7
 801bdd0:	2201      	movs	r2, #1
 801bdd2:	4619      	mov	r1, r3
 801bdd4:	2096      	movs	r0, #150	; 0x96
 801bdd6:	f000 fd13 	bl	801c800 <SUBGRF_WriteCommand>
}
 801bdda:	bf00      	nop
 801bddc:	3708      	adds	r7, #8
 801bdde:	46bd      	mov	sp, r7
 801bde0:	bd80      	pop	{r7, pc}

0801bde2 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801bde2:	b580      	push	{r7, lr}
 801bde4:	b084      	sub	sp, #16
 801bde6:	af00      	add	r7, sp, #0
 801bde8:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801bdea:	793b      	ldrb	r3, [r7, #4]
 801bdec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801bdf0:	b2db      	uxtb	r3, r3
 801bdf2:	019b      	lsls	r3, r3, #6
 801bdf4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801bdf6:	793b      	ldrb	r3, [r7, #4]
 801bdf8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801bdfc:	b2db      	uxtb	r3, r3
 801bdfe:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801be00:	b25b      	sxtb	r3, r3
 801be02:	4313      	orrs	r3, r2
 801be04:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801be06:	793b      	ldrb	r3, [r7, #4]
 801be08:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801be0c:	b2db      	uxtb	r3, r3
 801be0e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801be10:	b25b      	sxtb	r3, r3
 801be12:	4313      	orrs	r3, r2
 801be14:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801be16:	793b      	ldrb	r3, [r7, #4]
 801be18:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801be1c:	b2db      	uxtb	r3, r3
 801be1e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801be20:	b25b      	sxtb	r3, r3
 801be22:	4313      	orrs	r3, r2
 801be24:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801be26:	793b      	ldrb	r3, [r7, #4]
 801be28:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801be2c:	b2db      	uxtb	r3, r3
 801be2e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801be30:	b25b      	sxtb	r3, r3
 801be32:	4313      	orrs	r3, r2
 801be34:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801be36:	793b      	ldrb	r3, [r7, #4]
 801be38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801be3c:	b2db      	uxtb	r3, r3
 801be3e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801be40:	b25b      	sxtb	r3, r3
 801be42:	4313      	orrs	r3, r2
 801be44:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801be46:	793b      	ldrb	r3, [r7, #4]
 801be48:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801be4c:	b2db      	uxtb	r3, r3
 801be4e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801be50:	4313      	orrs	r3, r2
 801be52:	b25b      	sxtb	r3, r3
 801be54:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801be56:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801be58:	f107 030f 	add.w	r3, r7, #15
 801be5c:	2201      	movs	r2, #1
 801be5e:	4619      	mov	r1, r3
 801be60:	2089      	movs	r0, #137	; 0x89
 801be62:	f000 fccd 	bl	801c800 <SUBGRF_WriteCommand>
}
 801be66:	bf00      	nop
 801be68:	3710      	adds	r7, #16
 801be6a:	46bd      	mov	sp, r7
 801be6c:	bd80      	pop	{r7, pc}
	...

0801be70 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801be70:	b580      	push	{r7, lr}
 801be72:	b084      	sub	sp, #16
 801be74:	af00      	add	r7, sp, #0
 801be76:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	4a1b      	ldr	r2, [pc, #108]	; (801bee8 <SUBGRF_CalibrateImage+0x78>)
 801be7c:	4293      	cmp	r3, r2
 801be7e:	d904      	bls.n	801be8a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801be80:	23e1      	movs	r3, #225	; 0xe1
 801be82:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801be84:	23e9      	movs	r3, #233	; 0xe9
 801be86:	737b      	strb	r3, [r7, #13]
 801be88:	e022      	b.n	801bed0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	4a17      	ldr	r2, [pc, #92]	; (801beec <SUBGRF_CalibrateImage+0x7c>)
 801be8e:	4293      	cmp	r3, r2
 801be90:	d904      	bls.n	801be9c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801be92:	23d7      	movs	r3, #215	; 0xd7
 801be94:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801be96:	23db      	movs	r3, #219	; 0xdb
 801be98:	737b      	strb	r3, [r7, #13]
 801be9a:	e019      	b.n	801bed0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	4a14      	ldr	r2, [pc, #80]	; (801bef0 <SUBGRF_CalibrateImage+0x80>)
 801bea0:	4293      	cmp	r3, r2
 801bea2:	d904      	bls.n	801beae <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801bea4:	23c1      	movs	r3, #193	; 0xc1
 801bea6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801bea8:	23c5      	movs	r3, #197	; 0xc5
 801beaa:	737b      	strb	r3, [r7, #13]
 801beac:	e010      	b.n	801bed0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	4a10      	ldr	r2, [pc, #64]	; (801bef4 <SUBGRF_CalibrateImage+0x84>)
 801beb2:	4293      	cmp	r3, r2
 801beb4:	d904      	bls.n	801bec0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801beb6:	2375      	movs	r3, #117	; 0x75
 801beb8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801beba:	2381      	movs	r3, #129	; 0x81
 801bebc:	737b      	strb	r3, [r7, #13]
 801bebe:	e007      	b.n	801bed0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	4a0d      	ldr	r2, [pc, #52]	; (801bef8 <SUBGRF_CalibrateImage+0x88>)
 801bec4:	4293      	cmp	r3, r2
 801bec6:	d903      	bls.n	801bed0 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801bec8:	236b      	movs	r3, #107	; 0x6b
 801beca:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801becc:	236f      	movs	r3, #111	; 0x6f
 801bece:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801bed0:	f107 030c 	add.w	r3, r7, #12
 801bed4:	2202      	movs	r2, #2
 801bed6:	4619      	mov	r1, r3
 801bed8:	2098      	movs	r0, #152	; 0x98
 801beda:	f000 fc91 	bl	801c800 <SUBGRF_WriteCommand>
}
 801bede:	bf00      	nop
 801bee0:	3710      	adds	r7, #16
 801bee2:	46bd      	mov	sp, r7
 801bee4:	bd80      	pop	{r7, pc}
 801bee6:	bf00      	nop
 801bee8:	35a4e900 	.word	0x35a4e900
 801beec:	32a9f880 	.word	0x32a9f880
 801bef0:	2de54480 	.word	0x2de54480
 801bef4:	1b6b0b00 	.word	0x1b6b0b00
 801bef8:	1954fc40 	.word	0x1954fc40

0801befc <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801befc:	b590      	push	{r4, r7, lr}
 801befe:	b085      	sub	sp, #20
 801bf00:	af00      	add	r7, sp, #0
 801bf02:	4604      	mov	r4, r0
 801bf04:	4608      	mov	r0, r1
 801bf06:	4611      	mov	r1, r2
 801bf08:	461a      	mov	r2, r3
 801bf0a:	4623      	mov	r3, r4
 801bf0c:	71fb      	strb	r3, [r7, #7]
 801bf0e:	4603      	mov	r3, r0
 801bf10:	71bb      	strb	r3, [r7, #6]
 801bf12:	460b      	mov	r3, r1
 801bf14:	717b      	strb	r3, [r7, #5]
 801bf16:	4613      	mov	r3, r2
 801bf18:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801bf1a:	79fb      	ldrb	r3, [r7, #7]
 801bf1c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801bf1e:	79bb      	ldrb	r3, [r7, #6]
 801bf20:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801bf22:	797b      	ldrb	r3, [r7, #5]
 801bf24:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801bf26:	793b      	ldrb	r3, [r7, #4]
 801bf28:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801bf2a:	f107 030c 	add.w	r3, r7, #12
 801bf2e:	2204      	movs	r2, #4
 801bf30:	4619      	mov	r1, r3
 801bf32:	2095      	movs	r0, #149	; 0x95
 801bf34:	f000 fc64 	bl	801c800 <SUBGRF_WriteCommand>
}
 801bf38:	bf00      	nop
 801bf3a:	3714      	adds	r7, #20
 801bf3c:	46bd      	mov	sp, r7
 801bf3e:	bd90      	pop	{r4, r7, pc}

0801bf40 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801bf40:	b590      	push	{r4, r7, lr}
 801bf42:	b085      	sub	sp, #20
 801bf44:	af00      	add	r7, sp, #0
 801bf46:	4604      	mov	r4, r0
 801bf48:	4608      	mov	r0, r1
 801bf4a:	4611      	mov	r1, r2
 801bf4c:	461a      	mov	r2, r3
 801bf4e:	4623      	mov	r3, r4
 801bf50:	80fb      	strh	r3, [r7, #6]
 801bf52:	4603      	mov	r3, r0
 801bf54:	80bb      	strh	r3, [r7, #4]
 801bf56:	460b      	mov	r3, r1
 801bf58:	807b      	strh	r3, [r7, #2]
 801bf5a:	4613      	mov	r3, r2
 801bf5c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801bf5e:	88fb      	ldrh	r3, [r7, #6]
 801bf60:	0a1b      	lsrs	r3, r3, #8
 801bf62:	b29b      	uxth	r3, r3
 801bf64:	b2db      	uxtb	r3, r3
 801bf66:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801bf68:	88fb      	ldrh	r3, [r7, #6]
 801bf6a:	b2db      	uxtb	r3, r3
 801bf6c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801bf6e:	88bb      	ldrh	r3, [r7, #4]
 801bf70:	0a1b      	lsrs	r3, r3, #8
 801bf72:	b29b      	uxth	r3, r3
 801bf74:	b2db      	uxtb	r3, r3
 801bf76:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801bf78:	88bb      	ldrh	r3, [r7, #4]
 801bf7a:	b2db      	uxtb	r3, r3
 801bf7c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801bf7e:	887b      	ldrh	r3, [r7, #2]
 801bf80:	0a1b      	lsrs	r3, r3, #8
 801bf82:	b29b      	uxth	r3, r3
 801bf84:	b2db      	uxtb	r3, r3
 801bf86:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801bf88:	887b      	ldrh	r3, [r7, #2]
 801bf8a:	b2db      	uxtb	r3, r3
 801bf8c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801bf8e:	883b      	ldrh	r3, [r7, #0]
 801bf90:	0a1b      	lsrs	r3, r3, #8
 801bf92:	b29b      	uxth	r3, r3
 801bf94:	b2db      	uxtb	r3, r3
 801bf96:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801bf98:	883b      	ldrh	r3, [r7, #0]
 801bf9a:	b2db      	uxtb	r3, r3
 801bf9c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801bf9e:	f107 0308 	add.w	r3, r7, #8
 801bfa2:	2208      	movs	r2, #8
 801bfa4:	4619      	mov	r1, r3
 801bfa6:	2008      	movs	r0, #8
 801bfa8:	f000 fc2a 	bl	801c800 <SUBGRF_WriteCommand>
}
 801bfac:	bf00      	nop
 801bfae:	3714      	adds	r7, #20
 801bfb0:	46bd      	mov	sp, r7
 801bfb2:	bd90      	pop	{r4, r7, pc}

0801bfb4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801bfb4:	b580      	push	{r7, lr}
 801bfb6:	b084      	sub	sp, #16
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	4603      	mov	r3, r0
 801bfbc:	6039      	str	r1, [r7, #0]
 801bfbe:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801bfc0:	79fb      	ldrb	r3, [r7, #7]
 801bfc2:	f003 0307 	and.w	r3, r3, #7
 801bfc6:	b2db      	uxtb	r3, r3
 801bfc8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801bfca:	683b      	ldr	r3, [r7, #0]
 801bfcc:	0c1b      	lsrs	r3, r3, #16
 801bfce:	b2db      	uxtb	r3, r3
 801bfd0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801bfd2:	683b      	ldr	r3, [r7, #0]
 801bfd4:	0a1b      	lsrs	r3, r3, #8
 801bfd6:	b2db      	uxtb	r3, r3
 801bfd8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801bfda:	683b      	ldr	r3, [r7, #0]
 801bfdc:	b2db      	uxtb	r3, r3
 801bfde:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801bfe0:	f107 030c 	add.w	r3, r7, #12
 801bfe4:	2204      	movs	r2, #4
 801bfe6:	4619      	mov	r1, r3
 801bfe8:	2097      	movs	r0, #151	; 0x97
 801bfea:	f000 fc09 	bl	801c800 <SUBGRF_WriteCommand>
}
 801bfee:	bf00      	nop
 801bff0:	3710      	adds	r7, #16
 801bff2:	46bd      	mov	sp, r7
 801bff4:	bd80      	pop	{r7, pc}
	...

0801bff8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801bff8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801bffc:	b084      	sub	sp, #16
 801bffe:	af00      	add	r7, sp, #0
 801c000:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801c002:	2300      	movs	r3, #0
 801c004:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801c006:	4b1d      	ldr	r3, [pc, #116]	; (801c07c <SUBGRF_SetRfFrequency+0x84>)
 801c008:	781b      	ldrb	r3, [r3, #0]
 801c00a:	f083 0301 	eor.w	r3, r3, #1
 801c00e:	b2db      	uxtb	r3, r3
 801c010:	2b00      	cmp	r3, #0
 801c012:	d005      	beq.n	801c020 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801c014:	6878      	ldr	r0, [r7, #4]
 801c016:	f7ff ff2b 	bl	801be70 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801c01a:	4b18      	ldr	r3, [pc, #96]	; (801c07c <SUBGRF_SetRfFrequency+0x84>)
 801c01c:	2201      	movs	r2, #1
 801c01e:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	2200      	movs	r2, #0
 801c024:	461c      	mov	r4, r3
 801c026:	4615      	mov	r5, r2
 801c028:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c02c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c030:	4a13      	ldr	r2, [pc, #76]	; (801c080 <SUBGRF_SetRfFrequency+0x88>)
 801c032:	f04f 0300 	mov.w	r3, #0
 801c036:	4640      	mov	r0, r8
 801c038:	4649      	mov	r1, r9
 801c03a:	f7e4 fea7 	bl	8000d8c <__aeabi_uldivmod>
 801c03e:	4602      	mov	r2, r0
 801c040:	460b      	mov	r3, r1
 801c042:	4613      	mov	r3, r2
 801c044:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801c046:	68fb      	ldr	r3, [r7, #12]
 801c048:	0e1b      	lsrs	r3, r3, #24
 801c04a:	b2db      	uxtb	r3, r3
 801c04c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801c04e:	68fb      	ldr	r3, [r7, #12]
 801c050:	0c1b      	lsrs	r3, r3, #16
 801c052:	b2db      	uxtb	r3, r3
 801c054:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801c056:	68fb      	ldr	r3, [r7, #12]
 801c058:	0a1b      	lsrs	r3, r3, #8
 801c05a:	b2db      	uxtb	r3, r3
 801c05c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801c05e:	68fb      	ldr	r3, [r7, #12]
 801c060:	b2db      	uxtb	r3, r3
 801c062:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801c064:	f107 0308 	add.w	r3, r7, #8
 801c068:	2204      	movs	r2, #4
 801c06a:	4619      	mov	r1, r3
 801c06c:	2086      	movs	r0, #134	; 0x86
 801c06e:	f000 fbc7 	bl	801c800 <SUBGRF_WriteCommand>
}
 801c072:	bf00      	nop
 801c074:	3710      	adds	r7, #16
 801c076:	46bd      	mov	sp, r7
 801c078:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c07c:	20001f88 	.word	0x20001f88
 801c080:	01e84800 	.word	0x01e84800

0801c084 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801c084:	b580      	push	{r7, lr}
 801c086:	b082      	sub	sp, #8
 801c088:	af00      	add	r7, sp, #0
 801c08a:	4603      	mov	r3, r0
 801c08c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801c08e:	79fa      	ldrb	r2, [r7, #7]
 801c090:	4b09      	ldr	r3, [pc, #36]	; (801c0b8 <SUBGRF_SetPacketType+0x34>)
 801c092:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801c094:	79fb      	ldrb	r3, [r7, #7]
 801c096:	2b00      	cmp	r3, #0
 801c098:	d104      	bne.n	801c0a4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801c09a:	2100      	movs	r1, #0
 801c09c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801c0a0:	f000 fafe 	bl	801c6a0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801c0a4:	1dfb      	adds	r3, r7, #7
 801c0a6:	2201      	movs	r2, #1
 801c0a8:	4619      	mov	r1, r3
 801c0aa:	208a      	movs	r0, #138	; 0x8a
 801c0ac:	f000 fba8 	bl	801c800 <SUBGRF_WriteCommand>
}
 801c0b0:	bf00      	nop
 801c0b2:	3708      	adds	r7, #8
 801c0b4:	46bd      	mov	sp, r7
 801c0b6:	bd80      	pop	{r7, pc}
 801c0b8:	20001f81 	.word	0x20001f81

0801c0bc <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801c0bc:	b480      	push	{r7}
 801c0be:	af00      	add	r7, sp, #0
    return PacketType;
 801c0c0:	4b02      	ldr	r3, [pc, #8]	; (801c0cc <SUBGRF_GetPacketType+0x10>)
 801c0c2:	781b      	ldrb	r3, [r3, #0]
}
 801c0c4:	4618      	mov	r0, r3
 801c0c6:	46bd      	mov	sp, r7
 801c0c8:	bc80      	pop	{r7}
 801c0ca:	4770      	bx	lr
 801c0cc:	20001f81 	.word	0x20001f81

0801c0d0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801c0d0:	b580      	push	{r7, lr}
 801c0d2:	b084      	sub	sp, #16
 801c0d4:	af00      	add	r7, sp, #0
 801c0d6:	4603      	mov	r3, r0
 801c0d8:	71fb      	strb	r3, [r7, #7]
 801c0da:	460b      	mov	r3, r1
 801c0dc:	71bb      	strb	r3, [r7, #6]
 801c0de:	4613      	mov	r3, r2
 801c0e0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801c0e2:	79fb      	ldrb	r3, [r7, #7]
 801c0e4:	2b01      	cmp	r3, #1
 801c0e6:	d149      	bne.n	801c17c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801c0e8:	2000      	movs	r0, #0
 801c0ea:	f7f1 fc3b 	bl	800d964 <RBI_GetRFOMaxPowerConfig>
 801c0ee:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801c0f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c0f4:	68fa      	ldr	r2, [r7, #12]
 801c0f6:	429a      	cmp	r2, r3
 801c0f8:	da01      	bge.n	801c0fe <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801c0fa:	68fb      	ldr	r3, [r7, #12]
 801c0fc:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801c0fe:	68fb      	ldr	r3, [r7, #12]
 801c100:	2b0e      	cmp	r3, #14
 801c102:	d10e      	bne.n	801c122 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801c104:	2301      	movs	r3, #1
 801c106:	2201      	movs	r2, #1
 801c108:	2100      	movs	r1, #0
 801c10a:	2004      	movs	r0, #4
 801c10c:	f7ff fef6 	bl	801befc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c110:	79ba      	ldrb	r2, [r7, #6]
 801c112:	68fb      	ldr	r3, [r7, #12]
 801c114:	b2db      	uxtb	r3, r3
 801c116:	1ad3      	subs	r3, r2, r3
 801c118:	b2db      	uxtb	r3, r3
 801c11a:	330e      	adds	r3, #14
 801c11c:	b2db      	uxtb	r3, r3
 801c11e:	71bb      	strb	r3, [r7, #6]
 801c120:	e01f      	b.n	801c162 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801c122:	68fb      	ldr	r3, [r7, #12]
 801c124:	2b0a      	cmp	r3, #10
 801c126:	d10e      	bne.n	801c146 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801c128:	2301      	movs	r3, #1
 801c12a:	2201      	movs	r2, #1
 801c12c:	2100      	movs	r1, #0
 801c12e:	2001      	movs	r0, #1
 801c130:	f7ff fee4 	bl	801befc <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801c134:	79ba      	ldrb	r2, [r7, #6]
 801c136:	68fb      	ldr	r3, [r7, #12]
 801c138:	b2db      	uxtb	r3, r3
 801c13a:	1ad3      	subs	r3, r2, r3
 801c13c:	b2db      	uxtb	r3, r3
 801c13e:	330d      	adds	r3, #13
 801c140:	b2db      	uxtb	r3, r3
 801c142:	71bb      	strb	r3, [r7, #6]
 801c144:	e00d      	b.n	801c162 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801c146:	2301      	movs	r3, #1
 801c148:	2201      	movs	r2, #1
 801c14a:	2100      	movs	r1, #0
 801c14c:	2006      	movs	r0, #6
 801c14e:	f7ff fed5 	bl	801befc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c152:	79ba      	ldrb	r2, [r7, #6]
 801c154:	68fb      	ldr	r3, [r7, #12]
 801c156:	b2db      	uxtb	r3, r3
 801c158:	1ad3      	subs	r3, r2, r3
 801c15a:	b2db      	uxtb	r3, r3
 801c15c:	330e      	adds	r3, #14
 801c15e:	b2db      	uxtb	r3, r3
 801c160:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801c162:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c166:	f113 0f11 	cmn.w	r3, #17
 801c16a:	da01      	bge.n	801c170 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801c16c:	23ef      	movs	r3, #239	; 0xef
 801c16e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801c170:	2118      	movs	r1, #24
 801c172:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c176:	f000 fa93 	bl	801c6a0 <SUBGRF_WriteRegister>
 801c17a:	e067      	b.n	801c24c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801c17c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c180:	f000 faa2 	bl	801c6c8 <SUBGRF_ReadRegister>
 801c184:	4603      	mov	r3, r0
 801c186:	f043 031e 	orr.w	r3, r3, #30
 801c18a:	b2db      	uxtb	r3, r3
 801c18c:	4619      	mov	r1, r3
 801c18e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c192:	f000 fa85 	bl	801c6a0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801c196:	2001      	movs	r0, #1
 801c198:	f7f1 fbe4 	bl	800d964 <RBI_GetRFOMaxPowerConfig>
 801c19c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801c19e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c1a2:	68fa      	ldr	r2, [r7, #12]
 801c1a4:	429a      	cmp	r2, r3
 801c1a6:	da01      	bge.n	801c1ac <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801c1a8:	68fb      	ldr	r3, [r7, #12]
 801c1aa:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801c1ac:	68fb      	ldr	r3, [r7, #12]
 801c1ae:	2b14      	cmp	r3, #20
 801c1b0:	d10e      	bne.n	801c1d0 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801c1b2:	2301      	movs	r3, #1
 801c1b4:	2200      	movs	r2, #0
 801c1b6:	2105      	movs	r1, #5
 801c1b8:	2003      	movs	r0, #3
 801c1ba:	f7ff fe9f 	bl	801befc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c1be:	79ba      	ldrb	r2, [r7, #6]
 801c1c0:	68fb      	ldr	r3, [r7, #12]
 801c1c2:	b2db      	uxtb	r3, r3
 801c1c4:	1ad3      	subs	r3, r2, r3
 801c1c6:	b2db      	uxtb	r3, r3
 801c1c8:	3316      	adds	r3, #22
 801c1ca:	b2db      	uxtb	r3, r3
 801c1cc:	71bb      	strb	r3, [r7, #6]
 801c1ce:	e031      	b.n	801c234 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801c1d0:	68fb      	ldr	r3, [r7, #12]
 801c1d2:	2b11      	cmp	r3, #17
 801c1d4:	d10e      	bne.n	801c1f4 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801c1d6:	2301      	movs	r3, #1
 801c1d8:	2200      	movs	r2, #0
 801c1da:	2103      	movs	r1, #3
 801c1dc:	2002      	movs	r0, #2
 801c1de:	f7ff fe8d 	bl	801befc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c1e2:	79ba      	ldrb	r2, [r7, #6]
 801c1e4:	68fb      	ldr	r3, [r7, #12]
 801c1e6:	b2db      	uxtb	r3, r3
 801c1e8:	1ad3      	subs	r3, r2, r3
 801c1ea:	b2db      	uxtb	r3, r3
 801c1ec:	3316      	adds	r3, #22
 801c1ee:	b2db      	uxtb	r3, r3
 801c1f0:	71bb      	strb	r3, [r7, #6]
 801c1f2:	e01f      	b.n	801c234 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	2b0e      	cmp	r3, #14
 801c1f8:	d10e      	bne.n	801c218 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801c1fa:	2301      	movs	r3, #1
 801c1fc:	2200      	movs	r2, #0
 801c1fe:	2102      	movs	r1, #2
 801c200:	2002      	movs	r0, #2
 801c202:	f7ff fe7b 	bl	801befc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c206:	79ba      	ldrb	r2, [r7, #6]
 801c208:	68fb      	ldr	r3, [r7, #12]
 801c20a:	b2db      	uxtb	r3, r3
 801c20c:	1ad3      	subs	r3, r2, r3
 801c20e:	b2db      	uxtb	r3, r3
 801c210:	330e      	adds	r3, #14
 801c212:	b2db      	uxtb	r3, r3
 801c214:	71bb      	strb	r3, [r7, #6]
 801c216:	e00d      	b.n	801c234 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801c218:	2301      	movs	r3, #1
 801c21a:	2200      	movs	r2, #0
 801c21c:	2107      	movs	r1, #7
 801c21e:	2004      	movs	r0, #4
 801c220:	f7ff fe6c 	bl	801befc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c224:	79ba      	ldrb	r2, [r7, #6]
 801c226:	68fb      	ldr	r3, [r7, #12]
 801c228:	b2db      	uxtb	r3, r3
 801c22a:	1ad3      	subs	r3, r2, r3
 801c22c:	b2db      	uxtb	r3, r3
 801c22e:	3316      	adds	r3, #22
 801c230:	b2db      	uxtb	r3, r3
 801c232:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801c234:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c238:	f113 0f09 	cmn.w	r3, #9
 801c23c:	da01      	bge.n	801c242 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801c23e:	23f7      	movs	r3, #247	; 0xf7
 801c240:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801c242:	2138      	movs	r1, #56	; 0x38
 801c244:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c248:	f000 fa2a 	bl	801c6a0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801c24c:	79bb      	ldrb	r3, [r7, #6]
 801c24e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801c250:	797b      	ldrb	r3, [r7, #5]
 801c252:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801c254:	f107 0308 	add.w	r3, r7, #8
 801c258:	2202      	movs	r2, #2
 801c25a:	4619      	mov	r1, r3
 801c25c:	208e      	movs	r0, #142	; 0x8e
 801c25e:	f000 facf 	bl	801c800 <SUBGRF_WriteCommand>
}
 801c262:	bf00      	nop
 801c264:	3710      	adds	r7, #16
 801c266:	46bd      	mov	sp, r7
 801c268:	bd80      	pop	{r7, pc}
	...

0801c26c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801c26c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c270:	b086      	sub	sp, #24
 801c272:	af00      	add	r7, sp, #0
 801c274:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801c276:	2300      	movs	r3, #0
 801c278:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801c27a:	4a61      	ldr	r2, [pc, #388]	; (801c400 <SUBGRF_SetModulationParams+0x194>)
 801c27c:	f107 0308 	add.w	r3, r7, #8
 801c280:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c284:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801c288:	687b      	ldr	r3, [r7, #4]
 801c28a:	781a      	ldrb	r2, [r3, #0]
 801c28c:	4b5d      	ldr	r3, [pc, #372]	; (801c404 <SUBGRF_SetModulationParams+0x198>)
 801c28e:	781b      	ldrb	r3, [r3, #0]
 801c290:	429a      	cmp	r2, r3
 801c292:	d004      	beq.n	801c29e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	781b      	ldrb	r3, [r3, #0]
 801c298:	4618      	mov	r0, r3
 801c29a:	f7ff fef3 	bl	801c084 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	781b      	ldrb	r3, [r3, #0]
 801c2a2:	2b03      	cmp	r3, #3
 801c2a4:	f200 80a5 	bhi.w	801c3f2 <SUBGRF_SetModulationParams+0x186>
 801c2a8:	a201      	add	r2, pc, #4	; (adr r2, 801c2b0 <SUBGRF_SetModulationParams+0x44>)
 801c2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c2ae:	bf00      	nop
 801c2b0:	0801c2c1 	.word	0x0801c2c1
 801c2b4:	0801c381 	.word	0x0801c381
 801c2b8:	0801c343 	.word	0x0801c343
 801c2bc:	0801c3af 	.word	0x0801c3af
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801c2c0:	2308      	movs	r3, #8
 801c2c2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	685b      	ldr	r3, [r3, #4]
 801c2c8:	4a4f      	ldr	r2, [pc, #316]	; (801c408 <SUBGRF_SetModulationParams+0x19c>)
 801c2ca:	fbb2 f3f3 	udiv	r3, r2, r3
 801c2ce:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c2d0:	697b      	ldr	r3, [r7, #20]
 801c2d2:	0c1b      	lsrs	r3, r3, #16
 801c2d4:	b2db      	uxtb	r3, r3
 801c2d6:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c2d8:	697b      	ldr	r3, [r7, #20]
 801c2da:	0a1b      	lsrs	r3, r3, #8
 801c2dc:	b2db      	uxtb	r3, r3
 801c2de:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c2e0:	697b      	ldr	r3, [r7, #20]
 801c2e2:	b2db      	uxtb	r3, r3
 801c2e4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	7b1b      	ldrb	r3, [r3, #12]
 801c2ea:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	7b5b      	ldrb	r3, [r3, #13]
 801c2f0:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	689b      	ldr	r3, [r3, #8]
 801c2f6:	2200      	movs	r2, #0
 801c2f8:	461c      	mov	r4, r3
 801c2fa:	4615      	mov	r5, r2
 801c2fc:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c300:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c304:	4a41      	ldr	r2, [pc, #260]	; (801c40c <SUBGRF_SetModulationParams+0x1a0>)
 801c306:	f04f 0300 	mov.w	r3, #0
 801c30a:	4640      	mov	r0, r8
 801c30c:	4649      	mov	r1, r9
 801c30e:	f7e4 fd3d 	bl	8000d8c <__aeabi_uldivmod>
 801c312:	4602      	mov	r2, r0
 801c314:	460b      	mov	r3, r1
 801c316:	4613      	mov	r3, r2
 801c318:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801c31a:	697b      	ldr	r3, [r7, #20]
 801c31c:	0c1b      	lsrs	r3, r3, #16
 801c31e:	b2db      	uxtb	r3, r3
 801c320:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801c322:	697b      	ldr	r3, [r7, #20]
 801c324:	0a1b      	lsrs	r3, r3, #8
 801c326:	b2db      	uxtb	r3, r3
 801c328:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801c32a:	697b      	ldr	r3, [r7, #20]
 801c32c:	b2db      	uxtb	r3, r3
 801c32e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c330:	7cfb      	ldrb	r3, [r7, #19]
 801c332:	b29a      	uxth	r2, r3
 801c334:	f107 0308 	add.w	r3, r7, #8
 801c338:	4619      	mov	r1, r3
 801c33a:	208b      	movs	r0, #139	; 0x8b
 801c33c:	f000 fa60 	bl	801c800 <SUBGRF_WriteCommand>
        break;
 801c340:	e058      	b.n	801c3f4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801c342:	2304      	movs	r3, #4
 801c344:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	691b      	ldr	r3, [r3, #16]
 801c34a:	4a2f      	ldr	r2, [pc, #188]	; (801c408 <SUBGRF_SetModulationParams+0x19c>)
 801c34c:	fbb2 f3f3 	udiv	r3, r2, r3
 801c350:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c352:	697b      	ldr	r3, [r7, #20]
 801c354:	0c1b      	lsrs	r3, r3, #16
 801c356:	b2db      	uxtb	r3, r3
 801c358:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c35a:	697b      	ldr	r3, [r7, #20]
 801c35c:	0a1b      	lsrs	r3, r3, #8
 801c35e:	b2db      	uxtb	r3, r3
 801c360:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c362:	697b      	ldr	r3, [r7, #20]
 801c364:	b2db      	uxtb	r3, r3
 801c366:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	7d1b      	ldrb	r3, [r3, #20]
 801c36c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c36e:	7cfb      	ldrb	r3, [r7, #19]
 801c370:	b29a      	uxth	r2, r3
 801c372:	f107 0308 	add.w	r3, r7, #8
 801c376:	4619      	mov	r1, r3
 801c378:	208b      	movs	r0, #139	; 0x8b
 801c37a:	f000 fa41 	bl	801c800 <SUBGRF_WriteCommand>
        break;
 801c37e:	e039      	b.n	801c3f4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801c380:	2304      	movs	r3, #4
 801c382:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	7e1b      	ldrb	r3, [r3, #24]
 801c388:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	7e5b      	ldrb	r3, [r3, #25]
 801c38e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	7e9b      	ldrb	r3, [r3, #26]
 801c394:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801c396:	687b      	ldr	r3, [r7, #4]
 801c398:	7edb      	ldrb	r3, [r3, #27]
 801c39a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c39c:	7cfb      	ldrb	r3, [r7, #19]
 801c39e:	b29a      	uxth	r2, r3
 801c3a0:	f107 0308 	add.w	r3, r7, #8
 801c3a4:	4619      	mov	r1, r3
 801c3a6:	208b      	movs	r0, #139	; 0x8b
 801c3a8:	f000 fa2a 	bl	801c800 <SUBGRF_WriteCommand>

        break;
 801c3ac:	e022      	b.n	801c3f4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801c3ae:	2305      	movs	r3, #5
 801c3b0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	685b      	ldr	r3, [r3, #4]
 801c3b6:	4a14      	ldr	r2, [pc, #80]	; (801c408 <SUBGRF_SetModulationParams+0x19c>)
 801c3b8:	fbb2 f3f3 	udiv	r3, r2, r3
 801c3bc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c3be:	697b      	ldr	r3, [r7, #20]
 801c3c0:	0c1b      	lsrs	r3, r3, #16
 801c3c2:	b2db      	uxtb	r3, r3
 801c3c4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c3c6:	697b      	ldr	r3, [r7, #20]
 801c3c8:	0a1b      	lsrs	r3, r3, #8
 801c3ca:	b2db      	uxtb	r3, r3
 801c3cc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c3ce:	697b      	ldr	r3, [r7, #20]
 801c3d0:	b2db      	uxtb	r3, r3
 801c3d2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	7b1b      	ldrb	r3, [r3, #12]
 801c3d8:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	7b5b      	ldrb	r3, [r3, #13]
 801c3de:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c3e0:	7cfb      	ldrb	r3, [r7, #19]
 801c3e2:	b29a      	uxth	r2, r3
 801c3e4:	f107 0308 	add.w	r3, r7, #8
 801c3e8:	4619      	mov	r1, r3
 801c3ea:	208b      	movs	r0, #139	; 0x8b
 801c3ec:	f000 fa08 	bl	801c800 <SUBGRF_WriteCommand>
        break;
 801c3f0:	e000      	b.n	801c3f4 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801c3f2:	bf00      	nop
    }
}
 801c3f4:	bf00      	nop
 801c3f6:	3718      	adds	r7, #24
 801c3f8:	46bd      	mov	sp, r7
 801c3fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c3fe:	bf00      	nop
 801c400:	0801ee90 	.word	0x0801ee90
 801c404:	20001f81 	.word	0x20001f81
 801c408:	3d090000 	.word	0x3d090000
 801c40c:	01e84800 	.word	0x01e84800

0801c410 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801c410:	b580      	push	{r7, lr}
 801c412:	b086      	sub	sp, #24
 801c414:	af00      	add	r7, sp, #0
 801c416:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801c418:	2300      	movs	r3, #0
 801c41a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801c41c:	4a48      	ldr	r2, [pc, #288]	; (801c540 <SUBGRF_SetPacketParams+0x130>)
 801c41e:	f107 030c 	add.w	r3, r7, #12
 801c422:	ca07      	ldmia	r2, {r0, r1, r2}
 801c424:	c303      	stmia	r3!, {r0, r1}
 801c426:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801c428:	687b      	ldr	r3, [r7, #4]
 801c42a:	781a      	ldrb	r2, [r3, #0]
 801c42c:	4b45      	ldr	r3, [pc, #276]	; (801c544 <SUBGRF_SetPacketParams+0x134>)
 801c42e:	781b      	ldrb	r3, [r3, #0]
 801c430:	429a      	cmp	r2, r3
 801c432:	d004      	beq.n	801c43e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	781b      	ldrb	r3, [r3, #0]
 801c438:	4618      	mov	r0, r3
 801c43a:	f7ff fe23 	bl	801c084 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	781b      	ldrb	r3, [r3, #0]
 801c442:	2b03      	cmp	r3, #3
 801c444:	d878      	bhi.n	801c538 <SUBGRF_SetPacketParams+0x128>
 801c446:	a201      	add	r2, pc, #4	; (adr r2, 801c44c <SUBGRF_SetPacketParams+0x3c>)
 801c448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c44c:	0801c45d 	.word	0x0801c45d
 801c450:	0801c4ed 	.word	0x0801c4ed
 801c454:	0801c4e1 	.word	0x0801c4e1
 801c458:	0801c45d 	.word	0x0801c45d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	7a5b      	ldrb	r3, [r3, #9]
 801c460:	2bf1      	cmp	r3, #241	; 0xf1
 801c462:	d10a      	bne.n	801c47a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801c464:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801c468:	f7ff faae 	bl	801b9c8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801c46c:	f248 0005 	movw	r0, #32773	; 0x8005
 801c470:	f7ff faca 	bl	801ba08 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801c474:	2302      	movs	r3, #2
 801c476:	75bb      	strb	r3, [r7, #22]
 801c478:	e011      	b.n	801c49e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	7a5b      	ldrb	r3, [r3, #9]
 801c47e:	2bf2      	cmp	r3, #242	; 0xf2
 801c480:	d10a      	bne.n	801c498 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801c482:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801c486:	f7ff fa9f 	bl	801b9c8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801c48a:	f241 0021 	movw	r0, #4129	; 0x1021
 801c48e:	f7ff fabb 	bl	801ba08 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801c492:	2306      	movs	r3, #6
 801c494:	75bb      	strb	r3, [r7, #22]
 801c496:	e002      	b.n	801c49e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	7a5b      	ldrb	r3, [r3, #9]
 801c49c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801c49e:	2309      	movs	r3, #9
 801c4a0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	885b      	ldrh	r3, [r3, #2]
 801c4a6:	0a1b      	lsrs	r3, r3, #8
 801c4a8:	b29b      	uxth	r3, r3
 801c4aa:	b2db      	uxtb	r3, r3
 801c4ac:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	885b      	ldrh	r3, [r3, #2]
 801c4b2:	b2db      	uxtb	r3, r3
 801c4b4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801c4b6:	687b      	ldr	r3, [r7, #4]
 801c4b8:	791b      	ldrb	r3, [r3, #4]
 801c4ba:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	795b      	ldrb	r3, [r3, #5]
 801c4c0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801c4c2:	687b      	ldr	r3, [r7, #4]
 801c4c4:	799b      	ldrb	r3, [r3, #6]
 801c4c6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	79db      	ldrb	r3, [r3, #7]
 801c4cc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	7a1b      	ldrb	r3, [r3, #8]
 801c4d2:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801c4d4:	7dbb      	ldrb	r3, [r7, #22]
 801c4d6:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	7a9b      	ldrb	r3, [r3, #10]
 801c4dc:	753b      	strb	r3, [r7, #20]
        break;
 801c4de:	e022      	b.n	801c526 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801c4e0:	2301      	movs	r3, #1
 801c4e2:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	7b1b      	ldrb	r3, [r3, #12]
 801c4e8:	733b      	strb	r3, [r7, #12]
        break;
 801c4ea:	e01c      	b.n	801c526 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801c4ec:	2306      	movs	r3, #6
 801c4ee:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	89db      	ldrh	r3, [r3, #14]
 801c4f4:	0a1b      	lsrs	r3, r3, #8
 801c4f6:	b29b      	uxth	r3, r3
 801c4f8:	b2db      	uxtb	r3, r3
 801c4fa:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	89db      	ldrh	r3, [r3, #14]
 801c500:	b2db      	uxtb	r3, r3
 801c502:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	7c1a      	ldrb	r2, [r3, #16]
 801c508:	4b0f      	ldr	r3, [pc, #60]	; (801c548 <SUBGRF_SetPacketParams+0x138>)
 801c50a:	4611      	mov	r1, r2
 801c50c:	7019      	strb	r1, [r3, #0]
 801c50e:	4613      	mov	r3, r2
 801c510:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	7c5b      	ldrb	r3, [r3, #17]
 801c516:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	7c9b      	ldrb	r3, [r3, #18]
 801c51c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	7cdb      	ldrb	r3, [r3, #19]
 801c522:	747b      	strb	r3, [r7, #17]
        break;
 801c524:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801c526:	7dfb      	ldrb	r3, [r7, #23]
 801c528:	b29a      	uxth	r2, r3
 801c52a:	f107 030c 	add.w	r3, r7, #12
 801c52e:	4619      	mov	r1, r3
 801c530:	208c      	movs	r0, #140	; 0x8c
 801c532:	f000 f965 	bl	801c800 <SUBGRF_WriteCommand>
 801c536:	e000      	b.n	801c53a <SUBGRF_SetPacketParams+0x12a>
        return;
 801c538:	bf00      	nop
}
 801c53a:	3718      	adds	r7, #24
 801c53c:	46bd      	mov	sp, r7
 801c53e:	bd80      	pop	{r7, pc}
 801c540:	0801ee98 	.word	0x0801ee98
 801c544:	20001f81 	.word	0x20001f81
 801c548:	20001f82 	.word	0x20001f82

0801c54c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801c54c:	b580      	push	{r7, lr}
 801c54e:	b084      	sub	sp, #16
 801c550:	af00      	add	r7, sp, #0
 801c552:	4603      	mov	r3, r0
 801c554:	460a      	mov	r2, r1
 801c556:	71fb      	strb	r3, [r7, #7]
 801c558:	4613      	mov	r3, r2
 801c55a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801c55c:	79fb      	ldrb	r3, [r7, #7]
 801c55e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801c560:	79bb      	ldrb	r3, [r7, #6]
 801c562:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801c564:	f107 030c 	add.w	r3, r7, #12
 801c568:	2202      	movs	r2, #2
 801c56a:	4619      	mov	r1, r3
 801c56c:	208f      	movs	r0, #143	; 0x8f
 801c56e:	f000 f947 	bl	801c800 <SUBGRF_WriteCommand>
}
 801c572:	bf00      	nop
 801c574:	3710      	adds	r7, #16
 801c576:	46bd      	mov	sp, r7
 801c578:	bd80      	pop	{r7, pc}

0801c57a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801c57a:	b580      	push	{r7, lr}
 801c57c:	b082      	sub	sp, #8
 801c57e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801c580:	2300      	movs	r3, #0
 801c582:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801c584:	1d3b      	adds	r3, r7, #4
 801c586:	2201      	movs	r2, #1
 801c588:	4619      	mov	r1, r3
 801c58a:	2015      	movs	r0, #21
 801c58c:	f000 f95a 	bl	801c844 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801c590:	793b      	ldrb	r3, [r7, #4]
 801c592:	425b      	negs	r3, r3
 801c594:	105b      	asrs	r3, r3, #1
 801c596:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801c598:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801c59c:	4618      	mov	r0, r3
 801c59e:	3708      	adds	r7, #8
 801c5a0:	46bd      	mov	sp, r7
 801c5a2:	bd80      	pop	{r7, pc}

0801c5a4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801c5a4:	b580      	push	{r7, lr}
 801c5a6:	b084      	sub	sp, #16
 801c5a8:	af00      	add	r7, sp, #0
 801c5aa:	6078      	str	r0, [r7, #4]
 801c5ac:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801c5ae:	f107 030c 	add.w	r3, r7, #12
 801c5b2:	2202      	movs	r2, #2
 801c5b4:	4619      	mov	r1, r3
 801c5b6:	2013      	movs	r0, #19
 801c5b8:	f000 f944 	bl	801c844 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801c5bc:	f7ff fd7e 	bl	801c0bc <SUBGRF_GetPacketType>
 801c5c0:	4603      	mov	r3, r0
 801c5c2:	2b01      	cmp	r3, #1
 801c5c4:	d10d      	bne.n	801c5e2 <SUBGRF_GetRxBufferStatus+0x3e>
 801c5c6:	4b0c      	ldr	r3, [pc, #48]	; (801c5f8 <SUBGRF_GetRxBufferStatus+0x54>)
 801c5c8:	781b      	ldrb	r3, [r3, #0]
 801c5ca:	b2db      	uxtb	r3, r3
 801c5cc:	2b01      	cmp	r3, #1
 801c5ce:	d108      	bne.n	801c5e2 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801c5d0:	f240 7002 	movw	r0, #1794	; 0x702
 801c5d4:	f000 f878 	bl	801c6c8 <SUBGRF_ReadRegister>
 801c5d8:	4603      	mov	r3, r0
 801c5da:	461a      	mov	r2, r3
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	701a      	strb	r2, [r3, #0]
 801c5e0:	e002      	b.n	801c5e8 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801c5e2:	7b3a      	ldrb	r2, [r7, #12]
 801c5e4:	687b      	ldr	r3, [r7, #4]
 801c5e6:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801c5e8:	7b7a      	ldrb	r2, [r7, #13]
 801c5ea:	683b      	ldr	r3, [r7, #0]
 801c5ec:	701a      	strb	r2, [r3, #0]
}
 801c5ee:	bf00      	nop
 801c5f0:	3710      	adds	r7, #16
 801c5f2:	46bd      	mov	sp, r7
 801c5f4:	bd80      	pop	{r7, pc}
 801c5f6:	bf00      	nop
 801c5f8:	20001f82 	.word	0x20001f82

0801c5fc <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801c5fc:	b580      	push	{r7, lr}
 801c5fe:	b084      	sub	sp, #16
 801c600:	af00      	add	r7, sp, #0
 801c602:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801c604:	f107 030c 	add.w	r3, r7, #12
 801c608:	2203      	movs	r2, #3
 801c60a:	4619      	mov	r1, r3
 801c60c:	2014      	movs	r0, #20
 801c60e:	f000 f919 	bl	801c844 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801c612:	f7ff fd53 	bl	801c0bc <SUBGRF_GetPacketType>
 801c616:	4603      	mov	r3, r0
 801c618:	461a      	mov	r2, r3
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	781b      	ldrb	r3, [r3, #0]
 801c622:	2b00      	cmp	r3, #0
 801c624:	d002      	beq.n	801c62c <SUBGRF_GetPacketStatus+0x30>
 801c626:	2b01      	cmp	r3, #1
 801c628:	d013      	beq.n	801c652 <SUBGRF_GetPacketStatus+0x56>
 801c62a:	e02a      	b.n	801c682 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801c62c:	7b3a      	ldrb	r2, [r7, #12]
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801c632:	7b7b      	ldrb	r3, [r7, #13]
 801c634:	425b      	negs	r3, r3
 801c636:	105b      	asrs	r3, r3, #1
 801c638:	b25a      	sxtb	r2, r3
 801c63a:	687b      	ldr	r3, [r7, #4]
 801c63c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801c63e:	7bbb      	ldrb	r3, [r7, #14]
 801c640:	425b      	negs	r3, r3
 801c642:	105b      	asrs	r3, r3, #1
 801c644:	b25a      	sxtb	r2, r3
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	2200      	movs	r2, #0
 801c64e:	609a      	str	r2, [r3, #8]
            break;
 801c650:	e020      	b.n	801c694 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801c652:	7b3b      	ldrb	r3, [r7, #12]
 801c654:	425b      	negs	r3, r3
 801c656:	105b      	asrs	r3, r3, #1
 801c658:	b25a      	sxtb	r2, r3
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801c65e:	7b7b      	ldrb	r3, [r7, #13]
 801c660:	b25b      	sxtb	r3, r3
 801c662:	3302      	adds	r3, #2
 801c664:	109b      	asrs	r3, r3, #2
 801c666:	b25a      	sxtb	r2, r3
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801c66c:	7bbb      	ldrb	r3, [r7, #14]
 801c66e:	425b      	negs	r3, r3
 801c670:	105b      	asrs	r3, r3, #1
 801c672:	b25a      	sxtb	r2, r3
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801c678:	4b08      	ldr	r3, [pc, #32]	; (801c69c <SUBGRF_GetPacketStatus+0xa0>)
 801c67a:	681a      	ldr	r2, [r3, #0]
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	611a      	str	r2, [r3, #16]
            break;
 801c680:	e008      	b.n	801c694 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801c682:	2214      	movs	r2, #20
 801c684:	2100      	movs	r1, #0
 801c686:	6878      	ldr	r0, [r7, #4]
 801c688:	f000 fbf3 	bl	801ce72 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	220f      	movs	r2, #15
 801c690:	701a      	strb	r2, [r3, #0]
            break;
 801c692:	bf00      	nop
    }
}
 801c694:	bf00      	nop
 801c696:	3710      	adds	r7, #16
 801c698:	46bd      	mov	sp, r7
 801c69a:	bd80      	pop	{r7, pc}
 801c69c:	20001f84 	.word	0x20001f84

0801c6a0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801c6a0:	b580      	push	{r7, lr}
 801c6a2:	b082      	sub	sp, #8
 801c6a4:	af00      	add	r7, sp, #0
 801c6a6:	4603      	mov	r3, r0
 801c6a8:	460a      	mov	r2, r1
 801c6aa:	80fb      	strh	r3, [r7, #6]
 801c6ac:	4613      	mov	r3, r2
 801c6ae:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801c6b0:	1d7a      	adds	r2, r7, #5
 801c6b2:	88f9      	ldrh	r1, [r7, #6]
 801c6b4:	2301      	movs	r3, #1
 801c6b6:	4803      	ldr	r0, [pc, #12]	; (801c6c4 <SUBGRF_WriteRegister+0x24>)
 801c6b8:	f7ed fb92 	bl	8009de0 <HAL_SUBGHZ_WriteRegisters>
}
 801c6bc:	bf00      	nop
 801c6be:	3708      	adds	r7, #8
 801c6c0:	46bd      	mov	sp, r7
 801c6c2:	bd80      	pop	{r7, pc}
 801c6c4:	200003a0 	.word	0x200003a0

0801c6c8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801c6c8:	b580      	push	{r7, lr}
 801c6ca:	b084      	sub	sp, #16
 801c6cc:	af00      	add	r7, sp, #0
 801c6ce:	4603      	mov	r3, r0
 801c6d0:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801c6d2:	f107 020f 	add.w	r2, r7, #15
 801c6d6:	88f9      	ldrh	r1, [r7, #6]
 801c6d8:	2301      	movs	r3, #1
 801c6da:	4804      	ldr	r0, [pc, #16]	; (801c6ec <SUBGRF_ReadRegister+0x24>)
 801c6dc:	f7ed fbdf 	bl	8009e9e <HAL_SUBGHZ_ReadRegisters>
    return data;
 801c6e0:	7bfb      	ldrb	r3, [r7, #15]
}
 801c6e2:	4618      	mov	r0, r3
 801c6e4:	3710      	adds	r7, #16
 801c6e6:	46bd      	mov	sp, r7
 801c6e8:	bd80      	pop	{r7, pc}
 801c6ea:	bf00      	nop
 801c6ec:	200003a0 	.word	0x200003a0

0801c6f0 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801c6f0:	b580      	push	{r7, lr}
 801c6f2:	b086      	sub	sp, #24
 801c6f4:	af00      	add	r7, sp, #0
 801c6f6:	4603      	mov	r3, r0
 801c6f8:	6039      	str	r1, [r7, #0]
 801c6fa:	80fb      	strh	r3, [r7, #6]
 801c6fc:	4613      	mov	r3, r2
 801c6fe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c700:	f3ef 8310 	mrs	r3, PRIMASK
 801c704:	60fb      	str	r3, [r7, #12]
  return(result);
 801c706:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c708:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c70a:	b672      	cpsid	i
}
 801c70c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801c70e:	88bb      	ldrh	r3, [r7, #4]
 801c710:	88f9      	ldrh	r1, [r7, #6]
 801c712:	683a      	ldr	r2, [r7, #0]
 801c714:	4806      	ldr	r0, [pc, #24]	; (801c730 <SUBGRF_WriteRegisters+0x40>)
 801c716:	f7ed fb63 	bl	8009de0 <HAL_SUBGHZ_WriteRegisters>
 801c71a:	697b      	ldr	r3, [r7, #20]
 801c71c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c71e:	693b      	ldr	r3, [r7, #16]
 801c720:	f383 8810 	msr	PRIMASK, r3
}
 801c724:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c726:	bf00      	nop
 801c728:	3718      	adds	r7, #24
 801c72a:	46bd      	mov	sp, r7
 801c72c:	bd80      	pop	{r7, pc}
 801c72e:	bf00      	nop
 801c730:	200003a0 	.word	0x200003a0

0801c734 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801c734:	b580      	push	{r7, lr}
 801c736:	b086      	sub	sp, #24
 801c738:	af00      	add	r7, sp, #0
 801c73a:	4603      	mov	r3, r0
 801c73c:	6039      	str	r1, [r7, #0]
 801c73e:	80fb      	strh	r3, [r7, #6]
 801c740:	4613      	mov	r3, r2
 801c742:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c744:	f3ef 8310 	mrs	r3, PRIMASK
 801c748:	60fb      	str	r3, [r7, #12]
  return(result);
 801c74a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c74c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c74e:	b672      	cpsid	i
}
 801c750:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801c752:	88bb      	ldrh	r3, [r7, #4]
 801c754:	88f9      	ldrh	r1, [r7, #6]
 801c756:	683a      	ldr	r2, [r7, #0]
 801c758:	4806      	ldr	r0, [pc, #24]	; (801c774 <SUBGRF_ReadRegisters+0x40>)
 801c75a:	f7ed fba0 	bl	8009e9e <HAL_SUBGHZ_ReadRegisters>
 801c75e:	697b      	ldr	r3, [r7, #20]
 801c760:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c762:	693b      	ldr	r3, [r7, #16]
 801c764:	f383 8810 	msr	PRIMASK, r3
}
 801c768:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c76a:	bf00      	nop
 801c76c:	3718      	adds	r7, #24
 801c76e:	46bd      	mov	sp, r7
 801c770:	bd80      	pop	{r7, pc}
 801c772:	bf00      	nop
 801c774:	200003a0 	.word	0x200003a0

0801c778 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801c778:	b580      	push	{r7, lr}
 801c77a:	b086      	sub	sp, #24
 801c77c:	af00      	add	r7, sp, #0
 801c77e:	4603      	mov	r3, r0
 801c780:	6039      	str	r1, [r7, #0]
 801c782:	71fb      	strb	r3, [r7, #7]
 801c784:	4613      	mov	r3, r2
 801c786:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c788:	f3ef 8310 	mrs	r3, PRIMASK
 801c78c:	60fb      	str	r3, [r7, #12]
  return(result);
 801c78e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c790:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c792:	b672      	cpsid	i
}
 801c794:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801c796:	79bb      	ldrb	r3, [r7, #6]
 801c798:	b29b      	uxth	r3, r3
 801c79a:	79f9      	ldrb	r1, [r7, #7]
 801c79c:	683a      	ldr	r2, [r7, #0]
 801c79e:	4806      	ldr	r0, [pc, #24]	; (801c7b8 <SUBGRF_WriteBuffer+0x40>)
 801c7a0:	f7ed fc91 	bl	800a0c6 <HAL_SUBGHZ_WriteBuffer>
 801c7a4:	697b      	ldr	r3, [r7, #20]
 801c7a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7a8:	693b      	ldr	r3, [r7, #16]
 801c7aa:	f383 8810 	msr	PRIMASK, r3
}
 801c7ae:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c7b0:	bf00      	nop
 801c7b2:	3718      	adds	r7, #24
 801c7b4:	46bd      	mov	sp, r7
 801c7b6:	bd80      	pop	{r7, pc}
 801c7b8:	200003a0 	.word	0x200003a0

0801c7bc <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801c7bc:	b580      	push	{r7, lr}
 801c7be:	b086      	sub	sp, #24
 801c7c0:	af00      	add	r7, sp, #0
 801c7c2:	4603      	mov	r3, r0
 801c7c4:	6039      	str	r1, [r7, #0]
 801c7c6:	71fb      	strb	r3, [r7, #7]
 801c7c8:	4613      	mov	r3, r2
 801c7ca:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c7cc:	f3ef 8310 	mrs	r3, PRIMASK
 801c7d0:	60fb      	str	r3, [r7, #12]
  return(result);
 801c7d2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c7d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c7d6:	b672      	cpsid	i
}
 801c7d8:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801c7da:	79bb      	ldrb	r3, [r7, #6]
 801c7dc:	b29b      	uxth	r3, r3
 801c7de:	79f9      	ldrb	r1, [r7, #7]
 801c7e0:	683a      	ldr	r2, [r7, #0]
 801c7e2:	4806      	ldr	r0, [pc, #24]	; (801c7fc <SUBGRF_ReadBuffer+0x40>)
 801c7e4:	f7ed fcc2 	bl	800a16c <HAL_SUBGHZ_ReadBuffer>
 801c7e8:	697b      	ldr	r3, [r7, #20]
 801c7ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7ec:	693b      	ldr	r3, [r7, #16]
 801c7ee:	f383 8810 	msr	PRIMASK, r3
}
 801c7f2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c7f4:	bf00      	nop
 801c7f6:	3718      	adds	r7, #24
 801c7f8:	46bd      	mov	sp, r7
 801c7fa:	bd80      	pop	{r7, pc}
 801c7fc:	200003a0 	.word	0x200003a0

0801c800 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801c800:	b580      	push	{r7, lr}
 801c802:	b086      	sub	sp, #24
 801c804:	af00      	add	r7, sp, #0
 801c806:	4603      	mov	r3, r0
 801c808:	6039      	str	r1, [r7, #0]
 801c80a:	71fb      	strb	r3, [r7, #7]
 801c80c:	4613      	mov	r3, r2
 801c80e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c810:	f3ef 8310 	mrs	r3, PRIMASK
 801c814:	60fb      	str	r3, [r7, #12]
  return(result);
 801c816:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c818:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c81a:	b672      	cpsid	i
}
 801c81c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801c81e:	88bb      	ldrh	r3, [r7, #4]
 801c820:	79f9      	ldrb	r1, [r7, #7]
 801c822:	683a      	ldr	r2, [r7, #0]
 801c824:	4806      	ldr	r0, [pc, #24]	; (801c840 <SUBGRF_WriteCommand+0x40>)
 801c826:	f7ed fb9b 	bl	8009f60 <HAL_SUBGHZ_ExecSetCmd>
 801c82a:	697b      	ldr	r3, [r7, #20]
 801c82c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c82e:	693b      	ldr	r3, [r7, #16]
 801c830:	f383 8810 	msr	PRIMASK, r3
}
 801c834:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c836:	bf00      	nop
 801c838:	3718      	adds	r7, #24
 801c83a:	46bd      	mov	sp, r7
 801c83c:	bd80      	pop	{r7, pc}
 801c83e:	bf00      	nop
 801c840:	200003a0 	.word	0x200003a0

0801c844 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801c844:	b580      	push	{r7, lr}
 801c846:	b086      	sub	sp, #24
 801c848:	af00      	add	r7, sp, #0
 801c84a:	4603      	mov	r3, r0
 801c84c:	6039      	str	r1, [r7, #0]
 801c84e:	71fb      	strb	r3, [r7, #7]
 801c850:	4613      	mov	r3, r2
 801c852:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c854:	f3ef 8310 	mrs	r3, PRIMASK
 801c858:	60fb      	str	r3, [r7, #12]
  return(result);
 801c85a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c85c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c85e:	b672      	cpsid	i
}
 801c860:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801c862:	88bb      	ldrh	r3, [r7, #4]
 801c864:	79f9      	ldrb	r1, [r7, #7]
 801c866:	683a      	ldr	r2, [r7, #0]
 801c868:	4806      	ldr	r0, [pc, #24]	; (801c884 <SUBGRF_ReadCommand+0x40>)
 801c86a:	f7ed fbd8 	bl	800a01e <HAL_SUBGHZ_ExecGetCmd>
 801c86e:	697b      	ldr	r3, [r7, #20]
 801c870:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c872:	693b      	ldr	r3, [r7, #16]
 801c874:	f383 8810 	msr	PRIMASK, r3
}
 801c878:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c87a:	bf00      	nop
 801c87c:	3718      	adds	r7, #24
 801c87e:	46bd      	mov	sp, r7
 801c880:	bd80      	pop	{r7, pc}
 801c882:	bf00      	nop
 801c884:	200003a0 	.word	0x200003a0

0801c888 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801c888:	b580      	push	{r7, lr}
 801c88a:	b084      	sub	sp, #16
 801c88c:	af00      	add	r7, sp, #0
 801c88e:	4603      	mov	r3, r0
 801c890:	460a      	mov	r2, r1
 801c892:	71fb      	strb	r3, [r7, #7]
 801c894:	4613      	mov	r3, r2
 801c896:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801c898:	2301      	movs	r3, #1
 801c89a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801c89c:	79bb      	ldrb	r3, [r7, #6]
 801c89e:	2b01      	cmp	r3, #1
 801c8a0:	d10d      	bne.n	801c8be <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801c8a2:	79fb      	ldrb	r3, [r7, #7]
 801c8a4:	2b01      	cmp	r3, #1
 801c8a6:	d104      	bne.n	801c8b2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801c8a8:	2302      	movs	r3, #2
 801c8aa:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801c8ac:	2004      	movs	r0, #4
 801c8ae:	f000 f8df 	bl	801ca70 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801c8b2:	79fb      	ldrb	r3, [r7, #7]
 801c8b4:	2b02      	cmp	r3, #2
 801c8b6:	d107      	bne.n	801c8c8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801c8b8:	2303      	movs	r3, #3
 801c8ba:	73fb      	strb	r3, [r7, #15]
 801c8bc:	e004      	b.n	801c8c8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801c8be:	79bb      	ldrb	r3, [r7, #6]
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d101      	bne.n	801c8c8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801c8c4:	2301      	movs	r3, #1
 801c8c6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801c8c8:	7bfb      	ldrb	r3, [r7, #15]
 801c8ca:	4618      	mov	r0, r3
 801c8cc:	f7f1 f827 	bl	800d91e <RBI_ConfigRFSwitch>
}
 801c8d0:	bf00      	nop
 801c8d2:	3710      	adds	r7, #16
 801c8d4:	46bd      	mov	sp, r7
 801c8d6:	bd80      	pop	{r7, pc}

0801c8d8 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801c8d8:	b580      	push	{r7, lr}
 801c8da:	b084      	sub	sp, #16
 801c8dc:	af00      	add	r7, sp, #0
 801c8de:	4603      	mov	r3, r0
 801c8e0:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801c8e2:	2301      	movs	r3, #1
 801c8e4:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801c8e6:	f7f1 f828 	bl	800d93a <RBI_GetTxConfig>
 801c8ea:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801c8ec:	68bb      	ldr	r3, [r7, #8]
 801c8ee:	2b02      	cmp	r3, #2
 801c8f0:	d016      	beq.n	801c920 <SUBGRF_SetRfTxPower+0x48>
 801c8f2:	68bb      	ldr	r3, [r7, #8]
 801c8f4:	2b02      	cmp	r3, #2
 801c8f6:	dc16      	bgt.n	801c926 <SUBGRF_SetRfTxPower+0x4e>
 801c8f8:	68bb      	ldr	r3, [r7, #8]
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d003      	beq.n	801c906 <SUBGRF_SetRfTxPower+0x2e>
 801c8fe:	68bb      	ldr	r3, [r7, #8]
 801c900:	2b01      	cmp	r3, #1
 801c902:	d00a      	beq.n	801c91a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801c904:	e00f      	b.n	801c926 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801c906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c90a:	2b0f      	cmp	r3, #15
 801c90c:	dd02      	ble.n	801c914 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801c90e:	2302      	movs	r3, #2
 801c910:	73fb      	strb	r3, [r7, #15]
            break;
 801c912:	e009      	b.n	801c928 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801c914:	2301      	movs	r3, #1
 801c916:	73fb      	strb	r3, [r7, #15]
            break;
 801c918:	e006      	b.n	801c928 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801c91a:	2301      	movs	r3, #1
 801c91c:	73fb      	strb	r3, [r7, #15]
            break;
 801c91e:	e003      	b.n	801c928 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801c920:	2302      	movs	r3, #2
 801c922:	73fb      	strb	r3, [r7, #15]
            break;
 801c924:	e000      	b.n	801c928 <SUBGRF_SetRfTxPower+0x50>
            break;
 801c926:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801c928:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801c92c:	7bfb      	ldrb	r3, [r7, #15]
 801c92e:	2202      	movs	r2, #2
 801c930:	4618      	mov	r0, r3
 801c932:	f7ff fbcd 	bl	801c0d0 <SUBGRF_SetTxParams>

    return paSelect;
 801c936:	7bfb      	ldrb	r3, [r7, #15]
}
 801c938:	4618      	mov	r0, r3
 801c93a:	3710      	adds	r7, #16
 801c93c:	46bd      	mov	sp, r7
 801c93e:	bd80      	pop	{r7, pc}

0801c940 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801c940:	b480      	push	{r7}
 801c942:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801c944:	2301      	movs	r3, #1
}
 801c946:	4618      	mov	r0, r3
 801c948:	46bd      	mov	sp, r7
 801c94a:	bc80      	pop	{r7}
 801c94c:	4770      	bx	lr
	...

0801c950 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c950:	b580      	push	{r7, lr}
 801c952:	b082      	sub	sp, #8
 801c954:	af00      	add	r7, sp, #0
 801c956:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801c958:	4b03      	ldr	r3, [pc, #12]	; (801c968 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801c95a:	681b      	ldr	r3, [r3, #0]
 801c95c:	2001      	movs	r0, #1
 801c95e:	4798      	blx	r3
}
 801c960:	bf00      	nop
 801c962:	3708      	adds	r7, #8
 801c964:	46bd      	mov	sp, r7
 801c966:	bd80      	pop	{r7, pc}
 801c968:	20001f8c 	.word	0x20001f8c

0801c96c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c96c:	b580      	push	{r7, lr}
 801c96e:	b082      	sub	sp, #8
 801c970:	af00      	add	r7, sp, #0
 801c972:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801c974:	4b03      	ldr	r3, [pc, #12]	; (801c984 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801c976:	681b      	ldr	r3, [r3, #0]
 801c978:	2002      	movs	r0, #2
 801c97a:	4798      	blx	r3
}
 801c97c:	bf00      	nop
 801c97e:	3708      	adds	r7, #8
 801c980:	46bd      	mov	sp, r7
 801c982:	bd80      	pop	{r7, pc}
 801c984:	20001f8c 	.word	0x20001f8c

0801c988 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801c988:	b580      	push	{r7, lr}
 801c98a:	b082      	sub	sp, #8
 801c98c:	af00      	add	r7, sp, #0
 801c98e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801c990:	4b03      	ldr	r3, [pc, #12]	; (801c9a0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801c992:	681b      	ldr	r3, [r3, #0]
 801c994:	2040      	movs	r0, #64	; 0x40
 801c996:	4798      	blx	r3
}
 801c998:	bf00      	nop
 801c99a:	3708      	adds	r7, #8
 801c99c:	46bd      	mov	sp, r7
 801c99e:	bd80      	pop	{r7, pc}
 801c9a0:	20001f8c 	.word	0x20001f8c

0801c9a4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801c9a4:	b580      	push	{r7, lr}
 801c9a6:	b082      	sub	sp, #8
 801c9a8:	af00      	add	r7, sp, #0
 801c9aa:	6078      	str	r0, [r7, #4]
 801c9ac:	460b      	mov	r3, r1
 801c9ae:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801c9b0:	78fb      	ldrb	r3, [r7, #3]
 801c9b2:	2b00      	cmp	r3, #0
 801c9b4:	d002      	beq.n	801c9bc <HAL_SUBGHZ_CADStatusCallback+0x18>
 801c9b6:	2b01      	cmp	r3, #1
 801c9b8:	d005      	beq.n	801c9c6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801c9ba:	e00a      	b.n	801c9d2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801c9bc:	4b07      	ldr	r3, [pc, #28]	; (801c9dc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801c9be:	681b      	ldr	r3, [r3, #0]
 801c9c0:	2080      	movs	r0, #128	; 0x80
 801c9c2:	4798      	blx	r3
            break;
 801c9c4:	e005      	b.n	801c9d2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801c9c6:	4b05      	ldr	r3, [pc, #20]	; (801c9dc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801c9c8:	681b      	ldr	r3, [r3, #0]
 801c9ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 801c9ce:	4798      	blx	r3
            break;
 801c9d0:	bf00      	nop
    }
}
 801c9d2:	bf00      	nop
 801c9d4:	3708      	adds	r7, #8
 801c9d6:	46bd      	mov	sp, r7
 801c9d8:	bd80      	pop	{r7, pc}
 801c9da:	bf00      	nop
 801c9dc:	20001f8c 	.word	0x20001f8c

0801c9e0 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c9e0:	b580      	push	{r7, lr}
 801c9e2:	b082      	sub	sp, #8
 801c9e4:	af00      	add	r7, sp, #0
 801c9e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801c9e8:	4b04      	ldr	r3, [pc, #16]	; (801c9fc <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 801c9f0:	4798      	blx	r3
}
 801c9f2:	bf00      	nop
 801c9f4:	3708      	adds	r7, #8
 801c9f6:	46bd      	mov	sp, r7
 801c9f8:	bd80      	pop	{r7, pc}
 801c9fa:	bf00      	nop
 801c9fc:	20001f8c 	.word	0x20001f8c

0801ca00 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ca00:	b580      	push	{r7, lr}
 801ca02:	b082      	sub	sp, #8
 801ca04:	af00      	add	r7, sp, #0
 801ca06:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801ca08:	4b03      	ldr	r3, [pc, #12]	; (801ca18 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801ca0a:	681b      	ldr	r3, [r3, #0]
 801ca0c:	2020      	movs	r0, #32
 801ca0e:	4798      	blx	r3
}
 801ca10:	bf00      	nop
 801ca12:	3708      	adds	r7, #8
 801ca14:	46bd      	mov	sp, r7
 801ca16:	bd80      	pop	{r7, pc}
 801ca18:	20001f8c 	.word	0x20001f8c

0801ca1c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ca1c:	b580      	push	{r7, lr}
 801ca1e:	b082      	sub	sp, #8
 801ca20:	af00      	add	r7, sp, #0
 801ca22:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801ca24:	4b03      	ldr	r3, [pc, #12]	; (801ca34 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801ca26:	681b      	ldr	r3, [r3, #0]
 801ca28:	2004      	movs	r0, #4
 801ca2a:	4798      	blx	r3
}
 801ca2c:	bf00      	nop
 801ca2e:	3708      	adds	r7, #8
 801ca30:	46bd      	mov	sp, r7
 801ca32:	bd80      	pop	{r7, pc}
 801ca34:	20001f8c 	.word	0x20001f8c

0801ca38 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ca38:	b580      	push	{r7, lr}
 801ca3a:	b082      	sub	sp, #8
 801ca3c:	af00      	add	r7, sp, #0
 801ca3e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801ca40:	4b03      	ldr	r3, [pc, #12]	; (801ca50 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801ca42:	681b      	ldr	r3, [r3, #0]
 801ca44:	2008      	movs	r0, #8
 801ca46:	4798      	blx	r3
}
 801ca48:	bf00      	nop
 801ca4a:	3708      	adds	r7, #8
 801ca4c:	46bd      	mov	sp, r7
 801ca4e:	bd80      	pop	{r7, pc}
 801ca50:	20001f8c 	.word	0x20001f8c

0801ca54 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ca54:	b580      	push	{r7, lr}
 801ca56:	b082      	sub	sp, #8
 801ca58:	af00      	add	r7, sp, #0
 801ca5a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801ca5c:	4b03      	ldr	r3, [pc, #12]	; (801ca6c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801ca5e:	681b      	ldr	r3, [r3, #0]
 801ca60:	2010      	movs	r0, #16
 801ca62:	4798      	blx	r3
}
 801ca64:	bf00      	nop
 801ca66:	3708      	adds	r7, #8
 801ca68:	46bd      	mov	sp, r7
 801ca6a:	bd80      	pop	{r7, pc}
 801ca6c:	20001f8c 	.word	0x20001f8c

0801ca70 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801ca70:	b580      	push	{r7, lr}
 801ca72:	b084      	sub	sp, #16
 801ca74:	af00      	add	r7, sp, #0
 801ca76:	4603      	mov	r3, r0
 801ca78:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801ca7a:	f7f0 ff6c 	bl	800d956 <RBI_IsDCDC>
 801ca7e:	4603      	mov	r3, r0
 801ca80:	2b01      	cmp	r3, #1
 801ca82:	d112      	bne.n	801caaa <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801ca84:	f640 1023 	movw	r0, #2339	; 0x923
 801ca88:	f7ff fe1e 	bl	801c6c8 <SUBGRF_ReadRegister>
 801ca8c:	4603      	mov	r3, r0
 801ca8e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801ca90:	7bfb      	ldrb	r3, [r7, #15]
 801ca92:	f023 0306 	bic.w	r3, r3, #6
 801ca96:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801ca98:	7bfa      	ldrb	r2, [r7, #15]
 801ca9a:	79fb      	ldrb	r3, [r7, #7]
 801ca9c:	4313      	orrs	r3, r2
 801ca9e:	b2db      	uxtb	r3, r3
 801caa0:	4619      	mov	r1, r3
 801caa2:	f640 1023 	movw	r0, #2339	; 0x923
 801caa6:	f7ff fdfb 	bl	801c6a0 <SUBGRF_WriteRegister>
  }
}
 801caaa:	bf00      	nop
 801caac:	3710      	adds	r7, #16
 801caae:	46bd      	mov	sp, r7
 801cab0:	bd80      	pop	{r7, pc}
	...

0801cab4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801cab4:	b480      	push	{r7}
 801cab6:	b085      	sub	sp, #20
 801cab8:	af00      	add	r7, sp, #0
 801caba:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	d101      	bne.n	801cac6 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801cac2:	231f      	movs	r3, #31
 801cac4:	e016      	b.n	801caf4 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801cac6:	2300      	movs	r3, #0
 801cac8:	73fb      	strb	r3, [r7, #15]
 801caca:	e00f      	b.n	801caec <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801cacc:	7bfb      	ldrb	r3, [r7, #15]
 801cace:	4a0c      	ldr	r2, [pc, #48]	; (801cb00 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801cad0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801cad4:	687a      	ldr	r2, [r7, #4]
 801cad6:	429a      	cmp	r2, r3
 801cad8:	d205      	bcs.n	801cae6 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801cada:	7bfb      	ldrb	r3, [r7, #15]
 801cadc:	4a08      	ldr	r2, [pc, #32]	; (801cb00 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801cade:	00db      	lsls	r3, r3, #3
 801cae0:	4413      	add	r3, r2
 801cae2:	791b      	ldrb	r3, [r3, #4]
 801cae4:	e006      	b.n	801caf4 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801cae6:	7bfb      	ldrb	r3, [r7, #15]
 801cae8:	3301      	adds	r3, #1
 801caea:	73fb      	strb	r3, [r7, #15]
 801caec:	7bfb      	ldrb	r3, [r7, #15]
 801caee:	2b15      	cmp	r3, #21
 801caf0:	d9ec      	bls.n	801cacc <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801caf2:	e7fe      	b.n	801caf2 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801caf4:	4618      	mov	r0, r3
 801caf6:	3714      	adds	r7, #20
 801caf8:	46bd      	mov	sp, r7
 801cafa:	bc80      	pop	{r7}
 801cafc:	4770      	bx	lr
 801cafe:	bf00      	nop
 801cb00:	0801f3fc 	.word	0x0801f3fc

0801cb04 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801cb04:	b580      	push	{r7, lr}
 801cb06:	b08a      	sub	sp, #40	; 0x28
 801cb08:	af00      	add	r7, sp, #0
 801cb0a:	6078      	str	r0, [r7, #4]
 801cb0c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801cb0e:	4b35      	ldr	r3, [pc, #212]	; (801cbe4 <SUBGRF_GetCFO+0xe0>)
 801cb10:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801cb12:	f640 0007 	movw	r0, #2055	; 0x807
 801cb16:	f7ff fdd7 	bl	801c6c8 <SUBGRF_ReadRegister>
 801cb1a:	4603      	mov	r3, r0
 801cb1c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801cb1e:	7ffb      	ldrb	r3, [r7, #31]
 801cb20:	08db      	lsrs	r3, r3, #3
 801cb22:	b2db      	uxtb	r3, r3
 801cb24:	f003 0303 	and.w	r3, r3, #3
 801cb28:	3328      	adds	r3, #40	; 0x28
 801cb2a:	443b      	add	r3, r7
 801cb2c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801cb30:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801cb32:	7ffb      	ldrb	r3, [r7, #31]
 801cb34:	f003 0307 	and.w	r3, r3, #7
 801cb38:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801cb3a:	7fba      	ldrb	r2, [r7, #30]
 801cb3c:	7f7b      	ldrb	r3, [r7, #29]
 801cb3e:	3b01      	subs	r3, #1
 801cb40:	fa02 f303 	lsl.w	r3, r2, r3
 801cb44:	461a      	mov	r2, r3
 801cb46:	4b28      	ldr	r3, [pc, #160]	; (801cbe8 <SUBGRF_GetCFO+0xe4>)
 801cb48:	fbb3 f3f2 	udiv	r3, r3, r2
 801cb4c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801cb4e:	69ba      	ldr	r2, [r7, #24]
 801cb50:	687b      	ldr	r3, [r7, #4]
 801cb52:	fbb2 f3f3 	udiv	r3, r2, r3
 801cb56:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801cb58:	2301      	movs	r3, #1
 801cb5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801cb5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cb62:	697a      	ldr	r2, [r7, #20]
 801cb64:	fb02 f303 	mul.w	r3, r2, r3
 801cb68:	2b07      	cmp	r3, #7
 801cb6a:	d802      	bhi.n	801cb72 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801cb6c:	2302      	movs	r3, #2
 801cb6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801cb72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cb76:	697a      	ldr	r2, [r7, #20]
 801cb78:	fb02 f303 	mul.w	r3, r2, r3
 801cb7c:	2b03      	cmp	r3, #3
 801cb7e:	d802      	bhi.n	801cb86 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801cb80:	2304      	movs	r3, #4
 801cb82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801cb86:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801cb8a:	69bb      	ldr	r3, [r7, #24]
 801cb8c:	fb02 f303 	mul.w	r3, r2, r3
 801cb90:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801cb92:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801cb96:	f7ff fd97 	bl	801c6c8 <SUBGRF_ReadRegister>
 801cb9a:	4603      	mov	r3, r0
 801cb9c:	021b      	lsls	r3, r3, #8
 801cb9e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801cba2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801cba4:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801cba8:	f7ff fd8e 	bl	801c6c8 <SUBGRF_ReadRegister>
 801cbac:	4603      	mov	r3, r0
 801cbae:	461a      	mov	r2, r3
 801cbb0:	6a3b      	ldr	r3, [r7, #32]
 801cbb2:	4313      	orrs	r3, r2
 801cbb4:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801cbb6:	6a3b      	ldr	r3, [r7, #32]
 801cbb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	d005      	beq.n	801cbcc <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801cbc0:	6a3b      	ldr	r3, [r7, #32]
 801cbc2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801cbc6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801cbca:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801cbcc:	693b      	ldr	r3, [r7, #16]
 801cbce:	095b      	lsrs	r3, r3, #5
 801cbd0:	6a3a      	ldr	r2, [r7, #32]
 801cbd2:	fb02 f303 	mul.w	r3, r2, r3
 801cbd6:	11da      	asrs	r2, r3, #7
 801cbd8:	683b      	ldr	r3, [r7, #0]
 801cbda:	601a      	str	r2, [r3, #0]
}
 801cbdc:	bf00      	nop
 801cbde:	3728      	adds	r7, #40	; 0x28
 801cbe0:	46bd      	mov	sp, r7
 801cbe2:	bd80      	pop	{r7, pc}
 801cbe4:	0c0a0804 	.word	0x0c0a0804
 801cbe8:	01e84800 	.word	0x01e84800

0801cbec <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801cbec:	b480      	push	{r7}
 801cbee:	b087      	sub	sp, #28
 801cbf0:	af00      	add	r7, sp, #0
 801cbf2:	4603      	mov	r3, r0
 801cbf4:	60b9      	str	r1, [r7, #8]
 801cbf6:	607a      	str	r2, [r7, #4]
 801cbf8:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801cbfa:	2300      	movs	r3, #0
 801cbfc:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801cbfe:	f04f 33ff 	mov.w	r3, #4294967295
 801cc02:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801cc04:	697b      	ldr	r3, [r7, #20]
}
 801cc06:	4618      	mov	r0, r3
 801cc08:	371c      	adds	r7, #28
 801cc0a:	46bd      	mov	sp, r7
 801cc0c:	bc80      	pop	{r7}
 801cc0e:	4770      	bx	lr

0801cc10 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801cc10:	b480      	push	{r7}
 801cc12:	b087      	sub	sp, #28
 801cc14:	af00      	add	r7, sp, #0
 801cc16:	4603      	mov	r3, r0
 801cc18:	60b9      	str	r1, [r7, #8]
 801cc1a:	607a      	str	r2, [r7, #4]
 801cc1c:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801cc1e:	2300      	movs	r3, #0
 801cc20:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801cc22:	f04f 33ff 	mov.w	r3, #4294967295
 801cc26:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801cc28:	697b      	ldr	r3, [r7, #20]
}
 801cc2a:	4618      	mov	r0, r3
 801cc2c:	371c      	adds	r7, #28
 801cc2e:	46bd      	mov	sp, r7
 801cc30:	bc80      	pop	{r7}
 801cc32:	4770      	bx	lr

0801cc34 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801cc34:	b480      	push	{r7}
 801cc36:	b085      	sub	sp, #20
 801cc38:	af00      	add	r7, sp, #0
 801cc3a:	60f8      	str	r0, [r7, #12]
 801cc3c:	60b9      	str	r1, [r7, #8]
 801cc3e:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801cc40:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801cc44:	4618      	mov	r0, r3
 801cc46:	3714      	adds	r7, #20
 801cc48:	46bd      	mov	sp, r7
 801cc4a:	bc80      	pop	{r7}
 801cc4c:	4770      	bx	lr

0801cc4e <RFW_DeInit>:

void RFW_DeInit( void)
{
 801cc4e:	b480      	push	{r7}
 801cc50:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801cc52:	bf00      	nop
 801cc54:	46bd      	mov	sp, r7
 801cc56:	bc80      	pop	{r7}
 801cc58:	4770      	bx	lr

0801cc5a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801cc5a:	b480      	push	{r7}
 801cc5c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801cc5e:	2300      	movs	r3, #0
#endif
}
 801cc60:	4618      	mov	r0, r3
 801cc62:	46bd      	mov	sp, r7
 801cc64:	bc80      	pop	{r7}
 801cc66:	4770      	bx	lr

0801cc68 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801cc68:	b480      	push	{r7}
 801cc6a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801cc6c:	2300      	movs	r3, #0
#endif
}
 801cc6e:	4618      	mov	r0, r3
 801cc70:	46bd      	mov	sp, r7
 801cc72:	bc80      	pop	{r7}
 801cc74:	4770      	bx	lr

0801cc76 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801cc76:	b480      	push	{r7}
 801cc78:	b083      	sub	sp, #12
 801cc7a:	af00      	add	r7, sp, #0
 801cc7c:	4603      	mov	r3, r0
 801cc7e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801cc80:	bf00      	nop
 801cc82:	370c      	adds	r7, #12
 801cc84:	46bd      	mov	sp, r7
 801cc86:	bc80      	pop	{r7}
 801cc88:	4770      	bx	lr

0801cc8a <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801cc8a:	b480      	push	{r7}
 801cc8c:	b087      	sub	sp, #28
 801cc8e:	af00      	add	r7, sp, #0
 801cc90:	60f8      	str	r0, [r7, #12]
 801cc92:	460b      	mov	r3, r1
 801cc94:	607a      	str	r2, [r7, #4]
 801cc96:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801cc98:	f04f 33ff 	mov.w	r3, #4294967295
 801cc9c:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801cc9e:	697b      	ldr	r3, [r7, #20]
}
 801cca0:	4618      	mov	r0, r3
 801cca2:	371c      	adds	r7, #28
 801cca4:	46bd      	mov	sp, r7
 801cca6:	bc80      	pop	{r7}
 801cca8:	4770      	bx	lr

0801ccaa <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801ccaa:	b480      	push	{r7}
 801ccac:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801ccae:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801ccb2:	4618      	mov	r0, r3
 801ccb4:	46bd      	mov	sp, r7
 801ccb6:	bc80      	pop	{r7}
 801ccb8:	4770      	bx	lr

0801ccba <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801ccba:	b480      	push	{r7}
 801ccbc:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801ccbe:	bf00      	nop
 801ccc0:	46bd      	mov	sp, r7
 801ccc2:	bc80      	pop	{r7}
 801ccc4:	4770      	bx	lr

0801ccc6 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801ccc6:	b480      	push	{r7}
 801ccc8:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801ccca:	bf00      	nop
 801cccc:	46bd      	mov	sp, r7
 801ccce:	bc80      	pop	{r7}
 801ccd0:	4770      	bx	lr

0801ccd2 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801ccd2:	b480      	push	{r7}
 801ccd4:	b083      	sub	sp, #12
 801ccd6:	af00      	add	r7, sp, #0
 801ccd8:	4603      	mov	r3, r0
 801ccda:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801ccdc:	bf00      	nop
 801ccde:	370c      	adds	r7, #12
 801cce0:	46bd      	mov	sp, r7
 801cce2:	bc80      	pop	{r7}
 801cce4:	4770      	bx	lr
	...

0801cce8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801cce8:	b480      	push	{r7}
 801ccea:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801ccec:	4b04      	ldr	r3, [pc, #16]	; (801cd00 <UTIL_LPM_Init+0x18>)
 801ccee:	2200      	movs	r2, #0
 801ccf0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801ccf2:	4b04      	ldr	r3, [pc, #16]	; (801cd04 <UTIL_LPM_Init+0x1c>)
 801ccf4:	2200      	movs	r2, #0
 801ccf6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801ccf8:	bf00      	nop
 801ccfa:	46bd      	mov	sp, r7
 801ccfc:	bc80      	pop	{r7}
 801ccfe:	4770      	bx	lr
 801cd00:	20001f90 	.word	0x20001f90
 801cd04:	20001f94 	.word	0x20001f94

0801cd08 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801cd08:	b480      	push	{r7}
 801cd0a:	b087      	sub	sp, #28
 801cd0c:	af00      	add	r7, sp, #0
 801cd0e:	6078      	str	r0, [r7, #4]
 801cd10:	460b      	mov	r3, r1
 801cd12:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd14:	f3ef 8310 	mrs	r3, PRIMASK
 801cd18:	613b      	str	r3, [r7, #16]
  return(result);
 801cd1a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801cd1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd1e:	b672      	cpsid	i
}
 801cd20:	bf00      	nop
  
  switch( state )
 801cd22:	78fb      	ldrb	r3, [r7, #3]
 801cd24:	2b00      	cmp	r3, #0
 801cd26:	d008      	beq.n	801cd3a <UTIL_LPM_SetStopMode+0x32>
 801cd28:	2b01      	cmp	r3, #1
 801cd2a:	d10e      	bne.n	801cd4a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801cd2c:	4b0d      	ldr	r3, [pc, #52]	; (801cd64 <UTIL_LPM_SetStopMode+0x5c>)
 801cd2e:	681a      	ldr	r2, [r3, #0]
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	4313      	orrs	r3, r2
 801cd34:	4a0b      	ldr	r2, [pc, #44]	; (801cd64 <UTIL_LPM_SetStopMode+0x5c>)
 801cd36:	6013      	str	r3, [r2, #0]
      break;
 801cd38:	e008      	b.n	801cd4c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	43da      	mvns	r2, r3
 801cd3e:	4b09      	ldr	r3, [pc, #36]	; (801cd64 <UTIL_LPM_SetStopMode+0x5c>)
 801cd40:	681b      	ldr	r3, [r3, #0]
 801cd42:	4013      	ands	r3, r2
 801cd44:	4a07      	ldr	r2, [pc, #28]	; (801cd64 <UTIL_LPM_SetStopMode+0x5c>)
 801cd46:	6013      	str	r3, [r2, #0]
      break;
 801cd48:	e000      	b.n	801cd4c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801cd4a:	bf00      	nop
 801cd4c:	697b      	ldr	r3, [r7, #20]
 801cd4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd50:	68fb      	ldr	r3, [r7, #12]
 801cd52:	f383 8810 	msr	PRIMASK, r3
}
 801cd56:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801cd58:	bf00      	nop
 801cd5a:	371c      	adds	r7, #28
 801cd5c:	46bd      	mov	sp, r7
 801cd5e:	bc80      	pop	{r7}
 801cd60:	4770      	bx	lr
 801cd62:	bf00      	nop
 801cd64:	20001f90 	.word	0x20001f90

0801cd68 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801cd68:	b480      	push	{r7}
 801cd6a:	b087      	sub	sp, #28
 801cd6c:	af00      	add	r7, sp, #0
 801cd6e:	6078      	str	r0, [r7, #4]
 801cd70:	460b      	mov	r3, r1
 801cd72:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd74:	f3ef 8310 	mrs	r3, PRIMASK
 801cd78:	613b      	str	r3, [r7, #16]
  return(result);
 801cd7a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801cd7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd7e:	b672      	cpsid	i
}
 801cd80:	bf00      	nop
  
  switch(state)
 801cd82:	78fb      	ldrb	r3, [r7, #3]
 801cd84:	2b00      	cmp	r3, #0
 801cd86:	d008      	beq.n	801cd9a <UTIL_LPM_SetOffMode+0x32>
 801cd88:	2b01      	cmp	r3, #1
 801cd8a:	d10e      	bne.n	801cdaa <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801cd8c:	4b0d      	ldr	r3, [pc, #52]	; (801cdc4 <UTIL_LPM_SetOffMode+0x5c>)
 801cd8e:	681a      	ldr	r2, [r3, #0]
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	4313      	orrs	r3, r2
 801cd94:	4a0b      	ldr	r2, [pc, #44]	; (801cdc4 <UTIL_LPM_SetOffMode+0x5c>)
 801cd96:	6013      	str	r3, [r2, #0]
      break;
 801cd98:	e008      	b.n	801cdac <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	43da      	mvns	r2, r3
 801cd9e:	4b09      	ldr	r3, [pc, #36]	; (801cdc4 <UTIL_LPM_SetOffMode+0x5c>)
 801cda0:	681b      	ldr	r3, [r3, #0]
 801cda2:	4013      	ands	r3, r2
 801cda4:	4a07      	ldr	r2, [pc, #28]	; (801cdc4 <UTIL_LPM_SetOffMode+0x5c>)
 801cda6:	6013      	str	r3, [r2, #0]
      break;
 801cda8:	e000      	b.n	801cdac <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801cdaa:	bf00      	nop
 801cdac:	697b      	ldr	r3, [r7, #20]
 801cdae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdb0:	68fb      	ldr	r3, [r7, #12]
 801cdb2:	f383 8810 	msr	PRIMASK, r3
}
 801cdb6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801cdb8:	bf00      	nop
 801cdba:	371c      	adds	r7, #28
 801cdbc:	46bd      	mov	sp, r7
 801cdbe:	bc80      	pop	{r7}
 801cdc0:	4770      	bx	lr
 801cdc2:	bf00      	nop
 801cdc4:	20001f94 	.word	0x20001f94

0801cdc8 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801cdc8:	b580      	push	{r7, lr}
 801cdca:	b084      	sub	sp, #16
 801cdcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdce:	f3ef 8310 	mrs	r3, PRIMASK
 801cdd2:	60bb      	str	r3, [r7, #8]
  return(result);
 801cdd4:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801cdd6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801cdd8:	b672      	cpsid	i
}
 801cdda:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801cddc:	4b12      	ldr	r3, [pc, #72]	; (801ce28 <UTIL_LPM_EnterLowPower+0x60>)
 801cdde:	681b      	ldr	r3, [r3, #0]
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	d006      	beq.n	801cdf2 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801cde4:	4b11      	ldr	r3, [pc, #68]	; (801ce2c <UTIL_LPM_EnterLowPower+0x64>)
 801cde6:	681b      	ldr	r3, [r3, #0]
 801cde8:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801cdea:	4b10      	ldr	r3, [pc, #64]	; (801ce2c <UTIL_LPM_EnterLowPower+0x64>)
 801cdec:	685b      	ldr	r3, [r3, #4]
 801cdee:	4798      	blx	r3
 801cdf0:	e010      	b.n	801ce14 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801cdf2:	4b0f      	ldr	r3, [pc, #60]	; (801ce30 <UTIL_LPM_EnterLowPower+0x68>)
 801cdf4:	681b      	ldr	r3, [r3, #0]
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	d006      	beq.n	801ce08 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801cdfa:	4b0c      	ldr	r3, [pc, #48]	; (801ce2c <UTIL_LPM_EnterLowPower+0x64>)
 801cdfc:	689b      	ldr	r3, [r3, #8]
 801cdfe:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801ce00:	4b0a      	ldr	r3, [pc, #40]	; (801ce2c <UTIL_LPM_EnterLowPower+0x64>)
 801ce02:	68db      	ldr	r3, [r3, #12]
 801ce04:	4798      	blx	r3
 801ce06:	e005      	b.n	801ce14 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801ce08:	4b08      	ldr	r3, [pc, #32]	; (801ce2c <UTIL_LPM_EnterLowPower+0x64>)
 801ce0a:	691b      	ldr	r3, [r3, #16]
 801ce0c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801ce0e:	4b07      	ldr	r3, [pc, #28]	; (801ce2c <UTIL_LPM_EnterLowPower+0x64>)
 801ce10:	695b      	ldr	r3, [r3, #20]
 801ce12:	4798      	blx	r3
 801ce14:	68fb      	ldr	r3, [r7, #12]
 801ce16:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	f383 8810 	msr	PRIMASK, r3
}
 801ce1e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801ce20:	bf00      	nop
 801ce22:	3710      	adds	r7, #16
 801ce24:	46bd      	mov	sp, r7
 801ce26:	bd80      	pop	{r7, pc}
 801ce28:	20001f90 	.word	0x20001f90
 801ce2c:	0801eefc 	.word	0x0801eefc
 801ce30:	20001f94 	.word	0x20001f94

0801ce34 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801ce34:	b480      	push	{r7}
 801ce36:	b087      	sub	sp, #28
 801ce38:	af00      	add	r7, sp, #0
 801ce3a:	60f8      	str	r0, [r7, #12]
 801ce3c:	60b9      	str	r1, [r7, #8]
 801ce3e:	4613      	mov	r3, r2
 801ce40:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801ce42:	68fb      	ldr	r3, [r7, #12]
 801ce44:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801ce46:	68bb      	ldr	r3, [r7, #8]
 801ce48:	613b      	str	r3, [r7, #16]

  while( size-- )
 801ce4a:	e007      	b.n	801ce5c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801ce4c:	693a      	ldr	r2, [r7, #16]
 801ce4e:	1c53      	adds	r3, r2, #1
 801ce50:	613b      	str	r3, [r7, #16]
 801ce52:	697b      	ldr	r3, [r7, #20]
 801ce54:	1c59      	adds	r1, r3, #1
 801ce56:	6179      	str	r1, [r7, #20]
 801ce58:	7812      	ldrb	r2, [r2, #0]
 801ce5a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801ce5c:	88fb      	ldrh	r3, [r7, #6]
 801ce5e:	1e5a      	subs	r2, r3, #1
 801ce60:	80fa      	strh	r2, [r7, #6]
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	d1f2      	bne.n	801ce4c <UTIL_MEM_cpy_8+0x18>
    }
}
 801ce66:	bf00      	nop
 801ce68:	bf00      	nop
 801ce6a:	371c      	adds	r7, #28
 801ce6c:	46bd      	mov	sp, r7
 801ce6e:	bc80      	pop	{r7}
 801ce70:	4770      	bx	lr

0801ce72 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801ce72:	b480      	push	{r7}
 801ce74:	b085      	sub	sp, #20
 801ce76:	af00      	add	r7, sp, #0
 801ce78:	6078      	str	r0, [r7, #4]
 801ce7a:	460b      	mov	r3, r1
 801ce7c:	70fb      	strb	r3, [r7, #3]
 801ce7e:	4613      	mov	r3, r2
 801ce80:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801ce86:	e004      	b.n	801ce92 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801ce88:	68fb      	ldr	r3, [r7, #12]
 801ce8a:	1c5a      	adds	r2, r3, #1
 801ce8c:	60fa      	str	r2, [r7, #12]
 801ce8e:	78fa      	ldrb	r2, [r7, #3]
 801ce90:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801ce92:	883b      	ldrh	r3, [r7, #0]
 801ce94:	1e5a      	subs	r2, r3, #1
 801ce96:	803a      	strh	r2, [r7, #0]
 801ce98:	2b00      	cmp	r3, #0
 801ce9a:	d1f5      	bne.n	801ce88 <UTIL_MEM_set_8+0x16>
  }
}
 801ce9c:	bf00      	nop
 801ce9e:	bf00      	nop
 801cea0:	3714      	adds	r7, #20
 801cea2:	46bd      	mov	sp, r7
 801cea4:	bc80      	pop	{r7}
 801cea6:	4770      	bx	lr

0801cea8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801cea8:	b082      	sub	sp, #8
 801ceaa:	b480      	push	{r7}
 801ceac:	b087      	sub	sp, #28
 801ceae:	af00      	add	r7, sp, #0
 801ceb0:	60f8      	str	r0, [r7, #12]
 801ceb2:	1d38      	adds	r0, r7, #4
 801ceb4:	e880 0006 	stmia.w	r0, {r1, r2}
 801ceb8:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801ceba:	2300      	movs	r3, #0
 801cebc:	613b      	str	r3, [r7, #16]
 801cebe:	2300      	movs	r3, #0
 801cec0:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801cec2:	687a      	ldr	r2, [r7, #4]
 801cec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cec6:	4413      	add	r3, r2
 801cec8:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801ceca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801cece:	b29a      	uxth	r2, r3
 801ced0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801ced4:	b29b      	uxth	r3, r3
 801ced6:	4413      	add	r3, r2
 801ced8:	b29b      	uxth	r3, r3
 801ceda:	b21b      	sxth	r3, r3
 801cedc:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801cede:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801cee6:	db0a      	blt.n	801cefe <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801cee8:	693b      	ldr	r3, [r7, #16]
 801ceea:	3301      	adds	r3, #1
 801ceec:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801ceee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cef2:	b29b      	uxth	r3, r3
 801cef4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801cef8:	b29b      	uxth	r3, r3
 801cefa:	b21b      	sxth	r3, r3
 801cefc:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801cefe:	68fb      	ldr	r3, [r7, #12]
 801cf00:	461a      	mov	r2, r3
 801cf02:	f107 0310 	add.w	r3, r7, #16
 801cf06:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cf0a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801cf0e:	68f8      	ldr	r0, [r7, #12]
 801cf10:	371c      	adds	r7, #28
 801cf12:	46bd      	mov	sp, r7
 801cf14:	bc80      	pop	{r7}
 801cf16:	b002      	add	sp, #8
 801cf18:	4770      	bx	lr

0801cf1a <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801cf1a:	b082      	sub	sp, #8
 801cf1c:	b480      	push	{r7}
 801cf1e:	b087      	sub	sp, #28
 801cf20:	af00      	add	r7, sp, #0
 801cf22:	60f8      	str	r0, [r7, #12]
 801cf24:	1d38      	adds	r0, r7, #4
 801cf26:	e880 0006 	stmia.w	r0, {r1, r2}
 801cf2a:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801cf2c:	2300      	movs	r3, #0
 801cf2e:	613b      	str	r3, [r7, #16]
 801cf30:	2300      	movs	r3, #0
 801cf32:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801cf34:	687a      	ldr	r2, [r7, #4]
 801cf36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf38:	1ad3      	subs	r3, r2, r3
 801cf3a:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801cf3c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801cf40:	b29a      	uxth	r2, r3
 801cf42:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801cf46:	b29b      	uxth	r3, r3
 801cf48:	1ad3      	subs	r3, r2, r3
 801cf4a:	b29b      	uxth	r3, r3
 801cf4c:	b21b      	sxth	r3, r3
 801cf4e:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801cf50:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cf54:	2b00      	cmp	r3, #0
 801cf56:	da0a      	bge.n	801cf6e <SysTimeSub+0x54>
  {
    c.Seconds--;
 801cf58:	693b      	ldr	r3, [r7, #16]
 801cf5a:	3b01      	subs	r3, #1
 801cf5c:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801cf5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cf62:	b29b      	uxth	r3, r3
 801cf64:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801cf68:	b29b      	uxth	r3, r3
 801cf6a:	b21b      	sxth	r3, r3
 801cf6c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801cf6e:	68fb      	ldr	r3, [r7, #12]
 801cf70:	461a      	mov	r2, r3
 801cf72:	f107 0310 	add.w	r3, r7, #16
 801cf76:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cf7a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801cf7e:	68f8      	ldr	r0, [r7, #12]
 801cf80:	371c      	adds	r7, #28
 801cf82:	46bd      	mov	sp, r7
 801cf84:	bc80      	pop	{r7}
 801cf86:	b002      	add	sp, #8
 801cf88:	4770      	bx	lr
	...

0801cf8c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801cf8c:	b580      	push	{r7, lr}
 801cf8e:	b088      	sub	sp, #32
 801cf90:	af02      	add	r7, sp, #8
 801cf92:	463b      	mov	r3, r7
 801cf94:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cf98:	2300      	movs	r3, #0
 801cf9a:	60bb      	str	r3, [r7, #8]
 801cf9c:	2300      	movs	r3, #0
 801cf9e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801cfa0:	4b10      	ldr	r3, [pc, #64]	; (801cfe4 <SysTimeSet+0x58>)
 801cfa2:	691b      	ldr	r3, [r3, #16]
 801cfa4:	f107 0208 	add.w	r2, r7, #8
 801cfa8:	3204      	adds	r2, #4
 801cfaa:	4610      	mov	r0, r2
 801cfac:	4798      	blx	r3
 801cfae:	4603      	mov	r3, r0
 801cfb0:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801cfb2:	f107 0010 	add.w	r0, r7, #16
 801cfb6:	68fb      	ldr	r3, [r7, #12]
 801cfb8:	9300      	str	r3, [sp, #0]
 801cfba:	68bb      	ldr	r3, [r7, #8]
 801cfbc:	463a      	mov	r2, r7
 801cfbe:	ca06      	ldmia	r2, {r1, r2}
 801cfc0:	f7ff ffab 	bl	801cf1a <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801cfc4:	4b07      	ldr	r3, [pc, #28]	; (801cfe4 <SysTimeSet+0x58>)
 801cfc6:	681b      	ldr	r3, [r3, #0]
 801cfc8:	693a      	ldr	r2, [r7, #16]
 801cfca:	4610      	mov	r0, r2
 801cfcc:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801cfce:	4b05      	ldr	r3, [pc, #20]	; (801cfe4 <SysTimeSet+0x58>)
 801cfd0:	689b      	ldr	r3, [r3, #8]
 801cfd2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801cfd6:	4610      	mov	r0, r2
 801cfd8:	4798      	blx	r3
}
 801cfda:	bf00      	nop
 801cfdc:	3718      	adds	r7, #24
 801cfde:	46bd      	mov	sp, r7
 801cfe0:	bd80      	pop	{r7, pc}
 801cfe2:	bf00      	nop
 801cfe4:	0801efe0 	.word	0x0801efe0

0801cfe8 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801cfe8:	b580      	push	{r7, lr}
 801cfea:	b08a      	sub	sp, #40	; 0x28
 801cfec:	af02      	add	r7, sp, #8
 801cfee:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cff0:	2300      	movs	r3, #0
 801cff2:	61bb      	str	r3, [r7, #24]
 801cff4:	2300      	movs	r3, #0
 801cff6:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801cff8:	2300      	movs	r3, #0
 801cffa:	613b      	str	r3, [r7, #16]
 801cffc:	2300      	movs	r3, #0
 801cffe:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d000:	4b14      	ldr	r3, [pc, #80]	; (801d054 <SysTimeGet+0x6c>)
 801d002:	691b      	ldr	r3, [r3, #16]
 801d004:	f107 0218 	add.w	r2, r7, #24
 801d008:	3204      	adds	r2, #4
 801d00a:	4610      	mov	r0, r2
 801d00c:	4798      	blx	r3
 801d00e:	4603      	mov	r3, r0
 801d010:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d012:	4b10      	ldr	r3, [pc, #64]	; (801d054 <SysTimeGet+0x6c>)
 801d014:	68db      	ldr	r3, [r3, #12]
 801d016:	4798      	blx	r3
 801d018:	4603      	mov	r3, r0
 801d01a:	b21b      	sxth	r3, r3
 801d01c:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d01e:	4b0d      	ldr	r3, [pc, #52]	; (801d054 <SysTimeGet+0x6c>)
 801d020:	685b      	ldr	r3, [r3, #4]
 801d022:	4798      	blx	r3
 801d024:	4603      	mov	r3, r0
 801d026:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801d028:	f107 0010 	add.w	r0, r7, #16
 801d02c:	69fb      	ldr	r3, [r7, #28]
 801d02e:	9300      	str	r3, [sp, #0]
 801d030:	69bb      	ldr	r3, [r7, #24]
 801d032:	f107 0208 	add.w	r2, r7, #8
 801d036:	ca06      	ldmia	r2, {r1, r2}
 801d038:	f7ff ff36 	bl	801cea8 <SysTimeAdd>

  return sysTime;
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	461a      	mov	r2, r3
 801d040:	f107 0310 	add.w	r3, r7, #16
 801d044:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d048:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d04c:	6878      	ldr	r0, [r7, #4]
 801d04e:	3720      	adds	r7, #32
 801d050:	46bd      	mov	sp, r7
 801d052:	bd80      	pop	{r7, pc}
 801d054:	0801efe0 	.word	0x0801efe0

0801d058 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801d058:	b580      	push	{r7, lr}
 801d05a:	b084      	sub	sp, #16
 801d05c:	af00      	add	r7, sp, #0
 801d05e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d060:	2300      	movs	r3, #0
 801d062:	60bb      	str	r3, [r7, #8]
 801d064:	2300      	movs	r3, #0
 801d066:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d068:	4b0a      	ldr	r3, [pc, #40]	; (801d094 <SysTimeGetMcuTime+0x3c>)
 801d06a:	691b      	ldr	r3, [r3, #16]
 801d06c:	f107 0208 	add.w	r2, r7, #8
 801d070:	3204      	adds	r2, #4
 801d072:	4610      	mov	r0, r2
 801d074:	4798      	blx	r3
 801d076:	4603      	mov	r3, r0
 801d078:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801d07a:	687b      	ldr	r3, [r7, #4]
 801d07c:	461a      	mov	r2, r3
 801d07e:	f107 0308 	add.w	r3, r7, #8
 801d082:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d086:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d08a:	6878      	ldr	r0, [r7, #4]
 801d08c:	3710      	adds	r7, #16
 801d08e:	46bd      	mov	sp, r7
 801d090:	bd80      	pop	{r7, pc}
 801d092:	bf00      	nop
 801d094:	0801efe0 	.word	0x0801efe0

0801d098 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801d098:	b580      	push	{r7, lr}
 801d09a:	b088      	sub	sp, #32
 801d09c:	af02      	add	r7, sp, #8
 801d09e:	463b      	mov	r3, r7
 801d0a0:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d0a4:	4b0f      	ldr	r3, [pc, #60]	; (801d0e4 <SysTimeToMs+0x4c>)
 801d0a6:	68db      	ldr	r3, [r3, #12]
 801d0a8:	4798      	blx	r3
 801d0aa:	4603      	mov	r3, r0
 801d0ac:	b21b      	sxth	r3, r3
 801d0ae:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d0b0:	4b0c      	ldr	r3, [pc, #48]	; (801d0e4 <SysTimeToMs+0x4c>)
 801d0b2:	685b      	ldr	r3, [r3, #4]
 801d0b4:	4798      	blx	r3
 801d0b6:	4603      	mov	r3, r0
 801d0b8:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801d0ba:	f107 0008 	add.w	r0, r7, #8
 801d0be:	697b      	ldr	r3, [r7, #20]
 801d0c0:	9300      	str	r3, [sp, #0]
 801d0c2:	693b      	ldr	r3, [r7, #16]
 801d0c4:	463a      	mov	r2, r7
 801d0c6:	ca06      	ldmia	r2, {r1, r2}
 801d0c8:	f7ff ff27 	bl	801cf1a <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801d0cc:	68bb      	ldr	r3, [r7, #8]
 801d0ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d0d2:	fb02 f303 	mul.w	r3, r2, r3
 801d0d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801d0da:	4413      	add	r3, r2
}
 801d0dc:	4618      	mov	r0, r3
 801d0de:	3718      	adds	r7, #24
 801d0e0:	46bd      	mov	sp, r7
 801d0e2:	bd80      	pop	{r7, pc}
 801d0e4:	0801efe0 	.word	0x0801efe0

0801d0e8 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801d0e8:	b580      	push	{r7, lr}
 801d0ea:	b08a      	sub	sp, #40	; 0x28
 801d0ec:	af02      	add	r7, sp, #8
 801d0ee:	6078      	str	r0, [r7, #4]
 801d0f0:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801d0f2:	683b      	ldr	r3, [r7, #0]
 801d0f4:	4a19      	ldr	r2, [pc, #100]	; (801d15c <SysTimeFromMs+0x74>)
 801d0f6:	fba2 2303 	umull	r2, r3, r2, r3
 801d0fa:	099b      	lsrs	r3, r3, #6
 801d0fc:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801d0fe:	69fb      	ldr	r3, [r7, #28]
 801d100:	617b      	str	r3, [r7, #20]
 801d102:	683b      	ldr	r3, [r7, #0]
 801d104:	b29a      	uxth	r2, r3
 801d106:	69fb      	ldr	r3, [r7, #28]
 801d108:	b29b      	uxth	r3, r3
 801d10a:	4619      	mov	r1, r3
 801d10c:	0149      	lsls	r1, r1, #5
 801d10e:	1ac9      	subs	r1, r1, r3
 801d110:	0089      	lsls	r1, r1, #2
 801d112:	440b      	add	r3, r1
 801d114:	00db      	lsls	r3, r3, #3
 801d116:	b29b      	uxth	r3, r3
 801d118:	1ad3      	subs	r3, r2, r3
 801d11a:	b29b      	uxth	r3, r3
 801d11c:	b21b      	sxth	r3, r3
 801d11e:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801d120:	f107 030c 	add.w	r3, r7, #12
 801d124:	2200      	movs	r2, #0
 801d126:	601a      	str	r2, [r3, #0]
 801d128:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d12a:	4b0d      	ldr	r3, [pc, #52]	; (801d160 <SysTimeFromMs+0x78>)
 801d12c:	68db      	ldr	r3, [r3, #12]
 801d12e:	4798      	blx	r3
 801d130:	4603      	mov	r3, r0
 801d132:	b21b      	sxth	r3, r3
 801d134:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d136:	4b0a      	ldr	r3, [pc, #40]	; (801d160 <SysTimeFromMs+0x78>)
 801d138:	685b      	ldr	r3, [r3, #4]
 801d13a:	4798      	blx	r3
 801d13c:	4603      	mov	r3, r0
 801d13e:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801d140:	6878      	ldr	r0, [r7, #4]
 801d142:	693b      	ldr	r3, [r7, #16]
 801d144:	9300      	str	r3, [sp, #0]
 801d146:	68fb      	ldr	r3, [r7, #12]
 801d148:	f107 0214 	add.w	r2, r7, #20
 801d14c:	ca06      	ldmia	r2, {r1, r2}
 801d14e:	f7ff feab 	bl	801cea8 <SysTimeAdd>
}
 801d152:	6878      	ldr	r0, [r7, #4]
 801d154:	3720      	adds	r7, #32
 801d156:	46bd      	mov	sp, r7
 801d158:	bd80      	pop	{r7, pc}
 801d15a:	bf00      	nop
 801d15c:	10624dd3 	.word	0x10624dd3
 801d160:	0801efe0 	.word	0x0801efe0

0801d164 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d164:	b480      	push	{r7}
 801d166:	b085      	sub	sp, #20
 801d168:	af00      	add	r7, sp, #0
 801d16a:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d16c:	2300      	movs	r3, #0
 801d16e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d170:	e00e      	b.n	801d190 <ee_skip_atoi+0x2c>
 801d172:	68fa      	ldr	r2, [r7, #12]
 801d174:	4613      	mov	r3, r2
 801d176:	009b      	lsls	r3, r3, #2
 801d178:	4413      	add	r3, r2
 801d17a:	005b      	lsls	r3, r3, #1
 801d17c:	4618      	mov	r0, r3
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	681b      	ldr	r3, [r3, #0]
 801d182:	1c59      	adds	r1, r3, #1
 801d184:	687a      	ldr	r2, [r7, #4]
 801d186:	6011      	str	r1, [r2, #0]
 801d188:	781b      	ldrb	r3, [r3, #0]
 801d18a:	4403      	add	r3, r0
 801d18c:	3b30      	subs	r3, #48	; 0x30
 801d18e:	60fb      	str	r3, [r7, #12]
 801d190:	687b      	ldr	r3, [r7, #4]
 801d192:	681b      	ldr	r3, [r3, #0]
 801d194:	781b      	ldrb	r3, [r3, #0]
 801d196:	2b2f      	cmp	r3, #47	; 0x2f
 801d198:	d904      	bls.n	801d1a4 <ee_skip_atoi+0x40>
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	681b      	ldr	r3, [r3, #0]
 801d19e:	781b      	ldrb	r3, [r3, #0]
 801d1a0:	2b39      	cmp	r3, #57	; 0x39
 801d1a2:	d9e6      	bls.n	801d172 <ee_skip_atoi+0xe>
  return i;
 801d1a4:	68fb      	ldr	r3, [r7, #12]
}
 801d1a6:	4618      	mov	r0, r3
 801d1a8:	3714      	adds	r7, #20
 801d1aa:	46bd      	mov	sp, r7
 801d1ac:	bc80      	pop	{r7}
 801d1ae:	4770      	bx	lr

0801d1b0 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d1b0:	b480      	push	{r7}
 801d1b2:	b099      	sub	sp, #100	; 0x64
 801d1b4:	af00      	add	r7, sp, #0
 801d1b6:	60f8      	str	r0, [r7, #12]
 801d1b8:	60b9      	str	r1, [r7, #8]
 801d1ba:	607a      	str	r2, [r7, #4]
 801d1bc:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d1be:	4b71      	ldr	r3, [pc, #452]	; (801d384 <ee_number+0x1d4>)
 801d1c0:	681b      	ldr	r3, [r3, #0]
 801d1c2:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d1c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d1c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	d002      	beq.n	801d1d4 <ee_number+0x24>
 801d1ce:	4b6e      	ldr	r3, [pc, #440]	; (801d388 <ee_number+0x1d8>)
 801d1d0:	681b      	ldr	r3, [r3, #0]
 801d1d2:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d1d4:	683b      	ldr	r3, [r7, #0]
 801d1d6:	2b01      	cmp	r3, #1
 801d1d8:	dd02      	ble.n	801d1e0 <ee_number+0x30>
 801d1da:	683b      	ldr	r3, [r7, #0]
 801d1dc:	2b24      	cmp	r3, #36	; 0x24
 801d1de:	dd01      	ble.n	801d1e4 <ee_number+0x34>
 801d1e0:	2300      	movs	r3, #0
 801d1e2:	e0ca      	b.n	801d37a <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801d1e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d1e6:	f003 0301 	and.w	r3, r3, #1
 801d1ea:	2b00      	cmp	r3, #0
 801d1ec:	d001      	beq.n	801d1f2 <ee_number+0x42>
 801d1ee:	2330      	movs	r3, #48	; 0x30
 801d1f0:	e000      	b.n	801d1f4 <ee_number+0x44>
 801d1f2:	2320      	movs	r3, #32
 801d1f4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801d1f8:	2300      	movs	r3, #0
 801d1fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801d1fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d200:	f003 0302 	and.w	r3, r3, #2
 801d204:	2b00      	cmp	r3, #0
 801d206:	d00b      	beq.n	801d220 <ee_number+0x70>
  {
    if (num < 0)
 801d208:	687b      	ldr	r3, [r7, #4]
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	da08      	bge.n	801d220 <ee_number+0x70>
    {
      sign = '-';
 801d20e:	232d      	movs	r3, #45	; 0x2d
 801d210:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	425b      	negs	r3, r3
 801d218:	607b      	str	r3, [r7, #4]
      size--;
 801d21a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d21c:	3b01      	subs	r3, #1
 801d21e:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801d220:	2300      	movs	r3, #0
 801d222:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d224:	687b      	ldr	r3, [r7, #4]
 801d226:	2b00      	cmp	r3, #0
 801d228:	d11e      	bne.n	801d268 <ee_number+0xb8>
    tmp[i++] = '0';
 801d22a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d22c:	1c5a      	adds	r2, r3, #1
 801d22e:	657a      	str	r2, [r7, #84]	; 0x54
 801d230:	3360      	adds	r3, #96	; 0x60
 801d232:	443b      	add	r3, r7
 801d234:	2230      	movs	r2, #48	; 0x30
 801d236:	f803 2c50 	strb.w	r2, [r3, #-80]
 801d23a:	e018      	b.n	801d26e <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	683a      	ldr	r2, [r7, #0]
 801d240:	fbb3 f1f2 	udiv	r1, r3, r2
 801d244:	fb01 f202 	mul.w	r2, r1, r2
 801d248:	1a9b      	subs	r3, r3, r2
 801d24a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d24c:	441a      	add	r2, r3
 801d24e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d250:	1c59      	adds	r1, r3, #1
 801d252:	6579      	str	r1, [r7, #84]	; 0x54
 801d254:	7812      	ldrb	r2, [r2, #0]
 801d256:	3360      	adds	r3, #96	; 0x60
 801d258:	443b      	add	r3, r7
 801d25a:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801d25e:	687a      	ldr	r2, [r7, #4]
 801d260:	683b      	ldr	r3, [r7, #0]
 801d262:	fbb2 f3f3 	udiv	r3, r2, r3
 801d266:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d1e6      	bne.n	801d23c <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801d26e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d272:	429a      	cmp	r2, r3
 801d274:	dd01      	ble.n	801d27a <ee_number+0xca>
 801d276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d278:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d27a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d27c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d27e:	1ad3      	subs	r3, r2, r3
 801d280:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d284:	f003 0301 	and.w	r3, r3, #1
 801d288:	2b00      	cmp	r3, #0
 801d28a:	d112      	bne.n	801d2b2 <ee_number+0x102>
 801d28c:	e00c      	b.n	801d2a8 <ee_number+0xf8>
 801d28e:	68fb      	ldr	r3, [r7, #12]
 801d290:	1c5a      	adds	r2, r3, #1
 801d292:	60fa      	str	r2, [r7, #12]
 801d294:	2220      	movs	r2, #32
 801d296:	701a      	strb	r2, [r3, #0]
 801d298:	68bb      	ldr	r3, [r7, #8]
 801d29a:	3b01      	subs	r3, #1
 801d29c:	60bb      	str	r3, [r7, #8]
 801d29e:	68bb      	ldr	r3, [r7, #8]
 801d2a0:	2b00      	cmp	r3, #0
 801d2a2:	d101      	bne.n	801d2a8 <ee_number+0xf8>
 801d2a4:	68fb      	ldr	r3, [r7, #12]
 801d2a6:	e068      	b.n	801d37a <ee_number+0x1ca>
 801d2a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d2aa:	1e5a      	subs	r2, r3, #1
 801d2ac:	66ba      	str	r2, [r7, #104]	; 0x68
 801d2ae:	2b00      	cmp	r3, #0
 801d2b0:	dced      	bgt.n	801d28e <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d2b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	d01b      	beq.n	801d2f2 <ee_number+0x142>
 801d2ba:	68fb      	ldr	r3, [r7, #12]
 801d2bc:	1c5a      	adds	r2, r3, #1
 801d2be:	60fa      	str	r2, [r7, #12]
 801d2c0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801d2c4:	701a      	strb	r2, [r3, #0]
 801d2c6:	68bb      	ldr	r3, [r7, #8]
 801d2c8:	3b01      	subs	r3, #1
 801d2ca:	60bb      	str	r3, [r7, #8]
 801d2cc:	68bb      	ldr	r3, [r7, #8]
 801d2ce:	2b00      	cmp	r3, #0
 801d2d0:	d10f      	bne.n	801d2f2 <ee_number+0x142>
 801d2d2:	68fb      	ldr	r3, [r7, #12]
 801d2d4:	e051      	b.n	801d37a <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d2d6:	68fb      	ldr	r3, [r7, #12]
 801d2d8:	1c5a      	adds	r2, r3, #1
 801d2da:	60fa      	str	r2, [r7, #12]
 801d2dc:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801d2e0:	701a      	strb	r2, [r3, #0]
 801d2e2:	68bb      	ldr	r3, [r7, #8]
 801d2e4:	3b01      	subs	r3, #1
 801d2e6:	60bb      	str	r3, [r7, #8]
 801d2e8:	68bb      	ldr	r3, [r7, #8]
 801d2ea:	2b00      	cmp	r3, #0
 801d2ec:	d101      	bne.n	801d2f2 <ee_number+0x142>
 801d2ee:	68fb      	ldr	r3, [r7, #12]
 801d2f0:	e043      	b.n	801d37a <ee_number+0x1ca>
 801d2f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d2f4:	1e5a      	subs	r2, r3, #1
 801d2f6:	66ba      	str	r2, [r7, #104]	; 0x68
 801d2f8:	2b00      	cmp	r3, #0
 801d2fa:	dcec      	bgt.n	801d2d6 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d2fc:	e00c      	b.n	801d318 <ee_number+0x168>
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	1c5a      	adds	r2, r3, #1
 801d302:	60fa      	str	r2, [r7, #12]
 801d304:	2230      	movs	r2, #48	; 0x30
 801d306:	701a      	strb	r2, [r3, #0]
 801d308:	68bb      	ldr	r3, [r7, #8]
 801d30a:	3b01      	subs	r3, #1
 801d30c:	60bb      	str	r3, [r7, #8]
 801d30e:	68bb      	ldr	r3, [r7, #8]
 801d310:	2b00      	cmp	r3, #0
 801d312:	d101      	bne.n	801d318 <ee_number+0x168>
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	e030      	b.n	801d37a <ee_number+0x1ca>
 801d318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d31a:	1e5a      	subs	r2, r3, #1
 801d31c:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d31e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d320:	429a      	cmp	r2, r3
 801d322:	dbec      	blt.n	801d2fe <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d324:	e010      	b.n	801d348 <ee_number+0x198>
 801d326:	68fb      	ldr	r3, [r7, #12]
 801d328:	1c5a      	adds	r2, r3, #1
 801d32a:	60fa      	str	r2, [r7, #12]
 801d32c:	f107 0110 	add.w	r1, r7, #16
 801d330:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d332:	440a      	add	r2, r1
 801d334:	7812      	ldrb	r2, [r2, #0]
 801d336:	701a      	strb	r2, [r3, #0]
 801d338:	68bb      	ldr	r3, [r7, #8]
 801d33a:	3b01      	subs	r3, #1
 801d33c:	60bb      	str	r3, [r7, #8]
 801d33e:	68bb      	ldr	r3, [r7, #8]
 801d340:	2b00      	cmp	r3, #0
 801d342:	d101      	bne.n	801d348 <ee_number+0x198>
 801d344:	68fb      	ldr	r3, [r7, #12]
 801d346:	e018      	b.n	801d37a <ee_number+0x1ca>
 801d348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d34a:	1e5a      	subs	r2, r3, #1
 801d34c:	657a      	str	r2, [r7, #84]	; 0x54
 801d34e:	2b00      	cmp	r3, #0
 801d350:	dce9      	bgt.n	801d326 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801d352:	e00c      	b.n	801d36e <ee_number+0x1be>
 801d354:	68fb      	ldr	r3, [r7, #12]
 801d356:	1c5a      	adds	r2, r3, #1
 801d358:	60fa      	str	r2, [r7, #12]
 801d35a:	2220      	movs	r2, #32
 801d35c:	701a      	strb	r2, [r3, #0]
 801d35e:	68bb      	ldr	r3, [r7, #8]
 801d360:	3b01      	subs	r3, #1
 801d362:	60bb      	str	r3, [r7, #8]
 801d364:	68bb      	ldr	r3, [r7, #8]
 801d366:	2b00      	cmp	r3, #0
 801d368:	d101      	bne.n	801d36e <ee_number+0x1be>
 801d36a:	68fb      	ldr	r3, [r7, #12]
 801d36c:	e005      	b.n	801d37a <ee_number+0x1ca>
 801d36e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d370:	1e5a      	subs	r2, r3, #1
 801d372:	66ba      	str	r2, [r7, #104]	; 0x68
 801d374:	2b00      	cmp	r3, #0
 801d376:	dced      	bgt.n	801d354 <ee_number+0x1a4>

  return str;
 801d378:	68fb      	ldr	r3, [r7, #12]
}
 801d37a:	4618      	mov	r0, r3
 801d37c:	3764      	adds	r7, #100	; 0x64
 801d37e:	46bd      	mov	sp, r7
 801d380:	bc80      	pop	{r7}
 801d382:	4770      	bx	lr
 801d384:	20000164 	.word	0x20000164
 801d388:	20000168 	.word	0x20000168

0801d38c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801d38c:	b580      	push	{r7, lr}
 801d38e:	b092      	sub	sp, #72	; 0x48
 801d390:	af04      	add	r7, sp, #16
 801d392:	60f8      	str	r0, [r7, #12]
 801d394:	60b9      	str	r1, [r7, #8]
 801d396:	607a      	str	r2, [r7, #4]
 801d398:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801d39a:	68bb      	ldr	r3, [r7, #8]
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	dc01      	bgt.n	801d3a4 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801d3a0:	2300      	movs	r3, #0
 801d3a2:	e13e      	b.n	801d622 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d3a4:	68fb      	ldr	r3, [r7, #12]
 801d3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d3a8:	e128      	b.n	801d5fc <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801d3aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d3ac:	68fb      	ldr	r3, [r7, #12]
 801d3ae:	1ad2      	subs	r2, r2, r3
 801d3b0:	68bb      	ldr	r3, [r7, #8]
 801d3b2:	3b01      	subs	r3, #1
 801d3b4:	429a      	cmp	r2, r3
 801d3b6:	f280 812e 	bge.w	801d616 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801d3ba:	687b      	ldr	r3, [r7, #4]
 801d3bc:	781b      	ldrb	r3, [r3, #0]
 801d3be:	2b25      	cmp	r3, #37	; 0x25
 801d3c0:	d006      	beq.n	801d3d0 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801d3c2:	687a      	ldr	r2, [r7, #4]
 801d3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3c6:	1c59      	adds	r1, r3, #1
 801d3c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d3ca:	7812      	ldrb	r2, [r2, #0]
 801d3cc:	701a      	strb	r2, [r3, #0]
      continue;
 801d3ce:	e112      	b.n	801d5f6 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801d3d0:	2300      	movs	r3, #0
 801d3d2:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	3301      	adds	r3, #1
 801d3d8:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	781b      	ldrb	r3, [r3, #0]
 801d3de:	2b30      	cmp	r3, #48	; 0x30
 801d3e0:	d103      	bne.n	801d3ea <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801d3e2:	6a3b      	ldr	r3, [r7, #32]
 801d3e4:	f043 0301 	orr.w	r3, r3, #1
 801d3e8:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801d3ea:	f04f 33ff 	mov.w	r3, #4294967295
 801d3ee:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	781b      	ldrb	r3, [r3, #0]
 801d3f4:	2b2f      	cmp	r3, #47	; 0x2f
 801d3f6:	d908      	bls.n	801d40a <tiny_vsnprintf_like+0x7e>
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	781b      	ldrb	r3, [r3, #0]
 801d3fc:	2b39      	cmp	r3, #57	; 0x39
 801d3fe:	d804      	bhi.n	801d40a <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801d400:	1d3b      	adds	r3, r7, #4
 801d402:	4618      	mov	r0, r3
 801d404:	f7ff feae 	bl	801d164 <ee_skip_atoi>
 801d408:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801d40a:	f04f 33ff 	mov.w	r3, #4294967295
 801d40e:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801d410:	f04f 33ff 	mov.w	r3, #4294967295
 801d414:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801d416:	230a      	movs	r3, #10
 801d418:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	781b      	ldrb	r3, [r3, #0]
 801d41e:	3b58      	subs	r3, #88	; 0x58
 801d420:	2b20      	cmp	r3, #32
 801d422:	f200 8094 	bhi.w	801d54e <tiny_vsnprintf_like+0x1c2>
 801d426:	a201      	add	r2, pc, #4	; (adr r2, 801d42c <tiny_vsnprintf_like+0xa0>)
 801d428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d42c:	0801d537 	.word	0x0801d537
 801d430:	0801d54f 	.word	0x0801d54f
 801d434:	0801d54f 	.word	0x0801d54f
 801d438:	0801d54f 	.word	0x0801d54f
 801d43c:	0801d54f 	.word	0x0801d54f
 801d440:	0801d54f 	.word	0x0801d54f
 801d444:	0801d54f 	.word	0x0801d54f
 801d448:	0801d54f 	.word	0x0801d54f
 801d44c:	0801d54f 	.word	0x0801d54f
 801d450:	0801d54f 	.word	0x0801d54f
 801d454:	0801d54f 	.word	0x0801d54f
 801d458:	0801d4bb 	.word	0x0801d4bb
 801d45c:	0801d545 	.word	0x0801d545
 801d460:	0801d54f 	.word	0x0801d54f
 801d464:	0801d54f 	.word	0x0801d54f
 801d468:	0801d54f 	.word	0x0801d54f
 801d46c:	0801d54f 	.word	0x0801d54f
 801d470:	0801d545 	.word	0x0801d545
 801d474:	0801d54f 	.word	0x0801d54f
 801d478:	0801d54f 	.word	0x0801d54f
 801d47c:	0801d54f 	.word	0x0801d54f
 801d480:	0801d54f 	.word	0x0801d54f
 801d484:	0801d54f 	.word	0x0801d54f
 801d488:	0801d54f 	.word	0x0801d54f
 801d48c:	0801d54f 	.word	0x0801d54f
 801d490:	0801d54f 	.word	0x0801d54f
 801d494:	0801d54f 	.word	0x0801d54f
 801d498:	0801d4db 	.word	0x0801d4db
 801d49c:	0801d54f 	.word	0x0801d54f
 801d4a0:	0801d59b 	.word	0x0801d59b
 801d4a4:	0801d54f 	.word	0x0801d54f
 801d4a8:	0801d54f 	.word	0x0801d54f
 801d4ac:	0801d53f 	.word	0x0801d53f
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801d4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4b2:	1c5a      	adds	r2, r3, #1
 801d4b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d4b6:	2220      	movs	r2, #32
 801d4b8:	701a      	strb	r2, [r3, #0]
 801d4ba:	69fb      	ldr	r3, [r7, #28]
 801d4bc:	3b01      	subs	r3, #1
 801d4be:	61fb      	str	r3, [r7, #28]
 801d4c0:	69fb      	ldr	r3, [r7, #28]
 801d4c2:	2b00      	cmp	r3, #0
 801d4c4:	dcf4      	bgt.n	801d4b0 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801d4c6:	683b      	ldr	r3, [r7, #0]
 801d4c8:	1d1a      	adds	r2, r3, #4
 801d4ca:	603a      	str	r2, [r7, #0]
 801d4cc:	6819      	ldr	r1, [r3, #0]
 801d4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4d0:	1c5a      	adds	r2, r3, #1
 801d4d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d4d4:	b2ca      	uxtb	r2, r1
 801d4d6:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801d4d8:	e08d      	b.n	801d5f6 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801d4da:	683b      	ldr	r3, [r7, #0]
 801d4dc:	1d1a      	adds	r2, r3, #4
 801d4de:	603a      	str	r2, [r7, #0]
 801d4e0:	681b      	ldr	r3, [r3, #0]
 801d4e2:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801d4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	d101      	bne.n	801d4ee <tiny_vsnprintf_like+0x162>
 801d4ea:	4b50      	ldr	r3, [pc, #320]	; (801d62c <tiny_vsnprintf_like+0x2a0>)
 801d4ec:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801d4ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d4f0:	f7e2 fe42 	bl	8000178 <strlen>
 801d4f4:	4603      	mov	r3, r0
 801d4f6:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801d4f8:	e004      	b.n	801d504 <tiny_vsnprintf_like+0x178>
 801d4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4fc:	1c5a      	adds	r2, r3, #1
 801d4fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d500:	2220      	movs	r2, #32
 801d502:	701a      	strb	r2, [r3, #0]
 801d504:	69fb      	ldr	r3, [r7, #28]
 801d506:	1e5a      	subs	r2, r3, #1
 801d508:	61fa      	str	r2, [r7, #28]
 801d50a:	693a      	ldr	r2, [r7, #16]
 801d50c:	429a      	cmp	r2, r3
 801d50e:	dbf4      	blt.n	801d4fa <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801d510:	2300      	movs	r3, #0
 801d512:	62bb      	str	r3, [r7, #40]	; 0x28
 801d514:	e00a      	b.n	801d52c <tiny_vsnprintf_like+0x1a0>
 801d516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d518:	1c53      	adds	r3, r2, #1
 801d51a:	627b      	str	r3, [r7, #36]	; 0x24
 801d51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d51e:	1c59      	adds	r1, r3, #1
 801d520:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d522:	7812      	ldrb	r2, [r2, #0]
 801d524:	701a      	strb	r2, [r3, #0]
 801d526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d528:	3301      	adds	r3, #1
 801d52a:	62bb      	str	r3, [r7, #40]	; 0x28
 801d52c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d52e:	693b      	ldr	r3, [r7, #16]
 801d530:	429a      	cmp	r2, r3
 801d532:	dbf0      	blt.n	801d516 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801d534:	e05f      	b.n	801d5f6 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801d536:	6a3b      	ldr	r3, [r7, #32]
 801d538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d53c:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801d53e:	2310      	movs	r3, #16
 801d540:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801d542:	e02b      	b.n	801d59c <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801d544:	6a3b      	ldr	r3, [r7, #32]
 801d546:	f043 0302 	orr.w	r3, r3, #2
 801d54a:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801d54c:	e025      	b.n	801d59a <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801d54e:	687b      	ldr	r3, [r7, #4]
 801d550:	781b      	ldrb	r3, [r3, #0]
 801d552:	2b25      	cmp	r3, #37	; 0x25
 801d554:	d004      	beq.n	801d560 <tiny_vsnprintf_like+0x1d4>
 801d556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d558:	1c5a      	adds	r2, r3, #1
 801d55a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d55c:	2225      	movs	r2, #37	; 0x25
 801d55e:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801d560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d562:	68fb      	ldr	r3, [r7, #12]
 801d564:	1ad2      	subs	r2, r2, r3
 801d566:	68bb      	ldr	r3, [r7, #8]
 801d568:	3b01      	subs	r3, #1
 801d56a:	429a      	cmp	r2, r3
 801d56c:	da16      	bge.n	801d59c <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801d56e:	687b      	ldr	r3, [r7, #4]
 801d570:	781b      	ldrb	r3, [r3, #0]
 801d572:	2b00      	cmp	r3, #0
 801d574:	d006      	beq.n	801d584 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801d576:	687a      	ldr	r2, [r7, #4]
 801d578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d57a:	1c59      	adds	r1, r3, #1
 801d57c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d57e:	7812      	ldrb	r2, [r2, #0]
 801d580:	701a      	strb	r2, [r3, #0]
 801d582:	e002      	b.n	801d58a <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801d584:	687b      	ldr	r3, [r7, #4]
 801d586:	3b01      	subs	r3, #1
 801d588:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801d58a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d58c:	68fb      	ldr	r3, [r7, #12]
 801d58e:	1ad2      	subs	r2, r2, r3
 801d590:	68bb      	ldr	r3, [r7, #8]
 801d592:	3b01      	subs	r3, #1
 801d594:	429a      	cmp	r2, r3
 801d596:	db2d      	blt.n	801d5f4 <tiny_vsnprintf_like+0x268>
 801d598:	e000      	b.n	801d59c <tiny_vsnprintf_like+0x210>
        break;
 801d59a:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801d59c:	697b      	ldr	r3, [r7, #20]
 801d59e:	2b6c      	cmp	r3, #108	; 0x6c
 801d5a0:	d105      	bne.n	801d5ae <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801d5a2:	683b      	ldr	r3, [r7, #0]
 801d5a4:	1d1a      	adds	r2, r3, #4
 801d5a6:	603a      	str	r2, [r7, #0]
 801d5a8:	681b      	ldr	r3, [r3, #0]
 801d5aa:	637b      	str	r3, [r7, #52]	; 0x34
 801d5ac:	e00f      	b.n	801d5ce <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801d5ae:	6a3b      	ldr	r3, [r7, #32]
 801d5b0:	f003 0302 	and.w	r3, r3, #2
 801d5b4:	2b00      	cmp	r3, #0
 801d5b6:	d005      	beq.n	801d5c4 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801d5b8:	683b      	ldr	r3, [r7, #0]
 801d5ba:	1d1a      	adds	r2, r3, #4
 801d5bc:	603a      	str	r2, [r7, #0]
 801d5be:	681b      	ldr	r3, [r3, #0]
 801d5c0:	637b      	str	r3, [r7, #52]	; 0x34
 801d5c2:	e004      	b.n	801d5ce <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801d5c4:	683b      	ldr	r3, [r7, #0]
 801d5c6:	1d1a      	adds	r2, r3, #4
 801d5c8:	603a      	str	r2, [r7, #0]
 801d5ca:	681b      	ldr	r3, [r3, #0]
 801d5cc:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801d5ce:	68bb      	ldr	r3, [r7, #8]
 801d5d0:	1e5a      	subs	r2, r3, #1
 801d5d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d5d4:	68fb      	ldr	r3, [r7, #12]
 801d5d6:	1acb      	subs	r3, r1, r3
 801d5d8:	1ad1      	subs	r1, r2, r3
 801d5da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d5dc:	6a3b      	ldr	r3, [r7, #32]
 801d5de:	9302      	str	r3, [sp, #8]
 801d5e0:	69bb      	ldr	r3, [r7, #24]
 801d5e2:	9301      	str	r3, [sp, #4]
 801d5e4:	69fb      	ldr	r3, [r7, #28]
 801d5e6:	9300      	str	r3, [sp, #0]
 801d5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d5ec:	f7ff fde0 	bl	801d1b0 <ee_number>
 801d5f0:	62f8      	str	r0, [r7, #44]	; 0x2c
 801d5f2:	e000      	b.n	801d5f6 <tiny_vsnprintf_like+0x26a>
        continue;
 801d5f4:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d5f6:	687b      	ldr	r3, [r7, #4]
 801d5f8:	3301      	adds	r3, #1
 801d5fa:	607b      	str	r3, [r7, #4]
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	781b      	ldrb	r3, [r3, #0]
 801d600:	2b00      	cmp	r3, #0
 801d602:	f47f aed2 	bne.w	801d3aa <tiny_vsnprintf_like+0x1e>
 801d606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d608:	68fb      	ldr	r3, [r7, #12]
 801d60a:	1ad2      	subs	r2, r2, r3
 801d60c:	68bb      	ldr	r3, [r7, #8]
 801d60e:	3b01      	subs	r3, #1
 801d610:	429a      	cmp	r2, r3
 801d612:	f6bf aeca 	bge.w	801d3aa <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801d616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d618:	2200      	movs	r2, #0
 801d61a:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801d61c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d61e:	68fb      	ldr	r3, [r7, #12]
 801d620:	1ad3      	subs	r3, r2, r3
}
 801d622:	4618      	mov	r0, r3
 801d624:	3738      	adds	r7, #56	; 0x38
 801d626:	46bd      	mov	sp, r7
 801d628:	bd80      	pop	{r7, pc}
 801d62a:	bf00      	nop
 801d62c:	0801eef4 	.word	0x0801eef4

0801d630 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801d630:	b580      	push	{r7, lr}
 801d632:	b090      	sub	sp, #64	; 0x40
 801d634:	af00      	add	r7, sp, #0
 801d636:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801d638:	4b73      	ldr	r3, [pc, #460]	; (801d808 <UTIL_SEQ_Run+0x1d8>)
 801d63a:	681b      	ldr	r3, [r3, #0]
 801d63c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801d63e:	4b72      	ldr	r3, [pc, #456]	; (801d808 <UTIL_SEQ_Run+0x1d8>)
 801d640:	681a      	ldr	r2, [r3, #0]
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	4013      	ands	r3, r2
 801d646:	4a70      	ldr	r2, [pc, #448]	; (801d808 <UTIL_SEQ_Run+0x1d8>)
 801d648:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801d64a:	4b70      	ldr	r3, [pc, #448]	; (801d80c <UTIL_SEQ_Run+0x1dc>)
 801d64c:	681b      	ldr	r3, [r3, #0]
 801d64e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801d650:	4b6f      	ldr	r3, [pc, #444]	; (801d810 <UTIL_SEQ_Run+0x1e0>)
 801d652:	681b      	ldr	r3, [r3, #0]
 801d654:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801d656:	4b6f      	ldr	r3, [pc, #444]	; (801d814 <UTIL_SEQ_Run+0x1e4>)
 801d658:	681b      	ldr	r3, [r3, #0]
 801d65a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801d65c:	4b6e      	ldr	r3, [pc, #440]	; (801d818 <UTIL_SEQ_Run+0x1e8>)
 801d65e:	681b      	ldr	r3, [r3, #0]
 801d660:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801d662:	e08d      	b.n	801d780 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801d664:	2300      	movs	r3, #0
 801d666:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801d668:	e002      	b.n	801d670 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801d66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d66c:	3301      	adds	r3, #1
 801d66e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801d670:	4a6a      	ldr	r2, [pc, #424]	; (801d81c <UTIL_SEQ_Run+0x1ec>)
 801d672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d674:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d67a:	401a      	ands	r2, r3
 801d67c:	4b62      	ldr	r3, [pc, #392]	; (801d808 <UTIL_SEQ_Run+0x1d8>)
 801d67e:	681b      	ldr	r3, [r3, #0]
 801d680:	4013      	ands	r3, r2
 801d682:	2b00      	cmp	r3, #0
 801d684:	d0f1      	beq.n	801d66a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801d686:	4a65      	ldr	r2, [pc, #404]	; (801d81c <UTIL_SEQ_Run+0x1ec>)
 801d688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d68a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d690:	401a      	ands	r2, r3
 801d692:	4b5d      	ldr	r3, [pc, #372]	; (801d808 <UTIL_SEQ_Run+0x1d8>)
 801d694:	681b      	ldr	r3, [r3, #0]
 801d696:	4013      	ands	r3, r2
 801d698:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801d69a:	4a60      	ldr	r2, [pc, #384]	; (801d81c <UTIL_SEQ_Run+0x1ec>)
 801d69c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d69e:	00db      	lsls	r3, r3, #3
 801d6a0:	4413      	add	r3, r2
 801d6a2:	685a      	ldr	r2, [r3, #4]
 801d6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6a6:	4013      	ands	r3, r2
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	d106      	bne.n	801d6ba <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801d6ac:	4a5b      	ldr	r2, [pc, #364]	; (801d81c <UTIL_SEQ_Run+0x1ec>)
 801d6ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d6b0:	00db      	lsls	r3, r3, #3
 801d6b2:	4413      	add	r3, r2
 801d6b4:	f04f 32ff 	mov.w	r2, #4294967295
 801d6b8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801d6ba:	4a58      	ldr	r2, [pc, #352]	; (801d81c <UTIL_SEQ_Run+0x1ec>)
 801d6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d6be:	00db      	lsls	r3, r3, #3
 801d6c0:	4413      	add	r3, r2
 801d6c2:	685a      	ldr	r2, [r3, #4]
 801d6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6c6:	4013      	ands	r3, r2
 801d6c8:	4618      	mov	r0, r3
 801d6ca:	f000 f907 	bl	801d8dc <SEQ_BitPosition>
 801d6ce:	4603      	mov	r3, r0
 801d6d0:	461a      	mov	r2, r3
 801d6d2:	4b53      	ldr	r3, [pc, #332]	; (801d820 <UTIL_SEQ_Run+0x1f0>)
 801d6d4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801d6d6:	4a51      	ldr	r2, [pc, #324]	; (801d81c <UTIL_SEQ_Run+0x1ec>)
 801d6d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d6da:	00db      	lsls	r3, r3, #3
 801d6dc:	4413      	add	r3, r2
 801d6de:	685a      	ldr	r2, [r3, #4]
 801d6e0:	4b4f      	ldr	r3, [pc, #316]	; (801d820 <UTIL_SEQ_Run+0x1f0>)
 801d6e2:	681b      	ldr	r3, [r3, #0]
 801d6e4:	2101      	movs	r1, #1
 801d6e6:	fa01 f303 	lsl.w	r3, r1, r3
 801d6ea:	43db      	mvns	r3, r3
 801d6ec:	401a      	ands	r2, r3
 801d6ee:	494b      	ldr	r1, [pc, #300]	; (801d81c <UTIL_SEQ_Run+0x1ec>)
 801d6f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d6f2:	00db      	lsls	r3, r3, #3
 801d6f4:	440b      	add	r3, r1
 801d6f6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d6f8:	f3ef 8310 	mrs	r3, PRIMASK
 801d6fc:	61bb      	str	r3, [r7, #24]
  return(result);
 801d6fe:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801d700:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801d702:	b672      	cpsid	i
}
 801d704:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801d706:	4b46      	ldr	r3, [pc, #280]	; (801d820 <UTIL_SEQ_Run+0x1f0>)
 801d708:	681b      	ldr	r3, [r3, #0]
 801d70a:	2201      	movs	r2, #1
 801d70c:	fa02 f303 	lsl.w	r3, r2, r3
 801d710:	43da      	mvns	r2, r3
 801d712:	4b3e      	ldr	r3, [pc, #248]	; (801d80c <UTIL_SEQ_Run+0x1dc>)
 801d714:	681b      	ldr	r3, [r3, #0]
 801d716:	4013      	ands	r3, r2
 801d718:	4a3c      	ldr	r2, [pc, #240]	; (801d80c <UTIL_SEQ_Run+0x1dc>)
 801d71a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801d71c:	2301      	movs	r3, #1
 801d71e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d720:	e013      	b.n	801d74a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801d722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d724:	3b01      	subs	r3, #1
 801d726:	4a3d      	ldr	r2, [pc, #244]	; (801d81c <UTIL_SEQ_Run+0x1ec>)
 801d728:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801d72c:	4b3c      	ldr	r3, [pc, #240]	; (801d820 <UTIL_SEQ_Run+0x1f0>)
 801d72e:	681b      	ldr	r3, [r3, #0]
 801d730:	2201      	movs	r2, #1
 801d732:	fa02 f303 	lsl.w	r3, r2, r3
 801d736:	43da      	mvns	r2, r3
 801d738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d73a:	3b01      	subs	r3, #1
 801d73c:	400a      	ands	r2, r1
 801d73e:	4937      	ldr	r1, [pc, #220]	; (801d81c <UTIL_SEQ_Run+0x1ec>)
 801d740:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801d744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d746:	3b01      	subs	r3, #1
 801d748:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d74a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	d1e8      	bne.n	801d722 <UTIL_SEQ_Run+0xf2>
 801d750:	6a3b      	ldr	r3, [r7, #32]
 801d752:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d754:	697b      	ldr	r3, [r7, #20]
 801d756:	f383 8810 	msr	PRIMASK, r3
}
 801d75a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801d75c:	4b30      	ldr	r3, [pc, #192]	; (801d820 <UTIL_SEQ_Run+0x1f0>)
 801d75e:	681b      	ldr	r3, [r3, #0]
 801d760:	4a30      	ldr	r2, [pc, #192]	; (801d824 <UTIL_SEQ_Run+0x1f4>)
 801d762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d766:	4798      	blx	r3

    local_taskset = TaskSet;
 801d768:	4b28      	ldr	r3, [pc, #160]	; (801d80c <UTIL_SEQ_Run+0x1dc>)
 801d76a:	681b      	ldr	r3, [r3, #0]
 801d76c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801d76e:	4b28      	ldr	r3, [pc, #160]	; (801d810 <UTIL_SEQ_Run+0x1e0>)
 801d770:	681b      	ldr	r3, [r3, #0]
 801d772:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801d774:	4b27      	ldr	r3, [pc, #156]	; (801d814 <UTIL_SEQ_Run+0x1e4>)
 801d776:	681b      	ldr	r3, [r3, #0]
 801d778:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801d77a:	4b27      	ldr	r3, [pc, #156]	; (801d818 <UTIL_SEQ_Run+0x1e8>)
 801d77c:	681b      	ldr	r3, [r3, #0]
 801d77e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801d780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d784:	401a      	ands	r2, r3
 801d786:	4b20      	ldr	r3, [pc, #128]	; (801d808 <UTIL_SEQ_Run+0x1d8>)
 801d788:	681b      	ldr	r3, [r3, #0]
 801d78a:	4013      	ands	r3, r2
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	d005      	beq.n	801d79c <UTIL_SEQ_Run+0x16c>
 801d790:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d794:	4013      	ands	r3, r2
 801d796:	2b00      	cmp	r3, #0
 801d798:	f43f af64 	beq.w	801d664 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801d79c:	4b20      	ldr	r3, [pc, #128]	; (801d820 <UTIL_SEQ_Run+0x1f0>)
 801d79e:	f04f 32ff 	mov.w	r2, #4294967295
 801d7a2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801d7a4:	f000 f88e 	bl	801d8c4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d7a8:	f3ef 8310 	mrs	r3, PRIMASK
 801d7ac:	613b      	str	r3, [r7, #16]
  return(result);
 801d7ae:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801d7b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d7b2:	b672      	cpsid	i
}
 801d7b4:	bf00      	nop
  local_taskset = TaskSet;
 801d7b6:	4b15      	ldr	r3, [pc, #84]	; (801d80c <UTIL_SEQ_Run+0x1dc>)
 801d7b8:	681b      	ldr	r3, [r3, #0]
 801d7ba:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801d7bc:	4b14      	ldr	r3, [pc, #80]	; (801d810 <UTIL_SEQ_Run+0x1e0>)
 801d7be:	681b      	ldr	r3, [r3, #0]
 801d7c0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801d7c2:	4b14      	ldr	r3, [pc, #80]	; (801d814 <UTIL_SEQ_Run+0x1e4>)
 801d7c4:	681b      	ldr	r3, [r3, #0]
 801d7c6:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801d7c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7cc:	401a      	ands	r2, r3
 801d7ce:	4b0e      	ldr	r3, [pc, #56]	; (801d808 <UTIL_SEQ_Run+0x1d8>)
 801d7d0:	681b      	ldr	r3, [r3, #0]
 801d7d2:	4013      	ands	r3, r2
 801d7d4:	2b00      	cmp	r3, #0
 801d7d6:	d107      	bne.n	801d7e8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801d7d8:	4b0f      	ldr	r3, [pc, #60]	; (801d818 <UTIL_SEQ_Run+0x1e8>)
 801d7da:	681a      	ldr	r2, [r3, #0]
 801d7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7de:	4013      	ands	r3, r2
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d101      	bne.n	801d7e8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801d7e4:	f7e5 f81a 	bl	800281c <UTIL_SEQ_Idle>
 801d7e8:	69fb      	ldr	r3, [r7, #28]
 801d7ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7ec:	68fb      	ldr	r3, [r7, #12]
 801d7ee:	f383 8810 	msr	PRIMASK, r3
}
 801d7f2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801d7f4:	f000 f86c 	bl	801d8d0 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801d7f8:	4a03      	ldr	r2, [pc, #12]	; (801d808 <UTIL_SEQ_Run+0x1d8>)
 801d7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7fc:	6013      	str	r3, [r2, #0]

  return;
 801d7fe:	bf00      	nop
}
 801d800:	3740      	adds	r7, #64	; 0x40
 801d802:	46bd      	mov	sp, r7
 801d804:	bd80      	pop	{r7, pc}
 801d806:	bf00      	nop
 801d808:	20000170 	.word	0x20000170
 801d80c:	20001f98 	.word	0x20001f98
 801d810:	20001f9c 	.word	0x20001f9c
 801d814:	2000016c 	.word	0x2000016c
 801d818:	20001fa0 	.word	0x20001fa0
 801d81c:	20001fb8 	.word	0x20001fb8
 801d820:	20001fa4 	.word	0x20001fa4
 801d824:	20001fa8 	.word	0x20001fa8

0801d828 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801d828:	b580      	push	{r7, lr}
 801d82a:	b088      	sub	sp, #32
 801d82c:	af00      	add	r7, sp, #0
 801d82e:	60f8      	str	r0, [r7, #12]
 801d830:	60b9      	str	r1, [r7, #8]
 801d832:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d834:	f3ef 8310 	mrs	r3, PRIMASK
 801d838:	617b      	str	r3, [r7, #20]
  return(result);
 801d83a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801d83c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d83e:	b672      	cpsid	i
}
 801d840:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801d842:	68f8      	ldr	r0, [r7, #12]
 801d844:	f000 f84a 	bl	801d8dc <SEQ_BitPosition>
 801d848:	4603      	mov	r3, r0
 801d84a:	4619      	mov	r1, r3
 801d84c:	4a06      	ldr	r2, [pc, #24]	; (801d868 <UTIL_SEQ_RegTask+0x40>)
 801d84e:	687b      	ldr	r3, [r7, #4]
 801d850:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801d854:	69fb      	ldr	r3, [r7, #28]
 801d856:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d858:	69bb      	ldr	r3, [r7, #24]
 801d85a:	f383 8810 	msr	PRIMASK, r3
}
 801d85e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801d860:	bf00      	nop
}
 801d862:	3720      	adds	r7, #32
 801d864:	46bd      	mov	sp, r7
 801d866:	bd80      	pop	{r7, pc}
 801d868:	20001fa8 	.word	0x20001fa8

0801d86c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801d86c:	b480      	push	{r7}
 801d86e:	b087      	sub	sp, #28
 801d870:	af00      	add	r7, sp, #0
 801d872:	6078      	str	r0, [r7, #4]
 801d874:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d876:	f3ef 8310 	mrs	r3, PRIMASK
 801d87a:	60fb      	str	r3, [r7, #12]
  return(result);
 801d87c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801d87e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d880:	b672      	cpsid	i
}
 801d882:	bf00      	nop

  TaskSet |= TaskId_bm;
 801d884:	4b0d      	ldr	r3, [pc, #52]	; (801d8bc <UTIL_SEQ_SetTask+0x50>)
 801d886:	681a      	ldr	r2, [r3, #0]
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	4313      	orrs	r3, r2
 801d88c:	4a0b      	ldr	r2, [pc, #44]	; (801d8bc <UTIL_SEQ_SetTask+0x50>)
 801d88e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801d890:	4a0b      	ldr	r2, [pc, #44]	; (801d8c0 <UTIL_SEQ_SetTask+0x54>)
 801d892:	683b      	ldr	r3, [r7, #0]
 801d894:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d898:	687b      	ldr	r3, [r7, #4]
 801d89a:	431a      	orrs	r2, r3
 801d89c:	4908      	ldr	r1, [pc, #32]	; (801d8c0 <UTIL_SEQ_SetTask+0x54>)
 801d89e:	683b      	ldr	r3, [r7, #0]
 801d8a0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801d8a4:	697b      	ldr	r3, [r7, #20]
 801d8a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8a8:	693b      	ldr	r3, [r7, #16]
 801d8aa:	f383 8810 	msr	PRIMASK, r3
}
 801d8ae:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801d8b0:	bf00      	nop
}
 801d8b2:	371c      	adds	r7, #28
 801d8b4:	46bd      	mov	sp, r7
 801d8b6:	bc80      	pop	{r7}
 801d8b8:	4770      	bx	lr
 801d8ba:	bf00      	nop
 801d8bc:	20001f98 	.word	0x20001f98
 801d8c0:	20001fb8 	.word	0x20001fb8

0801d8c4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801d8c4:	b480      	push	{r7}
 801d8c6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801d8c8:	bf00      	nop
}
 801d8ca:	46bd      	mov	sp, r7
 801d8cc:	bc80      	pop	{r7}
 801d8ce:	4770      	bx	lr

0801d8d0 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801d8d0:	b480      	push	{r7}
 801d8d2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801d8d4:	bf00      	nop
}
 801d8d6:	46bd      	mov	sp, r7
 801d8d8:	bc80      	pop	{r7}
 801d8da:	4770      	bx	lr

0801d8dc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801d8dc:	b480      	push	{r7}
 801d8de:	b085      	sub	sp, #20
 801d8e0:	af00      	add	r7, sp, #0
 801d8e2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801d8e4:	2300      	movs	r3, #0
 801d8e6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801d8e8:	687b      	ldr	r3, [r7, #4]
 801d8ea:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801d8ec:	68bb      	ldr	r3, [r7, #8]
 801d8ee:	0c1b      	lsrs	r3, r3, #16
 801d8f0:	041b      	lsls	r3, r3, #16
 801d8f2:	2b00      	cmp	r3, #0
 801d8f4:	d104      	bne.n	801d900 <SEQ_BitPosition+0x24>
 801d8f6:	2310      	movs	r3, #16
 801d8f8:	73fb      	strb	r3, [r7, #15]
 801d8fa:	68bb      	ldr	r3, [r7, #8]
 801d8fc:	041b      	lsls	r3, r3, #16
 801d8fe:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801d900:	68bb      	ldr	r3, [r7, #8]
 801d902:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801d906:	2b00      	cmp	r3, #0
 801d908:	d105      	bne.n	801d916 <SEQ_BitPosition+0x3a>
 801d90a:	7bfb      	ldrb	r3, [r7, #15]
 801d90c:	3308      	adds	r3, #8
 801d90e:	73fb      	strb	r3, [r7, #15]
 801d910:	68bb      	ldr	r3, [r7, #8]
 801d912:	021b      	lsls	r3, r3, #8
 801d914:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801d916:	68bb      	ldr	r3, [r7, #8]
 801d918:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801d91c:	2b00      	cmp	r3, #0
 801d91e:	d105      	bne.n	801d92c <SEQ_BitPosition+0x50>
 801d920:	7bfb      	ldrb	r3, [r7, #15]
 801d922:	3304      	adds	r3, #4
 801d924:	73fb      	strb	r3, [r7, #15]
 801d926:	68bb      	ldr	r3, [r7, #8]
 801d928:	011b      	lsls	r3, r3, #4
 801d92a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801d92c:	68bb      	ldr	r3, [r7, #8]
 801d92e:	0f1b      	lsrs	r3, r3, #28
 801d930:	4a06      	ldr	r2, [pc, #24]	; (801d94c <SEQ_BitPosition+0x70>)
 801d932:	5cd2      	ldrb	r2, [r2, r3]
 801d934:	7bfb      	ldrb	r3, [r7, #15]
 801d936:	4413      	add	r3, r2
 801d938:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801d93a:	7bfb      	ldrb	r3, [r7, #15]
 801d93c:	f1c3 031f 	rsb	r3, r3, #31
 801d940:	b2db      	uxtb	r3, r3
}
 801d942:	4618      	mov	r0, r3
 801d944:	3714      	adds	r7, #20
 801d946:	46bd      	mov	sp, r7
 801d948:	bc80      	pop	{r7}
 801d94a:	4770      	bx	lr
 801d94c:	0801f4ac 	.word	0x0801f4ac

0801d950 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801d950:	b580      	push	{r7, lr}
 801d952:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801d954:	4b04      	ldr	r3, [pc, #16]	; (801d968 <UTIL_TIMER_Init+0x18>)
 801d956:	2200      	movs	r2, #0
 801d958:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801d95a:	4b04      	ldr	r3, [pc, #16]	; (801d96c <UTIL_TIMER_Init+0x1c>)
 801d95c:	681b      	ldr	r3, [r3, #0]
 801d95e:	4798      	blx	r3
 801d960:	4603      	mov	r3, r0
}
 801d962:	4618      	mov	r0, r3
 801d964:	bd80      	pop	{r7, pc}
 801d966:	bf00      	nop
 801d968:	20001fc0 	.word	0x20001fc0
 801d96c:	0801efb4 	.word	0x0801efb4

0801d970 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801d970:	b580      	push	{r7, lr}
 801d972:	b084      	sub	sp, #16
 801d974:	af00      	add	r7, sp, #0
 801d976:	60f8      	str	r0, [r7, #12]
 801d978:	60b9      	str	r1, [r7, #8]
 801d97a:	603b      	str	r3, [r7, #0]
 801d97c:	4613      	mov	r3, r2
 801d97e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801d980:	68fb      	ldr	r3, [r7, #12]
 801d982:	2b00      	cmp	r3, #0
 801d984:	d023      	beq.n	801d9ce <UTIL_TIMER_Create+0x5e>
 801d986:	683b      	ldr	r3, [r7, #0]
 801d988:	2b00      	cmp	r3, #0
 801d98a:	d020      	beq.n	801d9ce <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801d98c:	68fb      	ldr	r3, [r7, #12]
 801d98e:	2200      	movs	r2, #0
 801d990:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801d992:	4b11      	ldr	r3, [pc, #68]	; (801d9d8 <UTIL_TIMER_Create+0x68>)
 801d994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d996:	68b8      	ldr	r0, [r7, #8]
 801d998:	4798      	blx	r3
 801d99a:	4602      	mov	r2, r0
 801d99c:	68fb      	ldr	r3, [r7, #12]
 801d99e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801d9a0:	68fb      	ldr	r3, [r7, #12]
 801d9a2:	2200      	movs	r2, #0
 801d9a4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801d9a6:	68fb      	ldr	r3, [r7, #12]
 801d9a8:	2200      	movs	r2, #0
 801d9aa:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801d9ac:	68fb      	ldr	r3, [r7, #12]
 801d9ae:	2200      	movs	r2, #0
 801d9b0:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801d9b2:	68fb      	ldr	r3, [r7, #12]
 801d9b4:	683a      	ldr	r2, [r7, #0]
 801d9b6:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801d9b8:	68fb      	ldr	r3, [r7, #12]
 801d9ba:	69ba      	ldr	r2, [r7, #24]
 801d9bc:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801d9be:	68fb      	ldr	r3, [r7, #12]
 801d9c0:	79fa      	ldrb	r2, [r7, #7]
 801d9c2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801d9c4:	68fb      	ldr	r3, [r7, #12]
 801d9c6:	2200      	movs	r2, #0
 801d9c8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801d9ca:	2300      	movs	r3, #0
 801d9cc:	e000      	b.n	801d9d0 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801d9ce:	2301      	movs	r3, #1
  }
}
 801d9d0:	4618      	mov	r0, r3
 801d9d2:	3710      	adds	r7, #16
 801d9d4:	46bd      	mov	sp, r7
 801d9d6:	bd80      	pop	{r7, pc}
 801d9d8:	0801efb4 	.word	0x0801efb4

0801d9dc <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801d9dc:	b580      	push	{r7, lr}
 801d9de:	b08a      	sub	sp, #40	; 0x28
 801d9e0:	af00      	add	r7, sp, #0
 801d9e2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d9e4:	2300      	movs	r3, #0
 801d9e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	2b00      	cmp	r3, #0
 801d9ee:	d056      	beq.n	801da9e <UTIL_TIMER_Start+0xc2>
 801d9f0:	6878      	ldr	r0, [r7, #4]
 801d9f2:	f000 f9a9 	bl	801dd48 <TimerExists>
 801d9f6:	4603      	mov	r3, r0
 801d9f8:	f083 0301 	eor.w	r3, r3, #1
 801d9fc:	b2db      	uxtb	r3, r3
 801d9fe:	2b00      	cmp	r3, #0
 801da00:	d04d      	beq.n	801da9e <UTIL_TIMER_Start+0xc2>
 801da02:	687b      	ldr	r3, [r7, #4]
 801da04:	7a5b      	ldrb	r3, [r3, #9]
 801da06:	2b00      	cmp	r3, #0
 801da08:	d149      	bne.n	801da9e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da0a:	f3ef 8310 	mrs	r3, PRIMASK
 801da0e:	613b      	str	r3, [r7, #16]
  return(result);
 801da10:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801da12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801da14:	b672      	cpsid	i
}
 801da16:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801da18:	687b      	ldr	r3, [r7, #4]
 801da1a:	685b      	ldr	r3, [r3, #4]
 801da1c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801da1e:	4b24      	ldr	r3, [pc, #144]	; (801dab0 <UTIL_TIMER_Start+0xd4>)
 801da20:	6a1b      	ldr	r3, [r3, #32]
 801da22:	4798      	blx	r3
 801da24:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801da26:	6a3a      	ldr	r2, [r7, #32]
 801da28:	69bb      	ldr	r3, [r7, #24]
 801da2a:	429a      	cmp	r2, r3
 801da2c:	d201      	bcs.n	801da32 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801da2e:	69bb      	ldr	r3, [r7, #24]
 801da30:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801da32:	687b      	ldr	r3, [r7, #4]
 801da34:	6a3a      	ldr	r2, [r7, #32]
 801da36:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801da38:	687b      	ldr	r3, [r7, #4]
 801da3a:	2200      	movs	r2, #0
 801da3c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801da3e:	687b      	ldr	r3, [r7, #4]
 801da40:	2201      	movs	r2, #1
 801da42:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801da44:	687b      	ldr	r3, [r7, #4]
 801da46:	2200      	movs	r2, #0
 801da48:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801da4a:	4b1a      	ldr	r3, [pc, #104]	; (801dab4 <UTIL_TIMER_Start+0xd8>)
 801da4c:	681b      	ldr	r3, [r3, #0]
 801da4e:	2b00      	cmp	r3, #0
 801da50:	d106      	bne.n	801da60 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801da52:	4b17      	ldr	r3, [pc, #92]	; (801dab0 <UTIL_TIMER_Start+0xd4>)
 801da54:	691b      	ldr	r3, [r3, #16]
 801da56:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801da58:	6878      	ldr	r0, [r7, #4]
 801da5a:	f000 f9eb 	bl	801de34 <TimerInsertNewHeadTimer>
 801da5e:	e017      	b.n	801da90 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801da60:	4b13      	ldr	r3, [pc, #76]	; (801dab0 <UTIL_TIMER_Start+0xd4>)
 801da62:	699b      	ldr	r3, [r3, #24]
 801da64:	4798      	blx	r3
 801da66:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	681a      	ldr	r2, [r3, #0]
 801da6c:	697b      	ldr	r3, [r7, #20]
 801da6e:	441a      	add	r2, r3
 801da70:	687b      	ldr	r3, [r7, #4]
 801da72:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	681a      	ldr	r2, [r3, #0]
 801da78:	4b0e      	ldr	r3, [pc, #56]	; (801dab4 <UTIL_TIMER_Start+0xd8>)
 801da7a:	681b      	ldr	r3, [r3, #0]
 801da7c:	681b      	ldr	r3, [r3, #0]
 801da7e:	429a      	cmp	r2, r3
 801da80:	d203      	bcs.n	801da8a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801da82:	6878      	ldr	r0, [r7, #4]
 801da84:	f000 f9d6 	bl	801de34 <TimerInsertNewHeadTimer>
 801da88:	e002      	b.n	801da90 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801da8a:	6878      	ldr	r0, [r7, #4]
 801da8c:	f000 f9a2 	bl	801ddd4 <TimerInsertTimer>
 801da90:	69fb      	ldr	r3, [r7, #28]
 801da92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da94:	68fb      	ldr	r3, [r7, #12]
 801da96:	f383 8810 	msr	PRIMASK, r3
}
 801da9a:	bf00      	nop
  {
 801da9c:	e002      	b.n	801daa4 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801da9e:	2301      	movs	r3, #1
 801daa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801daa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801daa8:	4618      	mov	r0, r3
 801daaa:	3728      	adds	r7, #40	; 0x28
 801daac:	46bd      	mov	sp, r7
 801daae:	bd80      	pop	{r7, pc}
 801dab0:	0801efb4 	.word	0x0801efb4
 801dab4:	20001fc0 	.word	0x20001fc0

0801dab8 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801dab8:	b580      	push	{r7, lr}
 801daba:	b088      	sub	sp, #32
 801dabc:	af00      	add	r7, sp, #0
 801dabe:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801dac0:	2300      	movs	r3, #0
 801dac2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	d05b      	beq.n	801db82 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801daca:	f3ef 8310 	mrs	r3, PRIMASK
 801dace:	60fb      	str	r3, [r7, #12]
  return(result);
 801dad0:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801dad2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801dad4:	b672      	cpsid	i
}
 801dad6:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801dad8:	4b2d      	ldr	r3, [pc, #180]	; (801db90 <UTIL_TIMER_Stop+0xd8>)
 801dada:	681b      	ldr	r3, [r3, #0]
 801dadc:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801dade:	4b2c      	ldr	r3, [pc, #176]	; (801db90 <UTIL_TIMER_Stop+0xd8>)
 801dae0:	681b      	ldr	r3, [r3, #0]
 801dae2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	2201      	movs	r2, #1
 801dae8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801daea:	4b29      	ldr	r3, [pc, #164]	; (801db90 <UTIL_TIMER_Stop+0xd8>)
 801daec:	681b      	ldr	r3, [r3, #0]
 801daee:	2b00      	cmp	r3, #0
 801daf0:	d041      	beq.n	801db76 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	2200      	movs	r2, #0
 801daf6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801daf8:	4b25      	ldr	r3, [pc, #148]	; (801db90 <UTIL_TIMER_Stop+0xd8>)
 801dafa:	681b      	ldr	r3, [r3, #0]
 801dafc:	687a      	ldr	r2, [r7, #4]
 801dafe:	429a      	cmp	r2, r3
 801db00:	d134      	bne.n	801db6c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801db02:	4b23      	ldr	r3, [pc, #140]	; (801db90 <UTIL_TIMER_Stop+0xd8>)
 801db04:	681b      	ldr	r3, [r3, #0]
 801db06:	2200      	movs	r2, #0
 801db08:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801db0a:	4b21      	ldr	r3, [pc, #132]	; (801db90 <UTIL_TIMER_Stop+0xd8>)
 801db0c:	681b      	ldr	r3, [r3, #0]
 801db0e:	695b      	ldr	r3, [r3, #20]
 801db10:	2b00      	cmp	r3, #0
 801db12:	d00a      	beq.n	801db2a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801db14:	4b1e      	ldr	r3, [pc, #120]	; (801db90 <UTIL_TIMER_Stop+0xd8>)
 801db16:	681b      	ldr	r3, [r3, #0]
 801db18:	695b      	ldr	r3, [r3, #20]
 801db1a:	4a1d      	ldr	r2, [pc, #116]	; (801db90 <UTIL_TIMER_Stop+0xd8>)
 801db1c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801db1e:	4b1c      	ldr	r3, [pc, #112]	; (801db90 <UTIL_TIMER_Stop+0xd8>)
 801db20:	681b      	ldr	r3, [r3, #0]
 801db22:	4618      	mov	r0, r3
 801db24:	f000 f92c 	bl	801dd80 <TimerSetTimeout>
 801db28:	e023      	b.n	801db72 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801db2a:	4b1a      	ldr	r3, [pc, #104]	; (801db94 <UTIL_TIMER_Stop+0xdc>)
 801db2c:	68db      	ldr	r3, [r3, #12]
 801db2e:	4798      	blx	r3
            TimerListHead = NULL;
 801db30:	4b17      	ldr	r3, [pc, #92]	; (801db90 <UTIL_TIMER_Stop+0xd8>)
 801db32:	2200      	movs	r2, #0
 801db34:	601a      	str	r2, [r3, #0]
 801db36:	e01c      	b.n	801db72 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801db38:	697a      	ldr	r2, [r7, #20]
 801db3a:	687b      	ldr	r3, [r7, #4]
 801db3c:	429a      	cmp	r2, r3
 801db3e:	d110      	bne.n	801db62 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801db40:	697b      	ldr	r3, [r7, #20]
 801db42:	695b      	ldr	r3, [r3, #20]
 801db44:	2b00      	cmp	r3, #0
 801db46:	d006      	beq.n	801db56 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801db48:	697b      	ldr	r3, [r7, #20]
 801db4a:	695b      	ldr	r3, [r3, #20]
 801db4c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801db4e:	69bb      	ldr	r3, [r7, #24]
 801db50:	697a      	ldr	r2, [r7, #20]
 801db52:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801db54:	e00d      	b.n	801db72 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801db56:	2300      	movs	r3, #0
 801db58:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801db5a:	69bb      	ldr	r3, [r7, #24]
 801db5c:	697a      	ldr	r2, [r7, #20]
 801db5e:	615a      	str	r2, [r3, #20]
            break;
 801db60:	e007      	b.n	801db72 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801db62:	697b      	ldr	r3, [r7, #20]
 801db64:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801db66:	697b      	ldr	r3, [r7, #20]
 801db68:	695b      	ldr	r3, [r3, #20]
 801db6a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801db6c:	697b      	ldr	r3, [r7, #20]
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d1e2      	bne.n	801db38 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801db72:	2300      	movs	r3, #0
 801db74:	77fb      	strb	r3, [r7, #31]
 801db76:	693b      	ldr	r3, [r7, #16]
 801db78:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db7a:	68bb      	ldr	r3, [r7, #8]
 801db7c:	f383 8810 	msr	PRIMASK, r3
}
 801db80:	e001      	b.n	801db86 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801db82:	2301      	movs	r3, #1
 801db84:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801db86:	7ffb      	ldrb	r3, [r7, #31]
}
 801db88:	4618      	mov	r0, r3
 801db8a:	3720      	adds	r7, #32
 801db8c:	46bd      	mov	sp, r7
 801db8e:	bd80      	pop	{r7, pc}
 801db90:	20001fc0 	.word	0x20001fc0
 801db94:	0801efb4 	.word	0x0801efb4

0801db98 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801db98:	b580      	push	{r7, lr}
 801db9a:	b084      	sub	sp, #16
 801db9c:	af00      	add	r7, sp, #0
 801db9e:	6078      	str	r0, [r7, #4]
 801dba0:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801dba2:	2300      	movs	r3, #0
 801dba4:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801dba6:	687b      	ldr	r3, [r7, #4]
 801dba8:	2b00      	cmp	r3, #0
 801dbaa:	d102      	bne.n	801dbb2 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801dbac:	2301      	movs	r3, #1
 801dbae:	73fb      	strb	r3, [r7, #15]
 801dbb0:	e014      	b.n	801dbdc <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801dbb2:	4b0d      	ldr	r3, [pc, #52]	; (801dbe8 <UTIL_TIMER_SetPeriod+0x50>)
 801dbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dbb6:	6838      	ldr	r0, [r7, #0]
 801dbb8:	4798      	blx	r3
 801dbba:	4602      	mov	r2, r0
 801dbbc:	687b      	ldr	r3, [r7, #4]
 801dbbe:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801dbc0:	6878      	ldr	r0, [r7, #4]
 801dbc2:	f000 f8c1 	bl	801dd48 <TimerExists>
 801dbc6:	4603      	mov	r3, r0
 801dbc8:	2b00      	cmp	r3, #0
 801dbca:	d007      	beq.n	801dbdc <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801dbcc:	6878      	ldr	r0, [r7, #4]
 801dbce:	f7ff ff73 	bl	801dab8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801dbd2:	6878      	ldr	r0, [r7, #4]
 801dbd4:	f7ff ff02 	bl	801d9dc <UTIL_TIMER_Start>
 801dbd8:	4603      	mov	r3, r0
 801dbda:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801dbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 801dbde:	4618      	mov	r0, r3
 801dbe0:	3710      	adds	r7, #16
 801dbe2:	46bd      	mov	sp, r7
 801dbe4:	bd80      	pop	{r7, pc}
 801dbe6:	bf00      	nop
 801dbe8:	0801efb4 	.word	0x0801efb4

0801dbec <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801dbec:	b590      	push	{r4, r7, lr}
 801dbee:	b089      	sub	sp, #36	; 0x24
 801dbf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dbf2:	f3ef 8310 	mrs	r3, PRIMASK
 801dbf6:	60bb      	str	r3, [r7, #8]
  return(result);
 801dbf8:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801dbfa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801dbfc:	b672      	cpsid	i
}
 801dbfe:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801dc00:	4b38      	ldr	r3, [pc, #224]	; (801dce4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801dc02:	695b      	ldr	r3, [r3, #20]
 801dc04:	4798      	blx	r3
 801dc06:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801dc08:	4b36      	ldr	r3, [pc, #216]	; (801dce4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801dc0a:	691b      	ldr	r3, [r3, #16]
 801dc0c:	4798      	blx	r3
 801dc0e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801dc10:	693a      	ldr	r2, [r7, #16]
 801dc12:	697b      	ldr	r3, [r7, #20]
 801dc14:	1ad3      	subs	r3, r2, r3
 801dc16:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801dc18:	4b33      	ldr	r3, [pc, #204]	; (801dce8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dc1a:	681b      	ldr	r3, [r3, #0]
 801dc1c:	2b00      	cmp	r3, #0
 801dc1e:	d037      	beq.n	801dc90 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801dc20:	4b31      	ldr	r3, [pc, #196]	; (801dce8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dc22:	681b      	ldr	r3, [r3, #0]
 801dc24:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801dc26:	69fb      	ldr	r3, [r7, #28]
 801dc28:	681b      	ldr	r3, [r3, #0]
 801dc2a:	68fa      	ldr	r2, [r7, #12]
 801dc2c:	429a      	cmp	r2, r3
 801dc2e:	d206      	bcs.n	801dc3e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801dc30:	69fb      	ldr	r3, [r7, #28]
 801dc32:	681a      	ldr	r2, [r3, #0]
 801dc34:	68fb      	ldr	r3, [r7, #12]
 801dc36:	1ad2      	subs	r2, r2, r3
 801dc38:	69fb      	ldr	r3, [r7, #28]
 801dc3a:	601a      	str	r2, [r3, #0]
 801dc3c:	e002      	b.n	801dc44 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801dc3e:	69fb      	ldr	r3, [r7, #28]
 801dc40:	2200      	movs	r2, #0
 801dc42:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801dc44:	69fb      	ldr	r3, [r7, #28]
 801dc46:	695b      	ldr	r3, [r3, #20]
 801dc48:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801dc4a:	69fb      	ldr	r3, [r7, #28]
 801dc4c:	2b00      	cmp	r3, #0
 801dc4e:	d1ea      	bne.n	801dc26 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801dc50:	e01e      	b.n	801dc90 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801dc52:	4b25      	ldr	r3, [pc, #148]	; (801dce8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dc54:	681b      	ldr	r3, [r3, #0]
 801dc56:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801dc58:	4b23      	ldr	r3, [pc, #140]	; (801dce8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	695b      	ldr	r3, [r3, #20]
 801dc5e:	4a22      	ldr	r2, [pc, #136]	; (801dce8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dc60:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801dc62:	69fb      	ldr	r3, [r7, #28]
 801dc64:	2200      	movs	r2, #0
 801dc66:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801dc68:	69fb      	ldr	r3, [r7, #28]
 801dc6a:	2200      	movs	r2, #0
 801dc6c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801dc6e:	69fb      	ldr	r3, [r7, #28]
 801dc70:	68db      	ldr	r3, [r3, #12]
 801dc72:	69fa      	ldr	r2, [r7, #28]
 801dc74:	6912      	ldr	r2, [r2, #16]
 801dc76:	4610      	mov	r0, r2
 801dc78:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801dc7a:	69fb      	ldr	r3, [r7, #28]
 801dc7c:	7adb      	ldrb	r3, [r3, #11]
 801dc7e:	2b01      	cmp	r3, #1
 801dc80:	d106      	bne.n	801dc90 <UTIL_TIMER_IRQ_Handler+0xa4>
 801dc82:	69fb      	ldr	r3, [r7, #28]
 801dc84:	7a9b      	ldrb	r3, [r3, #10]
 801dc86:	2b00      	cmp	r3, #0
 801dc88:	d102      	bne.n	801dc90 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801dc8a:	69f8      	ldr	r0, [r7, #28]
 801dc8c:	f7ff fea6 	bl	801d9dc <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801dc90:	4b15      	ldr	r3, [pc, #84]	; (801dce8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dc92:	681b      	ldr	r3, [r3, #0]
 801dc94:	2b00      	cmp	r3, #0
 801dc96:	d00d      	beq.n	801dcb4 <UTIL_TIMER_IRQ_Handler+0xc8>
 801dc98:	4b13      	ldr	r3, [pc, #76]	; (801dce8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dc9a:	681b      	ldr	r3, [r3, #0]
 801dc9c:	681b      	ldr	r3, [r3, #0]
 801dc9e:	2b00      	cmp	r3, #0
 801dca0:	d0d7      	beq.n	801dc52 <UTIL_TIMER_IRQ_Handler+0x66>
 801dca2:	4b11      	ldr	r3, [pc, #68]	; (801dce8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dca4:	681b      	ldr	r3, [r3, #0]
 801dca6:	681c      	ldr	r4, [r3, #0]
 801dca8:	4b0e      	ldr	r3, [pc, #56]	; (801dce4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801dcaa:	699b      	ldr	r3, [r3, #24]
 801dcac:	4798      	blx	r3
 801dcae:	4603      	mov	r3, r0
 801dcb0:	429c      	cmp	r4, r3
 801dcb2:	d3ce      	bcc.n	801dc52 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801dcb4:	4b0c      	ldr	r3, [pc, #48]	; (801dce8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dcb6:	681b      	ldr	r3, [r3, #0]
 801dcb8:	2b00      	cmp	r3, #0
 801dcba:	d009      	beq.n	801dcd0 <UTIL_TIMER_IRQ_Handler+0xe4>
 801dcbc:	4b0a      	ldr	r3, [pc, #40]	; (801dce8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dcbe:	681b      	ldr	r3, [r3, #0]
 801dcc0:	7a1b      	ldrb	r3, [r3, #8]
 801dcc2:	2b00      	cmp	r3, #0
 801dcc4:	d104      	bne.n	801dcd0 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801dcc6:	4b08      	ldr	r3, [pc, #32]	; (801dce8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dcc8:	681b      	ldr	r3, [r3, #0]
 801dcca:	4618      	mov	r0, r3
 801dccc:	f000 f858 	bl	801dd80 <TimerSetTimeout>
 801dcd0:	69bb      	ldr	r3, [r7, #24]
 801dcd2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	f383 8810 	msr	PRIMASK, r3
}
 801dcda:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801dcdc:	bf00      	nop
 801dcde:	3724      	adds	r7, #36	; 0x24
 801dce0:	46bd      	mov	sp, r7
 801dce2:	bd90      	pop	{r4, r7, pc}
 801dce4:	0801efb4 	.word	0x0801efb4
 801dce8:	20001fc0 	.word	0x20001fc0

0801dcec <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801dcec:	b580      	push	{r7, lr}
 801dcee:	b082      	sub	sp, #8
 801dcf0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801dcf2:	4b06      	ldr	r3, [pc, #24]	; (801dd0c <UTIL_TIMER_GetCurrentTime+0x20>)
 801dcf4:	69db      	ldr	r3, [r3, #28]
 801dcf6:	4798      	blx	r3
 801dcf8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801dcfa:	4b04      	ldr	r3, [pc, #16]	; (801dd0c <UTIL_TIMER_GetCurrentTime+0x20>)
 801dcfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dcfe:	6878      	ldr	r0, [r7, #4]
 801dd00:	4798      	blx	r3
 801dd02:	4603      	mov	r3, r0
}
 801dd04:	4618      	mov	r0, r3
 801dd06:	3708      	adds	r7, #8
 801dd08:	46bd      	mov	sp, r7
 801dd0a:	bd80      	pop	{r7, pc}
 801dd0c:	0801efb4 	.word	0x0801efb4

0801dd10 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801dd10:	b580      	push	{r7, lr}
 801dd12:	b084      	sub	sp, #16
 801dd14:	af00      	add	r7, sp, #0
 801dd16:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801dd18:	4b0a      	ldr	r3, [pc, #40]	; (801dd44 <UTIL_TIMER_GetElapsedTime+0x34>)
 801dd1a:	69db      	ldr	r3, [r3, #28]
 801dd1c:	4798      	blx	r3
 801dd1e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801dd20:	4b08      	ldr	r3, [pc, #32]	; (801dd44 <UTIL_TIMER_GetElapsedTime+0x34>)
 801dd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dd24:	6878      	ldr	r0, [r7, #4]
 801dd26:	4798      	blx	r3
 801dd28:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801dd2a:	4b06      	ldr	r3, [pc, #24]	; (801dd44 <UTIL_TIMER_GetElapsedTime+0x34>)
 801dd2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd2e:	68f9      	ldr	r1, [r7, #12]
 801dd30:	68ba      	ldr	r2, [r7, #8]
 801dd32:	1a8a      	subs	r2, r1, r2
 801dd34:	4610      	mov	r0, r2
 801dd36:	4798      	blx	r3
 801dd38:	4603      	mov	r3, r0
}
 801dd3a:	4618      	mov	r0, r3
 801dd3c:	3710      	adds	r7, #16
 801dd3e:	46bd      	mov	sp, r7
 801dd40:	bd80      	pop	{r7, pc}
 801dd42:	bf00      	nop
 801dd44:	0801efb4 	.word	0x0801efb4

0801dd48 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801dd48:	b480      	push	{r7}
 801dd4a:	b085      	sub	sp, #20
 801dd4c:	af00      	add	r7, sp, #0
 801dd4e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801dd50:	4b0a      	ldr	r3, [pc, #40]	; (801dd7c <TimerExists+0x34>)
 801dd52:	681b      	ldr	r3, [r3, #0]
 801dd54:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801dd56:	e008      	b.n	801dd6a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801dd58:	68fa      	ldr	r2, [r7, #12]
 801dd5a:	687b      	ldr	r3, [r7, #4]
 801dd5c:	429a      	cmp	r2, r3
 801dd5e:	d101      	bne.n	801dd64 <TimerExists+0x1c>
    {
      return true;
 801dd60:	2301      	movs	r3, #1
 801dd62:	e006      	b.n	801dd72 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801dd64:	68fb      	ldr	r3, [r7, #12]
 801dd66:	695b      	ldr	r3, [r3, #20]
 801dd68:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801dd6a:	68fb      	ldr	r3, [r7, #12]
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	d1f3      	bne.n	801dd58 <TimerExists+0x10>
  }
  return false;
 801dd70:	2300      	movs	r3, #0
}
 801dd72:	4618      	mov	r0, r3
 801dd74:	3714      	adds	r7, #20
 801dd76:	46bd      	mov	sp, r7
 801dd78:	bc80      	pop	{r7}
 801dd7a:	4770      	bx	lr
 801dd7c:	20001fc0 	.word	0x20001fc0

0801dd80 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801dd80:	b590      	push	{r4, r7, lr}
 801dd82:	b085      	sub	sp, #20
 801dd84:	af00      	add	r7, sp, #0
 801dd86:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801dd88:	4b11      	ldr	r3, [pc, #68]	; (801ddd0 <TimerSetTimeout+0x50>)
 801dd8a:	6a1b      	ldr	r3, [r3, #32]
 801dd8c:	4798      	blx	r3
 801dd8e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	2201      	movs	r2, #1
 801dd94:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801dd96:	687b      	ldr	r3, [r7, #4]
 801dd98:	681c      	ldr	r4, [r3, #0]
 801dd9a:	4b0d      	ldr	r3, [pc, #52]	; (801ddd0 <TimerSetTimeout+0x50>)
 801dd9c:	699b      	ldr	r3, [r3, #24]
 801dd9e:	4798      	blx	r3
 801dda0:	4602      	mov	r2, r0
 801dda2:	68fb      	ldr	r3, [r7, #12]
 801dda4:	4413      	add	r3, r2
 801dda6:	429c      	cmp	r4, r3
 801dda8:	d207      	bcs.n	801ddba <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801ddaa:	4b09      	ldr	r3, [pc, #36]	; (801ddd0 <TimerSetTimeout+0x50>)
 801ddac:	699b      	ldr	r3, [r3, #24]
 801ddae:	4798      	blx	r3
 801ddb0:	4602      	mov	r2, r0
 801ddb2:	68fb      	ldr	r3, [r7, #12]
 801ddb4:	441a      	add	r2, r3
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801ddba:	4b05      	ldr	r3, [pc, #20]	; (801ddd0 <TimerSetTimeout+0x50>)
 801ddbc:	689b      	ldr	r3, [r3, #8]
 801ddbe:	687a      	ldr	r2, [r7, #4]
 801ddc0:	6812      	ldr	r2, [r2, #0]
 801ddc2:	4610      	mov	r0, r2
 801ddc4:	4798      	blx	r3
}
 801ddc6:	bf00      	nop
 801ddc8:	3714      	adds	r7, #20
 801ddca:	46bd      	mov	sp, r7
 801ddcc:	bd90      	pop	{r4, r7, pc}
 801ddce:	bf00      	nop
 801ddd0:	0801efb4 	.word	0x0801efb4

0801ddd4 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801ddd4:	b480      	push	{r7}
 801ddd6:	b085      	sub	sp, #20
 801ddd8:	af00      	add	r7, sp, #0
 801ddda:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801dddc:	4b14      	ldr	r3, [pc, #80]	; (801de30 <TimerInsertTimer+0x5c>)
 801ddde:	681b      	ldr	r3, [r3, #0]
 801dde0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801dde2:	4b13      	ldr	r3, [pc, #76]	; (801de30 <TimerInsertTimer+0x5c>)
 801dde4:	681b      	ldr	r3, [r3, #0]
 801dde6:	695b      	ldr	r3, [r3, #20]
 801dde8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801ddea:	e012      	b.n	801de12 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	681a      	ldr	r2, [r3, #0]
 801ddf0:	68bb      	ldr	r3, [r7, #8]
 801ddf2:	681b      	ldr	r3, [r3, #0]
 801ddf4:	429a      	cmp	r2, r3
 801ddf6:	d905      	bls.n	801de04 <TimerInsertTimer+0x30>
    {
        cur = next;
 801ddf8:	68bb      	ldr	r3, [r7, #8]
 801ddfa:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801ddfc:	68bb      	ldr	r3, [r7, #8]
 801ddfe:	695b      	ldr	r3, [r3, #20]
 801de00:	60bb      	str	r3, [r7, #8]
 801de02:	e006      	b.n	801de12 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801de04:	68fb      	ldr	r3, [r7, #12]
 801de06:	687a      	ldr	r2, [r7, #4]
 801de08:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801de0a:	687b      	ldr	r3, [r7, #4]
 801de0c:	68ba      	ldr	r2, [r7, #8]
 801de0e:	615a      	str	r2, [r3, #20]
        return;
 801de10:	e009      	b.n	801de26 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801de12:	68fb      	ldr	r3, [r7, #12]
 801de14:	695b      	ldr	r3, [r3, #20]
 801de16:	2b00      	cmp	r3, #0
 801de18:	d1e8      	bne.n	801ddec <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801de1a:	68fb      	ldr	r3, [r7, #12]
 801de1c:	687a      	ldr	r2, [r7, #4]
 801de1e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801de20:	687b      	ldr	r3, [r7, #4]
 801de22:	2200      	movs	r2, #0
 801de24:	615a      	str	r2, [r3, #20]
}
 801de26:	3714      	adds	r7, #20
 801de28:	46bd      	mov	sp, r7
 801de2a:	bc80      	pop	{r7}
 801de2c:	4770      	bx	lr
 801de2e:	bf00      	nop
 801de30:	20001fc0 	.word	0x20001fc0

0801de34 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801de34:	b580      	push	{r7, lr}
 801de36:	b084      	sub	sp, #16
 801de38:	af00      	add	r7, sp, #0
 801de3a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801de3c:	4b0b      	ldr	r3, [pc, #44]	; (801de6c <TimerInsertNewHeadTimer+0x38>)
 801de3e:	681b      	ldr	r3, [r3, #0]
 801de40:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801de42:	68fb      	ldr	r3, [r7, #12]
 801de44:	2b00      	cmp	r3, #0
 801de46:	d002      	beq.n	801de4e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801de48:	68fb      	ldr	r3, [r7, #12]
 801de4a:	2200      	movs	r2, #0
 801de4c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801de4e:	687b      	ldr	r3, [r7, #4]
 801de50:	68fa      	ldr	r2, [r7, #12]
 801de52:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801de54:	4a05      	ldr	r2, [pc, #20]	; (801de6c <TimerInsertNewHeadTimer+0x38>)
 801de56:	687b      	ldr	r3, [r7, #4]
 801de58:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801de5a:	4b04      	ldr	r3, [pc, #16]	; (801de6c <TimerInsertNewHeadTimer+0x38>)
 801de5c:	681b      	ldr	r3, [r3, #0]
 801de5e:	4618      	mov	r0, r3
 801de60:	f7ff ff8e 	bl	801dd80 <TimerSetTimeout>
}
 801de64:	bf00      	nop
 801de66:	3710      	adds	r7, #16
 801de68:	46bd      	mov	sp, r7
 801de6a:	bd80      	pop	{r7, pc}
 801de6c:	20001fc0 	.word	0x20001fc0

0801de70 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801de70:	b580      	push	{r7, lr}
 801de72:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801de74:	2218      	movs	r2, #24
 801de76:	2100      	movs	r1, #0
 801de78:	4807      	ldr	r0, [pc, #28]	; (801de98 <UTIL_ADV_TRACE_Init+0x28>)
 801de7a:	f7fe fffa 	bl	801ce72 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801de7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801de82:	2100      	movs	r1, #0
 801de84:	4805      	ldr	r0, [pc, #20]	; (801de9c <UTIL_ADV_TRACE_Init+0x2c>)
 801de86:	f7fe fff4 	bl	801ce72 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801de8a:	4b05      	ldr	r3, [pc, #20]	; (801dea0 <UTIL_ADV_TRACE_Init+0x30>)
 801de8c:	681b      	ldr	r3, [r3, #0]
 801de8e:	4805      	ldr	r0, [pc, #20]	; (801dea4 <UTIL_ADV_TRACE_Init+0x34>)
 801de90:	4798      	blx	r3
 801de92:	4603      	mov	r3, r0
}
 801de94:	4618      	mov	r0, r3
 801de96:	bd80      	pop	{r7, pc}
 801de98:	20001fc4 	.word	0x20001fc4
 801de9c:	20001fdc 	.word	0x20001fdc
 801dea0:	0801eff4 	.word	0x0801eff4
 801dea4:	0801e111 	.word	0x0801e111

0801dea8 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801dea8:	b480      	push	{r7}
 801deaa:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801deac:	4b06      	ldr	r3, [pc, #24]	; (801dec8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801deae:	8a5a      	ldrh	r2, [r3, #18]
 801deb0:	4b05      	ldr	r3, [pc, #20]	; (801dec8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801deb2:	8a1b      	ldrh	r3, [r3, #16]
 801deb4:	429a      	cmp	r2, r3
 801deb6:	d101      	bne.n	801debc <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801deb8:	2301      	movs	r3, #1
 801deba:	e000      	b.n	801debe <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801debc:	2300      	movs	r3, #0
}
 801debe:	4618      	mov	r0, r3
 801dec0:	46bd      	mov	sp, r7
 801dec2:	bc80      	pop	{r7}
 801dec4:	4770      	bx	lr
 801dec6:	bf00      	nop
 801dec8:	20001fc4 	.word	0x20001fc4

0801decc <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801decc:	b408      	push	{r3}
 801dece:	b580      	push	{r7, lr}
 801ded0:	b08d      	sub	sp, #52	; 0x34
 801ded2:	af00      	add	r7, sp, #0
 801ded4:	60f8      	str	r0, [r7, #12]
 801ded6:	60b9      	str	r1, [r7, #8]
 801ded8:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801deda:	2300      	movs	r3, #0
 801dedc:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801dede:	2300      	movs	r3, #0
 801dee0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801dee2:	4b37      	ldr	r3, [pc, #220]	; (801dfc0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801dee4:	7a1b      	ldrb	r3, [r3, #8]
 801dee6:	461a      	mov	r2, r3
 801dee8:	68fb      	ldr	r3, [r7, #12]
 801deea:	4293      	cmp	r3, r2
 801deec:	d902      	bls.n	801def4 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801deee:	f06f 0304 	mvn.w	r3, #4
 801def2:	e05e      	b.n	801dfb2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801def4:	4b32      	ldr	r3, [pc, #200]	; (801dfc0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801def6:	68da      	ldr	r2, [r3, #12]
 801def8:	68bb      	ldr	r3, [r7, #8]
 801defa:	4013      	ands	r3, r2
 801defc:	68ba      	ldr	r2, [r7, #8]
 801defe:	429a      	cmp	r2, r3
 801df00:	d002      	beq.n	801df08 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801df02:	f06f 0305 	mvn.w	r3, #5
 801df06:	e054      	b.n	801dfb2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801df08:	4b2d      	ldr	r3, [pc, #180]	; (801dfc0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801df0a:	685b      	ldr	r3, [r3, #4]
 801df0c:	2b00      	cmp	r3, #0
 801df0e:	d00a      	beq.n	801df26 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801df10:	687b      	ldr	r3, [r7, #4]
 801df12:	2b00      	cmp	r3, #0
 801df14:	d007      	beq.n	801df26 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801df16:	4b2a      	ldr	r3, [pc, #168]	; (801dfc0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801df18:	685b      	ldr	r3, [r3, #4]
 801df1a:	f107 0116 	add.w	r1, r7, #22
 801df1e:	f107 0218 	add.w	r2, r7, #24
 801df22:	4610      	mov	r0, r2
 801df24:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801df26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801df2a:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801df2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801df30:	f44f 7100 	mov.w	r1, #512	; 0x200
 801df34:	4823      	ldr	r0, [pc, #140]	; (801dfc4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801df36:	f7ff fa29 	bl	801d38c <tiny_vsnprintf_like>
 801df3a:	4603      	mov	r3, r0
 801df3c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801df3e:	f000 f9f1 	bl	801e324 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801df42:	8afa      	ldrh	r2, [r7, #22]
 801df44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801df46:	4413      	add	r3, r2
 801df48:	b29b      	uxth	r3, r3
 801df4a:	f107 0214 	add.w	r2, r7, #20
 801df4e:	4611      	mov	r1, r2
 801df50:	4618      	mov	r0, r3
 801df52:	f000 f969 	bl	801e228 <TRACE_AllocateBufer>
 801df56:	4603      	mov	r3, r0
 801df58:	f1b3 3fff 	cmp.w	r3, #4294967295
 801df5c:	d025      	beq.n	801dfaa <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801df5e:	2300      	movs	r3, #0
 801df60:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801df62:	e00e      	b.n	801df82 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801df64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801df66:	8aba      	ldrh	r2, [r7, #20]
 801df68:	3330      	adds	r3, #48	; 0x30
 801df6a:	443b      	add	r3, r7
 801df6c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801df70:	4b15      	ldr	r3, [pc, #84]	; (801dfc8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801df72:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801df74:	8abb      	ldrh	r3, [r7, #20]
 801df76:	3301      	adds	r3, #1
 801df78:	b29b      	uxth	r3, r3
 801df7a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801df7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801df7e:	3301      	adds	r3, #1
 801df80:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801df82:	8afb      	ldrh	r3, [r7, #22]
 801df84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801df86:	429a      	cmp	r2, r3
 801df88:	d3ec      	bcc.n	801df64 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801df8a:	8abb      	ldrh	r3, [r7, #20]
 801df8c:	461a      	mov	r2, r3
 801df8e:	4b0e      	ldr	r3, [pc, #56]	; (801dfc8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801df90:	18d0      	adds	r0, r2, r3
 801df92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801df96:	f44f 7100 	mov.w	r1, #512	; 0x200
 801df9a:	f7ff f9f7 	bl	801d38c <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801df9e:	f000 f9df 	bl	801e360 <TRACE_UnLock>

    return TRACE_Send();
 801dfa2:	f000 f831 	bl	801e008 <TRACE_Send>
 801dfa6:	4603      	mov	r3, r0
 801dfa8:	e003      	b.n	801dfb2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801dfaa:	f000 f9d9 	bl	801e360 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801dfae:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801dfb2:	4618      	mov	r0, r3
 801dfb4:	3734      	adds	r7, #52	; 0x34
 801dfb6:	46bd      	mov	sp, r7
 801dfb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801dfbc:	b001      	add	sp, #4
 801dfbe:	4770      	bx	lr
 801dfc0:	20001fc4 	.word	0x20001fc4
 801dfc4:	200023dc 	.word	0x200023dc
 801dfc8:	20001fdc 	.word	0x20001fdc

0801dfcc <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801dfcc:	b480      	push	{r7}
 801dfce:	b083      	sub	sp, #12
 801dfd0:	af00      	add	r7, sp, #0
 801dfd2:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801dfd4:	4a03      	ldr	r2, [pc, #12]	; (801dfe4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801dfd6:	687b      	ldr	r3, [r7, #4]
 801dfd8:	6053      	str	r3, [r2, #4]
}
 801dfda:	bf00      	nop
 801dfdc:	370c      	adds	r7, #12
 801dfde:	46bd      	mov	sp, r7
 801dfe0:	bc80      	pop	{r7}
 801dfe2:	4770      	bx	lr
 801dfe4:	20001fc4 	.word	0x20001fc4

0801dfe8 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801dfe8:	b480      	push	{r7}
 801dfea:	b083      	sub	sp, #12
 801dfec:	af00      	add	r7, sp, #0
 801dfee:	4603      	mov	r3, r0
 801dff0:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801dff2:	4a04      	ldr	r2, [pc, #16]	; (801e004 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801dff4:	79fb      	ldrb	r3, [r7, #7]
 801dff6:	7213      	strb	r3, [r2, #8]
}
 801dff8:	bf00      	nop
 801dffa:	370c      	adds	r7, #12
 801dffc:	46bd      	mov	sp, r7
 801dffe:	bc80      	pop	{r7}
 801e000:	4770      	bx	lr
 801e002:	bf00      	nop
 801e004:	20001fc4 	.word	0x20001fc4

0801e008 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801e008:	b580      	push	{r7, lr}
 801e00a:	b088      	sub	sp, #32
 801e00c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801e00e:	2300      	movs	r3, #0
 801e010:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801e012:	2300      	movs	r3, #0
 801e014:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e016:	f3ef 8310 	mrs	r3, PRIMASK
 801e01a:	613b      	str	r3, [r7, #16]
  return(result);
 801e01c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e01e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e020:	b672      	cpsid	i
}
 801e022:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801e024:	f000 f9ba 	bl	801e39c <TRACE_IsLocked>
 801e028:	4603      	mov	r3, r0
 801e02a:	2b00      	cmp	r3, #0
 801e02c:	d15d      	bne.n	801e0ea <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801e02e:	f000 f979 	bl	801e324 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801e032:	4b34      	ldr	r3, [pc, #208]	; (801e104 <TRACE_Send+0xfc>)
 801e034:	8a1a      	ldrh	r2, [r3, #16]
 801e036:	4b33      	ldr	r3, [pc, #204]	; (801e104 <TRACE_Send+0xfc>)
 801e038:	8a5b      	ldrh	r3, [r3, #18]
 801e03a:	429a      	cmp	r2, r3
 801e03c:	d04d      	beq.n	801e0da <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e03e:	4b31      	ldr	r3, [pc, #196]	; (801e104 <TRACE_Send+0xfc>)
 801e040:	789b      	ldrb	r3, [r3, #2]
 801e042:	2b01      	cmp	r3, #1
 801e044:	d117      	bne.n	801e076 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801e046:	4b2f      	ldr	r3, [pc, #188]	; (801e104 <TRACE_Send+0xfc>)
 801e048:	881a      	ldrh	r2, [r3, #0]
 801e04a:	4b2e      	ldr	r3, [pc, #184]	; (801e104 <TRACE_Send+0xfc>)
 801e04c:	8a1b      	ldrh	r3, [r3, #16]
 801e04e:	1ad3      	subs	r3, r2, r3
 801e050:	b29a      	uxth	r2, r3
 801e052:	4b2c      	ldr	r3, [pc, #176]	; (801e104 <TRACE_Send+0xfc>)
 801e054:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e056:	4b2b      	ldr	r3, [pc, #172]	; (801e104 <TRACE_Send+0xfc>)
 801e058:	2202      	movs	r2, #2
 801e05a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e05c:	4b29      	ldr	r3, [pc, #164]	; (801e104 <TRACE_Send+0xfc>)
 801e05e:	2200      	movs	r2, #0
 801e060:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e062:	4b28      	ldr	r3, [pc, #160]	; (801e104 <TRACE_Send+0xfc>)
 801e064:	8a9b      	ldrh	r3, [r3, #20]
 801e066:	2b00      	cmp	r3, #0
 801e068:	d105      	bne.n	801e076 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e06a:	4b26      	ldr	r3, [pc, #152]	; (801e104 <TRACE_Send+0xfc>)
 801e06c:	2200      	movs	r2, #0
 801e06e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e070:	4b24      	ldr	r3, [pc, #144]	; (801e104 <TRACE_Send+0xfc>)
 801e072:	2200      	movs	r2, #0
 801e074:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e076:	4b23      	ldr	r3, [pc, #140]	; (801e104 <TRACE_Send+0xfc>)
 801e078:	789b      	ldrb	r3, [r3, #2]
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	d115      	bne.n	801e0aa <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e07e:	4b21      	ldr	r3, [pc, #132]	; (801e104 <TRACE_Send+0xfc>)
 801e080:	8a5a      	ldrh	r2, [r3, #18]
 801e082:	4b20      	ldr	r3, [pc, #128]	; (801e104 <TRACE_Send+0xfc>)
 801e084:	8a1b      	ldrh	r3, [r3, #16]
 801e086:	429a      	cmp	r2, r3
 801e088:	d908      	bls.n	801e09c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e08a:	4b1e      	ldr	r3, [pc, #120]	; (801e104 <TRACE_Send+0xfc>)
 801e08c:	8a5a      	ldrh	r2, [r3, #18]
 801e08e:	4b1d      	ldr	r3, [pc, #116]	; (801e104 <TRACE_Send+0xfc>)
 801e090:	8a1b      	ldrh	r3, [r3, #16]
 801e092:	1ad3      	subs	r3, r2, r3
 801e094:	b29a      	uxth	r2, r3
 801e096:	4b1b      	ldr	r3, [pc, #108]	; (801e104 <TRACE_Send+0xfc>)
 801e098:	829a      	strh	r2, [r3, #20]
 801e09a:	e006      	b.n	801e0aa <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e09c:	4b19      	ldr	r3, [pc, #100]	; (801e104 <TRACE_Send+0xfc>)
 801e09e:	8a1b      	ldrh	r3, [r3, #16]
 801e0a0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e0a4:	b29a      	uxth	r2, r3
 801e0a6:	4b17      	ldr	r3, [pc, #92]	; (801e104 <TRACE_Send+0xfc>)
 801e0a8:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e0aa:	4b16      	ldr	r3, [pc, #88]	; (801e104 <TRACE_Send+0xfc>)
 801e0ac:	8a1b      	ldrh	r3, [r3, #16]
 801e0ae:	461a      	mov	r2, r3
 801e0b0:	4b15      	ldr	r3, [pc, #84]	; (801e108 <TRACE_Send+0x100>)
 801e0b2:	4413      	add	r3, r2
 801e0b4:	61bb      	str	r3, [r7, #24]
 801e0b6:	697b      	ldr	r3, [r7, #20]
 801e0b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e0ba:	68fb      	ldr	r3, [r7, #12]
 801e0bc:	f383 8810 	msr	PRIMASK, r3
}
 801e0c0:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801e0c2:	f7e4 fcad 	bl	8002a20 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e0c6:	4b11      	ldr	r3, [pc, #68]	; (801e10c <TRACE_Send+0x104>)
 801e0c8:	68db      	ldr	r3, [r3, #12]
 801e0ca:	4a0e      	ldr	r2, [pc, #56]	; (801e104 <TRACE_Send+0xfc>)
 801e0cc:	8a92      	ldrh	r2, [r2, #20]
 801e0ce:	4611      	mov	r1, r2
 801e0d0:	69b8      	ldr	r0, [r7, #24]
 801e0d2:	4798      	blx	r3
 801e0d4:	4603      	mov	r3, r0
 801e0d6:	77fb      	strb	r3, [r7, #31]
 801e0d8:	e00d      	b.n	801e0f6 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801e0da:	f000 f941 	bl	801e360 <TRACE_UnLock>
 801e0de:	697b      	ldr	r3, [r7, #20]
 801e0e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e0e2:	68bb      	ldr	r3, [r7, #8]
 801e0e4:	f383 8810 	msr	PRIMASK, r3
}
 801e0e8:	e005      	b.n	801e0f6 <TRACE_Send+0xee>
 801e0ea:	697b      	ldr	r3, [r7, #20]
 801e0ec:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e0ee:	687b      	ldr	r3, [r7, #4]
 801e0f0:	f383 8810 	msr	PRIMASK, r3
}
 801e0f4:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801e0f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e0fa:	4618      	mov	r0, r3
 801e0fc:	3720      	adds	r7, #32
 801e0fe:	46bd      	mov	sp, r7
 801e100:	bd80      	pop	{r7, pc}
 801e102:	bf00      	nop
 801e104:	20001fc4 	.word	0x20001fc4
 801e108:	20001fdc 	.word	0x20001fdc
 801e10c:	0801eff4 	.word	0x0801eff4

0801e110 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801e110:	b580      	push	{r7, lr}
 801e112:	b088      	sub	sp, #32
 801e114:	af00      	add	r7, sp, #0
 801e116:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801e118:	2300      	movs	r3, #0
 801e11a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e11c:	f3ef 8310 	mrs	r3, PRIMASK
 801e120:	617b      	str	r3, [r7, #20]
  return(result);
 801e122:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e124:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e126:	b672      	cpsid	i
}
 801e128:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801e12a:	4b3c      	ldr	r3, [pc, #240]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e12c:	789b      	ldrb	r3, [r3, #2]
 801e12e:	2b02      	cmp	r3, #2
 801e130:	d106      	bne.n	801e140 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e132:	4b3a      	ldr	r3, [pc, #232]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e134:	2200      	movs	r2, #0
 801e136:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e138:	4b38      	ldr	r3, [pc, #224]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e13a:	2200      	movs	r2, #0
 801e13c:	821a      	strh	r2, [r3, #16]
 801e13e:	e00a      	b.n	801e156 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e140:	4b36      	ldr	r3, [pc, #216]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e142:	8a1a      	ldrh	r2, [r3, #16]
 801e144:	4b35      	ldr	r3, [pc, #212]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e146:	8a9b      	ldrh	r3, [r3, #20]
 801e148:	4413      	add	r3, r2
 801e14a:	b29b      	uxth	r3, r3
 801e14c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e150:	b29a      	uxth	r2, r3
 801e152:	4b32      	ldr	r3, [pc, #200]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e154:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801e156:	4b31      	ldr	r3, [pc, #196]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e158:	8a1a      	ldrh	r2, [r3, #16]
 801e15a:	4b30      	ldr	r3, [pc, #192]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e15c:	8a5b      	ldrh	r3, [r3, #18]
 801e15e:	429a      	cmp	r2, r3
 801e160:	d04d      	beq.n	801e1fe <TRACE_TxCpltCallback+0xee>
 801e162:	4b2e      	ldr	r3, [pc, #184]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e164:	8adb      	ldrh	r3, [r3, #22]
 801e166:	2b01      	cmp	r3, #1
 801e168:	d149      	bne.n	801e1fe <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e16a:	4b2c      	ldr	r3, [pc, #176]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e16c:	789b      	ldrb	r3, [r3, #2]
 801e16e:	2b01      	cmp	r3, #1
 801e170:	d117      	bne.n	801e1a2 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801e172:	4b2a      	ldr	r3, [pc, #168]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e174:	881a      	ldrh	r2, [r3, #0]
 801e176:	4b29      	ldr	r3, [pc, #164]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e178:	8a1b      	ldrh	r3, [r3, #16]
 801e17a:	1ad3      	subs	r3, r2, r3
 801e17c:	b29a      	uxth	r2, r3
 801e17e:	4b27      	ldr	r3, [pc, #156]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e180:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e182:	4b26      	ldr	r3, [pc, #152]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e184:	2202      	movs	r2, #2
 801e186:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e188:	4b24      	ldr	r3, [pc, #144]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e18a:	2200      	movs	r2, #0
 801e18c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e18e:	4b23      	ldr	r3, [pc, #140]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e190:	8a9b      	ldrh	r3, [r3, #20]
 801e192:	2b00      	cmp	r3, #0
 801e194:	d105      	bne.n	801e1a2 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e196:	4b21      	ldr	r3, [pc, #132]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e198:	2200      	movs	r2, #0
 801e19a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e19c:	4b1f      	ldr	r3, [pc, #124]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e19e:	2200      	movs	r2, #0
 801e1a0:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e1a2:	4b1e      	ldr	r3, [pc, #120]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e1a4:	789b      	ldrb	r3, [r3, #2]
 801e1a6:	2b00      	cmp	r3, #0
 801e1a8:	d115      	bne.n	801e1d6 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e1aa:	4b1c      	ldr	r3, [pc, #112]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e1ac:	8a5a      	ldrh	r2, [r3, #18]
 801e1ae:	4b1b      	ldr	r3, [pc, #108]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e1b0:	8a1b      	ldrh	r3, [r3, #16]
 801e1b2:	429a      	cmp	r2, r3
 801e1b4:	d908      	bls.n	801e1c8 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e1b6:	4b19      	ldr	r3, [pc, #100]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e1b8:	8a5a      	ldrh	r2, [r3, #18]
 801e1ba:	4b18      	ldr	r3, [pc, #96]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e1bc:	8a1b      	ldrh	r3, [r3, #16]
 801e1be:	1ad3      	subs	r3, r2, r3
 801e1c0:	b29a      	uxth	r2, r3
 801e1c2:	4b16      	ldr	r3, [pc, #88]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e1c4:	829a      	strh	r2, [r3, #20]
 801e1c6:	e006      	b.n	801e1d6 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e1c8:	4b14      	ldr	r3, [pc, #80]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e1ca:	8a1b      	ldrh	r3, [r3, #16]
 801e1cc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e1d0:	b29a      	uxth	r2, r3
 801e1d2:	4b12      	ldr	r3, [pc, #72]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e1d4:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e1d6:	4b11      	ldr	r3, [pc, #68]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e1d8:	8a1b      	ldrh	r3, [r3, #16]
 801e1da:	461a      	mov	r2, r3
 801e1dc:	4b10      	ldr	r3, [pc, #64]	; (801e220 <TRACE_TxCpltCallback+0x110>)
 801e1de:	4413      	add	r3, r2
 801e1e0:	61fb      	str	r3, [r7, #28]
 801e1e2:	69bb      	ldr	r3, [r7, #24]
 801e1e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1e6:	693b      	ldr	r3, [r7, #16]
 801e1e8:	f383 8810 	msr	PRIMASK, r3
}
 801e1ec:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e1ee:	4b0d      	ldr	r3, [pc, #52]	; (801e224 <TRACE_TxCpltCallback+0x114>)
 801e1f0:	68db      	ldr	r3, [r3, #12]
 801e1f2:	4a0a      	ldr	r2, [pc, #40]	; (801e21c <TRACE_TxCpltCallback+0x10c>)
 801e1f4:	8a92      	ldrh	r2, [r2, #20]
 801e1f6:	4611      	mov	r1, r2
 801e1f8:	69f8      	ldr	r0, [r7, #28]
 801e1fa:	4798      	blx	r3
 801e1fc:	e00a      	b.n	801e214 <TRACE_TxCpltCallback+0x104>
 801e1fe:	69bb      	ldr	r3, [r7, #24]
 801e200:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e202:	68fb      	ldr	r3, [r7, #12]
 801e204:	f383 8810 	msr	PRIMASK, r3
}
 801e208:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801e20a:	f7e4 fc11 	bl	8002a30 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801e20e:	f000 f8a7 	bl	801e360 <TRACE_UnLock>
  }
}
 801e212:	bf00      	nop
 801e214:	bf00      	nop
 801e216:	3720      	adds	r7, #32
 801e218:	46bd      	mov	sp, r7
 801e21a:	bd80      	pop	{r7, pc}
 801e21c:	20001fc4 	.word	0x20001fc4
 801e220:	20001fdc 	.word	0x20001fdc
 801e224:	0801eff4 	.word	0x0801eff4

0801e228 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801e228:	b480      	push	{r7}
 801e22a:	b087      	sub	sp, #28
 801e22c:	af00      	add	r7, sp, #0
 801e22e:	4603      	mov	r3, r0
 801e230:	6039      	str	r1, [r7, #0]
 801e232:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801e234:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e238:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e23a:	f3ef 8310 	mrs	r3, PRIMASK
 801e23e:	60fb      	str	r3, [r7, #12]
  return(result);
 801e240:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e242:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e244:	b672      	cpsid	i
}
 801e246:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e248:	4b35      	ldr	r3, [pc, #212]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e24a:	8a5a      	ldrh	r2, [r3, #18]
 801e24c:	4b34      	ldr	r3, [pc, #208]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e24e:	8a1b      	ldrh	r3, [r3, #16]
 801e250:	429a      	cmp	r2, r3
 801e252:	d11b      	bne.n	801e28c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e254:	4b32      	ldr	r3, [pc, #200]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e256:	8a5b      	ldrh	r3, [r3, #18]
 801e258:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e25c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801e25e:	88fa      	ldrh	r2, [r7, #6]
 801e260:	8afb      	ldrh	r3, [r7, #22]
 801e262:	429a      	cmp	r2, r3
 801e264:	d33a      	bcc.n	801e2dc <TRACE_AllocateBufer+0xb4>
 801e266:	4b2e      	ldr	r3, [pc, #184]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e268:	8a1b      	ldrh	r3, [r3, #16]
 801e26a:	88fa      	ldrh	r2, [r7, #6]
 801e26c:	429a      	cmp	r2, r3
 801e26e:	d235      	bcs.n	801e2dc <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e270:	4b2b      	ldr	r3, [pc, #172]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e272:	2201      	movs	r2, #1
 801e274:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e276:	4b2a      	ldr	r3, [pc, #168]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e278:	8a5a      	ldrh	r2, [r3, #18]
 801e27a:	4b29      	ldr	r3, [pc, #164]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e27c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e27e:	4b28      	ldr	r3, [pc, #160]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e280:	8a1b      	ldrh	r3, [r3, #16]
 801e282:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e284:	4b26      	ldr	r3, [pc, #152]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e286:	2200      	movs	r2, #0
 801e288:	825a      	strh	r2, [r3, #18]
 801e28a:	e027      	b.n	801e2dc <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e28c:	4b24      	ldr	r3, [pc, #144]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e28e:	8a5a      	ldrh	r2, [r3, #18]
 801e290:	4b23      	ldr	r3, [pc, #140]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e292:	8a1b      	ldrh	r3, [r3, #16]
 801e294:	429a      	cmp	r2, r3
 801e296:	d91b      	bls.n	801e2d0 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e298:	4b21      	ldr	r3, [pc, #132]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e29a:	8a5b      	ldrh	r3, [r3, #18]
 801e29c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e2a0:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801e2a2:	88fa      	ldrh	r2, [r7, #6]
 801e2a4:	8afb      	ldrh	r3, [r7, #22]
 801e2a6:	429a      	cmp	r2, r3
 801e2a8:	d318      	bcc.n	801e2dc <TRACE_AllocateBufer+0xb4>
 801e2aa:	4b1d      	ldr	r3, [pc, #116]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e2ac:	8a1b      	ldrh	r3, [r3, #16]
 801e2ae:	88fa      	ldrh	r2, [r7, #6]
 801e2b0:	429a      	cmp	r2, r3
 801e2b2:	d213      	bcs.n	801e2dc <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e2b4:	4b1a      	ldr	r3, [pc, #104]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e2b6:	2201      	movs	r2, #1
 801e2b8:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e2ba:	4b19      	ldr	r3, [pc, #100]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e2bc:	8a5a      	ldrh	r2, [r3, #18]
 801e2be:	4b18      	ldr	r3, [pc, #96]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e2c0:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e2c2:	4b17      	ldr	r3, [pc, #92]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e2c4:	8a1b      	ldrh	r3, [r3, #16]
 801e2c6:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e2c8:	4b15      	ldr	r3, [pc, #84]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e2ca:	2200      	movs	r2, #0
 801e2cc:	825a      	strh	r2, [r3, #18]
 801e2ce:	e005      	b.n	801e2dc <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801e2d0:	4b13      	ldr	r3, [pc, #76]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e2d2:	8a1a      	ldrh	r2, [r3, #16]
 801e2d4:	4b12      	ldr	r3, [pc, #72]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e2d6:	8a5b      	ldrh	r3, [r3, #18]
 801e2d8:	1ad3      	subs	r3, r2, r3
 801e2da:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801e2dc:	8afa      	ldrh	r2, [r7, #22]
 801e2de:	88fb      	ldrh	r3, [r7, #6]
 801e2e0:	429a      	cmp	r2, r3
 801e2e2:	d90f      	bls.n	801e304 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801e2e4:	4b0e      	ldr	r3, [pc, #56]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e2e6:	8a5a      	ldrh	r2, [r3, #18]
 801e2e8:	683b      	ldr	r3, [r7, #0]
 801e2ea:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e2ec:	4b0c      	ldr	r3, [pc, #48]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e2ee:	8a5a      	ldrh	r2, [r3, #18]
 801e2f0:	88fb      	ldrh	r3, [r7, #6]
 801e2f2:	4413      	add	r3, r2
 801e2f4:	b29b      	uxth	r3, r3
 801e2f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e2fa:	b29a      	uxth	r2, r3
 801e2fc:	4b08      	ldr	r3, [pc, #32]	; (801e320 <TRACE_AllocateBufer+0xf8>)
 801e2fe:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801e300:	2300      	movs	r3, #0
 801e302:	82bb      	strh	r3, [r7, #20]
 801e304:	693b      	ldr	r3, [r7, #16]
 801e306:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e308:	68bb      	ldr	r3, [r7, #8]
 801e30a:	f383 8810 	msr	PRIMASK, r3
}
 801e30e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801e310:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801e314:	4618      	mov	r0, r3
 801e316:	371c      	adds	r7, #28
 801e318:	46bd      	mov	sp, r7
 801e31a:	bc80      	pop	{r7}
 801e31c:	4770      	bx	lr
 801e31e:	bf00      	nop
 801e320:	20001fc4 	.word	0x20001fc4

0801e324 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801e324:	b480      	push	{r7}
 801e326:	b085      	sub	sp, #20
 801e328:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e32a:	f3ef 8310 	mrs	r3, PRIMASK
 801e32e:	607b      	str	r3, [r7, #4]
  return(result);
 801e330:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e332:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e334:	b672      	cpsid	i
}
 801e336:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801e338:	4b08      	ldr	r3, [pc, #32]	; (801e35c <TRACE_Lock+0x38>)
 801e33a:	8adb      	ldrh	r3, [r3, #22]
 801e33c:	3301      	adds	r3, #1
 801e33e:	b29a      	uxth	r2, r3
 801e340:	4b06      	ldr	r3, [pc, #24]	; (801e35c <TRACE_Lock+0x38>)
 801e342:	82da      	strh	r2, [r3, #22]
 801e344:	68fb      	ldr	r3, [r7, #12]
 801e346:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e348:	68bb      	ldr	r3, [r7, #8]
 801e34a:	f383 8810 	msr	PRIMASK, r3
}
 801e34e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801e350:	bf00      	nop
 801e352:	3714      	adds	r7, #20
 801e354:	46bd      	mov	sp, r7
 801e356:	bc80      	pop	{r7}
 801e358:	4770      	bx	lr
 801e35a:	bf00      	nop
 801e35c:	20001fc4 	.word	0x20001fc4

0801e360 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801e360:	b480      	push	{r7}
 801e362:	b085      	sub	sp, #20
 801e364:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e366:	f3ef 8310 	mrs	r3, PRIMASK
 801e36a:	607b      	str	r3, [r7, #4]
  return(result);
 801e36c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e36e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e370:	b672      	cpsid	i
}
 801e372:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801e374:	4b08      	ldr	r3, [pc, #32]	; (801e398 <TRACE_UnLock+0x38>)
 801e376:	8adb      	ldrh	r3, [r3, #22]
 801e378:	3b01      	subs	r3, #1
 801e37a:	b29a      	uxth	r2, r3
 801e37c:	4b06      	ldr	r3, [pc, #24]	; (801e398 <TRACE_UnLock+0x38>)
 801e37e:	82da      	strh	r2, [r3, #22]
 801e380:	68fb      	ldr	r3, [r7, #12]
 801e382:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e384:	68bb      	ldr	r3, [r7, #8]
 801e386:	f383 8810 	msr	PRIMASK, r3
}
 801e38a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801e38c:	bf00      	nop
 801e38e:	3714      	adds	r7, #20
 801e390:	46bd      	mov	sp, r7
 801e392:	bc80      	pop	{r7}
 801e394:	4770      	bx	lr
 801e396:	bf00      	nop
 801e398:	20001fc4 	.word	0x20001fc4

0801e39c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801e39c:	b480      	push	{r7}
 801e39e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801e3a0:	4b05      	ldr	r3, [pc, #20]	; (801e3b8 <TRACE_IsLocked+0x1c>)
 801e3a2:	8adb      	ldrh	r3, [r3, #22]
 801e3a4:	2b00      	cmp	r3, #0
 801e3a6:	bf14      	ite	ne
 801e3a8:	2301      	movne	r3, #1
 801e3aa:	2300      	moveq	r3, #0
 801e3ac:	b2db      	uxtb	r3, r3
}
 801e3ae:	4618      	mov	r0, r3
 801e3b0:	46bd      	mov	sp, r7
 801e3b2:	bc80      	pop	{r7}
 801e3b4:	4770      	bx	lr
 801e3b6:	bf00      	nop
 801e3b8:	20001fc4 	.word	0x20001fc4

0801e3bc <memset>:
 801e3bc:	4402      	add	r2, r0
 801e3be:	4603      	mov	r3, r0
 801e3c0:	4293      	cmp	r3, r2
 801e3c2:	d100      	bne.n	801e3c6 <memset+0xa>
 801e3c4:	4770      	bx	lr
 801e3c6:	f803 1b01 	strb.w	r1, [r3], #1
 801e3ca:	e7f9      	b.n	801e3c0 <memset+0x4>

0801e3cc <__libc_init_array>:
 801e3cc:	b570      	push	{r4, r5, r6, lr}
 801e3ce:	4d0d      	ldr	r5, [pc, #52]	; (801e404 <__libc_init_array+0x38>)
 801e3d0:	4c0d      	ldr	r4, [pc, #52]	; (801e408 <__libc_init_array+0x3c>)
 801e3d2:	1b64      	subs	r4, r4, r5
 801e3d4:	10a4      	asrs	r4, r4, #2
 801e3d6:	2600      	movs	r6, #0
 801e3d8:	42a6      	cmp	r6, r4
 801e3da:	d109      	bne.n	801e3f0 <__libc_init_array+0x24>
 801e3dc:	4d0b      	ldr	r5, [pc, #44]	; (801e40c <__libc_init_array+0x40>)
 801e3de:	4c0c      	ldr	r4, [pc, #48]	; (801e410 <__libc_init_array+0x44>)
 801e3e0:	f000 f8fe 	bl	801e5e0 <_init>
 801e3e4:	1b64      	subs	r4, r4, r5
 801e3e6:	10a4      	asrs	r4, r4, #2
 801e3e8:	2600      	movs	r6, #0
 801e3ea:	42a6      	cmp	r6, r4
 801e3ec:	d105      	bne.n	801e3fa <__libc_init_array+0x2e>
 801e3ee:	bd70      	pop	{r4, r5, r6, pc}
 801e3f0:	f855 3b04 	ldr.w	r3, [r5], #4
 801e3f4:	4798      	blx	r3
 801e3f6:	3601      	adds	r6, #1
 801e3f8:	e7ee      	b.n	801e3d8 <__libc_init_array+0xc>
 801e3fa:	f855 3b04 	ldr.w	r3, [r5], #4
 801e3fe:	4798      	blx	r3
 801e400:	3601      	adds	r6, #1
 801e402:	e7f2      	b.n	801e3ea <__libc_init_array+0x1e>
 801e404:	0801f584 	.word	0x0801f584
 801e408:	0801f584 	.word	0x0801f584
 801e40c:	0801f584 	.word	0x0801f584
 801e410:	0801f58c 	.word	0x0801f58c

0801e414 <__retarget_lock_acquire_recursive>:
 801e414:	4770      	bx	lr

0801e416 <__retarget_lock_release_recursive>:
 801e416:	4770      	bx	lr

0801e418 <register_fini>:
 801e418:	4b02      	ldr	r3, [pc, #8]	; (801e424 <register_fini+0xc>)
 801e41a:	b113      	cbz	r3, 801e422 <register_fini+0xa>
 801e41c:	4802      	ldr	r0, [pc, #8]	; (801e428 <register_fini+0x10>)
 801e41e:	f000 b805 	b.w	801e42c <atexit>
 801e422:	4770      	bx	lr
 801e424:	00000000 	.word	0x00000000
 801e428:	0801e439 	.word	0x0801e439

0801e42c <atexit>:
 801e42c:	2300      	movs	r3, #0
 801e42e:	4601      	mov	r1, r0
 801e430:	461a      	mov	r2, r3
 801e432:	4618      	mov	r0, r3
 801e434:	f000 b814 	b.w	801e460 <__register_exitproc>

0801e438 <__libc_fini_array>:
 801e438:	b538      	push	{r3, r4, r5, lr}
 801e43a:	4d07      	ldr	r5, [pc, #28]	; (801e458 <__libc_fini_array+0x20>)
 801e43c:	4c07      	ldr	r4, [pc, #28]	; (801e45c <__libc_fini_array+0x24>)
 801e43e:	1b64      	subs	r4, r4, r5
 801e440:	10a4      	asrs	r4, r4, #2
 801e442:	b91c      	cbnz	r4, 801e44c <__libc_fini_array+0x14>
 801e444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e448:	f000 b8d0 	b.w	801e5ec <_fini>
 801e44c:	3c01      	subs	r4, #1
 801e44e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801e452:	4798      	blx	r3
 801e454:	e7f5      	b.n	801e442 <__libc_fini_array+0xa>
 801e456:	bf00      	nop
 801e458:	0801f58c 	.word	0x0801f58c
 801e45c:	0801f590 	.word	0x0801f590

0801e460 <__register_exitproc>:
 801e460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e464:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801e4d4 <__register_exitproc+0x74>
 801e468:	4606      	mov	r6, r0
 801e46a:	f8da 0000 	ldr.w	r0, [sl]
 801e46e:	4698      	mov	r8, r3
 801e470:	460f      	mov	r7, r1
 801e472:	4691      	mov	r9, r2
 801e474:	f7ff ffce 	bl	801e414 <__retarget_lock_acquire_recursive>
 801e478:	4b17      	ldr	r3, [pc, #92]	; (801e4d8 <__register_exitproc+0x78>)
 801e47a:	681c      	ldr	r4, [r3, #0]
 801e47c:	b90c      	cbnz	r4, 801e482 <__register_exitproc+0x22>
 801e47e:	4c17      	ldr	r4, [pc, #92]	; (801e4dc <__register_exitproc+0x7c>)
 801e480:	601c      	str	r4, [r3, #0]
 801e482:	6865      	ldr	r5, [r4, #4]
 801e484:	f8da 0000 	ldr.w	r0, [sl]
 801e488:	2d1f      	cmp	r5, #31
 801e48a:	dd05      	ble.n	801e498 <__register_exitproc+0x38>
 801e48c:	f7ff ffc3 	bl	801e416 <__retarget_lock_release_recursive>
 801e490:	f04f 30ff 	mov.w	r0, #4294967295
 801e494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e498:	b19e      	cbz	r6, 801e4c2 <__register_exitproc+0x62>
 801e49a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801e49e:	2201      	movs	r2, #1
 801e4a0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801e4a4:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801e4a8:	40aa      	lsls	r2, r5
 801e4aa:	4313      	orrs	r3, r2
 801e4ac:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801e4b0:	2e02      	cmp	r6, #2
 801e4b2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801e4b6:	bf02      	ittt	eq
 801e4b8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801e4bc:	4313      	orreq	r3, r2
 801e4be:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801e4c2:	1c6b      	adds	r3, r5, #1
 801e4c4:	3502      	adds	r5, #2
 801e4c6:	6063      	str	r3, [r4, #4]
 801e4c8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801e4cc:	f7ff ffa3 	bl	801e416 <__retarget_lock_release_recursive>
 801e4d0:	2000      	movs	r0, #0
 801e4d2:	e7df      	b.n	801e494 <__register_exitproc+0x34>
 801e4d4:	20000174 	.word	0x20000174
 801e4d8:	200025e0 	.word	0x200025e0
 801e4dc:	200025e4 	.word	0x200025e4

0801e4e0 <floor>:
 801e4e0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e4e8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801e4ec:	2e13      	cmp	r6, #19
 801e4ee:	460b      	mov	r3, r1
 801e4f0:	4607      	mov	r7, r0
 801e4f2:	460c      	mov	r4, r1
 801e4f4:	4605      	mov	r5, r0
 801e4f6:	dc32      	bgt.n	801e55e <floor+0x7e>
 801e4f8:	2e00      	cmp	r6, #0
 801e4fa:	da14      	bge.n	801e526 <floor+0x46>
 801e4fc:	a334      	add	r3, pc, #208	; (adr r3, 801e5d0 <floor+0xf0>)
 801e4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e502:	f7e1 fe47 	bl	8000194 <__adddf3>
 801e506:	2200      	movs	r2, #0
 801e508:	2300      	movs	r3, #0
 801e50a:	f7e2 fa89 	bl	8000a20 <__aeabi_dcmpgt>
 801e50e:	b138      	cbz	r0, 801e520 <floor+0x40>
 801e510:	2c00      	cmp	r4, #0
 801e512:	da56      	bge.n	801e5c2 <floor+0xe2>
 801e514:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801e518:	4325      	orrs	r5, r4
 801e51a:	d055      	beq.n	801e5c8 <floor+0xe8>
 801e51c:	4c2e      	ldr	r4, [pc, #184]	; (801e5d8 <floor+0xf8>)
 801e51e:	2500      	movs	r5, #0
 801e520:	4623      	mov	r3, r4
 801e522:	462f      	mov	r7, r5
 801e524:	e025      	b.n	801e572 <floor+0x92>
 801e526:	4a2d      	ldr	r2, [pc, #180]	; (801e5dc <floor+0xfc>)
 801e528:	fa42 f806 	asr.w	r8, r2, r6
 801e52c:	ea01 0208 	and.w	r2, r1, r8
 801e530:	4302      	orrs	r2, r0
 801e532:	d01e      	beq.n	801e572 <floor+0x92>
 801e534:	a326      	add	r3, pc, #152	; (adr r3, 801e5d0 <floor+0xf0>)
 801e536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e53a:	f7e1 fe2b 	bl	8000194 <__adddf3>
 801e53e:	2200      	movs	r2, #0
 801e540:	2300      	movs	r3, #0
 801e542:	f7e2 fa6d 	bl	8000a20 <__aeabi_dcmpgt>
 801e546:	2800      	cmp	r0, #0
 801e548:	d0ea      	beq.n	801e520 <floor+0x40>
 801e54a:	2c00      	cmp	r4, #0
 801e54c:	bfbe      	ittt	lt
 801e54e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801e552:	4133      	asrlt	r3, r6
 801e554:	18e4      	addlt	r4, r4, r3
 801e556:	ea24 0408 	bic.w	r4, r4, r8
 801e55a:	2500      	movs	r5, #0
 801e55c:	e7e0      	b.n	801e520 <floor+0x40>
 801e55e:	2e33      	cmp	r6, #51	; 0x33
 801e560:	dd0b      	ble.n	801e57a <floor+0x9a>
 801e562:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e566:	d104      	bne.n	801e572 <floor+0x92>
 801e568:	4602      	mov	r2, r0
 801e56a:	f7e1 fe13 	bl	8000194 <__adddf3>
 801e56e:	4607      	mov	r7, r0
 801e570:	460b      	mov	r3, r1
 801e572:	4638      	mov	r0, r7
 801e574:	4619      	mov	r1, r3
 801e576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e57a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801e57e:	f04f 38ff 	mov.w	r8, #4294967295
 801e582:	fa28 f802 	lsr.w	r8, r8, r2
 801e586:	ea10 0f08 	tst.w	r0, r8
 801e58a:	d0f2      	beq.n	801e572 <floor+0x92>
 801e58c:	a310      	add	r3, pc, #64	; (adr r3, 801e5d0 <floor+0xf0>)
 801e58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e592:	f7e1 fdff 	bl	8000194 <__adddf3>
 801e596:	2200      	movs	r2, #0
 801e598:	2300      	movs	r3, #0
 801e59a:	f7e2 fa41 	bl	8000a20 <__aeabi_dcmpgt>
 801e59e:	2800      	cmp	r0, #0
 801e5a0:	d0be      	beq.n	801e520 <floor+0x40>
 801e5a2:	2c00      	cmp	r4, #0
 801e5a4:	da0a      	bge.n	801e5bc <floor+0xdc>
 801e5a6:	2e14      	cmp	r6, #20
 801e5a8:	d101      	bne.n	801e5ae <floor+0xce>
 801e5aa:	3401      	adds	r4, #1
 801e5ac:	e006      	b.n	801e5bc <floor+0xdc>
 801e5ae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801e5b2:	2301      	movs	r3, #1
 801e5b4:	40b3      	lsls	r3, r6
 801e5b6:	441d      	add	r5, r3
 801e5b8:	42af      	cmp	r7, r5
 801e5ba:	d8f6      	bhi.n	801e5aa <floor+0xca>
 801e5bc:	ea25 0508 	bic.w	r5, r5, r8
 801e5c0:	e7ae      	b.n	801e520 <floor+0x40>
 801e5c2:	2500      	movs	r5, #0
 801e5c4:	462c      	mov	r4, r5
 801e5c6:	e7ab      	b.n	801e520 <floor+0x40>
 801e5c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801e5cc:	e7a8      	b.n	801e520 <floor+0x40>
 801e5ce:	bf00      	nop
 801e5d0:	8800759c 	.word	0x8800759c
 801e5d4:	7e37e43c 	.word	0x7e37e43c
 801e5d8:	bff00000 	.word	0xbff00000
 801e5dc:	000fffff 	.word	0x000fffff

0801e5e0 <_init>:
 801e5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5e2:	bf00      	nop
 801e5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e5e6:	bc08      	pop	{r3}
 801e5e8:	469e      	mov	lr, r3
 801e5ea:	4770      	bx	lr

0801e5ec <_fini>:
 801e5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5ee:	bf00      	nop
 801e5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e5f2:	bc08      	pop	{r3}
 801e5f4:	469e      	mov	lr, r3
 801e5f6:	4770      	bx	lr
