
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001da28  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  0801db60  0801db60  0002db60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801ea10  0801ea10  0002ea10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801eae8  0801eae8  00030164  2**0
                  CONTENTS
  5 .ARM          00000008  0801eae8  0801eae8  0002eae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801eaf0  0801eaf0  00030164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801eaf0  0801eaf0  0002eaf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801eaf8  0801eaf8  0002eaf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000164  20000000  0801eafc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001f28  20000164  0801ec60  00030164  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000208c  0801ec60  0003208c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003018e  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004c7dc  00000000  00000000  000301d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b806  00000000  00000000  0007c9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003e50  00000000  00000000  000881b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002f81  00000000  00000000  0008c008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00012007  00000000  00000000  0008ef89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004d10e  00000000  00000000  000a0f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000daf4d  00000000  00000000  000ee09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00010554  00000000  00000000  001c8fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  001d9540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000164 	.word	0x20000164
 8000154:	00000000 	.word	0x00000000
 8000158:	0801db48 	.word	0x0801db48

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000168 	.word	0x20000168
 8000174:	0801db48 	.word	0x0801db48

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2iz>:
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30f      	bcc.n	8000d6a <__aeabi_f2iz+0x2a>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d90d      	bls.n	8000d70 <__aeabi_f2iz+0x30>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	bf18      	it	ne
 8000d66:	4240      	negne	r0, r0
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr
 8000d70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d74:	d101      	bne.n	8000d7a <__aeabi_f2iz+0x3a>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	d105      	bne.n	8000d86 <__aeabi_f2iz+0x46>
 8000d7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	bf08      	it	eq
 8000d80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_uldivmod>:
 8000d8c:	b953      	cbnz	r3, 8000da4 <__aeabi_uldivmod+0x18>
 8000d8e:	b94a      	cbnz	r2, 8000da4 <__aeabi_uldivmod+0x18>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	bf08      	it	eq
 8000d94:	2800      	cmpeq	r0, #0
 8000d96:	bf1c      	itt	ne
 8000d98:	f04f 31ff 	movne.w	r1, #4294967295
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000da0:	f000 b970 	b.w	8001084 <__aeabi_idiv0>
 8000da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dac:	f000 f806 	bl	8000dbc <__udivmoddi4>
 8000db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <__udivmoddi4>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	9e08      	ldr	r6, [sp, #32]
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	460f      	mov	r7, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14a      	bne.n	8000e62 <__udivmoddi4+0xa6>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	4694      	mov	ip, r2
 8000dd0:	d965      	bls.n	8000e9e <__udivmoddi4+0xe2>
 8000dd2:	fab2 f382 	clz	r3, r2
 8000dd6:	b143      	cbz	r3, 8000dea <__udivmoddi4+0x2e>
 8000dd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ddc:	f1c3 0220 	rsb	r2, r3, #32
 8000de0:	409f      	lsls	r7, r3
 8000de2:	fa20 f202 	lsr.w	r2, r0, r2
 8000de6:	4317      	orrs	r7, r2
 8000de8:	409c      	lsls	r4, r3
 8000dea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dee:	fa1f f58c 	uxth.w	r5, ip
 8000df2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000df6:	0c22      	lsrs	r2, r4, #16
 8000df8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e00:	fb01 f005 	mul.w	r0, r1, r5
 8000e04:	4290      	cmp	r0, r2
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x62>
 8000e08:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e10:	f080 811b 	bcs.w	800104a <__udivmoddi4+0x28e>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f240 8118 	bls.w	800104a <__udivmoddi4+0x28e>
 8000e1a:	3902      	subs	r1, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a12      	subs	r2, r2, r0
 8000e20:	b2a4      	uxth	r4, r4
 8000e22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2e:	fb00 f505 	mul.w	r5, r0, r5
 8000e32:	42a5      	cmp	r5, r4
 8000e34:	d90a      	bls.n	8000e4c <__udivmoddi4+0x90>
 8000e36:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3e:	f080 8106 	bcs.w	800104e <__udivmoddi4+0x292>
 8000e42:	42a5      	cmp	r5, r4
 8000e44:	f240 8103 	bls.w	800104e <__udivmoddi4+0x292>
 8000e48:	4464      	add	r4, ip
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	2100      	movs	r1, #0
 8000e54:	b11e      	cbz	r6, 8000e5e <__udivmoddi4+0xa2>
 8000e56:	40dc      	lsrs	r4, r3
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0xbc>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	f000 80ec 	beq.w	8001044 <__udivmoddi4+0x288>
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000e72:	4608      	mov	r0, r1
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	fab3 f183 	clz	r1, r3
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	d149      	bne.n	8000f14 <__udivmoddi4+0x158>
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	d302      	bcc.n	8000e8a <__udivmoddi4+0xce>
 8000e84:	4282      	cmp	r2, r0
 8000e86:	f200 80f7 	bhi.w	8001078 <__udivmoddi4+0x2bc>
 8000e8a:	1a84      	subs	r4, r0, r2
 8000e8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	4617      	mov	r7, r2
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d0e2      	beq.n	8000e5e <__udivmoddi4+0xa2>
 8000e98:	e9c6 4700 	strd	r4, r7, [r6]
 8000e9c:	e7df      	b.n	8000e5e <__udivmoddi4+0xa2>
 8000e9e:	b902      	cbnz	r2, 8000ea2 <__udivmoddi4+0xe6>
 8000ea0:	deff      	udf	#255	; 0xff
 8000ea2:	fab2 f382 	clz	r3, r2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 808f 	bne.w	8000fca <__udivmoddi4+0x20e>
 8000eac:	1a8a      	subs	r2, r1, r2
 8000eae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ebc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ec0:	0c22      	lsrs	r2, r4, #16
 8000ec2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ec6:	fb0e f005 	mul.w	r0, lr, r5
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x124>
 8000ece:	eb1c 0202 	adds.w	r2, ip, r2
 8000ed2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed6:	d202      	bcs.n	8000ede <__udivmoddi4+0x122>
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	f200 80ca 	bhi.w	8001072 <__udivmoddi4+0x2b6>
 8000ede:	4645      	mov	r5, r8
 8000ee0:	1a12      	subs	r2, r2, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ee8:	fb07 2210 	mls	r2, r7, r0, r2
 8000eec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ef0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ef4:	45a6      	cmp	lr, r4
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x14e>
 8000ef8:	eb1c 0404 	adds.w	r4, ip, r4
 8000efc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f00:	d202      	bcs.n	8000f08 <__udivmoddi4+0x14c>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f200 80ba 	bhi.w	800107c <__udivmoddi4+0x2c0>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f12:	e79f      	b.n	8000e54 <__udivmoddi4+0x98>
 8000f14:	f1c1 0720 	rsb	r7, r1, #32
 8000f18:	408b      	lsls	r3, r1
 8000f1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f22:	fa05 f401 	lsl.w	r4, r5, r1
 8000f26:	fa20 f307 	lsr.w	r3, r0, r7
 8000f2a:	40fd      	lsrs	r5, r7
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	fa00 f901 	lsl.w	r9, r0, r1
 8000f32:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000f36:	fa1f fe8c 	uxth.w	lr, ip
 8000f3a:	fbb5 f8f0 	udiv	r8, r5, r0
 8000f3e:	0c1c      	lsrs	r4, r3, #16
 8000f40:	fb00 5518 	mls	r5, r0, r8, r5
 8000f44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f48:	fb08 f50e 	mul.w	r5, r8, lr
 8000f4c:	42a5      	cmp	r5, r4
 8000f4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f52:	d90b      	bls.n	8000f6c <__udivmoddi4+0x1b0>
 8000f54:	eb1c 0404 	adds.w	r4, ip, r4
 8000f58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f5c:	f080 8087 	bcs.w	800106e <__udivmoddi4+0x2b2>
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	f240 8084 	bls.w	800106e <__udivmoddi4+0x2b2>
 8000f66:	f1a8 0802 	sub.w	r8, r8, #2
 8000f6a:	4464      	add	r4, ip
 8000f6c:	1b64      	subs	r4, r4, r5
 8000f6e:	b29d      	uxth	r5, r3
 8000f70:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f74:	fb00 4413 	mls	r4, r0, r3, r4
 8000f78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f80:	45a6      	cmp	lr, r4
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x1da>
 8000f84:	eb1c 0404 	adds.w	r4, ip, r4
 8000f88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f8c:	d26b      	bcs.n	8001066 <__udivmoddi4+0x2aa>
 8000f8e:	45a6      	cmp	lr, r4
 8000f90:	d969      	bls.n	8001066 <__udivmoddi4+0x2aa>
 8000f92:	3b02      	subs	r3, #2
 8000f94:	4464      	add	r4, ip
 8000f96:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000f9a:	fba0 8302 	umull	r8, r3, r0, r2
 8000f9e:	eba4 040e 	sub.w	r4, r4, lr
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	46c6      	mov	lr, r8
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	d355      	bcc.n	8001056 <__udivmoddi4+0x29a>
 8000faa:	d052      	beq.n	8001052 <__udivmoddi4+0x296>
 8000fac:	b156      	cbz	r6, 8000fc4 <__udivmoddi4+0x208>
 8000fae:	ebb9 030e 	subs.w	r3, r9, lr
 8000fb2:	eb64 0405 	sbc.w	r4, r4, r5
 8000fb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000fba:	40cb      	lsrs	r3, r1
 8000fbc:	40cc      	lsrs	r4, r1
 8000fbe:	431f      	orrs	r7, r3
 8000fc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	f1c3 0120 	rsb	r1, r3, #32
 8000fce:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fd2:	fa20 f201 	lsr.w	r2, r0, r1
 8000fd6:	fa25 f101 	lsr.w	r1, r5, r1
 8000fda:	409d      	lsls	r5, r3
 8000fdc:	432a      	orrs	r2, r5
 8000fde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe2:	fa1f fe8c 	uxth.w	lr, ip
 8000fe6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fea:	fb07 1510 	mls	r5, r7, r0, r1
 8000fee:	0c11      	lsrs	r1, r2, #16
 8000ff0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ff4:	fb00 f50e 	mul.w	r5, r0, lr
 8000ff8:	428d      	cmp	r5, r1
 8000ffa:	fa04 f403 	lsl.w	r4, r4, r3
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x256>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f100 38ff 	add.w	r8, r0, #4294967295
 8001008:	d22f      	bcs.n	800106a <__udivmoddi4+0x2ae>
 800100a:	428d      	cmp	r5, r1
 800100c:	d92d      	bls.n	800106a <__udivmoddi4+0x2ae>
 800100e:	3802      	subs	r0, #2
 8001010:	4461      	add	r1, ip
 8001012:	1b49      	subs	r1, r1, r5
 8001014:	b292      	uxth	r2, r2
 8001016:	fbb1 f5f7 	udiv	r5, r1, r7
 800101a:	fb07 1115 	mls	r1, r7, r5, r1
 800101e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001022:	fb05 f10e 	mul.w	r1, r5, lr
 8001026:	4291      	cmp	r1, r2
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x280>
 800102a:	eb1c 0202 	adds.w	r2, ip, r2
 800102e:	f105 38ff 	add.w	r8, r5, #4294967295
 8001032:	d216      	bcs.n	8001062 <__udivmoddi4+0x2a6>
 8001034:	4291      	cmp	r1, r2
 8001036:	d914      	bls.n	8001062 <__udivmoddi4+0x2a6>
 8001038:	3d02      	subs	r5, #2
 800103a:	4462      	add	r2, ip
 800103c:	1a52      	subs	r2, r2, r1
 800103e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001042:	e739      	b.n	8000eb8 <__udivmoddi4+0xfc>
 8001044:	4631      	mov	r1, r6
 8001046:	4630      	mov	r0, r6
 8001048:	e709      	b.n	8000e5e <__udivmoddi4+0xa2>
 800104a:	4639      	mov	r1, r7
 800104c:	e6e7      	b.n	8000e1e <__udivmoddi4+0x62>
 800104e:	4610      	mov	r0, r2
 8001050:	e6fc      	b.n	8000e4c <__udivmoddi4+0x90>
 8001052:	45c1      	cmp	r9, r8
 8001054:	d2aa      	bcs.n	8000fac <__udivmoddi4+0x1f0>
 8001056:	ebb8 0e02 	subs.w	lr, r8, r2
 800105a:	eb63 050c 	sbc.w	r5, r3, ip
 800105e:	3801      	subs	r0, #1
 8001060:	e7a4      	b.n	8000fac <__udivmoddi4+0x1f0>
 8001062:	4645      	mov	r5, r8
 8001064:	e7ea      	b.n	800103c <__udivmoddi4+0x280>
 8001066:	4603      	mov	r3, r0
 8001068:	e795      	b.n	8000f96 <__udivmoddi4+0x1da>
 800106a:	4640      	mov	r0, r8
 800106c:	e7d1      	b.n	8001012 <__udivmoddi4+0x256>
 800106e:	46d0      	mov	r8, sl
 8001070:	e77c      	b.n	8000f6c <__udivmoddi4+0x1b0>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	e733      	b.n	8000ee0 <__udivmoddi4+0x124>
 8001078:	4608      	mov	r0, r1
 800107a:	e70b      	b.n	8000e94 <__udivmoddi4+0xd8>
 800107c:	4464      	add	r4, ip
 800107e:	3802      	subs	r0, #2
 8001080:	e743      	b.n	8000f0a <__udivmoddi4+0x14e>
 8001082:	bf00      	nop

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001094:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001096:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4313      	orrs	r3, r2
 800109e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ac:	68fb      	ldr	r3, [r7, #12]
}
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80010c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010ce:	4013      	ands	r3, r2
 80010d0:	660b      	str	r3, [r1, #96]	; 0x60
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80010e0:	4b23      	ldr	r3, [pc, #140]	; (8001170 <MX_ADC_Init+0x94>)
 80010e2:	4a24      	ldr	r2, [pc, #144]	; (8001174 <MX_ADC_Init+0x98>)
 80010e4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010e6:	4b22      	ldr	r3, [pc, #136]	; (8001170 <MX_ADC_Init+0x94>)
 80010e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010ec:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <MX_ADC_Init+0x94>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <MX_ADC_Init+0x94>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <MX_ADC_Init+0x94>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <MX_ADC_Init+0x94>)
 8001102:	2204      	movs	r2, #4
 8001104:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_ADC_Init+0x94>)
 8001108:	2200      	movs	r2, #0
 800110a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <MX_ADC_Init+0x94>)
 800110e:	2200      	movs	r2, #0
 8001110:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_ADC_Init+0x94>)
 8001114:	2200      	movs	r2, #0
 8001116:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <MX_ADC_Init+0x94>)
 800111a:	2201      	movs	r2, #1
 800111c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_ADC_Init+0x94>)
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_ADC_Init+0x94>)
 8001128:	2200      	movs	r2, #0
 800112a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800112c:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_ADC_Init+0x94>)
 800112e:	2200      	movs	r2, #0
 8001130:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_ADC_Init+0x94>)
 8001134:	2200      	movs	r2, #0
 8001136:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <MX_ADC_Init+0x94>)
 800113c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001140:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_ADC_Init+0x94>)
 8001144:	2207      	movs	r2, #7
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_ADC_Init+0x94>)
 800114a:	2207      	movs	r2, #7
 800114c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_ADC_Init+0x94>)
 8001150:	2200      	movs	r2, #0
 8001152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_ADC_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_ADC_Init+0x94>)
 800115e:	f002 fd19 	bl	8003b94 <HAL_ADC_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001168:	f000 fe98 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000180 	.word	0x20000180
 8001174:	40012400 	.word	0x40012400

08001178 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a05      	ldr	r2, [pc, #20]	; (800119c <HAL_ADC_MspInit+0x24>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d103      	bne.n	8001192 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800118a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800118e:	f7ff ff7b 	bl	8001088 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40012400 	.word	0x40012400

080011a0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <HAL_ADC_MspDeInit+0x24>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d103      	bne.n	80011ba <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80011b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011b6:	f7ff ff7f 	bl	80010b8 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40012400 	.word	0x40012400

080011c8 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <SYS_InitMeasurement+0x14>)
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <SYS_InitMeasurement+0x18>)
 80011d0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000180 	.word	0x20000180
 80011e0:	40012400 	.word	0x40012400

080011e4 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80011f2:	4813      	ldr	r0, [pc, #76]	; (8001240 <SYS_GetBatteryLevel+0x5c>)
 80011f4:	f000 f82a 	bl	800124c <ADC_ReadChannels>
 80011f8:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d102      	bne.n	8001206 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	80fb      	strh	r3, [r7, #6]
 8001204:	e016      	b.n	8001234 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <SYS_GetBatteryLevel+0x60>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800120e:	4293      	cmp	r3, r2
 8001210:	d00b      	beq.n	800122a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <SYS_GetBatteryLevel+0x60>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	f640 43e4 	movw	r3, #3300	; 0xce4
 800121c:	fb03 f202 	mul.w	r2, r3, r2
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	e004      	b.n	8001234 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <SYS_GetBatteryLevel+0x64>)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001234:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	b4002000 	.word	0xb4002000
 8001244:	1fff75aa 	.word	0x1fff75aa
 8001248:	004c08d8 	.word	0x004c08d8

0800124c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001264:	f7ff ff3a 	bl	80010dc <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001268:	481a      	ldr	r0, [pc, #104]	; (80012d4 <ADC_ReadChannels+0x88>)
 800126a:	f003 fab2 	bl	80047d2 <HAL_ADCEx_Calibration_Start>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001274:	f000 fe12 	bl	8001e9c <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	4619      	mov	r1, r3
 800128a:	4812      	ldr	r0, [pc, #72]	; (80012d4 <ADC_ReadChannels+0x88>)
 800128c:	f002 ffbe 	bl	800420c <HAL_ADC_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001296:	f000 fe01 	bl	8001e9c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800129a:	480e      	ldr	r0, [pc, #56]	; (80012d4 <ADC_ReadChannels+0x88>)
 800129c:	f002 fe9a 	bl	8003fd4 <HAL_ADC_Start>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80012a6:	f000 fdf9 	bl	8001e9c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80012aa:	f04f 31ff 	mov.w	r1, #4294967295
 80012ae:	4809      	ldr	r0, [pc, #36]	; (80012d4 <ADC_ReadChannels+0x88>)
 80012b0:	f002 ff08 	bl	80040c4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80012b4:	4807      	ldr	r0, [pc, #28]	; (80012d4 <ADC_ReadChannels+0x88>)
 80012b6:	f002 fed3 	bl	8004060 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80012ba:	4806      	ldr	r0, [pc, #24]	; (80012d4 <ADC_ReadChannels+0x88>)
 80012bc:	f002 ff99 	bl	80041f2 <HAL_ADC_GetValue>
 80012c0:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80012c2:	4804      	ldr	r0, [pc, #16]	; (80012d4 <ADC_ReadChannels+0x88>)
 80012c4:	f002 fdfa 	bl	8003ebc <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80012c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000180 	.word	0x20000180

080012d8 <LL_AHB1_GRP1_EnableClock>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800130c:	2004      	movs	r0, #4
 800130e:	f7ff ffe3 	bl	80012d8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001312:	2001      	movs	r0, #1
 8001314:	f7ff ffe0 	bl	80012d8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	2102      	movs	r1, #2
 800131c:	200b      	movs	r0, #11
 800131e:	f003 fbfe 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001322:	200b      	movs	r0, #11
 8001324:	f003 fc15 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2100      	movs	r1, #0
 800132c:	200c      	movs	r0, #12
 800132e:	f003 fbf6 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001332:	200c      	movs	r0, #12
 8001334:	f003 fc0d 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	203d      	movs	r0, #61	; 0x3d
 800133e:	f003 fbee 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8001342:	203d      	movs	r0, #61	; 0x3d
 8001344:	f003 fc05 	bl	8004b52 <HAL_NVIC_EnableIRQ>

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}

0800134c <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001358:	23ff      	movs	r3, #255	; 0xff
 800135a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001362:	d311      	bcc.n	8001388 <FLASH_IF_Write+0x3c>
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <FLASH_IF_Write+0x48>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	029a      	lsls	r2, r3, #10
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <FLASH_IF_Write+0x4c>)
 800136c:	4013      	ands	r3, r2
 800136e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001372:	3b01      	subs	r3, #1
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	4293      	cmp	r3, r2
 8001378:	d306      	bcc.n	8001388 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 f85a 	bl	8001438 <FLASH_IF_INT_Write>
 8001384:	4603      	mov	r3, r0
 8001386:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001388:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	1fff75e0 	.word	0x1fff75e0
 8001398:	03fffc00 	.word	0x03fffc00

0800139c <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80013a8:	23ff      	movs	r3, #255	; 0xff
 80013aa:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80013b2:	d311      	bcc.n	80013d8 <FLASH_IF_Read+0x3c>
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <FLASH_IF_Read+0x48>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	029a      	lsls	r2, r3, #10
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <FLASH_IF_Read+0x4c>)
 80013bc:	4013      	ands	r3, r2
 80013be:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80013c2:	3b01      	subs	r3, #1
 80013c4:	68ba      	ldr	r2, [r7, #8]
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d306      	bcc.n	80013d8 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 f93a 	bl	8001648 <FLASH_IF_INT_Read>
 80013d4:	4603      	mov	r3, r0
 80013d6:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 80013d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	1fff75e0 	.word	0x1fff75e0
 80013e8:	03fffc00 	.word	0x03fffc00

080013ec <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80013f6:	23ff      	movs	r3, #255	; 0xff
 80013f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001400:	d310      	bcc.n	8001424 <FLASH_IF_Erase+0x38>
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <FLASH_IF_Erase+0x44>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	029a      	lsls	r2, r3, #10
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <FLASH_IF_Erase+0x48>)
 800140a:	4013      	ands	r3, r2
 800140c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001410:	3b01      	subs	r3, #1
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	4293      	cmp	r3, r2
 8001416:	d305      	bcc.n	8001424 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001418:	6839      	ldr	r1, [r7, #0]
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 f932 	bl	8001684 <FLASH_IF_INT_Erase>
 8001420:	4603      	mov	r3, r0
 8001422:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001424:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	1fff75e0 	.word	0x1fff75e0
 8001434:	03fffc00 	.word	0x03fffc00

08001438 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b090      	sub	sp, #64	; 0x40
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00c      	beq.n	8001476 <FLASH_IF_INT_Write+0x3e>
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d009      	beq.n	8001476 <FLASH_IF_INT_Write+0x3e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	2b00      	cmp	r3, #0
 800146a:	d104      	bne.n	8001476 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001476:	f06f 0305 	mvn.w	r3, #5
 800147a:	e0da      	b.n	8001632 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800147c:	f000 f992 	bl	80017a4 <FLASH_IF_INT_Clear_Error>
 8001480:	4603      	mov	r3, r0
 8001482:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 8001486:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800148a:	2b00      	cmp	r3, #0
 800148c:	f040 80cf 	bne.w	800162e <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001490:	f004 f83c 	bl	800550c <HAL_FLASH_Unlock>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 80c6 	bne.w	8001628 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 800149c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800149e:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80014a2:	4b66      	ldr	r3, [pc, #408]	; (800163c <FLASH_IF_INT_Write+0x204>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	0299      	lsls	r1, r3, #10
 80014a8:	4b65      	ldr	r3, [pc, #404]	; (8001640 <FLASH_IF_INT_Write+0x208>)
 80014aa:	400b      	ands	r3, r1
 80014ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80014b0:	fb01 f303 	mul.w	r3, r1, r3
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	0adb      	lsrs	r3, r3, #11
 80014b8:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 80014ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80014c4:	3b01      	subs	r3, #1
 80014c6:	4a5d      	ldr	r2, [pc, #372]	; (800163c <FLASH_IF_INT_Write+0x204>)
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	0291      	lsls	r1, r2, #10
 80014cc:	4a5c      	ldr	r2, [pc, #368]	; (8001640 <FLASH_IF_INT_Write+0x208>)
 80014ce:	400a      	ands	r2, r1
 80014d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80014d4:	fb01 f202 	mul.w	r2, r1, r2
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	0ada      	lsrs	r2, r3, #11
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	3301      	adds	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d905      	bls.n	80014f6 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80014ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014f0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80014f4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014fa:	e089      	b.n	8001610 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80014fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001502:	02db      	lsls	r3, r3, #11
 8001504:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001506:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 f925 	bl	8001758 <FLASH_IF_INT_IsEmpty>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d031      	beq.n	8001578 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001514:	4b4b      	ldr	r3, [pc, #300]	; (8001644 <FLASH_IF_INT_Write+0x20c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d103      	bne.n	8001524 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 800151c:	23fa      	movs	r3, #250	; 0xfa
 800151e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001522:	e07e      	b.n	8001622 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001524:	4b47      	ldr	r3, [pc, #284]	; (8001644 <FLASH_IF_INT_Write+0x20c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6939      	ldr	r1, [r7, #16]
 800152a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f88a 	bl	8001648 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001534:	4b43      	ldr	r3, [pc, #268]	; (8001644 <FLASH_IF_INT_Write+0x20c>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800153a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800153e:	4413      	add	r3, r2
 8001540:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001544:	b292      	uxth	r2, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f01a ff26 	bl	801c398 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001552:	4618      	mov	r0, r3
 8001554:	f000 f896 	bl	8001684 <FLASH_IF_INT_Erase>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 800155e:	23fe      	movs	r3, #254	; 0xfe
 8001560:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001564:	e05d      	b.n	8001622 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 800156a:	4b36      	ldr	r3, [pc, #216]	; (8001644 <FLASH_IF_INT_Write+0x20c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001570:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	e005      	b.n	8001584 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 800157c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800157e:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001582:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001584:	2300      	movs	r3, #0
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
 8001588:	e026      	b.n	80015d8 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 800158a:	6a3a      	ldr	r2, [r7, #32]
 800158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158e:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001596:	2001      	movs	r0, #1
 8001598:	f003 ff74 	bl	8005484 <HAL_FLASH_Program>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d113      	bne.n	80015ca <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a8:	6a3a      	ldr	r2, [r7, #32]
 80015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ac:	4413      	add	r3, r2
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	4299      	cmp	r1, r3
 80015b4:	bf08      	it	eq
 80015b6:	4290      	cmpeq	r0, r2
 80015b8:	d003      	beq.n	80015c2 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 80015ba:	23fc      	movs	r3, #252	; 0xfc
 80015bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 80015c0:	e00e      	b.n	80015e0 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	3308      	adds	r3, #8
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
 80015c8:	e003      	b.n	80015d2 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 80015ca:	23fc      	movs	r3, #252	; 0xfc
 80015cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 80015d0:	e006      	b.n	80015e0 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80015d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d4:	3308      	adds	r3, #8
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3d4      	bcc.n	800158a <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 80015e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d11b      	bne.n	8001620 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 80015e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ec:	4413      	add	r3, r2
 80015ee:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 80015f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f4:	4413      	add	r3, r2
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001602:	bf28      	it	cs
 8001604:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160c:	3301      	adds	r3, #1
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	4413      	add	r3, r2
 8001616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001618:	429a      	cmp	r2, r3
 800161a:	f4ff af6f 	bcc.w	80014fc <FLASH_IF_INT_Write+0xc4>
 800161e:	e000      	b.n	8001622 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001620:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001622:	f003 ff95 	bl	8005550 <HAL_FLASH_Lock>
 8001626:	e002      	b.n	800162e <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001628:	23fb      	movs	r3, #251	; 0xfb
 800162a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 800162e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001632:	4618      	mov	r0, r3
 8001634:	3740      	adds	r7, #64	; 0x40
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	1fff75e0 	.word	0x1fff75e0
 8001640:	03fffc00 	.word	0x03fffc00
 8001644:	200001e4 	.word	0x200001e4

08001648 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d002      	beq.n	8001664 <FLASH_IF_INT_Read+0x1c>
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001664:	f06f 0305 	mvn.w	r3, #5
 8001668:	e008      	b.n	800167c <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	b29b      	uxth	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f01a fe90 	bl	801c398 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001678:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 80016a4:	f06f 0305 	mvn.w	r3, #5
 80016a8:	e04e      	b.n	8001748 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80016aa:	f000 f87b 	bl	80017a4 <FLASH_IF_INT_Clear_Error>
 80016ae:	4603      	mov	r3, r0
 80016b0:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 80016b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d144      	bne.n	8001744 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80016ba:	f003 ff27 	bl	800550c <HAL_FLASH_Unlock>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d13d      	bne.n	8001740 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80016c4:	2302      	movs	r3, #2
 80016c6:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <FLASH_IF_INT_Erase+0xcc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	0299      	lsls	r1, r3, #10
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <FLASH_IF_INT_Erase+0xd0>)
 80016d6:	400b      	ands	r3, r1
 80016d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80016dc:	fb01 f303 	mul.w	r3, r1, r3
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	0adb      	lsrs	r3, r3, #11
 80016e4:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80016f0:	3b01      	subs	r3, #1
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <FLASH_IF_INT_Erase+0xcc>)
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	0291      	lsls	r1, r2, #10
 80016f8:	4a16      	ldr	r2, [pc, #88]	; (8001754 <FLASH_IF_INT_Erase+0xd0>)
 80016fa:	400a      	ands	r2, r1
 80016fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001700:	fb01 f202 	mul.w	r2, r1, r2
 8001704:	1a9b      	subs	r3, r3, r2
 8001706:	0ada      	lsrs	r2, r3, #11
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	3301      	adds	r3, #1
 800170e:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001710:	f107 0214 	add.w	r2, r7, #20
 8001714:	f107 0308 	add.w	r3, r7, #8
 8001718:	4611      	mov	r1, r2
 800171a:	4618      	mov	r0, r3
 800171c:	f003 fff8 	bl	8005710 <HAL_FLASHEx_Erase>
 8001720:	4603      	mov	r3, r0
 8001722:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001724:	7fbb      	ldrb	r3, [r7, #30]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d007      	beq.n	800173a <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 800172a:	7fbb      	ldrb	r3, [r7, #30]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d101      	bne.n	8001734 <FLASH_IF_INT_Erase+0xb0>
 8001730:	2301      	movs	r3, #1
 8001732:	e001      	b.n	8001738 <FLASH_IF_INT_Erase+0xb4>
 8001734:	f06f 0301 	mvn.w	r3, #1
 8001738:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 800173a:	f003 ff09 	bl	8005550 <HAL_FLASH_Lock>
 800173e:	e001      	b.n	8001744 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001740:	23fb      	movs	r3, #251	; 0xfb
 8001742:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001744:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	1fff75e0 	.word	0x1fff75e0
 8001754:	03fffc00 	.word	0x03fffc00

08001758 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	e011      	b.n	8001790 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001776:	bf08      	it	eq
 8001778:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800177c:	d002      	beq.n	8001784 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 800177e:	2301      	movs	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
      break;
 8001782:	e009      	b.n	8001798 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3308      	adds	r3, #8
 8001788:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	3308      	adds	r3, #8
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d3e9      	bcc.n	800176c <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001798:	68fb      	ldr	r3, [r7, #12]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 80017aa:	23fb      	movs	r3, #251	; 0xfb
 80017ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80017ae:	f003 fead 	bl	800550c <HAL_FLASH_Unlock>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d110      	bne.n	80017da <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <FLASH_IF_INT_Clear_Error+0x44>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <FLASH_IF_INT_Clear_Error+0x44>)
 80017be:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80017c2:	6193      	str	r3, [r2, #24]
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <FLASH_IF_INT_Clear_Error+0x44>)
 80017c6:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80017ca:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 80017cc:	f003 fec0 	bl	8005550 <HAL_FLASH_Lock>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	58004000 	.word	0x58004000

080017ec <LL_AHB2_GRP1_EnableClock>:
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4313      	orrs	r3, r2
 8001802:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001808:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001810:	68fb      	ldr	r3, [r7, #12]
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001830:	2001      	movs	r0, #1
 8001832:	f7ff ffdb 	bl	80017ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	2002      	movs	r0, #2
 8001838:	f7ff ffd8 	bl	80017ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183c:	2004      	movs	r0, #4
 800183e:	f7ff ffd5 	bl	80017ec <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|SPI_CSN_Pin|SPI_CEN_Pin, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8001848:	4825      	ldr	r0, [pc, #148]	; (80018e0 <MX_GPIO_Init+0xc4>)
 800184a:	f004 fa63 	bl	8005d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800184e:	2201      	movs	r2, #1
 8001850:	2120      	movs	r1, #32
 8001852:	4823      	ldr	r0, [pc, #140]	; (80018e0 <MX_GPIO_Init+0xc4>)
 8001854:	f004 fa5e 	bl	8005d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	f240 2131 	movw	r1, #561	; 0x231
 800185e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001862:	f004 fa57 	bl	8005d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin;
 8001866:	2338      	movs	r3, #56	; 0x38
 8001868:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	2301      	movs	r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	4619      	mov	r1, r3
 800187a:	4819      	ldr	r0, [pc, #100]	; (80018e0 <MX_GPIO_Init+0xc4>)
 800187c:	f004 f81c 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CEN_Pin;
 8001880:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001884:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	4619      	mov	r1, r3
 8001896:	4812      	ldr	r0, [pc, #72]	; (80018e0 <MX_GPIO_Init+0xc4>)
 8001898:	f004 f80e 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 800189c:	2331      	movs	r3, #49	; 0x31
 800189e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4619      	mov	r1, r3
 80018b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b4:	f004 f800 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 80018b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018be:	2311      	movs	r3, #17
 80018c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d2:	f003 fff1 	bl	80058b8 <HAL_GPIO_Init>

}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	48000400 	.word	0x48000400

080018e4 <LL_AHB2_GRP1_EnableClock>:
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001900:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4013      	ands	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001908:	68fb      	ldr	r3, [r7, #12]
}
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <LL_APB1_GRP1_EnableClock>:
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800191c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001920:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001922:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4313      	orrs	r3, r2
 800192a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800192c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001930:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4013      	ands	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001938:	68fb      	ldr	r3, [r7, #12]
}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <MX_I2C2_Init+0x74>)
 800194a:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <MX_I2C2_Init+0x78>)
 800194c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <MX_I2C2_Init+0x74>)
 8001950:	4a1b      	ldr	r2, [pc, #108]	; (80019c0 <MX_I2C2_Init+0x7c>)
 8001952:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <MX_I2C2_Init+0x74>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <MX_I2C2_Init+0x74>)
 800195c:	2201      	movs	r2, #1
 800195e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <MX_I2C2_Init+0x74>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_I2C2_Init+0x74>)
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <MX_I2C2_Init+0x74>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_I2C2_Init+0x74>)
 8001974:	2200      	movs	r2, #0
 8001976:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_I2C2_Init+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800197e:	480e      	ldr	r0, [pc, #56]	; (80019b8 <MX_I2C2_Init+0x74>)
 8001980:	f004 f9f8 	bl	8005d74 <HAL_I2C_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800198a:	f000 fa87 	bl	8001e9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800198e:	2100      	movs	r1, #0
 8001990:	4809      	ldr	r0, [pc, #36]	; (80019b8 <MX_I2C2_Init+0x74>)
 8001992:	f005 f841 	bl	8006a18 <HAL_I2CEx_ConfigAnalogFilter>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800199c:	f000 fa7e 	bl	8001e9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80019a0:	2100      	movs	r1, #0
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_I2C2_Init+0x74>)
 80019a4:	f005 f882 	bl	8006aac <HAL_I2CEx_ConfigDigitalFilter>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80019ae:	f000 fa75 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200001e8 	.word	0x200001e8
 80019bc:	40005800 	.word	0x40005800
 80019c0:	00707cbb 	.word	0x00707cbb

080019c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b096      	sub	sp, #88	; 0x58
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019dc:	f107 030c 	add.w	r3, r7, #12
 80019e0:	2238      	movs	r2, #56	; 0x38
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f01b ff9b 	bl	801d920 <memset>
  if(i2cHandle->Instance==I2C2)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a21      	ldr	r2, [pc, #132]	; (8001a74 <HAL_I2C_MspInit+0xb0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d13b      	bne.n	8001a6c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019f8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	4618      	mov	r0, r3
 8001a04:	f006 fb0e 	bl	8008024 <HAL_RCCEx_PeriphCLKConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001a0e:	f000 fa45 	bl	8001e9c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	2001      	movs	r0, #1
 8001a14:	f7ff ff66 	bl	80018e4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a18:	2002      	movs	r0, #2
 8001a1a:	f7ff ff63 	bl	80018e4 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a22:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a24:	2312      	movs	r3, #18
 8001a26:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a30:	2304      	movs	r3, #4
 8001a32:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3e:	f003 ff3b 	bl	80058b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a46:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a48:	2312      	movs	r3, #18
 8001a4a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a50:	2301      	movs	r3, #1
 8001a52:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a54:	2304      	movs	r3, #4
 8001a56:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4806      	ldr	r0, [pc, #24]	; (8001a78 <HAL_I2C_MspInit+0xb4>)
 8001a60:	f003 ff2a 	bl	80058b8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a64:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001a68:	f7ff ff54 	bl	8001914 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3758      	adds	r7, #88	; 0x58
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40005800 	.word	0x40005800
 8001a78:	48000400 	.word	0x48000400

08001a7c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8c:	f023 0218 	bic.w	r2, r3, #24
 8001a90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
	...

08001aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aac:	f001 fe84 	bl	80037b8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ab0:	f000 f83a 	bl	8001b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab4:	f7ff feb2 	bl	800181c <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001ab8:	f00a fabe 	bl	800c038 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001abc:	f001 fad6 	bl	800306c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001ac0:	f7ff ff40 	bl	8001944 <MX_I2C2_Init>
  MX_TIM16_Init();
 8001ac4:	f000 ff2c 	bl	8002920 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001ac8:	f000 ff5e 	bl	8002988 <MX_TIM17_Init>
  MX_SPI2_Init();
 8001acc:	f000 fb4a 	bl	8002164 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  UART2_SET =0;
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <main+0x6c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]

  F1_QueueIni(); // init Function queue
 8001ad6:	f000 f9ed 	bl	8001eb4 <F1_QueueIni>

  HAL_UART_Receive_IT(&huart2, (uint8_t *)aRXBufferUser, RX_BUFFER_SIZE);
 8001ada:	2220      	movs	r2, #32
 8001adc:	490e      	ldr	r1, [pc, #56]	; (8001b18 <main+0x70>)
 8001ade:	480f      	ldr	r0, [pc, #60]	; (8001b1c <main+0x74>)
 8001ae0:	f007 ffaa 	bl	8009a38 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aee:	f004 f911 	bl	8005d14 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim16);
 8001af2:	480b      	ldr	r0, [pc, #44]	; (8001b20 <main+0x78>)
 8001af4:	f007 fd22 	bl	800953c <HAL_TIM_Base_Start_IT>

  while (1)
  {

    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001af8:	f00a faa6 	bl	800c048 <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */
    MeasureOzone();
 8001afc:	f000 f8c8 	bl	8001c90 <MeasureOzone>

    F1_pull()();
 8001b00:	f000 fa1c 	bl	8001f3c <F1_pull>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4798      	blx	r3
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);///DBG
 8001b08:	2120      	movs	r1, #32
 8001b0a:	4806      	ldr	r0, [pc, #24]	; (8001b24 <main+0x7c>)
 8001b0c:	f004 f919 	bl	8005d42 <HAL_GPIO_TogglePin>
  {
 8001b10:	e7f2      	b.n	8001af8 <main+0x50>
 8001b12:	bf00      	nop
 8001b14:	20000008 	.word	0x20000008
 8001b18:	2000023c 	.word	0x2000023c
 8001b1c:	200004c0 	.word	0x200004c0
 8001b20:	2000038c 	.word	0x2000038c
 8001b24:	48000400 	.word	0x48000400

08001b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b09a      	sub	sp, #104	; 0x68
 8001b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2e:	f107 0320 	add.w	r3, r7, #32
 8001b32:	2248      	movs	r2, #72	; 0x48
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f01b fef2 	bl	801d920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b3c:	f107 0308 	add.w	r3, r7, #8
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
 8001b4c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b4e:	f004 fff9 	bl	8006b44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b52:	2000      	movs	r0, #0
 8001b54:	f7ff ff92 	bl	8001a7c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b58:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <SystemClock_Config+0xb8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b60:	4a1f      	ldr	r2, [pc, #124]	; (8001be0 <SystemClock_Config+0xb8>)
 8001b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <SystemClock_Config+0xb8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001b74:	2307      	movs	r3, #7
 8001b76:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8001b78:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b7e:	2381      	movs	r3, #129	; 0x81
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b88:	2340      	movs	r3, #64	; 0x40
 8001b8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b94:	f107 0320 	add.w	r3, r7, #32
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f005 fb1f 	bl	80071dc <HAL_RCC_OscConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001ba4:	f000 f97a 	bl	8001e9c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001ba8:	234f      	movs	r3, #79	; 0x4f
 8001baa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001bac:	2302      	movs	r3, #2
 8001bae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bc0:	f107 0308 	add.w	r3, r7, #8
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f005 fe8a 	bl	80078e0 <HAL_RCC_ClockConfig>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001bd2:	f000 f963 	bl	8001e9c <Error_Handler>
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	3768      	adds	r7, #104	; 0x68
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	58000400 	.word	0x58000400

08001be4 <MeasurePM_sens>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);


}

void MeasurePM_sens(void){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af04      	add	r7, sp, #16
 uint32_t tstV;
 uint32_t *ptstV;
	HAL_I2C_Mem_Read(&hi2c2, J5_SSP_addr << 1, 0x00, 1, J5_SSP_dataRX, 12, 1000);
 8001bea:	2333      	movs	r3, #51	; 0x33
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	b299      	uxth	r1, r3
 8001bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf6:	9302      	str	r3, [sp, #8]
 8001bf8:	230c      	movs	r3, #12
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <MeasurePM_sens+0x98>)
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2301      	movs	r3, #1
 8001c02:	2200      	movs	r2, #0
 8001c04:	481e      	ldr	r0, [pc, #120]	; (8001c80 <MeasurePM_sens+0x9c>)
 8001c06:	f004 fb2f 	bl	8006268 <HAL_I2C_Mem_Read>
	PM1 = J5_SSP_dataRX[0] + (J5_SSP_dataRX[1] << 8) + (J5_SSP_dataRX[2] << 16) +  (J5_SSP_dataRX[3] << 24);
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <MeasurePM_sens+0x98>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <MeasurePM_sens+0x98>)
 8001c12:	785b      	ldrb	r3, [r3, #1]
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	441a      	add	r2, r3
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <MeasurePM_sens+0x98>)
 8001c1a:	789b      	ldrb	r3, [r3, #2]
 8001c1c:	041b      	lsls	r3, r3, #16
 8001c1e:	441a      	add	r2, r3
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <MeasurePM_sens+0x98>)
 8001c22:	78db      	ldrb	r3, [r3, #3]
 8001c24:	061b      	lsls	r3, r3, #24
 8001c26:	4413      	add	r3, r2
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <MeasurePM_sens+0xa0>)
 8001c2c:	601a      	str	r2, [r3, #0]
	PM2_5 = J5_SSP_dataRX[4] + (J5_SSP_dataRX[5] << 8) + (J5_SSP_dataRX[6] << 16) +  (J5_SSP_dataRX[7] << 24);
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <MeasurePM_sens+0x98>)
 8001c30:	791b      	ldrb	r3, [r3, #4]
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MeasurePM_sens+0x98>)
 8001c36:	795b      	ldrb	r3, [r3, #5]
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	441a      	add	r2, r3
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MeasurePM_sens+0x98>)
 8001c3e:	799b      	ldrb	r3, [r3, #6]
 8001c40:	041b      	lsls	r3, r3, #16
 8001c42:	441a      	add	r2, r3
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <MeasurePM_sens+0x98>)
 8001c46:	79db      	ldrb	r3, [r3, #7]
 8001c48:	061b      	lsls	r3, r3, #24
 8001c4a:	4413      	add	r3, r2
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <MeasurePM_sens+0xa4>)
 8001c50:	601a      	str	r2, [r3, #0]
	PM10 = J5_SSP_dataRX[8] + (J5_SSP_dataRX[9] << 8) + (J5_SSP_dataRX[10] << 16) +  (J5_SSP_dataRX[11] << 24);
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <MeasurePM_sens+0x98>)
 8001c54:	7a1b      	ldrb	r3, [r3, #8]
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <MeasurePM_sens+0x98>)
 8001c5a:	7a5b      	ldrb	r3, [r3, #9]
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	441a      	add	r2, r3
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MeasurePM_sens+0x98>)
 8001c62:	7a9b      	ldrb	r3, [r3, #10]
 8001c64:	041b      	lsls	r3, r3, #16
 8001c66:	441a      	add	r2, r3
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <MeasurePM_sens+0x98>)
 8001c6a:	7adb      	ldrb	r3, [r3, #11]
 8001c6c:	061b      	lsls	r3, r3, #24
 8001c6e:	4413      	add	r3, r2
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MeasurePM_sens+0xa8>)
 8001c74:	601a      	str	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000280 	.word	0x20000280
 8001c80:	200001e8 	.word	0x200001e8
 8001c84:	20000260 	.word	0x20000260
 8001c88:	2000025c 	.word	0x2000025c
 8001c8c:	20000264 	.word	0x20000264

08001c90 <MeasureOzone>:
void MeasureOzone(void){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af02      	add	r7, sp, #8
	uint16_t RxLen;
	HAL_UART_Receive_IT(&huart2, (uint8_t *) aRXBufferUser, RX_BUFFER_SIZE);
 8001c96:	2220      	movs	r2, #32
 8001c98:	4908      	ldr	r1, [pc, #32]	; (8001cbc <MeasureOzone+0x2c>)
 8001c9a:	4809      	ldr	r0, [pc, #36]	; (8001cc0 <MeasureOzone+0x30>)
 8001c9c:	f007 fecc 	bl	8009a38 <HAL_UART_Receive_IT>
	HAL_UARTEx_ReceiveToIdle(&huart2, (uint8_t *) aRXBufferUser, RX_BUFFER_SIZE, &RxLen, 1000);
 8001ca0:	1dbb      	adds	r3, r7, #6
 8001ca2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ca6:	9200      	str	r2, [sp, #0]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	4904      	ldr	r1, [pc, #16]	; (8001cbc <MeasureOzone+0x2c>)
 8001cac:	4804      	ldr	r0, [pc, #16]	; (8001cc0 <MeasureOzone+0x30>)
 8001cae:	f00a f852 	bl	800bd56 <HAL_UARTEx_ReceiveToIdle>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000023c 	.word	0x2000023c
 8001cc0:	200004c0 	.word	0x200004c0
 8001cc4:	00000000 	.word	0x00000000

08001cc8 <MeasureTempHum>:

void MeasureTempHum(void){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af02      	add	r7, sp, #8
    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(SHT40_addr << 1),SHT40_dataRX, 6, 100);
 8001cce:	2344      	movs	r3, #68	; 0x44
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	b299      	uxth	r1, r3
 8001cd6:	2364      	movs	r3, #100	; 0x64
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	2306      	movs	r3, #6
 8001cdc:	4a42      	ldr	r2, [pc, #264]	; (8001de8 <MeasureTempHum+0x120>)
 8001cde:	4843      	ldr	r0, [pc, #268]	; (8001dec <MeasureTempHum+0x124>)
 8001ce0:	f004 f9cc 	bl	800607c <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 8001ce4:	4b40      	ldr	r3, [pc, #256]	; (8001de8 <MeasureTempHum+0x120>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	4b3e      	ldr	r3, [pc, #248]	; (8001de8 <MeasureTempHum+0x120>)
 8001cf0:	785b      	ldrb	r3, [r3, #1]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <MeasureTempHum+0x128>)
 8001cfa:	801a      	strh	r2, [r3, #0]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 8001cfc:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <MeasureTempHum+0x120>)
 8001cfe:	78db      	ldrb	r3, [r3, #3]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	021b      	lsls	r3, r3, #8
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	4b38      	ldr	r3, [pc, #224]	; (8001de8 <MeasureTempHum+0x120>)
 8001d08:	791b      	ldrb	r3, [r3, #4]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <MeasureTempHum+0x12c>)
 8001d12:	801a      	strh	r2, [r3, #0]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 8001d14:	4b36      	ldr	r3, [pc, #216]	; (8001df0 <MeasureTempHum+0x128>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe ffb9 	bl	8000c90 <__aeabi_ui2f>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fb95 	bl	8000450 <__aeabi_f2d>
 8001d26:	a32c      	add	r3, pc, #176	; (adr r3, 8001dd8 <MeasureTempHum+0x110>)
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	f7fe fbe8 	bl	8000500 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	a329      	add	r3, pc, #164	; (adr r3, 8001de0 <MeasureTempHum+0x118>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	f7fe fd09 	bl	8000754 <__aeabi_ddiv>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <MeasureTempHum+0x130>)
 8001d50:	f7fe fa1e 	bl	8000190 <__aeabi_dsub>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f7fe fe92 	bl	8000a84 <__aeabi_d2f>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4a26      	ldr	r2, [pc, #152]	; (8001dfc <MeasureTempHum+0x134>)
 8001d64:	6013      	str	r3, [r2, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <MeasureTempHum+0x12c>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe ff90 	bl	8000c90 <__aeabi_ui2f>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fb6c 	bl	8000450 <__aeabi_f2d>
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <MeasureTempHum+0x138>)
 8001d7e:	f7fe fbbf 	bl	8000500 <__aeabi_dmul>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	a315      	add	r3, pc, #84	; (adr r3, 8001de0 <MeasureTempHum+0x118>)
 8001d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d90:	f7fe fce0 	bl	8000754 <__aeabi_ddiv>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <MeasureTempHum+0x13c>)
 8001da2:	f7fe f9f5 	bl	8000190 <__aeabi_dsub>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f7fe fe69 	bl	8000a84 <__aeabi_d2f>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <MeasureTempHum+0x140>)
 8001db6:	6013      	str	r3, [r2, #0]
    HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(SHT40_addr << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8001db8:	2344      	movs	r3, #68	; 0x44
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	b299      	uxth	r1, r3
 8001dc0:	2364      	movs	r3, #100	; 0x64
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	4a11      	ldr	r2, [pc, #68]	; (8001e0c <MeasureTempHum+0x144>)
 8001dc8:	4808      	ldr	r0, [pc, #32]	; (8001dec <MeasureTempHum+0x124>)
 8001dca:	f004 f863 	bl	8005e94 <HAL_I2C_Master_Transmit>
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	f3af 8000 	nop.w
 8001dd8:	00000000 	.word	0x00000000
 8001ddc:	4065e000 	.word	0x4065e000
 8001de0:	00000000 	.word	0x00000000
 8001de4:	40efffe0 	.word	0x40efffe0
 8001de8:	20000274 	.word	0x20000274
 8001dec:	200001e8 	.word	0x200001e8
 8001df0:	2000027a 	.word	0x2000027a
 8001df4:	2000027c 	.word	0x2000027c
 8001df8:	40468000 	.word	0x40468000
 8001dfc:	20000268 	.word	0x20000268
 8001e00:	405f4000 	.word	0x405f4000
 8001e04:	40180000 	.word	0x40180000
 8001e08:	2000026c 	.word	0x2000026c
 8001e0c:	0801e3c3 	.word	0x0801e3c3

08001e10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
   if (htim == &htim16)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d12c      	bne.n	8001e7a <HAL_TIM_PeriodElapsedCallback+0x6a>
   {
	  counter++;
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	3301      	adds	r3, #1
 8001e26:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001e28:	6013      	str	r3, [r2, #0]
      switch(counter){
 8001e2a:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b0a      	cmp	r3, #10
 8001e30:	d009      	beq.n	8001e46 <HAL_TIM_PeriodElapsedCallback+0x36>
 8001e32:	2b0a      	cmp	r3, #10
 8001e34:	dc0c      	bgt.n	8001e50 <HAL_TIM_PeriodElapsedCallback+0x40>
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d009      	beq.n	8001e4e <HAL_TIM_PeriodElapsedCallback+0x3e>
 8001e3a:	2b05      	cmp	r3, #5
 8001e3c:	d108      	bne.n	8001e50 <HAL_TIM_PeriodElapsedCallback+0x40>
      case 3:
//    	  F1_push(MeasurePM_sens);

    	  break;
      case 5:
     	  PM_measure_flag = 1;
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]

    	  break;
 8001e44:	e004      	b.n	8001e50 <HAL_TIM_PeriodElapsedCallback+0x40>
      case 10:
    	//  F1_push(DisablePM_sens);

    	  PM_measure_flag = 0;
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	e000      	b.n	8001e50 <HAL_TIM_PeriodElapsedCallback+0x40>
    	  break;
 8001e4e:	bf00      	nop
      }
      F1_push(MeasureTempHum);
 8001e50:	480f      	ldr	r0, [pc, #60]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001e52:	f000 f83f 	bl	8001ed4 <F1_push>
      F1_push(MeasurePM_sens);
 8001e56:	480f      	ldr	r0, [pc, #60]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e58:	f000 f83c 	bl	8001ed4 <F1_push>

      counter %= 20;
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001e5e:	6819      	ldr	r1, [r3, #0]
 8001e60:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001e62:	fb83 2301 	smull	r2, r3, r3, r1
 8001e66:	10da      	asrs	r2, r3, #3
 8001e68:	17cb      	asrs	r3, r1, #31
 8001e6a:	1ad2      	subs	r2, r2, r3
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	1aca      	subs	r2, r1, r3
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001e78:	601a      	str	r2, [r3, #0]
   }
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000038c 	.word	0x2000038c
 8001e88:	20000270 	.word	0x20000270
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	08001cc9 	.word	0x08001cc9
 8001e94:	08001be5 	.word	0x08001be5
 8001e98:	66666667 	.word	0x66666667

08001e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
}
 8001ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <Error_Handler+0x8>

08001ea6 <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
	...

08001eb4 <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  F1_last = 0;
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <F1_QueueIni+0x18>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 8001ebe:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <F1_QueueIni+0x1c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	20000290 	.word	0x20000290
 8001ed0:	20000294 	.word	0x20000294

08001ed4 <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <F1_push+0x5c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	425a      	negs	r2, r3
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	f002 020f 	and.w	r2, r2, #15
 8001eec:	bf58      	it	pl
 8001eee:	4253      	negpl	r3, r2
 8001ef0:	4a10      	ldr	r2, [pc, #64]	; (8001f34 <F1_push+0x60>)
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d101      	bne.n	8001efc <F1_push+0x28>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e014      	b.n	8001f26 <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <F1_push+0x5c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	490b      	ldr	r1, [pc, #44]	; (8001f30 <F1_push+0x5c>)
 8001f04:	600a      	str	r2, [r1, #0]
 8001f06:	490c      	ldr	r1, [pc, #48]	; (8001f38 <F1_push+0x64>)
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <F1_push+0x5c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	425a      	negs	r2, r3
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	f002 020f 	and.w	r2, r2, #15
 8001f1c:	bf58      	it	pl
 8001f1e:	4253      	negpl	r3, r2
 8001f20:	4a03      	ldr	r2, [pc, #12]	; (8001f30 <F1_push+0x5c>)
 8001f22:	6013      	str	r3, [r2, #0]
  return 0;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	20000290 	.word	0x20000290
 8001f34:	20000294 	.word	0x20000294
 8001f38:	20000298 	.word	0x20000298

08001f3c <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <F1_pull+0x4c>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <F1_pull+0x50>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d101      	bne.n	8001f52 <F1_pull+0x16>
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <F1_pull+0x54>)
 8001f50:	e014      	b.n	8001f7c <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <F1_pull+0x50>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	490c      	ldr	r1, [pc, #48]	; (8001f8c <F1_pull+0x50>)
 8001f5a:	600a      	str	r2, [r1, #0]
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	; (8001f94 <F1_pull+0x58>)
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <F1_pull+0x50>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	425a      	negs	r2, r3
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	f002 020f 	and.w	r2, r2, #15
 8001f72:	bf58      	it	pl
 8001f74:	4253      	negpl	r3, r2
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <F1_pull+0x50>)
 8001f78:	6013      	str	r3, [r2, #0]
  return pullVar;
 8001f7a:	687b      	ldr	r3, [r7, #4]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000290 	.word	0x20000290
 8001f8c:	20000294 	.word	0x20000294
 8001f90:	08001ea7 	.word	0x08001ea7
 8001f94:	20000298 	.word	0x20000298

08001f98 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <LL_APB1_GRP1_EnableClock>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08c      	sub	sp, #48	; 0x30
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	222c      	movs	r2, #44	; 0x2c
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f01b fc93 	bl	801d920 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ffa:	4b22      	ldr	r3, [pc, #136]	; (8002084 <MX_RTC_Init+0x9c>)
 8001ffc:	4a22      	ldr	r2, [pc, #136]	; (8002088 <MX_RTC_Init+0xa0>)
 8001ffe:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8002000:	4b20      	ldr	r3, [pc, #128]	; (8002084 <MX_RTC_Init+0x9c>)
 8002002:	221f      	movs	r2, #31
 8002004:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002006:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <MX_RTC_Init+0x9c>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800200c:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <MX_RTC_Init+0x9c>)
 800200e:	2200      	movs	r2, #0
 8002010:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002012:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <MX_RTC_Init+0x9c>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002018:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <MX_RTC_Init+0x9c>)
 800201a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800201e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002020:	4b18      	ldr	r3, [pc, #96]	; (8002084 <MX_RTC_Init+0x9c>)
 8002022:	2200      	movs	r2, #0
 8002024:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <MX_RTC_Init+0x9c>)
 8002028:	f44f 7280 	mov.w	r2, #256	; 0x100
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800202e:	4815      	ldr	r0, [pc, #84]	; (8002084 <MX_RTC_Init+0x9c>)
 8002030:	f006 f912 	bl	8008258 <HAL_RTC_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800203a:	f7ff ff2f 	bl	8001e9c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800203e:	4811      	ldr	r0, [pc, #68]	; (8002084 <MX_RTC_Init+0x9c>)
 8002040:	f006 fc08 	bl	8008854 <HAL_RTCEx_SetSSRU_IT>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800204a:	f7ff ff27 	bl	8001e9c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800205a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800205e:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	2200      	movs	r2, #0
 800206a:	4619      	mov	r1, r3
 800206c:	4805      	ldr	r0, [pc, #20]	; (8002084 <MX_RTC_Init+0x9c>)
 800206e:	f006 f975 	bl	800835c <HAL_RTC_SetAlarm_IT>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002078:	f7ff ff10 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	3730      	adds	r7, #48	; 0x30
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	200002d8 	.word	0x200002d8
 8002088:	40002800 	.word	0x40002800

0800208c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b090      	sub	sp, #64	; 0x40
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002094:	f107 0308 	add.w	r3, r7, #8
 8002098:	2238      	movs	r2, #56	; 0x38
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f01b fc3f 	bl	801d920 <memset>
  if(rtcHandle->Instance==RTC)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a16      	ldr	r2, [pc, #88]	; (8002100 <HAL_RTC_MspInit+0x74>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d125      	bne.n	80020f8 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020b0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020b6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020b8:	f107 0308 	add.w	r3, r7, #8
 80020bc:	4618      	mov	r0, r3
 80020be:	f005 ffb1 	bl	8008024 <HAL_RCCEx_PeriphCLKConfig>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80020c8:	f7ff fee8 	bl	8001e9c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020cc:	f7ff ff64 	bl	8001f98 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80020d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80020d4:	f7ff ff70 	bl	8001fb8 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80020d8:	2200      	movs	r2, #0
 80020da:	2100      	movs	r1, #0
 80020dc:	2002      	movs	r0, #2
 80020de:	f002 fd1e 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80020e2:	2002      	movs	r0, #2
 80020e4:	f002 fd35 	bl	8004b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2100      	movs	r1, #0
 80020ec:	202a      	movs	r0, #42	; 0x2a
 80020ee:	f002 fd16 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80020f2:	202a      	movs	r0, #42	; 0x2a
 80020f4:	f002 fd2d 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80020f8:	bf00      	nop
 80020fa:	3740      	adds	r7, #64	; 0x40
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40002800 	.word	0x40002800

08002104 <LL_AHB2_GRP1_EnableClock>:
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4313      	orrs	r3, r2
 800211a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800211c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002120:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4013      	ands	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002128:	68fb      	ldr	r3, [r7, #12]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <LL_APB1_GRP1_EnableClock>:
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800213c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002140:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4313      	orrs	r3, r2
 800214a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800214c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002150:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4013      	ands	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002158:	68fb      	ldr	r3, [r7, #12]
}
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <MX_SPI2_Init+0x74>)
 800216a:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <MX_SPI2_Init+0x78>)
 800216c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800216e:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <MX_SPI2_Init+0x74>)
 8002170:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002174:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <MX_SPI2_Init+0x74>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800217c:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <MX_SPI2_Init+0x74>)
 800217e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002182:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <MX_SPI2_Init+0x74>)
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800218a:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <MX_SPI2_Init+0x74>)
 800218c:	2200      	movs	r2, #0
 800218e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <MX_SPI2_Init+0x74>)
 8002192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002196:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002198:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <MX_SPI2_Init+0x74>)
 800219a:	2218      	movs	r2, #24
 800219c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800219e:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <MX_SPI2_Init+0x74>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <MX_SPI2_Init+0x74>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <MX_SPI2_Init+0x74>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80021b0:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <MX_SPI2_Init+0x74>)
 80021b2:	2207      	movs	r2, #7
 80021b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <MX_SPI2_Init+0x74>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <MX_SPI2_Init+0x74>)
 80021be:	2208      	movs	r2, #8
 80021c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021c2:	4805      	ldr	r0, [pc, #20]	; (80021d8 <MX_SPI2_Init+0x74>)
 80021c4:	f006 fbd4 	bl	8008970 <HAL_SPI_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80021ce:	f7ff fe65 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000310 	.word	0x20000310
 80021dc:	40003800 	.word	0x40003800

080021e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b096      	sub	sp, #88	; 0x58
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	2238      	movs	r2, #56	; 0x38
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f01b fb8d 	bl	801d920 <memset>
  if(spiHandle->Instance==SPI2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a21      	ldr	r2, [pc, #132]	; (8002290 <HAL_SPI_MspInit+0xb0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d13b      	bne.n	8002288 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8002210:	2310      	movs	r3, #16
 8002212:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8002214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002218:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800221a:	f107 030c 	add.w	r3, r7, #12
 800221e:	4618      	mov	r0, r3
 8002220:	f005 ff00 	bl	8008024 <HAL_RCCEx_PeriphCLKConfig>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800222a:	f7ff fe37 	bl	8001e9c <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800222e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002232:	f7ff ff7f 	bl	8002134 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	2002      	movs	r0, #2
 8002238:	f7ff ff64 	bl	8002104 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223c:	2001      	movs	r0, #1
 800223e:	f7ff ff61 	bl	8002104 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8002242:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002246:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002254:	2305      	movs	r3, #5
 8002256:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002258:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800225c:	4619      	mov	r1, r3
 800225e:	480d      	ldr	r0, [pc, #52]	; (8002294 <HAL_SPI_MspInit+0xb4>)
 8002260:	f003 fb2a 	bl	80058b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002268:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002276:	2305      	movs	r3, #5
 8002278:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800227e:	4619      	mov	r1, r3
 8002280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002284:	f003 fb18 	bl	80058b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002288:	bf00      	nop
 800228a:	3758      	adds	r7, #88	; 0x58
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40003800 	.word	0x40003800
 8002294:	48000400 	.word	0x48000400

08002298 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800229e:	2201      	movs	r2, #1
 80022a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	58000400 	.word	0x58000400

080022b0 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80022cc:	f001 fa94 	bl	80037f8 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 80022d0:	f7ff ffe2 	bl	8002298 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80022d4:	2001      	movs	r0, #1
 80022d6:	f004 fcc7 	bl	8006c68 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}

080022de <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 80022e2:	f001 fa97 	bl	8003814 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80022e6:	f001 f90b 	bl	8003500 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}

080022ee <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80022f2:	f001 fa81 	bl	80037f8 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80022f6:	2101      	movs	r1, #1
 80022f8:	2000      	movs	r0, #0
 80022fa:	f004 fc31 	bl	8006b60 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}

08002302 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8002306:	f001 fa85 	bl	8003814 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800231e:	e7fe      	b.n	800231e <NMI_Handler+0x4>

08002320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <HardFault_Handler+0x4>

08002326 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800232a:	e7fe      	b.n	800232a <MemManage_Handler+0x4>

0800232c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002330:	e7fe      	b.n	8002330 <BusFault_Handler+0x4>

08002332 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002336:	e7fe      	b.n	8002336 <UsageFault_Handler+0x4>

08002338 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800236e:	f006 faad 	bl	80088cc <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200002d8 	.word	0x200002d8

0800237c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <DMA1_Channel1_IRQHandler+0x10>)
 8002382:	f002 fe7d 	bl	8005080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000554 	.word	0x20000554

08002390 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <DMA1_Channel2_IRQHandler+0x10>)
 8002396:	f002 fe73 	bl	8005080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200005b4 	.word	0x200005b4

080023a4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	static int counter = 0;
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80023a8:	4804      	ldr	r0, [pc, #16]	; (80023bc <TIM16_IRQHandler+0x18>)
 80023aa:	f007 f913 	bl	80095d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  counter++;
 80023ae:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <TIM16_IRQHandler+0x1c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	4a02      	ldr	r2, [pc, #8]	; (80023c0 <TIM16_IRQHandler+0x1c>)
 80023b6:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM16_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	2000038c 	.word	0x2000038c
 80023c0:	20000374 	.word	0x20000374

080023c4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
static int counter = 0;
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80023c8:	4804      	ldr	r0, [pc, #16]	; (80023dc <TIM17_IRQHandler+0x18>)
 80023ca:	f007 f903 	bl	80095d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  counter++;
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <TIM17_IRQHandler+0x1c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3301      	adds	r3, #1
 80023d4:	4a02      	ldr	r2, [pc, #8]	; (80023e0 <TIM17_IRQHandler+0x1c>)
 80023d6:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM17_IRQn 1 */
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	200003d8 	.word	0x200003d8
 80023e0:	20000378 	.word	0x20000378

080023e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <USART1_IRQHandler+0x10>)
 80023ea:	f007 fbf1 	bl	8009bd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	2000042c 	.word	0x2000042c

080023f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023fc:	4802      	ldr	r0, [pc, #8]	; (8002408 <USART2_IRQHandler+0x10>)
 80023fe:	f007 fbe7 	bl	8009bd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200004c0 	.word	0x200004c0

0800240c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <RTC_Alarm_IRQHandler+0x10>)
 8002412:	f006 f90b 	bl	800862c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002d8 	.word	0x200002d8

08002420 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <SUBGHZ_Radio_IRQHandler+0x10>)
 8002426:	f006 fe93 	bl	8009150 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	2000037c 	.word	0x2000037c

08002434 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <DMAMUX1_OVR_IRQHandler+0x10>)
 800243a:	f002 ffd1 	bl	80053e0 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200005b4 	.word	0x200005b4

08002448 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002454:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4313      	orrs	r3, r2
 800245e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002464:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4013      	ands	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800246c:	68fb      	ldr	r3, [r7, #12]
}
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <MX_SUBGHZ_Init+0x20>)
 800247e:	2208      	movs	r2, #8
 8002480:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002482:	4805      	ldr	r0, [pc, #20]	; (8002498 <MX_SUBGHZ_Init+0x20>)
 8002484:	f006 fbe2 	bl	8008c4c <HAL_SUBGHZ_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800248e:	f7ff fd05 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	2000037c 	.word	0x2000037c

0800249c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80024a4:	2001      	movs	r0, #1
 80024a6:	f7ff ffcf 	bl	8002448 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80024aa:	2200      	movs	r2, #0
 80024ac:	2100      	movs	r1, #0
 80024ae:	2032      	movs	r0, #50	; 0x32
 80024b0:	f002 fb35 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80024b4:	2032      	movs	r0, #50	; 0x32
 80024b6:	f002 fb4c 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <LL_RCC_SetClkAfterWakeFromStop>:
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80024ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80024d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80024ec:	4b02      	ldr	r3, [pc, #8]	; (80024f8 <LL_FLASH_GetUDN+0x10>)
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr
 80024f8:	1fff7580 	.word	0x1fff7580

080024fc <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <LL_FLASH_GetDeviceID+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	b2db      	uxtb	r3, r3
}
 8002506:	4618      	mov	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	1fff7584 	.word	0x1fff7584

08002514 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <LL_FLASH_GetSTCompanyID+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0a1b      	lsrs	r3, r3, #8
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	1fff7584 	.word	0x1fff7584

0800252c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002530:	2000      	movs	r0, #0
 8002532:	f7ff ffc6 	bl	80024c2 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002536:	f01a fcbd 	bl	801ceb4 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <SystemApp_Init+0x50>)
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002540:	f000 f98c 	bl	800285c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002544:	f01a ff46 	bl	801d3d4 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002548:	480d      	ldr	r0, [pc, #52]	; (8002580 <SystemApp_Init+0x54>)
 800254a:	f01a fff1 	bl	801d530 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <SystemApp_Init+0x58>)
 8002550:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002554:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002556:	2002      	movs	r0, #2
 8002558:	f01a fff8 	bl	801d54c <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 800255c:	f7fe fe34 	bl	80011c8 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002560:	f000 f9b4 	bl	80028cc <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002564:	f019 fe72 	bl	801c24c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002568:	2101      	movs	r1, #1
 800256a:	2001      	movs	r0, #1
 800256c:	f019 feae 	bl	801c2cc <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002570:	2101      	movs	r1, #1
 8002572:	2001      	movs	r0, #1
 8002574:	f019 fe7a 	bl	801c26c <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000388 	.word	0x20000388
 8002580:	08002755 	.word	0x08002755
 8002584:	58004000 	.word	0x58004000

08002588 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 800258c:	f019 fece 	bl	801c32c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}

08002594 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800259e:	f7fe fe21 	bl	80011e4 <SYS_GetBatteryLevel>
 80025a2:	4603      	mov	r3, r0
 80025a4:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80025a6:	88bb      	ldrh	r3, [r7, #4]
 80025a8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d902      	bls.n	80025b6 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80025b0:	23fe      	movs	r3, #254	; 0xfe
 80025b2:	71fb      	strb	r3, [r7, #7]
 80025b4:	e014      	b.n	80025e0 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80025b6:	88bb      	ldrh	r3, [r7, #4]
 80025b8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80025bc:	d202      	bcs.n	80025c4 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	71fb      	strb	r3, [r7, #7]
 80025c2:	e00d      	b.n	80025e0 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80025c4:	88bb      	ldrh	r3, [r7, #4]
 80025c6:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80025ca:	461a      	mov	r2, r3
 80025cc:	4613      	mov	r3, r2
 80025ce:	01db      	lsls	r3, r3, #7
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <GetBatteryLevel+0x58>)
 80025d8:	fba3 2302 	umull	r2, r3, r3, r2
 80025dc:	09db      	lsrs	r3, r3, #7
 80025de:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80025e0:	79fb      	ldrb	r3, [r7, #7]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	1b4e81b5 	.word	0x1b4e81b5

080025f0 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 f93b 	bl	8002878 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe fb9b 	bl	8000d40 <__aeabi_f2iz>
 800260a:	4603      	mov	r3, r0
 800260c:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 800260e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3720      	adds	r7, #32
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800261a:	b590      	push	{r4, r7, lr}
 800261c:	b087      	sub	sp, #28
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002626:	f7ff ff5f 	bl	80024e8 <LL_FLASH_GetUDN>
 800262a:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002632:	d138      	bne.n	80026a6 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002634:	f001 f8fc 	bl	8003830 <HAL_GetUIDw0>
 8002638:	4604      	mov	r4, r0
 800263a:	f001 f90d 	bl	8003858 <HAL_GetUIDw2>
 800263e:	4603      	mov	r3, r0
 8002640:	4423      	add	r3, r4
 8002642:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002644:	f001 f8fe 	bl	8003844 <HAL_GetUIDw1>
 8002648:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	0e1a      	lsrs	r2, r3, #24
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3307      	adds	r3, #7
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	0c1a      	lsrs	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3306      	adds	r3, #6
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	0a1a      	lsrs	r2, r3, #8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3305      	adds	r3, #5
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3304      	adds	r3, #4
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	0e1a      	lsrs	r2, r3, #24
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3303      	adds	r3, #3
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	0c1a      	lsrs	r2, r3, #16
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3302      	adds	r3, #2
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	0a1a      	lsrs	r2, r3, #8
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3301      	adds	r3, #1
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80026a4:	e031      	b.n	800270a <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3307      	adds	r3, #7
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	0a1a      	lsrs	r2, r3, #8
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3306      	adds	r3, #6
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	0c1a      	lsrs	r2, r3, #16
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3305      	adds	r3, #5
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	0e1a      	lsrs	r2, r3, #24
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3304      	adds	r3, #4
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80026d4:	f7ff ff12 	bl	80024fc <LL_FLASH_GetDeviceID>
 80026d8:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3303      	adds	r3, #3
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80026e4:	f7ff ff16 	bl	8002514 <LL_FLASH_GetSTCompanyID>
 80026e8:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3302      	adds	r3, #2
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	0a1a      	lsrs	r2, r3, #8
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3301      	adds	r3, #1
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	0c1b      	lsrs	r3, r3, #16
 8002704:	b2da      	uxtb	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	701a      	strb	r2, [r3, #0]
}
 800270a:	bf00      	nop
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	bd90      	pop	{r4, r7, pc}

08002712 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8002712:	b590      	push	{r4, r7, lr}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 800271a:	f7ff fee5 	bl	80024e8 <LL_FLASH_GetUDN>
 800271e:	4602      	mov	r2, r0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d10d      	bne.n	800274a <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800272e:	f001 f87f 	bl	8003830 <HAL_GetUIDw0>
 8002732:	4604      	mov	r4, r0
 8002734:	f001 f886 	bl	8003844 <HAL_GetUIDw1>
 8002738:	4603      	mov	r3, r0
 800273a:	405c      	eors	r4, r3
 800273c:	f001 f88c 	bl	8003858 <HAL_GetUIDw2>
 8002740:	4603      	mov	r3, r0
 8002742:	ea84 0203 	eor.w	r2, r4, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	bd90      	pop	{r4, r7, pc}
	...

08002754 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af02      	add	r7, sp, #8
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800275e:	f107 0308 	add.w	r3, r7, #8
 8002762:	4618      	mov	r0, r3
 8002764:	f019 fef2 	bl	801c54c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800276e:	9200      	str	r2, [sp, #0]
 8002770:	4a07      	ldr	r2, [pc, #28]	; (8002790 <TimestampNow+0x3c>)
 8002772:	2110      	movs	r1, #16
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f81d 	bl	80027b4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fd fcfc 	bl	8000178 <strlen>
 8002780:	4603      	mov	r3, r0
 8002782:	b29a      	uxth	r2, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	0801db60 	.word	0x0801db60

08002794 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002798:	2101      	movs	r1, #1
 800279a:	2002      	movs	r0, #2
 800279c:	f019 fd66 	bl	801c26c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80027a8:	2100      	movs	r1, #0
 80027aa:	2002      	movs	r0, #2
 80027ac:	f019 fd5e 	bl	801c26c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80027b4:	b40c      	push	{r2, r3}
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80027c0:	f107 031c 	add.w	r3, r7, #28
 80027c4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80027c6:	6839      	ldr	r1, [r7, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f01a f88f 	bl	801c8f0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027dc:	b002      	add	sp, #8
 80027de:	4770      	bx	lr

080027e0 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_GetTick+0x24>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002806:	f000 f9dd 	bl	8002bc4 <TIMER_IF_GetTimerValue>
 800280a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 800280c:	687b      	ldr	r3, [r7, #4]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000388 	.word	0x20000388

0800281c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4618      	mov	r0, r3
 8002828:	f000 fa53 	bl	8002cd2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <LL_EXTI_EnableIT_32_63+0x24>)
 800283e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002842:	4905      	ldr	r1, [pc, #20]	; (8002858 <LL_EXTI_EnableIT_32_63+0x24>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	58000800 	.word	0x58000800

0800285c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002860:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002864:	f7ff ffe6 	bl	8002834 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002868:	f001 f800 	bl	800386c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800286c:	f001 f804 	bl	8003878 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002870:	f001 f808 	bl	8003884 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}

08002878 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002880:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <EnvSensors_Read+0x40>)
 8002882:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002884:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <EnvSensors_Read+0x44>)
 8002886:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002888:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <EnvSensors_Read+0x48>)
 800288a:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <EnvSensors_Read+0x4c>)
 80028a2:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <EnvSensors_Read+0x50>)
 80028a8:	611a      	str	r2, [r3, #16]

  return 0;
 80028aa:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	371c      	adds	r7, #28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	42480000 	.word	0x42480000
 80028bc:	41900000 	.word	0x41900000
 80028c0:	447a0000 	.word	0x447a0000
 80028c4:	003e090d 	.word	0x003e090d
 80028c8:	000503ab 	.word	0x000503ab

080028cc <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 80028d6:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <LL_APB2_GRP1_EnableClock>:
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80028f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4313      	orrs	r3, r2
 8002904:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4013      	ands	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002912:	68fb      	ldr	r3, [r7, #12]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr
	...

08002920 <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002924:	4b16      	ldr	r3, [pc, #88]	; (8002980 <MX_TIM16_Init+0x60>)
 8002926:	4a17      	ldr	r2, [pc, #92]	; (8002984 <MX_TIM16_Init+0x64>)
 8002928:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 800292a:	4b15      	ldr	r3, [pc, #84]	; (8002980 <MX_TIM16_Init+0x60>)
 800292c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002930:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002932:	4b13      	ldr	r3, [pc, #76]	; (8002980 <MX_TIM16_Init+0x60>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32000;
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <MX_TIM16_Init+0x60>)
 800293a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800293e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <MX_TIM16_Init+0x60>)
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002946:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <MX_TIM16_Init+0x60>)
 8002948:	2200      	movs	r2, #0
 800294a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800294c:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <MX_TIM16_Init+0x60>)
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002952:	480b      	ldr	r0, [pc, #44]	; (8002980 <MX_TIM16_Init+0x60>)
 8002954:	f006 fd9a 	bl	800948c <HAL_TIM_Base_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800295e:	f7ff fa9d 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002962:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002966:	f7ff ffc2 	bl	80028ee <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	201c      	movs	r0, #28
 8002970:	f002 f8d5 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002974:	201c      	movs	r0, #28
 8002976:	f002 f8ec 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM16_Init 2 */

}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	2000038c 	.word	0x2000038c
 8002984:	40014400 	.word	0x40014400

08002988 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800298c:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <MX_TIM17_Init+0x5c>)
 800298e:	4a16      	ldr	r2, [pc, #88]	; (80029e8 <MX_TIM17_Init+0x60>)
 8002990:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <MX_TIM17_Init+0x5c>)
 8002994:	2200      	movs	r2, #0
 8002996:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <MX_TIM17_Init+0x5c>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800299e:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <MX_TIM17_Init+0x5c>)
 80029a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029a4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a6:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <MX_TIM17_Init+0x5c>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80029ac:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <MX_TIM17_Init+0x5c>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b2:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <MX_TIM17_Init+0x5c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80029b8:	480a      	ldr	r0, [pc, #40]	; (80029e4 <MX_TIM17_Init+0x5c>)
 80029ba:	f006 fd67 	bl	800948c <HAL_TIM_Base_Init>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80029c4:	f7ff fa6a 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80029c8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80029cc:	f7ff ff8f 	bl	80028ee <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2100      	movs	r1, #0
 80029d4:	201d      	movs	r0, #29
 80029d6:	f002 f8a2 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80029da:	201d      	movs	r0, #29
 80029dc:	f002 f8b9 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM17_Init 2 */

}
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	200003d8 	.word	0x200003d8
 80029e8:	40014800 	.word	0x40014800

080029ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <HAL_TIM_Base_MspInit+0x58>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d10c      	bne.n	8002a18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80029fe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002a02:	f7ff ff74 	bl	80028ee <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2100      	movs	r1, #0
 8002a0a:	201c      	movs	r0, #28
 8002a0c:	f002 f887 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002a10:	201c      	movs	r0, #28
 8002a12:	f002 f89e 	bl	8004b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002a16:	e010      	b.n	8002a3a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <HAL_TIM_Base_MspInit+0x5c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d10b      	bne.n	8002a3a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002a22:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002a26:	f7ff ff62 	bl	80028ee <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	201d      	movs	r0, #29
 8002a30:	f002 f875 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002a34:	201d      	movs	r0, #29
 8002a36:	f002 f88c 	bl	8004b52 <HAL_NVIC_EnableIRQ>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40014400 	.word	0x40014400
 8002a48:	40014800 	.word	0x40014800

08002a4c <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
	...

08002a64 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002a6e:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <TIMER_IF_Init+0x5c>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	f083 0301 	eor.w	r3, r3, #1
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01b      	beq.n	8002ab4 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <TIMER_IF_Init+0x60>)
 8002a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002a84:	f7ff fab0 	bl	8001fe8 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002a88:	f000 f856 	bl	8002b38 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002a8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a90:	480c      	ldr	r0, [pc, #48]	; (8002ac4 <TIMER_IF_Init+0x60>)
 8002a92:	f005 fd6f 	bl	8008574 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <TIMER_IF_Init+0x60>)
 8002a98:	f04f 32ff 	mov.w	r2, #4294967295
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002a9e:	4809      	ldr	r0, [pc, #36]	; (8002ac4 <TIMER_IF_Init+0x60>)
 8002aa0:	f005 fea6 	bl	80087f0 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f000 f9d3 	bl	8002e50 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002aaa:	f000 f85f 	bl	8002b6c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002aae:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <TIMER_IF_Init+0x5c>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000424 	.word	0x20000424
 8002ac4:	200002d8 	.word	0x200002d8

08002ac8 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08e      	sub	sp, #56	; 0x38
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002ad6:	f107 0308 	add.w	r3, r7, #8
 8002ada:	222c      	movs	r2, #44	; 0x2c
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f01a ff1e 	bl	801d920 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002ae4:	f000 f828 	bl	8002b38 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <TIMER_IF_StartTimer+0x68>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	4413      	add	r3, r2
 8002af0:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002af2:	2300      	movs	r3, #0
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002b00:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002b04:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b0a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b0c:	f107 0308 	add.w	r3, r7, #8
 8002b10:	2201      	movs	r2, #1
 8002b12:	4619      	mov	r1, r3
 8002b14:	4807      	ldr	r0, [pc, #28]	; (8002b34 <TIMER_IF_StartTimer+0x6c>)
 8002b16:	f005 fc21 	bl	800835c <HAL_RTC_SetAlarm_IT>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002b20:	f7ff f9bc 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002b24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3738      	adds	r7, #56	; 0x38
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000428 	.word	0x20000428
 8002b34:	200002d8 	.word	0x200002d8

08002b38 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <TIMER_IF_StopTimer+0x2c>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002b48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b4c:	4806      	ldr	r0, [pc, #24]	; (8002b68 <TIMER_IF_StopTimer+0x30>)
 8002b4e:	f005 fd11 	bl	8008574 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002b52:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <TIMER_IF_StopTimer+0x30>)
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40002800 	.word	0x40002800
 8002b68:	200002d8 	.word	0x200002d8

08002b6c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002b70:	f000 f98e 	bl	8002e90 <GetTimerTicks>
 8002b74:	4603      	mov	r3, r0
 8002b76:	4a03      	ldr	r2, [pc, #12]	; (8002b84 <TIMER_IF_SetTimerContext+0x18>)
 8002b78:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002b7a:	4b02      	ldr	r3, [pc, #8]	; (8002b84 <TIMER_IF_SetTimerContext+0x18>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000428 	.word	0x20000428

08002b88 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002b8c:	4b02      	ldr	r3, [pc, #8]	; (8002b98 <TIMER_IF_GetTimerContext+0x10>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	20000428 	.word	0x20000428

08002b9c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002ba6:	f000 f973 	bl	8002e90 <GetTimerTicks>
 8002baa:	4602      	mov	r2, r0
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002bb4:	687b      	ldr	r3, [r7, #4]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000428 	.word	0x20000428

08002bc4 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <TIMER_IF_GetTimerValue+0x24>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002bd6:	f000 f95b 	bl	8002e90 <GetTimerTicks>
 8002bda:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002bdc:	687b      	ldr	r3, [r7, #4]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000424 	.word	0x20000424

08002bec <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002bfa:	687b      	ldr	r3, [r7, #4]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002c06:	b5b0      	push	{r4, r5, r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002c0e:	2100      	movs	r1, #0
 8002c10:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	2000      	movs	r0, #0
 8002c16:	460a      	mov	r2, r1
 8002c18:	4603      	mov	r3, r0
 8002c1a:	0d95      	lsrs	r5, r2, #22
 8002c1c:	0294      	lsls	r4, r2, #10
 8002c1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	4620      	mov	r0, r4
 8002c28:	4629      	mov	r1, r5
 8002c2a:	f7fe f8af 	bl	8000d8c <__aeabi_uldivmod>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4613      	mov	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002c36:	68fb      	ldr	r3, [r7, #12]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bdb0      	pop	{r4, r5, r7, pc}

08002c40 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002c40:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002c44:	b085      	sub	sp, #20
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	2000      	movs	r0, #0
 8002c52:	460c      	mov	r4, r1
 8002c54:	4605      	mov	r5, r0
 8002c56:	4620      	mov	r0, r4
 8002c58:	4629      	mov	r1, r5
 8002c5a:	f04f 0a00 	mov.w	sl, #0
 8002c5e:	f04f 0b00 	mov.w	fp, #0
 8002c62:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002c66:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002c6a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002c6e:	4650      	mov	r0, sl
 8002c70:	4659      	mov	r1, fp
 8002c72:	1b02      	subs	r2, r0, r4
 8002c74:	eb61 0305 	sbc.w	r3, r1, r5
 8002c78:	f04f 0000 	mov.w	r0, #0
 8002c7c:	f04f 0100 	mov.w	r1, #0
 8002c80:	0099      	lsls	r1, r3, #2
 8002c82:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002c86:	0090      	lsls	r0, r2, #2
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	eb12 0804 	adds.w	r8, r2, r4
 8002c90:	eb43 0905 	adc.w	r9, r3, r5
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ca0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ca4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ca8:	4690      	mov	r8, r2
 8002caa:	4699      	mov	r9, r3
 8002cac:	4640      	mov	r0, r8
 8002cae:	4649      	mov	r1, r9
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	0a82      	lsrs	r2, r0, #10
 8002cba:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002cbe:	0a8b      	lsrs	r3, r1, #10
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002cd0:	4770      	bx	lr

08002cd2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff ff93 	bl	8002c06 <TIMER_IF_Convert_ms2Tick>
 8002ce0:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002ce2:	f000 f8d5 	bl	8002e90 <GetTimerTicks>
 8002ce6:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002ce8:	e000      	b.n	8002cec <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002cea:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002cec:	f000 f8d0 	bl	8002e90 <GetTimerTicks>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d8f6      	bhi.n	8002cea <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002d0e:	f01a fa1f 	bl	801d150 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002d22:	f000 f8a5 	bl	8002e70 <TIMER_IF_BkUp_Read_MSBticks>
 8002d26:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 f88f 	bl	8002e50 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002d3a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d3e:	b08c      	sub	sp, #48	; 0x30
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002d48:	f000 f8a2 	bl	8002e90 <GetTimerTicks>
 8002d4c:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002d4e:	f000 f88f 	bl	8002e70 <TIMER_IF_BkUp_Read_MSBticks>
 8002d52:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	2200      	movs	r2, #0
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	60fa      	str	r2, [r7, #12]
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	000b      	movs	r3, r1
 8002d68:	2200      	movs	r2, #0
 8002d6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	460c      	mov	r4, r1
 8002d70:	4605      	mov	r5, r0
 8002d72:	eb12 0804 	adds.w	r8, r2, r4
 8002d76:	eb43 0905 	adc.w	r9, r3, r5
 8002d7a:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002d7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	0a82      	lsrs	r2, r0, #10
 8002d8c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002d90:	0a8b      	lsrs	r3, r1, #10
 8002d92:	4613      	mov	r3, r2
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002da4:	f04f 0b00 	mov.w	fp, #0
 8002da8:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff ff46 	bl	8002c40 <TIMER_IF_Convert_Tick2ms>
 8002db4:	4603      	mov	r3, r0
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3730      	adds	r7, #48	; 0x30
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002dc8 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4803      	ldr	r0, [pc, #12]	; (8002de4 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002dd6:	f005 fd9d 	bl	8008914 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	200002d8 	.word	0x200002d8

08002de8 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	2101      	movs	r1, #1
 8002df4:	4803      	ldr	r0, [pc, #12]	; (8002e04 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002df6:	f005 fd8d 	bl	8008914 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200002d8 	.word	0x200002d8

08002e08 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002e12:	2100      	movs	r1, #0
 8002e14:	4804      	ldr	r0, [pc, #16]	; (8002e28 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002e16:	f005 fd95 	bl	8008944 <HAL_RTCEx_BKUPRead>
 8002e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002e1c:	687b      	ldr	r3, [r7, #4]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	200002d8 	.word	0x200002d8

08002e2c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002e36:	2101      	movs	r1, #1
 8002e38:	4804      	ldr	r0, [pc, #16]	; (8002e4c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002e3a:	f005 fd83 	bl	8008944 <HAL_RTCEx_BKUPRead>
 8002e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002e40:	687b      	ldr	r3, [r7, #4]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	200002d8 	.word	0x200002d8

08002e50 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	4803      	ldr	r0, [pc, #12]	; (8002e6c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002e5e:	f005 fd59 	bl	8008914 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	200002d8 	.word	0x200002d8

08002e70 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002e76:	2102      	movs	r1, #2
 8002e78:	4804      	ldr	r0, [pc, #16]	; (8002e8c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002e7a:	f005 fd63 	bl	8008944 <HAL_RTCEx_BKUPRead>
 8002e7e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002e80:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	200002d8 	.word	0x200002d8

08002e90 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002e96:	480b      	ldr	r0, [pc, #44]	; (8002ec4 <GetTimerTicks+0x34>)
 8002e98:	f7ff fdd8 	bl	8002a4c <LL_RTC_TIME_GetSubSecond>
 8002e9c:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002e9e:	e003      	b.n	8002ea8 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002ea0:	4808      	ldr	r0, [pc, #32]	; (8002ec4 <GetTimerTicks+0x34>)
 8002ea2:	f7ff fdd3 	bl	8002a4c <LL_RTC_TIME_GetSubSecond>
 8002ea6:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002ea8:	4806      	ldr	r0, [pc, #24]	; (8002ec4 <GetTimerTicks+0x34>)
 8002eaa:	f7ff fdcf 	bl	8002a4c <LL_RTC_TIME_GetSubSecond>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d1f4      	bne.n	8002ea0 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40002800 	.word	0x40002800

08002ec8 <LL_AHB2_GRP1_EnableClock>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ed6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002eec:	68fb      	ldr	r3, [r7, #12]
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <LL_APB1_GRP1_EnableClock>:
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
}
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <LL_APB1_GRP1_DisableClock>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f3e:	4013      	ands	r3, r2
 8002f40:	658b      	str	r3, [r1, #88]	; 0x58
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <LL_APB2_GRP1_EnableClock>:
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f70:	68fb      	ldr	r3, [r7, #12]
}
 8002f72:	bf00      	nop
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <LL_APB2_GRP1_DisableClock>:
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f92:	4013      	ands	r3, r2
 8002f94:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <LL_SYSCFG_EnableFastModePlus>:
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8002fa8:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	4904      	ldr	r1, [pc, #16]	; (8002fc0 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40010000 	.word	0x40010000

08002fc4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fc8:	4b26      	ldr	r3, [pc, #152]	; (8003064 <MX_USART1_UART_Init+0xa0>)
 8002fca:	4a27      	ldr	r2, [pc, #156]	; (8003068 <MX_USART1_UART_Init+0xa4>)
 8002fcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fce:	4b25      	ldr	r3, [pc, #148]	; (8003064 <MX_USART1_UART_Init+0xa0>)
 8002fd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fd6:	4b23      	ldr	r3, [pc, #140]	; (8003064 <MX_USART1_UART_Init+0xa0>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fdc:	4b21      	ldr	r3, [pc, #132]	; (8003064 <MX_USART1_UART_Init+0xa0>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fe2:	4b20      	ldr	r3, [pc, #128]	; (8003064 <MX_USART1_UART_Init+0xa0>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <MX_USART1_UART_Init+0xa0>)
 8002fea:	220c      	movs	r2, #12
 8002fec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fee:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <MX_USART1_UART_Init+0xa0>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <MX_USART1_UART_Init+0xa0>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ffa:	4b1a      	ldr	r3, [pc, #104]	; (8003064 <MX_USART1_UART_Init+0xa0>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003000:	4b18      	ldr	r3, [pc, #96]	; (8003064 <MX_USART1_UART_Init+0xa0>)
 8003002:	2200      	movs	r2, #0
 8003004:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8003006:	4b17      	ldr	r3, [pc, #92]	; (8003064 <MX_USART1_UART_Init+0xa0>)
 8003008:	2240      	movs	r2, #64	; 0x40
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 800300c:	4b15      	ldr	r3, [pc, #84]	; (8003064 <MX_USART1_UART_Init+0xa0>)
 800300e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003012:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8003014:	4b13      	ldr	r3, [pc, #76]	; (8003064 <MX_USART1_UART_Init+0xa0>)
 8003016:	2200      	movs	r2, #0
 8003018:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800301a:	4812      	ldr	r0, [pc, #72]	; (8003064 <MX_USART1_UART_Init+0xa0>)
 800301c:	f006 fcbc 	bl	8009998 <HAL_UART_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8003026:	f7fe ff39 	bl	8001e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800302a:	2100      	movs	r1, #0
 800302c:	480d      	ldr	r0, [pc, #52]	; (8003064 <MX_USART1_UART_Init+0xa0>)
 800302e:	f008 fe16 	bl	800bc5e <HAL_UARTEx_SetTxFifoThreshold>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8003038:	f7fe ff30 	bl	8001e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800303c:	2100      	movs	r1, #0
 800303e:	4809      	ldr	r0, [pc, #36]	; (8003064 <MX_USART1_UART_Init+0xa0>)
 8003040:	f008 fe4b 	bl	800bcda <HAL_UARTEx_SetRxFifoThreshold>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800304a:	f7fe ff27 	bl	8001e9c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800304e:	4805      	ldr	r0, [pc, #20]	; (8003064 <MX_USART1_UART_Init+0xa0>)
 8003050:	f008 fd92 	bl	800bb78 <HAL_UARTEx_EnableFifoMode>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 800305a:	f7fe ff1f 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	2000042c 	.word	0x2000042c
 8003068:	40013800 	.word	0x40013800

0800306c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003070:	4b23      	ldr	r3, [pc, #140]	; (8003100 <MX_USART2_UART_Init+0x94>)
 8003072:	4a24      	ldr	r2, [pc, #144]	; (8003104 <MX_USART2_UART_Init+0x98>)
 8003074:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003076:	4b22      	ldr	r3, [pc, #136]	; (8003100 <MX_USART2_UART_Init+0x94>)
 8003078:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800307c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800307e:	4b20      	ldr	r3, [pc, #128]	; (8003100 <MX_USART2_UART_Init+0x94>)
 8003080:	2200      	movs	r2, #0
 8003082:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003084:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <MX_USART2_UART_Init+0x94>)
 8003086:	2200      	movs	r2, #0
 8003088:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800308a:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <MX_USART2_UART_Init+0x94>)
 800308c:	2200      	movs	r2, #0
 800308e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003090:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <MX_USART2_UART_Init+0x94>)
 8003092:	220c      	movs	r2, #12
 8003094:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003096:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <MX_USART2_UART_Init+0x94>)
 8003098:	2200      	movs	r2, #0
 800309a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 800309c:	4b18      	ldr	r3, [pc, #96]	; (8003100 <MX_USART2_UART_Init+0x94>)
 800309e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80030a2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030a4:	4b16      	ldr	r3, [pc, #88]	; (8003100 <MX_USART2_UART_Init+0x94>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030aa:	4b15      	ldr	r3, [pc, #84]	; (8003100 <MX_USART2_UART_Init+0x94>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030b0:	4b13      	ldr	r3, [pc, #76]	; (8003100 <MX_USART2_UART_Init+0x94>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030b6:	4812      	ldr	r0, [pc, #72]	; (8003100 <MX_USART2_UART_Init+0x94>)
 80030b8:	f006 fc6e 	bl	8009998 <HAL_UART_Init>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80030c2:	f7fe feeb 	bl	8001e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030c6:	2100      	movs	r1, #0
 80030c8:	480d      	ldr	r0, [pc, #52]	; (8003100 <MX_USART2_UART_Init+0x94>)
 80030ca:	f008 fdc8 	bl	800bc5e <HAL_UARTEx_SetTxFifoThreshold>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80030d4:	f7fe fee2 	bl	8001e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030d8:	2100      	movs	r1, #0
 80030da:	4809      	ldr	r0, [pc, #36]	; (8003100 <MX_USART2_UART_Init+0x94>)
 80030dc:	f008 fdfd 	bl	800bcda <HAL_UARTEx_SetRxFifoThreshold>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80030e6:	f7fe fed9 	bl	8001e9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80030ea:	4805      	ldr	r0, [pc, #20]	; (8003100 <MX_USART2_UART_Init+0x94>)
 80030ec:	f008 fd7f 	bl	800bbee <HAL_UARTEx_DisableFifoMode>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80030f6:	f7fe fed1 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	200004c0 	.word	0x200004c0
 8003104:	40004400 	.word	0x40004400

08003108 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b09a      	sub	sp, #104	; 0x68
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8003120:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800312e:	f107 030c 	add.w	r3, r7, #12
 8003132:	2238      	movs	r2, #56	; 0x38
 8003134:	2100      	movs	r1, #0
 8003136:	4618      	mov	r0, r3
 8003138:	f01a fbf2 	bl	801d920 <memset>
  if(uartHandle->Instance==USART1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a6f      	ldr	r2, [pc, #444]	; (8003300 <HAL_UART_MspInit+0x1f8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	f040 80a4 	bne.w	8003290 <HAL_UART_MspInit+0x188>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003148:	2301      	movs	r3, #1
 800314a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800314c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003150:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003152:	f107 030c 	add.w	r3, r7, #12
 8003156:	4618      	mov	r0, r3
 8003158:	f004 ff64 	bl	8008024 <HAL_RCCEx_PeriphCLKConfig>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 8003162:	f7fe fe9b 	bl	8001e9c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003166:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800316a:	f7ff feef 	bl	8002f4c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800316e:	2002      	movs	r0, #2
 8003170:	f7ff feaa 	bl	8002ec8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8003174:	23c0      	movs	r3, #192	; 0xc0
 8003176:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800317c:	2301      	movs	r3, #1
 800317e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003180:	2301      	movs	r3, #1
 8003182:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003184:	2307      	movs	r3, #7
 8003186:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003188:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800318c:	4619      	mov	r1, r3
 800318e:	485d      	ldr	r0, [pc, #372]	; (8003304 <HAL_UART_MspInit+0x1fc>)
 8003190:	f002 fb92 	bl	80058b8 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8003194:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003198:	f7ff ff02 	bl	8002fa0 <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 800319c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80031a0:	f7ff fefe 	bl	8002fa0 <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80031a4:	4b58      	ldr	r3, [pc, #352]	; (8003308 <HAL_UART_MspInit+0x200>)
 80031a6:	4a59      	ldr	r2, [pc, #356]	; (800330c <HAL_UART_MspInit+0x204>)
 80031a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80031aa:	4b57      	ldr	r3, [pc, #348]	; (8003308 <HAL_UART_MspInit+0x200>)
 80031ac:	2212      	movs	r2, #18
 80031ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031b0:	4b55      	ldr	r3, [pc, #340]	; (8003308 <HAL_UART_MspInit+0x200>)
 80031b2:	2210      	movs	r2, #16
 80031b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031b6:	4b54      	ldr	r3, [pc, #336]	; (8003308 <HAL_UART_MspInit+0x200>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031bc:	4b52      	ldr	r3, [pc, #328]	; (8003308 <HAL_UART_MspInit+0x200>)
 80031be:	2280      	movs	r2, #128	; 0x80
 80031c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031c2:	4b51      	ldr	r3, [pc, #324]	; (8003308 <HAL_UART_MspInit+0x200>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031c8:	4b4f      	ldr	r3, [pc, #316]	; (8003308 <HAL_UART_MspInit+0x200>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80031ce:	4b4e      	ldr	r3, [pc, #312]	; (8003308 <HAL_UART_MspInit+0x200>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031d4:	4b4c      	ldr	r3, [pc, #304]	; (8003308 <HAL_UART_MspInit+0x200>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80031da:	484b      	ldr	r0, [pc, #300]	; (8003308 <HAL_UART_MspInit+0x200>)
 80031dc:	f001 fcd6 	bl	8004b8c <HAL_DMA_Init>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80031e6:	f7fe fe59 	bl	8001e9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a46      	ldr	r2, [pc, #280]	; (8003308 <HAL_UART_MspInit+0x200>)
 80031ee:	67da      	str	r2, [r3, #124]	; 0x7c
 80031f0:	4a45      	ldr	r2, [pc, #276]	; (8003308 <HAL_UART_MspInit+0x200>)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80031f6:	4b46      	ldr	r3, [pc, #280]	; (8003310 <HAL_UART_MspInit+0x208>)
 80031f8:	4a46      	ldr	r2, [pc, #280]	; (8003314 <HAL_UART_MspInit+0x20c>)
 80031fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80031fc:	4b44      	ldr	r3, [pc, #272]	; (8003310 <HAL_UART_MspInit+0x208>)
 80031fe:	2211      	movs	r2, #17
 8003200:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003202:	4b43      	ldr	r3, [pc, #268]	; (8003310 <HAL_UART_MspInit+0x208>)
 8003204:	2200      	movs	r2, #0
 8003206:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003208:	4b41      	ldr	r3, [pc, #260]	; (8003310 <HAL_UART_MspInit+0x208>)
 800320a:	2200      	movs	r2, #0
 800320c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800320e:	4b40      	ldr	r3, [pc, #256]	; (8003310 <HAL_UART_MspInit+0x208>)
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003214:	4b3e      	ldr	r3, [pc, #248]	; (8003310 <HAL_UART_MspInit+0x208>)
 8003216:	2200      	movs	r2, #0
 8003218:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800321a:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <HAL_UART_MspInit+0x208>)
 800321c:	2200      	movs	r2, #0
 800321e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003220:	4b3b      	ldr	r3, [pc, #236]	; (8003310 <HAL_UART_MspInit+0x208>)
 8003222:	2200      	movs	r2, #0
 8003224:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003226:	4b3a      	ldr	r3, [pc, #232]	; (8003310 <HAL_UART_MspInit+0x208>)
 8003228:	2200      	movs	r2, #0
 800322a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800322c:	4838      	ldr	r0, [pc, #224]	; (8003310 <HAL_UART_MspInit+0x208>)
 800322e:	f001 fcad 	bl	8004b8c <HAL_DMA_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8003238:	f7fe fe30 	bl	8001e9c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800323c:	2300      	movs	r3, #0
 800323e:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003240:	2300      	movs	r3, #0
 8003242:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 8003244:	2300      	movs	r3, #0
 8003246:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 800324a:	2301      	movs	r3, #1
 800324c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 8003250:	2301      	movs	r3, #1
 8003252:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 8003254:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003258:	4619      	mov	r1, r3
 800325a:	482d      	ldr	r0, [pc, #180]	; (8003310 <HAL_UART_MspInit+0x208>)
 800325c:	f002 f880 	bl	8005360 <HAL_DMAEx_ConfigMuxSync>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8003266:	f7fe fe19 	bl	8001e9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a28      	ldr	r2, [pc, #160]	; (8003310 <HAL_UART_MspInit+0x208>)
 800326e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003272:	4a27      	ldr	r2, [pc, #156]	; (8003310 <HAL_UART_MspInit+0x208>)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003278:	2200      	movs	r2, #0
 800327a:	2102      	movs	r1, #2
 800327c:	2024      	movs	r0, #36	; 0x24
 800327e:	f001 fc4e 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003282:	2024      	movs	r0, #36	; 0x24
 8003284:	f001 fc65 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003288:	200c      	movs	r0, #12
 800328a:	f001 fc62 	bl	8004b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800328e:	e033      	b.n	80032f8 <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==USART2)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a20      	ldr	r2, [pc, #128]	; (8003318 <HAL_UART_MspInit+0x210>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d12e      	bne.n	80032f8 <HAL_UART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800329a:	2302      	movs	r3, #2
 800329c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800329e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80032a2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032a4:	f107 030c 	add.w	r3, r7, #12
 80032a8:	4618      	mov	r0, r3
 80032aa:	f004 febb 	bl	8008024 <HAL_RCCEx_PeriphCLKConfig>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 80032b4:	f7fe fdf2 	bl	8001e9c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80032bc:	f7ff fe1c 	bl	8002ef8 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c0:	2001      	movs	r0, #1
 80032c2:	f7ff fe01 	bl	8002ec8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80032c6:	230c      	movs	r3, #12
 80032c8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ca:	2302      	movs	r3, #2
 80032cc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032ce:	2301      	movs	r3, #1
 80032d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80032d2:	2301      	movs	r3, #1
 80032d4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032d6:	2307      	movs	r3, #7
 80032d8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032de:	4619      	mov	r1, r3
 80032e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032e4:	f002 fae8 	bl	80058b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032e8:	2200      	movs	r2, #0
 80032ea:	2100      	movs	r1, #0
 80032ec:	2025      	movs	r0, #37	; 0x25
 80032ee:	f001 fc16 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032f2:	2025      	movs	r0, #37	; 0x25
 80032f4:	f001 fc2d 	bl	8004b52 <HAL_NVIC_EnableIRQ>
}
 80032f8:	bf00      	nop
 80032fa:	3768      	adds	r7, #104	; 0x68
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40013800 	.word	0x40013800
 8003304:	48000400 	.word	0x48000400
 8003308:	20000554 	.word	0x20000554
 800330c:	40020008 	.word	0x40020008
 8003310:	200005b4 	.word	0x200005b4
 8003314:	4002001c 	.word	0x4002001c
 8003318:	40004400 	.word	0x40004400

0800331c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a17      	ldr	r2, [pc, #92]	; (8003388 <HAL_UART_MspDeInit+0x6c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d116      	bne.n	800335c <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800332e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003332:	f7ff fe23 	bl	8002f7c <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8003336:	21c0      	movs	r1, #192	; 0xc0
 8003338:	4814      	ldr	r0, [pc, #80]	; (800338c <HAL_UART_MspDeInit+0x70>)
 800333a:	f002 fc1d 	bl	8005b78 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003342:	4618      	mov	r0, r3
 8003344:	f001 fcca 	bl	8004cdc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800334e:	4618      	mov	r0, r3
 8003350:	f001 fcc4 	bl	8004cdc <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003354:	2024      	movs	r0, #36	; 0x24
 8003356:	f001 fc0a 	bl	8004b6e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800335a:	e010      	b.n	800337e <HAL_UART_MspDeInit+0x62>
  else if(uartHandle->Instance==USART2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a0b      	ldr	r2, [pc, #44]	; (8003390 <HAL_UART_MspDeInit+0x74>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d10b      	bne.n	800337e <HAL_UART_MspDeInit+0x62>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003366:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800336a:	f7ff fddd 	bl	8002f28 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 800336e:	210c      	movs	r1, #12
 8003370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003374:	f002 fc00 	bl	8005b78 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003378:	2025      	movs	r0, #37	; 0x25
 800337a:	f001 fbf8 	bl	8004b6e <HAL_NVIC_DisableIRQ>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40013800 	.word	0x40013800
 800338c:	48000400 	.word	0x48000400
 8003390:	40004400 	.word	0x40004400

08003394 <LL_APB2_GRP1_ForceReset>:
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 800339c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	640b      	str	r3, [r1, #64]	; 0x40
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr

080033b6 <LL_APB2_GRP1_ReleaseReset>:
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80033be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033cc:	4013      	ands	r3, r2
 80033ce:	640b      	str	r3, [r1, #64]	; 0x40
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr
	...

080033dc <LL_EXTI_EnableIT_0_31>:
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80033e4:	4b06      	ldr	r3, [pc, #24]	; (8003400 <LL_EXTI_EnableIT_0_31+0x24>)
 80033e6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80033ea:	4905      	ldr	r1, [pc, #20]	; (8003400 <LL_EXTI_EnableIT_0_31+0x24>)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	58000800 	.word	0x58000800

08003404 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800340c:	4a07      	ldr	r2, [pc, #28]	; (800342c <vcom_Init+0x28>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8003412:	f7fd ff79 	bl	8001308 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003416:	f7ff fdd5 	bl	8002fc4 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 800341a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800341e:	f7ff ffdd 	bl	80033dc <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8003422:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000618 	.word	0x20000618

08003430 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8003434:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003438:	f7ff ffac 	bl	8003394 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 800343c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003440:	f7ff ffb9 	bl	80033b6 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003444:	4804      	ldr	r0, [pc, #16]	; (8003458 <vcom_DeInit+0x28>)
 8003446:	f7ff ff69 	bl	800331c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800344a:	200f      	movs	r0, #15
 800344c:	f001 fb8f 	bl	8004b6e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003450:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8003452:	4618      	mov	r0, r3
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	2000042c 	.word	0x2000042c

0800345c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003468:	887b      	ldrh	r3, [r7, #2]
 800346a:	461a      	mov	r2, r3
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4804      	ldr	r0, [pc, #16]	; (8003480 <vcom_Trace_DMA+0x24>)
 8003470:	f006 fb2e 	bl	8009ad0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8003474:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	2000042c 	.word	0x2000042c

08003484 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 800348c:	4a19      	ldr	r2, [pc, #100]	; (80034f4 <vcom_ReceiveInit+0x70>)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003492:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003496:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003498:	f107 0308 	add.w	r3, r7, #8
 800349c:	e893 0006 	ldmia.w	r3, {r1, r2}
 80034a0:	4815      	ldr	r0, [pc, #84]	; (80034f8 <vcom_ReceiveInit+0x74>)
 80034a2:	f008 fadc 	bl	800ba5e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80034a6:	bf00      	nop
 80034a8:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <vcom_ReceiveInit+0x74>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b6:	d0f7      	beq.n	80034a8 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80034b8:	bf00      	nop
 80034ba:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <vcom_ReceiveInit+0x74>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c8:	d1f7      	bne.n	80034ba <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <vcom_ReceiveInit+0x74>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <vcom_ReceiveInit+0x74>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80034d8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80034da:	4807      	ldr	r0, [pc, #28]	; (80034f8 <vcom_ReceiveInit+0x74>)
 80034dc:	f008 fb1a 	bl	800bb14 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80034e0:	2201      	movs	r2, #1
 80034e2:	4906      	ldr	r1, [pc, #24]	; (80034fc <vcom_ReceiveInit+0x78>)
 80034e4:	4804      	ldr	r0, [pc, #16]	; (80034f8 <vcom_ReceiveInit+0x74>)
 80034e6:	f006 faa7 	bl	8009a38 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80034ea:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	2000061c 	.word	0x2000061c
 80034f8:	2000042c 	.word	0x2000042c
 80034fc:	20000614 	.word	0x20000614

08003500 <vcom_Resume>:

void vcom_Resume(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003504:	4808      	ldr	r0, [pc, #32]	; (8003528 <vcom_Resume+0x28>)
 8003506:	f006 fa47 	bl	8009998 <HAL_UART_Init>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <vcom_Resume+0x14>
  {
    Error_Handler();
 8003510:	f7fe fcc4 	bl	8001e9c <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003514:	4805      	ldr	r0, [pc, #20]	; (800352c <vcom_Resume+0x2c>)
 8003516:	f001 fb39 	bl	8004b8c <HAL_DMA_Init>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <vcom_Resume+0x24>
  {
    Error_Handler();
 8003520:	f7fe fcbc 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003524:	bf00      	nop
 8003526:	bd80      	pop	{r7, pc}
 8003528:	2000042c 	.word	0x2000042c
 800352c:	20000554 	.word	0x20000554

08003530 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a05      	ldr	r2, [pc, #20]	; (8003554 <HAL_UART_TxCpltCallback+0x24>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d103      	bne.n	800354a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_UART_TxCpltCallback+0x28>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2000      	movs	r0, #0
 8003548:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40013800 	.word	0x40013800
 8003558:	20000618 	.word	0x20000618

0800355c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a11      	ldr	r2, [pc, #68]	; (80035b0 <HAL_UART_RxCpltCallback+0x54>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d113      	bne.n	8003596 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800356e:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <HAL_UART_RxCpltCallback+0x58>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_UART_RxCpltCallback+0x30>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357c:	2b00      	cmp	r3, #0
 800357e:	d105      	bne.n	800358c <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <HAL_UART_RxCpltCallback+0x58>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2200      	movs	r2, #0
 8003586:	2101      	movs	r1, #1
 8003588:	480b      	ldr	r0, [pc, #44]	; (80035b8 <HAL_UART_RxCpltCallback+0x5c>)
 800358a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 800358c:	2201      	movs	r2, #1
 800358e:	490a      	ldr	r1, [pc, #40]	; (80035b8 <HAL_UART_RxCpltCallback+0x5c>)
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f006 fa51 	bl	8009a38 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a08      	ldr	r2, [pc, #32]	; (80035bc <HAL_UART_RxCpltCallback+0x60>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d102      	bne.n	80035a6 <HAL_UART_RxCpltCallback+0x4a>
//    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
    	  UART2_SET = 1;
 80035a0:	4b07      	ldr	r3, [pc, #28]	; (80035c0 <HAL_UART_RxCpltCallback+0x64>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40013800 	.word	0x40013800
 80035b4:	2000061c 	.word	0x2000061c
 80035b8:	20000614 	.word	0x20000614
 80035bc:	40004400 	.word	0x40004400
 80035c0:	20000008 	.word	0x20000008

080035c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035c4:	480d      	ldr	r0, [pc, #52]	; (80035fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80035c8:	f7ff f98b 	bl	80028e2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035cc:	480c      	ldr	r0, [pc, #48]	; (8003600 <LoopForever+0x6>)
  ldr r1, =_edata
 80035ce:	490d      	ldr	r1, [pc, #52]	; (8003604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035d0:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <LoopForever+0xe>)
  movs r3, #0
 80035d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035d4:	e002      	b.n	80035dc <LoopCopyDataInit>

080035d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035da:	3304      	adds	r3, #4

080035dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035e0:	d3f9      	bcc.n	80035d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035e2:	4a0a      	ldr	r2, [pc, #40]	; (800360c <LoopForever+0x12>)
  ldr r4, =_ebss
 80035e4:	4c0a      	ldr	r4, [pc, #40]	; (8003610 <LoopForever+0x16>)
  movs r3, #0
 80035e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035e8:	e001      	b.n	80035ee <LoopFillZerobss>

080035ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035ec:	3204      	adds	r2, #4

080035ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035f0:	d3fb      	bcc.n	80035ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80035f2:	f01a f99d 	bl	801d930 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035f6:	f7fe fa57 	bl	8001aa8 <main>

080035fa <LoopForever>:

LoopForever:
    b LoopForever
 80035fa:	e7fe      	b.n	80035fa <LoopForever>
  ldr   r0, =_estack
 80035fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003604:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8003608:	0801eafc 	.word	0x0801eafc
  ldr r2, =_sbss
 800360c:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8003610:	2000208c 	.word	0x2000208c

08003614 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003614:	e7fe      	b.n	8003614 <ADC_IRQHandler>

08003616 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800361c:	1d3b      	adds	r3, r7, #4
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	60da      	str	r2, [r3, #12]
 8003628:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800362a:	2310      	movs	r3, #16
 800362c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800362e:	2301      	movs	r3, #1
 8003630:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003636:	2303      	movs	r3, #3
 8003638:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800363a:	1d3b      	adds	r3, r7, #4
 800363c:	4619      	mov	r1, r3
 800363e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003642:	f002 f939 	bl	80058b8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003646:	2320      	movs	r3, #32
 8003648:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800364a:	1d3b      	adds	r3, r7, #4
 800364c:	4619      	mov	r1, r3
 800364e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003652:	f002 f931 	bl	80058b8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003656:	2200      	movs	r2, #0
 8003658:	2120      	movs	r1, #32
 800365a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800365e:	f002 fb59 	bl	8005d14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003662:	2200      	movs	r2, #0
 8003664:	2110      	movs	r1, #16
 8003666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800366a:	f002 fb53 	bl	8005d14 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	2b03      	cmp	r3, #3
 8003686:	d83f      	bhi.n	8003708 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003688:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036a1 	.word	0x080036a1
 8003694:	080036bb 	.word	0x080036bb
 8003698:	080036d5 	.word	0x080036d5
 800369c:	080036ef 	.word	0x080036ef
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80036a0:	2200      	movs	r2, #0
 80036a2:	2110      	movs	r1, #16
 80036a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036a8:	f002 fb34 	bl	8005d14 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80036ac:	2200      	movs	r2, #0
 80036ae:	2120      	movs	r1, #32
 80036b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036b4:	f002 fb2e 	bl	8005d14 <HAL_GPIO_WritePin>
      break;      
 80036b8:	e027      	b.n	800370a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80036ba:	2201      	movs	r2, #1
 80036bc:	2110      	movs	r1, #16
 80036be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036c2:	f002 fb27 	bl	8005d14 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80036c6:	2200      	movs	r2, #0
 80036c8:	2120      	movs	r1, #32
 80036ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036ce:	f002 fb21 	bl	8005d14 <HAL_GPIO_WritePin>
      break;
 80036d2:	e01a      	b.n	800370a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80036d4:	2201      	movs	r2, #1
 80036d6:	2110      	movs	r1, #16
 80036d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036dc:	f002 fb1a 	bl	8005d14 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80036e0:	2201      	movs	r2, #1
 80036e2:	2120      	movs	r1, #32
 80036e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036e8:	f002 fb14 	bl	8005d14 <HAL_GPIO_WritePin>
      break;
 80036ec:	e00d      	b.n	800370a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80036ee:	2200      	movs	r2, #0
 80036f0:	2110      	movs	r1, #16
 80036f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036f6:	f002 fb0d 	bl	8005d14 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80036fa:	2201      	movs	r2, #1
 80036fc:	2120      	movs	r1, #32
 80036fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003702:	f002 fb07 	bl	8005d14 <HAL_GPIO_WritePin>
      break;
 8003706:	e000      	b.n	800370a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8003708:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8003718:	2302      	movs	r3, #2
}
 800371a:	4618      	mov	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr

08003722 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8003722:	b480      	push	{r7}
 8003724:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8003726:	2301      	movs	r3, #1
}
 8003728:	4618      	mov	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003734:	2301      	movs	r3, #1
}
 8003736:	4618      	mov	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr

0800373e <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	4603      	mov	r3, r0
 8003746:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d102      	bne.n	8003754 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800374e:	230f      	movs	r3, #15
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	e001      	b.n	8003758 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003754:	2316      	movs	r3, #22
 8003756:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003758:	68fb      	ldr	r3, [r7, #12]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003768:	4b04      	ldr	r3, [pc, #16]	; (800377c <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4a03      	ldr	r2, [pc, #12]	; (800377c <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	6053      	str	r3, [r2, #4]
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr
 800377c:	e0042000 	.word	0xe0042000

08003780 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003784:	4b04      	ldr	r3, [pc, #16]	; (8003798 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a03      	ldr	r2, [pc, #12]	; (8003798 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800378a:	f043 0302 	orr.w	r3, r3, #2
 800378e:	6053      	str	r3, [r2, #4]
}
 8003790:	bf00      	nop
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr
 8003798:	e0042000 	.word	0xe0042000

0800379c <LL_DBGMCU_EnableDBGStandbyMode>:
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	4a03      	ldr	r2, [pc, #12]	; (80037b4 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80037a6:	f043 0304 	orr.w	r3, r3, #4
 80037aa:	6053      	str	r3, [r2, #4]
}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr
 80037b4:	e0042000 	.word	0xe0042000

080037b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037c2:	2003      	movs	r0, #3
 80037c4:	f001 f9a0 	bl	8004b08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80037c8:	f004 fa4e 	bl	8007c68 <HAL_RCC_GetHCLKFreq>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4a09      	ldr	r2, [pc, #36]	; (80037f4 <HAL_Init+0x3c>)
 80037d0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037d2:	200f      	movs	r0, #15
 80037d4:	f7ff f804 	bl	80027e0 <HAL_InitTick>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	71fb      	strb	r3, [r7, #7]
 80037e2:	e001      	b.n	80037e8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037e4:	f7fe fd93 	bl	800230e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037e8:	79fb      	ldrb	r3, [r7, #7]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000004 	.word	0x20000004

080037f8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80037fc:	4b04      	ldr	r3, [pc, #16]	; (8003810 <HAL_SuspendTick+0x18>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a03      	ldr	r2, [pc, #12]	; (8003810 <HAL_SuspendTick+0x18>)
 8003802:	f023 0302 	bic.w	r3, r3, #2
 8003806:	6013      	str	r3, [r2, #0]
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr
 8003810:	e000e010 	.word	0xe000e010

08003814 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <HAL_ResumeTick+0x18>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a03      	ldr	r2, [pc, #12]	; (800382c <HAL_ResumeTick+0x18>)
 800381e:	f043 0302 	orr.w	r3, r3, #2
 8003822:	6013      	str	r3, [r2, #0]
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	e000e010 	.word	0xe000e010

08003830 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003834:	4b02      	ldr	r3, [pc, #8]	; (8003840 <HAL_GetUIDw0+0x10>)
 8003836:	681b      	ldr	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	1fff7590 	.word	0x1fff7590

08003844 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003848:	4b02      	ldr	r3, [pc, #8]	; (8003854 <HAL_GetUIDw1+0x10>)
 800384a:	681b      	ldr	r3, [r3, #0]
}
 800384c:	4618      	mov	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr
 8003854:	1fff7594 	.word	0x1fff7594

08003858 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800385c:	4b02      	ldr	r3, [pc, #8]	; (8003868 <HAL_GetUIDw2+0x10>)
 800385e:	681b      	ldr	r3, [r3, #0]
}
 8003860:	4618      	mov	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	1fff7598 	.word	0x1fff7598

0800386c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003870:	f7ff ff78 	bl	8003764 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003874:	bf00      	nop
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 800387c:	f7ff ff80 	bl	8003780 <LL_DBGMCU_EnableDBGStopMode>
}
 8003880:	bf00      	nop
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003888:	f7ff ff88 	bl	800379c <LL_DBGMCU_EnableDBGStandbyMode>
}
 800388c:	bf00      	nop
 800388e:	bd80      	pop	{r7, pc}

08003890 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	601a      	str	r2, [r3, #0]
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr

080038ce <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2107      	movs	r1, #7
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	401a      	ands	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	fa01 f303 	lsl.w	r3, r1, r3
 80038fa:	431a      	orrs	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr

0800390a <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695a      	ldr	r2, [r3, #20]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2107      	movs	r1, #7
 8003920:	fa01 f303 	lsl.w	r3, r1, r3
 8003924:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr

0800393a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800395e:	b480      	push	{r7}
 8003960:	b085      	sub	sp, #20
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	210f      	movs	r1, #15
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	401a      	ands	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	0e9b      	lsrs	r3, r3, #26
 8003982:	f003 010f 	and.w	r1, r3, #15
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	431a      	orrs	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003996:	bf00      	nop
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80039d8:	43db      	mvns	r3, r3
 80039da:	401a      	ands	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr

080039ea <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b085      	sub	sp, #20
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	43db      	mvns	r3, r3
 8003a00:	401a      	ands	r2, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	0219      	lsls	r1, r3, #8
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	400b      	ands	r3, r1
 8003a0a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003a0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a12:	431a      	orrs	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003a32:	f023 0317 	bic.w	r3, r3, #23
 8003a36:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003a58:	f023 0317 	bic.w	r3, r3, #23
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6093      	str	r3, [r2, #8]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a7e:	d101      	bne.n	8003a84 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr

08003a90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003aa0:	f023 0317 	bic.w	r3, r3, #23
 8003aa4:	f043 0201 	orr.w	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr

08003ab6 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ac6:	f023 0317 	bic.w	r3, r3, #23
 8003aca:	f043 0202 	orr.w	r2, r3, #2
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <LL_ADC_IsEnabled+0x18>
 8003af0:	2301      	movs	r3, #1
 8003af2:	e000      	b.n	8003af6 <LL_ADC_IsEnabled+0x1a>
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr

08003b00 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d101      	bne.n	8003b18 <LL_ADC_IsDisableOngoing+0x18>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <LL_ADC_IsDisableOngoing+0x1a>
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b34:	f023 0317 	bic.w	r3, r3, #23
 8003b38:	f043 0204 	orr.w	r2, r3, #4
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr

08003b4a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b5a:	f023 0317 	bic.w	r3, r3, #23
 8003b5e:	f043 0210 	orr.w	r2, r3, #16
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d101      	bne.n	8003b88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e17e      	b.n	8003eb4 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7fd fad7 	bl	8001178 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff ff44 	bl	8003a6a <LL_ADC_IsInternalRegulatorEnabled>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d115      	bne.n	8003c14 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff ff18 	bl	8003a22 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bf2:	4b9e      	ldr	r3, [pc, #632]	; (8003e6c <HAL_ADC_Init+0x2d8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	099b      	lsrs	r3, r3, #6
 8003bf8:	4a9d      	ldr	r2, [pc, #628]	; (8003e70 <HAL_ADC_Init+0x2dc>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	099b      	lsrs	r3, r3, #6
 8003c00:	3301      	adds	r3, #1
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c06:	e002      	b.n	8003c0e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f9      	bne.n	8003c08 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff ff26 	bl	8003a6a <LL_ADC_IsInternalRegulatorEnabled>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10d      	bne.n	8003c40 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c28:	f043 0210 	orr.w	r2, r3, #16
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c34:	f043 0201 	orr.w	r2, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff ff93 	bl	8003b70 <LL_ADC_REG_IsConversionOngoing>
 8003c4a:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f040 8124 	bne.w	8003ea2 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f040 8120 	bne.w	8003ea2 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c66:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003c6a:	f043 0202 	orr.w	r2, r3, #2
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff ff30 	bl	8003adc <LL_ADC_IsEnabled>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f040 80a7 	bne.w	8003dd2 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	7e1b      	ldrb	r3, [r3, #24]
 8003c8c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003c8e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	7e5b      	ldrb	r3, [r3, #25]
 8003c94:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003c96:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	7e9b      	ldrb	r3, [r3, #26]
 8003c9c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003c9e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ca4:	2a00      	cmp	r2, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_ADC_Init+0x11a>
 8003ca8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cac:	e000      	b.n	8003cb0 <HAL_ADC_Init+0x11c>
 8003cae:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003cb0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003cb6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	da04      	bge.n	8003cca <HAL_ADC_Init+0x136>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cc8:	e001      	b.n	8003cce <HAL_ADC_Init+0x13a>
 8003cca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003cce:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003cd6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003cd8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d114      	bne.n	8003d14 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	7e9b      	ldrb	r3, [r3, #26]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d104      	bne.n	8003cfc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	e00b      	b.n	8003d14 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d00:	f043 0220 	orr.w	r2, r3, #32
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0c:	f043 0201 	orr.w	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d009      	beq.n	8003d30 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003d3a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	69b9      	ldr	r1, [r7, #24]
 8003d44:	430b      	orrs	r3, r1
 8003d46:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d54:	4313      	orrs	r3, r2
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d111      	bne.n	8003d8a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d72:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003d78:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003d7e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	4b38      	ldr	r3, [pc, #224]	; (8003e74 <HAL_ADC_Init+0x2e0>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	6979      	ldr	r1, [r7, #20]
 8003d9a:	430b      	orrs	r3, r1
 8003d9c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003da6:	d014      	beq.n	8003dd2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db0:	d00f      	beq.n	8003dd2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003db6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dba:	d00a      	beq.n	8003dd2 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003dbc:	4b2e      	ldr	r3, [pc, #184]	; (8003e78 <HAL_ADC_Init+0x2e4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003dcc:	492a      	ldr	r1, [pc, #168]	; (8003e78 <HAL_ADC_Init+0x2e4>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2100      	movs	r1, #0
 8003dde:	f7ff fd76 	bl	80038ce <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	461a      	mov	r2, r3
 8003dec:	4923      	ldr	r1, [pc, #140]	; (8003e7c <HAL_ADC_Init+0x2e8>)
 8003dee:	f7ff fd6e 	bl	80038ce <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d108      	bne.n	8003e0c <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f062 020f 	orn	r2, r2, #15
 8003e08:	629a      	str	r2, [r3, #40]	; 0x28
 8003e0a:	e017      	b.n	8003e3c <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e14:	d112      	bne.n	8003e3c <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	f003 031c 	and.w	r3, r3, #28
 8003e28:	f06f 020f 	mvn.w	r2, #15
 8003e2c:	fa02 f103 	lsl.w	r1, r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff fd61 	bl	800390a <LL_ADC_GetSamplingTimeCommonChannels>
 8003e48:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d116      	bne.n	8003e80 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5c:	f023 0303 	bic.w	r3, r3, #3
 8003e60:	f043 0201 	orr.w	r2, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e68:	e023      	b.n	8003eb2 <HAL_ADC_Init+0x31e>
 8003e6a:	bf00      	nop
 8003e6c:	20000004 	.word	0x20000004
 8003e70:	053e2d63 	.word	0x053e2d63
 8003e74:	1ffffc02 	.word	0x1ffffc02
 8003e78:	40012708 	.word	0x40012708
 8003e7c:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e84:	f023 0312 	bic.w	r3, r3, #18
 8003e88:	f043 0210 	orr.w	r2, r3, #16
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e94:	f043 0201 	orr.w	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003ea0:	e007      	b.n	8003eb2 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea6:	f043 0210 	orr.w	r2, r3, #16
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003eb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3720      	adds	r7, #32
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e07a      	b.n	8003fc4 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	f043 0202 	orr.w	r2, r3, #2
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 face 	bl	800447c <ADC_ConversionStop>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10f      	bne.n	8003f0a <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fb92 	bl	8004614 <ADC_Disable>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d102      	bne.n	8003f00 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff fd9f 	bl	8003a48 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003f18:	f023 0303 	bic.w	r3, r3, #3
 8003f1c:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f240 329f 	movw	r2, #927	; 0x39f
 8003f26:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68d9      	ldr	r1, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b26      	ldr	r3, [pc, #152]	; (8003fcc <HAL_ADC_DeInit+0x110>)
 8003f34:	400b      	ands	r3, r1
 8003f36:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003f46:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695a      	ldr	r2, [r3, #20]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0207 	bic.w	r2, r2, #7
 8003f56:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6a1a      	ldr	r2, [r3, #32]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003f66:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2200      	movs	r2, #0
 8003f94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003f96:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <HAL_ADC_DeInit+0x114>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a0d      	ldr	r2, [pc, #52]	; (8003fd0 <HAL_ADC_DeInit+0x114>)
 8003f9c:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003fa0:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd f8fc 	bl	80011a0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	833e0200 	.word	0x833e0200
 8003fd0:	40012708 	.word	0x40012708

08003fd4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff fdc5 	bl	8003b70 <LL_ADC_REG_IsConversionOngoing>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d132      	bne.n	8004052 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_ADC_Start+0x26>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e02e      	b.n	8004058 <HAL_ADC_Start+0x84>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fa80 	bl	8004508 <ADC_Enable>
 8004008:	4603      	mov	r3, r0
 800400a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d11a      	bne.n	8004048 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004016:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	221c      	movs	r2, #28
 8004032:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff fd6f 	bl	8003b24 <LL_ADC_REG_StartConversion>
 8004046:	e006      	b.n	8004056 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004050:	e001      	b.n	8004056 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004052:	2302      	movs	r3, #2
 8004054:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8004056:	7bfb      	ldrb	r3, [r7, #15]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_ADC_Stop+0x16>
 8004072:	2302      	movs	r3, #2
 8004074:	e022      	b.n	80040bc <HAL_ADC_Stop+0x5c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f9fc 	bl	800447c <ADC_ConversionStop>
 8004084:	4603      	mov	r3, r0
 8004086:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d111      	bne.n	80040b2 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fac0 	bl	8004614 <ADC_Disable>
 8004094:	4603      	mov	r3, r0
 8004096:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d109      	bne.n	80040b2 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	f043 0201 	orr.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d102      	bne.n	80040dc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80040d6:	2308      	movs	r3, #8
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	e010      	b.n	80040fe <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d007      	beq.n	80040fa <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ee:	f043 0220 	orr.w	r2, r3, #32
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e077      	b.n	80041ea <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80040fa:	2304      	movs	r3, #4
 80040fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80040fe:	f7fe fb79 	bl	80027f4 <HAL_GetTick>
 8004102:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004104:	e021      	b.n	800414a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d01d      	beq.n	800414a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800410e:	f7fe fb71 	bl	80027f4 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <HAL_ADC_PollForConversion+0x60>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d112      	bne.n	800414a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4013      	ands	r3, r2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10b      	bne.n	800414a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004136:	f043 0204 	orr.w	r2, r3, #4
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e04f      	b.n	80041ea <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4013      	ands	r3, r2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0d6      	beq.n	8004106 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fbe6 	bl	800393a <LL_ADC_REG_IsTriggerSourceSWStart>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d031      	beq.n	80041d8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	7e9b      	ldrb	r3, [r3, #26]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d12d      	bne.n	80041d8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b08      	cmp	r3, #8
 8004188:	d126      	bne.n	80041d8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff fcee 	bl	8003b70 <LL_ADC_REG_IsConversionOngoing>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d112      	bne.n	80041c0 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 020c 	bic.w	r2, r2, #12
 80041a8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041b2:	f023 0301 	bic.w	r3, r3, #1
 80041b6:	f043 0201 	orr.w	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	659a      	str	r2, [r3, #88]	; 0x58
 80041be:	e00b      	b.n	80041d8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c4:	f043 0220 	orr.w	r2, r3, #32
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d0:	f043 0201 	orr.w	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	7e1b      	ldrb	r3, [r3, #24]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d103      	bne.n	80041e8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	220c      	movs	r2, #12
 80041e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
	...

0800420c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800421a:	2300      	movs	r3, #0
 800421c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x28>
 8004230:	2302      	movs	r3, #2
 8004232:	e110      	b.n	8004456 <HAL_ADC_ConfigChannel+0x24a>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fc95 	bl	8003b70 <LL_ADC_REG_IsConversionOngoing>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 80f7 	bne.w	800443c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b02      	cmp	r3, #2
 8004254:	f000 80b1 	beq.w	80043ba <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004260:	d004      	beq.n	800426c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004266:	4a7e      	ldr	r2, [pc, #504]	; (8004460 <HAL_ADC_ConfigChannel+0x254>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d108      	bne.n	800427e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f7ff fb92 	bl	80039a0 <LL_ADC_REG_SetSequencerChAdd>
 800427c:	e041      	b.n	8004302 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	210f      	movs	r1, #15
 800428c:	fa01 f303 	lsl.w	r3, r1, r3
 8004290:	43db      	mvns	r3, r3
 8004292:	401a      	ands	r2, r3
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800429c:	2b00      	cmp	r3, #0
 800429e:	d105      	bne.n	80042ac <HAL_ADC_ConfigChannel+0xa0>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	0e9b      	lsrs	r3, r3, #26
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	e011      	b.n	80042d0 <HAL_ADC_ConfigChannel+0xc4>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	fa93 f3a3 	rbit	r3, r3
 80042b8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80042c4:	2320      	movs	r3, #32
 80042c6:	e003      	b.n	80042d0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	fab3 f383 	clz	r3, r3
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	6839      	ldr	r1, [r7, #0]
 80042d2:	6849      	ldr	r1, [r1, #4]
 80042d4:	f001 011f 	and.w	r1, r1, #31
 80042d8:	408b      	lsls	r3, r1
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	089b      	lsrs	r3, r3, #2
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d808      	bhi.n	8004302 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	6859      	ldr	r1, [r3, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	f7ff fb2e 	bl	800395e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6819      	ldr	r1, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	461a      	mov	r2, r3
 8004310:	f7ff fb6b 	bl	80039ea <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	f280 8097 	bge.w	800444c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800431e:	4851      	ldr	r0, [pc, #324]	; (8004464 <HAL_ADC_ConfigChannel+0x258>)
 8004320:	f7ff fac8 	bl	80038b4 <LL_ADC_GetCommonPathInternalCh>
 8004324:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a4f      	ldr	r2, [pc, #316]	; (8004468 <HAL_ADC_ConfigChannel+0x25c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d120      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004336:	2b00      	cmp	r3, #0
 8004338:	d11b      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004340:	4619      	mov	r1, r3
 8004342:	4848      	ldr	r0, [pc, #288]	; (8004464 <HAL_ADC_ConfigChannel+0x258>)
 8004344:	f7ff faa4 	bl	8003890 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004348:	4b48      	ldr	r3, [pc, #288]	; (800446c <HAL_ADC_ConfigChannel+0x260>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	099b      	lsrs	r3, r3, #6
 800434e:	4a48      	ldr	r2, [pc, #288]	; (8004470 <HAL_ADC_ConfigChannel+0x264>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	099b      	lsrs	r3, r3, #6
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	4613      	mov	r3, r2
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	4413      	add	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004362:	e002      	b.n	800436a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	3b01      	subs	r3, #1
 8004368:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f9      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004370:	e06c      	b.n	800444c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a3f      	ldr	r2, [pc, #252]	; (8004474 <HAL_ADC_ConfigChannel+0x268>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d10c      	bne.n	8004396 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d107      	bne.n	8004396 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800438c:	4619      	mov	r1, r3
 800438e:	4835      	ldr	r0, [pc, #212]	; (8004464 <HAL_ADC_ConfigChannel+0x258>)
 8004390:	f7ff fa7e 	bl	8003890 <LL_ADC_SetCommonPathInternalCh>
 8004394:	e05a      	b.n	800444c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a37      	ldr	r2, [pc, #220]	; (8004478 <HAL_ADC_ConfigChannel+0x26c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d155      	bne.n	800444c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d150      	bne.n	800444c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043b0:	4619      	mov	r1, r3
 80043b2:	482c      	ldr	r0, [pc, #176]	; (8004464 <HAL_ADC_ConfigChannel+0x258>)
 80043b4:	f7ff fa6c 	bl	8003890 <LL_ADC_SetCommonPathInternalCh>
 80043b8:	e048      	b.n	800444c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043c2:	d004      	beq.n	80043ce <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80043c8:	4a25      	ldr	r2, [pc, #148]	; (8004460 <HAL_ADC_ConfigChannel+0x254>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d107      	bne.n	80043de <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4619      	mov	r1, r3
 80043d8:	4610      	mov	r0, r2
 80043da:	f7ff faf3 	bl	80039c4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	da32      	bge.n	800444c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043e6:	481f      	ldr	r0, [pc, #124]	; (8004464 <HAL_ADC_ConfigChannel+0x258>)
 80043e8:	f7ff fa64 	bl	80038b4 <LL_ADC_GetCommonPathInternalCh>
 80043ec:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1d      	ldr	r2, [pc, #116]	; (8004468 <HAL_ADC_ConfigChannel+0x25c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d107      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043fe:	4619      	mov	r1, r3
 8004400:	4818      	ldr	r0, [pc, #96]	; (8004464 <HAL_ADC_ConfigChannel+0x258>)
 8004402:	f7ff fa45 	bl	8003890 <LL_ADC_SetCommonPathInternalCh>
 8004406:	e021      	b.n	800444c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a19      	ldr	r2, [pc, #100]	; (8004474 <HAL_ADC_ConfigChannel+0x268>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d107      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004418:	4619      	mov	r1, r3
 800441a:	4812      	ldr	r0, [pc, #72]	; (8004464 <HAL_ADC_ConfigChannel+0x258>)
 800441c:	f7ff fa38 	bl	8003890 <LL_ADC_SetCommonPathInternalCh>
 8004420:	e014      	b.n	800444c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a14      	ldr	r2, [pc, #80]	; (8004478 <HAL_ADC_ConfigChannel+0x26c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d10f      	bne.n	800444c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004432:	4619      	mov	r1, r3
 8004434:	480b      	ldr	r0, [pc, #44]	; (8004464 <HAL_ADC_ConfigChannel+0x258>)
 8004436:	f7ff fa2b 	bl	8003890 <LL_ADC_SetCommonPathInternalCh>
 800443a:	e007      	b.n	800444c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004440:	f043 0220 	orr.w	r2, r3, #32
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004454:	7ffb      	ldrb	r3, [r7, #31]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	80000004 	.word	0x80000004
 8004464:	40012708 	.word	0x40012708
 8004468:	b0001000 	.word	0xb0001000
 800446c:	20000004 	.word	0x20000004
 8004470:	053e2d63 	.word	0x053e2d63
 8004474:	b8004000 	.word	0xb8004000
 8004478:	b4002000 	.word	0xb4002000

0800447c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff fb71 	bl	8003b70 <LL_ADC_REG_IsConversionOngoing>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d033      	beq.n	80044fc <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff fb31 	bl	8003b00 <LL_ADC_IsDisableOngoing>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d104      	bne.n	80044ae <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fb4e 	bl	8003b4a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80044ae:	f7fe f9a1 	bl	80027f4 <HAL_GetTick>
 80044b2:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80044b4:	e01b      	b.n	80044ee <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80044b6:	f7fe f99d 	bl	80027f4 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d914      	bls.n	80044ee <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00d      	beq.n	80044ee <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d6:	f043 0210 	orr.w	r2, r3, #16
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e2:	f043 0201 	orr.w	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e007      	b.n	80044fe <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1dc      	bne.n	80044b6 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004510:	2300      	movs	r3, #0
 8004512:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff fadf 	bl	8003adc <LL_ADC_IsEnabled>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d169      	bne.n	80045f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	4b36      	ldr	r3, [pc, #216]	; (8004604 <ADC_Enable+0xfc>)
 800452c:	4013      	ands	r3, r2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00d      	beq.n	800454e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	f043 0210 	orr.w	r2, r3, #16
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004542:	f043 0201 	orr.w	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e055      	b.n	80045fa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fa9c 	bl	8003a90 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004558:	482b      	ldr	r0, [pc, #172]	; (8004608 <ADC_Enable+0x100>)
 800455a:	f7ff f9ab 	bl	80038b4 <LL_ADC_GetCommonPathInternalCh>
 800455e:	4603      	mov	r3, r0
 8004560:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00f      	beq.n	8004588 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004568:	4b28      	ldr	r3, [pc, #160]	; (800460c <ADC_Enable+0x104>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	099b      	lsrs	r3, r3, #6
 800456e:	4a28      	ldr	r2, [pc, #160]	; (8004610 <ADC_Enable+0x108>)
 8004570:	fba2 2303 	umull	r2, r3, r2, r3
 8004574:	099b      	lsrs	r3, r3, #6
 8004576:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004578:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800457a:	e002      	b.n	8004582 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	3b01      	subs	r3, #1
 8004580:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f9      	bne.n	800457c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	7e5b      	ldrb	r3, [r3, #25]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d033      	beq.n	80045f8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004590:	f7fe f930 	bl	80027f4 <HAL_GetTick>
 8004594:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004596:	e028      	b.n	80045ea <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff fa9d 	bl	8003adc <LL_ADC_IsEnabled>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d104      	bne.n	80045b2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff fa6f 	bl	8003a90 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045b2:	f7fe f91f 	bl	80027f4 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d914      	bls.n	80045ea <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d00d      	beq.n	80045ea <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d2:	f043 0210 	orr.w	r2, r3, #16
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045de:	f043 0201 	orr.w	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e007      	b.n	80045fa <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d1cf      	bne.n	8004598 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	80000017 	.word	0x80000017
 8004608:	40012708 	.word	0x40012708
 800460c:	20000004 	.word	0x20000004
 8004610:	053e2d63 	.word	0x053e2d63

08004614 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fa6d 	bl	8003b00 <LL_ADC_IsDisableOngoing>
 8004626:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fa55 	bl	8003adc <LL_ADC_IsEnabled>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d047      	beq.n	80046c8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d144      	bne.n	80046c8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 0305 	and.w	r3, r3, #5
 8004648:	2b01      	cmp	r3, #1
 800464a:	d10c      	bne.n	8004666 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff fa30 	bl	8003ab6 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2203      	movs	r2, #3
 800465c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800465e:	f7fe f8c9 	bl	80027f4 <HAL_GetTick>
 8004662:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004664:	e029      	b.n	80046ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466a:	f043 0210 	orr.w	r2, r3, #16
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004676:	f043 0201 	orr.w	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e023      	b.n	80046ca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004682:	f7fe f8b7 	bl	80027f4 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d914      	bls.n	80046ba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00d      	beq.n	80046ba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a2:	f043 0210 	orr.w	r2, r3, #16
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ae:	f043 0201 	orr.w	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e007      	b.n	80046ca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1dc      	bne.n	8004682 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <LL_ADC_SetCalibrationFactor>:
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046e2:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bc80      	pop	{r7}
 80046f8:	4770      	bx	lr

080046fa <LL_ADC_GetCalibrationFactor>:
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800470c:	4618      	mov	r0, r3
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr

08004716 <LL_ADC_Enable>:
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004726:	f023 0317 	bic.w	r3, r3, #23
 800472a:	f043 0201 	orr.w	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	609a      	str	r2, [r3, #8]
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr

0800473c <LL_ADC_Disable>:
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800474c:	f023 0317 	bic.w	r3, r3, #23
 8004750:	f043 0202 	orr.w	r2, r3, #2
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	609a      	str	r2, [r3, #8]
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr

08004762 <LL_ADC_IsEnabled>:
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <LL_ADC_IsEnabled+0x18>
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <LL_ADC_IsEnabled+0x1a>
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr

08004786 <LL_ADC_StartCalibration>:
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004796:	f023 0317 	bic.w	r3, r3, #23
 800479a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	609a      	str	r2, [r3, #8]
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <LL_ADC_IsCalibrationOnGoing>:
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047c0:	d101      	bne.n	80047c6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr

080047d2 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b088      	sub	sp, #32
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_ADCEx_Calibration_Start+0x1e>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e0b9      	b.n	8004964 <HAL_ADCEx_Calibration_Start+0x192>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff ff0b 	bl	8004614 <ADC_Disable>
 80047fe:	4603      	mov	r3, r0
 8004800:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff ffab 	bl	8004762 <LL_ADC_IsEnabled>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	f040 809d 	bne.w	800494e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800481c:	f043 0202 	orr.w	r2, r3, #2
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	f248 0303 	movw	r3, #32771	; 0x8003
 800482e:	4013      	ands	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004840:	f023 0303 	bic.w	r3, r3, #3
 8004844:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004846:	2300      	movs	r3, #0
 8004848:	61fb      	str	r3, [r7, #28]
 800484a:	e02e      	b.n	80048aa <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff ff98 	bl	8004786 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004856:	e014      	b.n	8004882 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	3301      	adds	r3, #1
 800485c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004864:	d30d      	bcc.n	8004882 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486a:	f023 0312 	bic.w	r3, r3, #18
 800486e:	f043 0210 	orr.w	r2, r3, #16
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e070      	b.n	8004964 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff ff90 	bl	80047ac <LL_ADC_IsCalibrationOnGoing>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e2      	bne.n	8004858 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff ff2f 	bl	80046fa <LL_ADC_GetCalibrationFactor>
 800489c:	4602      	mov	r2, r0
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	4413      	add	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	3301      	adds	r3, #1
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	2b07      	cmp	r3, #7
 80048ae:	d9cd      	bls.n	800484c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b8:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff ff29 	bl	8004716 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	69b9      	ldr	r1, [r7, #24]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff ff01 	bl	80046d2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff ff31 	bl	800473c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80048da:	f7fd ff8b 	bl	80027f4 <HAL_GetTick>
 80048de:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80048e0:	e01c      	b.n	800491c <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80048e2:	f7fd ff87 	bl	80027f4 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d915      	bls.n	800491c <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff ff34 	bl	8004762 <LL_ADC_IsEnabled>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00d      	beq.n	800491c <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004904:	f043 0210 	orr.w	r2, r3, #16
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004910:	f043 0201 	orr.w	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e023      	b.n	8004964 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ff1e 	bl	8004762 <LL_ADC_IsEnabled>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1da      	bne.n	80048e2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68d9      	ldr	r1, [r3, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	430a      	orrs	r2, r1
 800493a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004940:	f023 0303 	bic.w	r3, r3, #3
 8004944:	f043 0201 	orr.w	r2, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	659a      	str	r2, [r3, #88]	; 0x58
 800494c:	e005      	b.n	800495a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004952:	f043 0210 	orr.w	r2, r3, #16
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004962:	7dfb      	ldrb	r3, [r7, #23]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3720      	adds	r7, #32
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800497c:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <__NVIC_SetPriorityGrouping+0x44>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004988:	4013      	ands	r3, r2
 800498a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800499c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800499e:	4a04      	ldr	r2, [pc, #16]	; (80049b0 <__NVIC_SetPriorityGrouping+0x44>)
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	60d3      	str	r3, [r2, #12]
}
 80049a4:	bf00      	nop
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	e000ed00 	.word	0xe000ed00

080049b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049b8:	4b04      	ldr	r3, [pc, #16]	; (80049cc <__NVIC_GetPriorityGrouping+0x18>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	0a1b      	lsrs	r3, r3, #8
 80049be:	f003 0307 	and.w	r3, r3, #7
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	e000ed00 	.word	0xe000ed00

080049d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	db0b      	blt.n	80049fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	f003 021f 	and.w	r2, r3, #31
 80049e8:	4906      	ldr	r1, [pc, #24]	; (8004a04 <__NVIC_EnableIRQ+0x34>)
 80049ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	2001      	movs	r0, #1
 80049f2:	fa00 f202 	lsl.w	r2, r0, r2
 80049f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bc80      	pop	{r7}
 8004a02:	4770      	bx	lr
 8004a04:	e000e100 	.word	0xe000e100

08004a08 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	db12      	blt.n	8004a40 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	f003 021f 	and.w	r2, r3, #31
 8004a20:	490a      	ldr	r1, [pc, #40]	; (8004a4c <__NVIC_DisableIRQ+0x44>)
 8004a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	2001      	movs	r0, #1
 8004a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a2e:	3320      	adds	r3, #32
 8004a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a34:	f3bf 8f4f 	dsb	sy
}
 8004a38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a3a:	f3bf 8f6f 	isb	sy
}
 8004a3e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	e000e100 	.word	0xe000e100

08004a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	6039      	str	r1, [r7, #0]
 8004a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	db0a      	blt.n	8004a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	490c      	ldr	r1, [pc, #48]	; (8004a9c <__NVIC_SetPriority+0x4c>)
 8004a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6e:	0112      	lsls	r2, r2, #4
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	440b      	add	r3, r1
 8004a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a78:	e00a      	b.n	8004a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	4908      	ldr	r1, [pc, #32]	; (8004aa0 <__NVIC_SetPriority+0x50>)
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	3b04      	subs	r3, #4
 8004a88:	0112      	lsls	r2, r2, #4
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	761a      	strb	r2, [r3, #24]
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	e000e100 	.word	0xe000e100
 8004aa0:	e000ed00 	.word	0xe000ed00

08004aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b089      	sub	sp, #36	; 0x24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f1c3 0307 	rsb	r3, r3, #7
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	bf28      	it	cs
 8004ac2:	2304      	movcs	r3, #4
 8004ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	2b06      	cmp	r3, #6
 8004acc:	d902      	bls.n	8004ad4 <NVIC_EncodePriority+0x30>
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	3b03      	subs	r3, #3
 8004ad2:	e000      	b.n	8004ad6 <NVIC_EncodePriority+0x32>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43da      	mvns	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aec:	f04f 31ff 	mov.w	r1, #4294967295
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	fa01 f303 	lsl.w	r3, r1, r3
 8004af6:	43d9      	mvns	r1, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004afc:	4313      	orrs	r3, r2
         );
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3724      	adds	r7, #36	; 0x24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr

08004b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff ff2b 	bl	800496c <__NVIC_SetPriorityGrouping>
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b086      	sub	sp, #24
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	4603      	mov	r3, r0
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	607a      	str	r2, [r7, #4]
 8004b2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b2c:	f7ff ff42 	bl	80049b4 <__NVIC_GetPriorityGrouping>
 8004b30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	6978      	ldr	r0, [r7, #20]
 8004b38:	f7ff ffb4 	bl	8004aa4 <NVIC_EncodePriority>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b42:	4611      	mov	r1, r2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff ff83 	bl	8004a50 <__NVIC_SetPriority>
}
 8004b4a:	bf00      	nop
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	4603      	mov	r3, r0
 8004b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff ff35 	bl	80049d0 <__NVIC_EnableIRQ>
}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	4603      	mov	r3, r0
 8004b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff ff43 	bl	8004a08 <__NVIC_DisableIRQ>
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e08e      	b.n	8004cbc <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	4b47      	ldr	r3, [pc, #284]	; (8004cc4 <HAL_DMA_Init+0x138>)
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d80f      	bhi.n	8004bca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	4b45      	ldr	r3, [pc, #276]	; (8004cc8 <HAL_DMA_Init+0x13c>)
 8004bb2:	4413      	add	r3, r2
 8004bb4:	4a45      	ldr	r2, [pc, #276]	; (8004ccc <HAL_DMA_Init+0x140>)
 8004bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bba:	091b      	lsrs	r3, r3, #4
 8004bbc:	009a      	lsls	r2, r3, #2
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a42      	ldr	r2, [pc, #264]	; (8004cd0 <HAL_DMA_Init+0x144>)
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40
 8004bc8:	e00e      	b.n	8004be8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	4b40      	ldr	r3, [pc, #256]	; (8004cd4 <HAL_DMA_Init+0x148>)
 8004bd2:	4413      	add	r3, r2
 8004bd4:	4a3d      	ldr	r2, [pc, #244]	; (8004ccc <HAL_DMA_Init+0x140>)
 8004bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bda:	091b      	lsrs	r3, r3, #4
 8004bdc:	009a      	lsls	r2, r3, #2
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a3c      	ldr	r2, [pc, #240]	; (8004cd8 <HAL_DMA_Init+0x14c>)
 8004be6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c02:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6819      	ldr	r1, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fb24 	bl	8005288 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c48:	d102      	bne.n	8004c50 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c5c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c66:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d010      	beq.n	8004c92 <HAL_DMA_Init+0x106>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d80c      	bhi.n	8004c92 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fb4d 	bl	8005318 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c8e:	605a      	str	r2, [r3, #4]
 8004c90:	e008      	b.n	8004ca4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40020407 	.word	0x40020407
 8004cc8:	bffdfff8 	.word	0xbffdfff8
 8004ccc:	cccccccd 	.word	0xcccccccd
 8004cd0:	40020000 	.word	0x40020000
 8004cd4:	bffdfbf8 	.word	0xbffdfbf8
 8004cd8:	40020400 	.word	0x40020400

08004cdc <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e07b      	b.n	8004de6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0201 	bic.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	4b3a      	ldr	r3, [pc, #232]	; (8004df0 <HAL_DMA_DeInit+0x114>)
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d80f      	bhi.n	8004d2a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4b38      	ldr	r3, [pc, #224]	; (8004df4 <HAL_DMA_DeInit+0x118>)
 8004d12:	4413      	add	r3, r2
 8004d14:	4a38      	ldr	r2, [pc, #224]	; (8004df8 <HAL_DMA_DeInit+0x11c>)
 8004d16:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1a:	091b      	lsrs	r3, r3, #4
 8004d1c:	009a      	lsls	r2, r3, #2
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a35      	ldr	r2, [pc, #212]	; (8004dfc <HAL_DMA_DeInit+0x120>)
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40
 8004d28:	e00e      	b.n	8004d48 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	4b33      	ldr	r3, [pc, #204]	; (8004e00 <HAL_DMA_DeInit+0x124>)
 8004d32:	4413      	add	r3, r2
 8004d34:	4a30      	ldr	r2, [pc, #192]	; (8004df8 <HAL_DMA_DeInit+0x11c>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	091b      	lsrs	r3, r3, #4
 8004d3c:	009a      	lsls	r2, r3, #2
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a2f      	ldr	r2, [pc, #188]	; (8004e04 <HAL_DMA_DeInit+0x128>)
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d54:	f003 021c 	and.w	r2, r3, #28
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d62:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fa8f 	bl	8005288 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d7a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00f      	beq.n	8004da4 <HAL_DMA_DeInit+0xc8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d80b      	bhi.n	8004da4 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fac3 	bl	8005318 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004da2:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40020407 	.word	0x40020407
 8004df4:	bffdfff8 	.word	0xbffdfff8
 8004df8:	cccccccd 	.word	0xcccccccd
 8004dfc:	40020000 	.word	0x40020000
 8004e00:	bffdfbf8 	.word	0xbffdfbf8
 8004e04:	40020400 	.word	0x40020400

08004e08 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_DMA_Start_IT+0x20>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e069      	b.n	8004efc <HAL_DMA_Start_IT+0xf4>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d155      	bne.n	8004ee8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0201 	bic.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 f9d3 	bl	800520c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d008      	beq.n	8004e80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 020e 	orr.w	r2, r2, #14
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	e00f      	b.n	8004ea0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0204 	bic.w	r2, r2, #4
 8004e8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 020a 	orr.w	r2, r2, #10
 8004e9e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ebc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d007      	beq.n	8004ed6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ed4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0201 	orr.w	r2, r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	e008      	b.n	8004efa <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2280      	movs	r2, #128	; 0x80
 8004eec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e04f      	b.n	8004fb6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d008      	beq.n	8004f34 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2204      	movs	r2, #4
 8004f26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e040      	b.n	8004fb6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 020e 	bic.w	r2, r2, #14
 8004f42:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0201 	bic.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f68:	f003 021c 	and.w	r2, r3, #28
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	2101      	movs	r1, #1
 8004f72:	fa01 f202 	lsl.w	r2, r1, r2
 8004f76:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f80:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00c      	beq.n	8004fa4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f98:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004fa2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d005      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2204      	movs	r2, #4
 8004fdc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	73fb      	strb	r3, [r7, #15]
 8004fe2:	e047      	b.n	8005074 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 020e 	bic.w	r2, r2, #14
 8004ff2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0201 	bic.w	r2, r2, #1
 8005002:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800500e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005012:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005018:	f003 021c 	and.w	r2, r3, #28
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	2101      	movs	r1, #1
 8005022:	fa01 f202 	lsl.w	r2, r1, r2
 8005026:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005030:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00c      	beq.n	8005054 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005044:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005048:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005052:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	4798      	blx	r3
    }
  }
  return status;
 8005074:	7bfb      	ldrb	r3, [r7, #15]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509c:	f003 031c 	and.w	r3, r3, #28
 80050a0:	2204      	movs	r2, #4
 80050a2:	409a      	lsls	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d027      	beq.n	80050fc <HAL_DMA_IRQHandler+0x7c>
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d022      	beq.n	80050fc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d107      	bne.n	80050d4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0204 	bic.w	r2, r2, #4
 80050d2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d8:	f003 021c 	and.w	r2, r3, #28
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	2104      	movs	r1, #4
 80050e2:	fa01 f202 	lsl.w	r2, r1, r2
 80050e6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8081 	beq.w	80051f4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80050fa:	e07b      	b.n	80051f4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005100:	f003 031c 	and.w	r3, r3, #28
 8005104:	2202      	movs	r2, #2
 8005106:	409a      	lsls	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4013      	ands	r3, r2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d03d      	beq.n	800518c <HAL_DMA_IRQHandler+0x10c>
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d038      	beq.n	800518c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10b      	bne.n	8005140 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 020a 	bic.w	r2, r2, #10
 8005136:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	4b2e      	ldr	r3, [pc, #184]	; (8005200 <HAL_DMA_IRQHandler+0x180>)
 8005148:	429a      	cmp	r2, r3
 800514a:	d909      	bls.n	8005160 <HAL_DMA_IRQHandler+0xe0>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005150:	f003 031c 	and.w	r3, r3, #28
 8005154:	4a2b      	ldr	r2, [pc, #172]	; (8005204 <HAL_DMA_IRQHandler+0x184>)
 8005156:	2102      	movs	r1, #2
 8005158:	fa01 f303 	lsl.w	r3, r1, r3
 800515c:	6053      	str	r3, [r2, #4]
 800515e:	e008      	b.n	8005172 <HAL_DMA_IRQHandler+0xf2>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005164:	f003 031c 	and.w	r3, r3, #28
 8005168:	4a27      	ldr	r2, [pc, #156]	; (8005208 <HAL_DMA_IRQHandler+0x188>)
 800516a:	2102      	movs	r1, #2
 800516c:	fa01 f303 	lsl.w	r3, r1, r3
 8005170:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d038      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800518a:	e033      	b.n	80051f4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005190:	f003 031c 	and.w	r3, r3, #28
 8005194:	2208      	movs	r2, #8
 8005196:	409a      	lsls	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d02a      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x176>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d025      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 020e 	bic.w	r2, r2, #14
 80051b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051be:	f003 021c 	and.w	r2, r3, #28
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	2101      	movs	r1, #1
 80051c8:	fa01 f202 	lsl.w	r2, r1, r2
 80051cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d004      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop
}
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40020080 	.word	0x40020080
 8005204:	40020400 	.word	0x40020400
 8005208:	40020000 	.word	0x40020000

0800520c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005222:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005234:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523a:	f003 021c 	and.w	r2, r3, #28
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	2101      	movs	r1, #1
 8005244:	fa01 f202 	lsl.w	r2, r1, r2
 8005248:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b10      	cmp	r3, #16
 8005258:	d108      	bne.n	800526c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800526a:	e007      	b.n	800527c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	60da      	str	r2, [r3, #12]
}
 800527c:	bf00      	nop
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	bc80      	pop	{r7}
 8005284:	4770      	bx	lr
	...

08005288 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	4b1c      	ldr	r3, [pc, #112]	; (8005308 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005298:	429a      	cmp	r2, r3
 800529a:	d813      	bhi.n	80052c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a0:	089b      	lsrs	r3, r3, #2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052a8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	3b08      	subs	r3, #8
 80052b8:	4a14      	ldr	r2, [pc, #80]	; (800530c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	091b      	lsrs	r3, r3, #4
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	e011      	b.n	80052e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c8:	089b      	lsrs	r3, r3, #2
 80052ca:	009a      	lsls	r2, r3, #2
 80052cc:	4b10      	ldr	r3, [pc, #64]	; (8005310 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80052ce:	4413      	add	r3, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	3b08      	subs	r3, #8
 80052dc:	4a0b      	ldr	r2, [pc, #44]	; (800530c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80052de:	fba2 2303 	umull	r2, r3, r2, r3
 80052e2:	091b      	lsrs	r3, r3, #4
 80052e4:	3307      	adds	r3, #7
 80052e6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a0a      	ldr	r2, [pc, #40]	; (8005314 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80052ec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 031f 	and.w	r3, r3, #31
 80052f4:	2201      	movs	r2, #1
 80052f6:	409a      	lsls	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052fc:	bf00      	nop
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40020407 	.word	0x40020407
 800530c:	cccccccd 	.word	0xcccccccd
 8005310:	4002081c 	.word	0x4002081c
 8005314:	40020880 	.word	0x40020880

08005318 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005328:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	461a      	mov	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a08      	ldr	r2, [pc, #32]	; (800535c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800533c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3b01      	subs	r3, #1
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	2201      	movs	r2, #1
 8005348:	409a      	lsls	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800534e:	bf00      	nop
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr
 8005358:	1000823f 	.word	0x1000823f
 800535c:	40020940 	.word	0x40020940

08005360 <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b01      	cmp	r3, #1
 8005374:	d12b      	bne.n	80053ce <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_DMAEx_ConfigMuxSync+0x24>
 8005380:	2302      	movs	r3, #2
 8005382:	e028      	b.n	80053d6 <HAL_DMAEx_ConfigMuxSync+0x76>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	3b01      	subs	r3, #1
 80053a0:	04db      	lsls	r3, r3, #19
 80053a2:	431a      	orrs	r2, r3
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	431a      	orrs	r2, r3
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	7a1b      	ldrb	r3, [r3, #8]
 80053ae:	041b      	lsls	r3, r3, #16
 80053b0:	431a      	orrs	r2, r3
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	7a5b      	ldrb	r3, [r3, #9]
 80053b6:	025b      	lsls	r3, r3, #9
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053be:	430a      	orrs	r2, r1
 80053c0:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	e003      	b.n	80053d6 <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2280      	movs	r2, #128	; 0x80
 80053d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
  }
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc80      	pop	{r7}
 80053de:	4770      	bx	lr

080053e0 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d01a      	beq.n	800542e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005402:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005406:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005410:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005416:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005432:	2b00      	cmp	r3, #0
 8005434:	d022      	beq.n	800547c <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005440:	4013      	ands	r3, r2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d01a      	beq.n	800547c <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005454:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800545e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005464:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	4798      	blx	r3
      }
    }
  }
}
 800547c:	bf00      	nop
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005492:	4b1c      	ldr	r3, [pc, #112]	; (8005504 <HAL_FLASH_Program+0x80>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d101      	bne.n	800549e <HAL_FLASH_Program+0x1a>
 800549a:	2302      	movs	r3, #2
 800549c:	e02d      	b.n	80054fa <HAL_FLASH_Program+0x76>
 800549e:	4b19      	ldr	r3, [pc, #100]	; (8005504 <HAL_FLASH_Program+0x80>)
 80054a0:	2201      	movs	r2, #1
 80054a2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80054a4:	4b17      	ldr	r3, [pc, #92]	; (8005504 <HAL_FLASH_Program+0x80>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80054aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80054ae:	f000 f869 	bl	8005584 <FLASH_WaitForLastOperation>
 80054b2:	4603      	mov	r3, r0
 80054b4:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d11a      	bne.n	80054f2 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d105      	bne.n	80054ce <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80054c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054c6:	68b8      	ldr	r0, [r7, #8]
 80054c8:	f000 f8be 	bl	8005648 <FLASH_Program_DoubleWord>
 80054cc:	e004      	b.n	80054d8 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	4619      	mov	r1, r3
 80054d2:	68b8      	ldr	r0, [r7, #8]
 80054d4:	f000 f8de 	bl	8005694 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80054d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80054dc:	f000 f852 	bl	8005584 <FLASH_WaitForLastOperation>
 80054e0:	4603      	mov	r3, r0
 80054e2:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80054e4:	4b08      	ldr	r3, [pc, #32]	; (8005508 <HAL_FLASH_Program+0x84>)
 80054e6:	695a      	ldr	r2, [r3, #20]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	43db      	mvns	r3, r3
 80054ec:	4906      	ldr	r1, [pc, #24]	; (8005508 <HAL_FLASH_Program+0x84>)
 80054ee:	4013      	ands	r3, r2
 80054f0:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80054f2:	4b04      	ldr	r3, [pc, #16]	; (8005504 <HAL_FLASH_Program+0x80>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20000620 	.word	0x20000620
 8005508:	58004000 	.word	0x58004000

0800550c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005516:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <HAL_FLASH_Unlock+0x38>)
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	2b00      	cmp	r3, #0
 800551c:	da0b      	bge.n	8005536 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800551e:	4b09      	ldr	r3, [pc, #36]	; (8005544 <HAL_FLASH_Unlock+0x38>)
 8005520:	4a09      	ldr	r2, [pc, #36]	; (8005548 <HAL_FLASH_Unlock+0x3c>)
 8005522:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005524:	4b07      	ldr	r3, [pc, #28]	; (8005544 <HAL_FLASH_Unlock+0x38>)
 8005526:	4a09      	ldr	r2, [pc, #36]	; (800554c <HAL_FLASH_Unlock+0x40>)
 8005528:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800552a:	4b06      	ldr	r3, [pc, #24]	; (8005544 <HAL_FLASH_Unlock+0x38>)
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	2b00      	cmp	r3, #0
 8005530:	da01      	bge.n	8005536 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005536:	79fb      	ldrb	r3, [r7, #7]
}
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	58004000 	.word	0x58004000
 8005548:	45670123 	.word	0x45670123
 800554c:	cdef89ab 	.word	0xcdef89ab

08005550 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800555a:	4b09      	ldr	r3, [pc, #36]	; (8005580 <HAL_FLASH_Lock+0x30>)
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	4a08      	ldr	r2, [pc, #32]	; (8005580 <HAL_FLASH_Lock+0x30>)
 8005560:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005564:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8005566:	4b06      	ldr	r3, [pc, #24]	; (8005580 <HAL_FLASH_Lock+0x30>)
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	2b00      	cmp	r3, #0
 800556c:	db01      	blt.n	8005572 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005572:	79fb      	ldrb	r3, [r7, #7]
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	58004000 	.word	0x58004000

08005584 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800558c:	f7fd f932 	bl	80027f4 <HAL_GetTick>
 8005590:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005592:	e009      	b.n	80055a8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005594:	f7fd f92e 	bl	80027f4 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d801      	bhi.n	80055a8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e047      	b.n	8005638 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80055a8:	4b25      	ldr	r3, [pc, #148]	; (8005640 <FLASH_WaitForLastOperation+0xbc>)
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b4:	d0ee      	beq.n	8005594 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 80055b6:	4b22      	ldr	r3, [pc, #136]	; (8005640 <FLASH_WaitForLastOperation+0xbc>)
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80055c6:	4b1e      	ldr	r3, [pc, #120]	; (8005640 <FLASH_WaitForLastOperation+0xbc>)
 80055c8:	2201      	movs	r2, #1
 80055ca:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80055d2:	4013      	ands	r3, r2
 80055d4:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d007      	beq.n	80055f0 <FLASH_WaitForLastOperation+0x6c>
 80055e0:	4b17      	ldr	r3, [pc, #92]	; (8005640 <FLASH_WaitForLastOperation+0xbc>)
 80055e2:	699a      	ldr	r2, [r3, #24]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80055ea:	4915      	ldr	r1, [pc, #84]	; (8005640 <FLASH_WaitForLastOperation+0xbc>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	618b      	str	r3, [r1, #24]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d004      	beq.n	8005604 <FLASH_WaitForLastOperation+0x80>
 80055fa:	4a11      	ldr	r2, [pc, #68]	; (8005640 <FLASH_WaitForLastOperation+0xbc>)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005602:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00e      	beq.n	8005628 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800560a:	4a0e      	ldr	r2, [pc, #56]	; (8005644 <FLASH_WaitForLastOperation+0xc0>)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e011      	b.n	8005638 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005614:	f7fd f8ee 	bl	80027f4 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	429a      	cmp	r2, r3
 8005622:	d801      	bhi.n	8005628 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e007      	b.n	8005638 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005628:	4b05      	ldr	r3, [pc, #20]	; (8005640 <FLASH_WaitForLastOperation+0xbc>)
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005630:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005634:	d0ee      	beq.n	8005614 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	58004000 	.word	0x58004000
 8005644:	20000620 	.word	0x20000620

08005648 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005654:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <FLASH_Program_DoubleWord+0x48>)
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	4a0d      	ldr	r2, [pc, #52]	; (8005690 <FLASH_Program_DoubleWord+0x48>)
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005666:	f3bf 8f6f 	isb	sy
}
 800566a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800566c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	f04f 0300 	mov.w	r3, #0
 8005678:	000a      	movs	r2, r1
 800567a:	2300      	movs	r3, #0
 800567c:	68f9      	ldr	r1, [r7, #12]
 800567e:	3104      	adds	r1, #4
 8005680:	4613      	mov	r3, r2
 8005682:	600b      	str	r3, [r1, #0]
}
 8005684:	bf00      	nop
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	bc80      	pop	{r7}
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	58004000 	.word	0x58004000

08005694 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005694:	b480      	push	{r7}
 8005696:	b089      	sub	sp, #36	; 0x24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800569e:	2340      	movs	r3, #64	; 0x40
 80056a0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80056aa:	4b18      	ldr	r3, [pc, #96]	; (800570c <FLASH_Program_Fast+0x78>)
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	4a17      	ldr	r2, [pc, #92]	; (800570c <FLASH_Program_Fast+0x78>)
 80056b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056b4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056b6:	f3ef 8310 	mrs	r3, PRIMASK
 80056ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80056bc:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 80056be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80056c0:	b672      	cpsid	i
}
 80056c2:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	3304      	adds	r3, #4
 80056d0:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	3304      	adds	r3, #4
 80056d6:	617b      	str	r3, [r7, #20]
    row_index--;
 80056d8:	7ffb      	ldrb	r3, [r7, #31]
 80056da:	3b01      	subs	r3, #1
 80056dc:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80056de:	7ffb      	ldrb	r3, [r7, #31]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1ef      	bne.n	80056c4 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80056e4:	bf00      	nop
 80056e6:	4b09      	ldr	r3, [pc, #36]	; (800570c <FLASH_Program_Fast+0x78>)
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f2:	d0f8      	beq.n	80056e6 <FLASH_Program_Fast+0x52>
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f383 8810 	msr	PRIMASK, r3
}
 80056fe:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005700:	bf00      	nop
 8005702:	3724      	adds	r7, #36	; 0x24
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	58004000 	.word	0x58004000

08005710 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800571a:	4b28      	ldr	r3, [pc, #160]	; (80057bc <HAL_FLASHEx_Erase+0xac>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_FLASHEx_Erase+0x16>
 8005722:	2302      	movs	r3, #2
 8005724:	e046      	b.n	80057b4 <HAL_FLASHEx_Erase+0xa4>
 8005726:	4b25      	ldr	r3, [pc, #148]	; (80057bc <HAL_FLASHEx_Erase+0xac>)
 8005728:	2201      	movs	r2, #1
 800572a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800572c:	4b23      	ldr	r3, [pc, #140]	; (80057bc <HAL_FLASHEx_Erase+0xac>)
 800572e:	2200      	movs	r2, #0
 8005730:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005736:	f7ff ff25 	bl	8005584 <FLASH_WaitForLastOperation>
 800573a:	4603      	mov	r3, r0
 800573c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d133      	bne.n	80057ac <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b04      	cmp	r3, #4
 800574a:	d108      	bne.n	800575e <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 800574c:	f000 f838 	bl	80057c0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005750:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005754:	f7ff ff16 	bl	8005584 <FLASH_WaitForLastOperation>
 8005758:	4603      	mov	r3, r0
 800575a:	73fb      	strb	r3, [r7, #15]
 800575c:	e024      	b.n	80057a8 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	f04f 32ff 	mov.w	r2, #4294967295
 8005764:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	60bb      	str	r3, [r7, #8]
 800576c:	e012      	b.n	8005794 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800576e:	68b8      	ldr	r0, [r7, #8]
 8005770:	f000 f836 	bl	80057e0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005774:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005778:	f7ff ff04 	bl	8005584 <FLASH_WaitForLastOperation>
 800577c:	4603      	mov	r3, r0
 800577e:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005780:	7bfb      	ldrb	r3, [r7, #15]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	601a      	str	r2, [r3, #0]
          break;
 800578c:	e00a      	b.n	80057a4 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	3301      	adds	r3, #1
 8005792:	60bb      	str	r3, [r7, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	4413      	add	r3, r2
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d3e4      	bcc.n	800576e <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 80057a4:	f000 f878 	bl	8005898 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80057a8:	f000 f832 	bl	8005810 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80057ac:	4b03      	ldr	r3, [pc, #12]	; (80057bc <HAL_FLASHEx_Erase+0xac>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	701a      	strb	r2, [r3, #0]

  return status;
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	20000620 	.word	0x20000620

080057c0 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80057c4:	4b05      	ldr	r3, [pc, #20]	; (80057dc <FLASH_MassErase+0x1c>)
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	4a04      	ldr	r2, [pc, #16]	; (80057dc <FLASH_MassErase+0x1c>)
 80057ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ce:	f043 0304 	orr.w	r3, r3, #4
 80057d2:	6153      	str	r3, [r2, #20]
#endif
}
 80057d4:	bf00      	nop
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr
 80057dc:	58004000 	.word	0x58004000

080057e0 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80057e8:	4b08      	ldr	r3, [pc, #32]	; (800580c <FLASH_PageErase+0x2c>)
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	4313      	orrs	r3, r2
 80057f6:	4a05      	ldr	r2, [pc, #20]	; (800580c <FLASH_PageErase+0x2c>)
 80057f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057fc:	f043 0302 	orr.w	r3, r3, #2
 8005800:	6153      	str	r3, [r2, #20]
#endif
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	bc80      	pop	{r7}
 800580a:	4770      	bx	lr
 800580c:	58004000 	.word	0x58004000

08005810 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005814:	4b1f      	ldr	r3, [pc, #124]	; (8005894 <FLASH_FlushCaches+0x84>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800581c:	2b01      	cmp	r3, #1
 800581e:	d117      	bne.n	8005850 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005820:	4b1c      	ldr	r3, [pc, #112]	; (8005894 <FLASH_FlushCaches+0x84>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1b      	ldr	r2, [pc, #108]	; (8005894 <FLASH_FlushCaches+0x84>)
 8005826:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800582a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800582c:	4b19      	ldr	r3, [pc, #100]	; (8005894 <FLASH_FlushCaches+0x84>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a18      	ldr	r2, [pc, #96]	; (8005894 <FLASH_FlushCaches+0x84>)
 8005832:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	4b16      	ldr	r3, [pc, #88]	; (8005894 <FLASH_FlushCaches+0x84>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a15      	ldr	r2, [pc, #84]	; (8005894 <FLASH_FlushCaches+0x84>)
 800583e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005842:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005844:	4b13      	ldr	r3, [pc, #76]	; (8005894 <FLASH_FlushCaches+0x84>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a12      	ldr	r2, [pc, #72]	; (8005894 <FLASH_FlushCaches+0x84>)
 800584a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800584e:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005850:	4b10      	ldr	r3, [pc, #64]	; (8005894 <FLASH_FlushCaches+0x84>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005858:	2b01      	cmp	r3, #1
 800585a:	d117      	bne.n	800588c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800585c:	4b0d      	ldr	r3, [pc, #52]	; (8005894 <FLASH_FlushCaches+0x84>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a0c      	ldr	r2, [pc, #48]	; (8005894 <FLASH_FlushCaches+0x84>)
 8005862:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005866:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005868:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <FLASH_FlushCaches+0x84>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a09      	ldr	r2, [pc, #36]	; (8005894 <FLASH_FlushCaches+0x84>)
 800586e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	4b07      	ldr	r3, [pc, #28]	; (8005894 <FLASH_FlushCaches+0x84>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a06      	ldr	r2, [pc, #24]	; (8005894 <FLASH_FlushCaches+0x84>)
 800587a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800587e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005880:	4b04      	ldr	r3, [pc, #16]	; (8005894 <FLASH_FlushCaches+0x84>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a03      	ldr	r2, [pc, #12]	; (8005894 <FLASH_FlushCaches+0x84>)
 8005886:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800588a:	6013      	str	r3, [r2, #0]
  }
#endif
}
 800588c:	bf00      	nop
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr
 8005894:	58004000 	.word	0x58004000

08005898 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800589c:	4b05      	ldr	r3, [pc, #20]	; (80058b4 <FLASH_AcknowledgePageErase+0x1c>)
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	4a04      	ldr	r2, [pc, #16]	; (80058b4 <FLASH_AcknowledgePageErase+0x1c>)
 80058a2:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80058a6:	f023 0302 	bic.w	r3, r3, #2
 80058aa:	6153      	str	r3, [r2, #20]
#endif
}
 80058ac:	bf00      	nop
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bc80      	pop	{r7}
 80058b2:	4770      	bx	lr
 80058b4:	58004000 	.word	0x58004000

080058b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058c6:	e140      	b.n	8005b4a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	2101      	movs	r1, #1
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	fa01 f303 	lsl.w	r3, r1, r3
 80058d4:	4013      	ands	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 8132 	beq.w	8005b44 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d005      	beq.n	80058f8 <HAL_GPIO_Init+0x40>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d130      	bne.n	800595a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	2203      	movs	r2, #3
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	43db      	mvns	r3, r3
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4013      	ands	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800592e:	2201      	movs	r2, #1
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	43db      	mvns	r3, r3
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4013      	ands	r3, r2
 800593c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	091b      	lsrs	r3, r3, #4
 8005944:	f003 0201 	and.w	r2, r3, #1
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	2b03      	cmp	r3, #3
 8005964:	d017      	beq.n	8005996 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	2203      	movs	r2, #3
 8005972:	fa02 f303 	lsl.w	r3, r2, r3
 8005976:	43db      	mvns	r3, r3
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4013      	ands	r3, r2
 800597c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	4313      	orrs	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d123      	bne.n	80059ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	08da      	lsrs	r2, r3, #3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3208      	adds	r2, #8
 80059aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	220f      	movs	r2, #15
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	43db      	mvns	r3, r3
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4013      	ands	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	691a      	ldr	r2, [r3, #16]
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	08da      	lsrs	r2, r3, #3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3208      	adds	r2, #8
 80059e4:	6939      	ldr	r1, [r7, #16]
 80059e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	2203      	movs	r2, #3
 80059f6:	fa02 f303 	lsl.w	r3, r2, r3
 80059fa:	43db      	mvns	r3, r3
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4013      	ands	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f003 0203 	and.w	r2, r3, #3
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 808c 	beq.w	8005b44 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005a2c:	4a4e      	ldr	r2, [pc, #312]	; (8005b68 <HAL_GPIO_Init+0x2b0>)
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	089b      	lsrs	r3, r3, #2
 8005a32:	3302      	adds	r3, #2
 8005a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f003 0303 	and.w	r3, r3, #3
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	2207      	movs	r2, #7
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005a56:	d00d      	beq.n	8005a74 <HAL_GPIO_Init+0x1bc>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a44      	ldr	r2, [pc, #272]	; (8005b6c <HAL_GPIO_Init+0x2b4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d007      	beq.n	8005a70 <HAL_GPIO_Init+0x1b8>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a43      	ldr	r2, [pc, #268]	; (8005b70 <HAL_GPIO_Init+0x2b8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d101      	bne.n	8005a6c <HAL_GPIO_Init+0x1b4>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e004      	b.n	8005a76 <HAL_GPIO_Init+0x1be>
 8005a6c:	2307      	movs	r3, #7
 8005a6e:	e002      	b.n	8005a76 <HAL_GPIO_Init+0x1be>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <HAL_GPIO_Init+0x1be>
 8005a74:	2300      	movs	r3, #0
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	f002 0203 	and.w	r2, r2, #3
 8005a7c:	0092      	lsls	r2, r2, #2
 8005a7e:	4093      	lsls	r3, r2
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005a86:	4938      	ldr	r1, [pc, #224]	; (8005b68 <HAL_GPIO_Init+0x2b0>)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	089b      	lsrs	r3, r3, #2
 8005a8c:	3302      	adds	r3, #2
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a94:	4b37      	ldr	r3, [pc, #220]	; (8005b74 <HAL_GPIO_Init+0x2bc>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ab8:	4a2e      	ldr	r2, [pc, #184]	; (8005b74 <HAL_GPIO_Init+0x2bc>)
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005abe:	4b2d      	ldr	r3, [pc, #180]	; (8005b74 <HAL_GPIO_Init+0x2bc>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4013      	ands	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005ae2:	4a24      	ldr	r2, [pc, #144]	; (8005b74 <HAL_GPIO_Init+0x2bc>)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005ae8:	4b22      	ldr	r3, [pc, #136]	; (8005b74 <HAL_GPIO_Init+0x2bc>)
 8005aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aee:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	43db      	mvns	r3, r3
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4013      	ands	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005b0e:	4a19      	ldr	r2, [pc, #100]	; (8005b74 <HAL_GPIO_Init+0x2bc>)
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005b16:	4b17      	ldr	r3, [pc, #92]	; (8005b74 <HAL_GPIO_Init+0x2bc>)
 8005b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b1c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	43db      	mvns	r3, r3
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4013      	ands	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005b3c:	4a0d      	ldr	r2, [pc, #52]	; (8005b74 <HAL_GPIO_Init+0x2bc>)
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	3301      	adds	r3, #1
 8005b48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	fa22 f303 	lsr.w	r3, r2, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f47f aeb7 	bne.w	80058c8 <HAL_GPIO_Init+0x10>
  }
}
 8005b5a:	bf00      	nop
 8005b5c:	bf00      	nop
 8005b5e:	371c      	adds	r7, #28
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bc80      	pop	{r7}
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40010000 	.word	0x40010000
 8005b6c:	48000400 	.word	0x48000400
 8005b70:	48000800 	.word	0x48000800
 8005b74:	58000800 	.word	0x58000800

08005b78 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b82:	2300      	movs	r3, #0
 8005b84:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005b86:	e0af      	b.n	8005ce8 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005b88:	2201      	movs	r2, #1
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	4013      	ands	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 80a2 	beq.w	8005ce2 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005b9e:	4a59      	ldr	r2, [pc, #356]	; (8005d04 <HAL_GPIO_DeInit+0x18c>)
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	089b      	lsrs	r3, r3, #2
 8005ba4:	3302      	adds	r3, #2
 8005ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005baa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	2207      	movs	r2, #7
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005bc6:	d00d      	beq.n	8005be4 <HAL_GPIO_DeInit+0x6c>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a4f      	ldr	r2, [pc, #316]	; (8005d08 <HAL_GPIO_DeInit+0x190>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d007      	beq.n	8005be0 <HAL_GPIO_DeInit+0x68>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a4e      	ldr	r2, [pc, #312]	; (8005d0c <HAL_GPIO_DeInit+0x194>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d101      	bne.n	8005bdc <HAL_GPIO_DeInit+0x64>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e004      	b.n	8005be6 <HAL_GPIO_DeInit+0x6e>
 8005bdc:	2307      	movs	r3, #7
 8005bde:	e002      	b.n	8005be6 <HAL_GPIO_DeInit+0x6e>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <HAL_GPIO_DeInit+0x6e>
 8005be4:	2300      	movs	r3, #0
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	f002 0203 	and.w	r2, r2, #3
 8005bec:	0092      	lsls	r2, r2, #2
 8005bee:	4093      	lsls	r3, r2
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d136      	bne.n	8005c64 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005bf6:	4b46      	ldr	r3, [pc, #280]	; (8005d10 <HAL_GPIO_DeInit+0x198>)
 8005bf8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	4943      	ldr	r1, [pc, #268]	; (8005d10 <HAL_GPIO_DeInit+0x198>)
 8005c02:	4013      	ands	r3, r2
 8005c04:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005c08:	4b41      	ldr	r3, [pc, #260]	; (8005d10 <HAL_GPIO_DeInit+0x198>)
 8005c0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	43db      	mvns	r3, r3
 8005c12:	493f      	ldr	r1, [pc, #252]	; (8005d10 <HAL_GPIO_DeInit+0x198>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005c1a:	4b3d      	ldr	r3, [pc, #244]	; (8005d10 <HAL_GPIO_DeInit+0x198>)
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	43db      	mvns	r3, r3
 8005c22:	493b      	ldr	r1, [pc, #236]	; (8005d10 <HAL_GPIO_DeInit+0x198>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005c28:	4b39      	ldr	r3, [pc, #228]	; (8005d10 <HAL_GPIO_DeInit+0x198>)
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	4937      	ldr	r1, [pc, #220]	; (8005d10 <HAL_GPIO_DeInit+0x198>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f003 0303 	and.w	r3, r3, #3
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	2207      	movs	r2, #7
 8005c40:	fa02 f303 	lsl.w	r3, r2, r3
 8005c44:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005c46:	4a2f      	ldr	r2, [pc, #188]	; (8005d04 <HAL_GPIO_DeInit+0x18c>)
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	089b      	lsrs	r3, r3, #2
 8005c4c:	3302      	adds	r3, #2
 8005c4e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	43da      	mvns	r2, r3
 8005c56:	482b      	ldr	r0, [pc, #172]	; (8005d04 <HAL_GPIO_DeInit+0x18c>)
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	089b      	lsrs	r3, r3, #2
 8005c5c:	400a      	ands	r2, r1
 8005c5e:	3302      	adds	r3, #2
 8005c60:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	2103      	movs	r1, #3
 8005c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	08da      	lsrs	r2, r3, #3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	3208      	adds	r2, #8
 8005c80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	220f      	movs	r2, #15
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	43db      	mvns	r3, r3
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	08d2      	lsrs	r2, r2, #3
 8005c98:	4019      	ands	r1, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3208      	adds	r2, #8
 8005c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	2103      	movs	r1, #3
 8005cac:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	401a      	ands	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	401a      	ands	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	2103      	movs	r1, #3
 8005cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cda:	43db      	mvns	r3, r3
 8005cdc:	401a      	ands	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f47f af49 	bne.w	8005b88 <HAL_GPIO_DeInit+0x10>
  }
}
 8005cf6:	bf00      	nop
 8005cf8:	bf00      	nop
 8005cfa:	371c      	adds	r7, #28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bc80      	pop	{r7}
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	40010000 	.word	0x40010000
 8005d08:	48000400 	.word	0x48000400
 8005d0c:	48000800 	.word	0x48000800
 8005d10:	58000800 	.word	0x58000800

08005d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	807b      	strh	r3, [r7, #2]
 8005d20:	4613      	mov	r3, r2
 8005d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d24:	787b      	ldrb	r3, [r7, #1]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d2a:	887a      	ldrh	r2, [r7, #2]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d30:	e002      	b.n	8005d38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d32:	887a      	ldrh	r2, [r7, #2]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr

08005d42 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d54:	887a      	ldrh	r2, [r7, #2]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	041a      	lsls	r2, r3, #16
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	43d9      	mvns	r1, r3
 8005d60:	887b      	ldrh	r3, [r7, #2]
 8005d62:	400b      	ands	r3, r1
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	619a      	str	r2, [r3, #24]
}
 8005d6a:	bf00      	nop
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bc80      	pop	{r7}
 8005d72:	4770      	bx	lr

08005d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e081      	b.n	8005e8a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d106      	bne.n	8005da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fb fe12 	bl	80019c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2224      	movs	r2, #36	; 0x24
 8005da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0201 	bic.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005dc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d107      	bne.n	8005dee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dea:	609a      	str	r2, [r3, #8]
 8005dec:	e006      	b.n	8005dfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005dfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d104      	bne.n	8005e0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6812      	ldr	r2, [r2, #0]
 8005e18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68da      	ldr	r2, [r3, #12]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691a      	ldr	r2, [r3, #16]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	69d9      	ldr	r1, [r3, #28]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1a      	ldr	r2, [r3, #32]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af02      	add	r7, sp, #8
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	607a      	str	r2, [r7, #4]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	817b      	strh	r3, [r7, #10]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	f040 80da 	bne.w	800606a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_I2C_Master_Transmit+0x30>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e0d3      	b.n	800606c <HAL_I2C_Master_Transmit+0x1d8>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ecc:	f7fc fc92 	bl	80027f4 <HAL_GetTick>
 8005ed0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	2319      	movs	r3, #25
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 fb53 	bl	800658a <I2C_WaitOnFlagUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e0be      	b.n	800606c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2221      	movs	r2, #33	; 0x21
 8005ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2210      	movs	r2, #16
 8005efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	893a      	ldrh	r2, [r7, #8]
 8005f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	2bff      	cmp	r3, #255	; 0xff
 8005f1e:	d90e      	bls.n	8005f3e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	22ff      	movs	r2, #255	; 0xff
 8005f24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	8979      	ldrh	r1, [r7, #10]
 8005f2e:	4b51      	ldr	r3, [pc, #324]	; (8006074 <HAL_I2C_Master_Transmit+0x1e0>)
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fd3e 	bl	80069b8 <I2C_TransferConfig>
 8005f3c:	e06c      	b.n	8006018 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	8979      	ldrh	r1, [r7, #10]
 8005f50:	4b48      	ldr	r3, [pc, #288]	; (8006074 <HAL_I2C_Master_Transmit+0x1e0>)
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 fd2d 	bl	80069b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005f5e:	e05b      	b.n	8006018 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	6a39      	ldr	r1, [r7, #32]
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 fb50 	bl	800660a <I2C_WaitOnTXISFlagUntilTimeout>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e07b      	b.n	800606c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	781a      	ldrb	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d034      	beq.n	8006018 <HAL_I2C_Master_Transmit+0x184>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d130      	bne.n	8006018 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2180      	movs	r1, #128	; 0x80
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 fae2 	bl	800658a <I2C_WaitOnFlagUntilTimeout>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e04d      	b.n	800606c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	2bff      	cmp	r3, #255	; 0xff
 8005fd8:	d90e      	bls.n	8005ff8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	22ff      	movs	r2, #255	; 0xff
 8005fde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	8979      	ldrh	r1, [r7, #10]
 8005fe8:	2300      	movs	r3, #0
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 fce1 	bl	80069b8 <I2C_TransferConfig>
 8005ff6:	e00f      	b.n	8006018 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006006:	b2da      	uxtb	r2, r3
 8006008:	8979      	ldrh	r1, [r7, #10]
 800600a:	2300      	movs	r3, #0
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 fcd0 	bl	80069b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d19e      	bne.n	8005f60 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	6a39      	ldr	r1, [r7, #32]
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 fb2f 	bl	800668a <I2C_WaitOnSTOPFlagUntilTimeout>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e01a      	b.n	800606c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2220      	movs	r2, #32
 800603c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6859      	ldr	r1, [r3, #4]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <HAL_I2C_Master_Transmit+0x1e4>)
 800604a:	400b      	ands	r3, r1
 800604c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2220      	movs	r2, #32
 8006052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	e000      	b.n	800606c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800606a:	2302      	movs	r3, #2
  }
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	80002000 	.word	0x80002000
 8006078:	fe00e800 	.word	0xfe00e800

0800607c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af02      	add	r7, sp, #8
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	607a      	str	r2, [r7, #4]
 8006086:	461a      	mov	r2, r3
 8006088:	460b      	mov	r3, r1
 800608a:	817b      	strh	r3, [r7, #10]
 800608c:	4613      	mov	r3, r2
 800608e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b20      	cmp	r3, #32
 800609a:	f040 80db 	bne.w	8006254 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_I2C_Master_Receive+0x30>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e0d4      	b.n	8006256 <HAL_I2C_Master_Receive+0x1da>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060b4:	f7fc fb9e 	bl	80027f4 <HAL_GetTick>
 80060b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	2319      	movs	r3, #25
 80060c0:	2201      	movs	r2, #1
 80060c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 fa5f 	bl	800658a <I2C_WaitOnFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e0bf      	b.n	8006256 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2222      	movs	r2, #34	; 0x22
 80060da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2210      	movs	r2, #16
 80060e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	893a      	ldrh	r2, [r7, #8]
 80060f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006102:	b29b      	uxth	r3, r3
 8006104:	2bff      	cmp	r3, #255	; 0xff
 8006106:	d90e      	bls.n	8006126 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	22ff      	movs	r2, #255	; 0xff
 800610c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006112:	b2da      	uxtb	r2, r3
 8006114:	8979      	ldrh	r1, [r7, #10]
 8006116:	4b52      	ldr	r3, [pc, #328]	; (8006260 <HAL_I2C_Master_Receive+0x1e4>)
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 fc4a 	bl	80069b8 <I2C_TransferConfig>
 8006124:	e06d      	b.n	8006202 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006134:	b2da      	uxtb	r2, r3
 8006136:	8979      	ldrh	r1, [r7, #10]
 8006138:	4b49      	ldr	r3, [pc, #292]	; (8006260 <HAL_I2C_Master_Receive+0x1e4>)
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 fc39 	bl	80069b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006146:	e05c      	b.n	8006202 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	6a39      	ldr	r1, [r7, #32]
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 fad9 	bl	8006704 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e07c      	b.n	8006256 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006178:	3b01      	subs	r3, #1
 800617a:	b29a      	uxth	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006192:	b29b      	uxth	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d034      	beq.n	8006202 <HAL_I2C_Master_Receive+0x186>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619c:	2b00      	cmp	r3, #0
 800619e:	d130      	bne.n	8006202 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	2200      	movs	r2, #0
 80061a8:	2180      	movs	r1, #128	; 0x80
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 f9ed 	bl	800658a <I2C_WaitOnFlagUntilTimeout>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e04d      	b.n	8006256 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061be:	b29b      	uxth	r3, r3
 80061c0:	2bff      	cmp	r3, #255	; 0xff
 80061c2:	d90e      	bls.n	80061e2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	22ff      	movs	r2, #255	; 0xff
 80061c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	8979      	ldrh	r1, [r7, #10]
 80061d2:	2300      	movs	r3, #0
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 fbec 	bl	80069b8 <I2C_TransferConfig>
 80061e0:	e00f      	b.n	8006202 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	8979      	ldrh	r1, [r7, #10]
 80061f4:	2300      	movs	r3, #0
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 fbdb 	bl	80069b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006206:	b29b      	uxth	r3, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	d19d      	bne.n	8006148 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	6a39      	ldr	r1, [r7, #32]
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 fa3a 	bl	800668a <I2C_WaitOnSTOPFlagUntilTimeout>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e01a      	b.n	8006256 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2220      	movs	r2, #32
 8006226:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6859      	ldr	r1, [r3, #4]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4b0c      	ldr	r3, [pc, #48]	; (8006264 <HAL_I2C_Master_Receive+0x1e8>)
 8006234:	400b      	ands	r3, r1
 8006236:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	e000      	b.n	8006256 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006254:	2302      	movs	r3, #2
  }
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	80002400 	.word	0x80002400
 8006264:	fe00e800 	.word	0xfe00e800

08006268 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b088      	sub	sp, #32
 800626c:	af02      	add	r7, sp, #8
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	4608      	mov	r0, r1
 8006272:	4611      	mov	r1, r2
 8006274:	461a      	mov	r2, r3
 8006276:	4603      	mov	r3, r0
 8006278:	817b      	strh	r3, [r7, #10]
 800627a:	460b      	mov	r3, r1
 800627c:	813b      	strh	r3, [r7, #8]
 800627e:	4613      	mov	r3, r2
 8006280:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b20      	cmp	r3, #32
 800628c:	f040 80fd 	bne.w	800648a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <HAL_I2C_Mem_Read+0x34>
 8006296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006298:	2b00      	cmp	r3, #0
 800629a:	d105      	bne.n	80062a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e0f1      	b.n	800648c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <HAL_I2C_Mem_Read+0x4e>
 80062b2:	2302      	movs	r3, #2
 80062b4:	e0ea      	b.n	800648c <HAL_I2C_Mem_Read+0x224>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062be:	f7fc fa99 	bl	80027f4 <HAL_GetTick>
 80062c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	2319      	movs	r3, #25
 80062ca:	2201      	movs	r2, #1
 80062cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 f95a 	bl	800658a <I2C_WaitOnFlagUntilTimeout>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e0d5      	b.n	800648c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2222      	movs	r2, #34	; 0x22
 80062e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2240      	movs	r2, #64	; 0x40
 80062ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6a3a      	ldr	r2, [r7, #32]
 80062fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006300:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006308:	88f8      	ldrh	r0, [r7, #6]
 800630a:	893a      	ldrh	r2, [r7, #8]
 800630c:	8979      	ldrh	r1, [r7, #10]
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	9301      	str	r3, [sp, #4]
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	4603      	mov	r3, r0
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 f8bf 	bl	800649c <I2C_RequestMemoryRead>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e0ad      	b.n	800648c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006334:	b29b      	uxth	r3, r3
 8006336:	2bff      	cmp	r3, #255	; 0xff
 8006338:	d90e      	bls.n	8006358 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	22ff      	movs	r2, #255	; 0xff
 800633e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006344:	b2da      	uxtb	r2, r3
 8006346:	8979      	ldrh	r1, [r7, #10]
 8006348:	4b52      	ldr	r3, [pc, #328]	; (8006494 <HAL_I2C_Mem_Read+0x22c>)
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 fb31 	bl	80069b8 <I2C_TransferConfig>
 8006356:	e00f      	b.n	8006378 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635c:	b29a      	uxth	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006366:	b2da      	uxtb	r2, r3
 8006368:	8979      	ldrh	r1, [r7, #10]
 800636a:	4b4a      	ldr	r3, [pc, #296]	; (8006494 <HAL_I2C_Mem_Read+0x22c>)
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 fb20 	bl	80069b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637e:	2200      	movs	r2, #0
 8006380:	2104      	movs	r1, #4
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f901 	bl	800658a <I2C_WaitOnFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e07c      	b.n	800648c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	b2d2      	uxtb	r2, r2
 800639e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d034      	beq.n	8006438 <HAL_I2C_Mem_Read+0x1d0>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d130      	bne.n	8006438 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	2200      	movs	r2, #0
 80063de:	2180      	movs	r1, #128	; 0x80
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f8d2 	bl	800658a <I2C_WaitOnFlagUntilTimeout>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e04d      	b.n	800648c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	2bff      	cmp	r3, #255	; 0xff
 80063f8:	d90e      	bls.n	8006418 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	22ff      	movs	r2, #255	; 0xff
 80063fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006404:	b2da      	uxtb	r2, r3
 8006406:	8979      	ldrh	r1, [r7, #10]
 8006408:	2300      	movs	r3, #0
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 fad1 	bl	80069b8 <I2C_TransferConfig>
 8006416:	e00f      	b.n	8006438 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641c:	b29a      	uxth	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006426:	b2da      	uxtb	r2, r3
 8006428:	8979      	ldrh	r1, [r7, #10]
 800642a:	2300      	movs	r3, #0
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 fac0 	bl	80069b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d19a      	bne.n	8006378 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 f91f 	bl	800668a <I2C_WaitOnSTOPFlagUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e01a      	b.n	800648c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2220      	movs	r2, #32
 800645c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6859      	ldr	r1, [r3, #4]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	4b0b      	ldr	r3, [pc, #44]	; (8006498 <HAL_I2C_Mem_Read+0x230>)
 800646a:	400b      	ands	r3, r1
 800646c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2220      	movs	r2, #32
 8006472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	e000      	b.n	800648c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800648a:	2302      	movs	r3, #2
  }
}
 800648c:	4618      	mov	r0, r3
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	80002400 	.word	0x80002400
 8006498:	fe00e800 	.word	0xfe00e800

0800649c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af02      	add	r7, sp, #8
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	4608      	mov	r0, r1
 80064a6:	4611      	mov	r1, r2
 80064a8:	461a      	mov	r2, r3
 80064aa:	4603      	mov	r3, r0
 80064ac:	817b      	strh	r3, [r7, #10]
 80064ae:	460b      	mov	r3, r1
 80064b0:	813b      	strh	r3, [r7, #8]
 80064b2:	4613      	mov	r3, r2
 80064b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80064b6:	88fb      	ldrh	r3, [r7, #6]
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	8979      	ldrh	r1, [r7, #10]
 80064bc:	4b20      	ldr	r3, [pc, #128]	; (8006540 <I2C_RequestMemoryRead+0xa4>)
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	2300      	movs	r3, #0
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 fa78 	bl	80069b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	69b9      	ldr	r1, [r7, #24]
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f89c 	bl	800660a <I2C_WaitOnTXISFlagUntilTimeout>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e02c      	b.n	8006536 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064dc:	88fb      	ldrh	r3, [r7, #6]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d105      	bne.n	80064ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064e2:	893b      	ldrh	r3, [r7, #8]
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	629a      	str	r2, [r3, #40]	; 0x28
 80064ec:	e015      	b.n	800651a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80064ee:	893b      	ldrh	r3, [r7, #8]
 80064f0:	0a1b      	lsrs	r3, r3, #8
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064fc:	69fa      	ldr	r2, [r7, #28]
 80064fe:	69b9      	ldr	r1, [r7, #24]
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 f882 	bl	800660a <I2C_WaitOnTXISFlagUntilTimeout>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e012      	b.n	8006536 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006510:	893b      	ldrh	r3, [r7, #8]
 8006512:	b2da      	uxtb	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	2200      	movs	r2, #0
 8006522:	2140      	movs	r1, #64	; 0x40
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 f830 	bl	800658a <I2C_WaitOnFlagUntilTimeout>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e000      	b.n	8006536 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	80002000 	.word	0x80002000

08006544 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b02      	cmp	r3, #2
 8006558:	d103      	bne.n	8006562 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2200      	movs	r2, #0
 8006560:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b01      	cmp	r3, #1
 800656e:	d007      	beq.n	8006580 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0201 	orr.w	r2, r2, #1
 800657e:	619a      	str	r2, [r3, #24]
  }
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	bc80      	pop	{r7}
 8006588:	4770      	bx	lr

0800658a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	603b      	str	r3, [r7, #0]
 8006596:	4613      	mov	r3, r2
 8006598:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800659a:	e022      	b.n	80065e2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a2:	d01e      	beq.n	80065e2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a4:	f7fc f926 	bl	80027f4 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d302      	bcc.n	80065ba <I2C_WaitOnFlagUntilTimeout+0x30>
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d113      	bne.n	80065e2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065be:	f043 0220 	orr.w	r2, r3, #32
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e00f      	b.n	8006602 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	699a      	ldr	r2, [r3, #24]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	4013      	ands	r3, r2
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	bf0c      	ite	eq
 80065f2:	2301      	moveq	r3, #1
 80065f4:	2300      	movne	r3, #0
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	79fb      	ldrb	r3, [r7, #7]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d0cd      	beq.n	800659c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b084      	sub	sp, #16
 800660e:	af00      	add	r7, sp, #0
 8006610:	60f8      	str	r0, [r7, #12]
 8006612:	60b9      	str	r1, [r7, #8]
 8006614:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006616:	e02c      	b.n	8006672 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	68b9      	ldr	r1, [r7, #8]
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 f8eb 	bl	80067f8 <I2C_IsErrorOccurred>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e02a      	b.n	8006682 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006632:	d01e      	beq.n	8006672 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006634:	f7fc f8de 	bl	80027f4 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	429a      	cmp	r2, r3
 8006642:	d302      	bcc.n	800664a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d113      	bne.n	8006672 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664e:	f043 0220 	orr.w	r2, r3, #32
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2220      	movs	r2, #32
 800665a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e007      	b.n	8006682 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b02      	cmp	r3, #2
 800667e:	d1cb      	bne.n	8006618 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b084      	sub	sp, #16
 800668e:	af00      	add	r7, sp, #0
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006696:	e028      	b.n	80066ea <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	68b9      	ldr	r1, [r7, #8]
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f8ab 	bl	80067f8 <I2C_IsErrorOccurred>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e026      	b.n	80066fa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ac:	f7fc f8a2 	bl	80027f4 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d302      	bcc.n	80066c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d113      	bne.n	80066ea <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c6:	f043 0220 	orr.w	r2, r3, #32
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e007      	b.n	80066fa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	f003 0320 	and.w	r3, r3, #32
 80066f4:	2b20      	cmp	r3, #32
 80066f6:	d1cf      	bne.n	8006698 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006710:	e064      	b.n	80067dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	68b9      	ldr	r1, [r7, #8]
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 f86e 	bl	80067f8 <I2C_IsErrorOccurred>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e062      	b.n	80067ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	f003 0320 	and.w	r3, r3, #32
 8006730:	2b20      	cmp	r3, #32
 8006732:	d138      	bne.n	80067a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b04      	cmp	r3, #4
 8006740:	d105      	bne.n	800674e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	e04e      	b.n	80067ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	f003 0310 	and.w	r3, r3, #16
 8006758:	2b10      	cmp	r3, #16
 800675a:	d107      	bne.n	800676c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2210      	movs	r2, #16
 8006762:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2204      	movs	r2, #4
 8006768:	645a      	str	r2, [r3, #68]	; 0x44
 800676a:	e002      	b.n	8006772 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2220      	movs	r2, #32
 8006778:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6859      	ldr	r1, [r3, #4]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006786:	400b      	ands	r3, r1
 8006788:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2220      	movs	r2, #32
 800678e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e022      	b.n	80067ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a6:	f7fc f825 	bl	80027f4 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d302      	bcc.n	80067bc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10f      	bne.n	80067dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c0:	f043 0220 	orr.w	r2, r3, #32
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2220      	movs	r2, #32
 80067cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e007      	b.n	80067ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	f003 0304 	and.w	r3, r3, #4
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d193      	bne.n	8006712 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	fe00e800 	.word	0xfe00e800

080067f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08a      	sub	sp, #40	; 0x28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006804:	2300      	movs	r3, #0
 8006806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006812:	2300      	movs	r3, #0
 8006814:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	f003 0310 	and.w	r3, r3, #16
 8006820:	2b00      	cmp	r3, #0
 8006822:	d068      	beq.n	80068f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2210      	movs	r2, #16
 800682a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800682c:	e049      	b.n	80068c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006834:	d045      	beq.n	80068c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006836:	f7fb ffdd 	bl	80027f4 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	429a      	cmp	r2, r3
 8006844:	d302      	bcc.n	800684c <I2C_IsErrorOccurred+0x54>
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d13a      	bne.n	80068c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006856:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800685e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800686a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800686e:	d121      	bne.n	80068b4 <I2C_IsErrorOccurred+0xbc>
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006876:	d01d      	beq.n	80068b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006878:	7cfb      	ldrb	r3, [r7, #19]
 800687a:	2b20      	cmp	r3, #32
 800687c:	d01a      	beq.n	80068b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800688c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800688e:	f7fb ffb1 	bl	80027f4 <HAL_GetTick>
 8006892:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006894:	e00e      	b.n	80068b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006896:	f7fb ffad 	bl	80027f4 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b19      	cmp	r3, #25
 80068a2:	d907      	bls.n	80068b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	f043 0320 	orr.w	r3, r3, #32
 80068aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80068b2:	e006      	b.n	80068c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b20      	cmp	r3, #32
 80068c0:	d1e9      	bne.n	8006896 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	f003 0320 	and.w	r3, r3, #32
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	d003      	beq.n	80068d8 <I2C_IsErrorOccurred+0xe0>
 80068d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d0aa      	beq.n	800682e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80068d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d103      	bne.n	80068e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2220      	movs	r2, #32
 80068e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	f043 0304 	orr.w	r3, r3, #4
 80068ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00b      	beq.n	8006920 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	f043 0301 	orr.w	r3, r3, #1
 800690e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006918:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00b      	beq.n	8006942 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	f043 0308 	orr.w	r3, r3, #8
 8006930:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800693a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00b      	beq.n	8006964 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	f043 0302 	orr.w	r3, r3, #2
 8006952:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800695c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006968:	2b00      	cmp	r3, #0
 800696a:	d01c      	beq.n	80069a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f7ff fde9 	bl	8006544 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6859      	ldr	r1, [r3, #4]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	4b0d      	ldr	r3, [pc, #52]	; (80069b4 <I2C_IsErrorOccurred+0x1bc>)
 800697e:	400b      	ands	r3, r1
 8006980:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	431a      	orrs	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2220      	movs	r2, #32
 8006992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80069a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3728      	adds	r7, #40	; 0x28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	fe00e800 	.word	0xfe00e800

080069b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	607b      	str	r3, [r7, #4]
 80069c2:	460b      	mov	r3, r1
 80069c4:	817b      	strh	r3, [r7, #10]
 80069c6:	4613      	mov	r3, r2
 80069c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069ca:	897b      	ldrh	r3, [r7, #10]
 80069cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80069d0:	7a7b      	ldrb	r3, [r7, #9]
 80069d2:	041b      	lsls	r3, r3, #16
 80069d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	0d5b      	lsrs	r3, r3, #21
 80069f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80069f6:	4b07      	ldr	r3, [pc, #28]	; (8006a14 <I2C_TransferConfig+0x5c>)
 80069f8:	430b      	orrs	r3, r1
 80069fa:	43db      	mvns	r3, r3
 80069fc:	ea02 0103 	and.w	r1, r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a0a:	bf00      	nop
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr
 8006a14:	03ff63ff 	.word	0x03ff63ff

08006a18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b20      	cmp	r3, #32
 8006a2c:	d138      	bne.n	8006aa0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e032      	b.n	8006aa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2224      	movs	r2, #36	; 0x24
 8006a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0201 	bic.w	r2, r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6819      	ldr	r1, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	e000      	b.n	8006aa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006aa0:	2302      	movs	r3, #2
  }
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr

08006aac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	d139      	bne.n	8006b36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d101      	bne.n	8006ad0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e033      	b.n	8006b38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2224      	movs	r2, #36	; 0x24
 8006adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0201 	bic.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006afe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	021b      	lsls	r3, r3, #8
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f042 0201 	orr.w	r2, r2, #1
 8006b20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e000      	b.n	8006b38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b36:	2302      	movs	r3, #2
  }
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr
	...

08006b44 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b48:	4b04      	ldr	r3, [pc, #16]	; (8006b5c <HAL_PWR_EnableBkUpAccess+0x18>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a03      	ldr	r2, [pc, #12]	; (8006b5c <HAL_PWR_EnableBkUpAccess+0x18>)
 8006b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b52:	6013      	str	r3, [r2, #0]
}
 8006b54:	bf00      	nop
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr
 8006b5c:	58000400 	.word	0x58000400

08006b60 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10c      	bne.n	8006b8c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006b72:	4b13      	ldr	r3, [pc, #76]	; (8006bc0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b7e:	d10d      	bne.n	8006b9c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006b80:	f000 f83c 	bl	8006bfc <HAL_PWREx_DisableLowPowerRunMode>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d008      	beq.n	8006b9c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8006b8a:	e015      	b.n	8006bb8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8006b8c:	4b0c      	ldr	r3, [pc, #48]	; (8006bc0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8006b98:	f000 f822 	bl	8006be0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006b9c:	4b09      	ldr	r3, [pc, #36]	; (8006bc4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	4a08      	ldr	r2, [pc, #32]	; (8006bc4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006ba2:	f023 0304 	bic.w	r3, r3, #4
 8006ba6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006ba8:	78fb      	ldrb	r3, [r7, #3]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d101      	bne.n	8006bb2 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006bae:	bf30      	wfi
 8006bb0:	e002      	b.n	8006bb8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006bb2:	bf40      	sev
    __WFE();
 8006bb4:	bf20      	wfe
    __WFE();
 8006bb6:	bf20      	wfe
  }
}
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	58000400 	.word	0x58000400
 8006bc4:	e000ed00 	.word	0xe000ed00

08006bc8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006bcc:	4b03      	ldr	r3, [pc, #12]	; (8006bdc <HAL_PWREx_GetVoltageRange+0x14>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bc80      	pop	{r7}
 8006bda:	4770      	bx	lr
 8006bdc:	58000400 	.word	0x58000400

08006be0 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006be4:	4b04      	ldr	r3, [pc, #16]	; (8006bf8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a03      	ldr	r2, [pc, #12]	; (8006bf8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bee:	6013      	str	r3, [r2, #0]
}
 8006bf0:	bf00      	nop
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bc80      	pop	{r7}
 8006bf6:	4770      	bx	lr
 8006bf8:	58000400 	.word	0x58000400

08006bfc <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8006c02:	4b16      	ldr	r3, [pc, #88]	; (8006c5c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a15      	ldr	r2, [pc, #84]	; (8006c5c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006c08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c0c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8006c0e:	4b14      	ldr	r3, [pc, #80]	; (8006c60 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2232      	movs	r2, #50	; 0x32
 8006c14:	fb02 f303 	mul.w	r3, r2, r3
 8006c18:	4a12      	ldr	r2, [pc, #72]	; (8006c64 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8006c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1e:	0c9b      	lsrs	r3, r3, #18
 8006c20:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006c22:	e002      	b.n	8006c2a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006c2a:	4b0c      	ldr	r3, [pc, #48]	; (8006c5c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c36:	d102      	bne.n	8006c3e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1f2      	bne.n	8006c24 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006c3e:	4b07      	ldr	r3, [pc, #28]	; (8006c5c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c4a:	d101      	bne.n	8006c50 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e000      	b.n	8006c52 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr
 8006c5c:	58000400 	.word	0x58000400
 8006c60:	20000004 	.word	0x20000004
 8006c64:	431bde83 	.word	0x431bde83

08006c68 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8006c72:	4b10      	ldr	r3, [pc, #64]	; (8006cb4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f023 0307 	bic.w	r3, r3, #7
 8006c7a:	4a0e      	ldr	r2, [pc, #56]	; (8006cb4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006c7c:	f043 0302 	orr.w	r3, r3, #2
 8006c80:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006c82:	4b0d      	ldr	r3, [pc, #52]	; (8006cb8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	4a0c      	ldr	r2, [pc, #48]	; (8006cb8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006c88:	f043 0304 	orr.w	r3, r3, #4
 8006c8c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d101      	bne.n	8006c98 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006c94:	bf30      	wfi
 8006c96:	e002      	b.n	8006c9e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006c98:	bf40      	sev
    __WFE();
 8006c9a:	bf20      	wfe
    __WFE();
 8006c9c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006c9e:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	4a05      	ldr	r2, [pc, #20]	; (8006cb8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006ca4:	f023 0304 	bic.w	r3, r3, #4
 8006ca8:	6113      	str	r3, [r2, #16]
}
 8006caa:	bf00      	nop
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr
 8006cb4:	58000400 	.word	0x58000400
 8006cb8:	e000ed00 	.word	0xe000ed00

08006cbc <LL_PWR_IsEnabledBkUpAccess>:
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006cc0:	4b06      	ldr	r3, [pc, #24]	; (8006cdc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ccc:	d101      	bne.n	8006cd2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bc80      	pop	{r7}
 8006cda:	4770      	bx	lr
 8006cdc:	58000400 	.word	0x58000400

08006ce0 <LL_RCC_HSE_EnableTcxo>:
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cf2:	6013      	str	r3, [r2, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bc80      	pop	{r7}
 8006cfa:	4770      	bx	lr

08006cfc <LL_RCC_HSE_DisableTcxo>:
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d0e:	6013      	str	r3, [r2, #0]
}
 8006d10:	bf00      	nop
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bc80      	pop	{r7}
 8006d16:	4770      	bx	lr

08006d18 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006d18:	b480      	push	{r7}
 8006d1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d2a:	d101      	bne.n	8006d30 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e000      	b.n	8006d32 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bc80      	pop	{r7}
 8006d38:	4770      	bx	lr

08006d3a <LL_RCC_HSE_Enable>:
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d4c:	6013      	str	r3, [r2, #0]
}
 8006d4e:	bf00      	nop
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bc80      	pop	{r7}
 8006d54:	4770      	bx	lr

08006d56 <LL_RCC_HSE_Disable>:
{
 8006d56:	b480      	push	{r7}
 8006d58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d68:	6013      	str	r3, [r2, #0]
}
 8006d6a:	bf00      	nop
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bc80      	pop	{r7}
 8006d70:	4770      	bx	lr

08006d72 <LL_RCC_HSE_IsReady>:
{
 8006d72:	b480      	push	{r7}
 8006d74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d84:	d101      	bne.n	8006d8a <LL_RCC_HSE_IsReady+0x18>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <LL_RCC_HSE_IsReady+0x1a>
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bc80      	pop	{r7}
 8006d92:	4770      	bx	lr

08006d94 <LL_RCC_HSI_Enable>:
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006da6:	6013      	str	r3, [r2, #0]
}
 8006da8:	bf00      	nop
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bc80      	pop	{r7}
 8006dae:	4770      	bx	lr

08006db0 <LL_RCC_HSI_Disable>:
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dc2:	6013      	str	r3, [r2, #0]
}
 8006dc4:	bf00      	nop
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bc80      	pop	{r7}
 8006dca:	4770      	bx	lr

08006dcc <LL_RCC_HSI_IsReady>:
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dde:	d101      	bne.n	8006de4 <LL_RCC_HSI_IsReady+0x18>
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <LL_RCC_HSI_IsReady+0x1a>
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr

08006dee <LL_RCC_HSI_SetCalibTrimming>:
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	061b      	lsls	r3, r3, #24
 8006e04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	604b      	str	r3, [r1, #4]
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr

08006e16 <LL_RCC_LSE_IsReady>:
{
 8006e16:	b480      	push	{r7}
 8006e18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d101      	bne.n	8006e2e <LL_RCC_LSE_IsReady+0x18>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e000      	b.n	8006e30 <LL_RCC_LSE_IsReady+0x1a>
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bc80      	pop	{r7}
 8006e36:	4770      	bx	lr

08006e38 <LL_RCC_LSI_Enable>:
{
 8006e38:	b480      	push	{r7}
 8006e3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e48:	f043 0301 	orr.w	r3, r3, #1
 8006e4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006e50:	bf00      	nop
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bc80      	pop	{r7}
 8006e56:	4770      	bx	lr

08006e58 <LL_RCC_LSI_Disable>:
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e68:	f023 0301 	bic.w	r3, r3, #1
 8006e6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006e70:	bf00      	nop
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bc80      	pop	{r7}
 8006e76:	4770      	bx	lr

08006e78 <LL_RCC_LSI_IsReady>:
{
 8006e78:	b480      	push	{r7}
 8006e7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d101      	bne.n	8006e90 <LL_RCC_LSI_IsReady+0x18>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e000      	b.n	8006e92 <LL_RCC_LSI_IsReady+0x1a>
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bc80      	pop	{r7}
 8006e98:	4770      	bx	lr

08006e9a <LL_RCC_MSI_Enable>:
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ea8:	f043 0301 	orr.w	r3, r3, #1
 8006eac:	6013      	str	r3, [r2, #0]
}
 8006eae:	bf00      	nop
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bc80      	pop	{r7}
 8006eb4:	4770      	bx	lr

08006eb6 <LL_RCC_MSI_Disable>:
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ec4:	f023 0301 	bic.w	r3, r3, #1
 8006ec8:	6013      	str	r3, [r2, #0]
}
 8006eca:	bf00      	nop
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bc80      	pop	{r7}
 8006ed0:	4770      	bx	lr

08006ed2 <LL_RCC_MSI_IsReady>:
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d101      	bne.n	8006ee8 <LL_RCC_MSI_IsReady+0x16>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e000      	b.n	8006eea <LL_RCC_MSI_IsReady+0x18>
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bc80      	pop	{r7}
 8006ef0:	4770      	bx	lr

08006ef2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0308 	and.w	r3, r3, #8
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d101      	bne.n	8006f08 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006f04:	2301      	movs	r3, #1
 8006f06:	e000      	b.n	8006f0a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bc80      	pop	{r7}
 8006f10:	4770      	bx	lr

08006f12 <LL_RCC_MSI_GetRange>:
{
 8006f12:	b480      	push	{r7}
 8006f14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bc80      	pop	{r7}
 8006f26:	4770      	bx	lr

08006f28 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bc80      	pop	{r7}
 8006f3e:	4770      	bx	lr

08006f40 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	021b      	lsls	r3, r3, #8
 8006f56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	604b      	str	r3, [r1, #4]
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bc80      	pop	{r7}
 8006f66:	4770      	bx	lr

08006f68 <LL_RCC_SetSysClkSource>:
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f023 0203 	bic.w	r2, r3, #3
 8006f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	608b      	str	r3, [r1, #8]
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bc80      	pop	{r7}
 8006f8c:	4770      	bx	lr

08006f8e <LL_RCC_GetSysClkSource>:
{
 8006f8e:	b480      	push	{r7}
 8006f90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f003 030c 	and.w	r3, r3, #12
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bc80      	pop	{r7}
 8006fa2:	4770      	bx	lr

08006fa4 <LL_RCC_SetAHBPrescaler>:
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	608b      	str	r3, [r1, #8]
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr

08006fca <LL_RCC_SetAHB3Prescaler>:
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006fda:	f023 020f 	bic.w	r2, r3, #15
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	091b      	lsrs	r3, r3, #4
 8006fe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bc80      	pop	{r7}
 8006ff4:	4770      	bx	lr

08006ff6 <LL_RCC_SetAPB1Prescaler>:
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007008:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4313      	orrs	r3, r2
 8007010:	608b      	str	r3, [r1, #8]
}
 8007012:	bf00      	nop
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	bc80      	pop	{r7}
 800701a:	4770      	bx	lr

0800701c <LL_RCC_SetAPB2Prescaler>:
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800702e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4313      	orrs	r3, r2
 8007036:	608b      	str	r3, [r1, #8]
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	bc80      	pop	{r7}
 8007040:	4770      	bx	lr

08007042 <LL_RCC_GetAHBPrescaler>:
{
 8007042:	b480      	push	{r7}
 8007044:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007050:	4618      	mov	r0, r3
 8007052:	46bd      	mov	sp, r7
 8007054:	bc80      	pop	{r7}
 8007056:	4770      	bx	lr

08007058 <LL_RCC_GetAHB3Prescaler>:
{
 8007058:	b480      	push	{r7}
 800705a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800705c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007060:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007064:	011b      	lsls	r3, r3, #4
 8007066:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800706a:	4618      	mov	r0, r3
 800706c:	46bd      	mov	sp, r7
 800706e:	bc80      	pop	{r7}
 8007070:	4770      	bx	lr

08007072 <LL_RCC_GetAPB1Prescaler>:
{
 8007072:	b480      	push	{r7}
 8007074:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8007080:	4618      	mov	r0, r3
 8007082:	46bd      	mov	sp, r7
 8007084:	bc80      	pop	{r7}
 8007086:	4770      	bx	lr

08007088 <LL_RCC_GetAPB2Prescaler>:
{
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800708c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007096:	4618      	mov	r0, r3
 8007098:	46bd      	mov	sp, r7
 800709a:	bc80      	pop	{r7}
 800709c:	4770      	bx	lr

0800709e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800709e:	b480      	push	{r7}
 80070a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80070a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070b0:	6013      	str	r3, [r2, #0]
}
 80070b2:	bf00      	nop
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bc80      	pop	{r7}
 80070b8:	4770      	bx	lr

080070ba <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80070ba:	b480      	push	{r7}
 80070bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80070be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070cc:	6013      	str	r3, [r2, #0]
}
 80070ce:	bf00      	nop
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bc80      	pop	{r7}
 80070d4:	4770      	bx	lr

080070d6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80070d6:	b480      	push	{r7}
 80070d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80070da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070e8:	d101      	bne.n	80070ee <LL_RCC_PLL_IsReady+0x18>
 80070ea:	2301      	movs	r3, #1
 80070ec:	e000      	b.n	80070f0 <LL_RCC_PLL_IsReady+0x1a>
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bc80      	pop	{r7}
 80070f6:	4770      	bx	lr

080070f8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80070fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	0a1b      	lsrs	r3, r3, #8
 8007104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007108:	4618      	mov	r0, r3
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr

08007110 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007110:	b480      	push	{r7}
 8007112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800711e:	4618      	mov	r0, r3
 8007120:	46bd      	mov	sp, r7
 8007122:	bc80      	pop	{r7}
 8007124:	4770      	bx	lr

08007126 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007126:	b480      	push	{r7}
 8007128:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800712a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007134:	4618      	mov	r0, r3
 8007136:	46bd      	mov	sp, r7
 8007138:	bc80      	pop	{r7}
 800713a:	4770      	bx	lr

0800713c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800713c:	b480      	push	{r7}
 800713e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	f003 0303 	and.w	r3, r3, #3
}
 800714a:	4618      	mov	r0, r3
 800714c:	46bd      	mov	sp, r7
 800714e:	bc80      	pop	{r7}
 8007150:	4770      	bx	lr

08007152 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8007152:	b480      	push	{r7}
 8007154:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007164:	d101      	bne.n	800716a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007166:	2301      	movs	r3, #1
 8007168:	e000      	b.n	800716c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	46bd      	mov	sp, r7
 8007170:	bc80      	pop	{r7}
 8007172:	4770      	bx	lr

08007174 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800717c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007188:	d101      	bne.n	800718e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	46bd      	mov	sp, r7
 8007194:	bc80      	pop	{r7}
 8007196:	4770      	bx	lr

08007198 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800719c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071aa:	d101      	bne.n	80071b0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80071ac:	2301      	movs	r3, #1
 80071ae:	e000      	b.n	80071b2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bc80      	pop	{r7}
 80071b8:	4770      	bx	lr

080071ba <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80071ba:	b480      	push	{r7}
 80071bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80071be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071cc:	d101      	bne.n	80071d2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80071ce:	2301      	movs	r3, #1
 80071d0:	e000      	b.n	80071d4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bc80      	pop	{r7}
 80071da:	4770      	bx	lr

080071dc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e36f      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071ee:	f7ff fece 	bl	8006f8e <LL_RCC_GetSysClkSource>
 80071f2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071f4:	f7ff ffa2 	bl	800713c <LL_RCC_PLL_GetMainSource>
 80071f8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 80c4 	beq.w	8007390 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d005      	beq.n	800721a <HAL_RCC_OscConfig+0x3e>
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	2b0c      	cmp	r3, #12
 8007212:	d176      	bne.n	8007302 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d173      	bne.n	8007302 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e353      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800722a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0308 	and.w	r3, r3, #8
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <HAL_RCC_OscConfig+0x68>
 8007238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007242:	e006      	b.n	8007252 <HAL_RCC_OscConfig+0x76>
 8007244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800724c:	091b      	lsrs	r3, r3, #4
 800724e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007252:	4293      	cmp	r3, r2
 8007254:	d222      	bcs.n	800729c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725a:	4618      	mov	r0, r3
 800725c:	f000 fd3c 	bl	8007cd8 <RCC_SetFlashLatencyFromMSIRange>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e331      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800726a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007274:	f043 0308 	orr.w	r3, r3, #8
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007288:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800728c:	4313      	orrs	r3, r2
 800728e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	4618      	mov	r0, r3
 8007296:	f7ff fe53 	bl	8006f40 <LL_RCC_MSI_SetCalibTrimming>
 800729a:	e021      	b.n	80072e0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800729c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072a6:	f043 0308 	orr.w	r3, r3, #8
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072be:	4313      	orrs	r3, r2
 80072c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff fe3a 	bl	8006f40 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fd01 	bl	8007cd8 <RCC_SetFlashLatencyFromMSIRange>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e2f6      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80072e0:	f000 fcc2 	bl	8007c68 <HAL_RCC_GetHCLKFreq>
 80072e4:	4603      	mov	r3, r0
 80072e6:	4aa7      	ldr	r2, [pc, #668]	; (8007584 <HAL_RCC_OscConfig+0x3a8>)
 80072e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80072ea:	4ba7      	ldr	r3, [pc, #668]	; (8007588 <HAL_RCC_OscConfig+0x3ac>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fb fa76 	bl	80027e0 <HAL_InitTick>
 80072f4:	4603      	mov	r3, r0
 80072f6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80072f8:	7cfb      	ldrb	r3, [r7, #19]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d047      	beq.n	800738e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80072fe:	7cfb      	ldrb	r3, [r7, #19]
 8007300:	e2e5      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d02c      	beq.n	8007364 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800730a:	f7ff fdc6 	bl	8006e9a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800730e:	f7fb fa71 	bl	80027f4 <HAL_GetTick>
 8007312:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007314:	e008      	b.n	8007328 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007316:	f7fb fa6d 	bl	80027f4 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	2b02      	cmp	r3, #2
 8007322:	d901      	bls.n	8007328 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e2d2      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007328:	f7ff fdd3 	bl	8006ed2 <LL_RCC_MSI_IsReady>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0f1      	beq.n	8007316 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800733c:	f043 0308 	orr.w	r3, r3, #8
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007350:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007354:	4313      	orrs	r3, r2
 8007356:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff fdef 	bl	8006f40 <LL_RCC_MSI_SetCalibTrimming>
 8007362:	e015      	b.n	8007390 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007364:	f7ff fda7 	bl	8006eb6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007368:	f7fb fa44 	bl	80027f4 <HAL_GetTick>
 800736c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007370:	f7fb fa40 	bl	80027f4 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e2a5      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007382:	f7ff fda6 	bl	8006ed2 <LL_RCC_MSI_IsReady>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1f1      	bne.n	8007370 <HAL_RCC_OscConfig+0x194>
 800738c:	e000      	b.n	8007390 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800738e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	d058      	beq.n	800744e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	2b08      	cmp	r3, #8
 80073a0:	d005      	beq.n	80073ae <HAL_RCC_OscConfig+0x1d2>
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	2b0c      	cmp	r3, #12
 80073a6:	d108      	bne.n	80073ba <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d105      	bne.n	80073ba <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d14b      	bne.n	800744e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e289      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80073ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073cc:	4313      	orrs	r3, r2
 80073ce:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d8:	d102      	bne.n	80073e0 <HAL_RCC_OscConfig+0x204>
 80073da:	f7ff fcae 	bl	8006d3a <LL_RCC_HSE_Enable>
 80073de:	e00d      	b.n	80073fc <HAL_RCC_OscConfig+0x220>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80073e8:	d104      	bne.n	80073f4 <HAL_RCC_OscConfig+0x218>
 80073ea:	f7ff fc79 	bl	8006ce0 <LL_RCC_HSE_EnableTcxo>
 80073ee:	f7ff fca4 	bl	8006d3a <LL_RCC_HSE_Enable>
 80073f2:	e003      	b.n	80073fc <HAL_RCC_OscConfig+0x220>
 80073f4:	f7ff fcaf 	bl	8006d56 <LL_RCC_HSE_Disable>
 80073f8:	f7ff fc80 	bl	8006cfc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d012      	beq.n	800742a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007404:	f7fb f9f6 	bl	80027f4 <HAL_GetTick>
 8007408:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800740a:	e008      	b.n	800741e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800740c:	f7fb f9f2 	bl	80027f4 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	2b64      	cmp	r3, #100	; 0x64
 8007418:	d901      	bls.n	800741e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e257      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800741e:	f7ff fca8 	bl	8006d72 <LL_RCC_HSE_IsReady>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0f1      	beq.n	800740c <HAL_RCC_OscConfig+0x230>
 8007428:	e011      	b.n	800744e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800742a:	f7fb f9e3 	bl	80027f4 <HAL_GetTick>
 800742e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007430:	e008      	b.n	8007444 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007432:	f7fb f9df 	bl	80027f4 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b64      	cmp	r3, #100	; 0x64
 800743e:	d901      	bls.n	8007444 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e244      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007444:	f7ff fc95 	bl	8006d72 <LL_RCC_HSE_IsReady>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1f1      	bne.n	8007432 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d046      	beq.n	80074e8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	2b04      	cmp	r3, #4
 800745e:	d005      	beq.n	800746c <HAL_RCC_OscConfig+0x290>
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	2b0c      	cmp	r3, #12
 8007464:	d10e      	bne.n	8007484 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	2b02      	cmp	r3, #2
 800746a:	d10b      	bne.n	8007484 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e22a      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	4618      	mov	r0, r3
 800747e:	f7ff fcb6 	bl	8006dee <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007482:	e031      	b.n	80074e8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d019      	beq.n	80074c0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800748c:	f7ff fc82 	bl	8006d94 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007490:	f7fb f9b0 	bl	80027f4 <HAL_GetTick>
 8007494:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007496:	e008      	b.n	80074aa <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007498:	f7fb f9ac 	bl	80027f4 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d901      	bls.n	80074aa <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e211      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80074aa:	f7ff fc8f 	bl	8006dcc <LL_RCC_HSI_IsReady>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0f1      	beq.n	8007498 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff fc98 	bl	8006dee <LL_RCC_HSI_SetCalibTrimming>
 80074be:	e013      	b.n	80074e8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074c0:	f7ff fc76 	bl	8006db0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c4:	f7fb f996 	bl	80027f4 <HAL_GetTick>
 80074c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80074ca:	e008      	b.n	80074de <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074cc:	f7fb f992 	bl	80027f4 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d901      	bls.n	80074de <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e1f7      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80074de:	f7ff fc75 	bl	8006dcc <LL_RCC_HSI_IsReady>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1f1      	bne.n	80074cc <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0308 	and.w	r3, r3, #8
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d06e      	beq.n	80075d2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d056      	beq.n	80075aa <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80074fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007504:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	69da      	ldr	r2, [r3, #28]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f003 0310 	and.w	r3, r3, #16
 8007510:	429a      	cmp	r2, r3
 8007512:	d031      	beq.n	8007578 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d006      	beq.n	800752c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e1d0      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b00      	cmp	r3, #0
 8007534:	d013      	beq.n	800755e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8007536:	f7ff fc8f 	bl	8006e58 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800753a:	f7fb f95b 	bl	80027f4 <HAL_GetTick>
 800753e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8007540:	e008      	b.n	8007554 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007542:	f7fb f957 	bl	80027f4 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	2b11      	cmp	r3, #17
 800754e:	d901      	bls.n	8007554 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e1bc      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8007554:	f7ff fc90 	bl	8006e78 <LL_RCC_LSI_IsReady>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1f1      	bne.n	8007542 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800755e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007566:	f023 0210 	bic.w	r2, r3, #16
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007572:	4313      	orrs	r3, r2
 8007574:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007578:	f7ff fc5e 	bl	8006e38 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800757c:	f7fb f93a 	bl	80027f4 <HAL_GetTick>
 8007580:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8007582:	e00c      	b.n	800759e <HAL_RCC_OscConfig+0x3c2>
 8007584:	20000004 	.word	0x20000004
 8007588:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800758c:	f7fb f932 	bl	80027f4 <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	2b11      	cmp	r3, #17
 8007598:	d901      	bls.n	800759e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e197      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800759e:	f7ff fc6b 	bl	8006e78 <LL_RCC_LSI_IsReady>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d0f1      	beq.n	800758c <HAL_RCC_OscConfig+0x3b0>
 80075a8:	e013      	b.n	80075d2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075aa:	f7ff fc55 	bl	8006e58 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075ae:	f7fb f921 	bl	80027f4 <HAL_GetTick>
 80075b2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80075b4:	e008      	b.n	80075c8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075b6:	f7fb f91d 	bl	80027f4 <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b11      	cmp	r3, #17
 80075c2:	d901      	bls.n	80075c8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e182      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80075c8:	f7ff fc56 	bl	8006e78 <LL_RCC_LSI_IsReady>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1f1      	bne.n	80075b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0304 	and.w	r3, r3, #4
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f000 80d8 	beq.w	8007790 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80075e0:	f7ff fb6c 	bl	8006cbc <LL_PWR_IsEnabledBkUpAccess>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d113      	bne.n	8007612 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80075ea:	f7ff faab 	bl	8006b44 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075ee:	f7fb f901 	bl	80027f4 <HAL_GetTick>
 80075f2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80075f4:	e008      	b.n	8007608 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075f6:	f7fb f8fd 	bl	80027f4 <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b02      	cmp	r3, #2
 8007602:	d901      	bls.n	8007608 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e162      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007608:	f7ff fb58 	bl	8006cbc <LL_PWR_IsEnabledBkUpAccess>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0f1      	beq.n	80075f6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d07b      	beq.n	8007712 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	2b85      	cmp	r3, #133	; 0x85
 8007620:	d003      	beq.n	800762a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	2b05      	cmp	r3, #5
 8007628:	d109      	bne.n	800763e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800762a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800762e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007636:	f043 0304 	orr.w	r3, r3, #4
 800763a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800763e:	f7fb f8d9 	bl	80027f4 <HAL_GetTick>
 8007642:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800764c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007650:	f043 0301 	orr.w	r3, r3, #1
 8007654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007658:	e00a      	b.n	8007670 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800765a:	f7fb f8cb 	bl	80027f4 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	f241 3288 	movw	r2, #5000	; 0x1388
 8007668:	4293      	cmp	r3, r2
 800766a:	d901      	bls.n	8007670 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e12e      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007670:	f7ff fbd1 	bl	8006e16 <LL_RCC_LSE_IsReady>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0ef      	beq.n	800765a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	2b81      	cmp	r3, #129	; 0x81
 8007680:	d003      	beq.n	800768a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	2b85      	cmp	r3, #133	; 0x85
 8007688:	d121      	bne.n	80076ce <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800768a:	f7fb f8b3 	bl	80027f4 <HAL_GetTick>
 800768e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800769c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80076a4:	e00a      	b.n	80076bc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076a6:	f7fb f8a5 	bl	80027f4 <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d901      	bls.n	80076bc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e108      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80076bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d0ec      	beq.n	80076a6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80076cc:	e060      	b.n	8007790 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ce:	f7fb f891 	bl	80027f4 <HAL_GetTick>
 80076d2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80076d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80076e8:	e00a      	b.n	8007700 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076ea:	f7fb f883 	bl	80027f4 <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d901      	bls.n	8007700 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e0e6      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1ec      	bne.n	80076ea <HAL_RCC_OscConfig+0x50e>
 8007710:	e03e      	b.n	8007790 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007712:	f7fb f86f 	bl	80027f4 <HAL_GetTick>
 8007716:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800771c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007720:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800772c:	e00a      	b.n	8007744 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800772e:	f7fb f861 	bl	80027f4 <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	f241 3288 	movw	r2, #5000	; 0x1388
 800773c:	4293      	cmp	r3, r2
 800773e:	d901      	bls.n	8007744 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e0c4      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800774c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1ec      	bne.n	800772e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007754:	f7fb f84e 	bl	80027f4 <HAL_GetTick>
 8007758:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800775a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800775e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007766:	f023 0301 	bic.w	r3, r3, #1
 800776a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800776e:	e00a      	b.n	8007786 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007770:	f7fb f840 	bl	80027f4 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	f241 3288 	movw	r2, #5000	; 0x1388
 800777e:	4293      	cmp	r3, r2
 8007780:	d901      	bls.n	8007786 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e0a3      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007786:	f7ff fb46 	bl	8006e16 <LL_RCC_LSE_IsReady>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1ef      	bne.n	8007770 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 8099 	beq.w	80078cc <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	2b0c      	cmp	r3, #12
 800779e:	d06c      	beq.n	800787a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d14b      	bne.n	8007840 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077a8:	f7ff fc87 	bl	80070ba <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077ac:	f7fb f822 	bl	80027f4 <HAL_GetTick>
 80077b0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80077b2:	e008      	b.n	80077c6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077b4:	f7fb f81e 	bl	80027f4 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b0a      	cmp	r3, #10
 80077c0:	d901      	bls.n	80077c6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e083      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80077c6:	f7ff fc86 	bl	80070d6 <LL_RCC_PLL_IsReady>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1f1      	bne.n	80077b4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80077d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	4b40      	ldr	r3, [pc, #256]	; (80078d8 <HAL_RCC_OscConfig+0x6fc>)
 80077d8:	4013      	ands	r3, r2
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80077e2:	4311      	orrs	r1, r2
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077e8:	0212      	lsls	r2, r2, #8
 80077ea:	4311      	orrs	r1, r2
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80077f0:	4311      	orrs	r1, r2
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80077f6:	4311      	orrs	r1, r2
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80077fc:	430a      	orrs	r2, r1
 80077fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007802:	4313      	orrs	r3, r2
 8007804:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007806:	f7ff fc4a 	bl	800709e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800780a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007818:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800781a:	f7fa ffeb 	bl	80027f4 <HAL_GetTick>
 800781e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8007820:	e008      	b.n	8007834 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007822:	f7fa ffe7 	bl	80027f4 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	2b0a      	cmp	r3, #10
 800782e:	d901      	bls.n	8007834 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e04c      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8007834:	f7ff fc4f 	bl	80070d6 <LL_RCC_PLL_IsReady>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0f1      	beq.n	8007822 <HAL_RCC_OscConfig+0x646>
 800783e:	e045      	b.n	80078cc <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007840:	f7ff fc3b 	bl	80070ba <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007844:	f7fa ffd6 	bl	80027f4 <HAL_GetTick>
 8007848:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800784a:	e008      	b.n	800785e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800784c:	f7fa ffd2 	bl	80027f4 <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b0a      	cmp	r3, #10
 8007858:	d901      	bls.n	800785e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e037      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800785e:	f7ff fc3a 	bl	80070d6 <LL_RCC_PLL_IsReady>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1f1      	bne.n	800784c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007872:	4b1a      	ldr	r3, [pc, #104]	; (80078dc <HAL_RCC_OscConfig+0x700>)
 8007874:	4013      	ands	r3, r2
 8007876:	60cb      	str	r3, [r1, #12]
 8007878:	e028      	b.n	80078cc <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787e:	2b01      	cmp	r3, #1
 8007880:	d101      	bne.n	8007886 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e023      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	f003 0203 	and.w	r2, r3, #3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007898:	429a      	cmp	r2, r3
 800789a:	d115      	bne.n	80078c8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d10e      	bne.n	80078c8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b4:	021b      	lsls	r3, r3, #8
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d106      	bne.n	80078c8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d001      	beq.n	80078cc <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e000      	b.n	80078ce <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3720      	adds	r7, #32
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	11c1808c 	.word	0x11c1808c
 80078dc:	eefefffc 	.word	0xeefefffc

080078e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e10f      	b.n	8007b14 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80078f4:	4b89      	ldr	r3, [pc, #548]	; (8007b1c <HAL_RCC_ClockConfig+0x23c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d91b      	bls.n	800793a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007902:	4b86      	ldr	r3, [pc, #536]	; (8007b1c <HAL_RCC_ClockConfig+0x23c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f023 0207 	bic.w	r2, r3, #7
 800790a:	4984      	ldr	r1, [pc, #528]	; (8007b1c <HAL_RCC_ClockConfig+0x23c>)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	4313      	orrs	r3, r2
 8007910:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007912:	f7fa ff6f 	bl	80027f4 <HAL_GetTick>
 8007916:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007918:	e008      	b.n	800792c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800791a:	f7fa ff6b 	bl	80027f4 <HAL_GetTick>
 800791e:	4602      	mov	r2, r0
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	2b02      	cmp	r3, #2
 8007926:	d901      	bls.n	800792c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e0f3      	b.n	8007b14 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800792c:	4b7b      	ldr	r3, [pc, #492]	; (8007b1c <HAL_RCC_ClockConfig+0x23c>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0307 	and.w	r3, r3, #7
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	429a      	cmp	r2, r3
 8007938:	d1ef      	bne.n	800791a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d016      	beq.n	8007974 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	4618      	mov	r0, r3
 800794c:	f7ff fb2a 	bl	8006fa4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007950:	f7fa ff50 	bl	80027f4 <HAL_GetTick>
 8007954:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007956:	e008      	b.n	800796a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007958:	f7fa ff4c 	bl	80027f4 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	2b02      	cmp	r3, #2
 8007964:	d901      	bls.n	800796a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e0d4      	b.n	8007b14 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800796a:	f7ff fbf2 	bl	8007152 <LL_RCC_IsActiveFlag_HPRE>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d0f1      	beq.n	8007958 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797c:	2b00      	cmp	r3, #0
 800797e:	d016      	beq.n	80079ae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff fb20 	bl	8006fca <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800798a:	f7fa ff33 	bl	80027f4 <HAL_GetTick>
 800798e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007990:	e008      	b.n	80079a4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007992:	f7fa ff2f 	bl	80027f4 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d901      	bls.n	80079a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e0b7      	b.n	8007b14 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80079a4:	f7ff fbe6 	bl	8007174 <LL_RCC_IsActiveFlag_SHDHPRE>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d0f1      	beq.n	8007992 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0304 	and.w	r3, r3, #4
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d016      	beq.n	80079e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff fb19 	bl	8006ff6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80079c4:	f7fa ff16 	bl	80027f4 <HAL_GetTick>
 80079c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80079ca:	e008      	b.n	80079de <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80079cc:	f7fa ff12 	bl	80027f4 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d901      	bls.n	80079de <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e09a      	b.n	8007b14 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80079de:	f7ff fbdb 	bl	8007198 <LL_RCC_IsActiveFlag_PPRE1>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d0f1      	beq.n	80079cc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0308 	and.w	r3, r3, #8
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d017      	beq.n	8007a24 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff fb0e 	bl	800701c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007a00:	f7fa fef8 	bl	80027f4 <HAL_GetTick>
 8007a04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007a06:	e008      	b.n	8007a1a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007a08:	f7fa fef4 	bl	80027f4 <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d901      	bls.n	8007a1a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e07c      	b.n	8007b14 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007a1a:	f7ff fbce 	bl	80071ba <LL_RCC_IsActiveFlag_PPRE2>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d0f1      	beq.n	8007a08 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d043      	beq.n	8007ab8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d106      	bne.n	8007a46 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007a38:	f7ff f99b 	bl	8006d72 <LL_RCC_HSE_IsReady>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d11e      	bne.n	8007a80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e066      	b.n	8007b14 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d106      	bne.n	8007a5c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007a4e:	f7ff fb42 	bl	80070d6 <LL_RCC_PLL_IsReady>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d113      	bne.n	8007a80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e05b      	b.n	8007b14 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d106      	bne.n	8007a72 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007a64:	f7ff fa35 	bl	8006ed2 <LL_RCC_MSI_IsReady>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d108      	bne.n	8007a80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e050      	b.n	8007b14 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007a72:	f7ff f9ab 	bl	8006dcc <LL_RCC_HSI_IsReady>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e049      	b.n	8007b14 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7ff fa6f 	bl	8006f68 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a8a:	f7fa feb3 	bl	80027f4 <HAL_GetTick>
 8007a8e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a90:	e00a      	b.n	8007aa8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a92:	f7fa feaf 	bl	80027f4 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d901      	bls.n	8007aa8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e035      	b.n	8007b14 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aa8:	f7ff fa71 	bl	8006f8e <LL_RCC_GetSysClkSource>
 8007aac:	4602      	mov	r2, r0
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d1ec      	bne.n	8007a92 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ab8:	4b18      	ldr	r3, [pc, #96]	; (8007b1c <HAL_RCC_ClockConfig+0x23c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0307 	and.w	r3, r3, #7
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d21b      	bcs.n	8007afe <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ac6:	4b15      	ldr	r3, [pc, #84]	; (8007b1c <HAL_RCC_ClockConfig+0x23c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f023 0207 	bic.w	r2, r3, #7
 8007ace:	4913      	ldr	r1, [pc, #76]	; (8007b1c <HAL_RCC_ClockConfig+0x23c>)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ad6:	f7fa fe8d 	bl	80027f4 <HAL_GetTick>
 8007ada:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007adc:	e008      	b.n	8007af0 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007ade:	f7fa fe89 	bl	80027f4 <HAL_GetTick>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d901      	bls.n	8007af0 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e011      	b.n	8007b14 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007af0:	4b0a      	ldr	r3, [pc, #40]	; (8007b1c <HAL_RCC_ClockConfig+0x23c>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0307 	and.w	r3, r3, #7
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d1ef      	bne.n	8007ade <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007afe:	f000 f8b3 	bl	8007c68 <HAL_RCC_GetHCLKFreq>
 8007b02:	4603      	mov	r3, r0
 8007b04:	4a06      	ldr	r2, [pc, #24]	; (8007b20 <HAL_RCC_ClockConfig+0x240>)
 8007b06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8007b08:	4b06      	ldr	r3, [pc, #24]	; (8007b24 <HAL_RCC_ClockConfig+0x244>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fa fe67 	bl	80027e0 <HAL_InitTick>
 8007b12:	4603      	mov	r3, r0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	58004000 	.word	0x58004000
 8007b20:	20000004 	.word	0x20000004
 8007b24:	2000000c 	.word	0x2000000c

08007b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b28:	b590      	push	{r4, r7, lr}
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b36:	f7ff fa2a 	bl	8006f8e <LL_RCC_GetSysClkSource>
 8007b3a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b3c:	f7ff fafe 	bl	800713c <LL_RCC_PLL_GetMainSource>
 8007b40:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d005      	beq.n	8007b54 <HAL_RCC_GetSysClockFreq+0x2c>
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2b0c      	cmp	r3, #12
 8007b4c:	d139      	bne.n	8007bc2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d136      	bne.n	8007bc2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007b54:	f7ff f9cd 	bl	8006ef2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d115      	bne.n	8007b8a <HAL_RCC_GetSysClockFreq+0x62>
 8007b5e:	f7ff f9c8 	bl	8006ef2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d106      	bne.n	8007b76 <HAL_RCC_GetSysClockFreq+0x4e>
 8007b68:	f7ff f9d3 	bl	8006f12 <LL_RCC_MSI_GetRange>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	0a1b      	lsrs	r3, r3, #8
 8007b70:	f003 030f 	and.w	r3, r3, #15
 8007b74:	e005      	b.n	8007b82 <HAL_RCC_GetSysClockFreq+0x5a>
 8007b76:	f7ff f9d7 	bl	8006f28 <LL_RCC_MSI_GetRangeAfterStandby>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	0a1b      	lsrs	r3, r3, #8
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	4a36      	ldr	r2, [pc, #216]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x134>)
 8007b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b88:	e014      	b.n	8007bb4 <HAL_RCC_GetSysClockFreq+0x8c>
 8007b8a:	f7ff f9b2 	bl	8006ef2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d106      	bne.n	8007ba2 <HAL_RCC_GetSysClockFreq+0x7a>
 8007b94:	f7ff f9bd 	bl	8006f12 <LL_RCC_MSI_GetRange>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	091b      	lsrs	r3, r3, #4
 8007b9c:	f003 030f 	and.w	r3, r3, #15
 8007ba0:	e005      	b.n	8007bae <HAL_RCC_GetSysClockFreq+0x86>
 8007ba2:	f7ff f9c1 	bl	8006f28 <LL_RCC_MSI_GetRangeAfterStandby>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	091b      	lsrs	r3, r3, #4
 8007baa:	f003 030f 	and.w	r3, r3, #15
 8007bae:	4a2b      	ldr	r2, [pc, #172]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x134>)
 8007bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bb4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d115      	bne.n	8007be8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007bc0:	e012      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b04      	cmp	r3, #4
 8007bc6:	d102      	bne.n	8007bce <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007bc8:	4b25      	ldr	r3, [pc, #148]	; (8007c60 <HAL_RCC_GetSysClockFreq+0x138>)
 8007bca:	617b      	str	r3, [r7, #20]
 8007bcc:	e00c      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2b08      	cmp	r3, #8
 8007bd2:	d109      	bne.n	8007be8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007bd4:	f7ff f8a0 	bl	8006d18 <LL_RCC_HSE_IsEnabledDiv2>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d102      	bne.n	8007be4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007bde:	4b20      	ldr	r3, [pc, #128]	; (8007c60 <HAL_RCC_GetSysClockFreq+0x138>)
 8007be0:	617b      	str	r3, [r7, #20]
 8007be2:	e001      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007be4:	4b1f      	ldr	r3, [pc, #124]	; (8007c64 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007be6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007be8:	f7ff f9d1 	bl	8006f8e <LL_RCC_GetSysClkSource>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b0c      	cmp	r3, #12
 8007bf0:	d12f      	bne.n	8007c52 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007bf2:	f7ff faa3 	bl	800713c <LL_RCC_PLL_GetMainSource>
 8007bf6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d003      	beq.n	8007c06 <HAL_RCC_GetSysClockFreq+0xde>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d003      	beq.n	8007c0c <HAL_RCC_GetSysClockFreq+0xe4>
 8007c04:	e00d      	b.n	8007c22 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007c06:	4b16      	ldr	r3, [pc, #88]	; (8007c60 <HAL_RCC_GetSysClockFreq+0x138>)
 8007c08:	60fb      	str	r3, [r7, #12]
        break;
 8007c0a:	e00d      	b.n	8007c28 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007c0c:	f7ff f884 	bl	8006d18 <LL_RCC_HSE_IsEnabledDiv2>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d102      	bne.n	8007c1c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007c16:	4b12      	ldr	r3, [pc, #72]	; (8007c60 <HAL_RCC_GetSysClockFreq+0x138>)
 8007c18:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007c1a:	e005      	b.n	8007c28 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8007c1c:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007c1e:	60fb      	str	r3, [r7, #12]
        break;
 8007c20:	e002      	b.n	8007c28 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	60fb      	str	r3, [r7, #12]
        break;
 8007c26:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007c28:	f7ff fa66 	bl	80070f8 <LL_RCC_PLL_GetN>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	fb03 f402 	mul.w	r4, r3, r2
 8007c34:	f7ff fa77 	bl	8007126 <LL_RCC_PLL_GetDivider>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	091b      	lsrs	r3, r3, #4
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	fbb4 f4f3 	udiv	r4, r4, r3
 8007c42:	f7ff fa65 	bl	8007110 <LL_RCC_PLL_GetR>
 8007c46:	4603      	mov	r3, r0
 8007c48:	0f5b      	lsrs	r3, r3, #29
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	fbb4 f3f3 	udiv	r3, r4, r3
 8007c50:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007c52:	697b      	ldr	r3, [r7, #20]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	371c      	adds	r7, #28
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd90      	pop	{r4, r7, pc}
 8007c5c:	0801e43c 	.word	0x0801e43c
 8007c60:	00f42400 	.word	0x00f42400
 8007c64:	01e84800 	.word	0x01e84800

08007c68 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c68:	b598      	push	{r3, r4, r7, lr}
 8007c6a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007c6c:	f7ff ff5c 	bl	8007b28 <HAL_RCC_GetSysClockFreq>
 8007c70:	4604      	mov	r4, r0
 8007c72:	f7ff f9e6 	bl	8007042 <LL_RCC_GetAHBPrescaler>
 8007c76:	4603      	mov	r3, r0
 8007c78:	091b      	lsrs	r3, r3, #4
 8007c7a:	f003 030f 	and.w	r3, r3, #15
 8007c7e:	4a03      	ldr	r2, [pc, #12]	; (8007c8c <HAL_RCC_GetHCLKFreq+0x24>)
 8007c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c84:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	bd98      	pop	{r3, r4, r7, pc}
 8007c8c:	0801e3dc 	.word	0x0801e3dc

08007c90 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c90:	b598      	push	{r3, r4, r7, lr}
 8007c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007c94:	f7ff ffe8 	bl	8007c68 <HAL_RCC_GetHCLKFreq>
 8007c98:	4604      	mov	r4, r0
 8007c9a:	f7ff f9ea 	bl	8007072 <LL_RCC_GetAPB1Prescaler>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	0a1b      	lsrs	r3, r3, #8
 8007ca2:	4a03      	ldr	r2, [pc, #12]	; (8007cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ca8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	bd98      	pop	{r3, r4, r7, pc}
 8007cb0:	0801e41c 	.word	0x0801e41c

08007cb4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cb4:	b598      	push	{r3, r4, r7, lr}
 8007cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007cb8:	f7ff ffd6 	bl	8007c68 <HAL_RCC_GetHCLKFreq>
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	f7ff f9e3 	bl	8007088 <LL_RCC_GetAPB2Prescaler>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	0adb      	lsrs	r3, r3, #11
 8007cc6:	4a03      	ldr	r2, [pc, #12]	; (8007cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ccc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	bd98      	pop	{r3, r4, r7, pc}
 8007cd4:	0801e41c 	.word	0x0801e41c

08007cd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007cd8:	b590      	push	{r4, r7, lr}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	091b      	lsrs	r3, r3, #4
 8007ce4:	f003 030f 	and.w	r3, r3, #15
 8007ce8:	4a10      	ldr	r2, [pc, #64]	; (8007d2c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8007cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cee:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007cf0:	f7ff f9b2 	bl	8007058 <LL_RCC_GetAHB3Prescaler>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	091b      	lsrs	r3, r3, #4
 8007cf8:	f003 030f 	and.w	r3, r3, #15
 8007cfc:	4a0c      	ldr	r2, [pc, #48]	; (8007d30 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d08:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	4a09      	ldr	r2, [pc, #36]	; (8007d34 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8007d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d12:	0c9c      	lsrs	r4, r3, #18
 8007d14:	f7fe ff58 	bl	8006bc8 <HAL_PWREx_GetVoltageRange>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f000 f80b 	bl	8007d38 <RCC_SetFlashLatency>
 8007d22:	4603      	mov	r3, r0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd90      	pop	{r4, r7, pc}
 8007d2c:	0801e43c 	.word	0x0801e43c
 8007d30:	0801e3dc 	.word	0x0801e3dc
 8007d34:	431bde83 	.word	0x431bde83

08007d38 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08e      	sub	sp, #56	; 0x38
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8007d42:	4a3a      	ldr	r2, [pc, #232]	; (8007e2c <RCC_SetFlashLatency+0xf4>)
 8007d44:	f107 0320 	add.w	r3, r7, #32
 8007d48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d4c:	6018      	str	r0, [r3, #0]
 8007d4e:	3304      	adds	r3, #4
 8007d50:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8007d52:	4a37      	ldr	r2, [pc, #220]	; (8007e30 <RCC_SetFlashLatency+0xf8>)
 8007d54:	f107 0318 	add.w	r3, r7, #24
 8007d58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d5c:	6018      	str	r0, [r3, #0]
 8007d5e:	3304      	adds	r3, #4
 8007d60:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8007d62:	4a34      	ldr	r2, [pc, #208]	; (8007e34 <RCC_SetFlashLatency+0xfc>)
 8007d64:	f107 030c 	add.w	r3, r7, #12
 8007d68:	ca07      	ldmia	r2, {r0, r1, r2}
 8007d6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007d6e:	2300      	movs	r3, #0
 8007d70:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d78:	d11b      	bne.n	8007db2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8007d7e:	e014      	b.n	8007daa <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	3338      	adds	r3, #56	; 0x38
 8007d86:	443b      	add	r3, r7
 8007d88:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d807      	bhi.n	8007da4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	3338      	adds	r3, #56	; 0x38
 8007d9a:	443b      	add	r3, r7
 8007d9c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007da0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007da2:	e021      	b.n	8007de8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da6:	3301      	adds	r3, #1
 8007da8:	633b      	str	r3, [r7, #48]	; 0x30
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d9e7      	bls.n	8007d80 <RCC_SetFlashLatency+0x48>
 8007db0:	e01a      	b.n	8007de8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007db2:	2300      	movs	r3, #0
 8007db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007db6:	e014      	b.n	8007de2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dba:	005b      	lsls	r3, r3, #1
 8007dbc:	3338      	adds	r3, #56	; 0x38
 8007dbe:	443b      	add	r3, r7
 8007dc0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d807      	bhi.n	8007ddc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	3338      	adds	r3, #56	; 0x38
 8007dd2:	443b      	add	r3, r7
 8007dd4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007dd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dda:	e005      	b.n	8007de8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dde:	3301      	adds	r3, #1
 8007de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d9e7      	bls.n	8007db8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007de8:	4b13      	ldr	r3, [pc, #76]	; (8007e38 <RCC_SetFlashLatency+0x100>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f023 0207 	bic.w	r2, r3, #7
 8007df0:	4911      	ldr	r1, [pc, #68]	; (8007e38 <RCC_SetFlashLatency+0x100>)
 8007df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df4:	4313      	orrs	r3, r2
 8007df6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007df8:	f7fa fcfc 	bl	80027f4 <HAL_GetTick>
 8007dfc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007dfe:	e008      	b.n	8007e12 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007e00:	f7fa fcf8 	bl	80027f4 <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d901      	bls.n	8007e12 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e007      	b.n	8007e22 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007e12:	4b09      	ldr	r3, [pc, #36]	; (8007e38 <RCC_SetFlashLatency+0x100>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d1ef      	bne.n	8007e00 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3738      	adds	r7, #56	; 0x38
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	0801db6c 	.word	0x0801db6c
 8007e30:	0801db74 	.word	0x0801db74
 8007e34:	0801db7c 	.word	0x0801db7c
 8007e38:	58004000 	.word	0x58004000

08007e3c <LL_RCC_LSE_IsReady>:
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d101      	bne.n	8007e54 <LL_RCC_LSE_IsReady+0x18>
 8007e50:	2301      	movs	r3, #1
 8007e52:	e000      	b.n	8007e56 <LL_RCC_LSE_IsReady+0x1a>
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bc80      	pop	{r7}
 8007e5c:	4770      	bx	lr

08007e5e <LL_RCC_SetUSARTClockSource>:
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b083      	sub	sp, #12
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	0c1b      	lsrs	r3, r3, #16
 8007e72:	43db      	mvns	r3, r3
 8007e74:	401a      	ands	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bc80      	pop	{r7}
 8007e8c:	4770      	bx	lr

08007e8e <LL_RCC_SetI2SClockSource>:
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b083      	sub	sp, #12
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ea2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007eae:	bf00      	nop
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bc80      	pop	{r7}
 8007eb6:	4770      	bx	lr

08007eb8 <LL_RCC_SetLPUARTClockSource>:
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ecc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bc80      	pop	{r7}
 8007ee0:	4770      	bx	lr

08007ee2 <LL_RCC_SetI2CClockSource>:
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	091b      	lsrs	r3, r3, #4
 8007ef6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007efa:	43db      	mvns	r3, r3
 8007efc:	401a      	ands	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	011b      	lsls	r3, r3, #4
 8007f02:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bc80      	pop	{r7}
 8007f18:	4770      	bx	lr

08007f1a <LL_RCC_SetLPTIMClockSource>:
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	0c1b      	lsrs	r3, r3, #16
 8007f2e:	041b      	lsls	r3, r3, #16
 8007f30:	43db      	mvns	r3, r3
 8007f32:	401a      	ands	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	041b      	lsls	r3, r3, #16
 8007f38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f42:	bf00      	nop
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bc80      	pop	{r7}
 8007f4a:	4770      	bx	lr

08007f4c <LL_RCC_SetRNGClockSource>:
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f5c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007f60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bc80      	pop	{r7}
 8007f74:	4770      	bx	lr

08007f76 <LL_RCC_SetADCClockSource>:
{
 8007f76:	b480      	push	{r7}
 8007f78:	b083      	sub	sp, #12
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bc80      	pop	{r7}
 8007f9e:	4770      	bx	lr

08007fa0 <LL_RCC_SetRTCClockSource>:
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bc80      	pop	{r7}
 8007fc8:	4770      	bx	lr

08007fca <LL_RCC_GetRTCClockSource>:
{
 8007fca:	b480      	push	{r7}
 8007fcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bc80      	pop	{r7}
 8007fe0:	4770      	bx	lr

08007fe2 <LL_RCC_ForceBackupDomainReset>:
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007ffa:	bf00      	nop
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bc80      	pop	{r7}
 8008000:	4770      	bx	lr

08008002 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008002:	b480      	push	{r7}
 8008004:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800800a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800800e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800801a:	bf00      	nop
 800801c:	46bd      	mov	sp, r7
 800801e:	bc80      	pop	{r7}
 8008020:	4770      	bx	lr
	...

08008024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8008030:	2300      	movs	r3, #0
 8008032:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008034:	2300      	movs	r3, #0
 8008036:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d058      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8008044:	f7fe fd7e 	bl	8006b44 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008048:	f7fa fbd4 	bl	80027f4 <HAL_GetTick>
 800804c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800804e:	e009      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008050:	f7fa fbd0 	bl	80027f4 <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	2b02      	cmp	r3, #2
 800805c:	d902      	bls.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	74fb      	strb	r3, [r7, #19]
        break;
 8008062:	e006      	b.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008064:	4b7b      	ldr	r3, [pc, #492]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008070:	d1ee      	bne.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8008072:	7cfb      	ldrb	r3, [r7, #19]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d13c      	bne.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8008078:	f7ff ffa7 	bl	8007fca <LL_RCC_GetRTCClockSource>
 800807c:	4602      	mov	r2, r0
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008082:	429a      	cmp	r2, r3
 8008084:	d00f      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800808a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800808e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008092:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008094:	f7ff ffa5 	bl	8007fe2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008098:	f7ff ffb3 	bl	8008002 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800809c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d014      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b0:	f7fa fba0 	bl	80027f4 <HAL_GetTick>
 80080b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80080b6:	e00b      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080b8:	f7fa fb9c 	bl	80027f4 <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d902      	bls.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	74fb      	strb	r3, [r7, #19]
            break;
 80080ce:	e004      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80080d0:	f7ff feb4 	bl	8007e3c <LL_RCC_LSE_IsReady>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d1ee      	bne.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80080da:	7cfb      	ldrb	r3, [r7, #19]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d105      	bne.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7ff ff5b 	bl	8007fa0 <LL_RCC_SetRTCClockSource>
 80080ea:	e004      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80080ec:	7cfb      	ldrb	r3, [r7, #19]
 80080ee:	74bb      	strb	r3, [r7, #18]
 80080f0:	e001      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f2:	7cfb      	ldrb	r3, [r7, #19]
 80080f4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d004      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	4618      	mov	r0, r3
 8008108:	f7ff fea9 	bl	8007e5e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d004      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	4618      	mov	r0, r3
 800811e:	f7ff fe9e 	bl	8007e5e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0320 	and.w	r3, r3, #32
 800812a:	2b00      	cmp	r3, #0
 800812c:	d004      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	4618      	mov	r0, r3
 8008134:	f7ff fec0 	bl	8007eb8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008140:	2b00      	cmp	r3, #0
 8008142:	d004      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a1b      	ldr	r3, [r3, #32]
 8008148:	4618      	mov	r0, r3
 800814a:	f7ff fee6 	bl	8007f1a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008156:	2b00      	cmp	r3, #0
 8008158:	d004      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815e:	4618      	mov	r0, r3
 8008160:	f7ff fedb 	bl	8007f1a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800816c:	2b00      	cmp	r3, #0
 800816e:	d004      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff fed0 	bl	8007f1a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008182:	2b00      	cmp	r3, #0
 8008184:	d004      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	4618      	mov	r0, r3
 800818c:	f7ff fea9 	bl	8007ee2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008198:	2b00      	cmp	r3, #0
 800819a:	d004      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff fe9e 	bl	8007ee2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d004      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7ff fe93 	bl	8007ee2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0310 	and.w	r3, r3, #16
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d011      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7ff fe5e 	bl	8007e8e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081da:	d107      	bne.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80081dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d010      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff fea5 	bl	8007f4c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008206:	2b00      	cmp	r3, #0
 8008208:	d107      	bne.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800820a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008214:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008218:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d011      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822a:	4618      	mov	r0, r3
 800822c:	f7ff fea3 	bl	8007f76 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008238:	d107      	bne.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800823a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008248:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800824a:	7cbb      	ldrb	r3, [r7, #18]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	58000400 	.word	0x58000400

08008258 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d071      	beq.n	800834e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008270:	b2db      	uxtb	r3, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	d106      	bne.n	8008284 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7f9 ff04 	bl	800208c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2202      	movs	r2, #2
 8008288:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800828c:	4b32      	ldr	r3, [pc, #200]	; (8008358 <HAL_RTC_Init+0x100>)
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	f003 0310 	and.w	r3, r3, #16
 8008294:	2b10      	cmp	r3, #16
 8008296:	d051      	beq.n	800833c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008298:	4b2f      	ldr	r3, [pc, #188]	; (8008358 <HAL_RTC_Init+0x100>)
 800829a:	22ca      	movs	r2, #202	; 0xca
 800829c:	625a      	str	r2, [r3, #36]	; 0x24
 800829e:	4b2e      	ldr	r3, [pc, #184]	; (8008358 <HAL_RTC_Init+0x100>)
 80082a0:	2253      	movs	r2, #83	; 0x53
 80082a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fa11 	bl	80086cc <RTC_EnterInitMode>
 80082aa:	4603      	mov	r3, r0
 80082ac:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d13f      	bne.n	8008334 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80082b4:	4b28      	ldr	r3, [pc, #160]	; (8008358 <HAL_RTC_Init+0x100>)
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	4a27      	ldr	r2, [pc, #156]	; (8008358 <HAL_RTC_Init+0x100>)
 80082ba:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80082be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082c2:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80082c4:	4b24      	ldr	r3, [pc, #144]	; (8008358 <HAL_RTC_Init+0x100>)
 80082c6:	699a      	ldr	r2, [r3, #24]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6859      	ldr	r1, [r3, #4]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	4319      	orrs	r1, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	430b      	orrs	r3, r1
 80082d8:	491f      	ldr	r1, [pc, #124]	; (8008358 <HAL_RTC_Init+0x100>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68da      	ldr	r2, [r3, #12]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	041b      	lsls	r3, r3, #16
 80082e8:	491b      	ldr	r1, [pc, #108]	; (8008358 <HAL_RTC_Init+0x100>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80082ee:	4b1a      	ldr	r3, [pc, #104]	; (8008358 <HAL_RTC_Init+0x100>)
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fe:	430b      	orrs	r3, r1
 8008300:	4915      	ldr	r1, [pc, #84]	; (8008358 <HAL_RTC_Init+0x100>)
 8008302:	4313      	orrs	r3, r2
 8008304:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fa14 	bl	8008734 <RTC_ExitInitMode>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10e      	bne.n	8008334 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008316:	4b10      	ldr	r3, [pc, #64]	; (8008358 <HAL_RTC_Init+0x100>)
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a19      	ldr	r1, [r3, #32]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	4319      	orrs	r1, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	430b      	orrs	r3, r1
 800832e:	490a      	ldr	r1, [pc, #40]	; (8008358 <HAL_RTC_Init+0x100>)
 8008330:	4313      	orrs	r3, r2
 8008332:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008334:	4b08      	ldr	r3, [pc, #32]	; (8008358 <HAL_RTC_Init+0x100>)
 8008336:	22ff      	movs	r2, #255	; 0xff
 8008338:	625a      	str	r2, [r3, #36]	; 0x24
 800833a:	e001      	b.n	8008340 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008340:	7bfb      	ldrb	r3, [r7, #15]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d103      	bne.n	800834e <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800834e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	40002800 	.word	0x40002800

0800835c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800835c:	b590      	push	{r4, r7, lr}
 800835e:	b087      	sub	sp, #28
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008368:	2300      	movs	r3, #0
 800836a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008372:	2b01      	cmp	r3, #1
 8008374:	d101      	bne.n	800837a <HAL_RTC_SetAlarm_IT+0x1e>
 8008376:	2302      	movs	r3, #2
 8008378:	e0f3      	b.n	8008562 <HAL_RTC_SetAlarm_IT+0x206>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2202      	movs	r2, #2
 8008386:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800838a:	4b78      	ldr	r3, [pc, #480]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008392:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800839a:	d06a      	beq.n	8008472 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d13a      	bne.n	8008418 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80083a2:	4b72      	ldr	r3, [pc, #456]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d102      	bne.n	80083b4 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2200      	movs	r2, #0
 80083b2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	695b      	ldr	r3, [r3, #20]
 80083b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 f9f5 	bl	80087b0 <RTC_ByteToBcd2>
 80083c6:	4603      	mov	r3, r0
 80083c8:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	785b      	ldrb	r3, [r3, #1]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 f9ee 	bl	80087b0 <RTC_ByteToBcd2>
 80083d4:	4603      	mov	r3, r0
 80083d6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80083d8:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	789b      	ldrb	r3, [r3, #2]
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 f9e6 	bl	80087b0 <RTC_ByteToBcd2>
 80083e4:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80083e6:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	78db      	ldrb	r3, [r3, #3]
 80083ee:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80083f0:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 f9d8 	bl	80087b0 <RTC_ByteToBcd2>
 8008400:	4603      	mov	r3, r0
 8008402:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008404:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800840c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008412:	4313      	orrs	r3, r2
 8008414:	617b      	str	r3, [r7, #20]
 8008416:	e02c      	b.n	8008472 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8008420:	d00d      	beq.n	800843e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800842a:	d008      	beq.n	800843e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800842c:	4b4f      	ldr	r3, [pc, #316]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008434:	2b00      	cmp	r3, #0
 8008436:	d102      	bne.n	800843e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	2200      	movs	r2, #0
 800843c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	785b      	ldrb	r3, [r3, #1]
 8008448:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800844a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008450:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	78db      	ldrb	r3, [r3, #3]
 8008456:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008458:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008460:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008462:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008468:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800846e:	4313      	orrs	r3, r2
 8008470:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008472:	4b3e      	ldr	r3, [pc, #248]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 8008474:	22ca      	movs	r2, #202	; 0xca
 8008476:	625a      	str	r2, [r3, #36]	; 0x24
 8008478:	4b3c      	ldr	r3, [pc, #240]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 800847a:	2253      	movs	r2, #83	; 0x53
 800847c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008486:	d12c      	bne.n	80084e2 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008488:	4b38      	ldr	r3, [pc, #224]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	4a37      	ldr	r2, [pc, #220]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 800848e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008492:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008494:	4b35      	ldr	r3, [pc, #212]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 8008496:	2201      	movs	r2, #1
 8008498:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084a0:	d107      	bne.n	80084b2 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	699a      	ldr	r2, [r3, #24]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	69db      	ldr	r3, [r3, #28]
 80084aa:	4930      	ldr	r1, [pc, #192]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 80084ac:	4313      	orrs	r3, r2
 80084ae:	644b      	str	r3, [r1, #68]	; 0x44
 80084b0:	e006      	b.n	80084c0 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80084b2:	4a2e      	ldr	r2, [pc, #184]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80084b8:	4a2c      	ldr	r2, [pc, #176]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80084c0:	4a2a      	ldr	r2, [pc, #168]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084cc:	f043 0201 	orr.w	r2, r3, #1
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80084d4:	4b25      	ldr	r3, [pc, #148]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	4a24      	ldr	r2, [pc, #144]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 80084da:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80084de:	6193      	str	r3, [r2, #24]
 80084e0:	e02b      	b.n	800853a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80084e2:	4b22      	ldr	r3, [pc, #136]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	4a21      	ldr	r2, [pc, #132]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 80084e8:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80084ec:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80084ee:	4b1f      	ldr	r3, [pc, #124]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 80084f0:	2202      	movs	r2, #2
 80084f2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084fa:	d107      	bne.n	800850c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	699a      	ldr	r2, [r3, #24]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	4919      	ldr	r1, [pc, #100]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 8008506:	4313      	orrs	r3, r2
 8008508:	64cb      	str	r3, [r1, #76]	; 0x4c
 800850a:	e006      	b.n	800851a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800850c:	4a17      	ldr	r2, [pc, #92]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8008512:	4a16      	ldr	r2, [pc, #88]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800851a:	4a14      	ldr	r2, [pc, #80]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008526:	f043 0202 	orr.w	r2, r3, #2
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800852e:	4b0f      	ldr	r3, [pc, #60]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	4a0e      	ldr	r2, [pc, #56]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 8008534:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8008538:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800853a:	4b0d      	ldr	r3, [pc, #52]	; (8008570 <HAL_RTC_SetAlarm_IT+0x214>)
 800853c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008540:	4a0b      	ldr	r2, [pc, #44]	; (8008570 <HAL_RTC_SetAlarm_IT+0x214>)
 8008542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008546:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800854a:	4b08      	ldr	r3, [pc, #32]	; (800856c <HAL_RTC_SetAlarm_IT+0x210>)
 800854c:	22ff      	movs	r2, #255	; 0xff
 800854e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	371c      	adds	r7, #28
 8008566:	46bd      	mov	sp, r7
 8008568:	bd90      	pop	{r4, r7, pc}
 800856a:	bf00      	nop
 800856c:	40002800 	.word	0x40002800
 8008570:	58000800 	.word	0x58000800

08008574 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008584:	2b01      	cmp	r3, #1
 8008586:	d101      	bne.n	800858c <HAL_RTC_DeactivateAlarm+0x18>
 8008588:	2302      	movs	r3, #2
 800858a:	e048      	b.n	800861e <HAL_RTC_DeactivateAlarm+0xaa>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2202      	movs	r2, #2
 8008598:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800859c:	4b22      	ldr	r3, [pc, #136]	; (8008628 <HAL_RTC_DeactivateAlarm+0xb4>)
 800859e:	22ca      	movs	r2, #202	; 0xca
 80085a0:	625a      	str	r2, [r3, #36]	; 0x24
 80085a2:	4b21      	ldr	r3, [pc, #132]	; (8008628 <HAL_RTC_DeactivateAlarm+0xb4>)
 80085a4:	2253      	movs	r2, #83	; 0x53
 80085a6:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085ae:	d115      	bne.n	80085dc <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80085b0:	4b1d      	ldr	r3, [pc, #116]	; (8008628 <HAL_RTC_DeactivateAlarm+0xb4>)
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	4a1c      	ldr	r2, [pc, #112]	; (8008628 <HAL_RTC_DeactivateAlarm+0xb4>)
 80085b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80085ba:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80085bc:	4b1a      	ldr	r3, [pc, #104]	; (8008628 <HAL_RTC_DeactivateAlarm+0xb4>)
 80085be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c0:	4a19      	ldr	r2, [pc, #100]	; (8008628 <HAL_RTC_DeactivateAlarm+0xb4>)
 80085c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085c6:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085cc:	f023 0201 	bic.w	r2, r3, #1
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80085d4:	4b14      	ldr	r3, [pc, #80]	; (8008628 <HAL_RTC_DeactivateAlarm+0xb4>)
 80085d6:	2201      	movs	r2, #1
 80085d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80085da:	e014      	b.n	8008606 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80085dc:	4b12      	ldr	r3, [pc, #72]	; (8008628 <HAL_RTC_DeactivateAlarm+0xb4>)
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	4a11      	ldr	r2, [pc, #68]	; (8008628 <HAL_RTC_DeactivateAlarm+0xb4>)
 80085e2:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80085e6:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80085e8:	4b0f      	ldr	r3, [pc, #60]	; (8008628 <HAL_RTC_DeactivateAlarm+0xb4>)
 80085ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ec:	4a0e      	ldr	r2, [pc, #56]	; (8008628 <HAL_RTC_DeactivateAlarm+0xb4>)
 80085ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085f2:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f8:	f023 0202 	bic.w	r2, r3, #2
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008600:	4b09      	ldr	r3, [pc, #36]	; (8008628 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008602:	2202      	movs	r2, #2
 8008604:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008606:	4b08      	ldr	r3, [pc, #32]	; (8008628 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008608:	22ff      	movs	r2, #255	; 0xff
 800860a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	bc80      	pop	{r7}
 8008626:	4770      	bx	lr
 8008628:	40002800 	.word	0x40002800

0800862c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8008634:	4b11      	ldr	r3, [pc, #68]	; (800867c <HAL_RTC_AlarmIRQHandler+0x50>)
 8008636:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863c:	4013      	ands	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	2b00      	cmp	r3, #0
 8008648:	d005      	beq.n	8008656 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800864a:	4b0c      	ldr	r3, [pc, #48]	; (800867c <HAL_RTC_AlarmIRQHandler+0x50>)
 800864c:	2201      	movs	r2, #1
 800864e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f7fa fb58 	bl	8002d06 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008660:	4b06      	ldr	r3, [pc, #24]	; (800867c <HAL_RTC_AlarmIRQHandler+0x50>)
 8008662:	2202      	movs	r2, #2
 8008664:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f94a 	bl	8008900 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008674:	bf00      	nop
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	40002800 	.word	0x40002800

08008680 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008688:	4b0f      	ldr	r3, [pc, #60]	; (80086c8 <HAL_RTC_WaitForSynchro+0x48>)
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	4a0e      	ldr	r2, [pc, #56]	; (80086c8 <HAL_RTC_WaitForSynchro+0x48>)
 800868e:	f023 0320 	bic.w	r3, r3, #32
 8008692:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008694:	f7fa f8ae 	bl	80027f4 <HAL_GetTick>
 8008698:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800869a:	e009      	b.n	80086b0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800869c:	f7fa f8aa 	bl	80027f4 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086aa:	d901      	bls.n	80086b0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e006      	b.n	80086be <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80086b0:	4b05      	ldr	r3, [pc, #20]	; (80086c8 <HAL_RTC_WaitForSynchro+0x48>)
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	f003 0320 	and.w	r3, r3, #32
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d0ef      	beq.n	800869c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	40002800 	.word	0x40002800

080086cc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086d4:	2300      	movs	r3, #0
 80086d6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80086d8:	4b15      	ldr	r3, [pc, #84]	; (8008730 <RTC_EnterInitMode+0x64>)
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d120      	bne.n	8008726 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80086e4:	4b12      	ldr	r3, [pc, #72]	; (8008730 <RTC_EnterInitMode+0x64>)
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	4a11      	ldr	r2, [pc, #68]	; (8008730 <RTC_EnterInitMode+0x64>)
 80086ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ee:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80086f0:	f7fa f880 	bl	80027f4 <HAL_GetTick>
 80086f4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80086f6:	e00d      	b.n	8008714 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80086f8:	f7fa f87c 	bl	80027f4 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008706:	d905      	bls.n	8008714 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2203      	movs	r2, #3
 8008710:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008714:	4b06      	ldr	r3, [pc, #24]	; (8008730 <RTC_EnterInitMode+0x64>)
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871c:	2b00      	cmp	r3, #0
 800871e:	d102      	bne.n	8008726 <RTC_EnterInitMode+0x5a>
 8008720:	7bfb      	ldrb	r3, [r7, #15]
 8008722:	2b03      	cmp	r3, #3
 8008724:	d1e8      	bne.n	80086f8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008726:	7bfb      	ldrb	r3, [r7, #15]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	40002800 	.word	0x40002800

08008734 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008740:	4b1a      	ldr	r3, [pc, #104]	; (80087ac <RTC_ExitInitMode+0x78>)
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	4a19      	ldr	r2, [pc, #100]	; (80087ac <RTC_ExitInitMode+0x78>)
 8008746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800874a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800874c:	4b17      	ldr	r3, [pc, #92]	; (80087ac <RTC_ExitInitMode+0x78>)
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	f003 0320 	and.w	r3, r3, #32
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10c      	bne.n	8008772 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7ff ff91 	bl	8008680 <HAL_RTC_WaitForSynchro>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d01e      	beq.n	80087a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2203      	movs	r2, #3
 8008768:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	73fb      	strb	r3, [r7, #15]
 8008770:	e017      	b.n	80087a2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008772:	4b0e      	ldr	r3, [pc, #56]	; (80087ac <RTC_ExitInitMode+0x78>)
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	4a0d      	ldr	r2, [pc, #52]	; (80087ac <RTC_ExitInitMode+0x78>)
 8008778:	f023 0320 	bic.w	r3, r3, #32
 800877c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7ff ff7e 	bl	8008680 <HAL_RTC_WaitForSynchro>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d005      	beq.n	8008796 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2203      	movs	r2, #3
 800878e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008796:	4b05      	ldr	r3, [pc, #20]	; (80087ac <RTC_ExitInitMode+0x78>)
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	4a04      	ldr	r2, [pc, #16]	; (80087ac <RTC_ExitInitMode+0x78>)
 800879c:	f043 0320 	orr.w	r3, r3, #32
 80087a0:	6193      	str	r3, [r2, #24]
  }

  return status;
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	40002800 	.word	0x40002800

080087b0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80087be:	79fb      	ldrb	r3, [r7, #7]
 80087c0:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80087c2:	e005      	b.n	80087d0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	3301      	adds	r3, #1
 80087c8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80087ca:	7afb      	ldrb	r3, [r7, #11]
 80087cc:	3b0a      	subs	r3, #10
 80087ce:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80087d0:	7afb      	ldrb	r3, [r7, #11]
 80087d2:	2b09      	cmp	r3, #9
 80087d4:	d8f6      	bhi.n	80087c4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	011b      	lsls	r3, r3, #4
 80087dc:	b2da      	uxtb	r2, r3
 80087de:	7afb      	ldrb	r3, [r7, #11]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	b2db      	uxtb	r3, r3
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bc80      	pop	{r7}
 80087ec:	4770      	bx	lr
	...

080087f0 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d101      	bne.n	8008806 <HAL_RTCEx_EnableBypassShadow+0x16>
 8008802:	2302      	movs	r3, #2
 8008804:	e01f      	b.n	8008846 <HAL_RTCEx_EnableBypassShadow+0x56>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2202      	movs	r2, #2
 8008812:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008816:	4b0e      	ldr	r3, [pc, #56]	; (8008850 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008818:	22ca      	movs	r2, #202	; 0xca
 800881a:	625a      	str	r2, [r3, #36]	; 0x24
 800881c:	4b0c      	ldr	r3, [pc, #48]	; (8008850 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800881e:	2253      	movs	r2, #83	; 0x53
 8008820:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008822:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	4a0a      	ldr	r2, [pc, #40]	; (8008850 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008828:	f043 0320 	orr.w	r3, r3, #32
 800882c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800882e:	4b08      	ldr	r3, [pc, #32]	; (8008850 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008830:	22ff      	movs	r2, #255	; 0xff
 8008832:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	bc80      	pop	{r7}
 800884e:	4770      	bx	lr
 8008850:	40002800 	.word	0x40002800

08008854 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008862:	2b01      	cmp	r3, #1
 8008864:	d101      	bne.n	800886a <HAL_RTCEx_SetSSRU_IT+0x16>
 8008866:	2302      	movs	r3, #2
 8008868:	e027      	b.n	80088ba <HAL_RTCEx_SetSSRU_IT+0x66>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2202      	movs	r2, #2
 8008876:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800887a:	4b12      	ldr	r3, [pc, #72]	; (80088c4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800887c:	22ca      	movs	r2, #202	; 0xca
 800887e:	625a      	str	r2, [r3, #36]	; 0x24
 8008880:	4b10      	ldr	r3, [pc, #64]	; (80088c4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008882:	2253      	movs	r2, #83	; 0x53
 8008884:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8008886:	4b0f      	ldr	r3, [pc, #60]	; (80088c4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	4a0e      	ldr	r2, [pc, #56]	; (80088c4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800888c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008890:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8008892:	4b0d      	ldr	r3, [pc, #52]	; (80088c8 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008898:	4a0b      	ldr	r2, [pc, #44]	; (80088c8 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800889a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800889e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088a2:	4b08      	ldr	r3, [pc, #32]	; (80088c4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80088a4:	22ff      	movs	r2, #255	; 0xff
 80088a6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	bc80      	pop	{r7}
 80088c2:	4770      	bx	lr
 80088c4:	40002800 	.word	0x40002800
 80088c8:	58000800 	.word	0x58000800

080088cc <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80088d4:	4b09      	ldr	r3, [pc, #36]	; (80088fc <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80088d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d005      	beq.n	80088ec <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80088e0:	4b06      	ldr	r3, [pc, #24]	; (80088fc <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80088e2:	2240      	movs	r2, #64	; 0x40
 80088e4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7fa fa17 	bl	8002d1a <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	40002800 	.word	0x40002800

08008900 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	bc80      	pop	{r7}
 8008910:	4770      	bx	lr
	...

08008914 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008914:	b480      	push	{r7}
 8008916:	b087      	sub	sp, #28
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008920:	4b07      	ldr	r3, [pc, #28]	; (8008940 <HAL_RTCEx_BKUPWrite+0x2c>)
 8008922:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	4413      	add	r3, r2
 800892c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	601a      	str	r2, [r3, #0]
}
 8008934:	bf00      	nop
 8008936:	371c      	adds	r7, #28
 8008938:	46bd      	mov	sp, r7
 800893a:	bc80      	pop	{r7}
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	4000b100 	.word	0x4000b100

08008944 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800894e:	4b07      	ldr	r3, [pc, #28]	; (800896c <HAL_RTCEx_BKUPRead+0x28>)
 8008950:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	4413      	add	r3, r2
 800895a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	bc80      	pop	{r7}
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	4000b100 	.word	0x4000b100

08008970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d101      	bne.n	8008982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e0c6      	b.n	8008b10 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008986:	2b00      	cmp	r3, #0
 8008988:	d108      	bne.n	800899c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008992:	d009      	beq.n	80089a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	61da      	str	r2, [r3, #28]
 800899a:	e005      	b.n	80089a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d106      	bne.n	80089c2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f7f9 fc0f 	bl	80021e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2202      	movs	r2, #2
 80089c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089d8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089e2:	d902      	bls.n	80089ea <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80089e4:	2300      	movs	r3, #0
 80089e6:	60fb      	str	r3, [r7, #12]
 80089e8:	e002      	b.n	80089f0 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80089ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80089f8:	d007      	beq.n	8008a0a <HAL_SPI_Init+0x9a>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a02:	d002      	beq.n	8008a0a <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	f003 0302 	and.w	r3, r3, #2
 8008a24:	431a      	orrs	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a38:	431a      	orrs	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a42:	431a      	orrs	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a1b      	ldr	r3, [r3, #32]
 8008a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a4c:	ea42 0103 	orr.w	r1, r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a68:	d11b      	bne.n	8008aa2 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10b      	bne.n	8008a8a <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a7a:	d903      	bls.n	8008a84 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	631a      	str	r2, [r3, #48]	; 0x30
 8008a82:	e002      	b.n	8008a8a <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d107      	bne.n	8008aa2 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aa0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	0c1b      	lsrs	r3, r3, #16
 8008aa8:	f003 0204 	and.w	r2, r3, #4
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab0:	f003 0310 	and.w	r3, r3, #16
 8008ab4:	431a      	orrs	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aba:	f003 0308 	and.w	r3, r3, #8
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008ac8:	ea42 0103 	orr.w	r1, r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ae2:	d105      	bne.n	8008af0 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	b292      	uxth	r2, r2
 8008aee:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	69da      	ldr	r2, [r3, #28]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008afe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <LL_PWR_SetRadioBusyTrigger>:
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8008b20:	4b06      	ldr	r3, [pc, #24]	; (8008b3c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008b28:	4904      	ldr	r1, [pc, #16]	; (8008b3c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	608b      	str	r3, [r1, #8]
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bc80      	pop	{r7}
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	58000400 	.word	0x58000400

08008b40 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8008b40:	b480      	push	{r7}
 8008b42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008b44:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b4a:	4a04      	ldr	r2, [pc, #16]	; (8008b5c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008b54:	bf00      	nop
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bc80      	pop	{r7}
 8008b5a:	4770      	bx	lr
 8008b5c:	58000400 	.word	0x58000400

08008b60 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8008b60:	b480      	push	{r7}
 8008b62:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008b64:	4b05      	ldr	r3, [pc, #20]	; (8008b7c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b6a:	4a04      	ldr	r2, [pc, #16]	; (8008b7c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008b6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008b74:	bf00      	nop
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bc80      	pop	{r7}
 8008b7a:	4770      	bx	lr
 8008b7c:	58000400 	.word	0x58000400

08008b80 <LL_PWR_ClearFlag_RFBUSY>:
{
 8008b80:	b480      	push	{r7}
 8008b82:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8008b84:	4b03      	ldr	r3, [pc, #12]	; (8008b94 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8008b86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b8a:	619a      	str	r2, [r3, #24]
}
 8008b8c:	bf00      	nop
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bc80      	pop	{r7}
 8008b92:	4770      	bx	lr
 8008b94:	58000400 	.word	0x58000400

08008b98 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8008b98:	b480      	push	{r7}
 8008b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8008b9c:	4b06      	ldr	r3, [pc, #24]	; (8008bb8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8008b9e:	695b      	ldr	r3, [r3, #20]
 8008ba0:	f003 0302 	and.w	r3, r3, #2
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d101      	bne.n	8008bac <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e000      	b.n	8008bae <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bc80      	pop	{r7}
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	58000400 	.word	0x58000400

08008bbc <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8008bc0:	4b06      	ldr	r3, [pc, #24]	; (8008bdc <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	f003 0304 	and.w	r3, r3, #4
 8008bc8:	2b04      	cmp	r3, #4
 8008bca:	d101      	bne.n	8008bd0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e000      	b.n	8008bd2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bc80      	pop	{r7}
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	58000400 	.word	0x58000400

08008be0 <LL_RCC_RF_DisableReset>:
{
 8008be0:	b480      	push	{r7}
 8008be2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8008be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008bf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008bf8:	bf00      	nop
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bc80      	pop	{r7}
 8008bfe:	4770      	bx	lr

08008c00 <LL_RCC_IsRFUnderReset>:
{
 8008c00:	b480      	push	{r7}
 8008c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8008c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c14:	d101      	bne.n	8008c1a <LL_RCC_IsRFUnderReset+0x1a>
 8008c16:	2301      	movs	r3, #1
 8008c18:	e000      	b.n	8008c1c <LL_RCC_IsRFUnderReset+0x1c>
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bc80      	pop	{r7}
 8008c22:	4770      	bx	lr

08008c24 <LL_EXTI_EnableIT_32_63>:
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008c2c:	4b06      	ldr	r3, [pc, #24]	; (8008c48 <LL_EXTI_EnableIT_32_63+0x24>)
 8008c2e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008c32:	4905      	ldr	r1, [pc, #20]	; (8008c48 <LL_EXTI_EnableIT_32_63+0x24>)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bc80      	pop	{r7}
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	58000800 	.word	0x58000800

08008c4c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d103      	bne.n	8008c62 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	73fb      	strb	r3, [r7, #15]
    return status;
 8008c5e:	7bfb      	ldrb	r3, [r7, #15]
 8008c60:	e052      	b.n	8008d08 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	799b      	ldrb	r3, [r3, #6]
 8008c6a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8008c6c:	7bbb      	ldrb	r3, [r7, #14]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <HAL_SUBGHZ_Init+0x2c>
 8008c72:	7bbb      	ldrb	r3, [r7, #14]
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d109      	bne.n	8008c8c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7f9 fc0c 	bl	800249c <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8008c84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008c88:	f7ff ffcc 	bl	8008c24 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8008c8c:	7bbb      	ldrb	r3, [r7, #14]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d126      	bne.n	8008ce0 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2202      	movs	r2, #2
 8008c96:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8008c98:	f7ff ffa2 	bl	8008be0 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008c9c:	4b1c      	ldr	r3, [pc, #112]	; (8008d10 <HAL_SUBGHZ_Init+0xc4>)
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	00db      	lsls	r3, r3, #3
 8008ca4:	1a9b      	subs	r3, r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	0cdb      	lsrs	r3, r3, #19
 8008caa:	2264      	movs	r2, #100	; 0x64
 8008cac:	fb02 f303 	mul.w	r3, r2, r3
 8008cb0:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d105      	bne.n	8008cc4 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	609a      	str	r2, [r3, #8]
        break;
 8008cc2:	e007      	b.n	8008cd4 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8008cca:	f7ff ff99 	bl	8008c00 <LL_RCC_IsRFUnderReset>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1ee      	bne.n	8008cb2 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008cd4:	f7ff ff34 	bl	8008b40 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8008cd8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008cdc:	f7ff ff1c 	bl	8008b18 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8008ce0:	f7ff ff4e 	bl	8008b80 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10a      	bne.n	8008d00 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 faac 	bl	800924c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	719a      	strb	r2, [r3, #6]

  return status;
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	20000004 	.word	0x20000004

08008d14 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	607a      	str	r2, [r7, #4]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	460b      	mov	r3, r1
 8008d22:	817b      	strh	r3, [r7, #10]
 8008d24:	4613      	mov	r3, r2
 8008d26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	799b      	ldrb	r3, [r3, #6]
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d14a      	bne.n	8008dc8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	795b      	ldrb	r3, [r3, #5]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d101      	bne.n	8008d3e <HAL_SUBGHZ_WriteRegisters+0x2a>
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	e045      	b.n	8008dca <HAL_SUBGHZ_WriteRegisters+0xb6>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2201      	movs	r2, #1
 8008d42:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2202      	movs	r2, #2
 8008d48:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f000 fb4c 	bl	80093e8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008d50:	f7ff ff06 	bl	8008b60 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8008d54:	210d      	movs	r1, #13
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f000 fa98 	bl	800928c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008d5c:	897b      	ldrh	r3, [r7, #10]
 8008d5e:	0a1b      	lsrs	r3, r3, #8
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	4619      	mov	r1, r3
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 fa90 	bl	800928c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008d6c:	897b      	ldrh	r3, [r7, #10]
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	4619      	mov	r1, r3
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f000 fa8a 	bl	800928c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008d78:	2300      	movs	r3, #0
 8008d7a:	82bb      	strh	r3, [r7, #20]
 8008d7c:	e00a      	b.n	8008d94 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008d7e:	8abb      	ldrh	r3, [r7, #20]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	4413      	add	r3, r2
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	4619      	mov	r1, r3
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f000 fa7f 	bl	800928c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008d8e:	8abb      	ldrh	r3, [r7, #20]
 8008d90:	3301      	adds	r3, #1
 8008d92:	82bb      	strh	r3, [r7, #20]
 8008d94:	8aba      	ldrh	r2, [r7, #20]
 8008d96:	893b      	ldrh	r3, [r7, #8]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d3f0      	bcc.n	8008d7e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008d9c:	f7ff fed0 	bl	8008b40 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 fb45 	bl	8009430 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d002      	beq.n	8008db4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	75fb      	strb	r3, [r7, #23]
 8008db2:	e001      	b.n	8008db8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	715a      	strb	r2, [r3, #5]

    return status;
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
 8008dc6:	e000      	b.n	8008dca <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008dc8:	2302      	movs	r3, #2
  }
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3718      	adds	r7, #24
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b088      	sub	sp, #32
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	607a      	str	r2, [r7, #4]
 8008ddc:	461a      	mov	r2, r3
 8008dde:	460b      	mov	r3, r1
 8008de0:	817b      	strh	r3, [r7, #10]
 8008de2:	4613      	mov	r3, r2
 8008de4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	799b      	ldrb	r3, [r3, #6]
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d14a      	bne.n	8008e8a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	795b      	ldrb	r3, [r3, #5]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d101      	bne.n	8008e00 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	e045      	b.n	8008e8c <HAL_SUBGHZ_ReadRegisters+0xba>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f000 faee 	bl	80093e8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008e0c:	f7ff fea8 	bl	8008b60 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8008e10:	211d      	movs	r1, #29
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 fa3a 	bl	800928c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008e18:	897b      	ldrh	r3, [r7, #10]
 8008e1a:	0a1b      	lsrs	r3, r3, #8
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	4619      	mov	r1, r3
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 fa32 	bl	800928c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008e28:	897b      	ldrh	r3, [r7, #10]
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f000 fa2c 	bl	800928c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8008e34:	2100      	movs	r1, #0
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f000 fa28 	bl	800928c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	82fb      	strh	r3, [r7, #22]
 8008e40:	e009      	b.n	8008e56 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008e42:	69b9      	ldr	r1, [r7, #24]
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 fa77 	bl	8009338 <SUBGHZSPI_Receive>
      pData++;
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008e50:	8afb      	ldrh	r3, [r7, #22]
 8008e52:	3301      	adds	r3, #1
 8008e54:	82fb      	strh	r3, [r7, #22]
 8008e56:	8afa      	ldrh	r2, [r7, #22]
 8008e58:	893b      	ldrh	r3, [r7, #8]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d3f1      	bcc.n	8008e42 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008e5e:	f7ff fe6f 	bl	8008b40 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f000 fae4 	bl	8009430 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d002      	beq.n	8008e76 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	77fb      	strb	r3, [r7, #31]
 8008e74:	e001      	b.n	8008e7a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	715a      	strb	r2, [r3, #5]

    return status;
 8008e86:	7ffb      	ldrb	r3, [r7, #31]
 8008e88:	e000      	b.n	8008e8c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8008e8a:	2302      	movs	r3, #2
  }
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3720      	adds	r7, #32
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	607a      	str	r2, [r7, #4]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	72fb      	strb	r3, [r7, #11]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	799b      	ldrb	r3, [r3, #6]
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d14a      	bne.n	8008f48 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	795b      	ldrb	r3, [r3, #5]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d101      	bne.n	8008ebe <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8008eba:	2302      	movs	r3, #2
 8008ebc:	e045      	b.n	8008f4a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f000 fa8f 	bl	80093e8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8008eca:	7afb      	ldrb	r3, [r7, #11]
 8008ecc:	2b84      	cmp	r3, #132	; 0x84
 8008ece:	d002      	beq.n	8008ed6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8008ed0:	7afb      	ldrb	r3, [r7, #11]
 8008ed2:	2b94      	cmp	r3, #148	; 0x94
 8008ed4:	d103      	bne.n	8008ede <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	711a      	strb	r2, [r3, #4]
 8008edc:	e002      	b.n	8008ee4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008ee4:	f7ff fe3c 	bl	8008b60 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008ee8:	7afb      	ldrb	r3, [r7, #11]
 8008eea:	4619      	mov	r1, r3
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f000 f9cd 	bl	800928c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	82bb      	strh	r3, [r7, #20]
 8008ef6:	e00a      	b.n	8008f0e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008ef8:	8abb      	ldrh	r3, [r7, #20]
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	4413      	add	r3, r2
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	4619      	mov	r1, r3
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f000 f9c2 	bl	800928c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008f08:	8abb      	ldrh	r3, [r7, #20]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	82bb      	strh	r3, [r7, #20]
 8008f0e:	8aba      	ldrh	r2, [r7, #20]
 8008f10:	893b      	ldrh	r3, [r7, #8]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d3f0      	bcc.n	8008ef8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008f16:	f7ff fe13 	bl	8008b40 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8008f1a:	7afb      	ldrb	r3, [r7, #11]
 8008f1c:	2b84      	cmp	r3, #132	; 0x84
 8008f1e:	d002      	beq.n	8008f26 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 fa85 	bl	8009430 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d002      	beq.n	8008f34 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	75fb      	strb	r3, [r7, #23]
 8008f32:	e001      	b.n	8008f38 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	715a      	strb	r2, [r3, #5]

    return status;
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	e000      	b.n	8008f4a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008f48:	2302      	movs	r3, #2
  }
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b088      	sub	sp, #32
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	60f8      	str	r0, [r7, #12]
 8008f5a:	607a      	str	r2, [r7, #4]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	460b      	mov	r3, r1
 8008f60:	72fb      	strb	r3, [r7, #11]
 8008f62:	4613      	mov	r3, r2
 8008f64:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	799b      	ldrb	r3, [r3, #6]
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d13d      	bne.n	8008ff0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	795b      	ldrb	r3, [r3, #5]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d101      	bne.n	8008f80 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	e038      	b.n	8008ff2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2201      	movs	r2, #1
 8008f84:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f000 fa2e 	bl	80093e8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008f8c:	f7ff fde8 	bl	8008b60 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008f90:	7afb      	ldrb	r3, [r7, #11]
 8008f92:	4619      	mov	r1, r3
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f000 f979 	bl	800928c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 f975 	bl	800928c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	82fb      	strh	r3, [r7, #22]
 8008fa6:	e009      	b.n	8008fbc <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008fa8:	69b9      	ldr	r1, [r7, #24]
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 f9c4 	bl	8009338 <SUBGHZSPI_Receive>
      pData++;
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008fb6:	8afb      	ldrh	r3, [r7, #22]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	82fb      	strh	r3, [r7, #22]
 8008fbc:	8afa      	ldrh	r2, [r7, #22]
 8008fbe:	893b      	ldrh	r3, [r7, #8]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d3f1      	bcc.n	8008fa8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008fc4:	f7ff fdbc 	bl	8008b40 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f000 fa31 	bl	8009430 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d002      	beq.n	8008fdc <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	77fb      	strb	r3, [r7, #31]
 8008fda:	e001      	b.n	8008fe0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	715a      	strb	r2, [r3, #5]

    return status;
 8008fec:	7ffb      	ldrb	r3, [r7, #31]
 8008fee:	e000      	b.n	8008ff2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008ff0:	2302      	movs	r3, #2
  }
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3720      	adds	r7, #32
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b086      	sub	sp, #24
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	60f8      	str	r0, [r7, #12]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	461a      	mov	r2, r3
 8009006:	460b      	mov	r3, r1
 8009008:	72fb      	strb	r3, [r7, #11]
 800900a:	4613      	mov	r3, r2
 800900c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	799b      	ldrb	r3, [r3, #6]
 8009012:	b2db      	uxtb	r3, r3
 8009014:	2b01      	cmp	r3, #1
 8009016:	d13e      	bne.n	8009096 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	795b      	ldrb	r3, [r3, #5]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d101      	bne.n	8009024 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8009020:	2302      	movs	r3, #2
 8009022:	e039      	b.n	8009098 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2201      	movs	r2, #1
 8009028:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 f9dc 	bl	80093e8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009030:	f7ff fd96 	bl	8008b60 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8009034:	210e      	movs	r1, #14
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 f928 	bl	800928c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800903c:	7afb      	ldrb	r3, [r7, #11]
 800903e:	4619      	mov	r1, r3
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 f923 	bl	800928c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009046:	2300      	movs	r3, #0
 8009048:	82bb      	strh	r3, [r7, #20]
 800904a:	e00a      	b.n	8009062 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800904c:	8abb      	ldrh	r3, [r7, #20]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	4413      	add	r3, r2
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	4619      	mov	r1, r3
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 f918 	bl	800928c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800905c:	8abb      	ldrh	r3, [r7, #20]
 800905e:	3301      	adds	r3, #1
 8009060:	82bb      	strh	r3, [r7, #20]
 8009062:	8aba      	ldrh	r2, [r7, #20]
 8009064:	893b      	ldrh	r3, [r7, #8]
 8009066:	429a      	cmp	r2, r3
 8009068:	d3f0      	bcc.n	800904c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800906a:	f7ff fd69 	bl	8008b40 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f000 f9de 	bl	8009430 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d002      	beq.n	8009082 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	75fb      	strb	r3, [r7, #23]
 8009080:	e001      	b.n	8009086 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2201      	movs	r2, #1
 800908a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	715a      	strb	r2, [r3, #5]

    return status;
 8009092:	7dfb      	ldrb	r3, [r7, #23]
 8009094:	e000      	b.n	8009098 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009096:	2302      	movs	r3, #2
  }
}
 8009098:	4618      	mov	r0, r3
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b088      	sub	sp, #32
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	607a      	str	r2, [r7, #4]
 80090aa:	461a      	mov	r2, r3
 80090ac:	460b      	mov	r3, r1
 80090ae:	72fb      	strb	r3, [r7, #11]
 80090b0:	4613      	mov	r3, r2
 80090b2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	799b      	ldrb	r3, [r3, #6]
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d141      	bne.n	8009146 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	795b      	ldrb	r3, [r3, #5]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d101      	bne.n	80090ce <HAL_SUBGHZ_ReadBuffer+0x2e>
 80090ca:	2302      	movs	r3, #2
 80090cc:	e03c      	b.n	8009148 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2201      	movs	r2, #1
 80090d2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f000 f987 	bl	80093e8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80090da:	f7ff fd41 	bl	8008b60 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80090de:	211e      	movs	r1, #30
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 f8d3 	bl	800928c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80090e6:	7afb      	ldrb	r3, [r7, #11]
 80090e8:	4619      	mov	r1, r3
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f000 f8ce 	bl	800928c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80090f0:	2100      	movs	r1, #0
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f000 f8ca 	bl	800928c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80090f8:	2300      	movs	r3, #0
 80090fa:	82fb      	strh	r3, [r7, #22]
 80090fc:	e009      	b.n	8009112 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80090fe:	69b9      	ldr	r1, [r7, #24]
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f000 f919 	bl	8009338 <SUBGHZSPI_Receive>
      pData++;
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	3301      	adds	r3, #1
 800910a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800910c:	8afb      	ldrh	r3, [r7, #22]
 800910e:	3301      	adds	r3, #1
 8009110:	82fb      	strh	r3, [r7, #22]
 8009112:	8afa      	ldrh	r2, [r7, #22]
 8009114:	893b      	ldrh	r3, [r7, #8]
 8009116:	429a      	cmp	r2, r3
 8009118:	d3f1      	bcc.n	80090fe <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800911a:	f7ff fd11 	bl	8008b40 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f000 f986 	bl	8009430 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d002      	beq.n	8009132 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	77fb      	strb	r3, [r7, #31]
 8009130:	e001      	b.n	8009136 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2201      	movs	r2, #1
 800913a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	715a      	strb	r2, [r3, #5]

    return status;
 8009142:	7ffb      	ldrb	r3, [r7, #31]
 8009144:	e000      	b.n	8009148 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8009146:	2302      	movs	r3, #2
  }
}
 8009148:	4618      	mov	r0, r3
 800914a:	3720      	adds	r7, #32
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8009158:	2300      	movs	r3, #0
 800915a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800915c:	f107 020c 	add.w	r2, r7, #12
 8009160:	2302      	movs	r3, #2
 8009162:	2112      	movs	r1, #18
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7ff fef4 	bl	8008f52 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800916a:	7b3b      	ldrb	r3, [r7, #12]
 800916c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800916e:	89fb      	ldrh	r3, [r7, #14]
 8009170:	021b      	lsls	r3, r3, #8
 8009172:	b21a      	sxth	r2, r3
 8009174:	7b7b      	ldrb	r3, [r7, #13]
 8009176:	b21b      	sxth	r3, r3
 8009178:	4313      	orrs	r3, r2
 800917a:	b21b      	sxth	r3, r3
 800917c:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800917e:	f107 020c 	add.w	r2, r7, #12
 8009182:	2302      	movs	r3, #2
 8009184:	2102      	movs	r1, #2
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7ff fe84 	bl	8008e94 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800918c:	89fb      	ldrh	r3, [r7, #14]
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	2b00      	cmp	r3, #0
 8009194:	d002      	beq.n	800919c <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f012 fe7c 	bl	801be94 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800919c:	89fb      	ldrh	r3, [r7, #14]
 800919e:	f003 0302 	and.w	r3, r3, #2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d002      	beq.n	80091ac <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f012 fe82 	bl	801beb0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80091ac:	89fb      	ldrh	r3, [r7, #14]
 80091ae:	f003 0304 	and.w	r3, r3, #4
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d002      	beq.n	80091bc <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f012 fed2 	bl	801bf60 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80091bc:	89fb      	ldrh	r3, [r7, #14]
 80091be:	f003 0308 	and.w	r3, r3, #8
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d002      	beq.n	80091cc <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f012 fed8 	bl	801bf7c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80091cc:	89fb      	ldrh	r3, [r7, #14]
 80091ce:	f003 0310 	and.w	r3, r3, #16
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f012 fede 	bl	801bf98 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80091dc:	89fb      	ldrh	r3, [r7, #14]
 80091de:	f003 0320 	and.w	r3, r3, #32
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d002      	beq.n	80091ec <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f012 feac 	bl	801bf44 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80091ec:	89fb      	ldrh	r3, [r7, #14]
 80091ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d002      	beq.n	80091fc <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f012 fe68 	bl	801becc <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80091fc:	89fb      	ldrh	r3, [r7, #14]
 80091fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00d      	beq.n	8009222 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8009206:	89fb      	ldrh	r3, [r7, #14]
 8009208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800920c:	2b00      	cmp	r3, #0
 800920e:	d004      	beq.n	800921a <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8009210:	2101      	movs	r1, #1
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f012 fe68 	bl	801bee8 <HAL_SUBGHZ_CADStatusCallback>
 8009218:	e003      	b.n	8009222 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800921a:	2100      	movs	r1, #0
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f012 fe63 	bl	801bee8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8009222:	89fb      	ldrh	r3, [r7, #14]
 8009224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009228:	2b00      	cmp	r3, #0
 800922a:	d002      	beq.n	8009232 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f012 fe79 	bl	801bf24 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8009232:	89fb      	ldrh	r3, [r7, #14]
 8009234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d002      	beq.n	8009242 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f012 feb9 	bl	801bfb4 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8009242:	bf00      	nop
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
	...

0800924c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8009254:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <SUBGHZSPI_Init+0x3c>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a0b      	ldr	r2, [pc, #44]	; (8009288 <SUBGHZSPI_Init+0x3c>)
 800925a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800925e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8009260:	4a09      	ldr	r2, [pc, #36]	; (8009288 <SUBGHZSPI_Init+0x3c>)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8009268:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800926a:	4b07      	ldr	r3, [pc, #28]	; (8009288 <SUBGHZSPI_Init+0x3c>)
 800926c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8009270:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8009272:	4b05      	ldr	r3, [pc, #20]	; (8009288 <SUBGHZSPI_Init+0x3c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a04      	ldr	r2, [pc, #16]	; (8009288 <SUBGHZSPI_Init+0x3c>)
 8009278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800927c:	6013      	str	r3, [r2, #0]
}
 800927e:	bf00      	nop
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	bc80      	pop	{r7}
 8009286:	4770      	bx	lr
 8009288:	58010000 	.word	0x58010000

0800928c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800929c:	4b23      	ldr	r3, [pc, #140]	; (800932c <SUBGHZSPI_Transmit+0xa0>)
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	4613      	mov	r3, r2
 80092a2:	00db      	lsls	r3, r3, #3
 80092a4:	1a9b      	subs	r3, r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	0cdb      	lsrs	r3, r3, #19
 80092aa:	2264      	movs	r2, #100	; 0x64
 80092ac:	fb02 f303 	mul.w	r3, r2, r3
 80092b0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d105      	bne.n	80092c4 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	609a      	str	r2, [r3, #8]
      break;
 80092c2:	e008      	b.n	80092d6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	3b01      	subs	r3, #1
 80092c8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80092ca:	4b19      	ldr	r3, [pc, #100]	; (8009330 <SUBGHZSPI_Transmit+0xa4>)
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	f003 0302 	and.w	r3, r3, #2
 80092d2:	2b02      	cmp	r3, #2
 80092d4:	d1ed      	bne.n	80092b2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80092d6:	4b17      	ldr	r3, [pc, #92]	; (8009334 <SUBGHZSPI_Transmit+0xa8>)
 80092d8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	78fa      	ldrb	r2, [r7, #3]
 80092de:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80092e0:	4b12      	ldr	r3, [pc, #72]	; (800932c <SUBGHZSPI_Transmit+0xa0>)
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	4613      	mov	r3, r2
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	1a9b      	subs	r3, r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	0cdb      	lsrs	r3, r3, #19
 80092ee:	2264      	movs	r2, #100	; 0x64
 80092f0:	fb02 f303 	mul.w	r3, r2, r3
 80092f4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d105      	bne.n	8009308 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	609a      	str	r2, [r3, #8]
      break;
 8009306:	e008      	b.n	800931a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	3b01      	subs	r3, #1
 800930c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800930e:	4b08      	ldr	r3, [pc, #32]	; (8009330 <SUBGHZSPI_Transmit+0xa4>)
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	f003 0301 	and.w	r3, r3, #1
 8009316:	2b01      	cmp	r3, #1
 8009318:	d1ed      	bne.n	80092f6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800931a:	4b05      	ldr	r3, [pc, #20]	; (8009330 <SUBGHZSPI_Transmit+0xa4>)
 800931c:	68db      	ldr	r3, [r3, #12]

  return status;
 800931e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009320:	4618      	mov	r0, r3
 8009322:	371c      	adds	r7, #28
 8009324:	46bd      	mov	sp, r7
 8009326:	bc80      	pop	{r7}
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	20000004 	.word	0x20000004
 8009330:	58010000 	.word	0x58010000
 8009334:	5801000c 	.word	0x5801000c

08009338 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8009338:	b480      	push	{r7}
 800933a:	b087      	sub	sp, #28
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009346:	4b25      	ldr	r3, [pc, #148]	; (80093dc <SUBGHZSPI_Receive+0xa4>)
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	4613      	mov	r3, r2
 800934c:	00db      	lsls	r3, r3, #3
 800934e:	1a9b      	subs	r3, r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	0cdb      	lsrs	r3, r3, #19
 8009354:	2264      	movs	r2, #100	; 0x64
 8009356:	fb02 f303 	mul.w	r3, r2, r3
 800935a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d105      	bne.n	800936e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2201      	movs	r2, #1
 800936a:	609a      	str	r2, [r3, #8]
      break;
 800936c:	e008      	b.n	8009380 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	3b01      	subs	r3, #1
 8009372:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8009374:	4b1a      	ldr	r3, [pc, #104]	; (80093e0 <SUBGHZSPI_Receive+0xa8>)
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	f003 0302 	and.w	r3, r3, #2
 800937c:	2b02      	cmp	r3, #2
 800937e:	d1ed      	bne.n	800935c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8009380:	4b18      	ldr	r3, [pc, #96]	; (80093e4 <SUBGHZSPI_Receive+0xac>)
 8009382:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	22ff      	movs	r2, #255	; 0xff
 8009388:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800938a:	4b14      	ldr	r3, [pc, #80]	; (80093dc <SUBGHZSPI_Receive+0xa4>)
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	4613      	mov	r3, r2
 8009390:	00db      	lsls	r3, r3, #3
 8009392:	1a9b      	subs	r3, r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	0cdb      	lsrs	r3, r3, #19
 8009398:	2264      	movs	r2, #100	; 0x64
 800939a:	fb02 f303 	mul.w	r3, r2, r3
 800939e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d105      	bne.n	80093b2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2201      	movs	r2, #1
 80093ae:	609a      	str	r2, [r3, #8]
      break;
 80093b0:	e008      	b.n	80093c4 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	3b01      	subs	r3, #1
 80093b6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80093b8:	4b09      	ldr	r3, [pc, #36]	; (80093e0 <SUBGHZSPI_Receive+0xa8>)
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d1ed      	bne.n	80093a0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80093c4:	4b06      	ldr	r3, [pc, #24]	; (80093e0 <SUBGHZSPI_Receive+0xa8>)
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	b2da      	uxtb	r2, r3
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	701a      	strb	r2, [r3, #0]

  return status;
 80093ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	371c      	adds	r7, #28
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bc80      	pop	{r7}
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	20000004 	.word	0x20000004
 80093e0:	58010000 	.word	0x58010000
 80093e4:	5801000c 	.word	0x5801000c

080093e8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	791b      	ldrb	r3, [r3, #4]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d111      	bne.n	800941c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80093f8:	4b0c      	ldr	r3, [pc, #48]	; (800942c <SUBGHZ_CheckDeviceReady+0x44>)
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	4613      	mov	r3, r2
 80093fe:	005b      	lsls	r3, r3, #1
 8009400:	4413      	add	r3, r2
 8009402:	00db      	lsls	r3, r3, #3
 8009404:	0c1b      	lsrs	r3, r3, #16
 8009406:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009408:	f7ff fbaa 	bl	8008b60 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	3b01      	subs	r3, #1
 8009410:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d1f9      	bne.n	800940c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009418:	f7ff fb92 	bl	8008b40 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f807 	bl	8009430 <SUBGHZ_WaitOnBusy>
 8009422:	4603      	mov	r3, r0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	20000004 	.word	0x20000004

08009430 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800943c:	4b12      	ldr	r3, [pc, #72]	; (8009488 <SUBGHZ_WaitOnBusy+0x58>)
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	4613      	mov	r3, r2
 8009442:	005b      	lsls	r3, r3, #1
 8009444:	4413      	add	r3, r2
 8009446:	00db      	lsls	r3, r3, #3
 8009448:	0d1b      	lsrs	r3, r3, #20
 800944a:	2264      	movs	r2, #100	; 0x64
 800944c:	fb02 f303 	mul.w	r3, r2, r3
 8009450:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8009452:	f7ff fbb3 	bl	8008bbc <LL_PWR_IsActiveFlag_RFBUSYMS>
 8009456:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d105      	bne.n	800946a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2202      	movs	r2, #2
 8009466:	609a      	str	r2, [r3, #8]
      break;
 8009468:	e009      	b.n	800947e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3b01      	subs	r3, #1
 800946e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8009470:	f7ff fb92 	bl	8008b98 <LL_PWR_IsActiveFlag_RFBUSYS>
 8009474:	4602      	mov	r2, r0
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	4013      	ands	r3, r2
 800947a:	2b01      	cmp	r3, #1
 800947c:	d0e9      	beq.n	8009452 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800947e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3718      	adds	r7, #24
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	20000004 	.word	0x20000004

0800948c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e049      	b.n	8009532 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d106      	bne.n	80094b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7f9 fa9a 	bl	80029ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	3304      	adds	r3, #4
 80094c8:	4619      	mov	r1, r3
 80094ca:	4610      	mov	r0, r2
 80094cc:	f000 f9c6 	bl	800985c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
	...

0800953c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800954a:	b2db      	uxtb	r3, r3
 800954c:	2b01      	cmp	r3, #1
 800954e:	d001      	beq.n	8009554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e036      	b.n	80095c2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2202      	movs	r2, #2
 8009558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68da      	ldr	r2, [r3, #12]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f042 0201 	orr.w	r2, r2, #1
 800956a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a16      	ldr	r2, [pc, #88]	; (80095cc <HAL_TIM_Base_Start_IT+0x90>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d004      	beq.n	8009580 <HAL_TIM_Base_Start_IT+0x44>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800957e:	d115      	bne.n	80095ac <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689a      	ldr	r2, [r3, #8]
 8009586:	4b12      	ldr	r3, [pc, #72]	; (80095d0 <HAL_TIM_Base_Start_IT+0x94>)
 8009588:	4013      	ands	r3, r2
 800958a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2b06      	cmp	r3, #6
 8009590:	d015      	beq.n	80095be <HAL_TIM_Base_Start_IT+0x82>
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009598:	d011      	beq.n	80095be <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f042 0201 	orr.w	r2, r2, #1
 80095a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095aa:	e008      	b.n	80095be <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f042 0201 	orr.w	r2, r2, #1
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	e000      	b.n	80095c0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bc80      	pop	{r7}
 80095ca:	4770      	bx	lr
 80095cc:	40012c00 	.word	0x40012c00
 80095d0:	00010007 	.word	0x00010007

080095d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	f003 0302 	and.w	r3, r3, #2
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d122      	bne.n	8009630 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	f003 0302 	and.w	r3, r3, #2
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d11b      	bne.n	8009630 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f06f 0202 	mvn.w	r2, #2
 8009600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2201      	movs	r2, #1
 8009606:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	699b      	ldr	r3, [r3, #24]
 800960e:	f003 0303 	and.w	r3, r3, #3
 8009612:	2b00      	cmp	r3, #0
 8009614:	d003      	beq.n	800961e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f904 	bl	8009824 <HAL_TIM_IC_CaptureCallback>
 800961c:	e005      	b.n	800962a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f8f7 	bl	8009812 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f906 	bl	8009836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	f003 0304 	and.w	r3, r3, #4
 800963a:	2b04      	cmp	r3, #4
 800963c:	d122      	bne.n	8009684 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	f003 0304 	and.w	r3, r3, #4
 8009648:	2b04      	cmp	r3, #4
 800964a:	d11b      	bne.n	8009684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f06f 0204 	mvn.w	r2, #4
 8009654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2202      	movs	r2, #2
 800965a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009666:	2b00      	cmp	r3, #0
 8009668:	d003      	beq.n	8009672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f8da 	bl	8009824 <HAL_TIM_IC_CaptureCallback>
 8009670:	e005      	b.n	800967e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f8cd 	bl	8009812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f8dc 	bl	8009836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	f003 0308 	and.w	r3, r3, #8
 800968e:	2b08      	cmp	r3, #8
 8009690:	d122      	bne.n	80096d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	f003 0308 	and.w	r3, r3, #8
 800969c:	2b08      	cmp	r3, #8
 800969e:	d11b      	bne.n	80096d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f06f 0208 	mvn.w	r2, #8
 80096a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2204      	movs	r2, #4
 80096ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	f003 0303 	and.w	r3, r3, #3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d003      	beq.n	80096c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f8b0 	bl	8009824 <HAL_TIM_IC_CaptureCallback>
 80096c4:	e005      	b.n	80096d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f8a3 	bl	8009812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f8b2 	bl	8009836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	f003 0310 	and.w	r3, r3, #16
 80096e2:	2b10      	cmp	r3, #16
 80096e4:	d122      	bne.n	800972c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	f003 0310 	and.w	r3, r3, #16
 80096f0:	2b10      	cmp	r3, #16
 80096f2:	d11b      	bne.n	800972c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f06f 0210 	mvn.w	r2, #16
 80096fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2208      	movs	r2, #8
 8009702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800970e:	2b00      	cmp	r3, #0
 8009710:	d003      	beq.n	800971a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f886 	bl	8009824 <HAL_TIM_IC_CaptureCallback>
 8009718:	e005      	b.n	8009726 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 f879 	bl	8009812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f888 	bl	8009836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	2b01      	cmp	r3, #1
 8009738:	d10e      	bne.n	8009758 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	f003 0301 	and.w	r3, r3, #1
 8009744:	2b01      	cmp	r3, #1
 8009746:	d107      	bne.n	8009758 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f06f 0201 	mvn.w	r2, #1
 8009750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f7f8 fb5c 	bl	8001e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009762:	2b80      	cmp	r3, #128	; 0x80
 8009764:	d10e      	bne.n	8009784 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009770:	2b80      	cmp	r3, #128	; 0x80
 8009772:	d107      	bne.n	8009784 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800977c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f8d7 	bl	8009932 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800978e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009792:	d10e      	bne.n	80097b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800979e:	2b80      	cmp	r3, #128	; 0x80
 80097a0:	d107      	bne.n	80097b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80097aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f8c9 	bl	8009944 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097bc:	2b40      	cmp	r3, #64	; 0x40
 80097be:	d10e      	bne.n	80097de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ca:	2b40      	cmp	r3, #64	; 0x40
 80097cc:	d107      	bne.n	80097de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80097d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f835 	bl	8009848 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	f003 0320 	and.w	r3, r3, #32
 80097e8:	2b20      	cmp	r3, #32
 80097ea:	d10e      	bne.n	800980a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	f003 0320 	and.w	r3, r3, #32
 80097f6:	2b20      	cmp	r3, #32
 80097f8:	d107      	bne.n	800980a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f06f 0220 	mvn.w	r2, #32
 8009802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 f88b 	bl	8009920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800980a:	bf00      	nop
 800980c:	3708      	adds	r7, #8
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009812:	b480      	push	{r7}
 8009814:	b083      	sub	sp, #12
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800981a:	bf00      	nop
 800981c:	370c      	adds	r7, #12
 800981e:	46bd      	mov	sp, r7
 8009820:	bc80      	pop	{r7}
 8009822:	4770      	bx	lr

08009824 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	bc80      	pop	{r7}
 8009834:	4770      	bx	lr

08009836 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009836:	b480      	push	{r7}
 8009838:	b083      	sub	sp, #12
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800983e:	bf00      	nop
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	bc80      	pop	{r7}
 8009846:	4770      	bx	lr

08009848 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	bc80      	pop	{r7}
 8009858:	4770      	bx	lr
	...

0800985c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a29      	ldr	r2, [pc, #164]	; (8009914 <TIM_Base_SetConfig+0xb8>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d003      	beq.n	800987c <TIM_Base_SetConfig+0x20>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800987a:	d108      	bne.n	800988e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	4313      	orrs	r3, r2
 800988c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a20      	ldr	r2, [pc, #128]	; (8009914 <TIM_Base_SetConfig+0xb8>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d00b      	beq.n	80098ae <TIM_Base_SetConfig+0x52>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800989c:	d007      	beq.n	80098ae <TIM_Base_SetConfig+0x52>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a1d      	ldr	r2, [pc, #116]	; (8009918 <TIM_Base_SetConfig+0xbc>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d003      	beq.n	80098ae <TIM_Base_SetConfig+0x52>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a1c      	ldr	r2, [pc, #112]	; (800991c <TIM_Base_SetConfig+0xc0>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d108      	bne.n	80098c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	4313      	orrs	r3, r2
 80098be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	689a      	ldr	r2, [r3, #8]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4a0b      	ldr	r2, [pc, #44]	; (8009914 <TIM_Base_SetConfig+0xb8>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d007      	beq.n	80098fc <TIM_Base_SetConfig+0xa0>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a0a      	ldr	r2, [pc, #40]	; (8009918 <TIM_Base_SetConfig+0xbc>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d003      	beq.n	80098fc <TIM_Base_SetConfig+0xa0>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a09      	ldr	r2, [pc, #36]	; (800991c <TIM_Base_SetConfig+0xc0>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d103      	bne.n	8009904 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	691a      	ldr	r2, [r3, #16]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	615a      	str	r2, [r3, #20]
}
 800990a:	bf00      	nop
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	bc80      	pop	{r7}
 8009912:	4770      	bx	lr
 8009914:	40012c00 	.word	0x40012c00
 8009918:	40014400 	.word	0x40014400
 800991c:	40014800 	.word	0x40014800

08009920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	bc80      	pop	{r7}
 8009930:	4770      	bx	lr

08009932 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009932:	b480      	push	{r7}
 8009934:	b083      	sub	sp, #12
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800993a:	bf00      	nop
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	bc80      	pop	{r7}
 8009942:	4770      	bx	lr

08009944 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	bc80      	pop	{r7}
 8009954:	4770      	bx	lr

08009956 <LL_RCC_GetUSARTClockSource>:
{
 8009956:	b480      	push	{r7}
 8009958:	b083      	sub	sp, #12
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800995e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009962:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	401a      	ands	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	041b      	lsls	r3, r3, #16
 800996e:	4313      	orrs	r3, r2
}
 8009970:	4618      	mov	r0, r3
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	bc80      	pop	{r7}
 8009978:	4770      	bx	lr

0800997a <LL_RCC_GetLPUARTClockSource>:
{
 800997a:	b480      	push	{r7}
 800997c:	b083      	sub	sp, #12
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009986:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4013      	ands	r3, r2
}
 800998e:	4618      	mov	r0, r3
 8009990:	370c      	adds	r7, #12
 8009992:	46bd      	mov	sp, r7
 8009994:	bc80      	pop	{r7}
 8009996:	4770      	bx	lr

08009998 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d101      	bne.n	80099aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e042      	b.n	8009a30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d106      	bne.n	80099c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7f9 fba3 	bl	8003108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2224      	movs	r2, #36	; 0x24
 80099c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f022 0201 	bic.w	r2, r2, #1
 80099d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fc3a 	bl	800a254 <UART_SetConfig>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d101      	bne.n	80099ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e022      	b.n	8009a30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d002      	beq.n	80099f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fea2 	bl	800a73c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	685a      	ldr	r2, [r3, #4]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	689a      	ldr	r2, [r3, #8]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f042 0201 	orr.w	r2, r2, #1
 8009a26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 ff28 	bl	800a87e <UART_CheckIdleState>
 8009a2e:	4603      	mov	r3, r0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b08a      	sub	sp, #40	; 0x28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	4613      	mov	r3, r2
 8009a44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a4c:	2b20      	cmp	r3, #32
 8009a4e:	d137      	bne.n	8009ac0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d002      	beq.n	8009a5c <HAL_UART_Receive_IT+0x24>
 8009a56:	88fb      	ldrh	r3, [r7, #6]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e030      	b.n	8009ac2 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a18      	ldr	r2, [pc, #96]	; (8009acc <HAL_UART_Receive_IT+0x94>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d01f      	beq.n	8009ab0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d018      	beq.n	8009ab0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	e853 3f00 	ldrex	r3, [r3]
 8009a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009a92:	627b      	str	r3, [r7, #36]	; 0x24
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	461a      	mov	r2, r3
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9c:	623b      	str	r3, [r7, #32]
 8009a9e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa0:	69f9      	ldr	r1, [r7, #28]
 8009aa2:	6a3a      	ldr	r2, [r7, #32]
 8009aa4:	e841 2300 	strex	r3, r2, [r1]
 8009aa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1e6      	bne.n	8009a7e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009ab0:	88fb      	ldrh	r3, [r7, #6]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	68b9      	ldr	r1, [r7, #8]
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f000 fff8 	bl	800aaac <UART_Start_Receive_IT>
 8009abc:	4603      	mov	r3, r0
 8009abe:	e000      	b.n	8009ac2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ac0:	2302      	movs	r3, #2
  }
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3728      	adds	r7, #40	; 0x28
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	40008000 	.word	0x40008000

08009ad0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08a      	sub	sp, #40	; 0x28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	4613      	mov	r3, r2
 8009adc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ae4:	2b20      	cmp	r3, #32
 8009ae6:	d167      	bne.n	8009bb8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d002      	beq.n	8009af4 <HAL_UART_Transmit_DMA+0x24>
 8009aee:	88fb      	ldrh	r3, [r7, #6]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d101      	bne.n	8009af8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	e060      	b.n	8009bba <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	88fa      	ldrh	r2, [r7, #6]
 8009b02:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	88fa      	ldrh	r2, [r7, #6]
 8009b0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2221      	movs	r2, #33	; 0x21
 8009b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d028      	beq.n	8009b78 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b2a:	4a26      	ldr	r2, [pc, #152]	; (8009bc4 <HAL_UART_Transmit_DMA+0xf4>)
 8009b2c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b32:	4a25      	ldr	r2, [pc, #148]	; (8009bc8 <HAL_UART_Transmit_DMA+0xf8>)
 8009b34:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b3a:	4a24      	ldr	r2, [pc, #144]	; (8009bcc <HAL_UART_Transmit_DMA+0xfc>)
 8009b3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b42:	2200      	movs	r2, #0
 8009b44:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b4e:	4619      	mov	r1, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3328      	adds	r3, #40	; 0x28
 8009b56:	461a      	mov	r2, r3
 8009b58:	88fb      	ldrh	r3, [r7, #6]
 8009b5a:	f7fb f955 	bl	8004e08 <HAL_DMA_Start_IT>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d009      	beq.n	8009b78 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2210      	movs	r2, #16
 8009b68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2220      	movs	r2, #32
 8009b70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	e020      	b.n	8009bba <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2240      	movs	r2, #64	; 0x40
 8009b7e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	3308      	adds	r3, #8
 8009b86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	e853 3f00 	ldrex	r3, [r3]
 8009b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b96:	627b      	str	r3, [r7, #36]	; 0x24
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	3308      	adds	r3, #8
 8009b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ba0:	623a      	str	r2, [r7, #32]
 8009ba2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba4:	69f9      	ldr	r1, [r7, #28]
 8009ba6:	6a3a      	ldr	r2, [r7, #32]
 8009ba8:	e841 2300 	strex	r3, r2, [r1]
 8009bac:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1e5      	bne.n	8009b80 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	e000      	b.n	8009bba <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009bb8:	2302      	movs	r3, #2
  }
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3728      	adds	r7, #40	; 0x28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	0800ae37 	.word	0x0800ae37
 8009bc8:	0800aed1 	.word	0x0800aed1
 8009bcc:	0800aeed 	.word	0x0800aeed

08009bd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b0ba      	sub	sp, #232	; 0xe8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009bf6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009bfa:	f640 030f 	movw	r3, #2063	; 0x80f
 8009bfe:	4013      	ands	r3, r2
 8009c00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009c04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d11b      	bne.n	8009c44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c10:	f003 0320 	and.w	r3, r3, #32
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d015      	beq.n	8009c44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c1c:	f003 0320 	and.w	r3, r3, #32
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d105      	bne.n	8009c30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d009      	beq.n	8009c44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f000 82e3 	beq.w	800a200 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	4798      	blx	r3
      }
      return;
 8009c42:	e2dd      	b.n	800a200 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009c44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f000 8123 	beq.w	8009e94 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009c4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009c52:	4b8d      	ldr	r3, [pc, #564]	; (8009e88 <HAL_UART_IRQHandler+0x2b8>)
 8009c54:	4013      	ands	r3, r2
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d106      	bne.n	8009c68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009c5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009c5e:	4b8b      	ldr	r3, [pc, #556]	; (8009e8c <HAL_UART_IRQHandler+0x2bc>)
 8009c60:	4013      	ands	r3, r2
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f000 8116 	beq.w	8009e94 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c6c:	f003 0301 	and.w	r3, r3, #1
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d011      	beq.n	8009c98 <HAL_UART_IRQHandler+0xc8>
 8009c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00b      	beq.n	8009c98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2201      	movs	r2, #1
 8009c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c8e:	f043 0201 	orr.w	r2, r3, #1
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c9c:	f003 0302 	and.w	r3, r3, #2
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d011      	beq.n	8009cc8 <HAL_UART_IRQHandler+0xf8>
 8009ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ca8:	f003 0301 	and.w	r3, r3, #1
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d00b      	beq.n	8009cc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cbe:	f043 0204 	orr.w	r2, r3, #4
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ccc:	f003 0304 	and.w	r3, r3, #4
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d011      	beq.n	8009cf8 <HAL_UART_IRQHandler+0x128>
 8009cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00b      	beq.n	8009cf8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2204      	movs	r2, #4
 8009ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cee:	f043 0202 	orr.w	r2, r3, #2
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cfc:	f003 0308 	and.w	r3, r3, #8
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d017      	beq.n	8009d34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d08:	f003 0320 	and.w	r3, r3, #32
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d105      	bne.n	8009d1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009d10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009d14:	4b5c      	ldr	r3, [pc, #368]	; (8009e88 <HAL_UART_IRQHandler+0x2b8>)
 8009d16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00b      	beq.n	8009d34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2208      	movs	r2, #8
 8009d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d2a:	f043 0208 	orr.w	r2, r3, #8
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d012      	beq.n	8009d66 <HAL_UART_IRQHandler+0x196>
 8009d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00c      	beq.n	8009d66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d5c:	f043 0220 	orr.w	r2, r3, #32
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 8249 	beq.w	800a204 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d76:	f003 0320 	and.w	r3, r3, #32
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d013      	beq.n	8009da6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d82:	f003 0320 	and.w	r3, r3, #32
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d105      	bne.n	8009d96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d007      	beq.n	8009da6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dba:	2b40      	cmp	r3, #64	; 0x40
 8009dbc:	d005      	beq.n	8009dca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009dbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009dc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d054      	beq.n	8009e74 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 ffce 	bl	800ad6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dda:	2b40      	cmp	r3, #64	; 0x40
 8009ddc:	d146      	bne.n	8009e6c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3308      	adds	r3, #8
 8009de4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009dec:	e853 3f00 	ldrex	r3, [r3]
 8009df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009df4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	3308      	adds	r3, #8
 8009e06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009e0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009e16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009e1a:	e841 2300 	strex	r3, r2, [r1]
 8009e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1d9      	bne.n	8009dde <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d017      	beq.n	8009e64 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e3a:	4a15      	ldr	r2, [pc, #84]	; (8009e90 <HAL_UART_IRQHandler+0x2c0>)
 8009e3c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fb f8bb 	bl	8004fc0 <HAL_DMA_Abort_IT>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d019      	beq.n	8009e84 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009e5e:	4610      	mov	r0, r2
 8009e60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e62:	e00f      	b.n	8009e84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 f9e0 	bl	800a22a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e6a:	e00b      	b.n	8009e84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f9dc 	bl	800a22a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e72:	e007      	b.n	8009e84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 f9d8 	bl	800a22a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009e82:	e1bf      	b.n	800a204 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e84:	bf00      	nop
    return;
 8009e86:	e1bd      	b.n	800a204 <HAL_UART_IRQHandler+0x634>
 8009e88:	10000001 	.word	0x10000001
 8009e8c:	04000120 	.word	0x04000120
 8009e90:	0800af6d 	.word	0x0800af6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	f040 8153 	bne.w	800a144 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ea2:	f003 0310 	and.w	r3, r3, #16
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 814c 	beq.w	800a144 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eb0:	f003 0310 	and.w	r3, r3, #16
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f000 8145 	beq.w	800a144 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2210      	movs	r2, #16
 8009ec0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ecc:	2b40      	cmp	r3, #64	; 0x40
 8009ece:	f040 80bb 	bne.w	800a048 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009ee0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f000 818f 	beq.w	800a208 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ef0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	f080 8187 	bcs.w	800a208 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0320 	and.w	r3, r3, #32
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f040 8087 	bne.w	800a026 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f24:	e853 3f00 	ldrex	r3, [r3]
 8009f28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009f46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009f4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009f52:	e841 2300 	strex	r3, r2, [r1]
 8009f56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1da      	bne.n	8009f18 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	3308      	adds	r3, #8
 8009f68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f6c:	e853 3f00 	ldrex	r3, [r3]
 8009f70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f74:	f023 0301 	bic.w	r3, r3, #1
 8009f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	3308      	adds	r3, #8
 8009f82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009f86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009f8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009f92:	e841 2300 	strex	r3, r2, [r1]
 8009f96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1e1      	bne.n	8009f62 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	3308      	adds	r3, #8
 8009fa4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fa8:	e853 3f00 	ldrex	r3, [r3]
 8009fac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3308      	adds	r3, #8
 8009fbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009fc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009fc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009fc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009fca:	e841 2300 	strex	r3, r2, [r1]
 8009fce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1e3      	bne.n	8009f9e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2220      	movs	r2, #32
 8009fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fec:	e853 3f00 	ldrex	r3, [r3]
 8009ff0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ff4:	f023 0310 	bic.w	r3, r3, #16
 8009ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	461a      	mov	r2, r3
 800a002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a006:	65bb      	str	r3, [r7, #88]	; 0x58
 800a008:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a00c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a00e:	e841 2300 	strex	r3, r2, [r1]
 800a012:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1e4      	bne.n	8009fe4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a020:	4618      	mov	r0, r3
 800a022:	f7fa ff6f 	bl	8004f04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2202      	movs	r2, #2
 800a02a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a038:	b29b      	uxth	r3, r3
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	4619      	mov	r1, r3
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 f8fb 	bl	800a23c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a046:	e0df      	b.n	800a208 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a054:	b29b      	uxth	r3, r3
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a062:	b29b      	uxth	r3, r3
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 80d1 	beq.w	800a20c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800a06a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f000 80cc 	beq.w	800a20c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07c:	e853 3f00 	ldrex	r3, [r3]
 800a080:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a084:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a088:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	461a      	mov	r2, r3
 800a092:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a096:	647b      	str	r3, [r7, #68]	; 0x44
 800a098:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a09c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a09e:	e841 2300 	strex	r3, r2, [r1]
 800a0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a0a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1e4      	bne.n	800a074 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	3308      	adds	r3, #8
 800a0b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	e853 3f00 	ldrex	r3, [r3]
 800a0b8:	623b      	str	r3, [r7, #32]
   return(result);
 800a0ba:	6a3b      	ldr	r3, [r7, #32]
 800a0bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0c0:	f023 0301 	bic.w	r3, r3, #1
 800a0c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3308      	adds	r3, #8
 800a0ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a0d2:	633a      	str	r2, [r7, #48]	; 0x30
 800a0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0da:	e841 2300 	strex	r3, r2, [r1]
 800a0de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1e1      	bne.n	800a0aa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2220      	movs	r2, #32
 800a0ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	e853 3f00 	ldrex	r3, [r3]
 800a106:	60fb      	str	r3, [r7, #12]
   return(result);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f023 0310 	bic.w	r3, r3, #16
 800a10e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a11c:	61fb      	str	r3, [r7, #28]
 800a11e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a120:	69b9      	ldr	r1, [r7, #24]
 800a122:	69fa      	ldr	r2, [r7, #28]
 800a124:	e841 2300 	strex	r3, r2, [r1]
 800a128:	617b      	str	r3, [r7, #20]
   return(result);
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1e4      	bne.n	800a0fa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2202      	movs	r2, #2
 800a134:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a136:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a13a:	4619      	mov	r1, r3
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 f87d 	bl	800a23c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a142:	e063      	b.n	800a20c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00e      	beq.n	800a16e <HAL_UART_IRQHandler+0x59e>
 800a150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d008      	beq.n	800a16e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a164:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f001 fc5e 	bl	800ba28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a16c:	e051      	b.n	800a212 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a16e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a176:	2b00      	cmp	r3, #0
 800a178:	d014      	beq.n	800a1a4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a17a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a17e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a182:	2b00      	cmp	r3, #0
 800a184:	d105      	bne.n	800a192 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a18a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d008      	beq.n	800a1a4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a196:	2b00      	cmp	r3, #0
 800a198:	d03a      	beq.n	800a210 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	4798      	blx	r3
    }
    return;
 800a1a2:	e035      	b.n	800a210 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a1a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d009      	beq.n	800a1c4 <HAL_UART_IRQHandler+0x5f4>
 800a1b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 feeb 	bl	800af98 <UART_EndTransmit_IT>
    return;
 800a1c2:	e026      	b.n	800a212 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a1c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d009      	beq.n	800a1e4 <HAL_UART_IRQHandler+0x614>
 800a1d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d003      	beq.n	800a1e4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f001 fc35 	bl	800ba4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1e2:	e016      	b.n	800a212 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a1e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d010      	beq.n	800a212 <HAL_UART_IRQHandler+0x642>
 800a1f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	da0c      	bge.n	800a212 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f001 fc1e 	bl	800ba3a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1fe:	e008      	b.n	800a212 <HAL_UART_IRQHandler+0x642>
      return;
 800a200:	bf00      	nop
 800a202:	e006      	b.n	800a212 <HAL_UART_IRQHandler+0x642>
    return;
 800a204:	bf00      	nop
 800a206:	e004      	b.n	800a212 <HAL_UART_IRQHandler+0x642>
      return;
 800a208:	bf00      	nop
 800a20a:	e002      	b.n	800a212 <HAL_UART_IRQHandler+0x642>
      return;
 800a20c:	bf00      	nop
 800a20e:	e000      	b.n	800a212 <HAL_UART_IRQHandler+0x642>
    return;
 800a210:	bf00      	nop
  }
}
 800a212:	37e8      	adds	r7, #232	; 0xe8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a220:	bf00      	nop
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	bc80      	pop	{r7}
 800a228:	4770      	bx	lr

0800a22a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a22a:	b480      	push	{r7}
 800a22c:	b083      	sub	sp, #12
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a232:	bf00      	nop
 800a234:	370c      	adds	r7, #12
 800a236:	46bd      	mov	sp, r7
 800a238:	bc80      	pop	{r7}
 800a23a:	4770      	bx	lr

0800a23c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	460b      	mov	r3, r1
 800a246:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bc80      	pop	{r7}
 800a250:	4770      	bx	lr
	...

0800a254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a258:	b08c      	sub	sp, #48	; 0x30
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a25e:	2300      	movs	r3, #0
 800a260:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	689a      	ldr	r2, [r3, #8]
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	431a      	orrs	r2, r3
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	431a      	orrs	r2, r3
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	69db      	ldr	r3, [r3, #28]
 800a278:	4313      	orrs	r3, r2
 800a27a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	4b94      	ldr	r3, [pc, #592]	; (800a4d4 <UART_SetConfig+0x280>)
 800a284:	4013      	ands	r3, r2
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	6812      	ldr	r2, [r2, #0]
 800a28a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a28c:	430b      	orrs	r3, r1
 800a28e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	68da      	ldr	r2, [r3, #12]
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	430a      	orrs	r2, r1
 800a2a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	699b      	ldr	r3, [r3, #24]
 800a2aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a89      	ldr	r2, [pc, #548]	; (800a4d8 <UART_SetConfig+0x284>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d004      	beq.n	800a2c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a2ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	6812      	ldr	r2, [r2, #0]
 800a2d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2d4:	430b      	orrs	r3, r1
 800a2d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2de:	f023 010f 	bic.w	r1, r3, #15
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	430a      	orrs	r2, r1
 800a2ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a7a      	ldr	r2, [pc, #488]	; (800a4dc <UART_SetConfig+0x288>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d127      	bne.n	800a348 <UART_SetConfig+0xf4>
 800a2f8:	2003      	movs	r0, #3
 800a2fa:	f7ff fb2c 	bl	8009956 <LL_RCC_GetUSARTClockSource>
 800a2fe:	4603      	mov	r3, r0
 800a300:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800a304:	2b03      	cmp	r3, #3
 800a306:	d81b      	bhi.n	800a340 <UART_SetConfig+0xec>
 800a308:	a201      	add	r2, pc, #4	; (adr r2, 800a310 <UART_SetConfig+0xbc>)
 800a30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30e:	bf00      	nop
 800a310:	0800a321 	.word	0x0800a321
 800a314:	0800a331 	.word	0x0800a331
 800a318:	0800a329 	.word	0x0800a329
 800a31c:	0800a339 	.word	0x0800a339
 800a320:	2301      	movs	r3, #1
 800a322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a326:	e080      	b.n	800a42a <UART_SetConfig+0x1d6>
 800a328:	2302      	movs	r3, #2
 800a32a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a32e:	e07c      	b.n	800a42a <UART_SetConfig+0x1d6>
 800a330:	2304      	movs	r3, #4
 800a332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a336:	e078      	b.n	800a42a <UART_SetConfig+0x1d6>
 800a338:	2308      	movs	r3, #8
 800a33a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a33e:	e074      	b.n	800a42a <UART_SetConfig+0x1d6>
 800a340:	2310      	movs	r3, #16
 800a342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a346:	e070      	b.n	800a42a <UART_SetConfig+0x1d6>
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a64      	ldr	r2, [pc, #400]	; (800a4e0 <UART_SetConfig+0x28c>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d138      	bne.n	800a3c4 <UART_SetConfig+0x170>
 800a352:	200c      	movs	r0, #12
 800a354:	f7ff faff 	bl	8009956 <LL_RCC_GetUSARTClockSource>
 800a358:	4603      	mov	r3, r0
 800a35a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800a35e:	2b0c      	cmp	r3, #12
 800a360:	d82c      	bhi.n	800a3bc <UART_SetConfig+0x168>
 800a362:	a201      	add	r2, pc, #4	; (adr r2, 800a368 <UART_SetConfig+0x114>)
 800a364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a368:	0800a39d 	.word	0x0800a39d
 800a36c:	0800a3bd 	.word	0x0800a3bd
 800a370:	0800a3bd 	.word	0x0800a3bd
 800a374:	0800a3bd 	.word	0x0800a3bd
 800a378:	0800a3ad 	.word	0x0800a3ad
 800a37c:	0800a3bd 	.word	0x0800a3bd
 800a380:	0800a3bd 	.word	0x0800a3bd
 800a384:	0800a3bd 	.word	0x0800a3bd
 800a388:	0800a3a5 	.word	0x0800a3a5
 800a38c:	0800a3bd 	.word	0x0800a3bd
 800a390:	0800a3bd 	.word	0x0800a3bd
 800a394:	0800a3bd 	.word	0x0800a3bd
 800a398:	0800a3b5 	.word	0x0800a3b5
 800a39c:	2300      	movs	r3, #0
 800a39e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3a2:	e042      	b.n	800a42a <UART_SetConfig+0x1d6>
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3aa:	e03e      	b.n	800a42a <UART_SetConfig+0x1d6>
 800a3ac:	2304      	movs	r3, #4
 800a3ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3b2:	e03a      	b.n	800a42a <UART_SetConfig+0x1d6>
 800a3b4:	2308      	movs	r3, #8
 800a3b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3ba:	e036      	b.n	800a42a <UART_SetConfig+0x1d6>
 800a3bc:	2310      	movs	r3, #16
 800a3be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3c2:	e032      	b.n	800a42a <UART_SetConfig+0x1d6>
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a43      	ldr	r2, [pc, #268]	; (800a4d8 <UART_SetConfig+0x284>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d12a      	bne.n	800a424 <UART_SetConfig+0x1d0>
 800a3ce:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a3d2:	f7ff fad2 	bl	800997a <LL_RCC_GetLPUARTClockSource>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3dc:	d01a      	beq.n	800a414 <UART_SetConfig+0x1c0>
 800a3de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3e2:	d81b      	bhi.n	800a41c <UART_SetConfig+0x1c8>
 800a3e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3e8:	d00c      	beq.n	800a404 <UART_SetConfig+0x1b0>
 800a3ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3ee:	d815      	bhi.n	800a41c <UART_SetConfig+0x1c8>
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d003      	beq.n	800a3fc <UART_SetConfig+0x1a8>
 800a3f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3f8:	d008      	beq.n	800a40c <UART_SetConfig+0x1b8>
 800a3fa:	e00f      	b.n	800a41c <UART_SetConfig+0x1c8>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a402:	e012      	b.n	800a42a <UART_SetConfig+0x1d6>
 800a404:	2302      	movs	r3, #2
 800a406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a40a:	e00e      	b.n	800a42a <UART_SetConfig+0x1d6>
 800a40c:	2304      	movs	r3, #4
 800a40e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a412:	e00a      	b.n	800a42a <UART_SetConfig+0x1d6>
 800a414:	2308      	movs	r3, #8
 800a416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a41a:	e006      	b.n	800a42a <UART_SetConfig+0x1d6>
 800a41c:	2310      	movs	r3, #16
 800a41e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a422:	e002      	b.n	800a42a <UART_SetConfig+0x1d6>
 800a424:	2310      	movs	r3, #16
 800a426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a2a      	ldr	r2, [pc, #168]	; (800a4d8 <UART_SetConfig+0x284>)
 800a430:	4293      	cmp	r3, r2
 800a432:	f040 80a4 	bne.w	800a57e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a436:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a43a:	2b08      	cmp	r3, #8
 800a43c:	d823      	bhi.n	800a486 <UART_SetConfig+0x232>
 800a43e:	a201      	add	r2, pc, #4	; (adr r2, 800a444 <UART_SetConfig+0x1f0>)
 800a440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a444:	0800a469 	.word	0x0800a469
 800a448:	0800a487 	.word	0x0800a487
 800a44c:	0800a471 	.word	0x0800a471
 800a450:	0800a487 	.word	0x0800a487
 800a454:	0800a477 	.word	0x0800a477
 800a458:	0800a487 	.word	0x0800a487
 800a45c:	0800a487 	.word	0x0800a487
 800a460:	0800a487 	.word	0x0800a487
 800a464:	0800a47f 	.word	0x0800a47f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a468:	f7fd fc12 	bl	8007c90 <HAL_RCC_GetPCLK1Freq>
 800a46c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a46e:	e010      	b.n	800a492 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a470:	4b1c      	ldr	r3, [pc, #112]	; (800a4e4 <UART_SetConfig+0x290>)
 800a472:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a474:	e00d      	b.n	800a492 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a476:	f7fd fb57 	bl	8007b28 <HAL_RCC_GetSysClockFreq>
 800a47a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a47c:	e009      	b.n	800a492 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a47e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a482:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a484:	e005      	b.n	800a492 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800a486:	2300      	movs	r3, #0
 800a488:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a490:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a494:	2b00      	cmp	r3, #0
 800a496:	f000 8137 	beq.w	800a708 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49e:	4a12      	ldr	r2, [pc, #72]	; (800a4e8 <UART_SetConfig+0x294>)
 800a4a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	685a      	ldr	r2, [r3, #4]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	005b      	lsls	r3, r3, #1
 800a4b6:	4413      	add	r3, r2
 800a4b8:	69ba      	ldr	r2, [r7, #24]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d305      	bcc.n	800a4ca <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4c4:	69ba      	ldr	r2, [r7, #24]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d910      	bls.n	800a4ec <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a4d0:	e11a      	b.n	800a708 <UART_SetConfig+0x4b4>
 800a4d2:	bf00      	nop
 800a4d4:	cfff69f3 	.word	0xcfff69f3
 800a4d8:	40008000 	.word	0x40008000
 800a4dc:	40013800 	.word	0x40013800
 800a4e0:	40004400 	.word	0x40004400
 800a4e4:	00f42400 	.word	0x00f42400
 800a4e8:	0801e4cc 	.word	0x0801e4cc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	60bb      	str	r3, [r7, #8]
 800a4f2:	60fa      	str	r2, [r7, #12]
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f8:	4a8e      	ldr	r2, [pc, #568]	; (800a734 <UART_SetConfig+0x4e0>)
 800a4fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	2200      	movs	r2, #0
 800a502:	603b      	str	r3, [r7, #0]
 800a504:	607a      	str	r2, [r7, #4]
 800a506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a50a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a50e:	f7f6 fc3d 	bl	8000d8c <__aeabi_uldivmod>
 800a512:	4602      	mov	r2, r0
 800a514:	460b      	mov	r3, r1
 800a516:	4610      	mov	r0, r2
 800a518:	4619      	mov	r1, r3
 800a51a:	f04f 0200 	mov.w	r2, #0
 800a51e:	f04f 0300 	mov.w	r3, #0
 800a522:	020b      	lsls	r3, r1, #8
 800a524:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a528:	0202      	lsls	r2, r0, #8
 800a52a:	6979      	ldr	r1, [r7, #20]
 800a52c:	6849      	ldr	r1, [r1, #4]
 800a52e:	0849      	lsrs	r1, r1, #1
 800a530:	2000      	movs	r0, #0
 800a532:	460c      	mov	r4, r1
 800a534:	4605      	mov	r5, r0
 800a536:	eb12 0804 	adds.w	r8, r2, r4
 800a53a:	eb43 0905 	adc.w	r9, r3, r5
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	469a      	mov	sl, r3
 800a546:	4693      	mov	fp, r2
 800a548:	4652      	mov	r2, sl
 800a54a:	465b      	mov	r3, fp
 800a54c:	4640      	mov	r0, r8
 800a54e:	4649      	mov	r1, r9
 800a550:	f7f6 fc1c 	bl	8000d8c <__aeabi_uldivmod>
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	4613      	mov	r3, r2
 800a55a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a55c:	6a3b      	ldr	r3, [r7, #32]
 800a55e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a562:	d308      	bcc.n	800a576 <UART_SetConfig+0x322>
 800a564:	6a3b      	ldr	r3, [r7, #32]
 800a566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a56a:	d204      	bcs.n	800a576 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6a3a      	ldr	r2, [r7, #32]
 800a572:	60da      	str	r2, [r3, #12]
 800a574:	e0c8      	b.n	800a708 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a57c:	e0c4      	b.n	800a708 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	69db      	ldr	r3, [r3, #28]
 800a582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a586:	d167      	bne.n	800a658 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800a588:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a58c:	2b08      	cmp	r3, #8
 800a58e:	d828      	bhi.n	800a5e2 <UART_SetConfig+0x38e>
 800a590:	a201      	add	r2, pc, #4	; (adr r2, 800a598 <UART_SetConfig+0x344>)
 800a592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a596:	bf00      	nop
 800a598:	0800a5bd 	.word	0x0800a5bd
 800a59c:	0800a5c5 	.word	0x0800a5c5
 800a5a0:	0800a5cd 	.word	0x0800a5cd
 800a5a4:	0800a5e3 	.word	0x0800a5e3
 800a5a8:	0800a5d3 	.word	0x0800a5d3
 800a5ac:	0800a5e3 	.word	0x0800a5e3
 800a5b0:	0800a5e3 	.word	0x0800a5e3
 800a5b4:	0800a5e3 	.word	0x0800a5e3
 800a5b8:	0800a5db 	.word	0x0800a5db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5bc:	f7fd fb68 	bl	8007c90 <HAL_RCC_GetPCLK1Freq>
 800a5c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a5c2:	e014      	b.n	800a5ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5c4:	f7fd fb76 	bl	8007cb4 <HAL_RCC_GetPCLK2Freq>
 800a5c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a5ca:	e010      	b.n	800a5ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5cc:	4b5a      	ldr	r3, [pc, #360]	; (800a738 <UART_SetConfig+0x4e4>)
 800a5ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a5d0:	e00d      	b.n	800a5ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5d2:	f7fd faa9 	bl	8007b28 <HAL_RCC_GetSysClockFreq>
 800a5d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a5d8:	e009      	b.n	800a5ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a5e0:	e005      	b.n	800a5ee <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a5ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f000 8089 	beq.w	800a708 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fa:	4a4e      	ldr	r2, [pc, #312]	; (800a734 <UART_SetConfig+0x4e0>)
 800a5fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a600:	461a      	mov	r2, r3
 800a602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a604:	fbb3 f3f2 	udiv	r3, r3, r2
 800a608:	005a      	lsls	r2, r3, #1
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	085b      	lsrs	r3, r3, #1
 800a610:	441a      	add	r2, r3
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	fbb2 f3f3 	udiv	r3, r2, r3
 800a61a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a61c:	6a3b      	ldr	r3, [r7, #32]
 800a61e:	2b0f      	cmp	r3, #15
 800a620:	d916      	bls.n	800a650 <UART_SetConfig+0x3fc>
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a628:	d212      	bcs.n	800a650 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a62a:	6a3b      	ldr	r3, [r7, #32]
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	f023 030f 	bic.w	r3, r3, #15
 800a632:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a634:	6a3b      	ldr	r3, [r7, #32]
 800a636:	085b      	lsrs	r3, r3, #1
 800a638:	b29b      	uxth	r3, r3
 800a63a:	f003 0307 	and.w	r3, r3, #7
 800a63e:	b29a      	uxth	r2, r3
 800a640:	8bfb      	ldrh	r3, [r7, #30]
 800a642:	4313      	orrs	r3, r2
 800a644:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	8bfa      	ldrh	r2, [r7, #30]
 800a64c:	60da      	str	r2, [r3, #12]
 800a64e:	e05b      	b.n	800a708 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a656:	e057      	b.n	800a708 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a658:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a65c:	2b08      	cmp	r3, #8
 800a65e:	d828      	bhi.n	800a6b2 <UART_SetConfig+0x45e>
 800a660:	a201      	add	r2, pc, #4	; (adr r2, 800a668 <UART_SetConfig+0x414>)
 800a662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a666:	bf00      	nop
 800a668:	0800a68d 	.word	0x0800a68d
 800a66c:	0800a695 	.word	0x0800a695
 800a670:	0800a69d 	.word	0x0800a69d
 800a674:	0800a6b3 	.word	0x0800a6b3
 800a678:	0800a6a3 	.word	0x0800a6a3
 800a67c:	0800a6b3 	.word	0x0800a6b3
 800a680:	0800a6b3 	.word	0x0800a6b3
 800a684:	0800a6b3 	.word	0x0800a6b3
 800a688:	0800a6ab 	.word	0x0800a6ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a68c:	f7fd fb00 	bl	8007c90 <HAL_RCC_GetPCLK1Freq>
 800a690:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a692:	e014      	b.n	800a6be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a694:	f7fd fb0e 	bl	8007cb4 <HAL_RCC_GetPCLK2Freq>
 800a698:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a69a:	e010      	b.n	800a6be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a69c:	4b26      	ldr	r3, [pc, #152]	; (800a738 <UART_SetConfig+0x4e4>)
 800a69e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a6a0:	e00d      	b.n	800a6be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6a2:	f7fd fa41 	bl	8007b28 <HAL_RCC_GetSysClockFreq>
 800a6a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a6a8:	e009      	b.n	800a6be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a6b0:	e005      	b.n	800a6be <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a6bc:	bf00      	nop
    }

    if (pclk != 0U)
 800a6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d021      	beq.n	800a708 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c8:	4a1a      	ldr	r2, [pc, #104]	; (800a734 <UART_SetConfig+0x4e0>)
 800a6ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	085b      	lsrs	r3, r3, #1
 800a6dc:	441a      	add	r2, r3
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6e8:	6a3b      	ldr	r3, [r7, #32]
 800a6ea:	2b0f      	cmp	r3, #15
 800a6ec:	d909      	bls.n	800a702 <UART_SetConfig+0x4ae>
 800a6ee:	6a3b      	ldr	r3, [r7, #32]
 800a6f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6f4:	d205      	bcs.n	800a702 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	60da      	str	r2, [r3, #12]
 800a700:	e002      	b.n	800a708 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	2201      	movs	r2, #1
 800a714:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	2200      	movs	r2, #0
 800a71c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2200      	movs	r2, #0
 800a722:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a724:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3730      	adds	r7, #48	; 0x30
 800a72c:	46bd      	mov	sp, r7
 800a72e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a732:	bf00      	nop
 800a734:	0801e4cc 	.word	0x0801e4cc
 800a738:	00f42400 	.word	0x00f42400

0800a73c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a748:	f003 0301 	and.w	r3, r3, #1
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00a      	beq.n	800a766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	430a      	orrs	r2, r1
 800a764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76a:	f003 0302 	and.w	r3, r3, #2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00a      	beq.n	800a788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	430a      	orrs	r2, r1
 800a786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78c:	f003 0304 	and.w	r3, r3, #4
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00a      	beq.n	800a7aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	430a      	orrs	r2, r1
 800a7a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ae:	f003 0308 	and.w	r3, r3, #8
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00a      	beq.n	800a7cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	430a      	orrs	r2, r1
 800a7ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d0:	f003 0310 	and.w	r3, r3, #16
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00a      	beq.n	800a7ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	430a      	orrs	r2, r1
 800a7ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f2:	f003 0320 	and.w	r3, r3, #32
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00a      	beq.n	800a810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	430a      	orrs	r2, r1
 800a80e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d01a      	beq.n	800a852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	430a      	orrs	r2, r1
 800a830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a83a:	d10a      	bne.n	800a852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	430a      	orrs	r2, r1
 800a850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00a      	beq.n	800a874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	430a      	orrs	r2, r1
 800a872:	605a      	str	r2, [r3, #4]
  }
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	bc80      	pop	{r7}
 800a87c:	4770      	bx	lr

0800a87e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b086      	sub	sp, #24
 800a882:	af02      	add	r7, sp, #8
 800a884:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a88e:	f7f7 ffb1 	bl	80027f4 <HAL_GetTick>
 800a892:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 0308 	and.w	r3, r3, #8
 800a89e:	2b08      	cmp	r3, #8
 800a8a0:	d10e      	bne.n	800a8c0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 f832 	bl	800a91a <UART_WaitOnFlagUntilTimeout>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d001      	beq.n	800a8c0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	e028      	b.n	800a912 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 0304 	and.w	r3, r3, #4
 800a8ca:	2b04      	cmp	r3, #4
 800a8cc:	d10e      	bne.n	800a8ec <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f81c 	bl	800a91a <UART_WaitOnFlagUntilTimeout>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d001      	beq.n	800a8ec <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	e012      	b.n	800a912 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2220      	movs	r2, #32
 800a8f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2220      	movs	r2, #32
 800a8f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b09c      	sub	sp, #112	; 0x70
 800a91e:	af00      	add	r7, sp, #0
 800a920:	60f8      	str	r0, [r7, #12]
 800a922:	60b9      	str	r1, [r7, #8]
 800a924:	603b      	str	r3, [r7, #0]
 800a926:	4613      	mov	r3, r2
 800a928:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a92a:	e0a9      	b.n	800aa80 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a92c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a932:	f000 80a5 	beq.w	800aa80 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a936:	f7f7 ff5d 	bl	80027f4 <HAL_GetTick>
 800a93a:	4602      	mov	r2, r0
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a942:	429a      	cmp	r2, r3
 800a944:	d302      	bcc.n	800a94c <UART_WaitOnFlagUntilTimeout+0x32>
 800a946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d140      	bne.n	800a9ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a954:	e853 3f00 	ldrex	r3, [r3]
 800a958:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a95a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a95c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a960:	667b      	str	r3, [r7, #100]	; 0x64
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	461a      	mov	r2, r3
 800a968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a96a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a96c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a970:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a972:	e841 2300 	strex	r3, r2, [r1]
 800a976:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1e6      	bne.n	800a94c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	3308      	adds	r3, #8
 800a984:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a988:	e853 3f00 	ldrex	r3, [r3]
 800a98c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a990:	f023 0301 	bic.w	r3, r3, #1
 800a994:	663b      	str	r3, [r7, #96]	; 0x60
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	3308      	adds	r3, #8
 800a99c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a99e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a9a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a9a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9a6:	e841 2300 	strex	r3, r2, [r1]
 800a9aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a9ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1e5      	bne.n	800a97e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2220      	movs	r2, #32
 800a9b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2220      	movs	r2, #32
 800a9be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e069      	b.n	800aaa2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0304 	and.w	r3, r3, #4
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d051      	beq.n	800aa80 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	69db      	ldr	r3, [r3, #28]
 800a9e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9ea:	d149      	bne.n	800aa80 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fe:	e853 3f00 	ldrex	r3, [r3]
 800aa02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	461a      	mov	r2, r3
 800aa12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa14:	637b      	str	r3, [r7, #52]	; 0x34
 800aa16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa1c:	e841 2300 	strex	r3, r2, [r1]
 800aa20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1e6      	bne.n	800a9f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	3308      	adds	r3, #8
 800aa2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	e853 3f00 	ldrex	r3, [r3]
 800aa36:	613b      	str	r3, [r7, #16]
   return(result);
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	f023 0301 	bic.w	r3, r3, #1
 800aa3e:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	3308      	adds	r3, #8
 800aa46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aa48:	623a      	str	r2, [r7, #32]
 800aa4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4c:	69f9      	ldr	r1, [r7, #28]
 800aa4e:	6a3a      	ldr	r2, [r7, #32]
 800aa50:	e841 2300 	strex	r3, r2, [r1]
 800aa54:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1e5      	bne.n	800aa28 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2220      	movs	r2, #32
 800aa60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2220      	movs	r2, #32
 800aa68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2220      	movs	r2, #32
 800aa70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800aa7c:	2303      	movs	r3, #3
 800aa7e:	e010      	b.n	800aaa2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	69da      	ldr	r2, [r3, #28]
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	4013      	ands	r3, r2
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	bf0c      	ite	eq
 800aa90:	2301      	moveq	r3, #1
 800aa92:	2300      	movne	r3, #0
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	461a      	mov	r2, r3
 800aa98:	79fb      	ldrb	r3, [r7, #7]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	f43f af46 	beq.w	800a92c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3770      	adds	r7, #112	; 0x70
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
	...

0800aaac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b0a3      	sub	sp, #140	; 0x8c
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	4613      	mov	r3, r2
 800aab8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	88fa      	ldrh	r2, [r7, #6]
 800aac4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	88fa      	ldrh	r2, [r7, #6]
 800aacc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	689b      	ldr	r3, [r3, #8]
 800aada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aade:	d10e      	bne.n	800aafe <UART_Start_Receive_IT+0x52>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d105      	bne.n	800aaf4 <UART_Start_Receive_IT+0x48>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f240 12ff 	movw	r2, #511	; 0x1ff
 800aaee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800aaf2:	e02d      	b.n	800ab50 <UART_Start_Receive_IT+0xa4>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	22ff      	movs	r2, #255	; 0xff
 800aaf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800aafc:	e028      	b.n	800ab50 <UART_Start_Receive_IT+0xa4>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d10d      	bne.n	800ab22 <UART_Start_Receive_IT+0x76>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d104      	bne.n	800ab18 <UART_Start_Receive_IT+0x6c>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	22ff      	movs	r2, #255	; 0xff
 800ab12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ab16:	e01b      	b.n	800ab50 <UART_Start_Receive_IT+0xa4>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	227f      	movs	r2, #127	; 0x7f
 800ab1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ab20:	e016      	b.n	800ab50 <UART_Start_Receive_IT+0xa4>
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab2a:	d10d      	bne.n	800ab48 <UART_Start_Receive_IT+0x9c>
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d104      	bne.n	800ab3e <UART_Start_Receive_IT+0x92>
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	227f      	movs	r2, #127	; 0x7f
 800ab38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ab3c:	e008      	b.n	800ab50 <UART_Start_Receive_IT+0xa4>
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	223f      	movs	r2, #63	; 0x3f
 800ab42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ab46:	e003      	b.n	800ab50 <UART_Start_Receive_IT+0xa4>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2200      	movs	r2, #0
 800ab54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2222      	movs	r2, #34	; 0x22
 800ab5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	3308      	adds	r3, #8
 800ab66:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab6a:	e853 3f00 	ldrex	r3, [r3]
 800ab6e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ab70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab72:	f043 0301 	orr.w	r3, r3, #1
 800ab76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	3308      	adds	r3, #8
 800ab80:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ab84:	673a      	str	r2, [r7, #112]	; 0x70
 800ab86:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab88:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ab8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ab8c:	e841 2300 	strex	r3, r2, [r1]
 800ab90:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800ab92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1e3      	bne.n	800ab60 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aba0:	d14f      	bne.n	800ac42 <UART_Start_Receive_IT+0x196>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aba8:	88fa      	ldrh	r2, [r7, #6]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d349      	bcc.n	800ac42 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abb6:	d107      	bne.n	800abc8 <UART_Start_Receive_IT+0x11c>
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d103      	bne.n	800abc8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	4a46      	ldr	r2, [pc, #280]	; (800acdc <UART_Start_Receive_IT+0x230>)
 800abc4:	675a      	str	r2, [r3, #116]	; 0x74
 800abc6:	e002      	b.n	800abce <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	4a45      	ldr	r2, [pc, #276]	; (800ace0 <UART_Start_Receive_IT+0x234>)
 800abcc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d01a      	beq.n	800ac0c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abde:	e853 3f00 	ldrex	r3, [r3]
 800abe2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800abe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	461a      	mov	r2, r3
 800abf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800abf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abfa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800abfe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ac00:	e841 2300 	strex	r3, r2, [r1]
 800ac04:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ac06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1e4      	bne.n	800abd6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	3308      	adds	r3, #8
 800ac12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac16:	e853 3f00 	ldrex	r3, [r3]
 800ac1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac22:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	3308      	adds	r3, #8
 800ac2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ac2c:	64ba      	str	r2, [r7, #72]	; 0x48
 800ac2e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac34:	e841 2300 	strex	r3, r2, [r1]
 800ac38:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ac3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1e5      	bne.n	800ac0c <UART_Start_Receive_IT+0x160>
 800ac40:	e046      	b.n	800acd0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac4a:	d107      	bne.n	800ac5c <UART_Start_Receive_IT+0x1b0>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	691b      	ldr	r3, [r3, #16]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d103      	bne.n	800ac5c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	4a23      	ldr	r2, [pc, #140]	; (800ace4 <UART_Start_Receive_IT+0x238>)
 800ac58:	675a      	str	r2, [r3, #116]	; 0x74
 800ac5a:	e002      	b.n	800ac62 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	4a22      	ldr	r2, [pc, #136]	; (800ace8 <UART_Start_Receive_IT+0x23c>)
 800ac60:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d019      	beq.n	800ac9e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac72:	e853 3f00 	ldrex	r3, [r3]
 800ac76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ac7e:	677b      	str	r3, [r7, #116]	; 0x74
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	461a      	mov	r2, r3
 800ac86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac88:	637b      	str	r3, [r7, #52]	; 0x34
 800ac8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac90:	e841 2300 	strex	r3, r2, [r1]
 800ac94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ac96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1e6      	bne.n	800ac6a <UART_Start_Receive_IT+0x1be>
 800ac9c:	e018      	b.n	800acd0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	e853 3f00 	ldrex	r3, [r3]
 800acaa:	613b      	str	r3, [r7, #16]
   return(result);
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	f043 0320 	orr.w	r3, r3, #32
 800acb2:	67bb      	str	r3, [r7, #120]	; 0x78
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	461a      	mov	r2, r3
 800acba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acbc:	623b      	str	r3, [r7, #32]
 800acbe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc0:	69f9      	ldr	r1, [r7, #28]
 800acc2:	6a3a      	ldr	r2, [r7, #32]
 800acc4:	e841 2300 	strex	r3, r2, [r1]
 800acc8:	61bb      	str	r3, [r7, #24]
   return(result);
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d1e6      	bne.n	800ac9e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	378c      	adds	r7, #140	; 0x8c
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bc80      	pop	{r7}
 800acda:	4770      	bx	lr
 800acdc:	0800b6c1 	.word	0x0800b6c1
 800ace0:	0800b361 	.word	0x0800b361
 800ace4:	0800b1a9 	.word	0x0800b1a9
 800ace8:	0800aff1 	.word	0x0800aff1

0800acec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800acec:	b480      	push	{r7}
 800acee:	b08f      	sub	sp, #60	; 0x3c
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfa:	6a3b      	ldr	r3, [r7, #32]
 800acfc:	e853 3f00 	ldrex	r3, [r3]
 800ad00:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ad08:	637b      	str	r3, [r7, #52]	; 0x34
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad14:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad1a:	e841 2300 	strex	r3, r2, [r1]
 800ad1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d1e6      	bne.n	800acf4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3308      	adds	r3, #8
 800ad2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	e853 3f00 	ldrex	r3, [r3]
 800ad34:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ad3c:	633b      	str	r3, [r7, #48]	; 0x30
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	3308      	adds	r3, #8
 800ad44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad46:	61ba      	str	r2, [r7, #24]
 800ad48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4a:	6979      	ldr	r1, [r7, #20]
 800ad4c:	69ba      	ldr	r2, [r7, #24]
 800ad4e:	e841 2300 	strex	r3, r2, [r1]
 800ad52:	613b      	str	r3, [r7, #16]
   return(result);
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1e5      	bne.n	800ad26 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2220      	movs	r2, #32
 800ad5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800ad62:	bf00      	nop
 800ad64:	373c      	adds	r7, #60	; 0x3c
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bc80      	pop	{r7}
 800ad6a:	4770      	bx	lr

0800ad6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b095      	sub	sp, #84	; 0x54
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7c:	e853 3f00 	ldrex	r3, [r3]
 800ad80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	461a      	mov	r2, r3
 800ad90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad92:	643b      	str	r3, [r7, #64]	; 0x40
 800ad94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad9a:	e841 2300 	strex	r3, r2, [r1]
 800ad9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ada0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1e6      	bne.n	800ad74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	3308      	adds	r3, #8
 800adac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adae:	6a3b      	ldr	r3, [r7, #32]
 800adb0:	e853 3f00 	ldrex	r3, [r3]
 800adb4:	61fb      	str	r3, [r7, #28]
   return(result);
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800adbc:	f023 0301 	bic.w	r3, r3, #1
 800adc0:	64bb      	str	r3, [r7, #72]	; 0x48
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	3308      	adds	r3, #8
 800adc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800adcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800add0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800add2:	e841 2300 	strex	r3, r2, [r1]
 800add6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800add8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1e3      	bne.n	800ada6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d118      	bne.n	800ae18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	e853 3f00 	ldrex	r3, [r3]
 800adf2:	60bb      	str	r3, [r7, #8]
   return(result);
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	f023 0310 	bic.w	r3, r3, #16
 800adfa:	647b      	str	r3, [r7, #68]	; 0x44
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	461a      	mov	r2, r3
 800ae02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae04:	61bb      	str	r3, [r7, #24]
 800ae06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae08:	6979      	ldr	r1, [r7, #20]
 800ae0a:	69ba      	ldr	r2, [r7, #24]
 800ae0c:	e841 2300 	strex	r3, r2, [r1]
 800ae10:	613b      	str	r3, [r7, #16]
   return(result);
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d1e6      	bne.n	800ade6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2220      	movs	r2, #32
 800ae1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ae2c:	bf00      	nop
 800ae2e:	3754      	adds	r7, #84	; 0x54
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bc80      	pop	{r7}
 800ae34:	4770      	bx	lr

0800ae36 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b090      	sub	sp, #64	; 0x40
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae42:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f003 0320 	and.w	r3, r3, #32
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d137      	bne.n	800aec2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ae52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae54:	2200      	movs	r2, #0
 800ae56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	3308      	adds	r3, #8
 800ae60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae64:	e853 3f00 	ldrex	r3, [r3]
 800ae68:	623b      	str	r3, [r7, #32]
   return(result);
 800ae6a:	6a3b      	ldr	r3, [r7, #32]
 800ae6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae70:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	3308      	adds	r3, #8
 800ae78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae7a:	633a      	str	r2, [r7, #48]	; 0x30
 800ae7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae82:	e841 2300 	strex	r3, r2, [r1]
 800ae86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1e5      	bne.n	800ae5a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	e853 3f00 	ldrex	r3, [r3]
 800ae9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aea2:	637b      	str	r3, [r7, #52]	; 0x34
 800aea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	461a      	mov	r2, r3
 800aeaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeac:	61fb      	str	r3, [r7, #28]
 800aeae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb0:	69b9      	ldr	r1, [r7, #24]
 800aeb2:	69fa      	ldr	r2, [r7, #28]
 800aeb4:	e841 2300 	strex	r3, r2, [r1]
 800aeb8:	617b      	str	r3, [r7, #20]
   return(result);
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d1e6      	bne.n	800ae8e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aec0:	e002      	b.n	800aec8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800aec2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aec4:	f7f8 fb34 	bl	8003530 <HAL_UART_TxCpltCallback>
}
 800aec8:	bf00      	nop
 800aeca:	3740      	adds	r7, #64	; 0x40
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aedc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f7ff f99a 	bl	800a218 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aee4:	bf00      	nop
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b086      	sub	sp, #24
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af00:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af08:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af14:	2b80      	cmp	r3, #128	; 0x80
 800af16:	d109      	bne.n	800af2c <UART_DMAError+0x40>
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	2b21      	cmp	r3, #33	; 0x21
 800af1c:	d106      	bne.n	800af2c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	2200      	movs	r2, #0
 800af22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800af26:	6978      	ldr	r0, [r7, #20]
 800af28:	f7ff fee0 	bl	800acec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	689b      	ldr	r3, [r3, #8]
 800af32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af36:	2b40      	cmp	r3, #64	; 0x40
 800af38:	d109      	bne.n	800af4e <UART_DMAError+0x62>
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2b22      	cmp	r3, #34	; 0x22
 800af3e:	d106      	bne.n	800af4e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	2200      	movs	r2, #0
 800af44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800af48:	6978      	ldr	r0, [r7, #20]
 800af4a:	f7ff ff0f 	bl	800ad6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af54:	f043 0210 	orr.w	r2, r3, #16
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af5e:	6978      	ldr	r0, [r7, #20]
 800af60:	f7ff f963 	bl	800a22a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af64:	bf00      	nop
 800af66:	3718      	adds	r7, #24
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2200      	movs	r2, #0
 800af86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f7ff f94d 	bl	800a22a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af90:	bf00      	nop
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b088      	sub	sp, #32
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	e853 3f00 	ldrex	r3, [r3]
 800afac:	60bb      	str	r3, [r7, #8]
   return(result);
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afb4:	61fb      	str	r3, [r7, #28]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	461a      	mov	r2, r3
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	61bb      	str	r3, [r7, #24]
 800afc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc2:	6979      	ldr	r1, [r7, #20]
 800afc4:	69ba      	ldr	r2, [r7, #24]
 800afc6:	e841 2300 	strex	r3, r2, [r1]
 800afca:	613b      	str	r3, [r7, #16]
   return(result);
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1e6      	bne.n	800afa0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2220      	movs	r2, #32
 800afd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f7f8 faa5 	bl	8003530 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afe6:	bf00      	nop
 800afe8:	3720      	adds	r7, #32
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
	...

0800aff0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b09c      	sub	sp, #112	; 0x70
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800affe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b008:	2b22      	cmp	r3, #34	; 0x22
 800b00a:	f040 80be 	bne.w	800b18a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b014:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b018:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b01c:	b2d9      	uxtb	r1, r3
 800b01e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b022:	b2da      	uxtb	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b028:	400a      	ands	r2, r1
 800b02a:	b2d2      	uxtb	r2, r2
 800b02c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b032:	1c5a      	adds	r2, r3, #1
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b03e:	b29b      	uxth	r3, r3
 800b040:	3b01      	subs	r3, #1
 800b042:	b29a      	uxth	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b050:	b29b      	uxth	r3, r3
 800b052:	2b00      	cmp	r3, #0
 800b054:	f040 80a1 	bne.w	800b19a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b05e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b060:	e853 3f00 	ldrex	r3, [r3]
 800b064:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b068:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b06c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	461a      	mov	r2, r3
 800b074:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b076:	65bb      	str	r3, [r7, #88]	; 0x58
 800b078:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b07c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b07e:	e841 2300 	strex	r3, r2, [r1]
 800b082:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1e6      	bne.n	800b058 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	3308      	adds	r3, #8
 800b090:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b094:	e853 3f00 	ldrex	r3, [r3]
 800b098:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b09c:	f023 0301 	bic.w	r3, r3, #1
 800b0a0:	667b      	str	r3, [r7, #100]	; 0x64
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	3308      	adds	r3, #8
 800b0a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b0aa:	647a      	str	r2, [r7, #68]	; 0x44
 800b0ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0b2:	e841 2300 	strex	r3, r2, [r1]
 800b0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d1e5      	bne.n	800b08a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2220      	movs	r2, #32
 800b0c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a33      	ldr	r2, [pc, #204]	; (800b1a4 <UART_RxISR_8BIT+0x1b4>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d01f      	beq.n	800b11c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d018      	beq.n	800b11c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f2:	e853 3f00 	ldrex	r3, [r3]
 800b0f6:	623b      	str	r3, [r7, #32]
   return(result);
 800b0f8:	6a3b      	ldr	r3, [r7, #32]
 800b0fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b0fe:	663b      	str	r3, [r7, #96]	; 0x60
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	461a      	mov	r2, r3
 800b106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b108:	633b      	str	r3, [r7, #48]	; 0x30
 800b10a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b10e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b110:	e841 2300 	strex	r3, r2, [r1]
 800b114:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d1e6      	bne.n	800b0ea <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b120:	2b01      	cmp	r3, #1
 800b122:	d12e      	bne.n	800b182 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	e853 3f00 	ldrex	r3, [r3]
 800b136:	60fb      	str	r3, [r7, #12]
   return(result);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f023 0310 	bic.w	r3, r3, #16
 800b13e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	461a      	mov	r2, r3
 800b146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b148:	61fb      	str	r3, [r7, #28]
 800b14a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14c:	69b9      	ldr	r1, [r7, #24]
 800b14e:	69fa      	ldr	r2, [r7, #28]
 800b150:	e841 2300 	strex	r3, r2, [r1]
 800b154:	617b      	str	r3, [r7, #20]
   return(result);
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1e6      	bne.n	800b12a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	69db      	ldr	r3, [r3, #28]
 800b162:	f003 0310 	and.w	r3, r3, #16
 800b166:	2b10      	cmp	r3, #16
 800b168:	d103      	bne.n	800b172 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2210      	movs	r2, #16
 800b170:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b178:	4619      	mov	r1, r3
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f7ff f85e 	bl	800a23c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b180:	e00b      	b.n	800b19a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f7f8 f9ea 	bl	800355c <HAL_UART_RxCpltCallback>
}
 800b188:	e007      	b.n	800b19a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	699a      	ldr	r2, [r3, #24]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f042 0208 	orr.w	r2, r2, #8
 800b198:	619a      	str	r2, [r3, #24]
}
 800b19a:	bf00      	nop
 800b19c:	3770      	adds	r7, #112	; 0x70
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	40008000 	.word	0x40008000

0800b1a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b09c      	sub	sp, #112	; 0x70
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b1b6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1c0:	2b22      	cmp	r3, #34	; 0x22
 800b1c2:	f040 80be 	bne.w	800b342 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1d4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b1d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800b1da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b1de:	4013      	ands	r3, r2
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b1e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ea:	1c9a      	adds	r2, r3, #2
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b208:	b29b      	uxth	r3, r3
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f040 80a1 	bne.w	800b352 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b218:	e853 3f00 	ldrex	r3, [r3]
 800b21c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b21e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b220:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b224:	667b      	str	r3, [r7, #100]	; 0x64
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	461a      	mov	r2, r3
 800b22c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b22e:	657b      	str	r3, [r7, #84]	; 0x54
 800b230:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b232:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b234:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b236:	e841 2300 	strex	r3, r2, [r1]
 800b23a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b23c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1e6      	bne.n	800b210 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	3308      	adds	r3, #8
 800b248:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b24c:	e853 3f00 	ldrex	r3, [r3]
 800b250:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b254:	f023 0301 	bic.w	r3, r3, #1
 800b258:	663b      	str	r3, [r7, #96]	; 0x60
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	3308      	adds	r3, #8
 800b260:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b262:	643a      	str	r2, [r7, #64]	; 0x40
 800b264:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b266:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b268:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b26a:	e841 2300 	strex	r3, r2, [r1]
 800b26e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1e5      	bne.n	800b242 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2220      	movs	r2, #32
 800b27a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a33      	ldr	r2, [pc, #204]	; (800b35c <UART_RxISR_16BIT+0x1b4>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d01f      	beq.n	800b2d4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d018      	beq.n	800b2d4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a8:	6a3b      	ldr	r3, [r7, #32]
 800b2aa:	e853 3f00 	ldrex	r3, [r3]
 800b2ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b2b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	461a      	mov	r2, r3
 800b2be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2c2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2c8:	e841 2300 	strex	r3, r2, [r1]
 800b2cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d1e6      	bne.n	800b2a2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d12e      	bne.n	800b33a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	e853 3f00 	ldrex	r3, [r3]
 800b2ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	f023 0310 	bic.w	r3, r3, #16
 800b2f6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b300:	61bb      	str	r3, [r7, #24]
 800b302:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b304:	6979      	ldr	r1, [r7, #20]
 800b306:	69ba      	ldr	r2, [r7, #24]
 800b308:	e841 2300 	strex	r3, r2, [r1]
 800b30c:	613b      	str	r3, [r7, #16]
   return(result);
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1e6      	bne.n	800b2e2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	69db      	ldr	r3, [r3, #28]
 800b31a:	f003 0310 	and.w	r3, r3, #16
 800b31e:	2b10      	cmp	r3, #16
 800b320:	d103      	bne.n	800b32a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2210      	movs	r2, #16
 800b328:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b330:	4619      	mov	r1, r3
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7fe ff82 	bl	800a23c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b338:	e00b      	b.n	800b352 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7f8 f90e 	bl	800355c <HAL_UART_RxCpltCallback>
}
 800b340:	e007      	b.n	800b352 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	699a      	ldr	r2, [r3, #24]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f042 0208 	orr.w	r2, r2, #8
 800b350:	619a      	str	r2, [r3, #24]
}
 800b352:	bf00      	nop
 800b354:	3770      	adds	r7, #112	; 0x70
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	40008000 	.word	0x40008000

0800b360 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b0ac      	sub	sp, #176	; 0xb0
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b36e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	69db      	ldr	r3, [r3, #28]
 800b378:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b396:	2b22      	cmp	r3, #34	; 0x22
 800b398:	f040 8182 	bne.w	800b6a0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b3a2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b3a6:	e125      	b.n	800b5f4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ae:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b3b2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b3b6:	b2d9      	uxtb	r1, r3
 800b3b8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b3bc:	b2da      	uxtb	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3c2:	400a      	ands	r2, r1
 800b3c4:	b2d2      	uxtb	r2, r2
 800b3c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3cc:	1c5a      	adds	r2, r3, #1
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	69db      	ldr	r3, [r3, #28]
 800b3ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b3ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3f2:	f003 0307 	and.w	r3, r3, #7
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d053      	beq.n	800b4a2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b3fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3fe:	f003 0301 	and.w	r3, r3, #1
 800b402:	2b00      	cmp	r3, #0
 800b404:	d011      	beq.n	800b42a <UART_RxISR_8BIT_FIFOEN+0xca>
 800b406:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b40a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d00b      	beq.n	800b42a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2201      	movs	r2, #1
 800b418:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b420:	f043 0201 	orr.w	r2, r3, #1
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b42a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b42e:	f003 0302 	and.w	r3, r3, #2
 800b432:	2b00      	cmp	r3, #0
 800b434:	d011      	beq.n	800b45a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b43a:	f003 0301 	and.w	r3, r3, #1
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00b      	beq.n	800b45a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	2202      	movs	r2, #2
 800b448:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b450:	f043 0204 	orr.w	r2, r3, #4
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b45a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b45e:	f003 0304 	and.w	r3, r3, #4
 800b462:	2b00      	cmp	r3, #0
 800b464:	d011      	beq.n	800b48a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b46a:	f003 0301 	and.w	r3, r3, #1
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00b      	beq.n	800b48a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2204      	movs	r2, #4
 800b478:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b480:	f043 0202 	orr.w	r2, r3, #2
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b490:	2b00      	cmp	r3, #0
 800b492:	d006      	beq.n	800b4a2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7fe fec8 	bl	800a22a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f040 80a2 	bne.w	800b5f4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b4b8:	e853 3f00 	ldrex	r3, [r3]
 800b4bc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800b4be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b4d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b4d4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b4d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b4da:	e841 2300 	strex	r3, r2, [r1]
 800b4de:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800b4e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d1e4      	bne.n	800b4b0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	3308      	adds	r3, #8
 800b4ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4f0:	e853 3f00 	ldrex	r3, [r3]
 800b4f4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b4f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4fc:	f023 0301 	bic.w	r3, r3, #1
 800b500:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	3308      	adds	r3, #8
 800b50a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b50e:	66ba      	str	r2, [r7, #104]	; 0x68
 800b510:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b512:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b514:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b516:	e841 2300 	strex	r3, r2, [r1]
 800b51a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b51c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1e1      	bne.n	800b4e6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2220      	movs	r2, #32
 800b526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a5f      	ldr	r2, [pc, #380]	; (800b6b8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d021      	beq.n	800b584 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d01a      	beq.n	800b584 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b556:	e853 3f00 	ldrex	r3, [r3]
 800b55a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b55c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b55e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	461a      	mov	r2, r3
 800b56c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b570:	657b      	str	r3, [r7, #84]	; 0x54
 800b572:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b574:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b576:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b578:	e841 2300 	strex	r3, r2, [r1]
 800b57c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b57e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1e4      	bne.n	800b54e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d130      	bne.n	800b5ee <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2200      	movs	r2, #0
 800b590:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b59a:	e853 3f00 	ldrex	r3, [r3]
 800b59e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a2:	f023 0310 	bic.w	r3, r3, #16
 800b5a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5b4:	643b      	str	r3, [r7, #64]	; 0x40
 800b5b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b5ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b5bc:	e841 2300 	strex	r3, r2, [r1]
 800b5c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d1e4      	bne.n	800b592 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	69db      	ldr	r3, [r3, #28]
 800b5ce:	f003 0310 	and.w	r3, r3, #16
 800b5d2:	2b10      	cmp	r3, #16
 800b5d4:	d103      	bne.n	800b5de <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	2210      	movs	r2, #16
 800b5dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f7fe fe28 	bl	800a23c <HAL_UARTEx_RxEventCallback>
 800b5ec:	e002      	b.n	800b5f4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f7f7 ffb4 	bl	800355c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b5f4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d006      	beq.n	800b60a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800b5fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b600:	f003 0320 	and.w	r3, r3, #32
 800b604:	2b00      	cmp	r3, #0
 800b606:	f47f aecf 	bne.w	800b3a8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b610:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b614:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d049      	beq.n	800b6b0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b622:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800b626:	429a      	cmp	r2, r3
 800b628:	d242      	bcs.n	800b6b0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	3308      	adds	r3, #8
 800b630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b632:	6a3b      	ldr	r3, [r7, #32]
 800b634:	e853 3f00 	ldrex	r3, [r3]
 800b638:	61fb      	str	r3, [r7, #28]
   return(result);
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	3308      	adds	r3, #8
 800b64a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b64e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b650:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b656:	e841 2300 	strex	r3, r2, [r1]
 800b65a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d1e3      	bne.n	800b62a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a15      	ldr	r2, [pc, #84]	; (800b6bc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b666:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	e853 3f00 	ldrex	r3, [r3]
 800b674:	60bb      	str	r3, [r7, #8]
   return(result);
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	f043 0320 	orr.w	r3, r3, #32
 800b67c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	461a      	mov	r2, r3
 800b686:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b68a:	61bb      	str	r3, [r7, #24]
 800b68c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68e:	6979      	ldr	r1, [r7, #20]
 800b690:	69ba      	ldr	r2, [r7, #24]
 800b692:	e841 2300 	strex	r3, r2, [r1]
 800b696:	613b      	str	r3, [r7, #16]
   return(result);
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d1e4      	bne.n	800b668 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b69e:	e007      	b.n	800b6b0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	699a      	ldr	r2, [r3, #24]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f042 0208 	orr.w	r2, r2, #8
 800b6ae:	619a      	str	r2, [r3, #24]
}
 800b6b0:	bf00      	nop
 800b6b2:	37b0      	adds	r7, #176	; 0xb0
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	40008000 	.word	0x40008000
 800b6bc:	0800aff1 	.word	0x0800aff1

0800b6c0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b0ae      	sub	sp, #184	; 0xb8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b6ce:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	69db      	ldr	r3, [r3, #28]
 800b6d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6f6:	2b22      	cmp	r3, #34	; 0x22
 800b6f8:	f040 8186 	bne.w	800ba08 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b702:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b706:	e129      	b.n	800b95c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b71a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800b71e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800b722:	4013      	ands	r3, r2
 800b724:	b29a      	uxth	r2, r3
 800b726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b72a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b730:	1c9a      	adds	r2, r3, #2
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	3b01      	subs	r3, #1
 800b740:	b29a      	uxth	r2, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	69db      	ldr	r3, [r3, #28]
 800b74e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b752:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b756:	f003 0307 	and.w	r3, r3, #7
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d053      	beq.n	800b806 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b75e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b762:	f003 0301 	and.w	r3, r3, #1
 800b766:	2b00      	cmp	r3, #0
 800b768:	d011      	beq.n	800b78e <UART_RxISR_16BIT_FIFOEN+0xce>
 800b76a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b76e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00b      	beq.n	800b78e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2201      	movs	r2, #1
 800b77c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b784:	f043 0201 	orr.w	r2, r3, #1
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b78e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b792:	f003 0302 	and.w	r3, r3, #2
 800b796:	2b00      	cmp	r3, #0
 800b798:	d011      	beq.n	800b7be <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b79a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b79e:	f003 0301 	and.w	r3, r3, #1
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00b      	beq.n	800b7be <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2202      	movs	r2, #2
 800b7ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7b4:	f043 0204 	orr.w	r2, r3, #4
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b7c2:	f003 0304 	and.w	r3, r3, #4
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d011      	beq.n	800b7ee <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b7ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b7ce:	f003 0301 	and.w	r3, r3, #1
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00b      	beq.n	800b7ee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2204      	movs	r2, #4
 800b7dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7e4:	f043 0202 	orr.w	r2, r3, #2
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d006      	beq.n	800b806 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7fe fd16 	bl	800a22a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f040 80a4 	bne.w	800b95c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b81a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b81c:	e853 3f00 	ldrex	r3, [r3]
 800b820:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	461a      	mov	r2, r3
 800b832:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b836:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b83a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b83c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b83e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b842:	e841 2300 	strex	r3, r2, [r1]
 800b846:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1e2      	bne.n	800b814 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	3308      	adds	r3, #8
 800b854:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b858:	e853 3f00 	ldrex	r3, [r3]
 800b85c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b85e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b864:	f023 0301 	bic.w	r3, r3, #1
 800b868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	3308      	adds	r3, #8
 800b872:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b876:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b878:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b87c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b87e:	e841 2300 	strex	r3, r2, [r1]
 800b882:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1e1      	bne.n	800b84e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2220      	movs	r2, #32
 800b88e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a5f      	ldr	r2, [pc, #380]	; (800ba20 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d021      	beq.n	800b8ec <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d01a      	beq.n	800b8ec <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8be:	e853 3f00 	ldrex	r3, [r3]
 800b8c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b8c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b8ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b8d8:	65bb      	str	r3, [r7, #88]	; 0x58
 800b8da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b8de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8e0:	e841 2300 	strex	r3, r2, [r1]
 800b8e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b8e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1e4      	bne.n	800b8b6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d130      	bne.n	800b956 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b902:	e853 3f00 	ldrex	r3, [r3]
 800b906:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b90a:	f023 0310 	bic.w	r3, r3, #16
 800b90e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	461a      	mov	r2, r3
 800b918:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b91c:	647b      	str	r3, [r7, #68]	; 0x44
 800b91e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b920:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b922:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b924:	e841 2300 	strex	r3, r2, [r1]
 800b928:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b92a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1e4      	bne.n	800b8fa <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	69db      	ldr	r3, [r3, #28]
 800b936:	f003 0310 	and.w	r3, r3, #16
 800b93a:	2b10      	cmp	r3, #16
 800b93c:	d103      	bne.n	800b946 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2210      	movs	r2, #16
 800b944:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b94c:	4619      	mov	r1, r3
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f7fe fc74 	bl	800a23c <HAL_UARTEx_RxEventCallback>
 800b954:	e002      	b.n	800b95c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f7f7 fe00 	bl	800355c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b95c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800b960:	2b00      	cmp	r3, #0
 800b962:	d006      	beq.n	800b972 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800b964:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b968:	f003 0320 	and.w	r3, r3, #32
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f47f aecb 	bne.w	800b708 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b978:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b97c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b980:	2b00      	cmp	r3, #0
 800b982:	d049      	beq.n	800ba18 <UART_RxISR_16BIT_FIFOEN+0x358>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b98a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800b98e:	429a      	cmp	r2, r3
 800b990:	d242      	bcs.n	800ba18 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	3308      	adds	r3, #8
 800b998:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99c:	e853 3f00 	ldrex	r3, [r3]
 800b9a0:	623b      	str	r3, [r7, #32]
   return(result);
 800b9a2:	6a3b      	ldr	r3, [r7, #32]
 800b9a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	3308      	adds	r3, #8
 800b9b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b9b6:	633a      	str	r2, [r7, #48]	; 0x30
 800b9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9be:	e841 2300 	strex	r3, r2, [r1]
 800b9c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d1e3      	bne.n	800b992 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4a15      	ldr	r2, [pc, #84]	; (800ba24 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b9ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	e853 3f00 	ldrex	r3, [r3]
 800b9dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f043 0320 	orr.w	r3, r3, #32
 800b9e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b9f2:	61fb      	str	r3, [r7, #28]
 800b9f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f6:	69b9      	ldr	r1, [r7, #24]
 800b9f8:	69fa      	ldr	r2, [r7, #28]
 800b9fa:	e841 2300 	strex	r3, r2, [r1]
 800b9fe:	617b      	str	r3, [r7, #20]
   return(result);
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1e4      	bne.n	800b9d0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ba06:	e007      	b.n	800ba18 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	699a      	ldr	r2, [r3, #24]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f042 0208 	orr.w	r2, r2, #8
 800ba16:	619a      	str	r2, [r3, #24]
}
 800ba18:	bf00      	nop
 800ba1a:	37b8      	adds	r7, #184	; 0xb8
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	40008000 	.word	0x40008000
 800ba24:	0800b1a9 	.word	0x0800b1a9

0800ba28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ba30:	bf00      	nop
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bc80      	pop	{r7}
 800ba38:	4770      	bx	lr

0800ba3a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ba3a:	b480      	push	{r7}
 800ba3c:	b083      	sub	sp, #12
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ba42:	bf00      	nop
 800ba44:	370c      	adds	r7, #12
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bc80      	pop	{r7}
 800ba4a:	4770      	bx	lr

0800ba4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ba54:	bf00      	nop
 800ba56:	370c      	adds	r7, #12
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bc80      	pop	{r7}
 800ba5c:	4770      	bx	lr

0800ba5e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b088      	sub	sp, #32
 800ba62:	af02      	add	r7, sp, #8
 800ba64:	60f8      	str	r0, [r7, #12]
 800ba66:	1d3b      	adds	r3, r7, #4
 800ba68:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d101      	bne.n	800ba7e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800ba7a:	2302      	movs	r3, #2
 800ba7c:	e046      	b.n	800bb0c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2201      	movs	r2, #1
 800ba82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2224      	movs	r2, #36	; 0x24
 800ba8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f022 0201 	bic.w	r2, r2, #1
 800ba9c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	430a      	orrs	r2, r1
 800bab0:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d105      	bne.n	800bac4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800bab8:	1d3b      	adds	r3, r7, #4
 800baba:	e893 0006 	ldmia.w	r3, {r1, r2}
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f000 fa4b 	bl	800bf5a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f042 0201 	orr.w	r2, r2, #1
 800bad2:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bad4:	f7f6 fe8e 	bl	80027f4 <HAL_GetTick>
 800bad8:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bada:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	f7fe ff16 	bl	800a91a <UART_WaitOnFlagUntilTimeout>
 800baee:	4603      	mov	r3, r0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d002      	beq.n	800bafa <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800baf4:	2303      	movs	r3, #3
 800baf6:	75fb      	strb	r3, [r7, #23]
 800baf8:	e003      	b.n	800bb02 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2220      	movs	r2, #32
 800bafe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2200      	movs	r2, #0
 800bb06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800bb0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3718      	adds	r7, #24
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b089      	sub	sp, #36	; 0x24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d101      	bne.n	800bb2a <HAL_UARTEx_EnableStopMode+0x16>
 800bb26:	2302      	movs	r3, #2
 800bb28:	e021      	b.n	800bb6e <HAL_UARTEx_EnableStopMode+0x5a>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	e853 3f00 	ldrex	r3, [r3]
 800bb3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	f043 0302 	orr.w	r3, r3, #2
 800bb46:	61fb      	str	r3, [r7, #28]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	61bb      	str	r3, [r7, #24]
 800bb52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb54:	6979      	ldr	r1, [r7, #20]
 800bb56:	69ba      	ldr	r2, [r7, #24]
 800bb58:	e841 2300 	strex	r3, r2, [r1]
 800bb5c:	613b      	str	r3, [r7, #16]
   return(result);
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1e6      	bne.n	800bb32 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3724      	adds	r7, #36	; 0x24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bc80      	pop	{r7}
 800bb76:	4770      	bx	lr

0800bb78 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d101      	bne.n	800bb8e <HAL_UARTEx_EnableFifoMode+0x16>
 800bb8a:	2302      	movs	r3, #2
 800bb8c:	e02b      	b.n	800bbe6 <HAL_UARTEx_EnableFifoMode+0x6e>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2201      	movs	r2, #1
 800bb92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2224      	movs	r2, #36	; 0x24
 800bb9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f022 0201 	bic.w	r2, r2, #1
 800bbb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bbbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800bbc4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 f9e6 	bl	800bfa0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2220      	movs	r2, #32
 800bbd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bbee:	b480      	push	{r7}
 800bbf0:	b085      	sub	sp, #20
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d101      	bne.n	800bc04 <HAL_UARTEx_DisableFifoMode+0x16>
 800bc00:	2302      	movs	r3, #2
 800bc02:	e027      	b.n	800bc54 <HAL_UARTEx_DisableFifoMode+0x66>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2224      	movs	r2, #36	; 0x24
 800bc10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f022 0201 	bic.w	r2, r2, #1
 800bc2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bc32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2220      	movs	r2, #32
 800bc46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bc52:	2300      	movs	r3, #0
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3714      	adds	r7, #20
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bc80      	pop	{r7}
 800bc5c:	4770      	bx	lr

0800bc5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b084      	sub	sp, #16
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
 800bc66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d101      	bne.n	800bc76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bc72:	2302      	movs	r3, #2
 800bc74:	e02d      	b.n	800bcd2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2201      	movs	r2, #1
 800bc7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2224      	movs	r2, #36	; 0x24
 800bc82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f022 0201 	bic.w	r2, r2, #1
 800bc9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	683a      	ldr	r2, [r7, #0]
 800bcae:	430a      	orrs	r2, r1
 800bcb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 f974 	bl	800bfa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2220      	movs	r2, #32
 800bcc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b084      	sub	sp, #16
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
 800bce2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d101      	bne.n	800bcf2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bcee:	2302      	movs	r3, #2
 800bcf0:	e02d      	b.n	800bd4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2224      	movs	r2, #36	; 0x24
 800bcfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f022 0201 	bic.w	r2, r2, #1
 800bd18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	683a      	ldr	r2, [r7, #0]
 800bd2a:	430a      	orrs	r2, r1
 800bd2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 f936 	bl	800bfa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2220      	movs	r2, #32
 800bd40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <HAL_UARTEx_ReceiveToIdle>:
  * @param RxLen   Number of data elements finally received (could be lower than Size, in case reception ends on IDLE event)
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen, uint32_t Timeout)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b088      	sub	sp, #32
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	60f8      	str	r0, [r7, #12]
 800bd5e:	60b9      	str	r1, [r7, #8]
 800bd60:	603b      	str	r3, [r7, #0]
 800bd62:	4613      	mov	r3, r2
 800bd64:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd6c:	2b20      	cmp	r3, #32
 800bd6e:	f040 80ef 	bne.w	800bf50 <HAL_UARTEx_ReceiveToIdle+0x1fa>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d002      	beq.n	800bd7e <HAL_UARTEx_ReceiveToIdle+0x28>
 800bd78:	88fb      	ldrh	r3, [r7, #6]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d101      	bne.n	800bd82 <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e0e7      	b.n	800bf52 <HAL_UARTEx_ReceiveToIdle+0x1fc>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2222      	movs	r2, #34	; 0x22
 800bd8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2201      	movs	r2, #1
 800bd96:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	671a      	str	r2, [r3, #112]	; 0x70

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bd9e:	f7f6 fd29 	bl	80027f4 <HAL_GetTick>
 800bda2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	88fa      	ldrh	r2, [r7, #6]
 800bda8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	88fa      	ldrh	r2, [r7, #6]
 800bdb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdbc:	d10e      	bne.n	800bddc <HAL_UARTEx_ReceiveToIdle+0x86>
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d105      	bne.n	800bdd2 <HAL_UARTEx_ReceiveToIdle+0x7c>
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bdcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bdd0:	e02d      	b.n	800be2e <HAL_UARTEx_ReceiveToIdle+0xd8>
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	22ff      	movs	r2, #255	; 0xff
 800bdd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bdda:	e028      	b.n	800be2e <HAL_UARTEx_ReceiveToIdle+0xd8>
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d10d      	bne.n	800be00 <HAL_UARTEx_ReceiveToIdle+0xaa>
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	691b      	ldr	r3, [r3, #16]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d104      	bne.n	800bdf6 <HAL_UARTEx_ReceiveToIdle+0xa0>
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	22ff      	movs	r2, #255	; 0xff
 800bdf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bdf4:	e01b      	b.n	800be2e <HAL_UARTEx_ReceiveToIdle+0xd8>
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	227f      	movs	r2, #127	; 0x7f
 800bdfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bdfe:	e016      	b.n	800be2e <HAL_UARTEx_ReceiveToIdle+0xd8>
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be08:	d10d      	bne.n	800be26 <HAL_UARTEx_ReceiveToIdle+0xd0>
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	691b      	ldr	r3, [r3, #16]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d104      	bne.n	800be1c <HAL_UARTEx_ReceiveToIdle+0xc6>
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	227f      	movs	r2, #127	; 0x7f
 800be16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be1a:	e008      	b.n	800be2e <HAL_UARTEx_ReceiveToIdle+0xd8>
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	223f      	movs	r2, #63	; 0x3f
 800be20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be24:	e003      	b.n	800be2e <HAL_UARTEx_ReceiveToIdle+0xd8>
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2200      	movs	r2, #0
 800be2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800be34:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be3e:	d108      	bne.n	800be52 <HAL_UARTEx_ReceiveToIdle+0xfc>
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	691b      	ldr	r3, [r3, #16]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d104      	bne.n	800be52 <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 800be48:	2300      	movs	r3, #0
 800be4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	61bb      	str	r3, [r7, #24]
 800be50:	e003      	b.n	800be5a <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800be56:	2300      	movs	r3, #0
 800be58:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	2200      	movs	r2, #0
 800be5e:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800be60:	e05f      	b.n	800bf22 <HAL_UARTEx_ReceiveToIdle+0x1cc>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	69db      	ldr	r3, [r3, #28]
 800be68:	f003 0310 	and.w	r3, r3, #16
 800be6c:	2b10      	cmp	r3, #16
 800be6e:	d110      	bne.n	800be92 <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2210      	movs	r2, #16
 800be76:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	881b      	ldrh	r3, [r3, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d008      	beq.n	800be92 <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2202      	movs	r2, #2
 800be84:	671a      	str	r2, [r3, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2220      	movs	r2, #32
 800be8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_OK;
 800be8e:	2300      	movs	r3, #0
 800be90:	e05f      	b.n	800bf52 <HAL_UARTEx_ReceiveToIdle+0x1fc>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	69db      	ldr	r3, [r3, #28]
 800be98:	f003 0320 	and.w	r3, r3, #32
 800be9c:	2b20      	cmp	r3, #32
 800be9e:	d12b      	bne.n	800bef8 <HAL_UARTEx_ReceiveToIdle+0x1a2>
      {
        if (pdata8bits == NULL)
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d10c      	bne.n	800bec0 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beac:	b29a      	uxth	r2, r3
 800beae:	8a7b      	ldrh	r3, [r7, #18]
 800beb0:	4013      	ands	r3, r2
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	3302      	adds	r3, #2
 800bebc:	61bb      	str	r3, [r7, #24]
 800bebe:	e00c      	b.n	800beda <HAL_UARTEx_ReceiveToIdle+0x184>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec6:	b2da      	uxtb	r2, r3
 800bec8:	8a7b      	ldrh	r3, [r7, #18]
 800beca:	b2db      	uxtb	r3, r3
 800becc:	4013      	ands	r3, r2
 800bece:	b2da      	uxtb	r2, r3
 800bed0:	69fb      	ldr	r3, [r7, #28]
 800bed2:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	3301      	adds	r3, #1
 800bed8:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	881b      	ldrh	r3, [r3, #0]
 800bede:	3301      	adds	r3, #1
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800beec:	b29b      	uxth	r3, r3
 800beee:	3b01      	subs	r3, #1
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800befe:	d010      	beq.n	800bf22 <HAL_UARTEx_ReceiveToIdle+0x1cc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bf00:	f7f6 fc78 	bl	80027f4 <HAL_GetTick>
 800bf04:	4602      	mov	r2, r0
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	1ad3      	subs	r3, r2, r3
 800bf0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d302      	bcc.n	800bf16 <HAL_UARTEx_ReceiveToIdle+0x1c0>
 800bf10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d105      	bne.n	800bf22 <HAL_UARTEx_ReceiveToIdle+0x1cc>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2220      	movs	r2, #32
 800bf1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800bf1e:	2303      	movs	r3, #3
 800bf20:	e017      	b.n	800bf52 <HAL_UARTEx_ReceiveToIdle+0x1fc>
    while (huart->RxXferCount > 0U)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d199      	bne.n	800be62 <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	1ad3      	subs	r3, r2, r3
 800bf3e:	b29a      	uxth	r2, r3
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2220      	movs	r2, #32
 800bf48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	e000      	b.n	800bf52 <HAL_UARTEx_ReceiveToIdle+0x1fc>
  }
  else
  {
    return HAL_BUSY;
 800bf50:	2302      	movs	r3, #2
  }
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3720      	adds	r7, #32
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800bf5a:	b480      	push	{r7}
 800bf5c:	b085      	sub	sp, #20
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	60f8      	str	r0, [r7, #12]
 800bf62:	1d3b      	adds	r3, r7, #4
 800bf64:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	f023 0210 	bic.w	r2, r3, #16
 800bf72:	893b      	ldrh	r3, [r7, #8]
 800bf74:	4619      	mov	r1, r3
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	430a      	orrs	r2, r1
 800bf7c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800bf88:	7abb      	ldrb	r3, [r7, #10]
 800bf8a:	061a      	lsls	r2, r3, #24
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	430a      	orrs	r2, r1
 800bf92:	605a      	str	r2, [r3, #4]
}
 800bf94:	bf00      	nop
 800bf96:	3714      	adds	r7, #20
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bc80      	pop	{r7}
 800bf9c:	4770      	bx	lr
	...

0800bfa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d108      	bne.n	800bfc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bfc0:	e031      	b.n	800c026 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bfc2:	2308      	movs	r3, #8
 800bfc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bfc6:	2308      	movs	r3, #8
 800bfc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	0e5b      	lsrs	r3, r3, #25
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	f003 0307 	and.w	r3, r3, #7
 800bfd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	0f5b      	lsrs	r3, r3, #29
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	f003 0307 	and.w	r3, r3, #7
 800bfe8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfea:	7bbb      	ldrb	r3, [r7, #14]
 800bfec:	7b3a      	ldrb	r2, [r7, #12]
 800bfee:	4910      	ldr	r1, [pc, #64]	; (800c030 <UARTEx_SetNbDataToProcess+0x90>)
 800bff0:	5c8a      	ldrb	r2, [r1, r2]
 800bff2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bff6:	7b3a      	ldrb	r2, [r7, #12]
 800bff8:	490e      	ldr	r1, [pc, #56]	; (800c034 <UARTEx_SetNbDataToProcess+0x94>)
 800bffa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bffc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c000:	b29a      	uxth	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c008:	7bfb      	ldrb	r3, [r7, #15]
 800c00a:	7b7a      	ldrb	r2, [r7, #13]
 800c00c:	4908      	ldr	r1, [pc, #32]	; (800c030 <UARTEx_SetNbDataToProcess+0x90>)
 800c00e:	5c8a      	ldrb	r2, [r1, r2]
 800c010:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c014:	7b7a      	ldrb	r2, [r7, #13]
 800c016:	4907      	ldr	r1, [pc, #28]	; (800c034 <UARTEx_SetNbDataToProcess+0x94>)
 800c018:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c01a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c01e:	b29a      	uxth	r2, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c026:	bf00      	nop
 800c028:	3714      	adds	r7, #20
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bc80      	pop	{r7}
 800c02e:	4770      	bx	lr
 800c030:	0801e4e4 	.word	0x0801e4e4
 800c034:	0801e4ec 	.word	0x0801e4ec

0800c038 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800c03c:	f7f6 fa76 	bl	800252c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800c040:	f000 f820 	bl	800c084 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800c044:	bf00      	nop
 800c046:	bd80      	pop	{r7, pc}

0800c048 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800c04c:	f04f 30ff 	mov.w	r0, #4294967295
 800c050:	f010 fda0 	bl	801cb94 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800c054:	bf00      	nop
 800c056:	bd80      	pop	{r7, pc}

0800c058 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800c058:	b480      	push	{r7}
 800c05a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800c05c:	f3bf 8f4f 	dsb	sy
}
 800c060:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c062:	4b06      	ldr	r3, [pc, #24]	; (800c07c <__NVIC_SystemReset+0x24>)
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c06a:	4904      	ldr	r1, [pc, #16]	; (800c07c <__NVIC_SystemReset+0x24>)
 800c06c:	4b04      	ldr	r3, [pc, #16]	; (800c080 <__NVIC_SystemReset+0x28>)
 800c06e:	4313      	orrs	r3, r2
 800c070:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c072:	f3bf 8f4f 	dsb	sy
}
 800c076:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800c078:	bf00      	nop
 800c07a:	e7fd      	b.n	800c078 <__NVIC_SystemReset+0x20>
 800c07c:	e000ed00 	.word	0xe000ed00
 800c080:	05fa0004 	.word	0x05fa0004

0800c084 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b086      	sub	sp, #24
 800c088:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800c08a:	2300      	movs	r3, #0
 800c08c:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800c08e:	2300      	movs	r3, #0
 800c090:	9302      	str	r3, [sp, #8]
 800c092:	2303      	movs	r3, #3
 800c094:	9301      	str	r3, [sp, #4]
 800c096:	2301      	movs	r3, #1
 800c098:	9300      	str	r3, [sp, #0]
 800c09a:	4b59      	ldr	r3, [pc, #356]	; (800c200 <LoRaWAN_Init+0x17c>)
 800c09c:	2200      	movs	r2, #0
 800c09e:	2100      	movs	r1, #0
 800c0a0:	2002      	movs	r0, #2
 800c0a2:	f011 f9c5 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	9302      	str	r3, [sp, #8]
 800c0aa:	2305      	movs	r3, #5
 800c0ac:	9301      	str	r3, [sp, #4]
 800c0ae:	2302      	movs	r3, #2
 800c0b0:	9300      	str	r3, [sp, #0]
 800c0b2:	4b54      	ldr	r3, [pc, #336]	; (800c204 <LoRaWAN_Init+0x180>)
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	2002      	movs	r0, #2
 800c0ba:	f011 f9b9 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800c0be:	2300      	movs	r3, #0
 800c0c0:	9302      	str	r3, [sp, #8]
 800c0c2:	2303      	movs	r3, #3
 800c0c4:	9301      	str	r3, [sp, #4]
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	4b4f      	ldr	r3, [pc, #316]	; (800c208 <LoRaWAN_Init+0x184>)
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	2002      	movs	r0, #2
 800c0d2:	f011 f9ad 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800c0d6:	1d3b      	adds	r3, r7, #4
 800c0d8:	4619      	mov	r1, r3
 800c0da:	2000      	movs	r0, #0
 800c0dc:	f003 f95e 	bl	800f39c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	0e1b      	lsrs	r3, r3, #24
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	0c1b      	lsrs	r3, r3, #16
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	0a1b      	lsrs	r3, r3, #8
 800c0f4:	b2db      	uxtb	r3, r3
 800c0f6:	9302      	str	r3, [sp, #8]
 800c0f8:	9101      	str	r1, [sp, #4]
 800c0fa:	9200      	str	r2, [sp, #0]
 800c0fc:	4b43      	ldr	r3, [pc, #268]	; (800c20c <LoRaWAN_Init+0x188>)
 800c0fe:	2200      	movs	r2, #0
 800c100:	2100      	movs	r1, #0
 800c102:	2002      	movs	r0, #2
 800c104:	f011 f994 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800c108:	1d3b      	adds	r3, r7, #4
 800c10a:	4619      	mov	r1, r3
 800c10c:	2001      	movs	r0, #1
 800c10e:	f003 f945 	bl	800f39c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	0e1b      	lsrs	r3, r3, #24
 800c116:	b2db      	uxtb	r3, r3
 800c118:	461a      	mov	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	0c1b      	lsrs	r3, r3, #16
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	4619      	mov	r1, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	0a1b      	lsrs	r3, r3, #8
 800c126:	b2db      	uxtb	r3, r3
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	b2c0      	uxtb	r0, r0
 800c12c:	9003      	str	r0, [sp, #12]
 800c12e:	9302      	str	r3, [sp, #8]
 800c130:	9101      	str	r1, [sp, #4]
 800c132:	9200      	str	r2, [sp, #0]
 800c134:	4b36      	ldr	r3, [pc, #216]	; (800c210 <LoRaWAN_Init+0x18c>)
 800c136:	2200      	movs	r2, #0
 800c138:	2100      	movs	r1, #0
 800c13a:	2002      	movs	r0, #2
 800c13c:	f011 f978 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800c140:	2300      	movs	r3, #0
 800c142:	9300      	str	r3, [sp, #0]
 800c144:	4b33      	ldr	r3, [pc, #204]	; (800c214 <LoRaWAN_Init+0x190>)
 800c146:	2200      	movs	r2, #0
 800c148:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c14c:	4832      	ldr	r0, [pc, #200]	; (800c218 <LoRaWAN_Init+0x194>)
 800c14e:	f010 fec1 	bl	801ced4 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800c152:	2300      	movs	r3, #0
 800c154:	9300      	str	r3, [sp, #0]
 800c156:	4b31      	ldr	r3, [pc, #196]	; (800c21c <LoRaWAN_Init+0x198>)
 800c158:	2200      	movs	r2, #0
 800c15a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c15e:	4830      	ldr	r0, [pc, #192]	; (800c220 <LoRaWAN_Init+0x19c>)
 800c160:	f010 feb8 	bl	801ced4 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800c164:	2300      	movs	r3, #0
 800c166:	9300      	str	r3, [sp, #0]
 800c168:	4b2e      	ldr	r3, [pc, #184]	; (800c224 <LoRaWAN_Init+0x1a0>)
 800c16a:	2201      	movs	r2, #1
 800c16c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c170:	482d      	ldr	r0, [pc, #180]	; (800c228 <LoRaWAN_Init+0x1a4>)
 800c172:	f010 feaf 	bl	801ced4 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800c176:	2300      	movs	r3, #0
 800c178:	9300      	str	r3, [sp, #0]
 800c17a:	4b2c      	ldr	r3, [pc, #176]	; (800c22c <LoRaWAN_Init+0x1a8>)
 800c17c:	2200      	movs	r2, #0
 800c17e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c182:	482b      	ldr	r0, [pc, #172]	; (800c230 <LoRaWAN_Init+0x1ac>)
 800c184:	f010 fea6 	bl	801ced4 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800c188:	4a2a      	ldr	r2, [pc, #168]	; (800c234 <LoRaWAN_Init+0x1b0>)
 800c18a:	2100      	movs	r1, #0
 800c18c:	2001      	movs	r0, #1
 800c18e:	f010 fdfd 	bl	801cd8c <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800c192:	4a29      	ldr	r2, [pc, #164]	; (800c238 <LoRaWAN_Init+0x1b4>)
 800c194:	2100      	movs	r1, #0
 800c196:	2002      	movs	r0, #2
 800c198:	f010 fdf8 	bl	801cd8c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800c19c:	4a27      	ldr	r2, [pc, #156]	; (800c23c <LoRaWAN_Init+0x1b8>)
 800c19e:	2100      	movs	r1, #0
 800c1a0:	2004      	movs	r0, #4
 800c1a2:	f010 fdf3 	bl	801cd8c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800c1a6:	4a26      	ldr	r2, [pc, #152]	; (800c240 <LoRaWAN_Init+0x1bc>)
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	2008      	movs	r0, #8
 800c1ac:	f010 fdee 	bl	801cd8c <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800c1b0:	f000 fce0 	bl	800cb74 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800c1b4:	4923      	ldr	r1, [pc, #140]	; (800c244 <LoRaWAN_Init+0x1c0>)
 800c1b6:	4824      	ldr	r0, [pc, #144]	; (800c248 <LoRaWAN_Init+0x1c4>)
 800c1b8:	f002 fa06 	bl	800e5c8 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800c1bc:	4823      	ldr	r0, [pc, #140]	; (800c24c <LoRaWAN_Init+0x1c8>)
 800c1be:	f002 fa5f 	bl	800e680 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800c1c2:	4819      	ldr	r0, [pc, #100]	; (800c228 <LoRaWAN_Init+0x1a4>)
 800c1c4:	f010 febc 	bl	801cf40 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800c1c8:	4b21      	ldr	r3, [pc, #132]	; (800c250 <LoRaWAN_Init+0x1cc>)
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	4a21      	ldr	r2, [pc, #132]	; (800c254 <LoRaWAN_Init+0x1d0>)
 800c1ce:	7812      	ldrb	r2, [r2, #0]
 800c1d0:	4611      	mov	r1, r2
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f002 fb22 	bl	800e81c <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800c1d8:	4b1f      	ldr	r3, [pc, #124]	; (800c258 <LoRaWAN_Init+0x1d4>)
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10b      	bne.n	800c1f8 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800c1e0:	4b1e      	ldr	r3, [pc, #120]	; (800c25c <LoRaWAN_Init+0x1d8>)
 800c1e2:	6819      	ldr	r1, [r3, #0]
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	9300      	str	r3, [sp, #0]
 800c1e8:	4b1d      	ldr	r3, [pc, #116]	; (800c260 <LoRaWAN_Init+0x1dc>)
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	481d      	ldr	r0, [pc, #116]	; (800c264 <LoRaWAN_Init+0x1e0>)
 800c1ee:	f010 fe71 	bl	801ced4 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800c1f2:	481c      	ldr	r0, [pc, #112]	; (800c264 <LoRaWAN_Init+0x1e0>)
 800c1f4:	f010 fea4 	bl	801cf40 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800c1f8:	bf00      	nop
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	0801dba8 	.word	0x0801dba8
 800c204:	0801dbcc 	.word	0x0801dbcc
 800c208:	0801dbec 	.word	0x0801dbec
 800c20c:	0801dc0c 	.word	0x0801dc0c
 800c210:	0801dc30 	.word	0x0801dc30
 800c214:	0800c69d 	.word	0x0800c69d
 800c218:	20000760 	.word	0x20000760
 800c21c:	0800c6af 	.word	0x0800c6af
 800c220:	20000778 	.word	0x20000778
 800c224:	0800c6c1 	.word	0x0800c6c1
 800c228:	20000790 	.word	0x20000790
 800c22c:	0800ca75 	.word	0x0800ca75
 800c230:	20000654 	.word	0x20000654
 800c234:	0800e7f1 	.word	0x0800e7f1
 800c238:	0800c3b1 	.word	0x0800c3b1
 800c23c:	0800ca99 	.word	0x0800ca99
 800c240:	0800c9f5 	.word	0x0800c9f5
 800c244:	01030000 	.word	0x01030000
 800c248:	2000002c 	.word	0x2000002c
 800c24c:	20000078 	.word	0x20000078
 800c250:	20000028 	.word	0x20000028
 800c254:	20000029 	.word	0x20000029
 800c258:	20000638 	.word	0x20000638
 800c25c:	20000090 	.word	0x20000090
 800c260:	0800c679 	.word	0x0800c679
 800c264:	2000063c 	.word	0x2000063c

0800c268 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800c268:	b5b0      	push	{r4, r5, r7, lr}
 800c26a:	b08a      	sub	sp, #40	; 0x28
 800c26c:	af06      	add	r7, sp, #24
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
 uint8_t RxPort = 0;
 800c272:	2300      	movs	r3, #0
 800c274:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	f000 8086 	beq.w	800c38a <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800c27e:	4845      	ldr	r0, [pc, #276]	; (800c394 <OnRxData+0x12c>)
 800c280:	f010 fe5e 	bl	801cf40 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d05a      	beq.n	800c342 <OnRxData+0xda>
    {
      if (appData != NULL)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d057      	beq.n	800c342 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d050      	beq.n	800c342 <OnRxData+0xda>
        {
    switch (appData->Port)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	2b02      	cmp	r3, #2
 800c2a6:	d01f      	beq.n	800c2e8 <OnRxData+0x80>
 800c2a8:	2b03      	cmp	r3, #3
 800c2aa:	d145      	bne.n	800c338 <OnRxData+0xd0>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	785b      	ldrb	r3, [r3, #1]
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d143      	bne.n	800c33c <OnRxData+0xd4>
        {
          switch (appData->Buffer[0])
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d00e      	beq.n	800c2dc <OnRxData+0x74>
 800c2be:	2b02      	cmp	r3, #2
 800c2c0:	dc10      	bgt.n	800c2e4 <OnRxData+0x7c>
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d002      	beq.n	800c2cc <OnRxData+0x64>
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d004      	beq.n	800c2d4 <OnRxData+0x6c>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800c2ca:	e00b      	b.n	800c2e4 <OnRxData+0x7c>
              LmHandlerRequestClass(CLASS_A);
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	f002 fc6d 	bl	800ebac <LmHandlerRequestClass>
              break;
 800c2d2:	e008      	b.n	800c2e6 <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_B);
 800c2d4:	2001      	movs	r0, #1
 800c2d6:	f002 fc69 	bl	800ebac <LmHandlerRequestClass>
              break;
 800c2da:	e004      	b.n	800c2e6 <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_C);
 800c2dc:	2002      	movs	r0, #2
 800c2de:	f002 fc65 	bl	800ebac <LmHandlerRequestClass>
              break;
 800c2e2:	e000      	b.n	800c2e6 <OnRxData+0x7e>
              break;
 800c2e4:	bf00      	nop
          }
        }
        break;
 800c2e6:	e029      	b.n	800c33c <OnRxData+0xd4>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	785b      	ldrb	r3, [r3, #1]
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d127      	bne.n	800c340 <OnRxData+0xd8>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	f003 0301 	and.w	r3, r3, #1
 800c2fa:	b2da      	uxtb	r2, r3
 800c2fc:	4b26      	ldr	r3, [pc, #152]	; (800c398 <OnRxData+0x130>)
 800c2fe:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800c300:	4b25      	ldr	r3, [pc, #148]	; (800c398 <OnRxData+0x130>)
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10b      	bne.n	800c320 <OnRxData+0xb8>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800c308:	4b24      	ldr	r3, [pc, #144]	; (800c39c <OnRxData+0x134>)
 800c30a:	2200      	movs	r2, #0
 800c30c:	2100      	movs	r1, #0
 800c30e:	2003      	movs	r0, #3
 800c310:	f011 f88e 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800c314:	2201      	movs	r2, #1
 800c316:	2120      	movs	r1, #32
 800c318:	4821      	ldr	r0, [pc, #132]	; (800c3a0 <OnRxData+0x138>)
 800c31a:	f7f9 fcfb 	bl	8005d14 <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800c31e:	e00f      	b.n	800c340 <OnRxData+0xd8>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800c320:	4b20      	ldr	r3, [pc, #128]	; (800c3a4 <OnRxData+0x13c>)
 800c322:	2200      	movs	r2, #0
 800c324:	2100      	movs	r1, #0
 800c326:	2003      	movs	r0, #3
 800c328:	f011 f882 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800c32c:	2200      	movs	r2, #0
 800c32e:	2120      	movs	r1, #32
 800c330:	481b      	ldr	r0, [pc, #108]	; (800c3a0 <OnRxData+0x138>)
 800c332:	f7f9 fcef 	bl	8005d14 <HAL_GPIO_WritePin>
        break;
 800c336:	e003      	b.n	800c340 <OnRxData+0xd8>

      default:

        break;
 800c338:	bf00      	nop
 800c33a:	e002      	b.n	800c342 <OnRxData+0xda>
        break;
 800c33c:	bf00      	nop
 800c33e:	e000      	b.n	800c342 <OnRxData+0xda>
        break;
 800c340:	bf00      	nop
    }
  }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	7c1b      	ldrb	r3, [r3, #16]
 800c346:	2b05      	cmp	r3, #5
 800c348:	d81f      	bhi.n	800c38a <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	7bfa      	ldrb	r2, [r7, #15]
 800c350:	6839      	ldr	r1, [r7, #0]
 800c352:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800c356:	460c      	mov	r4, r1
 800c358:	6839      	ldr	r1, [r7, #0]
 800c35a:	7c09      	ldrb	r1, [r1, #16]
 800c35c:	4608      	mov	r0, r1
 800c35e:	4912      	ldr	r1, [pc, #72]	; (800c3a8 <OnRxData+0x140>)
 800c360:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c364:	6838      	ldr	r0, [r7, #0]
 800c366:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800c36a:	4605      	mov	r5, r0
 800c36c:	6838      	ldr	r0, [r7, #0]
 800c36e:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800c372:	9005      	str	r0, [sp, #20]
 800c374:	9504      	str	r5, [sp, #16]
 800c376:	9103      	str	r1, [sp, #12]
 800c378:	9402      	str	r4, [sp, #8]
 800c37a:	9201      	str	r2, [sp, #4]
 800c37c:	9300      	str	r3, [sp, #0]
 800c37e:	4b0b      	ldr	r3, [pc, #44]	; (800c3ac <OnRxData+0x144>)
 800c380:	2200      	movs	r2, #0
 800c382:	2100      	movs	r1, #0
 800c384:	2003      	movs	r0, #3
 800c386:	f011 f853 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800c38a:	bf00      	nop
 800c38c:	3710      	adds	r7, #16
 800c38e:	46bd      	mov	sp, r7
 800c390:	bdb0      	pop	{r4, r5, r7, pc}
 800c392:	bf00      	nop
 800c394:	20000778 	.word	0x20000778
 800c398:	2000075e 	.word	0x2000075e
 800c39c:	0801dc54 	.word	0x0801dc54
 800c3a0:	48000400 	.word	0x48000400
 800c3a4:	0801dc60 	.word	0x0801dc60
 800c3a8:	20000010 	.word	0x20000010
 800c3ac:	0801dc6c 	.word	0x0801dc6c

0800c3b0 <SendTxData>:

static void SendTxData(void)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b08c      	sub	sp, #48	; 0x30
 800c3b4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800c3b6:	23ff      	movs	r3, #255	; 0xff
 800c3b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t batteryLevel = GetBatteryLevel();
 800c3bc:	f7f6 f8ea 	bl	8002594 <GetBatteryLevel>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	627b      	str	r3, [r7, #36]	; 0x24


  uint16_t pressure = 0;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	843b      	strh	r3, [r7, #32]

  uint32_t i = 0;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	61fb      	str	r3, [r7, #28]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800c3d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	4b96      	ldr	r3, [pc, #600]	; (800c634 <SendTxData+0x284>)
 800c3da:	2201      	movs	r2, #1
 800c3dc:	2100      	movs	r1, #0
 800c3de:	2002      	movs	r0, #2
 800c3e0:	f011 f826 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800c3e4:	4b94      	ldr	r3, [pc, #592]	; (800c638 <SendTxData+0x288>)
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM1/100) >> 8;
 800c3ea:	4b94      	ldr	r3, [pc, #592]	; (800c63c <SendTxData+0x28c>)
 800c3ec:	881b      	ldrh	r3, [r3, #0]
 800c3ee:	4a94      	ldr	r2, [pc, #592]	; (800c640 <SendTxData+0x290>)
 800c3f0:	fba2 2303 	umull	r2, r3, r2, r3
 800c3f4:	095b      	lsrs	r3, r3, #5
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	0a1b      	lsrs	r3, r3, #8
 800c3fa:	b298      	uxth	r0, r3
 800c3fc:	4b8e      	ldr	r3, [pc, #568]	; (800c638 <SendTxData+0x288>)
 800c3fe:	685a      	ldr	r2, [r3, #4]
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	1c59      	adds	r1, r3, #1
 800c404:	61f9      	str	r1, [r7, #28]
 800c406:	4413      	add	r3, r2
 800c408:	b2c2      	uxtb	r2, r0
 800c40a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM1/100)%256;
 800c40c:	4b8b      	ldr	r3, [pc, #556]	; (800c63c <SendTxData+0x28c>)
 800c40e:	881b      	ldrh	r3, [r3, #0]
 800c410:	4a8b      	ldr	r2, [pc, #556]	; (800c640 <SendTxData+0x290>)
 800c412:	fba2 2303 	umull	r2, r3, r2, r3
 800c416:	095b      	lsrs	r3, r3, #5
 800c418:	b298      	uxth	r0, r3
 800c41a:	4b87      	ldr	r3, [pc, #540]	; (800c638 <SendTxData+0x288>)
 800c41c:	685a      	ldr	r2, [r3, #4]
 800c41e:	69fb      	ldr	r3, [r7, #28]
 800c420:	1c59      	adds	r1, r3, #1
 800c422:	61f9      	str	r1, [r7, #28]
 800c424:	4413      	add	r3, r2
 800c426:	b2c2      	uxtb	r2, r0
 800c428:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM2_5/100)>>8;
 800c42a:	4b86      	ldr	r3, [pc, #536]	; (800c644 <SendTxData+0x294>)
 800c42c:	881b      	ldrh	r3, [r3, #0]
 800c42e:	4a84      	ldr	r2, [pc, #528]	; (800c640 <SendTxData+0x290>)
 800c430:	fba2 2303 	umull	r2, r3, r2, r3
 800c434:	095b      	lsrs	r3, r3, #5
 800c436:	b29b      	uxth	r3, r3
 800c438:	0a1b      	lsrs	r3, r3, #8
 800c43a:	b298      	uxth	r0, r3
 800c43c:	4b7e      	ldr	r3, [pc, #504]	; (800c638 <SendTxData+0x288>)
 800c43e:	685a      	ldr	r2, [r3, #4]
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	1c59      	adds	r1, r3, #1
 800c444:	61f9      	str	r1, [r7, #28]
 800c446:	4413      	add	r3, r2
 800c448:	b2c2      	uxtb	r2, r0
 800c44a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM2_5/100)%256;
 800c44c:	4b7d      	ldr	r3, [pc, #500]	; (800c644 <SendTxData+0x294>)
 800c44e:	881b      	ldrh	r3, [r3, #0]
 800c450:	4a7b      	ldr	r2, [pc, #492]	; (800c640 <SendTxData+0x290>)
 800c452:	fba2 2303 	umull	r2, r3, r2, r3
 800c456:	095b      	lsrs	r3, r3, #5
 800c458:	b298      	uxth	r0, r3
 800c45a:	4b77      	ldr	r3, [pc, #476]	; (800c638 <SendTxData+0x288>)
 800c45c:	685a      	ldr	r2, [r3, #4]
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	1c59      	adds	r1, r3, #1
 800c462:	61f9      	str	r1, [r7, #28]
 800c464:	4413      	add	r3, r2
 800c466:	b2c2      	uxtb	r2, r0
 800c468:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM10/100)>>8;
 800c46a:	4b77      	ldr	r3, [pc, #476]	; (800c648 <SendTxData+0x298>)
 800c46c:	881b      	ldrh	r3, [r3, #0]
 800c46e:	4a74      	ldr	r2, [pc, #464]	; (800c640 <SendTxData+0x290>)
 800c470:	fba2 2303 	umull	r2, r3, r2, r3
 800c474:	095b      	lsrs	r3, r3, #5
 800c476:	b29b      	uxth	r3, r3
 800c478:	0a1b      	lsrs	r3, r3, #8
 800c47a:	b298      	uxth	r0, r3
 800c47c:	4b6e      	ldr	r3, [pc, #440]	; (800c638 <SendTxData+0x288>)
 800c47e:	685a      	ldr	r2, [r3, #4]
 800c480:	69fb      	ldr	r3, [r7, #28]
 800c482:	1c59      	adds	r1, r3, #1
 800c484:	61f9      	str	r1, [r7, #28]
 800c486:	4413      	add	r3, r2
 800c488:	b2c2      	uxtb	r2, r0
 800c48a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM10/100)%256;
 800c48c:	4b6e      	ldr	r3, [pc, #440]	; (800c648 <SendTxData+0x298>)
 800c48e:	881b      	ldrh	r3, [r3, #0]
 800c490:	4a6b      	ldr	r2, [pc, #428]	; (800c640 <SendTxData+0x290>)
 800c492:	fba2 2303 	umull	r2, r3, r2, r3
 800c496:	095b      	lsrs	r3, r3, #5
 800c498:	b298      	uxth	r0, r3
 800c49a:	4b67      	ldr	r3, [pc, #412]	; (800c638 <SendTxData+0x288>)
 800c49c:	685a      	ldr	r2, [r3, #4]
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	1c59      	adds	r1, r3, #1
 800c4a2:	61f9      	str	r1, [r7, #28]
 800c4a4:	4413      	add	r3, r2
 800c4a6:	b2c2      	uxtb	r2, r0
 800c4a8:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temp*100.0));
 800c4aa:	4b68      	ldr	r3, [pc, #416]	; (800c64c <SendTxData+0x29c>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7f3 ffce 	bl	8000450 <__aeabi_f2d>
 800c4b4:	f04f 0200 	mov.w	r2, #0
 800c4b8:	4b65      	ldr	r3, [pc, #404]	; (800c650 <SendTxData+0x2a0>)
 800c4ba:	f7f4 f821 	bl	8000500 <__aeabi_dmul>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	4610      	mov	r0, r2
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	f7f4 fab5 	bl	8000a34 <__aeabi_d2iz>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800c4ce:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c4d2:	4a5b      	ldr	r2, [pc, #364]	; (800c640 <SendTxData+0x290>)
 800c4d4:	fb82 1203 	smull	r1, r2, r2, r3
 800c4d8:	1152      	asrs	r2, r2, #5
 800c4da:	17db      	asrs	r3, r3, #31
 800c4dc:	1ad3      	subs	r3, r2, r3
 800c4de:	b218      	sxth	r0, r3
 800c4e0:	4b55      	ldr	r3, [pc, #340]	; (800c638 <SendTxData+0x288>)
 800c4e2:	685a      	ldr	r2, [r3, #4]
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	1c59      	adds	r1, r3, #1
 800c4e8:	61f9      	str	r1, [r7, #28]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	b2c2      	uxtb	r2, r0
 800c4ee:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800c4f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c4f4:	4a52      	ldr	r2, [pc, #328]	; (800c640 <SendTxData+0x290>)
 800c4f6:	fb82 1203 	smull	r1, r2, r2, r3
 800c4fa:	1151      	asrs	r1, r2, #5
 800c4fc:	17da      	asrs	r2, r3, #31
 800c4fe:	1a8a      	subs	r2, r1, r2
 800c500:	2164      	movs	r1, #100	; 0x64
 800c502:	fb01 f202 	mul.w	r2, r1, r2
 800c506:	1a9b      	subs	r3, r3, r2
 800c508:	b218      	sxth	r0, r3
 800c50a:	4b4b      	ldr	r3, [pc, #300]	; (800c638 <SendTxData+0x288>)
 800c50c:	685a      	ldr	r2, [r3, #4]
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	1c59      	adds	r1, r3, #1
 800c512:	61f9      	str	r1, [r7, #28]
 800c514:	4413      	add	r3, r2
 800c516:	b2c2      	uxtb	r2, r0
 800c518:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800c51a:	4b4e      	ldr	r3, [pc, #312]	; (800c654 <SendTxData+0x2a4>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4618      	mov	r0, r3
 800c520:	f7f3 ff96 	bl	8000450 <__aeabi_f2d>
 800c524:	f04f 0200 	mov.w	r2, #0
 800c528:	4b49      	ldr	r3, [pc, #292]	; (800c650 <SendTxData+0x2a0>)
 800c52a:	f7f3 ffe9 	bl	8000500 <__aeabi_dmul>
 800c52e:	4602      	mov	r2, r0
 800c530:	460b      	mov	r3, r1
 800c532:	4610      	mov	r0, r2
 800c534:	4619      	mov	r1, r3
 800c536:	f7f4 fa7d 	bl	8000a34 <__aeabi_d2iz>
 800c53a:	4603      	mov	r3, r0
 800c53c:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800c53e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c542:	4a3f      	ldr	r2, [pc, #252]	; (800c640 <SendTxData+0x290>)
 800c544:	fb82 1203 	smull	r1, r2, r2, r3
 800c548:	1152      	asrs	r2, r2, #5
 800c54a:	17db      	asrs	r3, r3, #31
 800c54c:	1ad3      	subs	r3, r2, r3
 800c54e:	b218      	sxth	r0, r3
 800c550:	4b39      	ldr	r3, [pc, #228]	; (800c638 <SendTxData+0x288>)
 800c552:	685a      	ldr	r2, [r3, #4]
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	1c59      	adds	r1, r3, #1
 800c558:	61f9      	str	r1, [r7, #28]
 800c55a:	4413      	add	r3, r2
 800c55c:	b2c2      	uxtb	r2, r0
 800c55e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800c560:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c564:	4a36      	ldr	r2, [pc, #216]	; (800c640 <SendTxData+0x290>)
 800c566:	fb82 1203 	smull	r1, r2, r2, r3
 800c56a:	1151      	asrs	r1, r2, #5
 800c56c:	17da      	asrs	r2, r3, #31
 800c56e:	1a8a      	subs	r2, r1, r2
 800c570:	2164      	movs	r1, #100	; 0x64
 800c572:	fb01 f202 	mul.w	r2, r1, r2
 800c576:	1a9b      	subs	r3, r3, r2
 800c578:	b218      	sxth	r0, r3
 800c57a:	4b2f      	ldr	r3, [pc, #188]	; (800c638 <SendTxData+0x288>)
 800c57c:	685a      	ldr	r2, [r3, #4]
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	1c59      	adds	r1, r3, #1
 800c582:	61f9      	str	r1, [r7, #28]
 800c584:	4413      	add	r3, r2
 800c586:	b2c2      	uxtb	r2, r0
 800c588:	701a      	strb	r2, [r3, #0]


  AppData.BufferSize = i;
 800c58a:	69fb      	ldr	r3, [r7, #28]
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	4b2a      	ldr	r3, [pc, #168]	; (800c638 <SendTxData+0x288>)
 800c590:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800c592:	4b31      	ldr	r3, [pc, #196]	; (800c658 <SendTxData+0x2a8>)
 800c594:	7a5b      	ldrb	r3, [r3, #9]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d007      	beq.n	800c5aa <SendTxData+0x1fa>
 800c59a:	f002 f9e3 	bl	800e964 <LmHandlerJoinStatus>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d102      	bne.n	800c5aa <SendTxData+0x1fa>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800c5a4:	482c      	ldr	r0, [pc, #176]	; (800c658 <SendTxData+0x2a8>)
 800c5a6:	f010 fd39 	bl	801d01c <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800c5aa:	4b2c      	ldr	r3, [pc, #176]	; (800c65c <SendTxData+0x2ac>)
 800c5ac:	78db      	ldrb	r3, [r3, #3]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	4821      	ldr	r0, [pc, #132]	; (800c638 <SendTxData+0x288>)
 800c5b4:	f002 f9f2 	bl	800e99c <LmHandlerSend>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (LORAMAC_HANDLER_SUCCESS == status)
 800c5be:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d106      	bne.n	800c5d4 <SendTxData+0x224>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800c5c6:	4b26      	ldr	r3, [pc, #152]	; (800c660 <SendTxData+0x2b0>)
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	2001      	movs	r0, #1
 800c5ce:	f010 ff2f 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
 800c5d2:	e016      	b.n	800c602 <SendTxData+0x252>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800c5d4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c5d8:	f113 0f06 	cmn.w	r3, #6
 800c5dc:	d111      	bne.n	800c602 <SendTxData+0x252>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800c5de:	f002 f913 	bl	800e808 <LmHandlerGetDutyCycleWaitTime>
 800c5e2:	6278      	str	r0, [r7, #36]	; 0x24
    if (nextTxIn > 0)
 800c5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00b      	beq.n	800c602 <SendTxData+0x252>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ec:	4a1d      	ldr	r2, [pc, #116]	; (800c664 <SendTxData+0x2b4>)
 800c5ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c5f2:	099b      	lsrs	r3, r3, #6
 800c5f4:	9300      	str	r3, [sp, #0]
 800c5f6:	4b1c      	ldr	r3, [pc, #112]	; (800c668 <SendTxData+0x2b8>)
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	2001      	movs	r0, #1
 800c5fe:	f010 ff17 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
  }
  }

  if (EventType == TX_ON_TIMER)
 800c602:	4b1a      	ldr	r3, [pc, #104]	; (800c66c <SendTxData+0x2bc>)
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d10f      	bne.n	800c62a <SendTxData+0x27a>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800c60a:	4819      	ldr	r0, [pc, #100]	; (800c670 <SendTxData+0x2c0>)
 800c60c:	f010 fd06 	bl	801d01c <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800c610:	4b18      	ldr	r3, [pc, #96]	; (800c674 <SendTxData+0x2c4>)
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c616:	4293      	cmp	r3, r2
 800c618:	bf38      	it	cc
 800c61a:	4613      	movcc	r3, r2
 800c61c:	4619      	mov	r1, r3
 800c61e:	4814      	ldr	r0, [pc, #80]	; (800c670 <SendTxData+0x2c0>)
 800c620:	f010 fd6c 	bl	801d0fc <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800c624:	4812      	ldr	r0, [pc, #72]	; (800c670 <SendTxData+0x2c0>)
 800c626:	f010 fc8b 	bl	801cf40 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800c62a:	bf00      	nop
 800c62c:	3728      	adds	r7, #40	; 0x28
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	0801dcb4 	.word	0x0801dcb4
 800c638:	20000094 	.word	0x20000094
 800c63c:	20000260 	.word	0x20000260
 800c640:	51eb851f 	.word	0x51eb851f
 800c644:	2000025c 	.word	0x2000025c
 800c648:	20000264 	.word	0x20000264
 800c64c:	20000268 	.word	0x20000268
 800c650:	40590000 	.word	0x40590000
 800c654:	2000026c 	.word	0x2000026c
 800c658:	20000790 	.word	0x20000790
 800c65c:	20000078 	.word	0x20000078
 800c660:	0801dcc0 	.word	0x0801dcc0
 800c664:	10624dd3 	.word	0x10624dd3
 800c668:	0801dcd0 	.word	0x0801dcd0
 800c66c:	20000638 	.word	0x20000638
 800c670:	2000063c 	.word	0x2000063c
 800c674:	20000090 	.word	0x20000090

0800c678 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800c680:	2100      	movs	r1, #0
 800c682:	2002      	movs	r0, #2
 800c684:	f010 fba4 	bl	801cdd0 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800c688:	4803      	ldr	r0, [pc, #12]	; (800c698 <OnTxTimerEvent+0x20>)
 800c68a:	f010 fc59 	bl	801cf40 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800c68e:	bf00      	nop
 800c690:	3708      	adds	r7, #8
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	2000063c 	.word	0x2000063c

0800c69c <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800c6a4:	bf00      	nop
 800c6a6:	370c      	adds	r7, #12
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bc80      	pop	{r7}
 800c6ac:	4770      	bx	lr

0800c6ae <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800c6ae:	b480      	push	{r7}
 800c6b0:	b083      	sub	sp, #12
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800c6b6:	bf00      	nop
 800c6b8:	370c      	adds	r7, #12
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bc80      	pop	{r7}
 800c6be:	4770      	bx	lr

0800c6c0 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b083      	sub	sp, #12
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800c6c8:	bf00      	nop
 800c6ca:	370c      	adds	r7, #12
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bc80      	pop	{r7}
 800c6d0:	4770      	bx	lr
	...

0800c6d4 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b086      	sub	sp, #24
 800c6d8:	af04      	add	r7, sp, #16
 800c6da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d041      	beq.n	800c766 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d03d      	beq.n	800c766 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800c6ea:	4821      	ldr	r0, [pc, #132]	; (800c770 <OnTxData+0x9c>)
 800c6ec:	f010 fc28 	bl	801cf40 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800c6f0:	4b20      	ldr	r3, [pc, #128]	; (800c774 <OnTxData+0xa0>)
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	2002      	movs	r0, #2
 800c6f8:	f010 fe9a 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	68db      	ldr	r3, [r3, #12]
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	7c12      	ldrb	r2, [r2, #16]
 800c704:	4611      	mov	r1, r2
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800c70c:	4610      	mov	r0, r2
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800c714:	9203      	str	r2, [sp, #12]
 800c716:	9002      	str	r0, [sp, #8]
 800c718:	9101      	str	r1, [sp, #4]
 800c71a:	9300      	str	r3, [sp, #0]
 800c71c:	4b16      	ldr	r3, [pc, #88]	; (800c778 <OnTxData+0xa4>)
 800c71e:	2200      	movs	r2, #0
 800c720:	2100      	movs	r1, #0
 800c722:	2003      	movs	r0, #3
 800c724:	f010 fe84 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800c728:	4b14      	ldr	r3, [pc, #80]	; (800c77c <OnTxData+0xa8>)
 800c72a:	2200      	movs	r2, #0
 800c72c:	2100      	movs	r1, #0
 800c72e:	2003      	movs	r0, #3
 800c730:	f010 fe7e 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	7a1b      	ldrb	r3, [r3, #8]
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d10e      	bne.n	800c75a <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	7a5b      	ldrb	r3, [r3, #9]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d001      	beq.n	800c748 <OnTxData+0x74>
 800c744:	4b0e      	ldr	r3, [pc, #56]	; (800c780 <OnTxData+0xac>)
 800c746:	e000      	b.n	800c74a <OnTxData+0x76>
 800c748:	4b0e      	ldr	r3, [pc, #56]	; (800c784 <OnTxData+0xb0>)
 800c74a:	9300      	str	r3, [sp, #0]
 800c74c:	4b0e      	ldr	r3, [pc, #56]	; (800c788 <OnTxData+0xb4>)
 800c74e:	2200      	movs	r2, #0
 800c750:	2100      	movs	r1, #0
 800c752:	2003      	movs	r0, #3
 800c754:	f010 fe6c 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800c758:	e005      	b.n	800c766 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800c75a:	4b0c      	ldr	r3, [pc, #48]	; (800c78c <OnTxData+0xb8>)
 800c75c:	2200      	movs	r2, #0
 800c75e:	2100      	movs	r1, #0
 800c760:	2003      	movs	r0, #3
 800c762:	f010 fe65 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
}
 800c766:	bf00      	nop
 800c768:	3708      	adds	r7, #8
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	20000760 	.word	0x20000760
 800c774:	0801dcf0 	.word	0x0801dcf0
 800c778:	0801dd24 	.word	0x0801dd24
 800c77c:	0801dd58 	.word	0x0801dd58
 800c780:	0801dd68 	.word	0x0801dd68
 800c784:	0801dd6c 	.word	0x0801dd6c
 800c788:	0801dd74 	.word	0x0801dd74
 800c78c:	0801dd88 	.word	0x0801dd88

0800c790 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d035      	beq.n	800c80a <OnJoinRequest+0x7a>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d11a      	bne.n	800c7de <OnJoinRequest+0x4e>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800c7a8:	481a      	ldr	r0, [pc, #104]	; (800c814 <OnJoinRequest+0x84>)
 800c7aa:	f010 fc37 	bl	801d01c <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800c7ae:	4b1a      	ldr	r3, [pc, #104]	; (800c818 <OnJoinRequest+0x88>)
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	2002      	movs	r0, #2
 800c7b6:	f010 fe3b 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	79db      	ldrb	r3, [r3, #7]
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d106      	bne.n	800c7d0 <OnJoinRequest+0x40>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800c7c2:	4b16      	ldr	r3, [pc, #88]	; (800c81c <OnJoinRequest+0x8c>)
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	2002      	movs	r0, #2
 800c7ca:	f010 fe31 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800c7ce:	e01c      	b.n	800c80a <OnJoinRequest+0x7a>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800c7d0:	4b13      	ldr	r3, [pc, #76]	; (800c820 <OnJoinRequest+0x90>)
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	2100      	movs	r1, #0
 800c7d6:	2002      	movs	r0, #2
 800c7d8:	f010 fe2a 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
}
 800c7dc:	e015      	b.n	800c80a <OnJoinRequest+0x7a>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800c7de:	4b11      	ldr	r3, [pc, #68]	; (800c824 <OnJoinRequest+0x94>)
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	2100      	movs	r1, #0
 800c7e4:	2002      	movs	r0, #2
 800c7e6:	f010 fe23 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	79db      	ldrb	r3, [r3, #7]
 800c7ee:	2b02      	cmp	r3, #2
 800c7f0:	d10b      	bne.n	800c80a <OnJoinRequest+0x7a>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800c7f2:	4b0d      	ldr	r3, [pc, #52]	; (800c828 <OnJoinRequest+0x98>)
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	2002      	movs	r0, #2
 800c7fa:	f010 fe19 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800c7fe:	4b0b      	ldr	r3, [pc, #44]	; (800c82c <OnJoinRequest+0x9c>)
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	2101      	movs	r1, #1
 800c804:	4618      	mov	r0, r3
 800c806:	f002 f809 	bl	800e81c <LmHandlerJoin>
}
 800c80a:	bf00      	nop
 800c80c:	3708      	adds	r7, #8
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	20000790 	.word	0x20000790
 800c818:	0801dd98 	.word	0x0801dd98
 800c81c:	0801ddb0 	.word	0x0801ddb0
 800c820:	0801ddd0 	.word	0x0801ddd0
 800c824:	0801ddf0 	.word	0x0801ddf0
 800c828:	0801de0c 	.word	0x0801de0c
 800c82c:	20000028 	.word	0x20000028

0800c830 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800c830:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c832:	b093      	sub	sp, #76	; 0x4c
 800c834:	af0c      	add	r7, sp, #48	; 0x30
 800c836:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d056      	beq.n	800c8ec <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	785b      	ldrb	r3, [r3, #1]
 800c842:	2b02      	cmp	r3, #2
 800c844:	d008      	beq.n	800c858 <OnBeaconStatusChange+0x28>
 800c846:	2b03      	cmp	r3, #3
 800c848:	d049      	beq.n	800c8de <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800c84a:	4b2a      	ldr	r3, [pc, #168]	; (800c8f4 <OnBeaconStatusChange+0xc4>)
 800c84c:	2200      	movs	r2, #0
 800c84e:	2100      	movs	r1, #0
 800c850:	2002      	movs	r0, #2
 800c852:	f010 fded 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800c856:	e049      	b.n	800c8ec <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	7c1b      	ldrb	r3, [r3, #16]
 800c85c:	4618      	mov	r0, r3
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c864:	461c      	mov	r4, r3
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800c86c:	461d      	mov	r5, r3
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	68db      	ldr	r3, [r3, #12]
 800c872:	697a      	ldr	r2, [r7, #20]
 800c874:	6852      	ldr	r2, [r2, #4]
 800c876:	6979      	ldr	r1, [r7, #20]
 800c878:	7d49      	ldrb	r1, [r1, #21]
 800c87a:	460e      	mov	r6, r1
 800c87c:	6979      	ldr	r1, [r7, #20]
 800c87e:	7d89      	ldrb	r1, [r1, #22]
 800c880:	6139      	str	r1, [r7, #16]
 800c882:	6979      	ldr	r1, [r7, #20]
 800c884:	7dc9      	ldrb	r1, [r1, #23]
 800c886:	60f9      	str	r1, [r7, #12]
 800c888:	6979      	ldr	r1, [r7, #20]
 800c88a:	7e09      	ldrb	r1, [r1, #24]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	6979      	ldr	r1, [r7, #20]
 800c890:	7e49      	ldrb	r1, [r1, #25]
 800c892:	6079      	str	r1, [r7, #4]
 800c894:	6979      	ldr	r1, [r7, #20]
 800c896:	7e89      	ldrb	r1, [r1, #26]
 800c898:	6039      	str	r1, [r7, #0]
 800c89a:	6979      	ldr	r1, [r7, #20]
 800c89c:	7ec9      	ldrb	r1, [r1, #27]
 800c89e:	910b      	str	r1, [sp, #44]	; 0x2c
 800c8a0:	f8d7 c000 	ldr.w	ip, [r7]
 800c8a4:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800c8a8:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800c8ac:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800c8b0:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800c8b4:	f8cd c020 	str.w	ip, [sp, #32]
 800c8b8:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800c8bc:	f8cd c01c 	str.w	ip, [sp, #28]
 800c8c0:	6939      	ldr	r1, [r7, #16]
 800c8c2:	9106      	str	r1, [sp, #24]
 800c8c4:	9605      	str	r6, [sp, #20]
 800c8c6:	9204      	str	r2, [sp, #16]
 800c8c8:	9303      	str	r3, [sp, #12]
 800c8ca:	9502      	str	r5, [sp, #8]
 800c8cc:	9401      	str	r4, [sp, #4]
 800c8ce:	9000      	str	r0, [sp, #0]
 800c8d0:	4b09      	ldr	r3, [pc, #36]	; (800c8f8 <OnBeaconStatusChange+0xc8>)
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	2100      	movs	r1, #0
 800c8d6:	2002      	movs	r0, #2
 800c8d8:	f010 fdaa 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800c8dc:	e006      	b.n	800c8ec <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800c8de:	4b07      	ldr	r3, [pc, #28]	; (800c8fc <OnBeaconStatusChange+0xcc>)
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	2100      	movs	r1, #0
 800c8e4:	2002      	movs	r0, #2
 800c8e6:	f010 fda3 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800c8ea:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800c8ec:	bf00      	nop
 800c8ee:	371c      	adds	r7, #28
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8f4:	0801de30 	.word	0x0801de30
 800c8f8:	0801de48 	.word	0x0801de48
 800c8fc:	0801debc 	.word	0x0801debc

0800c900 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800c900:	b480      	push	{r7}
 800c902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800c904:	bf00      	nop
 800c906:	46bd      	mov	sp, r7
 800c908:	bc80      	pop	{r7}
 800c90a:	4770      	bx	lr

0800c90c <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af02      	add	r7, sp, #8
 800c912:	4603      	mov	r3, r0
 800c914:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800c916:	79fb      	ldrb	r3, [r7, #7]
 800c918:	4a06      	ldr	r2, [pc, #24]	; (800c934 <OnClassChange+0x28>)
 800c91a:	5cd3      	ldrb	r3, [r2, r3]
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	4b06      	ldr	r3, [pc, #24]	; (800c938 <OnClassChange+0x2c>)
 800c920:	2200      	movs	r2, #0
 800c922:	2100      	movs	r1, #0
 800c924:	2002      	movs	r0, #2
 800c926:	f010 fd83 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800c92a:	bf00      	nop
 800c92c:	3708      	adds	r7, #8
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	0801def8 	.word	0x0801def8
 800c938:	0801dedc 	.word	0x0801dedc

0800c93c <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800c940:	2100      	movs	r1, #0
 800c942:	2001      	movs	r0, #1
 800c944:	f010 fa44 	bl	801cdd0 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800c948:	bf00      	nop
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800c954:	4a0d      	ldr	r2, [pc, #52]	; (800c98c <OnTxPeriodicityChanged+0x40>)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800c95a:	4b0c      	ldr	r3, [pc, #48]	; (800c98c <OnTxPeriodicityChanged+0x40>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d103      	bne.n	800c96a <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800c962:	4b0a      	ldr	r3, [pc, #40]	; (800c98c <OnTxPeriodicityChanged+0x40>)
 800c964:	f242 7210 	movw	r2, #10000	; 0x2710
 800c968:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800c96a:	4809      	ldr	r0, [pc, #36]	; (800c990 <OnTxPeriodicityChanged+0x44>)
 800c96c:	f010 fb56 	bl	801d01c <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800c970:	4b06      	ldr	r3, [pc, #24]	; (800c98c <OnTxPeriodicityChanged+0x40>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4619      	mov	r1, r3
 800c976:	4806      	ldr	r0, [pc, #24]	; (800c990 <OnTxPeriodicityChanged+0x44>)
 800c978:	f010 fbc0 	bl	801d0fc <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800c97c:	4804      	ldr	r0, [pc, #16]	; (800c990 <OnTxPeriodicityChanged+0x44>)
 800c97e:	f010 fadf 	bl	801cf40 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800c982:	bf00      	nop
 800c984:	3708      	adds	r7, #8
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	20000090 	.word	0x20000090
 800c990:	2000063c 	.word	0x2000063c

0800c994 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800c994:	b480      	push	{r7}
 800c996:	b083      	sub	sp, #12
 800c998:	af00      	add	r7, sp, #0
 800c99a:	4603      	mov	r3, r0
 800c99c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800c99e:	4a04      	ldr	r2, [pc, #16]	; (800c9b0 <OnTxFrameCtrlChanged+0x1c>)
 800c9a0:	79fb      	ldrb	r3, [r7, #7]
 800c9a2:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800c9a4:	bf00      	nop
 800c9a6:	370c      	adds	r7, #12
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bc80      	pop	{r7}
 800c9ac:	4770      	bx	lr
 800c9ae:	bf00      	nop
 800c9b0:	20000078 	.word	0x20000078

0800c9b4 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800c9be:	4a04      	ldr	r2, [pc, #16]	; (800c9d0 <OnPingSlotPeriodicityChanged+0x1c>)
 800c9c0:	79fb      	ldrb	r3, [r7, #7]
 800c9c2:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800c9c4:	bf00      	nop
 800c9c6:	370c      	adds	r7, #12
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bc80      	pop	{r7}
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	20000078 	.word	0x20000078

0800c9d4 <OnSystemReset>:

static void OnSystemReset(void)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800c9d8:	f002 fd11 	bl	800f3fe <LmHandlerHalt>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d106      	bne.n	800c9f0 <OnSystemReset+0x1c>
 800c9e2:	f001 ffbf 	bl	800e964 <LmHandlerJoinStatus>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d101      	bne.n	800c9f0 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800c9ec:	f7ff fb34 	bl	800c058 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800c9f0:	bf00      	nop
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <StopJoin>:

static void StopJoin(void)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800c9f8:	4817      	ldr	r0, [pc, #92]	; (800ca58 <StopJoin+0x64>)
 800c9fa:	f010 fb0f 	bl	801d01c <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800c9fe:	f002 fcf1 	bl	800f3e4 <LmHandlerStop>
 800ca02:	4603      	mov	r3, r0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d006      	beq.n	800ca16 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800ca08:	4b14      	ldr	r3, [pc, #80]	; (800ca5c <StopJoin+0x68>)
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	2002      	movs	r0, #2
 800ca10:	f010 fd0e 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
 800ca14:	e01a      	b.n	800ca4c <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800ca16:	4b12      	ldr	r3, [pc, #72]	; (800ca60 <StopJoin+0x6c>)
 800ca18:	2200      	movs	r2, #0
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	2002      	movs	r0, #2
 800ca1e:	f010 fd07 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800ca22:	4b10      	ldr	r3, [pc, #64]	; (800ca64 <StopJoin+0x70>)
 800ca24:	2201      	movs	r2, #1
 800ca26:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800ca28:	4b0f      	ldr	r3, [pc, #60]	; (800ca68 <StopJoin+0x74>)
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	2002      	movs	r0, #2
 800ca30:	f010 fcfe 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800ca34:	480d      	ldr	r0, [pc, #52]	; (800ca6c <StopJoin+0x78>)
 800ca36:	f001 fe23 	bl	800e680 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800ca3a:	4b0a      	ldr	r3, [pc, #40]	; (800ca64 <StopJoin+0x70>)
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	2101      	movs	r1, #1
 800ca40:	4618      	mov	r0, r3
 800ca42:	f001 feeb 	bl	800e81c <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800ca46:	4804      	ldr	r0, [pc, #16]	; (800ca58 <StopJoin+0x64>)
 800ca48:	f010 fa7a 	bl	801cf40 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800ca4c:	4808      	ldr	r0, [pc, #32]	; (800ca70 <StopJoin+0x7c>)
 800ca4e:	f010 fa77 	bl	801cf40 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800ca52:	bf00      	nop
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	2000063c 	.word	0x2000063c
 800ca5c:	0801defc 	.word	0x0801defc
 800ca60:	0801df1c 	.word	0x0801df1c
 800ca64:	20000028 	.word	0x20000028
 800ca68:	0801df30 	.word	0x0801df30
 800ca6c:	20000078 	.word	0x20000078
 800ca70:	20000654 	.word	0x20000654

0800ca74 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800ca7c:	4b05      	ldr	r3, [pc, #20]	; (800ca94 <OnStopJoinTimerEvent+0x20>)
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	2b02      	cmp	r3, #2
 800ca82:	d103      	bne.n	800ca8c <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800ca84:	2100      	movs	r1, #0
 800ca86:	2008      	movs	r0, #8
 800ca88:	f010 f9a2 	bl	801cdd0 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800ca8c:	bf00      	nop
 800ca8e:	3708      	adds	r7, #8
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	20000028 	.word	0x20000028

0800ca98 <StoreContext>:

static void StoreContext(void)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800ca9e:	23ff      	movs	r3, #255	; 0xff
 800caa0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800caa2:	f002 fce1 	bl	800f468 <LmHandlerNvmDataStore>
 800caa6:	4603      	mov	r3, r0
 800caa8:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800caaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800caae:	f113 0f08 	cmn.w	r3, #8
 800cab2:	d106      	bne.n	800cac2 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800cab4:	4b0a      	ldr	r3, [pc, #40]	; (800cae0 <StoreContext+0x48>)
 800cab6:	2200      	movs	r2, #0
 800cab8:	2100      	movs	r1, #0
 800caba:	2002      	movs	r0, #2
 800cabc:	f010 fcb8 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800cac0:	e00a      	b.n	800cad8 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800cac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caca:	d105      	bne.n	800cad8 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800cacc:	4b05      	ldr	r3, [pc, #20]	; (800cae4 <StoreContext+0x4c>)
 800cace:	2200      	movs	r2, #0
 800cad0:	2100      	movs	r1, #0
 800cad2:	2002      	movs	r0, #2
 800cad4:	f010 fcac 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
}
 800cad8:	bf00      	nop
 800cada:	3708      	adds	r7, #8
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	0801df50 	.word	0x0801df50
 800cae4:	0801df68 	.word	0x0801df68

0800cae8 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	4603      	mov	r3, r0
 800caf0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800caf2:	79fb      	ldrb	r3, [r7, #7]
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d106      	bne.n	800cb06 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800caf8:	4b08      	ldr	r3, [pc, #32]	; (800cb1c <OnNvmDataChange+0x34>)
 800cafa:	2200      	movs	r2, #0
 800cafc:	2100      	movs	r1, #0
 800cafe:	2002      	movs	r0, #2
 800cb00:	f010 fc96 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800cb04:	e005      	b.n	800cb12 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800cb06:	4b06      	ldr	r3, [pc, #24]	; (800cb20 <OnNvmDataChange+0x38>)
 800cb08:	2200      	movs	r2, #0
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	2002      	movs	r0, #2
 800cb0e:	f010 fc8f 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
}
 800cb12:	bf00      	nop
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	0801df80 	.word	0x0801df80
 800cb20:	0801df94 	.word	0x0801df94

0800cb24 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800cb2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cb32:	4807      	ldr	r0, [pc, #28]	; (800cb50 <OnStoreContextRequest+0x2c>)
 800cb34:	f7f4 fc5a 	bl	80013ec <FLASH_IF_Erase>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d104      	bne.n	800cb48 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800cb3e:	683a      	ldr	r2, [r7, #0]
 800cb40:	6879      	ldr	r1, [r7, #4]
 800cb42:	4803      	ldr	r0, [pc, #12]	; (800cb50 <OnStoreContextRequest+0x2c>)
 800cb44:	f7f4 fc02 	bl	800134c <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800cb48:	bf00      	nop
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	0803f000 	.word	0x0803f000

0800cb54 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800cb5e:	683a      	ldr	r2, [r7, #0]
 800cb60:	4903      	ldr	r1, [pc, #12]	; (800cb70 <OnRestoreContextRequest+0x1c>)
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f7f4 fc1a 	bl	800139c <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800cb68:	bf00      	nop
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	0803f000 	.word	0x0803f000

0800cb74 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800cb78:	4b15      	ldr	r3, [pc, #84]	; (800cbd0 <LoraInfo_Init+0x5c>)
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800cb7e:	4b14      	ldr	r3, [pc, #80]	; (800cbd0 <LoraInfo_Init+0x5c>)
 800cb80:	2200      	movs	r2, #0
 800cb82:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800cb84:	4b12      	ldr	r3, [pc, #72]	; (800cbd0 <LoraInfo_Init+0x5c>)
 800cb86:	2200      	movs	r2, #0
 800cb88:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800cb8a:	4b11      	ldr	r3, [pc, #68]	; (800cbd0 <LoraInfo_Init+0x5c>)
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800cb90:	4b0f      	ldr	r3, [pc, #60]	; (800cbd0 <LoraInfo_Init+0x5c>)
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	f043 0320 	orr.w	r3, r3, #32
 800cb98:	4a0d      	ldr	r2, [pc, #52]	; (800cbd0 <LoraInfo_Init+0x5c>)
 800cb9a:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800cb9c:	4b0c      	ldr	r3, [pc, #48]	; (800cbd0 <LoraInfo_Init+0x5c>)
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d10c      	bne.n	800cbbe <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800cba4:	4b0b      	ldr	r3, [pc, #44]	; (800cbd4 <LoraInfo_Init+0x60>)
 800cba6:	2200      	movs	r2, #0
 800cba8:	2100      	movs	r1, #0
 800cbaa:	2000      	movs	r0, #0
 800cbac:	f010 fc40 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800cbb0:	bf00      	nop
 800cbb2:	f010 fc2b 	bl	801d40c <UTIL_ADV_TRACE_IsBufferEmpty>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d1fa      	bne.n	800cbb2 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800cbbc:	e7fe      	b.n	800cbbc <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800cbbe:	4b04      	ldr	r3, [pc, #16]	; (800cbd0 <LoraInfo_Init+0x5c>)
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	60da      	str	r2, [r3, #12]
#else /* LORAWAN_KMS == 1 */
  loraInfo.Kms = 1;
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
 800cbc4:	4b02      	ldr	r3, [pc, #8]	; (800cbd0 <LoraInfo_Init+0x5c>)
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800cbca:	bf00      	nop
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	200007a8 	.word	0x200007a8
 800cbd4:	0801dfa8 	.word	0x0801dfa8

0800cbd8 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800cbdc:	4b02      	ldr	r3, [pc, #8]	; (800cbe8 <LoraInfo_GetPtr+0x10>)
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bc80      	pop	{r7}
 800cbe4:	4770      	bx	lr
 800cbe6:	bf00      	nop
 800cbe8:	200007a8 	.word	0x200007a8

0800cbec <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800cbf0:	f7f6 fd11 	bl	8003616 <BSP_RADIO_Init>
 800cbf4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b082      	sub	sp, #8
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	4603      	mov	r3, r0
 800cc02:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800cc04:	79fb      	ldrb	r3, [r7, #7]
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7f6 fd36 	bl	8003678 <BSP_RADIO_ConfigRFSwitch>
 800cc0c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3708      	adds	r7, #8
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800cc1a:	f7f6 fd7b 	bl	8003714 <BSP_RADIO_GetTxConfig>
 800cc1e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800cc28:	f7f6 fd7b 	bl	8003722 <BSP_RADIO_IsTCXO>
 800cc2c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	bd80      	pop	{r7, pc}

0800cc32 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800cc32:	b580      	push	{r7, lr}
 800cc34:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800cc36:	f7f6 fd7b 	bl	8003730 <BSP_RADIO_IsDCDC>
 800cc3a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	4603      	mov	r3, r0
 800cc48:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800cc4a:	79fb      	ldrb	r3, [r7, #7]
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7f6 fd76 	bl	800373e <BSP_RADIO_GetRFOMaxPowerConfig>
 800cc52:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	33f1      	adds	r3, #241	; 0xf1
 800cc68:	2210      	movs	r2, #16
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f00c f875 	bl	8018d5c <memset1>
    ctx->M_n = 0;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2200      	movs	r2, #0
 800cc76:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	22f0      	movs	r2, #240	; 0xf0
 800cc7e:	2100      	movs	r1, #0
 800cc80:	4618      	mov	r0, r3
 800cc82:	f00c f86b 	bl	8018d5c <memset1>
}
 800cc86:	bf00      	nop
 800cc88:	3708      	adds	r7, #8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b082      	sub	sp, #8
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
 800cc96:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	2110      	movs	r1, #16
 800cc9e:	6838      	ldr	r0, [r7, #0]
 800cca0:	f000 fe5c 	bl	800d95c <lorawan_aes_set_key>
}
 800cca4:	bf00      	nop
 800cca6:	3708      	adds	r7, #8
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b08c      	sub	sp, #48	; 0x30
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	f000 80a1 	beq.w	800ce06 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ccca:	f1c3 0310 	rsb	r3, r3, #16
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	bf28      	it	cs
 800ccd4:	4613      	movcs	r3, r2
 800ccd6:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f203 1201 	addw	r2, r3, #257	; 0x101
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cce4:	4413      	add	r3, r2
 800cce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cce8:	b292      	uxth	r2, r2
 800ccea:	68b9      	ldr	r1, [r7, #8]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f00b fffa 	bl	8018ce6 <memcpy1>
        ctx->M_n += mlen;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800ccf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfa:	441a      	add	r2, r3
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cd08:	2b0f      	cmp	r3, #15
 800cd0a:	f240 808d 	bls.w	800ce28 <AES_CMAC_Update+0x17c>
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd12:	429a      	cmp	r2, r3
 800cd14:	f000 8088 	beq.w	800ce28 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800cd18:	2300      	movs	r3, #0
 800cd1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd1c:	e015      	b.n	800cd4a <AES_CMAC_Update+0x9e>
 800cd1e:	68fa      	ldr	r2, [r7, #12]
 800cd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd22:	4413      	add	r3, r2
 800cd24:	33f1      	adds	r3, #241	; 0xf1
 800cd26:	781a      	ldrb	r2, [r3, #0]
 800cd28:	68f9      	ldr	r1, [r7, #12]
 800cd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2c:	440b      	add	r3, r1
 800cd2e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	4053      	eors	r3, r2
 800cd36:	b2d9      	uxtb	r1, r3
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3c:	4413      	add	r3, r2
 800cd3e:	33f1      	adds	r3, #241	; 0xf1
 800cd40:	460a      	mov	r2, r1
 800cd42:	701a      	strb	r2, [r3, #0]
 800cd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd46:	3301      	adds	r3, #1
 800cd48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4c:	2b0f      	cmp	r3, #15
 800cd4e:	dde6      	ble.n	800cd1e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800cd56:	f107 0314 	add.w	r3, r7, #20
 800cd5a:	2210      	movs	r2, #16
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f00b ffc2 	bl	8018ce6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800cd62:	68fa      	ldr	r2, [r7, #12]
 800cd64:	f107 0114 	add.w	r1, r7, #20
 800cd68:	f107 0314 	add.w	r3, r7, #20
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f000 fed3 	bl	800db18 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	33f1      	adds	r3, #241	; 0xf1
 800cd76:	f107 0114 	add.w	r1, r7, #20
 800cd7a:	2210      	movs	r2, #16
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f00b ffb2 	bl	8018ce6 <memcpy1>

        data += mlen;
 800cd82:	68ba      	ldr	r2, [r7, #8]
 800cd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd86:	4413      	add	r3, r2
 800cd88:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8e:	1ad3      	subs	r3, r2, r3
 800cd90:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800cd92:	e038      	b.n	800ce06 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800cd94:	2300      	movs	r3, #0
 800cd96:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd98:	e013      	b.n	800cdc2 <AES_CMAC_Update+0x116>
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9e:	4413      	add	r3, r2
 800cda0:	33f1      	adds	r3, #241	; 0xf1
 800cda2:	781a      	ldrb	r2, [r3, #0]
 800cda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda6:	68b9      	ldr	r1, [r7, #8]
 800cda8:	440b      	add	r3, r1
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	4053      	eors	r3, r2
 800cdae:	b2d9      	uxtb	r1, r3
 800cdb0:	68fa      	ldr	r2, [r7, #12]
 800cdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb4:	4413      	add	r3, r2
 800cdb6:	33f1      	adds	r3, #241	; 0xf1
 800cdb8:	460a      	mov	r2, r1
 800cdba:	701a      	strb	r2, [r3, #0]
 800cdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc4:	2b0f      	cmp	r3, #15
 800cdc6:	dde8      	ble.n	800cd9a <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800cdce:	f107 0314 	add.w	r3, r7, #20
 800cdd2:	2210      	movs	r2, #16
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f00b ff86 	bl	8018ce6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	f107 0114 	add.w	r1, r7, #20
 800cde0:	f107 0314 	add.w	r3, r7, #20
 800cde4:	4618      	mov	r0, r3
 800cde6:	f000 fe97 	bl	800db18 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	33f1      	adds	r3, #241	; 0xf1
 800cdee:	f107 0114 	add.w	r1, r7, #20
 800cdf2:	2210      	movs	r2, #16
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f00b ff76 	bl	8018ce6 <memcpy1>

        data += 16;
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	3310      	adds	r3, #16
 800cdfe:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	3b10      	subs	r3, #16
 800ce04:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2b10      	cmp	r3, #16
 800ce0a:	d8c3      	bhi.n	800cd94 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	b292      	uxth	r2, r2
 800ce16:	68b9      	ldr	r1, [r7, #8]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f00b ff64 	bl	8018ce6 <memcpy1>
    ctx->M_n = len;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ce26:	e000      	b.n	800ce2a <AES_CMAC_Update+0x17e>
            return;
 800ce28:	bf00      	nop
}
 800ce2a:	3730      	adds	r7, #48	; 0x30
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b092      	sub	sp, #72	; 0x48
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ce3a:	f107 031c 	add.w	r3, r7, #28
 800ce3e:	2210      	movs	r2, #16
 800ce40:	2100      	movs	r1, #0
 800ce42:	4618      	mov	r0, r3
 800ce44:	f00b ff8a 	bl	8018d5c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800ce48:	683a      	ldr	r2, [r7, #0]
 800ce4a:	f107 011c 	add.w	r1, r7, #28
 800ce4e:	f107 031c 	add.w	r3, r7, #28
 800ce52:	4618      	mov	r0, r3
 800ce54:	f000 fe60 	bl	800db18 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800ce58:	7f3b      	ldrb	r3, [r7, #28]
 800ce5a:	b25b      	sxtb	r3, r3
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	da30      	bge.n	800cec2 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800ce60:	2300      	movs	r3, #0
 800ce62:	647b      	str	r3, [r7, #68]	; 0x44
 800ce64:	e01b      	b.n	800ce9e <AES_CMAC_Final+0x6e>
 800ce66:	f107 021c 	add.w	r2, r7, #28
 800ce6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce6c:	4413      	add	r3, r2
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	005b      	lsls	r3, r3, #1
 800ce72:	b25a      	sxtb	r2, r3
 800ce74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce76:	3301      	adds	r3, #1
 800ce78:	3348      	adds	r3, #72	; 0x48
 800ce7a:	443b      	add	r3, r7
 800ce7c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ce80:	09db      	lsrs	r3, r3, #7
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	b25b      	sxtb	r3, r3
 800ce86:	4313      	orrs	r3, r2
 800ce88:	b25b      	sxtb	r3, r3
 800ce8a:	b2d9      	uxtb	r1, r3
 800ce8c:	f107 021c 	add.w	r2, r7, #28
 800ce90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce92:	4413      	add	r3, r2
 800ce94:	460a      	mov	r2, r1
 800ce96:	701a      	strb	r2, [r3, #0]
 800ce98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	647b      	str	r3, [r7, #68]	; 0x44
 800ce9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cea0:	2b0e      	cmp	r3, #14
 800cea2:	dde0      	ble.n	800ce66 <AES_CMAC_Final+0x36>
 800cea4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cea8:	005b      	lsls	r3, r3, #1
 800ceaa:	b2db      	uxtb	r3, r3
 800ceac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800ceb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ceb4:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ceb8:	43db      	mvns	r3, r3
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cec0:	e027      	b.n	800cf12 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800cec2:	2300      	movs	r3, #0
 800cec4:	643b      	str	r3, [r7, #64]	; 0x40
 800cec6:	e01b      	b.n	800cf00 <AES_CMAC_Final+0xd0>
 800cec8:	f107 021c 	add.w	r2, r7, #28
 800cecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cece:	4413      	add	r3, r2
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	005b      	lsls	r3, r3, #1
 800ced4:	b25a      	sxtb	r2, r3
 800ced6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ced8:	3301      	adds	r3, #1
 800ceda:	3348      	adds	r3, #72	; 0x48
 800cedc:	443b      	add	r3, r7
 800cede:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800cee2:	09db      	lsrs	r3, r3, #7
 800cee4:	b2db      	uxtb	r3, r3
 800cee6:	b25b      	sxtb	r3, r3
 800cee8:	4313      	orrs	r3, r2
 800ceea:	b25b      	sxtb	r3, r3
 800ceec:	b2d9      	uxtb	r1, r3
 800ceee:	f107 021c 	add.w	r2, r7, #28
 800cef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cef4:	4413      	add	r3, r2
 800cef6:	460a      	mov	r2, r1
 800cef8:	701a      	strb	r2, [r3, #0]
 800cefa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cefc:	3301      	adds	r3, #1
 800cefe:	643b      	str	r3, [r7, #64]	; 0x40
 800cf00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf02:	2b0e      	cmp	r3, #14
 800cf04:	dde0      	ble.n	800cec8 <AES_CMAC_Final+0x98>
 800cf06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cf0a:	005b      	lsls	r3, r3, #1
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cf18:	2b10      	cmp	r3, #16
 800cf1a:	d11d      	bne.n	800cf58 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf20:	e016      	b.n	800cf50 <AES_CMAC_Final+0x120>
 800cf22:	683a      	ldr	r2, [r7, #0]
 800cf24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf26:	4413      	add	r3, r2
 800cf28:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cf2c:	781a      	ldrb	r2, [r3, #0]
 800cf2e:	f107 011c 	add.w	r1, r7, #28
 800cf32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf34:	440b      	add	r3, r1
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	4053      	eors	r3, r2
 800cf3a:	b2d9      	uxtb	r1, r3
 800cf3c:	683a      	ldr	r2, [r7, #0]
 800cf3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf40:	4413      	add	r3, r2
 800cf42:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cf46:	460a      	mov	r2, r1
 800cf48:	701a      	strb	r2, [r3, #0]
 800cf4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf52:	2b0f      	cmp	r3, #15
 800cf54:	dde5      	ble.n	800cf22 <AES_CMAC_Final+0xf2>
 800cf56:	e096      	b.n	800d086 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800cf58:	7f3b      	ldrb	r3, [r7, #28]
 800cf5a:	b25b      	sxtb	r3, r3
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	da30      	bge.n	800cfc2 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800cf60:	2300      	movs	r3, #0
 800cf62:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf64:	e01b      	b.n	800cf9e <AES_CMAC_Final+0x16e>
 800cf66:	f107 021c 	add.w	r2, r7, #28
 800cf6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6c:	4413      	add	r3, r2
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	005b      	lsls	r3, r3, #1
 800cf72:	b25a      	sxtb	r2, r3
 800cf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf76:	3301      	adds	r3, #1
 800cf78:	3348      	adds	r3, #72	; 0x48
 800cf7a:	443b      	add	r3, r7
 800cf7c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800cf80:	09db      	lsrs	r3, r3, #7
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	b25b      	sxtb	r3, r3
 800cf86:	4313      	orrs	r3, r2
 800cf88:	b25b      	sxtb	r3, r3
 800cf8a:	b2d9      	uxtb	r1, r3
 800cf8c:	f107 021c 	add.w	r2, r7, #28
 800cf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf92:	4413      	add	r3, r2
 800cf94:	460a      	mov	r2, r1
 800cf96:	701a      	strb	r2, [r3, #0]
 800cf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa0:	2b0e      	cmp	r3, #14
 800cfa2:	dde0      	ble.n	800cf66 <AES_CMAC_Final+0x136>
 800cfa4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cfa8:	005b      	lsls	r3, r3, #1
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800cfb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cfb4:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800cfb8:	43db      	mvns	r3, r3
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cfc0:	e027      	b.n	800d012 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	637b      	str	r3, [r7, #52]	; 0x34
 800cfc6:	e01b      	b.n	800d000 <AES_CMAC_Final+0x1d0>
 800cfc8:	f107 021c 	add.w	r2, r7, #28
 800cfcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfce:	4413      	add	r3, r2
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	005b      	lsls	r3, r3, #1
 800cfd4:	b25a      	sxtb	r2, r3
 800cfd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfd8:	3301      	adds	r3, #1
 800cfda:	3348      	adds	r3, #72	; 0x48
 800cfdc:	443b      	add	r3, r7
 800cfde:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800cfe2:	09db      	lsrs	r3, r3, #7
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	b25b      	sxtb	r3, r3
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	b25b      	sxtb	r3, r3
 800cfec:	b2d9      	uxtb	r1, r3
 800cfee:	f107 021c 	add.w	r2, r7, #28
 800cff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff4:	4413      	add	r3, r2
 800cff6:	460a      	mov	r2, r1
 800cff8:	701a      	strb	r2, [r3, #0]
 800cffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cffc:	3301      	adds	r3, #1
 800cffe:	637b      	str	r3, [r7, #52]	; 0x34
 800d000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d002:	2b0e      	cmp	r3, #14
 800d004:	dde0      	ble.n	800cfc8 <AES_CMAC_Final+0x198>
 800d006:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d00a:	005b      	lsls	r3, r3, #1
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	4413      	add	r3, r2
 800d01c:	2280      	movs	r2, #128	; 0x80
 800d01e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800d022:	e007      	b.n	800d034 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d02a:	683a      	ldr	r2, [r7, #0]
 800d02c:	4413      	add	r3, r2
 800d02e:	2200      	movs	r2, #0
 800d030:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d03a:	1c5a      	adds	r2, r3, #1
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d048:	2b0f      	cmp	r3, #15
 800d04a:	d9eb      	bls.n	800d024 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800d04c:	2300      	movs	r3, #0
 800d04e:	633b      	str	r3, [r7, #48]	; 0x30
 800d050:	e016      	b.n	800d080 <AES_CMAC_Final+0x250>
 800d052:	683a      	ldr	r2, [r7, #0]
 800d054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d056:	4413      	add	r3, r2
 800d058:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d05c:	781a      	ldrb	r2, [r3, #0]
 800d05e:	f107 011c 	add.w	r1, r7, #28
 800d062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d064:	440b      	add	r3, r1
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	4053      	eors	r3, r2
 800d06a:	b2d9      	uxtb	r1, r3
 800d06c:	683a      	ldr	r2, [r7, #0]
 800d06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d070:	4413      	add	r3, r2
 800d072:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d076:	460a      	mov	r2, r1
 800d078:	701a      	strb	r2, [r3, #0]
 800d07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07c:	3301      	adds	r3, #1
 800d07e:	633b      	str	r3, [r7, #48]	; 0x30
 800d080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d082:	2b0f      	cmp	r3, #15
 800d084:	dde5      	ble.n	800d052 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800d086:	2300      	movs	r3, #0
 800d088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d08a:	e015      	b.n	800d0b8 <AES_CMAC_Final+0x288>
 800d08c:	683a      	ldr	r2, [r7, #0]
 800d08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d090:	4413      	add	r3, r2
 800d092:	33f1      	adds	r3, #241	; 0xf1
 800d094:	781a      	ldrb	r2, [r3, #0]
 800d096:	6839      	ldr	r1, [r7, #0]
 800d098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09a:	440b      	add	r3, r1
 800d09c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	4053      	eors	r3, r2
 800d0a4:	b2d9      	uxtb	r1, r3
 800d0a6:	683a      	ldr	r2, [r7, #0]
 800d0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0aa:	4413      	add	r3, r2
 800d0ac:	33f1      	adds	r3, #241	; 0xf1
 800d0ae:	460a      	mov	r2, r1
 800d0b0:	701a      	strb	r2, [r3, #0]
 800d0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ba:	2b0f      	cmp	r3, #15
 800d0bc:	dde6      	ble.n	800d08c <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800d0c4:	f107 030c 	add.w	r3, r7, #12
 800d0c8:	2210      	movs	r2, #16
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f00b fe0b 	bl	8018ce6 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800d0d0:	683a      	ldr	r2, [r7, #0]
 800d0d2:	f107 030c 	add.w	r3, r7, #12
 800d0d6:	6879      	ldr	r1, [r7, #4]
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f000 fd1d 	bl	800db18 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800d0de:	f107 031c 	add.w	r3, r7, #28
 800d0e2:	2210      	movs	r2, #16
 800d0e4:	2100      	movs	r1, #0
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f00b fe38 	bl	8018d5c <memset1>
}
 800d0ec:	bf00      	nop
 800d0ee:	3748      	adds	r7, #72	; 0x48
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	781a      	ldrb	r2, [r3, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	3301      	adds	r3, #1
 800d10a:	683a      	ldr	r2, [r7, #0]
 800d10c:	7852      	ldrb	r2, [r2, #1]
 800d10e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	3302      	adds	r3, #2
 800d114:	683a      	ldr	r2, [r7, #0]
 800d116:	7892      	ldrb	r2, [r2, #2]
 800d118:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	3303      	adds	r3, #3
 800d11e:	683a      	ldr	r2, [r7, #0]
 800d120:	78d2      	ldrb	r2, [r2, #3]
 800d122:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	3304      	adds	r3, #4
 800d128:	683a      	ldr	r2, [r7, #0]
 800d12a:	7912      	ldrb	r2, [r2, #4]
 800d12c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	3305      	adds	r3, #5
 800d132:	683a      	ldr	r2, [r7, #0]
 800d134:	7952      	ldrb	r2, [r2, #5]
 800d136:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	3306      	adds	r3, #6
 800d13c:	683a      	ldr	r2, [r7, #0]
 800d13e:	7992      	ldrb	r2, [r2, #6]
 800d140:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	3307      	adds	r3, #7
 800d146:	683a      	ldr	r2, [r7, #0]
 800d148:	79d2      	ldrb	r2, [r2, #7]
 800d14a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	3308      	adds	r3, #8
 800d150:	683a      	ldr	r2, [r7, #0]
 800d152:	7a12      	ldrb	r2, [r2, #8]
 800d154:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	3309      	adds	r3, #9
 800d15a:	683a      	ldr	r2, [r7, #0]
 800d15c:	7a52      	ldrb	r2, [r2, #9]
 800d15e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	330a      	adds	r3, #10
 800d164:	683a      	ldr	r2, [r7, #0]
 800d166:	7a92      	ldrb	r2, [r2, #10]
 800d168:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	330b      	adds	r3, #11
 800d16e:	683a      	ldr	r2, [r7, #0]
 800d170:	7ad2      	ldrb	r2, [r2, #11]
 800d172:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	330c      	adds	r3, #12
 800d178:	683a      	ldr	r2, [r7, #0]
 800d17a:	7b12      	ldrb	r2, [r2, #12]
 800d17c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	330d      	adds	r3, #13
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	7b52      	ldrb	r2, [r2, #13]
 800d186:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	330e      	adds	r3, #14
 800d18c:	683a      	ldr	r2, [r7, #0]
 800d18e:	7b92      	ldrb	r2, [r2, #14]
 800d190:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	330f      	adds	r3, #15
 800d196:	683a      	ldr	r2, [r7, #0]
 800d198:	7bd2      	ldrb	r2, [r2, #15]
 800d19a:	701a      	strb	r2, [r3, #0]
#endif
}
 800d19c:	bf00      	nop
 800d19e:	370c      	adds	r7, #12
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bc80      	pop	{r7}
 800d1a4:	4770      	bx	lr

0800d1a6 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800d1a6:	b480      	push	{r7}
 800d1a8:	b085      	sub	sp, #20
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	60f8      	str	r0, [r7, #12]
 800d1ae:	60b9      	str	r1, [r7, #8]
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800d1b4:	e007      	b.n	800d1c6 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800d1b6:	68ba      	ldr	r2, [r7, #8]
 800d1b8:	1c53      	adds	r3, r2, #1
 800d1ba:	60bb      	str	r3, [r7, #8]
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	1c59      	adds	r1, r3, #1
 800d1c0:	60f9      	str	r1, [r7, #12]
 800d1c2:	7812      	ldrb	r2, [r2, #0]
 800d1c4:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800d1c6:	79fb      	ldrb	r3, [r7, #7]
 800d1c8:	1e5a      	subs	r2, r3, #1
 800d1ca:	71fa      	strb	r2, [r7, #7]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d1f2      	bne.n	800d1b6 <copy_block_nn+0x10>
}
 800d1d0:	bf00      	nop
 800d1d2:	bf00      	nop
 800d1d4:	3714      	adds	r7, #20
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bc80      	pop	{r7}
 800d1da:	4770      	bx	lr

0800d1dc <xor_block>:

static void xor_block( void *d, const void *s )
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	781a      	ldrb	r2, [r3, #0]
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	4053      	eors	r3, r2
 800d1f0:	b2da      	uxtb	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	7819      	ldrb	r1, [r3, #0]
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	3301      	adds	r3, #1
 800d200:	781a      	ldrb	r2, [r3, #0]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	3301      	adds	r3, #1
 800d206:	404a      	eors	r2, r1
 800d208:	b2d2      	uxtb	r2, r2
 800d20a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	3302      	adds	r3, #2
 800d210:	7819      	ldrb	r1, [r3, #0]
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	3302      	adds	r3, #2
 800d216:	781a      	ldrb	r2, [r3, #0]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	3302      	adds	r3, #2
 800d21c:	404a      	eors	r2, r1
 800d21e:	b2d2      	uxtb	r2, r2
 800d220:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	3303      	adds	r3, #3
 800d226:	7819      	ldrb	r1, [r3, #0]
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	3303      	adds	r3, #3
 800d22c:	781a      	ldrb	r2, [r3, #0]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	3303      	adds	r3, #3
 800d232:	404a      	eors	r2, r1
 800d234:	b2d2      	uxtb	r2, r2
 800d236:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	3304      	adds	r3, #4
 800d23c:	7819      	ldrb	r1, [r3, #0]
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	3304      	adds	r3, #4
 800d242:	781a      	ldrb	r2, [r3, #0]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	3304      	adds	r3, #4
 800d248:	404a      	eors	r2, r1
 800d24a:	b2d2      	uxtb	r2, r2
 800d24c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	3305      	adds	r3, #5
 800d252:	7819      	ldrb	r1, [r3, #0]
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	3305      	adds	r3, #5
 800d258:	781a      	ldrb	r2, [r3, #0]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	3305      	adds	r3, #5
 800d25e:	404a      	eors	r2, r1
 800d260:	b2d2      	uxtb	r2, r2
 800d262:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	3306      	adds	r3, #6
 800d268:	7819      	ldrb	r1, [r3, #0]
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	3306      	adds	r3, #6
 800d26e:	781a      	ldrb	r2, [r3, #0]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	3306      	adds	r3, #6
 800d274:	404a      	eors	r2, r1
 800d276:	b2d2      	uxtb	r2, r2
 800d278:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	3307      	adds	r3, #7
 800d27e:	7819      	ldrb	r1, [r3, #0]
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	3307      	adds	r3, #7
 800d284:	781a      	ldrb	r2, [r3, #0]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	3307      	adds	r3, #7
 800d28a:	404a      	eors	r2, r1
 800d28c:	b2d2      	uxtb	r2, r2
 800d28e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	3308      	adds	r3, #8
 800d294:	7819      	ldrb	r1, [r3, #0]
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	3308      	adds	r3, #8
 800d29a:	781a      	ldrb	r2, [r3, #0]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	3308      	adds	r3, #8
 800d2a0:	404a      	eors	r2, r1
 800d2a2:	b2d2      	uxtb	r2, r2
 800d2a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	3309      	adds	r3, #9
 800d2aa:	7819      	ldrb	r1, [r3, #0]
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	3309      	adds	r3, #9
 800d2b0:	781a      	ldrb	r2, [r3, #0]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	3309      	adds	r3, #9
 800d2b6:	404a      	eors	r2, r1
 800d2b8:	b2d2      	uxtb	r2, r2
 800d2ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	330a      	adds	r3, #10
 800d2c0:	7819      	ldrb	r1, [r3, #0]
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	330a      	adds	r3, #10
 800d2c6:	781a      	ldrb	r2, [r3, #0]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	330a      	adds	r3, #10
 800d2cc:	404a      	eors	r2, r1
 800d2ce:	b2d2      	uxtb	r2, r2
 800d2d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	330b      	adds	r3, #11
 800d2d6:	7819      	ldrb	r1, [r3, #0]
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	330b      	adds	r3, #11
 800d2dc:	781a      	ldrb	r2, [r3, #0]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	330b      	adds	r3, #11
 800d2e2:	404a      	eors	r2, r1
 800d2e4:	b2d2      	uxtb	r2, r2
 800d2e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	330c      	adds	r3, #12
 800d2ec:	7819      	ldrb	r1, [r3, #0]
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	330c      	adds	r3, #12
 800d2f2:	781a      	ldrb	r2, [r3, #0]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	330c      	adds	r3, #12
 800d2f8:	404a      	eors	r2, r1
 800d2fa:	b2d2      	uxtb	r2, r2
 800d2fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	330d      	adds	r3, #13
 800d302:	7819      	ldrb	r1, [r3, #0]
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	330d      	adds	r3, #13
 800d308:	781a      	ldrb	r2, [r3, #0]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	330d      	adds	r3, #13
 800d30e:	404a      	eors	r2, r1
 800d310:	b2d2      	uxtb	r2, r2
 800d312:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	330e      	adds	r3, #14
 800d318:	7819      	ldrb	r1, [r3, #0]
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	330e      	adds	r3, #14
 800d31e:	781a      	ldrb	r2, [r3, #0]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	330e      	adds	r3, #14
 800d324:	404a      	eors	r2, r1
 800d326:	b2d2      	uxtb	r2, r2
 800d328:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	330f      	adds	r3, #15
 800d32e:	7819      	ldrb	r1, [r3, #0]
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	330f      	adds	r3, #15
 800d334:	781a      	ldrb	r2, [r3, #0]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	330f      	adds	r3, #15
 800d33a:	404a      	eors	r2, r1
 800d33c:	b2d2      	uxtb	r2, r2
 800d33e:	701a      	strb	r2, [r3, #0]
#endif
}
 800d340:	bf00      	nop
 800d342:	370c      	adds	r7, #12
 800d344:	46bd      	mov	sp, r7
 800d346:	bc80      	pop	{r7}
 800d348:	4770      	bx	lr

0800d34a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800d34a:	b480      	push	{r7}
 800d34c:	b085      	sub	sp, #20
 800d34e:	af00      	add	r7, sp, #0
 800d350:	60f8      	str	r0, [r7, #12]
 800d352:	60b9      	str	r1, [r7, #8]
 800d354:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	781a      	ldrb	r2, [r3, #0]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	781b      	ldrb	r3, [r3, #0]
 800d35e:	4053      	eors	r3, r2
 800d360:	b2da      	uxtb	r2, r3
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	3301      	adds	r3, #1
 800d36a:	7819      	ldrb	r1, [r3, #0]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	3301      	adds	r3, #1
 800d370:	781a      	ldrb	r2, [r3, #0]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	3301      	adds	r3, #1
 800d376:	404a      	eors	r2, r1
 800d378:	b2d2      	uxtb	r2, r2
 800d37a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	3302      	adds	r3, #2
 800d380:	7819      	ldrb	r1, [r3, #0]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	3302      	adds	r3, #2
 800d386:	781a      	ldrb	r2, [r3, #0]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	3302      	adds	r3, #2
 800d38c:	404a      	eors	r2, r1
 800d38e:	b2d2      	uxtb	r2, r2
 800d390:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	3303      	adds	r3, #3
 800d396:	7819      	ldrb	r1, [r3, #0]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	3303      	adds	r3, #3
 800d39c:	781a      	ldrb	r2, [r3, #0]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	3303      	adds	r3, #3
 800d3a2:	404a      	eors	r2, r1
 800d3a4:	b2d2      	uxtb	r2, r2
 800d3a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	3304      	adds	r3, #4
 800d3ac:	7819      	ldrb	r1, [r3, #0]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	3304      	adds	r3, #4
 800d3b2:	781a      	ldrb	r2, [r3, #0]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	3304      	adds	r3, #4
 800d3b8:	404a      	eors	r2, r1
 800d3ba:	b2d2      	uxtb	r2, r2
 800d3bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	3305      	adds	r3, #5
 800d3c2:	7819      	ldrb	r1, [r3, #0]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	3305      	adds	r3, #5
 800d3c8:	781a      	ldrb	r2, [r3, #0]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	3305      	adds	r3, #5
 800d3ce:	404a      	eors	r2, r1
 800d3d0:	b2d2      	uxtb	r2, r2
 800d3d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	3306      	adds	r3, #6
 800d3d8:	7819      	ldrb	r1, [r3, #0]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	3306      	adds	r3, #6
 800d3de:	781a      	ldrb	r2, [r3, #0]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	3306      	adds	r3, #6
 800d3e4:	404a      	eors	r2, r1
 800d3e6:	b2d2      	uxtb	r2, r2
 800d3e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	3307      	adds	r3, #7
 800d3ee:	7819      	ldrb	r1, [r3, #0]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	3307      	adds	r3, #7
 800d3f4:	781a      	ldrb	r2, [r3, #0]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	3307      	adds	r3, #7
 800d3fa:	404a      	eors	r2, r1
 800d3fc:	b2d2      	uxtb	r2, r2
 800d3fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	3308      	adds	r3, #8
 800d404:	7819      	ldrb	r1, [r3, #0]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	3308      	adds	r3, #8
 800d40a:	781a      	ldrb	r2, [r3, #0]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	3308      	adds	r3, #8
 800d410:	404a      	eors	r2, r1
 800d412:	b2d2      	uxtb	r2, r2
 800d414:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	3309      	adds	r3, #9
 800d41a:	7819      	ldrb	r1, [r3, #0]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	3309      	adds	r3, #9
 800d420:	781a      	ldrb	r2, [r3, #0]
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	3309      	adds	r3, #9
 800d426:	404a      	eors	r2, r1
 800d428:	b2d2      	uxtb	r2, r2
 800d42a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	330a      	adds	r3, #10
 800d430:	7819      	ldrb	r1, [r3, #0]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	330a      	adds	r3, #10
 800d436:	781a      	ldrb	r2, [r3, #0]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	330a      	adds	r3, #10
 800d43c:	404a      	eors	r2, r1
 800d43e:	b2d2      	uxtb	r2, r2
 800d440:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	330b      	adds	r3, #11
 800d446:	7819      	ldrb	r1, [r3, #0]
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	330b      	adds	r3, #11
 800d44c:	781a      	ldrb	r2, [r3, #0]
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	330b      	adds	r3, #11
 800d452:	404a      	eors	r2, r1
 800d454:	b2d2      	uxtb	r2, r2
 800d456:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	330c      	adds	r3, #12
 800d45c:	7819      	ldrb	r1, [r3, #0]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	330c      	adds	r3, #12
 800d462:	781a      	ldrb	r2, [r3, #0]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	330c      	adds	r3, #12
 800d468:	404a      	eors	r2, r1
 800d46a:	b2d2      	uxtb	r2, r2
 800d46c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	330d      	adds	r3, #13
 800d472:	7819      	ldrb	r1, [r3, #0]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	330d      	adds	r3, #13
 800d478:	781a      	ldrb	r2, [r3, #0]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	330d      	adds	r3, #13
 800d47e:	404a      	eors	r2, r1
 800d480:	b2d2      	uxtb	r2, r2
 800d482:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	330e      	adds	r3, #14
 800d488:	7819      	ldrb	r1, [r3, #0]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	330e      	adds	r3, #14
 800d48e:	781a      	ldrb	r2, [r3, #0]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	330e      	adds	r3, #14
 800d494:	404a      	eors	r2, r1
 800d496:	b2d2      	uxtb	r2, r2
 800d498:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	330f      	adds	r3, #15
 800d49e:	7819      	ldrb	r1, [r3, #0]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	330f      	adds	r3, #15
 800d4a4:	781a      	ldrb	r2, [r3, #0]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	330f      	adds	r3, #15
 800d4aa:	404a      	eors	r2, r1
 800d4ac:	b2d2      	uxtb	r2, r2
 800d4ae:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800d4b0:	bf00      	nop
 800d4b2:	3714      	adds	r7, #20
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bc80      	pop	{r7}
 800d4b8:	4770      	bx	lr

0800d4ba <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800d4ba:	b580      	push	{r7, lr}
 800d4bc:	b082      	sub	sp, #8
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	6078      	str	r0, [r7, #4]
 800d4c2:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800d4c4:	6839      	ldr	r1, [r7, #0]
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f7ff fe88 	bl	800d1dc <xor_block>
}
 800d4cc:	bf00      	nop
 800d4ce:	3708      	adds	r7, #8
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800d4d4:	b480      	push	{r7}
 800d4d6:	b085      	sub	sp, #20
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	4b48      	ldr	r3, [pc, #288]	; (800d604 <shift_sub_rows+0x130>)
 800d4e4:	5c9a      	ldrb	r2, [r3, r2]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	701a      	strb	r2, [r3, #0]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	3304      	adds	r3, #4
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	3304      	adds	r3, #4
 800d4f6:	4a43      	ldr	r2, [pc, #268]	; (800d604 <shift_sub_rows+0x130>)
 800d4f8:	5c52      	ldrb	r2, [r2, r1]
 800d4fa:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	3308      	adds	r3, #8
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	4619      	mov	r1, r3
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	3308      	adds	r3, #8
 800d508:	4a3e      	ldr	r2, [pc, #248]	; (800d604 <shift_sub_rows+0x130>)
 800d50a:	5c52      	ldrb	r2, [r2, r1]
 800d50c:	701a      	strb	r2, [r3, #0]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	330c      	adds	r3, #12
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	4619      	mov	r1, r3
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	330c      	adds	r3, #12
 800d51a:	4a3a      	ldr	r2, [pc, #232]	; (800d604 <shift_sub_rows+0x130>)
 800d51c:	5c52      	ldrb	r2, [r2, r1]
 800d51e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	785b      	ldrb	r3, [r3, #1]
 800d524:	73fb      	strb	r3, [r7, #15]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	3305      	adds	r3, #5
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	4619      	mov	r1, r3
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	3301      	adds	r3, #1
 800d532:	4a34      	ldr	r2, [pc, #208]	; (800d604 <shift_sub_rows+0x130>)
 800d534:	5c52      	ldrb	r2, [r2, r1]
 800d536:	701a      	strb	r2, [r3, #0]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	3309      	adds	r3, #9
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	4619      	mov	r1, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	3305      	adds	r3, #5
 800d544:	4a2f      	ldr	r2, [pc, #188]	; (800d604 <shift_sub_rows+0x130>)
 800d546:	5c52      	ldrb	r2, [r2, r1]
 800d548:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	330d      	adds	r3, #13
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	4619      	mov	r1, r3
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	3309      	adds	r3, #9
 800d556:	4a2b      	ldr	r2, [pc, #172]	; (800d604 <shift_sub_rows+0x130>)
 800d558:	5c52      	ldrb	r2, [r2, r1]
 800d55a:	701a      	strb	r2, [r3, #0]
 800d55c:	7bfa      	ldrb	r2, [r7, #15]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	330d      	adds	r3, #13
 800d562:	4928      	ldr	r1, [pc, #160]	; (800d604 <shift_sub_rows+0x130>)
 800d564:	5c8a      	ldrb	r2, [r1, r2]
 800d566:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	789b      	ldrb	r3, [r3, #2]
 800d56c:	73fb      	strb	r3, [r7, #15]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	330a      	adds	r3, #10
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	4619      	mov	r1, r3
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	3302      	adds	r3, #2
 800d57a:	4a22      	ldr	r2, [pc, #136]	; (800d604 <shift_sub_rows+0x130>)
 800d57c:	5c52      	ldrb	r2, [r2, r1]
 800d57e:	701a      	strb	r2, [r3, #0]
 800d580:	7bfa      	ldrb	r2, [r7, #15]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	330a      	adds	r3, #10
 800d586:	491f      	ldr	r1, [pc, #124]	; (800d604 <shift_sub_rows+0x130>)
 800d588:	5c8a      	ldrb	r2, [r1, r2]
 800d58a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	799b      	ldrb	r3, [r3, #6]
 800d590:	73fb      	strb	r3, [r7, #15]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	330e      	adds	r3, #14
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	4619      	mov	r1, r3
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	3306      	adds	r3, #6
 800d59e:	4a19      	ldr	r2, [pc, #100]	; (800d604 <shift_sub_rows+0x130>)
 800d5a0:	5c52      	ldrb	r2, [r2, r1]
 800d5a2:	701a      	strb	r2, [r3, #0]
 800d5a4:	7bfa      	ldrb	r2, [r7, #15]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	330e      	adds	r3, #14
 800d5aa:	4916      	ldr	r1, [pc, #88]	; (800d604 <shift_sub_rows+0x130>)
 800d5ac:	5c8a      	ldrb	r2, [r1, r2]
 800d5ae:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	7bdb      	ldrb	r3, [r3, #15]
 800d5b4:	73fb      	strb	r3, [r7, #15]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	330b      	adds	r3, #11
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	4619      	mov	r1, r3
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	330f      	adds	r3, #15
 800d5c2:	4a10      	ldr	r2, [pc, #64]	; (800d604 <shift_sub_rows+0x130>)
 800d5c4:	5c52      	ldrb	r2, [r2, r1]
 800d5c6:	701a      	strb	r2, [r3, #0]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	3307      	adds	r3, #7
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	330b      	adds	r3, #11
 800d5d4:	4a0b      	ldr	r2, [pc, #44]	; (800d604 <shift_sub_rows+0x130>)
 800d5d6:	5c52      	ldrb	r2, [r2, r1]
 800d5d8:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	3303      	adds	r3, #3
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	3307      	adds	r3, #7
 800d5e6:	4a07      	ldr	r2, [pc, #28]	; (800d604 <shift_sub_rows+0x130>)
 800d5e8:	5c52      	ldrb	r2, [r2, r1]
 800d5ea:	701a      	strb	r2, [r3, #0]
 800d5ec:	7bfa      	ldrb	r2, [r7, #15]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	3303      	adds	r3, #3
 800d5f2:	4904      	ldr	r1, [pc, #16]	; (800d604 <shift_sub_rows+0x130>)
 800d5f4:	5c8a      	ldrb	r2, [r1, r2]
 800d5f6:	701a      	strb	r2, [r3, #0]
}
 800d5f8:	bf00      	nop
 800d5fa:	3714      	adds	r7, #20
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bc80      	pop	{r7}
 800d600:	4770      	bx	lr
 800d602:	bf00      	nop
 800d604:	0801e4f4 	.word	0x0801e4f4

0800d608 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800d608:	b580      	push	{r7, lr}
 800d60a:	b086      	sub	sp, #24
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800d610:	f107 0308 	add.w	r3, r7, #8
 800d614:	6879      	ldr	r1, [r7, #4]
 800d616:	4618      	mov	r0, r3
 800d618:	f7ff fd6c 	bl	800d0f4 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800d61c:	7a3b      	ldrb	r3, [r7, #8]
 800d61e:	461a      	mov	r2, r3
 800d620:	4b9a      	ldr	r3, [pc, #616]	; (800d88c <mix_sub_columns+0x284>)
 800d622:	5c9a      	ldrb	r2, [r3, r2]
 800d624:	7b7b      	ldrb	r3, [r7, #13]
 800d626:	4619      	mov	r1, r3
 800d628:	4b99      	ldr	r3, [pc, #612]	; (800d890 <mix_sub_columns+0x288>)
 800d62a:	5c5b      	ldrb	r3, [r3, r1]
 800d62c:	4053      	eors	r3, r2
 800d62e:	b2da      	uxtb	r2, r3
 800d630:	7cbb      	ldrb	r3, [r7, #18]
 800d632:	4619      	mov	r1, r3
 800d634:	4b97      	ldr	r3, [pc, #604]	; (800d894 <mix_sub_columns+0x28c>)
 800d636:	5c5b      	ldrb	r3, [r3, r1]
 800d638:	4053      	eors	r3, r2
 800d63a:	b2da      	uxtb	r2, r3
 800d63c:	7dfb      	ldrb	r3, [r7, #23]
 800d63e:	4619      	mov	r1, r3
 800d640:	4b94      	ldr	r3, [pc, #592]	; (800d894 <mix_sub_columns+0x28c>)
 800d642:	5c5b      	ldrb	r3, [r3, r1]
 800d644:	4053      	eors	r3, r2
 800d646:	b2da      	uxtb	r2, r3
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800d64c:	7a3b      	ldrb	r3, [r7, #8]
 800d64e:	461a      	mov	r2, r3
 800d650:	4b90      	ldr	r3, [pc, #576]	; (800d894 <mix_sub_columns+0x28c>)
 800d652:	5c9a      	ldrb	r2, [r3, r2]
 800d654:	7b7b      	ldrb	r3, [r7, #13]
 800d656:	4619      	mov	r1, r3
 800d658:	4b8c      	ldr	r3, [pc, #560]	; (800d88c <mix_sub_columns+0x284>)
 800d65a:	5c5b      	ldrb	r3, [r3, r1]
 800d65c:	4053      	eors	r3, r2
 800d65e:	b2da      	uxtb	r2, r3
 800d660:	7cbb      	ldrb	r3, [r7, #18]
 800d662:	4619      	mov	r1, r3
 800d664:	4b8a      	ldr	r3, [pc, #552]	; (800d890 <mix_sub_columns+0x288>)
 800d666:	5c5b      	ldrb	r3, [r3, r1]
 800d668:	4053      	eors	r3, r2
 800d66a:	b2d9      	uxtb	r1, r3
 800d66c:	7dfb      	ldrb	r3, [r7, #23]
 800d66e:	461a      	mov	r2, r3
 800d670:	4b88      	ldr	r3, [pc, #544]	; (800d894 <mix_sub_columns+0x28c>)
 800d672:	5c9a      	ldrb	r2, [r3, r2]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	3301      	adds	r3, #1
 800d678:	404a      	eors	r2, r1
 800d67a:	b2d2      	uxtb	r2, r2
 800d67c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800d67e:	7a3b      	ldrb	r3, [r7, #8]
 800d680:	461a      	mov	r2, r3
 800d682:	4b84      	ldr	r3, [pc, #528]	; (800d894 <mix_sub_columns+0x28c>)
 800d684:	5c9a      	ldrb	r2, [r3, r2]
 800d686:	7b7b      	ldrb	r3, [r7, #13]
 800d688:	4619      	mov	r1, r3
 800d68a:	4b82      	ldr	r3, [pc, #520]	; (800d894 <mix_sub_columns+0x28c>)
 800d68c:	5c5b      	ldrb	r3, [r3, r1]
 800d68e:	4053      	eors	r3, r2
 800d690:	b2da      	uxtb	r2, r3
 800d692:	7cbb      	ldrb	r3, [r7, #18]
 800d694:	4619      	mov	r1, r3
 800d696:	4b7d      	ldr	r3, [pc, #500]	; (800d88c <mix_sub_columns+0x284>)
 800d698:	5c5b      	ldrb	r3, [r3, r1]
 800d69a:	4053      	eors	r3, r2
 800d69c:	b2d9      	uxtb	r1, r3
 800d69e:	7dfb      	ldrb	r3, [r7, #23]
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	4b7b      	ldr	r3, [pc, #492]	; (800d890 <mix_sub_columns+0x288>)
 800d6a4:	5c9a      	ldrb	r2, [r3, r2]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	3302      	adds	r3, #2
 800d6aa:	404a      	eors	r2, r1
 800d6ac:	b2d2      	uxtb	r2, r2
 800d6ae:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800d6b0:	7a3b      	ldrb	r3, [r7, #8]
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	4b76      	ldr	r3, [pc, #472]	; (800d890 <mix_sub_columns+0x288>)
 800d6b6:	5c9a      	ldrb	r2, [r3, r2]
 800d6b8:	7b7b      	ldrb	r3, [r7, #13]
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	4b75      	ldr	r3, [pc, #468]	; (800d894 <mix_sub_columns+0x28c>)
 800d6be:	5c5b      	ldrb	r3, [r3, r1]
 800d6c0:	4053      	eors	r3, r2
 800d6c2:	b2da      	uxtb	r2, r3
 800d6c4:	7cbb      	ldrb	r3, [r7, #18]
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	4b72      	ldr	r3, [pc, #456]	; (800d894 <mix_sub_columns+0x28c>)
 800d6ca:	5c5b      	ldrb	r3, [r3, r1]
 800d6cc:	4053      	eors	r3, r2
 800d6ce:	b2d9      	uxtb	r1, r3
 800d6d0:	7dfb      	ldrb	r3, [r7, #23]
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	4b6d      	ldr	r3, [pc, #436]	; (800d88c <mix_sub_columns+0x284>)
 800d6d6:	5c9a      	ldrb	r2, [r3, r2]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	3303      	adds	r3, #3
 800d6dc:	404a      	eors	r2, r1
 800d6de:	b2d2      	uxtb	r2, r2
 800d6e0:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800d6e2:	7b3b      	ldrb	r3, [r7, #12]
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	4b69      	ldr	r3, [pc, #420]	; (800d88c <mix_sub_columns+0x284>)
 800d6e8:	5c9a      	ldrb	r2, [r3, r2]
 800d6ea:	7c7b      	ldrb	r3, [r7, #17]
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	4b68      	ldr	r3, [pc, #416]	; (800d890 <mix_sub_columns+0x288>)
 800d6f0:	5c5b      	ldrb	r3, [r3, r1]
 800d6f2:	4053      	eors	r3, r2
 800d6f4:	b2da      	uxtb	r2, r3
 800d6f6:	7dbb      	ldrb	r3, [r7, #22]
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	4b66      	ldr	r3, [pc, #408]	; (800d894 <mix_sub_columns+0x28c>)
 800d6fc:	5c5b      	ldrb	r3, [r3, r1]
 800d6fe:	4053      	eors	r3, r2
 800d700:	b2d9      	uxtb	r1, r3
 800d702:	7afb      	ldrb	r3, [r7, #11]
 800d704:	461a      	mov	r2, r3
 800d706:	4b63      	ldr	r3, [pc, #396]	; (800d894 <mix_sub_columns+0x28c>)
 800d708:	5c9a      	ldrb	r2, [r3, r2]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	3304      	adds	r3, #4
 800d70e:	404a      	eors	r2, r1
 800d710:	b2d2      	uxtb	r2, r2
 800d712:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800d714:	7b3b      	ldrb	r3, [r7, #12]
 800d716:	461a      	mov	r2, r3
 800d718:	4b5e      	ldr	r3, [pc, #376]	; (800d894 <mix_sub_columns+0x28c>)
 800d71a:	5c9a      	ldrb	r2, [r3, r2]
 800d71c:	7c7b      	ldrb	r3, [r7, #17]
 800d71e:	4619      	mov	r1, r3
 800d720:	4b5a      	ldr	r3, [pc, #360]	; (800d88c <mix_sub_columns+0x284>)
 800d722:	5c5b      	ldrb	r3, [r3, r1]
 800d724:	4053      	eors	r3, r2
 800d726:	b2da      	uxtb	r2, r3
 800d728:	7dbb      	ldrb	r3, [r7, #22]
 800d72a:	4619      	mov	r1, r3
 800d72c:	4b58      	ldr	r3, [pc, #352]	; (800d890 <mix_sub_columns+0x288>)
 800d72e:	5c5b      	ldrb	r3, [r3, r1]
 800d730:	4053      	eors	r3, r2
 800d732:	b2d9      	uxtb	r1, r3
 800d734:	7afb      	ldrb	r3, [r7, #11]
 800d736:	461a      	mov	r2, r3
 800d738:	4b56      	ldr	r3, [pc, #344]	; (800d894 <mix_sub_columns+0x28c>)
 800d73a:	5c9a      	ldrb	r2, [r3, r2]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	3305      	adds	r3, #5
 800d740:	404a      	eors	r2, r1
 800d742:	b2d2      	uxtb	r2, r2
 800d744:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800d746:	7b3b      	ldrb	r3, [r7, #12]
 800d748:	461a      	mov	r2, r3
 800d74a:	4b52      	ldr	r3, [pc, #328]	; (800d894 <mix_sub_columns+0x28c>)
 800d74c:	5c9a      	ldrb	r2, [r3, r2]
 800d74e:	7c7b      	ldrb	r3, [r7, #17]
 800d750:	4619      	mov	r1, r3
 800d752:	4b50      	ldr	r3, [pc, #320]	; (800d894 <mix_sub_columns+0x28c>)
 800d754:	5c5b      	ldrb	r3, [r3, r1]
 800d756:	4053      	eors	r3, r2
 800d758:	b2da      	uxtb	r2, r3
 800d75a:	7dbb      	ldrb	r3, [r7, #22]
 800d75c:	4619      	mov	r1, r3
 800d75e:	4b4b      	ldr	r3, [pc, #300]	; (800d88c <mix_sub_columns+0x284>)
 800d760:	5c5b      	ldrb	r3, [r3, r1]
 800d762:	4053      	eors	r3, r2
 800d764:	b2d9      	uxtb	r1, r3
 800d766:	7afb      	ldrb	r3, [r7, #11]
 800d768:	461a      	mov	r2, r3
 800d76a:	4b49      	ldr	r3, [pc, #292]	; (800d890 <mix_sub_columns+0x288>)
 800d76c:	5c9a      	ldrb	r2, [r3, r2]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	3306      	adds	r3, #6
 800d772:	404a      	eors	r2, r1
 800d774:	b2d2      	uxtb	r2, r2
 800d776:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800d778:	7b3b      	ldrb	r3, [r7, #12]
 800d77a:	461a      	mov	r2, r3
 800d77c:	4b44      	ldr	r3, [pc, #272]	; (800d890 <mix_sub_columns+0x288>)
 800d77e:	5c9a      	ldrb	r2, [r3, r2]
 800d780:	7c7b      	ldrb	r3, [r7, #17]
 800d782:	4619      	mov	r1, r3
 800d784:	4b43      	ldr	r3, [pc, #268]	; (800d894 <mix_sub_columns+0x28c>)
 800d786:	5c5b      	ldrb	r3, [r3, r1]
 800d788:	4053      	eors	r3, r2
 800d78a:	b2da      	uxtb	r2, r3
 800d78c:	7dbb      	ldrb	r3, [r7, #22]
 800d78e:	4619      	mov	r1, r3
 800d790:	4b40      	ldr	r3, [pc, #256]	; (800d894 <mix_sub_columns+0x28c>)
 800d792:	5c5b      	ldrb	r3, [r3, r1]
 800d794:	4053      	eors	r3, r2
 800d796:	b2d9      	uxtb	r1, r3
 800d798:	7afb      	ldrb	r3, [r7, #11]
 800d79a:	461a      	mov	r2, r3
 800d79c:	4b3b      	ldr	r3, [pc, #236]	; (800d88c <mix_sub_columns+0x284>)
 800d79e:	5c9a      	ldrb	r2, [r3, r2]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	3307      	adds	r3, #7
 800d7a4:	404a      	eors	r2, r1
 800d7a6:	b2d2      	uxtb	r2, r2
 800d7a8:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800d7aa:	7c3b      	ldrb	r3, [r7, #16]
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	4b37      	ldr	r3, [pc, #220]	; (800d88c <mix_sub_columns+0x284>)
 800d7b0:	5c9a      	ldrb	r2, [r3, r2]
 800d7b2:	7d7b      	ldrb	r3, [r7, #21]
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	4b36      	ldr	r3, [pc, #216]	; (800d890 <mix_sub_columns+0x288>)
 800d7b8:	5c5b      	ldrb	r3, [r3, r1]
 800d7ba:	4053      	eors	r3, r2
 800d7bc:	b2da      	uxtb	r2, r3
 800d7be:	7abb      	ldrb	r3, [r7, #10]
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	4b34      	ldr	r3, [pc, #208]	; (800d894 <mix_sub_columns+0x28c>)
 800d7c4:	5c5b      	ldrb	r3, [r3, r1]
 800d7c6:	4053      	eors	r3, r2
 800d7c8:	b2d9      	uxtb	r1, r3
 800d7ca:	7bfb      	ldrb	r3, [r7, #15]
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	4b31      	ldr	r3, [pc, #196]	; (800d894 <mix_sub_columns+0x28c>)
 800d7d0:	5c9a      	ldrb	r2, [r3, r2]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	3308      	adds	r3, #8
 800d7d6:	404a      	eors	r2, r1
 800d7d8:	b2d2      	uxtb	r2, r2
 800d7da:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800d7dc:	7c3b      	ldrb	r3, [r7, #16]
 800d7de:	461a      	mov	r2, r3
 800d7e0:	4b2c      	ldr	r3, [pc, #176]	; (800d894 <mix_sub_columns+0x28c>)
 800d7e2:	5c9a      	ldrb	r2, [r3, r2]
 800d7e4:	7d7b      	ldrb	r3, [r7, #21]
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	4b28      	ldr	r3, [pc, #160]	; (800d88c <mix_sub_columns+0x284>)
 800d7ea:	5c5b      	ldrb	r3, [r3, r1]
 800d7ec:	4053      	eors	r3, r2
 800d7ee:	b2da      	uxtb	r2, r3
 800d7f0:	7abb      	ldrb	r3, [r7, #10]
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	4b26      	ldr	r3, [pc, #152]	; (800d890 <mix_sub_columns+0x288>)
 800d7f6:	5c5b      	ldrb	r3, [r3, r1]
 800d7f8:	4053      	eors	r3, r2
 800d7fa:	b2d9      	uxtb	r1, r3
 800d7fc:	7bfb      	ldrb	r3, [r7, #15]
 800d7fe:	461a      	mov	r2, r3
 800d800:	4b24      	ldr	r3, [pc, #144]	; (800d894 <mix_sub_columns+0x28c>)
 800d802:	5c9a      	ldrb	r2, [r3, r2]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	3309      	adds	r3, #9
 800d808:	404a      	eors	r2, r1
 800d80a:	b2d2      	uxtb	r2, r2
 800d80c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800d80e:	7c3b      	ldrb	r3, [r7, #16]
 800d810:	461a      	mov	r2, r3
 800d812:	4b20      	ldr	r3, [pc, #128]	; (800d894 <mix_sub_columns+0x28c>)
 800d814:	5c9a      	ldrb	r2, [r3, r2]
 800d816:	7d7b      	ldrb	r3, [r7, #21]
 800d818:	4619      	mov	r1, r3
 800d81a:	4b1e      	ldr	r3, [pc, #120]	; (800d894 <mix_sub_columns+0x28c>)
 800d81c:	5c5b      	ldrb	r3, [r3, r1]
 800d81e:	4053      	eors	r3, r2
 800d820:	b2da      	uxtb	r2, r3
 800d822:	7abb      	ldrb	r3, [r7, #10]
 800d824:	4619      	mov	r1, r3
 800d826:	4b19      	ldr	r3, [pc, #100]	; (800d88c <mix_sub_columns+0x284>)
 800d828:	5c5b      	ldrb	r3, [r3, r1]
 800d82a:	4053      	eors	r3, r2
 800d82c:	b2d9      	uxtb	r1, r3
 800d82e:	7bfb      	ldrb	r3, [r7, #15]
 800d830:	461a      	mov	r2, r3
 800d832:	4b17      	ldr	r3, [pc, #92]	; (800d890 <mix_sub_columns+0x288>)
 800d834:	5c9a      	ldrb	r2, [r3, r2]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	330a      	adds	r3, #10
 800d83a:	404a      	eors	r2, r1
 800d83c:	b2d2      	uxtb	r2, r2
 800d83e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800d840:	7c3b      	ldrb	r3, [r7, #16]
 800d842:	461a      	mov	r2, r3
 800d844:	4b12      	ldr	r3, [pc, #72]	; (800d890 <mix_sub_columns+0x288>)
 800d846:	5c9a      	ldrb	r2, [r3, r2]
 800d848:	7d7b      	ldrb	r3, [r7, #21]
 800d84a:	4619      	mov	r1, r3
 800d84c:	4b11      	ldr	r3, [pc, #68]	; (800d894 <mix_sub_columns+0x28c>)
 800d84e:	5c5b      	ldrb	r3, [r3, r1]
 800d850:	4053      	eors	r3, r2
 800d852:	b2da      	uxtb	r2, r3
 800d854:	7abb      	ldrb	r3, [r7, #10]
 800d856:	4619      	mov	r1, r3
 800d858:	4b0e      	ldr	r3, [pc, #56]	; (800d894 <mix_sub_columns+0x28c>)
 800d85a:	5c5b      	ldrb	r3, [r3, r1]
 800d85c:	4053      	eors	r3, r2
 800d85e:	b2d9      	uxtb	r1, r3
 800d860:	7bfb      	ldrb	r3, [r7, #15]
 800d862:	461a      	mov	r2, r3
 800d864:	4b09      	ldr	r3, [pc, #36]	; (800d88c <mix_sub_columns+0x284>)
 800d866:	5c9a      	ldrb	r2, [r3, r2]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	330b      	adds	r3, #11
 800d86c:	404a      	eors	r2, r1
 800d86e:	b2d2      	uxtb	r2, r2
 800d870:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800d872:	7d3b      	ldrb	r3, [r7, #20]
 800d874:	461a      	mov	r2, r3
 800d876:	4b05      	ldr	r3, [pc, #20]	; (800d88c <mix_sub_columns+0x284>)
 800d878:	5c9a      	ldrb	r2, [r3, r2]
 800d87a:	7a7b      	ldrb	r3, [r7, #9]
 800d87c:	4619      	mov	r1, r3
 800d87e:	4b04      	ldr	r3, [pc, #16]	; (800d890 <mix_sub_columns+0x288>)
 800d880:	5c5b      	ldrb	r3, [r3, r1]
 800d882:	4053      	eors	r3, r2
 800d884:	b2da      	uxtb	r2, r3
 800d886:	7bbb      	ldrb	r3, [r7, #14]
 800d888:	4619      	mov	r1, r3
 800d88a:	e005      	b.n	800d898 <mix_sub_columns+0x290>
 800d88c:	0801e5f4 	.word	0x0801e5f4
 800d890:	0801e6f4 	.word	0x0801e6f4
 800d894:	0801e4f4 	.word	0x0801e4f4
 800d898:	4b2d      	ldr	r3, [pc, #180]	; (800d950 <mix_sub_columns+0x348>)
 800d89a:	5c5b      	ldrb	r3, [r3, r1]
 800d89c:	4053      	eors	r3, r2
 800d89e:	b2d9      	uxtb	r1, r3
 800d8a0:	7cfb      	ldrb	r3, [r7, #19]
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	4b2a      	ldr	r3, [pc, #168]	; (800d950 <mix_sub_columns+0x348>)
 800d8a6:	5c9a      	ldrb	r2, [r3, r2]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	330c      	adds	r3, #12
 800d8ac:	404a      	eors	r2, r1
 800d8ae:	b2d2      	uxtb	r2, r2
 800d8b0:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800d8b2:	7d3b      	ldrb	r3, [r7, #20]
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	4b26      	ldr	r3, [pc, #152]	; (800d950 <mix_sub_columns+0x348>)
 800d8b8:	5c9a      	ldrb	r2, [r3, r2]
 800d8ba:	7a7b      	ldrb	r3, [r7, #9]
 800d8bc:	4619      	mov	r1, r3
 800d8be:	4b25      	ldr	r3, [pc, #148]	; (800d954 <mix_sub_columns+0x34c>)
 800d8c0:	5c5b      	ldrb	r3, [r3, r1]
 800d8c2:	4053      	eors	r3, r2
 800d8c4:	b2da      	uxtb	r2, r3
 800d8c6:	7bbb      	ldrb	r3, [r7, #14]
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	4b23      	ldr	r3, [pc, #140]	; (800d958 <mix_sub_columns+0x350>)
 800d8cc:	5c5b      	ldrb	r3, [r3, r1]
 800d8ce:	4053      	eors	r3, r2
 800d8d0:	b2d9      	uxtb	r1, r3
 800d8d2:	7cfb      	ldrb	r3, [r7, #19]
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	4b1e      	ldr	r3, [pc, #120]	; (800d950 <mix_sub_columns+0x348>)
 800d8d8:	5c9a      	ldrb	r2, [r3, r2]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	330d      	adds	r3, #13
 800d8de:	404a      	eors	r2, r1
 800d8e0:	b2d2      	uxtb	r2, r2
 800d8e2:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800d8e4:	7d3b      	ldrb	r3, [r7, #20]
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	4b19      	ldr	r3, [pc, #100]	; (800d950 <mix_sub_columns+0x348>)
 800d8ea:	5c9a      	ldrb	r2, [r3, r2]
 800d8ec:	7a7b      	ldrb	r3, [r7, #9]
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	4b17      	ldr	r3, [pc, #92]	; (800d950 <mix_sub_columns+0x348>)
 800d8f2:	5c5b      	ldrb	r3, [r3, r1]
 800d8f4:	4053      	eors	r3, r2
 800d8f6:	b2da      	uxtb	r2, r3
 800d8f8:	7bbb      	ldrb	r3, [r7, #14]
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	4b15      	ldr	r3, [pc, #84]	; (800d954 <mix_sub_columns+0x34c>)
 800d8fe:	5c5b      	ldrb	r3, [r3, r1]
 800d900:	4053      	eors	r3, r2
 800d902:	b2d9      	uxtb	r1, r3
 800d904:	7cfb      	ldrb	r3, [r7, #19]
 800d906:	461a      	mov	r2, r3
 800d908:	4b13      	ldr	r3, [pc, #76]	; (800d958 <mix_sub_columns+0x350>)
 800d90a:	5c9a      	ldrb	r2, [r3, r2]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	330e      	adds	r3, #14
 800d910:	404a      	eors	r2, r1
 800d912:	b2d2      	uxtb	r2, r2
 800d914:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800d916:	7d3b      	ldrb	r3, [r7, #20]
 800d918:	461a      	mov	r2, r3
 800d91a:	4b0f      	ldr	r3, [pc, #60]	; (800d958 <mix_sub_columns+0x350>)
 800d91c:	5c9a      	ldrb	r2, [r3, r2]
 800d91e:	7a7b      	ldrb	r3, [r7, #9]
 800d920:	4619      	mov	r1, r3
 800d922:	4b0b      	ldr	r3, [pc, #44]	; (800d950 <mix_sub_columns+0x348>)
 800d924:	5c5b      	ldrb	r3, [r3, r1]
 800d926:	4053      	eors	r3, r2
 800d928:	b2da      	uxtb	r2, r3
 800d92a:	7bbb      	ldrb	r3, [r7, #14]
 800d92c:	4619      	mov	r1, r3
 800d92e:	4b08      	ldr	r3, [pc, #32]	; (800d950 <mix_sub_columns+0x348>)
 800d930:	5c5b      	ldrb	r3, [r3, r1]
 800d932:	4053      	eors	r3, r2
 800d934:	b2d9      	uxtb	r1, r3
 800d936:	7cfb      	ldrb	r3, [r7, #19]
 800d938:	461a      	mov	r2, r3
 800d93a:	4b06      	ldr	r3, [pc, #24]	; (800d954 <mix_sub_columns+0x34c>)
 800d93c:	5c9a      	ldrb	r2, [r3, r2]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	330f      	adds	r3, #15
 800d942:	404a      	eors	r2, r1
 800d944:	b2d2      	uxtb	r2, r2
 800d946:	701a      	strb	r2, [r3, #0]
  }
 800d948:	bf00      	nop
 800d94a:	3718      	adds	r7, #24
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	0801e4f4 	.word	0x0801e4f4
 800d954:	0801e5f4 	.word	0x0801e5f4
 800d958:	0801e6f4 	.word	0x0801e6f4

0800d95c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b086      	sub	sp, #24
 800d960:	af00      	add	r7, sp, #0
 800d962:	60f8      	str	r0, [r7, #12]
 800d964:	460b      	mov	r3, r1
 800d966:	607a      	str	r2, [r7, #4]
 800d968:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800d96a:	7afb      	ldrb	r3, [r7, #11]
 800d96c:	3b10      	subs	r3, #16
 800d96e:	2b10      	cmp	r3, #16
 800d970:	bf8c      	ite	hi
 800d972:	2201      	movhi	r2, #1
 800d974:	2200      	movls	r2, #0
 800d976:	b2d2      	uxtb	r2, r2
 800d978:	2a00      	cmp	r2, #0
 800d97a:	d10b      	bne.n	800d994 <lorawan_aes_set_key+0x38>
 800d97c:	4a64      	ldr	r2, [pc, #400]	; (800db10 <lorawan_aes_set_key+0x1b4>)
 800d97e:	fa22 f303 	lsr.w	r3, r2, r3
 800d982:	f003 0301 	and.w	r3, r3, #1
 800d986:	2b00      	cmp	r3, #0
 800d988:	bf14      	ite	ne
 800d98a:	2301      	movne	r3, #1
 800d98c:	2300      	moveq	r3, #0
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	2b00      	cmp	r3, #0
 800d992:	d105      	bne.n	800d9a0 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2200      	movs	r2, #0
 800d998:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800d99c:	23ff      	movs	r3, #255	; 0xff
 800d99e:	e0b2      	b.n	800db06 <lorawan_aes_set_key+0x1aa>
        break;
 800d9a0:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	7afa      	ldrb	r2, [r7, #11]
 800d9a6:	68f9      	ldr	r1, [r7, #12]
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7ff fbfc 	bl	800d1a6 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800d9ae:	7afb      	ldrb	r3, [r7, #11]
 800d9b0:	331c      	adds	r3, #28
 800d9b2:	b2db      	uxtb	r3, r3
 800d9b4:	009b      	lsls	r3, r3, #2
 800d9b6:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800d9b8:	7c7b      	ldrb	r3, [r7, #17]
 800d9ba:	091b      	lsrs	r3, r3, #4
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	b2da      	uxtb	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d9c8:	7afb      	ldrb	r3, [r7, #11]
 800d9ca:	75fb      	strb	r3, [r7, #23]
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	75bb      	strb	r3, [r7, #22]
 800d9d0:	e093      	b.n	800dafa <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800d9d2:	7dfb      	ldrb	r3, [r7, #23]
 800d9d4:	3b04      	subs	r3, #4
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	5cd3      	ldrb	r3, [r2, r3]
 800d9da:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800d9dc:	7dfb      	ldrb	r3, [r7, #23]
 800d9de:	3b03      	subs	r3, #3
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	5cd3      	ldrb	r3, [r2, r3]
 800d9e4:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800d9e6:	7dfb      	ldrb	r3, [r7, #23]
 800d9e8:	3b02      	subs	r3, #2
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	5cd3      	ldrb	r3, [r2, r3]
 800d9ee:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800d9f0:	7dfb      	ldrb	r3, [r7, #23]
 800d9f2:	3b01      	subs	r3, #1
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	5cd3      	ldrb	r3, [r2, r3]
 800d9f8:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800d9fa:	7dfb      	ldrb	r3, [r7, #23]
 800d9fc:	7afa      	ldrb	r2, [r7, #11]
 800d9fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800da02:	fb01 f202 	mul.w	r2, r1, r2
 800da06:	1a9b      	subs	r3, r3, r2
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d127      	bne.n	800da5e <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800da0e:	7d7b      	ldrb	r3, [r7, #21]
 800da10:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800da12:	7d3b      	ldrb	r3, [r7, #20]
 800da14:	4a3f      	ldr	r2, [pc, #252]	; (800db14 <lorawan_aes_set_key+0x1b8>)
 800da16:	5cd2      	ldrb	r2, [r2, r3]
 800da18:	7dbb      	ldrb	r3, [r7, #22]
 800da1a:	4053      	eors	r3, r2
 800da1c:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800da1e:	7cfb      	ldrb	r3, [r7, #19]
 800da20:	4a3c      	ldr	r2, [pc, #240]	; (800db14 <lorawan_aes_set_key+0x1b8>)
 800da22:	5cd3      	ldrb	r3, [r2, r3]
 800da24:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800da26:	7cbb      	ldrb	r3, [r7, #18]
 800da28:	4a3a      	ldr	r2, [pc, #232]	; (800db14 <lorawan_aes_set_key+0x1b8>)
 800da2a:	5cd3      	ldrb	r3, [r2, r3]
 800da2c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800da2e:	7c3b      	ldrb	r3, [r7, #16]
 800da30:	4a38      	ldr	r2, [pc, #224]	; (800db14 <lorawan_aes_set_key+0x1b8>)
 800da32:	5cd3      	ldrb	r3, [r2, r3]
 800da34:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800da36:	7dbb      	ldrb	r3, [r7, #22]
 800da38:	005b      	lsls	r3, r3, #1
 800da3a:	b25a      	sxtb	r2, r3
 800da3c:	7dbb      	ldrb	r3, [r7, #22]
 800da3e:	09db      	lsrs	r3, r3, #7
 800da40:	b2db      	uxtb	r3, r3
 800da42:	4619      	mov	r1, r3
 800da44:	0049      	lsls	r1, r1, #1
 800da46:	440b      	add	r3, r1
 800da48:	4619      	mov	r1, r3
 800da4a:	00c8      	lsls	r0, r1, #3
 800da4c:	4619      	mov	r1, r3
 800da4e:	4603      	mov	r3, r0
 800da50:	440b      	add	r3, r1
 800da52:	b2db      	uxtb	r3, r3
 800da54:	b25b      	sxtb	r3, r3
 800da56:	4053      	eors	r3, r2
 800da58:	b25b      	sxtb	r3, r3
 800da5a:	75bb      	strb	r3, [r7, #22]
 800da5c:	e01c      	b.n	800da98 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800da5e:	7afb      	ldrb	r3, [r7, #11]
 800da60:	2b18      	cmp	r3, #24
 800da62:	d919      	bls.n	800da98 <lorawan_aes_set_key+0x13c>
 800da64:	7dfb      	ldrb	r3, [r7, #23]
 800da66:	7afa      	ldrb	r2, [r7, #11]
 800da68:	fbb3 f1f2 	udiv	r1, r3, r2
 800da6c:	fb01 f202 	mul.w	r2, r1, r2
 800da70:	1a9b      	subs	r3, r3, r2
 800da72:	b2db      	uxtb	r3, r3
 800da74:	2b10      	cmp	r3, #16
 800da76:	d10f      	bne.n	800da98 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800da78:	7d7b      	ldrb	r3, [r7, #21]
 800da7a:	4a26      	ldr	r2, [pc, #152]	; (800db14 <lorawan_aes_set_key+0x1b8>)
 800da7c:	5cd3      	ldrb	r3, [r2, r3]
 800da7e:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800da80:	7d3b      	ldrb	r3, [r7, #20]
 800da82:	4a24      	ldr	r2, [pc, #144]	; (800db14 <lorawan_aes_set_key+0x1b8>)
 800da84:	5cd3      	ldrb	r3, [r2, r3]
 800da86:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800da88:	7cfb      	ldrb	r3, [r7, #19]
 800da8a:	4a22      	ldr	r2, [pc, #136]	; (800db14 <lorawan_aes_set_key+0x1b8>)
 800da8c:	5cd3      	ldrb	r3, [r2, r3]
 800da8e:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800da90:	7cbb      	ldrb	r3, [r7, #18]
 800da92:	4a20      	ldr	r2, [pc, #128]	; (800db14 <lorawan_aes_set_key+0x1b8>)
 800da94:	5cd3      	ldrb	r3, [r2, r3]
 800da96:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800da98:	7dfa      	ldrb	r2, [r7, #23]
 800da9a:	7afb      	ldrb	r3, [r7, #11]
 800da9c:	1ad3      	subs	r3, r2, r3
 800da9e:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800daa0:	7c3b      	ldrb	r3, [r7, #16]
 800daa2:	687a      	ldr	r2, [r7, #4]
 800daa4:	5cd1      	ldrb	r1, [r2, r3]
 800daa6:	7dfb      	ldrb	r3, [r7, #23]
 800daa8:	7d7a      	ldrb	r2, [r7, #21]
 800daaa:	404a      	eors	r2, r1
 800daac:	b2d1      	uxtb	r1, r2
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800dab2:	7c3b      	ldrb	r3, [r7, #16]
 800dab4:	3301      	adds	r3, #1
 800dab6:	687a      	ldr	r2, [r7, #4]
 800dab8:	5cd1      	ldrb	r1, [r2, r3]
 800daba:	7dfb      	ldrb	r3, [r7, #23]
 800dabc:	3301      	adds	r3, #1
 800dabe:	7d3a      	ldrb	r2, [r7, #20]
 800dac0:	404a      	eors	r2, r1
 800dac2:	b2d1      	uxtb	r1, r2
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800dac8:	7c3b      	ldrb	r3, [r7, #16]
 800daca:	3302      	adds	r3, #2
 800dacc:	687a      	ldr	r2, [r7, #4]
 800dace:	5cd1      	ldrb	r1, [r2, r3]
 800dad0:	7dfb      	ldrb	r3, [r7, #23]
 800dad2:	3302      	adds	r3, #2
 800dad4:	7cfa      	ldrb	r2, [r7, #19]
 800dad6:	404a      	eors	r2, r1
 800dad8:	b2d1      	uxtb	r1, r2
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800dade:	7c3b      	ldrb	r3, [r7, #16]
 800dae0:	3303      	adds	r3, #3
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	5cd1      	ldrb	r1, [r2, r3]
 800dae6:	7dfb      	ldrb	r3, [r7, #23]
 800dae8:	3303      	adds	r3, #3
 800daea:	7cba      	ldrb	r2, [r7, #18]
 800daec:	404a      	eors	r2, r1
 800daee:	b2d1      	uxtb	r1, r2
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800daf4:	7dfb      	ldrb	r3, [r7, #23]
 800daf6:	3304      	adds	r3, #4
 800daf8:	75fb      	strb	r3, [r7, #23]
 800dafa:	7dfa      	ldrb	r2, [r7, #23]
 800dafc:	7c7b      	ldrb	r3, [r7, #17]
 800dafe:	429a      	cmp	r2, r3
 800db00:	f4ff af67 	bcc.w	800d9d2 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800db04:	2300      	movs	r3, #0
}
 800db06:	4618      	mov	r0, r3
 800db08:	3718      	adds	r7, #24
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	00010101 	.word	0x00010101
 800db14:	0801e4f4 	.word	0x0801e4f4

0800db18 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b08a      	sub	sp, #40	; 0x28
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	60f8      	str	r0, [r7, #12]
 800db20:	60b9      	str	r1, [r7, #8]
 800db22:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d038      	beq.n	800dba0 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	f107 0314 	add.w	r3, r7, #20
 800db34:	68f9      	ldr	r1, [r7, #12]
 800db36:	4618      	mov	r0, r3
 800db38:	f7ff fc07 	bl	800d34a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800db3c:	2301      	movs	r3, #1
 800db3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db42:	e014      	b.n	800db6e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800db44:	f107 0314 	add.w	r3, r7, #20
 800db48:	4618      	mov	r0, r3
 800db4a:	f7ff fd5d 	bl	800d608 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800db54:	0112      	lsls	r2, r2, #4
 800db56:	441a      	add	r2, r3
 800db58:	f107 0314 	add.w	r3, r7, #20
 800db5c:	4611      	mov	r1, r2
 800db5e:	4618      	mov	r0, r3
 800db60:	f7ff fcab 	bl	800d4ba <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800db64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db68:	3301      	adds	r3, #1
 800db6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800db74:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800db78:	429a      	cmp	r2, r3
 800db7a:	d3e3      	bcc.n	800db44 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800db7c:	f107 0314 	add.w	r3, r7, #20
 800db80:	4618      	mov	r0, r3
 800db82:	f7ff fca7 	bl	800d4d4 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800db8c:	0112      	lsls	r2, r2, #4
 800db8e:	441a      	add	r2, r3
 800db90:	f107 0314 	add.w	r3, r7, #20
 800db94:	4619      	mov	r1, r3
 800db96:	68b8      	ldr	r0, [r7, #8]
 800db98:	f7ff fbd7 	bl	800d34a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800db9c:	2300      	movs	r3, #0
 800db9e:	e000      	b.n	800dba2 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800dba0:	23ff      	movs	r3, #255	; 0xff
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3728      	adds	r7, #40	; 0x28
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
	...

0800dbac <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800dbac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbae:	b0a1      	sub	sp, #132	; 0x84
 800dbb0:	af12      	add	r7, sp, #72	; 0x48
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800dbb8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800dbbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dbc0:	4611      	mov	r1, r2
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f000 fa12 	bl	800dfec <SecureElementGetKeyByID>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d174      	bne.n	800dcb8 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dbce:	2300      	movs	r3, #0
 800dbd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dbd4:	e06c      	b.n	800dcb0 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800dbd6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800dbda:	4939      	ldr	r1, [pc, #228]	; (800dcc0 <PrintKey+0x114>)
 800dbdc:	4613      	mov	r3, r2
 800dbde:	005b      	lsls	r3, r3, #1
 800dbe0:	4413      	add	r3, r2
 800dbe2:	009b      	lsls	r3, r3, #2
 800dbe4:	440b      	add	r3, r1
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d15a      	bne.n	800dca6 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800dbf0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800dbf4:	4932      	ldr	r1, [pc, #200]	; (800dcc0 <PrintKey+0x114>)
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	005b      	lsls	r3, r3, #1
 800dbfa:	4413      	add	r3, r2
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	440b      	add	r3, r1
 800dc00:	3308      	adds	r3, #8
 800dc02:	6819      	ldr	r1, [r3, #0]
 800dc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc06:	785b      	ldrb	r3, [r3, #1]
 800dc08:	461d      	mov	r5, r3
 800dc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0c:	789b      	ldrb	r3, [r3, #2]
 800dc0e:	461e      	mov	r6, r3
 800dc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc12:	78db      	ldrb	r3, [r3, #3]
 800dc14:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc18:	791b      	ldrb	r3, [r3, #4]
 800dc1a:	627b      	str	r3, [r7, #36]	; 0x24
 800dc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1e:	795b      	ldrb	r3, [r3, #5]
 800dc20:	623b      	str	r3, [r7, #32]
 800dc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc24:	799b      	ldrb	r3, [r3, #6]
 800dc26:	61fb      	str	r3, [r7, #28]
 800dc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2a:	79db      	ldrb	r3, [r3, #7]
 800dc2c:	61bb      	str	r3, [r7, #24]
 800dc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc30:	7a1b      	ldrb	r3, [r3, #8]
 800dc32:	617b      	str	r3, [r7, #20]
 800dc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc36:	7a5b      	ldrb	r3, [r3, #9]
 800dc38:	613b      	str	r3, [r7, #16]
 800dc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3c:	7a9b      	ldrb	r3, [r3, #10]
 800dc3e:	60fb      	str	r3, [r7, #12]
 800dc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc42:	7adb      	ldrb	r3, [r3, #11]
 800dc44:	60bb      	str	r3, [r7, #8]
 800dc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc48:	7b1b      	ldrb	r3, [r3, #12]
 800dc4a:	607b      	str	r3, [r7, #4]
 800dc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4e:	7b5b      	ldrb	r3, [r3, #13]
 800dc50:	461c      	mov	r4, r3
 800dc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc54:	7b9b      	ldrb	r3, [r3, #14]
 800dc56:	4618      	mov	r0, r3
 800dc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5a:	7bdb      	ldrb	r3, [r3, #15]
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc60:	7c1b      	ldrb	r3, [r3, #16]
 800dc62:	9310      	str	r3, [sp, #64]	; 0x40
 800dc64:	920f      	str	r2, [sp, #60]	; 0x3c
 800dc66:	900e      	str	r0, [sp, #56]	; 0x38
 800dc68:	940d      	str	r4, [sp, #52]	; 0x34
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	920c      	str	r2, [sp, #48]	; 0x30
 800dc6e:	68ba      	ldr	r2, [r7, #8]
 800dc70:	920b      	str	r2, [sp, #44]	; 0x2c
 800dc72:	68fa      	ldr	r2, [r7, #12]
 800dc74:	920a      	str	r2, [sp, #40]	; 0x28
 800dc76:	693a      	ldr	r2, [r7, #16]
 800dc78:	9209      	str	r2, [sp, #36]	; 0x24
 800dc7a:	697a      	ldr	r2, [r7, #20]
 800dc7c:	9208      	str	r2, [sp, #32]
 800dc7e:	69ba      	ldr	r2, [r7, #24]
 800dc80:	9207      	str	r2, [sp, #28]
 800dc82:	69fa      	ldr	r2, [r7, #28]
 800dc84:	9206      	str	r2, [sp, #24]
 800dc86:	6a3a      	ldr	r2, [r7, #32]
 800dc88:	9205      	str	r2, [sp, #20]
 800dc8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc8c:	9204      	str	r2, [sp, #16]
 800dc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc90:	9303      	str	r3, [sp, #12]
 800dc92:	9602      	str	r6, [sp, #8]
 800dc94:	9501      	str	r5, [sp, #4]
 800dc96:	9100      	str	r1, [sp, #0]
 800dc98:	4b0a      	ldr	r3, [pc, #40]	; (800dcc4 <PrintKey+0x118>)
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	2100      	movs	r1, #0
 800dc9e:	2002      	movs	r0, #2
 800dca0:	f00f fbc6 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
 800dca4:	e008      	b.n	800dcb8 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dca6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dcaa:	3301      	adds	r3, #1
 800dcac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dcb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dcb4:	2b0a      	cmp	r3, #10
 800dcb6:	d98e      	bls.n	800dbd6 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800dcb8:	373c      	adds	r7, #60	; 0x3c
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	0801e7f4 	.word	0x0801e7f4
 800dcc4:	0801e08c 	.word	0x0801e08c

0800dcc8 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800dcc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcca:	b091      	sub	sp, #68	; 0x44
 800dccc:	af08      	add	r7, sp, #32
 800dcce:	4603      	mov	r3, r0
 800dcd0:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800dcd6:	f107 0310 	add.w	r3, r7, #16
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f000 fbf0 	bl	800e4c0 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800dce0:	7c3b      	ldrb	r3, [r7, #16]
 800dce2:	7c7a      	ldrb	r2, [r7, #17]
 800dce4:	7cb9      	ldrb	r1, [r7, #18]
 800dce6:	7cf8      	ldrb	r0, [r7, #19]
 800dce8:	7d3c      	ldrb	r4, [r7, #20]
 800dcea:	7d7d      	ldrb	r5, [r7, #21]
 800dcec:	7dbe      	ldrb	r6, [r7, #22]
 800dcee:	f897 c017 	ldrb.w	ip, [r7, #23]
 800dcf2:	f8cd c01c 	str.w	ip, [sp, #28]
 800dcf6:	9606      	str	r6, [sp, #24]
 800dcf8:	9505      	str	r5, [sp, #20]
 800dcfa:	9404      	str	r4, [sp, #16]
 800dcfc:	9003      	str	r0, [sp, #12]
 800dcfe:	9102      	str	r1, [sp, #8]
 800dd00:	9201      	str	r2, [sp, #4]
 800dd02:	9300      	str	r3, [sp, #0]
 800dd04:	4b24      	ldr	r3, [pc, #144]	; (800dd98 <PrintIds+0xd0>)
 800dd06:	2200      	movs	r2, #0
 800dd08:	2100      	movs	r1, #0
 800dd0a:	2002      	movs	r0, #2
 800dd0c:	f00f fb90 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800dd10:	f107 0318 	add.w	r3, r7, #24
 800dd14:	4618      	mov	r0, r3
 800dd16:	f000 fc03 	bl	800e520 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800dd1a:	7e3b      	ldrb	r3, [r7, #24]
 800dd1c:	7e7a      	ldrb	r2, [r7, #25]
 800dd1e:	7eb9      	ldrb	r1, [r7, #26]
 800dd20:	7ef8      	ldrb	r0, [r7, #27]
 800dd22:	7f3c      	ldrb	r4, [r7, #28]
 800dd24:	7f7d      	ldrb	r5, [r7, #29]
 800dd26:	7fbe      	ldrb	r6, [r7, #30]
 800dd28:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800dd2c:	f8cd c01c 	str.w	ip, [sp, #28]
 800dd30:	9606      	str	r6, [sp, #24]
 800dd32:	9505      	str	r5, [sp, #20]
 800dd34:	9404      	str	r4, [sp, #16]
 800dd36:	9003      	str	r0, [sp, #12]
 800dd38:	9102      	str	r1, [sp, #8]
 800dd3a:	9201      	str	r2, [sp, #4]
 800dd3c:	9300      	str	r3, [sp, #0]
 800dd3e:	4b17      	ldr	r3, [pc, #92]	; (800dd9c <PrintIds+0xd4>)
 800dd40:	2200      	movs	r2, #0
 800dd42:	2100      	movs	r1, #0
 800dd44:	2002      	movs	r0, #2
 800dd46:	f00f fb73 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800dd4a:	f107 020c 	add.w	r2, r7, #12
 800dd4e:	79fb      	ldrb	r3, [r7, #7]
 800dd50:	4611      	mov	r1, r2
 800dd52:	4618      	mov	r0, r3
 800dd54:	f000 fc16 	bl	800e584 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800dd58:	f107 030c 	add.w	r3, r7, #12
 800dd5c:	3303      	adds	r3, #3
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	461a      	mov	r2, r3
 800dd62:	f107 030c 	add.w	r3, r7, #12
 800dd66:	3302      	adds	r3, #2
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	f107 030c 	add.w	r3, r7, #12
 800dd70:	3301      	adds	r3, #1
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	4618      	mov	r0, r3
 800dd76:	f107 030c 	add.w	r3, r7, #12
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	9303      	str	r3, [sp, #12]
 800dd7e:	9002      	str	r0, [sp, #8]
 800dd80:	9101      	str	r1, [sp, #4]
 800dd82:	9200      	str	r2, [sp, #0]
 800dd84:	4b06      	ldr	r3, [pc, #24]	; (800dda0 <PrintIds+0xd8>)
 800dd86:	2200      	movs	r2, #0
 800dd88:	2100      	movs	r1, #0
 800dd8a:	2002      	movs	r0, #2
 800dd8c:	f00f fb50 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800dd90:	bf00      	nop
 800dd92:	3724      	adds	r7, #36	; 0x24
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd98:	0801e0e8 	.word	0x0801e0e8
 800dd9c:	0801e128 	.word	0x0801e128
 800dda0:	0801e168 	.word	0x0801e168

0800dda4 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800dda4:	b480      	push	{r7}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	4603      	mov	r3, r0
 800ddac:	6039      	str	r1, [r7, #0]
 800ddae:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	73fb      	strb	r3, [r7, #15]
 800ddb4:	e01a      	b.n	800ddec <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ddb6:	4b12      	ldr	r3, [pc, #72]	; (800de00 <GetKeyByID+0x5c>)
 800ddb8:	6819      	ldr	r1, [r3, #0]
 800ddba:	7bfa      	ldrb	r2, [r7, #15]
 800ddbc:	4613      	mov	r3, r2
 800ddbe:	011b      	lsls	r3, r3, #4
 800ddc0:	4413      	add	r3, r2
 800ddc2:	440b      	add	r3, r1
 800ddc4:	3318      	adds	r3, #24
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	79fa      	ldrb	r2, [r7, #7]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d10b      	bne.n	800dde6 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800ddce:	4b0c      	ldr	r3, [pc, #48]	; (800de00 <GetKeyByID+0x5c>)
 800ddd0:	6819      	ldr	r1, [r3, #0]
 800ddd2:	7bfa      	ldrb	r2, [r7, #15]
 800ddd4:	4613      	mov	r3, r2
 800ddd6:	011b      	lsls	r3, r3, #4
 800ddd8:	4413      	add	r3, r2
 800ddda:	3318      	adds	r3, #24
 800dddc:	18ca      	adds	r2, r1, r3
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800dde2:	2300      	movs	r3, #0
 800dde4:	e006      	b.n	800ddf4 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dde6:	7bfb      	ldrb	r3, [r7, #15]
 800dde8:	3301      	adds	r3, #1
 800ddea:	73fb      	strb	r3, [r7, #15]
 800ddec:	7bfb      	ldrb	r3, [r7, #15]
 800ddee:	2b0a      	cmp	r3, #10
 800ddf0:	d9e1      	bls.n	800ddb6 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ddf2:	2303      	movs	r3, #3
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3714      	adds	r7, #20
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bc80      	pop	{r7}
 800ddfc:	4770      	bx	lr
 800ddfe:	bf00      	nop
 800de00:	200007b8 	.word	0x200007b8

0800de04 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800de04:	b590      	push	{r4, r7, lr}
 800de06:	b0d1      	sub	sp, #324	; 0x144
 800de08:	af00      	add	r7, sp, #0
 800de0a:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800de0e:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800de12:	6020      	str	r0, [r4, #0]
 800de14:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800de18:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800de1c:	6001      	str	r1, [r0, #0]
 800de1e:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800de22:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800de26:	600a      	str	r2, [r1, #0]
 800de28:	461a      	mov	r2, r3
 800de2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800de2e:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800de32:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800de34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800de38:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d003      	beq.n	800de4a <ComputeCmac+0x46>
 800de42:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800de46:	2b00      	cmp	r3, #0
 800de48:	d101      	bne.n	800de4e <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800de4a:	2302      	movs	r3, #2
 800de4c:	e05d      	b.n	800df0a <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800de4e:	f107 0314 	add.w	r3, r7, #20
 800de52:	4618      	mov	r0, r3
 800de54:	f7fe ff02 	bl	800cc5c <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800de58:	f107 0210 	add.w	r2, r7, #16
 800de5c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800de60:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	4611      	mov	r1, r2
 800de68:	4618      	mov	r0, r3
 800de6a:	f7ff ff9b 	bl	800dda4 <GetKeyByID>
 800de6e:	4603      	mov	r3, r0
 800de70:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800de74:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d144      	bne.n	800df06 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800de7c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800de80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	1c5a      	adds	r2, r3, #1
 800de88:	f107 0314 	add.w	r3, r7, #20
 800de8c:	4611      	mov	r1, r2
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fe fefd 	bl	800cc8e <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800de94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800de98:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d009      	beq.n	800deb6 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800dea2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dea6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800deaa:	f107 0014 	add.w	r0, r7, #20
 800deae:	2210      	movs	r2, #16
 800deb0:	6819      	ldr	r1, [r3, #0]
 800deb2:	f7fe fefb 	bl	800ccac <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800deb6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800deba:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800debe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dec2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800dec6:	f107 0014 	add.w	r0, r7, #20
 800deca:	6812      	ldr	r2, [r2, #0]
 800decc:	6819      	ldr	r1, [r3, #0]
 800dece:	f7fe feed 	bl	800ccac <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ded2:	f107 0214 	add.w	r2, r7, #20
 800ded6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800deda:	4611      	mov	r1, r2
 800dedc:	4618      	mov	r0, r3
 800dede:	f7fe ffa7 	bl	800ce30 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800dee2:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800dee6:	461a      	mov	r2, r3
 800dee8:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800deec:	021b      	lsls	r3, r3, #8
 800deee:	431a      	orrs	r2, r3
 800def0:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800def4:	041b      	lsls	r3, r3, #16
 800def6:	431a      	orrs	r2, r3
 800def8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800defc:	061b      	lsls	r3, r3, #24
 800defe:	431a      	orrs	r2, r3
 800df00:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800df04:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800df06:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800df10:	46bd      	mov	sp, r7
 800df12:	bd90      	pop	{r4, r7, pc}

0800df14 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d101      	bne.n	800df26 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800df22:	2302      	movs	r3, #2
 800df24:	e00a      	b.n	800df3c <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800df26:	4a07      	ldr	r2, [pc, #28]	; (800df44 <SecureElementInit+0x30>)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800df2c:	4b05      	ldr	r3, [pc, #20]	; (800df44 <SecureElementInit+0x30>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	22d8      	movs	r2, #216	; 0xd8
 800df32:	4905      	ldr	r1, [pc, #20]	; (800df48 <SecureElementInit+0x34>)
 800df34:	4618      	mov	r0, r3
 800df36:	f00a fed6 	bl	8018ce6 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800df3a:	2300      	movs	r3, #0
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3708      	adds	r7, #8
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}
 800df44:	200007b8 	.word	0x200007b8
 800df48:	0801ea10 	.word	0x0801ea10

0800df4c <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b086      	sub	sp, #24
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800df5a:	f107 030c 	add.w	r3, r7, #12
 800df5e:	4618      	mov	r0, r3
 800df60:	f000 faae 	bl	800e4c0 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800df64:	f107 0308 	add.w	r3, r7, #8
 800df68:	4619      	mov	r1, r3
 800df6a:	2001      	movs	r0, #1
 800df6c:	f000 fb0a 	bl	800e584 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d024      	beq.n	800dfc0 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800df76:	2300      	movs	r3, #0
 800df78:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800df7a:	2300      	movs	r3, #0
 800df7c:	75bb      	strb	r3, [r7, #22]
 800df7e:	e00c      	b.n	800df9a <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800df80:	7dbb      	ldrb	r3, [r7, #22]
 800df82:	3318      	adds	r3, #24
 800df84:	443b      	add	r3, r7
 800df86:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d002      	beq.n	800df94 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800df8e:	2301      	movs	r3, #1
 800df90:	75fb      	strb	r3, [r7, #23]
                break;
 800df92:	e005      	b.n	800dfa0 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800df94:	7dbb      	ldrb	r3, [r7, #22]
 800df96:	3301      	adds	r3, #1
 800df98:	75bb      	strb	r3, [r7, #22]
 800df9a:	7dbb      	ldrb	r3, [r7, #22]
 800df9c:	2b07      	cmp	r3, #7
 800df9e:	d9ef      	bls.n	800df80 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800dfa0:	7dfb      	ldrb	r3, [r7, #23]
 800dfa2:	f083 0301 	eor.w	r3, r3, #1
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d009      	beq.n	800dfc0 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800dfac:	f107 020c 	add.w	r2, r7, #12
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	4610      	mov	r0, r2
 800dfb4:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800dfb6:	f107 030c 	add.w	r3, r7, #12
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f000 fa68 	bl	800e490 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d00c      	beq.n	800dfe0 <SecureElementInitMcuID+0x94>
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d109      	bne.n	800dfe0 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800dfcc:	f107 0208 	add.w	r2, r7, #8
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	4610      	mov	r0, r2
 800dfd4:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	4619      	mov	r1, r3
 800dfda:	2001      	movs	r0, #1
 800dfdc:	f000 fab8 	bl	800e550 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800dfe0:	2300      	movs	r3, #0
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3718      	adds	r7, #24
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
	...

0800dfec <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800dfec:	b480      	push	{r7}
 800dfee:	b085      	sub	sp, #20
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	4603      	mov	r3, r0
 800dff4:	6039      	str	r1, [r7, #0]
 800dff6:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dff8:	2300      	movs	r3, #0
 800dffa:	73fb      	strb	r3, [r7, #15]
 800dffc:	e01a      	b.n	800e034 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800dffe:	4b12      	ldr	r3, [pc, #72]	; (800e048 <SecureElementGetKeyByID+0x5c>)
 800e000:	6819      	ldr	r1, [r3, #0]
 800e002:	7bfa      	ldrb	r2, [r7, #15]
 800e004:	4613      	mov	r3, r2
 800e006:	011b      	lsls	r3, r3, #4
 800e008:	4413      	add	r3, r2
 800e00a:	440b      	add	r3, r1
 800e00c:	3318      	adds	r3, #24
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	79fa      	ldrb	r2, [r7, #7]
 800e012:	429a      	cmp	r2, r3
 800e014:	d10b      	bne.n	800e02e <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800e016:	4b0c      	ldr	r3, [pc, #48]	; (800e048 <SecureElementGetKeyByID+0x5c>)
 800e018:	6819      	ldr	r1, [r3, #0]
 800e01a:	7bfa      	ldrb	r2, [r7, #15]
 800e01c:	4613      	mov	r3, r2
 800e01e:	011b      	lsls	r3, r3, #4
 800e020:	4413      	add	r3, r2
 800e022:	3318      	adds	r3, #24
 800e024:	18ca      	adds	r2, r1, r3
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e02a:	2300      	movs	r3, #0
 800e02c:	e006      	b.n	800e03c <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e02e:	7bfb      	ldrb	r3, [r7, #15]
 800e030:	3301      	adds	r3, #1
 800e032:	73fb      	strb	r3, [r7, #15]
 800e034:	7bfb      	ldrb	r3, [r7, #15]
 800e036:	2b0a      	cmp	r3, #10
 800e038:	d9e1      	bls.n	800dffe <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e03a:	2303      	movs	r3, #3
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3714      	adds	r7, #20
 800e040:	46bd      	mov	sp, r7
 800e042:	bc80      	pop	{r7}
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	200007b8 	.word	0x200007b8

0800e04c <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800e050:	2000      	movs	r0, #0
 800e052:	f7ff fdab 	bl	800dbac <PrintKey>
    PrintKey( NWK_KEY );
 800e056:	2001      	movs	r0, #1
 800e058:	f7ff fda8 	bl	800dbac <PrintKey>
    PrintKey( APP_S_KEY );
 800e05c:	2009      	movs	r0, #9
 800e05e:	f7ff fda5 	bl	800dbac <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800e062:	2008      	movs	r0, #8
 800e064:	f7ff fda2 	bl	800dbac <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800e068:	2000      	movs	r0, #0
 800e06a:	f7ff fe2d 	bl	800dcc8 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800e06e:	2300      	movs	r3, #0
}
 800e070:	4618      	mov	r0, r3
 800e072:	bd80      	pop	{r7, pc}

0800e074 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	4603      	mov	r3, r0
 800e07c:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800e07e:	200b      	movs	r0, #11
 800e080:	f7ff fd94 	bl	800dbac <PrintKey>
    PrintKey( MC_KE_KEY );
 800e084:	200c      	movs	r0, #12
 800e086:	f7ff fd91 	bl	800dbac <PrintKey>
    PrintKey( APP_S_KEY );
 800e08a:	2009      	movs	r0, #9
 800e08c:	f7ff fd8e 	bl	800dbac <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800e090:	2008      	movs	r0, #8
 800e092:	f7ff fd8b 	bl	800dbac <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800e096:	200a      	movs	r0, #10
 800e098:	f7ff fd88 	bl	800dbac <PrintKey>
    PrintIds( mode );
 800e09c:	79fb      	ldrb	r3, [r7, #7]
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7ff fe12 	bl	800dcc8 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800e0a4:	2300      	movs	r3, #0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3708      	adds	r7, #8
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
	...

0800e0b0 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b088      	sub	sp, #32
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	6039      	str	r1, [r7, #0]
 800e0ba:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d101      	bne.n	800e0c6 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e0c2:	2302      	movs	r3, #2
 800e0c4:	e04c      	b.n	800e160 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	77fb      	strb	r3, [r7, #31]
 800e0ca:	e045      	b.n	800e158 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e0cc:	4b26      	ldr	r3, [pc, #152]	; (800e168 <SecureElementSetKey+0xb8>)
 800e0ce:	6819      	ldr	r1, [r3, #0]
 800e0d0:	7ffa      	ldrb	r2, [r7, #31]
 800e0d2:	4613      	mov	r3, r2
 800e0d4:	011b      	lsls	r3, r3, #4
 800e0d6:	4413      	add	r3, r2
 800e0d8:	440b      	add	r3, r1
 800e0da:	3318      	adds	r3, #24
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	79fa      	ldrb	r2, [r7, #7]
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d136      	bne.n	800e152 <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800e0e4:	79fb      	ldrb	r3, [r7, #7]
 800e0e6:	2b0d      	cmp	r3, #13
 800e0e8:	d123      	bne.n	800e132 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800e0ea:	2306      	movs	r3, #6
 800e0ec:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	60fb      	str	r3, [r7, #12]
 800e0f2:	f107 0310 	add.w	r3, r7, #16
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	601a      	str	r2, [r3, #0]
 800e0fa:	605a      	str	r2, [r3, #4]
 800e0fc:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800e0fe:	f107 030c 	add.w	r3, r7, #12
 800e102:	220c      	movs	r2, #12
 800e104:	2110      	movs	r1, #16
 800e106:	6838      	ldr	r0, [r7, #0]
 800e108:	f000 f876 	bl	800e1f8 <SecureElementAesEncrypt>
 800e10c:	4603      	mov	r3, r0
 800e10e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800e110:	4b15      	ldr	r3, [pc, #84]	; (800e168 <SecureElementSetKey+0xb8>)
 800e112:	6819      	ldr	r1, [r3, #0]
 800e114:	7ffa      	ldrb	r2, [r7, #31]
 800e116:	4613      	mov	r3, r2
 800e118:	011b      	lsls	r3, r3, #4
 800e11a:	4413      	add	r3, r2
 800e11c:	3318      	adds	r3, #24
 800e11e:	440b      	add	r3, r1
 800e120:	3301      	adds	r3, #1
 800e122:	f107 010c 	add.w	r1, r7, #12
 800e126:	2210      	movs	r2, #16
 800e128:	4618      	mov	r0, r3
 800e12a:	f00a fddc 	bl	8018ce6 <memcpy1>
                return retval;
 800e12e:	7fbb      	ldrb	r3, [r7, #30]
 800e130:	e016      	b.n	800e160 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800e132:	4b0d      	ldr	r3, [pc, #52]	; (800e168 <SecureElementSetKey+0xb8>)
 800e134:	6819      	ldr	r1, [r3, #0]
 800e136:	7ffa      	ldrb	r2, [r7, #31]
 800e138:	4613      	mov	r3, r2
 800e13a:	011b      	lsls	r3, r3, #4
 800e13c:	4413      	add	r3, r2
 800e13e:	3318      	adds	r3, #24
 800e140:	440b      	add	r3, r1
 800e142:	3301      	adds	r3, #1
 800e144:	2210      	movs	r2, #16
 800e146:	6839      	ldr	r1, [r7, #0]
 800e148:	4618      	mov	r0, r3
 800e14a:	f00a fdcc 	bl	8018ce6 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800e14e:	2300      	movs	r3, #0
 800e150:	e006      	b.n	800e160 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e152:	7ffb      	ldrb	r3, [r7, #31]
 800e154:	3301      	adds	r3, #1
 800e156:	77fb      	strb	r3, [r7, #31]
 800e158:	7ffb      	ldrb	r3, [r7, #31]
 800e15a:	2b0a      	cmp	r3, #10
 800e15c:	d9b6      	bls.n	800e0cc <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e15e:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800e160:	4618      	mov	r0, r3
 800e162:	3720      	adds	r7, #32
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	200007b8 	.word	0x200007b8

0800e16c <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b086      	sub	sp, #24
 800e170:	af02      	add	r7, sp, #8
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	607a      	str	r2, [r7, #4]
 800e178:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800e17a:	78fb      	ldrb	r3, [r7, #3]
 800e17c:	2b0b      	cmp	r3, #11
 800e17e:	d901      	bls.n	800e184 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e180:	2303      	movs	r3, #3
 800e182:	e009      	b.n	800e198 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800e184:	78fa      	ldrb	r2, [r7, #3]
 800e186:	69bb      	ldr	r3, [r7, #24]
 800e188:	9300      	str	r3, [sp, #0]
 800e18a:	4613      	mov	r3, r2
 800e18c:	687a      	ldr	r2, [r7, #4]
 800e18e:	68b9      	ldr	r1, [r7, #8]
 800e190:	68f8      	ldr	r0, [r7, #12]
 800e192:	f7ff fe37 	bl	800de04 <ComputeCmac>
 800e196:	4603      	mov	r3, r0
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3710      	adds	r7, #16
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b088      	sub	sp, #32
 800e1a4:	af02      	add	r7, sp, #8
 800e1a6:	60f8      	str	r0, [r7, #12]
 800e1a8:	60b9      	str	r1, [r7, #8]
 800e1aa:	607a      	str	r2, [r7, #4]
 800e1ac:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d101      	bne.n	800e1b8 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e1b4:	2302      	movs	r3, #2
 800e1b6:	e01b      	b.n	800e1f0 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800e1b8:	2306      	movs	r3, #6
 800e1ba:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800e1c0:	78fa      	ldrb	r2, [r7, #3]
 800e1c2:	f107 0310 	add.w	r3, r7, #16
 800e1c6:	9300      	str	r3, [sp, #0]
 800e1c8:	4613      	mov	r3, r2
 800e1ca:	68ba      	ldr	r2, [r7, #8]
 800e1cc:	68f9      	ldr	r1, [r7, #12]
 800e1ce:	2000      	movs	r0, #0
 800e1d0:	f7ff fe18 	bl	800de04 <ComputeCmac>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e1d8:	7dfb      	ldrb	r3, [r7, #23]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d001      	beq.n	800e1e2 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800e1de:	7dfb      	ldrb	r3, [r7, #23]
 800e1e0:	e006      	b.n	800e1f0 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d001      	beq.n	800e1ee <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800e1ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3718      	adds	r7, #24
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b0c2      	sub	sp, #264	; 0x108
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	60f8      	str	r0, [r7, #12]
 800e200:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e204:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800e208:	6001      	str	r1, [r0, #0]
 800e20a:	4611      	mov	r1, r2
 800e20c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800e210:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800e214:	6013      	str	r3, [r2, #0]
 800e216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e21a:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800e21e:	460a      	mov	r2, r1
 800e220:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d006      	beq.n	800e236 <SecureElementAesEncrypt+0x3e>
 800e228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e22c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d101      	bne.n	800e23a <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e236:	2302      	movs	r3, #2
 800e238:	e059      	b.n	800e2ee <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800e23a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e23e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f003 030f 	and.w	r3, r3, #15
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d001      	beq.n	800e250 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e24c:	2305      	movs	r3, #5
 800e24e:	e04e      	b.n	800e2ee <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800e250:	f107 0314 	add.w	r3, r7, #20
 800e254:	22f0      	movs	r2, #240	; 0xf0
 800e256:	2100      	movs	r1, #0
 800e258:	4618      	mov	r0, r3
 800e25a:	f00a fd7f 	bl	8018d5c <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800e25e:	f107 0210 	add.w	r2, r7, #16
 800e262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e266:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800e26a:	781b      	ldrb	r3, [r3, #0]
 800e26c:	4611      	mov	r1, r2
 800e26e:	4618      	mov	r0, r3
 800e270:	f7ff fd98 	bl	800dda4 <GetKeyByID>
 800e274:	4603      	mov	r3, r0
 800e276:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e27a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d133      	bne.n	800e2ea <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	3301      	adds	r3, #1
 800e286:	f107 0214 	add.w	r2, r7, #20
 800e28a:	2110      	movs	r1, #16
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7ff fb65 	bl	800d95c <lorawan_aes_set_key>

        uint8_t block = 0;
 800e292:	2300      	movs	r3, #0
 800e294:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800e298:	e020      	b.n	800e2dc <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800e29a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800e29e:	68fa      	ldr	r2, [r7, #12]
 800e2a0:	18d0      	adds	r0, r2, r3
 800e2a2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800e2a6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800e2aa:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800e2ae:	6812      	ldr	r2, [r2, #0]
 800e2b0:	4413      	add	r3, r2
 800e2b2:	f107 0214 	add.w	r2, r7, #20
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	f7ff fc2e 	bl	800db18 <lorawan_aes_encrypt>
            block = block + 16;
 800e2bc:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800e2c0:	3310      	adds	r3, #16
 800e2c2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800e2c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2ca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e2ce:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800e2d2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800e2d6:	6812      	ldr	r2, [r2, #0]
 800e2d8:	3a10      	subs	r2, #16
 800e2da:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800e2dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d1d7      	bne.n	800e29a <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800e2ea:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b088      	sub	sp, #32
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	460b      	mov	r3, r1
 800e302:	70fb      	strb	r3, [r7, #3]
 800e304:	4613      	mov	r3, r2
 800e306:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d101      	bne.n	800e312 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e30e:	2302      	movs	r3, #2
 800e310:	e02e      	b.n	800e370 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800e312:	2306      	movs	r3, #6
 800e314:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800e316:	78bb      	ldrb	r3, [r7, #2]
 800e318:	2b0c      	cmp	r3, #12
 800e31a:	d104      	bne.n	800e326 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800e31c:	78fb      	ldrb	r3, [r7, #3]
 800e31e:	2b0b      	cmp	r3, #11
 800e320:	d001      	beq.n	800e326 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e322:	2303      	movs	r3, #3
 800e324:	e024      	b.n	800e370 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800e326:	2300      	movs	r3, #0
 800e328:	60fb      	str	r3, [r7, #12]
 800e32a:	f107 0310 	add.w	r3, r7, #16
 800e32e:	2200      	movs	r2, #0
 800e330:	601a      	str	r2, [r3, #0]
 800e332:	605a      	str	r2, [r3, #4]
 800e334:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800e336:	f107 030c 	add.w	r3, r7, #12
 800e33a:	78fa      	ldrb	r2, [r7, #3]
 800e33c:	2110      	movs	r1, #16
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f7ff ff5a 	bl	800e1f8 <SecureElementAesEncrypt>
 800e344:	4603      	mov	r3, r0
 800e346:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e348:	7ffb      	ldrb	r3, [r7, #31]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d001      	beq.n	800e352 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800e34e:	7ffb      	ldrb	r3, [r7, #31]
 800e350:	e00e      	b.n	800e370 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800e352:	f107 020c 	add.w	r2, r7, #12
 800e356:	78bb      	ldrb	r3, [r7, #2]
 800e358:	4611      	mov	r1, r2
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7ff fea8 	bl	800e0b0 <SecureElementSetKey>
 800e360:	4603      	mov	r3, r0
 800e362:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e364:	7ffb      	ldrb	r3, [r7, #31]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d001      	beq.n	800e36e <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800e36a:	7ffb      	ldrb	r3, [r7, #31]
 800e36c:	e000      	b.n	800e370 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800e36e:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800e370:	4618      	mov	r0, r3
 800e372:	3720      	adds	r7, #32
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}

0800e378 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b086      	sub	sp, #24
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	60b9      	str	r1, [r7, #8]
 800e380:	607b      	str	r3, [r7, #4]
 800e382:	4603      	mov	r3, r0
 800e384:	73fb      	strb	r3, [r7, #15]
 800e386:	4613      	mov	r3, r2
 800e388:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d005      	beq.n	800e39c <SecureElementProcessJoinAccept+0x24>
 800e390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e392:	2b00      	cmp	r3, #0
 800e394:	d002      	beq.n	800e39c <SecureElementProcessJoinAccept+0x24>
 800e396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d101      	bne.n	800e3a0 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e39c:	2302      	movs	r3, #2
 800e39e:	e05c      	b.n	800e45a <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800e3a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e3a4:	2b21      	cmp	r3, #33	; 0x21
 800e3a6:	d901      	bls.n	800e3ac <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e3a8:	2305      	movs	r3, #5
 800e3aa:	e056      	b.n	800e45a <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800e3b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e3b4:	b29b      	uxth	r3, r3
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	6879      	ldr	r1, [r7, #4]
 800e3ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3bc:	f00a fc93 	bl	8018ce6 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	1c58      	adds	r0, r3, #1
 800e3c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e3c8:	3b01      	subs	r3, #1
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	7dfa      	ldrb	r2, [r7, #23]
 800e3d2:	f7ff ff11 	bl	800e1f8 <SecureElementAesEncrypt>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d001      	beq.n	800e3e0 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800e3dc:	2307      	movs	r3, #7
 800e3de:	e03c      	b.n	800e45a <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e2:	330b      	adds	r3, #11
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	09db      	lsrs	r3, r3, #7
 800e3e8:	b2da      	uxtb	r2, r3
 800e3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ec:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800e3ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e3f2:	3b04      	subs	r3, #4
 800e3f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3f6:	4413      	add	r3, r2
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e400:	3b03      	subs	r3, #3
 800e402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e404:	4413      	add	r3, r2
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	021b      	lsls	r3, r3, #8
 800e40a:	ea41 0203 	orr.w	r2, r1, r3
 800e40e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e412:	3b02      	subs	r3, #2
 800e414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e416:	440b      	add	r3, r1
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	041b      	lsls	r3, r3, #16
 800e41c:	431a      	orrs	r2, r3
 800e41e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e422:	3b01      	subs	r3, #1
 800e424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e426:	440b      	add	r3, r1
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	061b      	lsls	r3, r3, #24
 800e42c:	4313      	orrs	r3, r2
 800e42e:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800e430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d10d      	bne.n	800e454 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800e438:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e43c:	3b04      	subs	r3, #4
 800e43e:	4619      	mov	r1, r3
 800e440:	2301      	movs	r3, #1
 800e442:	693a      	ldr	r2, [r7, #16]
 800e444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e446:	f7ff feab 	bl	800e1a0 <SecureElementVerifyAesCmac>
 800e44a:	4603      	mov	r3, r0
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d003      	beq.n	800e458 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800e450:	2301      	movs	r3, #1
 800e452:	e002      	b.n	800e45a <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800e454:	2304      	movs	r3, #4
 800e456:	e000      	b.n	800e45a <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800e458:	2300      	movs	r3, #0
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3718      	adds	r7, #24
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}
	...

0800e464 <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b082      	sub	sp, #8
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d101      	bne.n	800e476 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e472:	2302      	movs	r3, #2
 800e474:	e006      	b.n	800e484 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800e476:	4b05      	ldr	r3, [pc, #20]	; (800e48c <SecureElementRandomNumber+0x28>)
 800e478:	695b      	ldr	r3, [r3, #20]
 800e47a:	4798      	blx	r3
 800e47c:	4602      	mov	r2, r0
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800e482:	2300      	movs	r3, #0
}
 800e484:	4618      	mov	r0, r3
 800e486:	3708      	adds	r7, #8
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	0801e8c0 	.word	0x0801e8c0

0800e490 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d101      	bne.n	800e4a2 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e49e:	2302      	movs	r3, #2
 800e4a0:	e007      	b.n	800e4b2 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800e4a2:	4b06      	ldr	r3, [pc, #24]	; (800e4bc <SecureElementSetDevEui+0x2c>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2208      	movs	r2, #8
 800e4a8:	6879      	ldr	r1, [r7, #4]
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f00a fc1b 	bl	8018ce6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e4b0:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3708      	adds	r7, #8
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	200007b8 	.word	0x200007b8

0800e4c0 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d101      	bne.n	800e4d2 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e4ce:	2302      	movs	r3, #2
 800e4d0:	e007      	b.n	800e4e2 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800e4d2:	4b06      	ldr	r3, [pc, #24]	; (800e4ec <SecureElementGetDevEui+0x2c>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2208      	movs	r2, #8
 800e4d8:	4619      	mov	r1, r3
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f00a fc03 	bl	8018ce6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e4e0:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3708      	adds	r7, #8
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
 800e4ea:	bf00      	nop
 800e4ec:	200007b8 	.word	0x200007b8

0800e4f0 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d101      	bne.n	800e502 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e4fe:	2302      	movs	r3, #2
 800e500:	e008      	b.n	800e514 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800e502:	4b06      	ldr	r3, [pc, #24]	; (800e51c <SecureElementSetJoinEui+0x2c>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	3308      	adds	r3, #8
 800e508:	2208      	movs	r2, #8
 800e50a:	6879      	ldr	r1, [r7, #4]
 800e50c:	4618      	mov	r0, r3
 800e50e:	f00a fbea 	bl	8018ce6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e512:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e514:	4618      	mov	r0, r3
 800e516:	3708      	adds	r7, #8
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	200007b8 	.word	0x200007b8

0800e520 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d101      	bne.n	800e532 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e52e:	2302      	movs	r3, #2
 800e530:	e008      	b.n	800e544 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800e532:	4b06      	ldr	r3, [pc, #24]	; (800e54c <SecureElementGetJoinEui+0x2c>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	3308      	adds	r3, #8
 800e538:	2208      	movs	r2, #8
 800e53a:	4619      	mov	r1, r3
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f00a fbd2 	bl	8018ce6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e542:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e544:	4618      	mov	r0, r3
 800e546:	3708      	adds	r7, #8
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}
 800e54c:	200007b8 	.word	0x200007b8

0800e550 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	6039      	str	r1, [r7, #0]
 800e55a:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800e55c:	79fb      	ldrb	r3, [r7, #7]
 800e55e:	2b02      	cmp	r3, #2
 800e560:	d104      	bne.n	800e56c <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800e562:	4b07      	ldr	r3, [pc, #28]	; (800e580 <SecureElementSetDevAddr+0x30>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	683a      	ldr	r2, [r7, #0]
 800e568:	611a      	str	r2, [r3, #16]
 800e56a:	e003      	b.n	800e574 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800e56c:	4b04      	ldr	r3, [pc, #16]	; (800e580 <SecureElementSetDevAddr+0x30>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	683a      	ldr	r2, [r7, #0]
 800e572:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800e574:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800e576:	4618      	mov	r0, r3
 800e578:	370c      	adds	r7, #12
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bc80      	pop	{r7}
 800e57e:	4770      	bx	lr
 800e580:	200007b8 	.word	0x200007b8

0800e584 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800e584:	b480      	push	{r7}
 800e586:	b083      	sub	sp, #12
 800e588:	af00      	add	r7, sp, #0
 800e58a:	4603      	mov	r3, r0
 800e58c:	6039      	str	r1, [r7, #0]
 800e58e:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d101      	bne.n	800e59a <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e596:	2302      	movs	r3, #2
 800e598:	e00e      	b.n	800e5b8 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800e59a:	79fb      	ldrb	r3, [r7, #7]
 800e59c:	2b02      	cmp	r3, #2
 800e59e:	d105      	bne.n	800e5ac <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800e5a0:	4b08      	ldr	r3, [pc, #32]	; (800e5c4 <SecureElementGetDevAddr+0x40>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	691a      	ldr	r2, [r3, #16]
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	601a      	str	r2, [r3, #0]
 800e5aa:	e004      	b.n	800e5b6 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800e5ac:	4b05      	ldr	r3, [pc, #20]	; (800e5c4 <SecureElementGetDevAddr+0x40>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	695a      	ldr	r2, [r3, #20]
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800e5b6:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	370c      	adds	r7, #12
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bc80      	pop	{r7}
 800e5c0:	4770      	bx	lr
 800e5c2:	bf00      	nop
 800e5c4:	200007b8 	.word	0x200007b8

0800e5c8 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800e5d2:	4a22      	ldr	r2, [pc, #136]	; (800e65c <LmHandlerInit+0x94>)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800e5d8:	4b21      	ldr	r3, [pc, #132]	; (800e660 <LmHandlerInit+0x98>)
 800e5da:	4a22      	ldr	r2, [pc, #136]	; (800e664 <LmHandlerInit+0x9c>)
 800e5dc:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800e5de:	4b20      	ldr	r3, [pc, #128]	; (800e660 <LmHandlerInit+0x98>)
 800e5e0:	4a21      	ldr	r2, [pc, #132]	; (800e668 <LmHandlerInit+0xa0>)
 800e5e2:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800e5e4:	4b1e      	ldr	r3, [pc, #120]	; (800e660 <LmHandlerInit+0x98>)
 800e5e6:	4a21      	ldr	r2, [pc, #132]	; (800e66c <LmHandlerInit+0xa4>)
 800e5e8:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800e5ea:	4b1d      	ldr	r3, [pc, #116]	; (800e660 <LmHandlerInit+0x98>)
 800e5ec:	4a20      	ldr	r2, [pc, #128]	; (800e670 <LmHandlerInit+0xa8>)
 800e5ee:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800e5f0:	4b1a      	ldr	r3, [pc, #104]	; (800e65c <LmHandlerInit+0x94>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	4a1f      	ldr	r2, [pc, #124]	; (800e674 <LmHandlerInit+0xac>)
 800e5f8:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800e5fa:	4b18      	ldr	r3, [pc, #96]	; (800e65c <LmHandlerInit+0x94>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	4a1c      	ldr	r2, [pc, #112]	; (800e674 <LmHandlerInit+0xac>)
 800e602:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800e604:	4b15      	ldr	r3, [pc, #84]	; (800e65c <LmHandlerInit+0x94>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	4a1a      	ldr	r2, [pc, #104]	; (800e674 <LmHandlerInit+0xac>)
 800e60c:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800e60e:	4b13      	ldr	r3, [pc, #76]	; (800e65c <LmHandlerInit+0x94>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	68db      	ldr	r3, [r3, #12]
 800e614:	4a17      	ldr	r2, [pc, #92]	; (800e674 <LmHandlerInit+0xac>)
 800e616:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800e618:	4b16      	ldr	r3, [pc, #88]	; (800e674 <LmHandlerInit+0xac>)
 800e61a:	4a17      	ldr	r2, [pc, #92]	; (800e678 <LmHandlerInit+0xb0>)
 800e61c:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800e61e:	4b0f      	ldr	r3, [pc, #60]	; (800e65c <LmHandlerInit+0x94>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	699b      	ldr	r3, [r3, #24]
 800e624:	4a13      	ldr	r2, [pc, #76]	; (800e674 <LmHandlerInit+0xac>)
 800e626:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800e628:	4914      	ldr	r1, [pc, #80]	; (800e67c <LmHandlerInit+0xb4>)
 800e62a:	2000      	movs	r0, #0
 800e62c:	f000 fd44 	bl	800f0b8 <LmHandlerPackageRegister>
 800e630:	4603      	mov	r3, r0
 800e632:	2b00      	cmp	r3, #0
 800e634:	d002      	beq.n	800e63c <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800e636:	f04f 33ff 	mov.w	r3, #4294967295
 800e63a:	e00a      	b.n	800e652 <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800e63c:	463b      	mov	r3, r7
 800e63e:	4618      	mov	r0, r3
 800e640:	f001 fa30 	bl	800faa4 <LmhpPackagesRegistrationInit>
 800e644:	4603      	mov	r3, r0
 800e646:	2b00      	cmp	r3, #0
 800e648:	d002      	beq.n	800e650 <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800e64a:	f04f 33ff 	mov.w	r3, #4294967295
 800e64e:	e000      	b.n	800e652 <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800e650:	2300      	movs	r3, #0
}
 800e652:	4618      	mov	r0, r3
 800e654:	3708      	adds	r7, #8
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	20000800 	.word	0x20000800
 800e660:	20000804 	.word	0x20000804
 800e664:	0800ed7d 	.word	0x0800ed7d
 800e668:	0800edf1 	.word	0x0800edf1
 800e66c:	0800eed1 	.word	0x0800eed1
 800e670:	0800f025 	.word	0x0800f025
 800e674:	20000814 	.word	0x20000814
 800e678:	0800f479 	.word	0x0800f479
 800e67c:	2000009c 	.word	0x2000009c

0800e680 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b090      	sub	sp, #64	; 0x40
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800e688:	2218      	movs	r2, #24
 800e68a:	6879      	ldr	r1, [r7, #4]
 800e68c:	4852      	ldr	r0, [pc, #328]	; (800e7d8 <LmHandlerConfigure+0x158>)
 800e68e:	f00a fb2a 	bl	8018ce6 <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800e692:	f7fe faa1 	bl	800cbd8 <LoraInfo_GetPtr>
 800e696:	63f8      	str	r0, [r7, #60]	; 0x3c

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800e698:	4b4f      	ldr	r3, [pc, #316]	; (800e7d8 <LmHandlerConfigure+0x158>)
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	461a      	mov	r2, r3
 800e69e:	2301      	movs	r3, #1
 800e6a0:	4093      	lsls	r3, r2
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	4013      	ands	r3, r2
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d106      	bne.n	800e6bc <LmHandlerConfigure+0x3c>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800e6ae:	4b4b      	ldr	r3, [pc, #300]	; (800e7dc <LmHandlerConfigure+0x15c>)
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	f00e febb 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800e6ba:	e7fe      	b.n	800e6ba <LmHandlerConfigure+0x3a>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800e6bc:	4b46      	ldr	r3, [pc, #280]	; (800e7d8 <LmHandlerConfigure+0x158>)
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	4947      	ldr	r1, [pc, #284]	; (800e7e0 <LmHandlerConfigure+0x160>)
 800e6c4:	4847      	ldr	r0, [pc, #284]	; (800e7e4 <LmHandlerConfigure+0x164>)
 800e6c6:	f004 fbc3 	bl	8012e50 <LoRaMacInitialization>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d002      	beq.n	800e6d6 <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800e6d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e6d4:	e07c      	b.n	800e7d0 <LmHandlerConfigure+0x150>
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800e6d6:	2305      	movs	r3, #5
 800e6d8:	753b      	strb	r3, [r7, #20]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	61bb      	str	r3, [r7, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800e6de:	f107 0314 	add.w	r3, r7, #20
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f005 f902 	bl	80138ec <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800e6e8:	4b3d      	ldr	r3, [pc, #244]	; (800e7e0 <LmHandlerConfigure+0x160>)
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	4a3c      	ldr	r2, [pc, #240]	; (800e7e0 <LmHandlerConfigure+0x160>)
 800e6ee:	68d2      	ldr	r2, [r2, #12]
 800e6f0:	4611      	mov	r1, r2
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7ff fc2a 	bl	800df4c <SecureElementInitMcuID>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d002      	beq.n	800e704 <LmHandlerConfigure+0x84>
    {
        return LORAMAC_HANDLER_ERROR;
 800e6fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e702:	e065      	b.n	800e7d0 <LmHandlerConfigure+0x150>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800e704:	2306      	movs	r3, #6
 800e706:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e708:	f107 0314 	add.w	r3, r7, #20
 800e70c:	4618      	mov	r0, r3
 800e70e:	f004 ff37 	bl	8013580 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e712:	69bb      	ldr	r3, [r7, #24]
 800e714:	4a34      	ldr	r2, [pc, #208]	; (800e7e8 <LmHandlerConfigure+0x168>)
 800e716:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e718:	f107 0314 	add.w	r3, r7, #20
 800e71c:	4618      	mov	r0, r3
 800e71e:	f005 f8e5 	bl	80138ec <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800e722:	2302      	movs	r3, #2
 800e724:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800e726:	4b30      	ldr	r3, [pc, #192]	; (800e7e8 <LmHandlerConfigure+0x168>)
 800e728:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e72a:	f107 0314 	add.w	r3, r7, #20
 800e72e:	4618      	mov	r0, r3
 800e730:	f004 ff26 	bl	8013580 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800e734:	2303      	movs	r3, #3
 800e736:	753b      	strb	r3, [r7, #20]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800e738:	4b2c      	ldr	r3, [pc, #176]	; (800e7ec <LmHandlerConfigure+0x16c>)
 800e73a:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e73c:	f107 0314 	add.w	r3, r7, #20
 800e740:	4618      	mov	r0, r3
 800e742:	f004 ff1d 	bl	8013580 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800e746:	f7ff fc81 	bl	800e04c <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800e74a:	230f      	movs	r3, #15
 800e74c:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800e74e:	2301      	movs	r3, #1
 800e750:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e752:	f107 0314 	add.w	r3, r7, #20
 800e756:	4618      	mov	r0, r3
 800e758:	f005 f8c8 	bl	80138ec <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800e75c:	2310      	movs	r3, #16
 800e75e:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800e760:	2300      	movs	r3, #0
 800e762:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e764:	f107 0314 	add.w	r3, r7, #20
 800e768:	4618      	mov	r0, r3
 800e76a:	f005 f8bf 	bl	80138ec <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800e76e:	2304      	movs	r3, #4
 800e770:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800e772:	4b19      	ldr	r3, [pc, #100]	; (800e7d8 <LmHandlerConfigure+0x158>)
 800e774:	789b      	ldrb	r3, [r3, #2]
 800e776:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e778:	f107 0314 	add.w	r3, r7, #20
 800e77c:	4618      	mov	r0, r3
 800e77e:	f005 f8b5 	bl	80138ec <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800e782:	2339      	movs	r3, #57	; 0x39
 800e784:	753b      	strb	r3, [r7, #20]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800e786:	4b14      	ldr	r3, [pc, #80]	; (800e7d8 <LmHandlerConfigure+0x158>)
 800e788:	695b      	ldr	r3, [r3, #20]
 800e78a:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e78c:	f107 0314 	add.w	r3, r7, #20
 800e790:	4618      	mov	r0, r3
 800e792:	f005 f8ab 	bl	80138ec <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800e796:	230f      	movs	r3, #15
 800e798:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800e79a:	4b0f      	ldr	r3, [pc, #60]	; (800e7d8 <LmHandlerConfigure+0x158>)
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	f107 020c 	add.w	r2, r7, #12
 800e7a2:	4611      	mov	r1, r2
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f007 ff84 	bl	80166b2 <RegionGetPhyParam>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	bf14      	ite	ne
 800e7b4:	2301      	movne	r3, #1
 800e7b6:	2300      	moveq	r3, #0
 800e7b8:	b2da      	uxtb	r2, r3
 800e7ba:	4b07      	ldr	r3, [pc, #28]	; (800e7d8 <LmHandlerConfigure+0x158>)
 800e7bc:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800e7be:	2014      	movs	r0, #20
 800e7c0:	f000 fac4 	bl	800ed4c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800e7c4:	4b04      	ldr	r3, [pc, #16]	; (800e7d8 <LmHandlerConfigure+0x158>)
 800e7c6:	79db      	ldrb	r3, [r3, #7]
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f005 fe6b 	bl	80144a4 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800e7ce:	2300      	movs	r3, #0
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3740      	adds	r7, #64	; 0x40
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	200007e8 	.word	0x200007e8
 800e7dc:	0801e194 	.word	0x0801e194
 800e7e0:	20000814 	.word	0x20000814
 800e7e4:	20000804 	.word	0x20000804
 800e7e8:	200007bc 	.word	0x200007bc
 800e7ec:	200007c4 	.word	0x200007c4

0800e7f0 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800e7f4:	f002 fb36 	bl	8010e64 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800e7f8:	f000 fd9c 	bl	800f334 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800e7fc:	f000 fd6c 	bl	800f2d8 <LmHandlerPackageIsTxPending>
 800e800:	4603      	mov	r3, r0
 800e802:	2b00      	cmp	r3, #0
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800e804:	bd80      	pop	{r7, pc}
	...

0800e808 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800e808:	b480      	push	{r7}
 800e80a:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800e80c:	4b02      	ldr	r3, [pc, #8]	; (800e818 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800e80e:	681b      	ldr	r3, [r3, #0]
}
 800e810:	4618      	mov	r0, r3
 800e812:	46bd      	mov	sp, r7
 800e814:	bc80      	pop	{r7}
 800e816:	4770      	bx	lr
 800e818:	2000082c 	.word	0x2000082c

0800e81c <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b092      	sub	sp, #72	; 0x48
 800e820:	af00      	add	r7, sp, #0
 800e822:	4603      	mov	r3, r0
 800e824:	460a      	mov	r2, r1
 800e826:	71fb      	strb	r3, [r7, #7]
 800e828:	4613      	mov	r3, r2
 800e82a:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800e82c:	2301      	movs	r3, #1
 800e82e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800e832:	4b47      	ldr	r3, [pc, #284]	; (800e950 <LmHandlerJoin+0x134>)
 800e834:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800e83e:	4b44      	ldr	r3, [pc, #272]	; (800e950 <LmHandlerJoin+0x134>)
 800e840:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800e844:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800e848:	79fb      	ldrb	r3, [r7, #7]
 800e84a:	2b02      	cmp	r3, #2
 800e84c:	d110      	bne.n	800e870 <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e84e:	2302      	movs	r3, #2
 800e850:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800e854:	4b3f      	ldr	r3, [pc, #252]	; (800e954 <LmHandlerJoin+0x138>)
 800e856:	2202      	movs	r2, #2
 800e858:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800e85a:	4a3e      	ldr	r2, [pc, #248]	; (800e954 <LmHandlerJoin+0x138>)
 800e85c:	79bb      	ldrb	r3, [r7, #6]
 800e85e:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800e860:	f004 fda8 	bl	80133b4 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800e864:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e868:	4618      	mov	r0, r3
 800e86a:	f005 fbd3 	bl	8014014 <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800e86e:	e06b      	b.n	800e948 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e870:	2301      	movs	r3, #1
 800e872:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800e876:	4b37      	ldr	r3, [pc, #220]	; (800e954 <LmHandlerJoin+0x138>)
 800e878:	2201      	movs	r2, #1
 800e87a:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800e87c:	4b34      	ldr	r3, [pc, #208]	; (800e950 <LmHandlerJoin+0x134>)
 800e87e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800e882:	4b34      	ldr	r3, [pc, #208]	; (800e954 <LmHandlerJoin+0x138>)
 800e884:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800e886:	4b32      	ldr	r3, [pc, #200]	; (800e950 <LmHandlerJoin+0x134>)
 800e888:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800e88c:	4b31      	ldr	r3, [pc, #196]	; (800e954 <LmHandlerJoin+0x138>)
 800e88e:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e890:	4b30      	ldr	r3, [pc, #192]	; (800e954 <LmHandlerJoin+0x138>)
 800e892:	2200      	movs	r2, #0
 800e894:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800e896:	4a2f      	ldr	r2, [pc, #188]	; (800e954 <LmHandlerJoin+0x138>)
 800e898:	79bb      	ldrb	r3, [r7, #6]
 800e89a:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800e89c:	4b2e      	ldr	r3, [pc, #184]	; (800e958 <LmHandlerJoin+0x13c>)
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	f083 0301 	eor.w	r3, r3, #1
 800e8a4:	b2db      	uxtb	r3, r3
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d034      	beq.n	800e914 <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800e8aa:	231e      	movs	r3, #30
 800e8ac:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800e8ae:	4b28      	ldr	r3, [pc, #160]	; (800e950 <LmHandlerJoin+0x134>)
 800e8b0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e8b4:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e8b6:	f107 030c 	add.w	r3, r7, #12
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f005 f816 	bl	80138ec <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800e8c0:	231f      	movs	r3, #31
 800e8c2:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800e8c4:	4b22      	ldr	r3, [pc, #136]	; (800e950 <LmHandlerJoin+0x134>)
 800e8c6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e8ca:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e8cc:	f107 030c 	add.w	r3, r7, #12
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f005 f80b 	bl	80138ec <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800e8d6:	2321      	movs	r3, #33	; 0x21
 800e8d8:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800e8da:	4b1d      	ldr	r3, [pc, #116]	; (800e950 <LmHandlerJoin+0x134>)
 800e8dc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800e8e0:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e8e2:	f107 030c 	add.w	r3, r7, #12
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f005 f800 	bl	80138ec <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800e8ec:	2320      	movs	r3, #32
 800e8ee:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800e8f0:	4b17      	ldr	r3, [pc, #92]	; (800e950 <LmHandlerJoin+0x134>)
 800e8f2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800e8f6:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e8f8:	f107 030c 	add.w	r3, r7, #12
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f004 fff5 	bl	80138ec <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800e902:	2328      	movs	r3, #40	; 0x28
 800e904:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800e906:	4b15      	ldr	r3, [pc, #84]	; (800e95c <LmHandlerJoin+0x140>)
 800e908:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e90a:	f107 030c 	add.w	r3, r7, #12
 800e90e:	4618      	mov	r0, r3
 800e910:	f004 ffec 	bl	80138ec <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800e914:	f004 fd4e 	bl	80133b4 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e918:	2301      	movs	r3, #1
 800e91a:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e91c:	2301      	movs	r3, #1
 800e91e:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800e920:	f107 030c 	add.w	r3, r7, #12
 800e924:	4618      	mov	r0, r3
 800e926:	f004 ffe1 	bl	80138ec <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800e92a:	4b0d      	ldr	r3, [pc, #52]	; (800e960 <LmHandlerJoin+0x144>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e930:	2b00      	cmp	r3, #0
 800e932:	d004      	beq.n	800e93e <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800e934:	4b0a      	ldr	r3, [pc, #40]	; (800e960 <LmHandlerJoin+0x144>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e93a:	4806      	ldr	r0, [pc, #24]	; (800e954 <LmHandlerJoin+0x138>)
 800e93c:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800e93e:	4b04      	ldr	r3, [pc, #16]	; (800e950 <LmHandlerJoin+0x134>)
 800e940:	785b      	ldrb	r3, [r3, #1]
 800e942:	4618      	mov	r0, r3
 800e944:	f000 f932 	bl	800ebac <LmHandlerRequestClass>
}
 800e948:	bf00      	nop
 800e94a:	3748      	adds	r7, #72	; 0x48
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}
 800e950:	200007e8 	.word	0x200007e8
 800e954:	200000a8 	.word	0x200000a8
 800e958:	20000922 	.word	0x20000922
 800e95c:	01000300 	.word	0x01000300
 800e960:	20000800 	.word	0x20000800

0800e964 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b08c      	sub	sp, #48	; 0x30
 800e968:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e96a:	2301      	movs	r3, #1
 800e96c:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800e96e:	1d3b      	adds	r3, r7, #4
 800e970:	4618      	mov	r0, r3
 800e972:	f004 fe05 	bl	8013580 <LoRaMacMibGetRequestConfirm>
 800e976:	4603      	mov	r3, r0
 800e978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800e97c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e980:	2b00      	cmp	r3, #0
 800e982:	d106      	bne.n	800e992 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e984:	7a3b      	ldrb	r3, [r7, #8]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d101      	bne.n	800e98e <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800e98a:	2300      	movs	r3, #0
 800e98c:	e002      	b.n	800e994 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800e98e:	2301      	movs	r3, #1
 800e990:	e000      	b.n	800e994 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800e992:	2300      	movs	r3, #0
    }
}
 800e994:	4618      	mov	r0, r3
 800e996:	3730      	adds	r7, #48	; 0x30
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b08a      	sub	sp, #40	; 0x28
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	70fb      	strb	r3, [r7, #3]
 800e9a8:	4613      	mov	r3, r2
 800e9aa:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e9ac:	23ff      	movs	r3, #255	; 0xff
 800e9ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800e9b2:	f001 ffe3 	bl	801097c <LoRaMacIsBusy>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d002      	beq.n	800e9c2 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e9bc:	f06f 0301 	mvn.w	r3, #1
 800e9c0:	e0be      	b.n	800eb40 <LmHandlerSend+0x1a4>
    }

    if( LoRaMacIsStopped() == true )
 800e9c2:	f001 fff7 	bl	80109b4 <LoRaMacIsStopped>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d002      	beq.n	800e9d2 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e9cc:	f06f 0302 	mvn.w	r3, #2
 800e9d0:	e0b6      	b.n	800eb40 <LmHandlerSend+0x1a4>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800e9d2:	f7ff ffc7 	bl	800e964 <LmHandlerJoinStatus>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	2b01      	cmp	r3, #1
 800e9da:	d00a      	beq.n	800e9f2 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800e9dc:	4b5a      	ldr	r3, [pc, #360]	; (800eb48 <LmHandlerSend+0x1ac>)
 800e9de:	79db      	ldrb	r3, [r3, #7]
 800e9e0:	4a59      	ldr	r2, [pc, #356]	; (800eb48 <LmHandlerSend+0x1ac>)
 800e9e2:	7a12      	ldrb	r2, [r2, #8]
 800e9e4:	4611      	mov	r1, r2
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7ff ff18 	bl	800e81c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e9ec:	f06f 0302 	mvn.w	r3, #2
 800e9f0:	e0a6      	b.n	800eb40 <LmHandlerSend+0x1a4>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800e9f2:	4b56      	ldr	r3, [pc, #344]	; (800eb4c <LmHandlerSend+0x1b0>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	4798      	blx	r3
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d00d      	beq.n	800ea1c <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	781a      	ldrb	r2, [r3, #0]
 800ea04:	4b51      	ldr	r3, [pc, #324]	; (800eb4c <LmHandlerSend+0x1b0>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d006      	beq.n	800ea1c <LmHandlerSend+0x80>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	781b      	ldrb	r3, [r3, #0]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d002      	beq.n	800ea1c <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800ea16:	f06f 0303 	mvn.w	r3, #3
 800ea1a:	e091      	b.n	800eb40 <LmHandlerSend+0x1a4>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800ea1c:	4a4c      	ldr	r2, [pc, #304]	; (800eb50 <LmHandlerSend+0x1b4>)
 800ea1e:	78fb      	ldrb	r3, [r7, #3]
 800ea20:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800ea22:	78fb      	ldrb	r3, [r7, #3]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	bf14      	ite	ne
 800ea28:	2301      	movne	r3, #1
 800ea2a:	2300      	moveq	r3, #0
 800ea2c:	b2db      	uxtb	r3, r3
 800ea2e:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800ea30:	4b48      	ldr	r3, [pc, #288]	; (800eb54 <LmHandlerSend+0x1b8>)
 800ea32:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ea36:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	785b      	ldrb	r3, [r3, #1]
 800ea3c:	f107 020c 	add.w	r2, r7, #12
 800ea40:	4611      	mov	r1, r2
 800ea42:	4618      	mov	r0, r3
 800ea44:	f004 fd16 	bl	8013474 <LoRaMacQueryTxPossible>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d009      	beq.n	800ea62 <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800ea52:	2300      	movs	r3, #0
 800ea54:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800ea56:	2300      	movs	r3, #0
 800ea58:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800ea5a:	23f9      	movs	r3, #249	; 0xf9
 800ea5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea60:	e009      	b.n	800ea76 <LmHandlerSend+0xda>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	785b      	ldrb	r3, [r3, #1]
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800ea76:	4b36      	ldr	r3, [pc, #216]	; (800eb50 <LmHandlerSend+0x1b4>)
 800ea78:	687a      	ldr	r2, [r7, #4]
 800ea7a:	3310      	adds	r3, #16
 800ea7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ea80:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800ea84:	4b33      	ldr	r3, [pc, #204]	; (800eb54 <LmHandlerSend+0x1b8>)
 800ea86:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800ea8a:	4b31      	ldr	r3, [pc, #196]	; (800eb50 <LmHandlerSend+0x1b4>)
 800ea8c:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800ea8e:	78ba      	ldrb	r2, [r7, #2]
 800ea90:	f107 0310 	add.w	r3, r7, #16
 800ea94:	4611      	mov	r1, r2
 800ea96:	4618      	mov	r0, r3
 800ea98:	f005 fc0e 	bl	80142b8 <LoRaMacMcpsRequest>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800eaa2:	6a3b      	ldr	r3, [r7, #32]
 800eaa4:	4a2c      	ldr	r2, [pc, #176]	; (800eb58 <LmHandlerSend+0x1bc>)
 800eaa6:	6013      	str	r3, [r2, #0]

    switch( status )
 800eaa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eaac:	2b11      	cmp	r3, #17
 800eaae:	d840      	bhi.n	800eb32 <LmHandlerSend+0x196>
 800eab0:	a201      	add	r2, pc, #4	; (adr r2, 800eab8 <LmHandlerSend+0x11c>)
 800eab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab6:	bf00      	nop
 800eab8:	0800eb01 	.word	0x0800eb01
 800eabc:	0800eb13 	.word	0x0800eb13
 800eac0:	0800eb33 	.word	0x0800eb33
 800eac4:	0800eb33 	.word	0x0800eb33
 800eac8:	0800eb33 	.word	0x0800eb33
 800eacc:	0800eb33 	.word	0x0800eb33
 800ead0:	0800eb33 	.word	0x0800eb33
 800ead4:	0800eb1b 	.word	0x0800eb1b
 800ead8:	0800eb33 	.word	0x0800eb33
 800eadc:	0800eb33 	.word	0x0800eb33
 800eae0:	0800eb33 	.word	0x0800eb33
 800eae4:	0800eb2b 	.word	0x0800eb2b
 800eae8:	0800eb33 	.word	0x0800eb33
 800eaec:	0800eb33 	.word	0x0800eb33
 800eaf0:	0800eb13 	.word	0x0800eb13
 800eaf4:	0800eb13 	.word	0x0800eb13
 800eaf8:	0800eb13 	.word	0x0800eb13
 800eafc:	0800eb23 	.word	0x0800eb23
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800eb00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eb04:	f113 0f07 	cmn.w	r3, #7
 800eb08:	d017      	beq.n	800eb3a <LmHandlerSend+0x19e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800eb10:	e013      	b.n	800eb3a <LmHandlerSend+0x19e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800eb12:	23fe      	movs	r3, #254	; 0xfe
 800eb14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800eb18:	e010      	b.n	800eb3c <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800eb1a:	23fd      	movs	r3, #253	; 0xfd
 800eb1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800eb20:	e00c      	b.n	800eb3c <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800eb22:	23fb      	movs	r3, #251	; 0xfb
 800eb24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800eb28:	e008      	b.n	800eb3c <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800eb2a:	23fa      	movs	r3, #250	; 0xfa
 800eb2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800eb30:	e004      	b.n	800eb3c <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800eb32:	23ff      	movs	r3, #255	; 0xff
 800eb34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800eb38:	e000      	b.n	800eb3c <LmHandlerSend+0x1a0>
            break;
 800eb3a:	bf00      	nop
    }

    return lmhStatus;
 800eb3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3728      	adds	r7, #40	; 0x28
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	200000a8 	.word	0x200000a8
 800eb4c:	200007d4 	.word	0x200007d4
 800eb50:	200000b4 	.word	0x200000b4
 800eb54:	200007e8 	.word	0x200007e8
 800eb58:	2000082c 	.word	0x2000082c

0800eb5c <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b086      	sub	sp, #24
 800eb60:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800eb62:	230a      	movs	r3, #10
 800eb64:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800eb66:	463b      	mov	r3, r7
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f005 fa53 	bl	8014014 <LoRaMacMlmeRequest>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	4a06      	ldr	r2, [pc, #24]	; (800eb90 <LmHandlerDeviceTimeReq+0x34>)
 800eb76:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800eb78:	7dfb      	ldrb	r3, [r7, #23]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d101      	bne.n	800eb82 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	e001      	b.n	800eb86 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800eb82:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3718      	adds	r7, #24
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	2000082c 	.word	0x2000082c

0800eb94 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800eb94:	b480      	push	{r7}
 800eb96:	b083      	sub	sp, #12
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800eb9e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	370c      	adds	r7, #12
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bc80      	pop	{r7}
 800ebaa:	4770      	bx	lr

0800ebac <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b08e      	sub	sp, #56	; 0x38
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800ebbc:	f001 fede 	bl	801097c <LoRaMacIsBusy>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d002      	beq.n	800ebcc <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ebc6:	f06f 0301 	mvn.w	r3, #1
 800ebca:	e071      	b.n	800ecb0 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800ebcc:	f7ff feca 	bl	800e964 <LmHandlerJoinStatus>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	d002      	beq.n	800ebdc <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ebd6:	f06f 0302 	mvn.w	r3, #2
 800ebda:	e069      	b.n	800ecb0 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ebe0:	f107 030c 	add.w	r3, r7, #12
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f004 fccb 	bl	8013580 <LoRaMacMibGetRequestConfirm>
 800ebea:	4603      	mov	r3, r0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d002      	beq.n	800ebf6 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800ebf0:	f04f 33ff 	mov.w	r3, #4294967295
 800ebf4:	e05c      	b.n	800ecb0 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800ebf6:	7c3b      	ldrb	r3, [r7, #16]
 800ebf8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800ebfc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ec00:	79fb      	ldrb	r3, [r7, #7]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d052      	beq.n	800ecac <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800ec06:	79fb      	ldrb	r3, [r7, #7]
 800ec08:	2b02      	cmp	r3, #2
 800ec0a:	d028      	beq.n	800ec5e <LmHandlerRequestClass+0xb2>
 800ec0c:	2b02      	cmp	r3, #2
 800ec0e:	dc48      	bgt.n	800eca2 <LmHandlerRequestClass+0xf6>
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d002      	beq.n	800ec1a <LmHandlerRequestClass+0x6e>
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d01e      	beq.n	800ec56 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800ec18:	e043      	b.n	800eca2 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800ec1a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d041      	beq.n	800eca6 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800ec22:	79fb      	ldrb	r3, [r7, #7]
 800ec24:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ec26:	f107 030c 	add.w	r3, r7, #12
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f004 fe5e 	bl	80138ec <LoRaMacMibSetRequestConfirm>
 800ec30:	4603      	mov	r3, r0
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d10b      	bne.n	800ec4e <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800ec36:	4b20      	ldr	r3, [pc, #128]	; (800ecb8 <LmHandlerRequestClass+0x10c>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d032      	beq.n	800eca6 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800ec40:	4b1d      	ldr	r3, [pc, #116]	; (800ecb8 <LmHandlerRequestClass+0x10c>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec46:	79fa      	ldrb	r2, [r7, #7]
 800ec48:	4610      	mov	r0, r2
 800ec4a:	4798      	blx	r3
                break;
 800ec4c:	e02b      	b.n	800eca6 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800ec4e:	23ff      	movs	r3, #255	; 0xff
 800ec50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800ec54:	e027      	b.n	800eca6 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800ec56:	23ff      	movs	r3, #255	; 0xff
 800ec58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800ec5c:	e026      	b.n	800ecac <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800ec5e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d003      	beq.n	800ec6e <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800ec66:	23ff      	movs	r3, #255	; 0xff
 800ec68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800ec6c:	e01d      	b.n	800ecaa <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800ec6e:	79fb      	ldrb	r3, [r7, #7]
 800ec70:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ec72:	f107 030c 	add.w	r3, r7, #12
 800ec76:	4618      	mov	r0, r3
 800ec78:	f004 fe38 	bl	80138ec <LoRaMacMibSetRequestConfirm>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d10b      	bne.n	800ec9a <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800ec82:	4b0d      	ldr	r3, [pc, #52]	; (800ecb8 <LmHandlerRequestClass+0x10c>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d00e      	beq.n	800ecaa <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800ec8c:	4b0a      	ldr	r3, [pc, #40]	; (800ecb8 <LmHandlerRequestClass+0x10c>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec92:	79fa      	ldrb	r2, [r7, #7]
 800ec94:	4610      	mov	r0, r2
 800ec96:	4798      	blx	r3
                break;
 800ec98:	e007      	b.n	800ecaa <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800ec9a:	23ff      	movs	r3, #255	; 0xff
 800ec9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800eca0:	e003      	b.n	800ecaa <LmHandlerRequestClass+0xfe>
                break;
 800eca2:	bf00      	nop
 800eca4:	e002      	b.n	800ecac <LmHandlerRequestClass+0x100>
                break;
 800eca6:	bf00      	nop
 800eca8:	e000      	b.n	800ecac <LmHandlerRequestClass+0x100>
                break;
 800ecaa:	bf00      	nop
        }
    }
    return errorStatus;
 800ecac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3738      	adds	r7, #56	; 0x38
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	20000800 	.word	0x20000800

0800ecbc <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b08c      	sub	sp, #48	; 0x30
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d102      	bne.n	800ecd0 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ecca:	f04f 33ff 	mov.w	r3, #4294967295
 800ecce:	e010      	b.n	800ecf2 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ecd4:	f107 0308 	add.w	r3, r7, #8
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f004 fc51 	bl	8013580 <LoRaMacMibGetRequestConfirm>
 800ecde:	4603      	mov	r3, r0
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d002      	beq.n	800ecea <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800ece4:	f04f 33ff 	mov.w	r3, #4294967295
 800ece8:	e003      	b.n	800ecf2 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800ecea:	7b3a      	ldrb	r2, [r7, #12]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800ecf0:	2300      	movs	r3, #0
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3730      	adds	r7, #48	; 0x30
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
	...

0800ecfc <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b08c      	sub	sp, #48	; 0x30
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d102      	bne.n	800ed10 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ed0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed0e:	e016      	b.n	800ed3e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800ed10:	231f      	movs	r3, #31
 800ed12:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800ed14:	f107 0308 	add.w	r3, r7, #8
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f004 fc31 	bl	8013580 <LoRaMacMibGetRequestConfirm>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d002      	beq.n	800ed2a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800ed24:	f04f 33ff 	mov.w	r3, #4294967295
 800ed28:	e009      	b.n	800ed3e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800ed2a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f993 2000 	ldrsb.w	r2, [r3]
 800ed38:	4b03      	ldr	r3, [pc, #12]	; (800ed48 <LmHandlerGetTxDatarate+0x4c>)
 800ed3a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800ed3c:	2300      	movs	r3, #0
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3730      	adds	r7, #48	; 0x30
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	200007e8 	.word	0x200007e8

0800ed4c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b08c      	sub	sp, #48	; 0x30
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800ed54:	2322      	movs	r3, #34	; 0x22
 800ed56:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ed5c:	f107 0308 	add.w	r3, r7, #8
 800ed60:	4618      	mov	r0, r3
 800ed62:	f004 fdc3 	bl	80138ec <LoRaMacMibSetRequestConfirm>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d002      	beq.n	800ed72 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800ed6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ed70:	e000      	b.n	800ed74 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800ed72:	2300      	movs	r3, #0
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3730      	adds	r7, #48	; 0x30
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800ed84:	4b18      	ldr	r3, [pc, #96]	; (800ede8 <McpsConfirm+0x6c>)
 800ed86:	2201      	movs	r2, #1
 800ed88:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	785a      	ldrb	r2, [r3, #1]
 800ed8e:	4b16      	ldr	r3, [pc, #88]	; (800ede8 <McpsConfirm+0x6c>)
 800ed90:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	789b      	ldrb	r3, [r3, #2]
 800ed96:	b25a      	sxtb	r2, r3
 800ed98:	4b13      	ldr	r3, [pc, #76]	; (800ede8 <McpsConfirm+0x6c>)
 800ed9a:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	68db      	ldr	r3, [r3, #12]
 800eda0:	4a11      	ldr	r2, [pc, #68]	; (800ede8 <McpsConfirm+0x6c>)
 800eda2:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800edaa:	4b0f      	ldr	r3, [pc, #60]	; (800ede8 <McpsConfirm+0x6c>)
 800edac:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	691b      	ldr	r3, [r3, #16]
 800edb2:	b2da      	uxtb	r2, r3
 800edb4:	4b0c      	ldr	r3, [pc, #48]	; (800ede8 <McpsConfirm+0x6c>)
 800edb6:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	791b      	ldrb	r3, [r3, #4]
 800edbc:	461a      	mov	r2, r3
 800edbe:	4b0a      	ldr	r3, [pc, #40]	; (800ede8 <McpsConfirm+0x6c>)
 800edc0:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800edc2:	4b0a      	ldr	r3, [pc, #40]	; (800edec <McpsConfirm+0x70>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d004      	beq.n	800edd6 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800edcc:	4b07      	ldr	r3, [pc, #28]	; (800edec <McpsConfirm+0x70>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edd2:	4805      	ldr	r0, [pc, #20]	; (800ede8 <McpsConfirm+0x6c>)
 800edd4:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800edd6:	6879      	ldr	r1, [r7, #4]
 800edd8:	2000      	movs	r0, #0
 800edda:	f000 f9eb 	bl	800f1b4 <LmHandlerPackagesNotify>
}
 800edde:	bf00      	nop
 800ede0:	3708      	adds	r7, #8
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}
 800ede6:	bf00      	nop
 800ede8:	200000b4 	.word	0x200000b4
 800edec:	20000800 	.word	0x20000800

0800edf0 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b088      	sub	sp, #32
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800edfa:	2300      	movs	r3, #0
 800edfc:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800edfe:	4b32      	ldr	r3, [pc, #200]	; (800eec8 <McpsIndication+0xd8>)
 800ee00:	2201      	movs	r2, #1
 800ee02:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	785a      	ldrb	r2, [r3, #1]
 800ee08:	4b2f      	ldr	r3, [pc, #188]	; (800eec8 <McpsIndication+0xd8>)
 800ee0a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ee0c:	4b2e      	ldr	r3, [pc, #184]	; (800eec8 <McpsIndication+0xd8>)
 800ee0e:	785b      	ldrb	r3, [r3, #1]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d155      	bne.n	800eec0 <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	791b      	ldrb	r3, [r3, #4]
 800ee18:	b25a      	sxtb	r2, r3
 800ee1a:	4b2b      	ldr	r3, [pc, #172]	; (800eec8 <McpsIndication+0xd8>)
 800ee1c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee24:	b25a      	sxtb	r2, r3
 800ee26:	4b28      	ldr	r3, [pc, #160]	; (800eec8 <McpsIndication+0xd8>)
 800ee28:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ee30:	4b25      	ldr	r3, [pc, #148]	; (800eec8 <McpsIndication+0xd8>)
 800ee32:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	78da      	ldrb	r2, [r3, #3]
 800ee38:	4b23      	ldr	r3, [pc, #140]	; (800eec8 <McpsIndication+0xd8>)
 800ee3a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	691b      	ldr	r3, [r3, #16]
 800ee40:	4a21      	ldr	r2, [pc, #132]	; (800eec8 <McpsIndication+0xd8>)
 800ee42:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	78db      	ldrb	r3, [r3, #3]
 800ee48:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	7b1b      	ldrb	r3, [r3, #12]
 800ee4e:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	689b      	ldr	r3, [r3, #8]
 800ee54:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800ee56:	4b1d      	ldr	r3, [pc, #116]	; (800eecc <McpsIndication+0xdc>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d007      	beq.n	800ee70 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800ee60:	4b1a      	ldr	r3, [pc, #104]	; (800eecc <McpsIndication+0xdc>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee66:	f107 0218 	add.w	r2, r7, #24
 800ee6a:	4917      	ldr	r1, [pc, #92]	; (800eec8 <McpsIndication+0xd8>)
 800ee6c:	4610      	mov	r0, r2
 800ee6e:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800ee70:	4b16      	ldr	r3, [pc, #88]	; (800eecc <McpsIndication+0xdc>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d007      	beq.n	800ee8a <McpsIndication+0x9a>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	7e1b      	ldrb	r3, [r3, #24]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d003      	beq.n	800ee8a <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ee82:	4b12      	ldr	r3, [pc, #72]	; (800eecc <McpsIndication+0xdc>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee88:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ee8a:	6879      	ldr	r1, [r7, #4]
 800ee8c:	2001      	movs	r0, #1
 800ee8e:	f000 f991 	bl	800f1b4 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800ee92:	f107 0317 	add.w	r3, r7, #23
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7ff ff10 	bl	800ecbc <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	795b      	ldrb	r3, [r3, #5]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d00e      	beq.n	800eec2 <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 800eea4:	2300      	movs	r3, #0
 800eea6:	733b      	strb	r3, [r7, #12]
 800eea8:	2300      	movs	r3, #0
 800eeaa:	737b      	strb	r3, [r7, #13]
 800eeac:	2300      	movs	r3, #0
 800eeae:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800eeb0:	f107 030c 	add.w	r3, r7, #12
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	2100      	movs	r1, #0
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7ff fd6f 	bl	800e99c <LmHandlerSend>
 800eebe:	e000      	b.n	800eec2 <McpsIndication+0xd2>
        return;
 800eec0:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800eec2:	3720      	adds	r7, #32
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}
 800eec8:	200000d0 	.word	0x200000d0
 800eecc:	20000800 	.word	0x20000800

0800eed0 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b08c      	sub	sp, #48	; 0x30
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800eed8:	4b4a      	ldr	r3, [pc, #296]	; (800f004 <MlmeConfirm+0x134>)
 800eeda:	2200      	movs	r2, #0
 800eedc:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	785a      	ldrb	r2, [r3, #1]
 800eee2:	4b48      	ldr	r3, [pc, #288]	; (800f004 <MlmeConfirm+0x134>)
 800eee4:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800eee6:	4b48      	ldr	r3, [pc, #288]	; (800f008 <MlmeConfirm+0x138>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d004      	beq.n	800eefa <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800eef0:	4b45      	ldr	r3, [pc, #276]	; (800f008 <MlmeConfirm+0x138>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eef6:	4843      	ldr	r0, [pc, #268]	; (800f004 <MlmeConfirm+0x134>)
 800eef8:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800eefa:	6879      	ldr	r1, [r7, #4]
 800eefc:	2002      	movs	r0, #2
 800eefe:	f000 f959 	bl	800f1b4 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	3b01      	subs	r3, #1
 800ef08:	2b0c      	cmp	r3, #12
 800ef0a:	d874      	bhi.n	800eff6 <MlmeConfirm+0x126>
 800ef0c:	a201      	add	r2, pc, #4	; (adr r2, 800ef14 <MlmeConfirm+0x44>)
 800ef0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef12:	bf00      	nop
 800ef14:	0800ef49 	.word	0x0800ef49
 800ef18:	0800eff7 	.word	0x0800eff7
 800ef1c:	0800eff7 	.word	0x0800eff7
 800ef20:	0800eff7 	.word	0x0800eff7
 800ef24:	0800efc5 	.word	0x0800efc5
 800ef28:	0800eff7 	.word	0x0800eff7
 800ef2c:	0800eff7 	.word	0x0800eff7
 800ef30:	0800eff7 	.word	0x0800eff7
 800ef34:	0800eff7 	.word	0x0800eff7
 800ef38:	0800eff7 	.word	0x0800eff7
 800ef3c:	0800eff7 	.word	0x0800eff7
 800ef40:	0800efdd 	.word	0x0800efdd
 800ef44:	0800eff7 	.word	0x0800eff7
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800ef48:	2306      	movs	r3, #6
 800ef4a:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800ef4c:	f107 0308 	add.w	r3, r7, #8
 800ef50:	4618      	mov	r0, r3
 800ef52:	f004 fb15 	bl	8013580 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800ef56:	4b2d      	ldr	r3, [pc, #180]	; (800f00c <MlmeConfirm+0x13c>)
 800ef58:	79db      	ldrb	r3, [r3, #7]
 800ef5a:	68fa      	ldr	r2, [r7, #12]
 800ef5c:	4611      	mov	r1, r2
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7ff faf6 	bl	800e550 <SecureElementSetDevAddr>
 800ef64:	4603      	mov	r3, r0
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d102      	bne.n	800ef70 <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	4a28      	ldr	r2, [pc, #160]	; (800f010 <MlmeConfirm+0x140>)
 800ef6e:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800ef70:	4828      	ldr	r0, [pc, #160]	; (800f014 <MlmeConfirm+0x144>)
 800ef72:	f7ff fec3 	bl	800ecfc <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800ef76:	4828      	ldr	r0, [pc, #160]	; (800f018 <MlmeConfirm+0x148>)
 800ef78:	f000 fa4e 	bl	800f418 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ef7c:	4b21      	ldr	r3, [pc, #132]	; (800f004 <MlmeConfirm+0x134>)
 800ef7e:	785b      	ldrb	r3, [r3, #1]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d108      	bne.n	800ef96 <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800ef84:	4b21      	ldr	r3, [pc, #132]	; (800f00c <MlmeConfirm+0x13c>)
 800ef86:	2200      	movs	r2, #0
 800ef88:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800ef8a:	4b24      	ldr	r3, [pc, #144]	; (800f01c <MlmeConfirm+0x14c>)
 800ef8c:	785b      	ldrb	r3, [r3, #1]
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7ff fe0c 	bl	800ebac <LmHandlerRequestClass>
 800ef94:	e002      	b.n	800ef9c <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800ef96:	4b1d      	ldr	r3, [pc, #116]	; (800f00c <MlmeConfirm+0x13c>)
 800ef98:	22ff      	movs	r2, #255	; 0xff
 800ef9a:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800ef9c:	4b1a      	ldr	r3, [pc, #104]	; (800f008 <MlmeConfirm+0x138>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d004      	beq.n	800efb0 <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800efa6:	4b18      	ldr	r3, [pc, #96]	; (800f008 <MlmeConfirm+0x138>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efac:	4817      	ldr	r0, [pc, #92]	; (800f00c <MlmeConfirm+0x13c>)
 800efae:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800efb0:	4b14      	ldr	r3, [pc, #80]	; (800f004 <MlmeConfirm+0x134>)
 800efb2:	785b      	ldrb	r3, [r3, #1]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d120      	bne.n	800effa <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800efb8:	4b14      	ldr	r3, [pc, #80]	; (800f00c <MlmeConfirm+0x13c>)
 800efba:	79db      	ldrb	r3, [r3, #7]
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7ff f859 	bl	800e074 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800efc2:	e01a      	b.n	800effa <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800efc4:	4b16      	ldr	r3, [pc, #88]	; (800f020 <MlmeConfirm+0x150>)
 800efc6:	2201      	movs	r2, #1
 800efc8:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	7a1a      	ldrb	r2, [r3, #8]
 800efce:	4b14      	ldr	r3, [pc, #80]	; (800f020 <MlmeConfirm+0x150>)
 800efd0:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	7a5a      	ldrb	r2, [r3, #9]
 800efd6:	4b12      	ldr	r3, [pc, #72]	; (800f020 <MlmeConfirm+0x150>)
 800efd8:	74da      	strb	r2, [r3, #19]
            }
            break;
 800efda:	e00f      	b.n	800effc <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	785b      	ldrb	r3, [r3, #1]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d105      	bne.n	800eff0 <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800efe4:	4b0d      	ldr	r3, [pc, #52]	; (800f01c <MlmeConfirm+0x14c>)
 800efe6:	7c1b      	ldrb	r3, [r3, #16]
 800efe8:	4618      	mov	r0, r3
 800efea:	f7ff fdd3 	bl	800eb94 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800efee:	e005      	b.n	800effc <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 800eff0:	f7ff fdb4 	bl	800eb5c <LmHandlerDeviceTimeReq>
            break;
 800eff4:	e002      	b.n	800effc <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800eff6:	bf00      	nop
 800eff8:	e000      	b.n	800effc <MlmeConfirm+0x12c>
            break;
 800effa:	bf00      	nop
    }
}
 800effc:	bf00      	nop
 800effe:	3730      	adds	r7, #48	; 0x30
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	200000b4 	.word	0x200000b4
 800f008:	20000800 	.word	0x20000800
 800f00c:	200000a8 	.word	0x200000a8
 800f010:	200007bc 	.word	0x200007bc
 800f014:	200000ac 	.word	0x200000ac
 800f018:	200000ad 	.word	0x200000ad
 800f01c:	200007e8 	.word	0x200007e8
 800f020:	200000d0 	.word	0x200000d0

0800f024 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b082      	sub	sp, #8
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800f02e:	4b20      	ldr	r3, [pc, #128]	; (800f0b0 <MlmeIndication+0x8c>)
 800f030:	2200      	movs	r2, #0
 800f032:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	785a      	ldrb	r2, [r3, #1]
 800f038:	4b1d      	ldr	r3, [pc, #116]	; (800f0b0 <MlmeIndication+0x8c>)
 800f03a:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	789b      	ldrb	r3, [r3, #2]
 800f040:	b25a      	sxtb	r2, r3
 800f042:	4b1b      	ldr	r3, [pc, #108]	; (800f0b0 <MlmeIndication+0x8c>)
 800f044:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f04c:	b25a      	sxtb	r2, r3
 800f04e:	4b18      	ldr	r3, [pc, #96]	; (800f0b0 <MlmeIndication+0x8c>)
 800f050:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800f058:	4b15      	ldr	r3, [pc, #84]	; (800f0b0 <MlmeIndication+0x8c>)
 800f05a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	78da      	ldrb	r2, [r3, #3]
 800f060:	4b13      	ldr	r3, [pc, #76]	; (800f0b0 <MlmeIndication+0x8c>)
 800f062:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	4a11      	ldr	r2, [pc, #68]	; (800f0b0 <MlmeIndication+0x8c>)
 800f06a:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800f06c:	4b11      	ldr	r3, [pc, #68]	; (800f0b4 <MlmeIndication+0x90>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f072:	2b00      	cmp	r3, #0
 800f074:	d00d      	beq.n	800f092 <MlmeIndication+0x6e>
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	781b      	ldrb	r3, [r3, #0]
 800f07a:	2b0b      	cmp	r3, #11
 800f07c:	d009      	beq.n	800f092 <MlmeIndication+0x6e>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	2b0f      	cmp	r3, #15
 800f084:	d005      	beq.n	800f092 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800f086:	4b0b      	ldr	r3, [pc, #44]	; (800f0b4 <MlmeIndication+0x90>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f08c:	4908      	ldr	r1, [pc, #32]	; (800f0b0 <MlmeIndication+0x8c>)
 800f08e:	2000      	movs	r0, #0
 800f090:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800f092:	6879      	ldr	r1, [r7, #4]
 800f094:	2003      	movs	r0, #3
 800f096:	f000 f88d 	bl	800f1b4 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	781b      	ldrb	r3, [r3, #0]
 800f09e:	2b0b      	cmp	r3, #11
 800f0a0:	d001      	beq.n	800f0a6 <MlmeIndication+0x82>
 800f0a2:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800f0a4:	e000      	b.n	800f0a8 <MlmeIndication+0x84>
            break;
 800f0a6:	bf00      	nop
    }
}
 800f0a8:	bf00      	nop
 800f0aa:	3708      	adds	r7, #8
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}
 800f0b0:	200000d0 	.word	0x200000d0
 800f0b4:	20000800 	.word	0x20000800

0800f0b8 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	4603      	mov	r3, r0
 800f0c0:	6039      	str	r1, [r7, #0]
 800f0c2:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	60fb      	str	r3, [r7, #12]
    switch( id )
 800f0c8:	79fb      	ldrb	r3, [r7, #7]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d104      	bne.n	800f0d8 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800f0ce:	f000 f9dd 	bl	800f48c <LmhpCompliancePackageFactory>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	60fb      	str	r3, [r7, #12]
                break;
 800f0d6:	e00d      	b.n	800f0f4 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800f0d8:	f107 020c 	add.w	r2, r7, #12
 800f0dc:	79fb      	ldrb	r3, [r7, #7]
 800f0de:	4611      	mov	r1, r2
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f000 fce9 	bl	800fab8 <LmhpPackagesRegister>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d002      	beq.n	800f0f2 <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800f0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f0:	e031      	b.n	800f156 <LmHandlerPackageRegister+0x9e>
                }
                break;
 800f0f2:	bf00      	nop
            }
    }
    if( package != NULL )
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d02b      	beq.n	800f152 <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 800f0fa:	79fb      	ldrb	r3, [r7, #7]
 800f0fc:	68fa      	ldr	r2, [r7, #12]
 800f0fe:	4918      	ldr	r1, [pc, #96]	; (800f160 <LmHandlerPackageRegister+0xa8>)
 800f100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800f104:	79fb      	ldrb	r3, [r7, #7]
 800f106:	4a16      	ldr	r2, [pc, #88]	; (800f160 <LmHandlerPackageRegister+0xa8>)
 800f108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f10c:	4a15      	ldr	r2, [pc, #84]	; (800f164 <LmHandlerPackageRegister+0xac>)
 800f10e:	62da      	str	r2, [r3, #44]	; 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800f110:	79fb      	ldrb	r3, [r7, #7]
 800f112:	4a13      	ldr	r2, [pc, #76]	; (800f160 <LmHandlerPackageRegister+0xa8>)
 800f114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f118:	4a13      	ldr	r2, [pc, #76]	; (800f168 <LmHandlerPackageRegister+0xb0>)
 800f11a:	631a      	str	r2, [r3, #48]	; 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800f11c:	79fb      	ldrb	r3, [r7, #7]
 800f11e:	4a10      	ldr	r2, [pc, #64]	; (800f160 <LmHandlerPackageRegister+0xa8>)
 800f120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f124:	4a11      	ldr	r2, [pc, #68]	; (800f16c <LmHandlerPackageRegister+0xb4>)
 800f126:	635a      	str	r2, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800f128:	4b11      	ldr	r3, [pc, #68]	; (800f170 <LmHandlerPackageRegister+0xb8>)
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	79fb      	ldrb	r3, [r7, #7]
 800f12e:	490c      	ldr	r1, [pc, #48]	; (800f160 <LmHandlerPackageRegister+0xa8>)
 800f130:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f134:	6992      	ldr	r2, [r2, #24]
 800f136:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800f138:	79fb      	ldrb	r3, [r7, #7]
 800f13a:	4a09      	ldr	r2, [pc, #36]	; (800f160 <LmHandlerPackageRegister+0xa8>)
 800f13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	4a0c      	ldr	r2, [pc, #48]	; (800f174 <LmHandlerPackageRegister+0xbc>)
 800f144:	6851      	ldr	r1, [r2, #4]
 800f146:	4a0b      	ldr	r2, [pc, #44]	; (800f174 <LmHandlerPackageRegister+0xbc>)
 800f148:	7852      	ldrb	r2, [r2, #1]
 800f14a:	6838      	ldr	r0, [r7, #0]
 800f14c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800f14e:	2300      	movs	r3, #0
 800f150:	e001      	b.n	800f156 <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800f152:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800f156:	4618      	mov	r0, r3
 800f158:	3710      	adds	r7, #16
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	200007d4 	.word	0x200007d4
 800f164:	0800e81d 	.word	0x0800e81d
 800f168:	0800e99d 	.word	0x0800e99d
 800f16c:	0800eb5d 	.word	0x0800eb5d
 800f170:	20000800 	.word	0x20000800
 800f174:	200000e4 	.word	0x200000e4

0800f178 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b082      	sub	sp, #8
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	4603      	mov	r3, r0
 800f180:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800f182:	79fb      	ldrb	r3, [r7, #7]
 800f184:	2b04      	cmp	r3, #4
 800f186:	d80e      	bhi.n	800f1a6 <LmHandlerPackageIsInitialized+0x2e>
 800f188:	79fb      	ldrb	r3, [r7, #7]
 800f18a:	4a09      	ldr	r2, [pc, #36]	; (800f1b0 <LmHandlerPackageIsInitialized+0x38>)
 800f18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f190:	689b      	ldr	r3, [r3, #8]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d007      	beq.n	800f1a6 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800f196:	79fb      	ldrb	r3, [r7, #7]
 800f198:	4a05      	ldr	r2, [pc, #20]	; (800f1b0 <LmHandlerPackageIsInitialized+0x38>)
 800f19a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f19e:	689b      	ldr	r3, [r3, #8]
 800f1a0:	4798      	blx	r3
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	e000      	b.n	800f1a8 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800f1a6:	2300      	movs	r3, #0
    }
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3708      	adds	r7, #8
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}
 800f1b0:	200007d4 	.word	0x200007d4

0800f1b4 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b084      	sub	sp, #16
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	6039      	str	r1, [r7, #0]
 800f1be:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	73fb      	strb	r3, [r7, #15]
 800f1c4:	e07c      	b.n	800f2c0 <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 800f1c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1ca:	4a42      	ldr	r2, [pc, #264]	; (800f2d4 <LmHandlerPackagesNotify+0x120>)
 800f1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d06f      	beq.n	800f2b4 <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 800f1d4:	79fb      	ldrb	r3, [r7, #7]
 800f1d6:	2b03      	cmp	r3, #3
 800f1d8:	d863      	bhi.n	800f2a2 <LmHandlerPackagesNotify+0xee>
 800f1da:	a201      	add	r2, pc, #4	; (adr r2, 800f1e0 <LmHandlerPackagesNotify+0x2c>)
 800f1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e0:	0800f1f1 	.word	0x0800f1f1
 800f1e4:	0800f213 	.word	0x0800f213
 800f1e8:	0800f25f 	.word	0x0800f25f
 800f1ec:	0800f281 	.word	0x0800f281
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800f1f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1f4:	4a37      	ldr	r2, [pc, #220]	; (800f2d4 <LmHandlerPackagesNotify+0x120>)
 800f1f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1fa:	69db      	ldr	r3, [r3, #28]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d052      	beq.n	800f2a6 <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800f200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f204:	4a33      	ldr	r2, [pc, #204]	; (800f2d4 <LmHandlerPackagesNotify+0x120>)
 800f206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f20a:	69db      	ldr	r3, [r3, #28]
 800f20c:	6838      	ldr	r0, [r7, #0]
 800f20e:	4798      	blx	r3
                        }
                        break;
 800f210:	e049      	b.n	800f2a6 <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800f212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f216:	4a2f      	ldr	r2, [pc, #188]	; (800f2d4 <LmHandlerPackagesNotify+0x120>)
 800f218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f21c:	6a1b      	ldr	r3, [r3, #32]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d043      	beq.n	800f2aa <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800f222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f226:	4a2b      	ldr	r2, [pc, #172]	; (800f2d4 <LmHandlerPackagesNotify+0x120>)
 800f228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f22c:	781a      	ldrb	r2, [r3, #0]
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800f232:	429a      	cmp	r2, r3
 800f234:	d00a      	beq.n	800f24c <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800f236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d135      	bne.n	800f2aa <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800f23e:	4b25      	ldr	r3, [pc, #148]	; (800f2d4 <LmHandlerPackagesNotify+0x120>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	68db      	ldr	r3, [r3, #12]
 800f244:	4798      	blx	r3
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d02e      	beq.n	800f2aa <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800f24c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f250:	4a20      	ldr	r2, [pc, #128]	; (800f2d4 <LmHandlerPackagesNotify+0x120>)
 800f252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f256:	6a1b      	ldr	r3, [r3, #32]
 800f258:	6838      	ldr	r0, [r7, #0]
 800f25a:	4798      	blx	r3
                        }
                        break;
 800f25c:	e025      	b.n	800f2aa <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800f25e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f262:	4a1c      	ldr	r2, [pc, #112]	; (800f2d4 <LmHandlerPackagesNotify+0x120>)
 800f264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d01f      	beq.n	800f2ae <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800f26e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f272:	4a18      	ldr	r2, [pc, #96]	; (800f2d4 <LmHandlerPackagesNotify+0x120>)
 800f274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27a:	6838      	ldr	r0, [r7, #0]
 800f27c:	4798      	blx	r3
                        }
                        break;
 800f27e:	e016      	b.n	800f2ae <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800f280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f284:	4a13      	ldr	r2, [pc, #76]	; (800f2d4 <LmHandlerPackagesNotify+0x120>)
 800f286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d010      	beq.n	800f2b2 <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800f290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f294:	4a0f      	ldr	r2, [pc, #60]	; (800f2d4 <LmHandlerPackagesNotify+0x120>)
 800f296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f29c:	6838      	ldr	r0, [r7, #0]
 800f29e:	4798      	blx	r3
                        }
                        break;
 800f2a0:	e007      	b.n	800f2b2 <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 800f2a2:	bf00      	nop
 800f2a4:	e006      	b.n	800f2b4 <LmHandlerPackagesNotify+0x100>
                        break;
 800f2a6:	bf00      	nop
 800f2a8:	e004      	b.n	800f2b4 <LmHandlerPackagesNotify+0x100>
                        break;
 800f2aa:	bf00      	nop
 800f2ac:	e002      	b.n	800f2b4 <LmHandlerPackagesNotify+0x100>
                        break;
 800f2ae:	bf00      	nop
 800f2b0:	e000      	b.n	800f2b4 <LmHandlerPackagesNotify+0x100>
                        break;
 800f2b2:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f2b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2b8:	b2db      	uxtb	r3, r3
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	b2db      	uxtb	r3, r3
 800f2be:	73fb      	strb	r3, [r7, #15]
 800f2c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2c4:	2b04      	cmp	r3, #4
 800f2c6:	f77f af7e 	ble.w	800f1c6 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800f2ca:	bf00      	nop
 800f2cc:	bf00      	nop
 800f2ce:	3710      	adds	r7, #16
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}
 800f2d4:	200007d4 	.word	0x200007d4

0800f2d8 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f2de:	2300      	movs	r3, #0
 800f2e0:	71fb      	strb	r3, [r7, #7]
 800f2e2:	e01c      	b.n	800f31e <LmHandlerPackageIsTxPending+0x46>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 800f2e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2e8:	4a11      	ldr	r2, [pc, #68]	; (800f330 <LmHandlerPackageIsTxPending+0x58>)
 800f2ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d00f      	beq.n	800f312 <LmHandlerPackageIsTxPending+0x3a>
 800f2f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d00b      	beq.n	800f312 <LmHandlerPackageIsTxPending+0x3a>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800f2fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2fe:	4a0c      	ldr	r2, [pc, #48]	; (800f330 <LmHandlerPackageIsTxPending+0x58>)
 800f300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f304:	691b      	ldr	r3, [r3, #16]
 800f306:	4798      	blx	r3
 800f308:	4603      	mov	r3, r0
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d001      	beq.n	800f312 <LmHandlerPackageIsTxPending+0x3a>
            {
                return true;
 800f30e:	2301      	movs	r3, #1
 800f310:	e00a      	b.n	800f328 <LmHandlerPackageIsTxPending+0x50>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f316:	b2db      	uxtb	r3, r3
 800f318:	3301      	adds	r3, #1
 800f31a:	b2db      	uxtb	r3, r3
 800f31c:	71fb      	strb	r3, [r7, #7]
 800f31e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f322:	2b04      	cmp	r3, #4
 800f324:	ddde      	ble.n	800f2e4 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800f326:	2300      	movs	r3, #0
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3708      	adds	r7, #8
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	200007d4 	.word	0x200007d4

0800f334 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b082      	sub	sp, #8
 800f338:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f33a:	2300      	movs	r3, #0
 800f33c:	71fb      	strb	r3, [r7, #7]
 800f33e:	e022      	b.n	800f386 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800f340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f344:	4a14      	ldr	r2, [pc, #80]	; (800f398 <LmHandlerPackagesProcess+0x64>)
 800f346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d015      	beq.n	800f37a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800f34e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f352:	4a11      	ldr	r2, [pc, #68]	; (800f398 <LmHandlerPackagesProcess+0x64>)
 800f354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f358:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d00d      	beq.n	800f37a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800f35e:	79fb      	ldrb	r3, [r7, #7]
 800f360:	4618      	mov	r0, r3
 800f362:	f7ff ff09 	bl	800f178 <LmHandlerPackageIsInitialized>
 800f366:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d006      	beq.n	800f37a <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800f36c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f370:	4a09      	ldr	r2, [pc, #36]	; (800f398 <LmHandlerPackagesProcess+0x64>)
 800f372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f376:	695b      	ldr	r3, [r3, #20]
 800f378:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f37a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f37e:	b2db      	uxtb	r3, r3
 800f380:	3301      	adds	r3, #1
 800f382:	b2db      	uxtb	r3, r3
 800f384:	71fb      	strb	r3, [r7, #7]
 800f386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f38a:	2b04      	cmp	r3, #4
 800f38c:	ddd8      	ble.n	800f340 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800f38e:	bf00      	nop
 800f390:	bf00      	nop
 800f392:	3708      	adds	r7, #8
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}
 800f398:	200007d4 	.word	0x200007d4

0800f39c <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800f39c:	b480      	push	{r7}
 800f39e:	b083      	sub	sp, #12
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	6039      	str	r1, [r7, #0]
 800f3a6:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d102      	bne.n	800f3b4 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800f3ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f3b2:	e00e      	b.n	800f3d2 <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800f3b4:	79fb      	ldrb	r3, [r7, #7]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d002      	beq.n	800f3c0 <LmHandlerGetVersion+0x24>
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	d004      	beq.n	800f3c8 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800f3be:	e007      	b.n	800f3d0 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	4a06      	ldr	r2, [pc, #24]	; (800f3dc <LmHandlerGetVersion+0x40>)
 800f3c4:	601a      	str	r2, [r3, #0]
            break;
 800f3c6:	e003      	b.n	800f3d0 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	4a05      	ldr	r2, [pc, #20]	; (800f3e0 <LmHandlerGetVersion+0x44>)
 800f3cc:	601a      	str	r2, [r3, #0]
            break;
 800f3ce:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800f3d0:	2300      	movs	r3, #0
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	370c      	adds	r7, #12
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bc80      	pop	{r7}
 800f3da:	4770      	bx	lr
 800f3dc:	01000300 	.word	0x01000300
 800f3e0:	01010003 	.word	0x01010003

0800f3e4 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800f3e8:	f005 f882 	bl	80144f0 <LoRaMacDeInitialization>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d101      	bne.n	800f3f6 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	e001      	b.n	800f3fa <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f3f6:	f06f 0301 	mvn.w	r3, #1
    }
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800f3fe:	b580      	push	{r7, lr}
 800f400:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800f402:	f004 f80d 	bl	8013420 <LoRaMacHalt>
 800f406:	4603      	mov	r3, r0
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d101      	bne.n	800f410 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f40c:	2300      	movs	r3, #0
 800f40e:	e001      	b.n	800f414 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f410:	f06f 0301 	mvn.w	r3, #1
    }
}
 800f414:	4618      	mov	r0, r3
 800f416:	bd80      	pop	{r7, pc}

0800f418 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b08c      	sub	sp, #48	; 0x30
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d102      	bne.n	800f42c <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f426:	f04f 33ff 	mov.w	r3, #4294967295
 800f42a:	e016      	b.n	800f45a <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800f42c:	2320      	movs	r3, #32
 800f42e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f430:	f107 0308 	add.w	r3, r7, #8
 800f434:	4618      	mov	r0, r3
 800f436:	f004 f8a3 	bl	8013580 <LoRaMacMibGetRequestConfirm>
 800f43a:	4603      	mov	r3, r0
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d002      	beq.n	800f446 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800f440:	f04f 33ff 	mov.w	r3, #4294967295
 800f444:	e009      	b.n	800f45a <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800f446:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f993 2000 	ldrsb.w	r2, [r3]
 800f454:	4b03      	ldr	r3, [pc, #12]	; (800f464 <LmHandlerGetTxPower+0x4c>)
 800f456:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800f458:	2300      	movs	r3, #0
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3730      	adds	r7, #48	; 0x30
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	200007e8 	.word	0x200007e8

0800f468 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800f468:	b480      	push	{r7}
 800f46a:	af00      	add	r7, sp, #0
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
    }

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
 800f46c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f470:	4618      	mov	r0, r3
 800f472:	46bd      	mov	sp, r7
 800f474:	bc80      	pop	{r7}
 800f476:	4770      	bx	lr

0800f478 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800f478:	b480      	push	{r7}
 800f47a:	b083      	sub	sp, #12
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	4603      	mov	r3, r0
 800f480:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800f482:	bf00      	nop
 800f484:	370c      	adds	r7, #12
 800f486:	46bd      	mov	sp, r7
 800f488:	bc80      	pop	{r7}
 800f48a:	4770      	bx	lr

0800f48c <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800f48c:	b480      	push	{r7}
 800f48e:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800f490:	4b02      	ldr	r3, [pc, #8]	; (800f49c <LmhpCompliancePackageFactory+0x10>)
}
 800f492:	4618      	mov	r0, r3
 800f494:	46bd      	mov	sp, r7
 800f496:	bc80      	pop	{r7}
 800f498:	4770      	bx	lr
 800f49a:	bf00      	nop
 800f49c:	200000ec 	.word	0x200000ec

0800f4a0 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b085      	sub	sp, #20
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	60f8      	str	r0, [r7, #12]
 800f4a8:	60b9      	str	r1, [r7, #8]
 800f4aa:	4613      	mov	r3, r2
 800f4ac:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d00f      	beq.n	800f4d4 <LmhpComplianceInit+0x34>
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d00c      	beq.n	800f4d4 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 800f4ba:	4a0c      	ldr	r2, [pc, #48]	; (800f4ec <LmhpComplianceInit+0x4c>)
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800f4c0:	4a0b      	ldr	r2, [pc, #44]	; (800f4f0 <LmhpComplianceInit+0x50>)
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800f4c6:	4a0a      	ldr	r2, [pc, #40]	; (800f4f0 <LmhpComplianceInit+0x50>)
 800f4c8:	79fb      	ldrb	r3, [r7, #7]
 800f4ca:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800f4cc:	4b08      	ldr	r3, [pc, #32]	; (800f4f0 <LmhpComplianceInit+0x50>)
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	701a      	strb	r2, [r3, #0]
 800f4d2:	e006      	b.n	800f4e2 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800f4d4:	4b05      	ldr	r3, [pc, #20]	; (800f4ec <LmhpComplianceInit+0x4c>)
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800f4da:	4b05      	ldr	r3, [pc, #20]	; (800f4f0 <LmhpComplianceInit+0x50>)
 800f4dc:	2200      	movs	r2, #0
 800f4de:	701a      	strb	r2, [r3, #0]
    }
}
 800f4e0:	bf00      	nop
 800f4e2:	bf00      	nop
 800f4e4:	3714      	adds	r7, #20
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bc80      	pop	{r7}
 800f4ea:	4770      	bx	lr
 800f4ec:	20000950 	.word	0x20000950
 800f4f0:	2000093c 	.word	0x2000093c

0800f4f4 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800f4f8:	4b02      	ldr	r3, [pc, #8]	; (800f504 <LmhpComplianceIsInitialized+0x10>)
 800f4fa:	781b      	ldrb	r3, [r3, #0]
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bc80      	pop	{r7}
 800f502:	4770      	bx	lr
 800f504:	2000093c 	.word	0x2000093c

0800f508 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800f508:	b480      	push	{r7}
 800f50a:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800f50c:	4b07      	ldr	r3, [pc, #28]	; (800f52c <LmhpComplianceIsRunning+0x24>)
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	f083 0301 	eor.w	r3, r3, #1
 800f514:	b2db      	uxtb	r3, r3
 800f516:	2b00      	cmp	r3, #0
 800f518:	d001      	beq.n	800f51e <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800f51a:	2300      	movs	r3, #0
 800f51c:	e001      	b.n	800f522 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800f51e:	4b03      	ldr	r3, [pc, #12]	; (800f52c <LmhpComplianceIsRunning+0x24>)
 800f520:	785b      	ldrb	r3, [r3, #1]
}
 800f522:	4618      	mov	r0, r3
 800f524:	46bd      	mov	sp, r7
 800f526:	bc80      	pop	{r7}
 800f528:	4770      	bx	lr
 800f52a:	bf00      	nop
 800f52c:	2000093c 	.word	0x2000093c

0800f530 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800f530:	b480      	push	{r7}
 800f532:	b083      	sub	sp, #12
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800f538:	4b0f      	ldr	r3, [pc, #60]	; (800f578 <LmhpComplianceOnMcpsConfirm+0x48>)
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	f083 0301 	eor.w	r3, r3, #1
 800f540:	b2db      	uxtb	r3, r3
 800f542:	2b00      	cmp	r3, #0
 800f544:	d112      	bne.n	800f56c <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800f546:	4b0c      	ldr	r3, [pc, #48]	; (800f578 <LmhpComplianceOnMcpsConfirm+0x48>)
 800f548:	785b      	ldrb	r3, [r3, #1]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d00f      	beq.n	800f56e <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 800f552:	2b01      	cmp	r3, #1
 800f554:	d10b      	bne.n	800f56e <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d007      	beq.n	800f56e <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800f55e:	4b06      	ldr	r3, [pc, #24]	; (800f578 <LmhpComplianceOnMcpsConfirm+0x48>)
 800f560:	899b      	ldrh	r3, [r3, #12]
 800f562:	3301      	adds	r3, #1
 800f564:	b29a      	uxth	r2, r3
 800f566:	4b04      	ldr	r3, [pc, #16]	; (800f578 <LmhpComplianceOnMcpsConfirm+0x48>)
 800f568:	819a      	strh	r2, [r3, #12]
 800f56a:	e000      	b.n	800f56e <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800f56c:	bf00      	nop
    }
}
 800f56e:	370c      	adds	r7, #12
 800f570:	46bd      	mov	sp, r7
 800f572:	bc80      	pop	{r7}
 800f574:	4770      	bx	lr
 800f576:	bf00      	nop
 800f578:	2000093c 	.word	0x2000093c

0800f57c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800f57c:	b480      	push	{r7}
 800f57e:	b083      	sub	sp, #12
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800f584:	4b12      	ldr	r3, [pc, #72]	; (800f5d0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f586:	781b      	ldrb	r3, [r3, #0]
 800f588:	f083 0301 	eor.w	r3, r3, #1
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d116      	bne.n	800f5c0 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800f592:	4b0f      	ldr	r3, [pc, #60]	; (800f5d0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f594:	785b      	ldrb	r3, [r3, #1]
 800f596:	f083 0301 	eor.w	r3, r3, #1
 800f59a:	b2db      	uxtb	r3, r3
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d111      	bne.n	800f5c4 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	2b05      	cmp	r3, #5
 800f5a6:	d10e      	bne.n	800f5c6 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800f5a8:	4b09      	ldr	r3, [pc, #36]	; (800f5d0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	7a1a      	ldrb	r2, [r3, #8]
 800f5b2:	4b07      	ldr	r3, [pc, #28]	; (800f5d0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f5b4:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	7a5a      	ldrb	r2, [r3, #9]
 800f5ba:	4b05      	ldr	r3, [pc, #20]	; (800f5d0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f5bc:	741a      	strb	r2, [r3, #16]
 800f5be:	e002      	b.n	800f5c6 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800f5c0:	bf00      	nop
 800f5c2:	e000      	b.n	800f5c6 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800f5c4:	bf00      	nop
    }
}
 800f5c6:	370c      	adds	r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bc80      	pop	{r7}
 800f5cc:	4770      	bx	lr
 800f5ce:	bf00      	nop
 800f5d0:	2000093c 	.word	0x2000093c

0800f5d4 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b082      	sub	sp, #8
 800f5d8:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800f5da:	4b36      	ldr	r3, [pc, #216]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	f083 0301 	eor.w	r3, r3, #1
 800f5e2:	b2db      	uxtb	r3, r3
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d002      	beq.n	800f5ee <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f5ec:	e05e      	b.n	800f6ac <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 800f5ee:	4b31      	ldr	r3, [pc, #196]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f5f0:	785b      	ldrb	r3, [r3, #1]
 800f5f2:	f083 0301 	eor.w	r3, r3, #1
 800f5f6:	b2db      	uxtb	r3, r3
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d001      	beq.n	800f600 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	e055      	b.n	800f6ac <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 800f600:	4b2c      	ldr	r3, [pc, #176]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f602:	7b9b      	ldrb	r3, [r3, #14]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d019      	beq.n	800f63c <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800f608:	4b2a      	ldr	r3, [pc, #168]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f60a:	2200      	movs	r2, #0
 800f60c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800f60e:	4b29      	ldr	r3, [pc, #164]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f610:	2203      	movs	r2, #3
 800f612:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800f614:	4b27      	ldr	r3, [pc, #156]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f616:	689b      	ldr	r3, [r3, #8]
 800f618:	2205      	movs	r2, #5
 800f61a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800f61c:	4b25      	ldr	r3, [pc, #148]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f61e:	689b      	ldr	r3, [r3, #8]
 800f620:	3301      	adds	r3, #1
 800f622:	4a24      	ldr	r2, [pc, #144]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f624:	7bd2      	ldrb	r2, [r2, #15]
 800f626:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800f628:	4b22      	ldr	r3, [pc, #136]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f62a:	689b      	ldr	r3, [r3, #8]
 800f62c:	3302      	adds	r3, #2
 800f62e:	4a21      	ldr	r2, [pc, #132]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f630:	7c12      	ldrb	r2, [r2, #16]
 800f632:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800f634:	4b1f      	ldr	r3, [pc, #124]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f636:	2201      	movs	r2, #1
 800f638:	709a      	strb	r2, [r3, #2]
 800f63a:	e01c      	b.n	800f676 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800f63c:	4b1d      	ldr	r3, [pc, #116]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f63e:	789b      	ldrb	r3, [r3, #2]
 800f640:	2b01      	cmp	r3, #1
 800f642:	d005      	beq.n	800f650 <LmhpComplianceTxProcess+0x7c>
 800f644:	2b04      	cmp	r3, #4
 800f646:	d116      	bne.n	800f676 <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 800f648:	4b1a      	ldr	r3, [pc, #104]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f64a:	2201      	movs	r2, #1
 800f64c:	709a      	strb	r2, [r3, #2]
                break;
 800f64e:	e012      	b.n	800f676 <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 800f650:	4b18      	ldr	r3, [pc, #96]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f652:	2202      	movs	r2, #2
 800f654:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800f656:	4b17      	ldr	r3, [pc, #92]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f658:	899b      	ldrh	r3, [r3, #12]
 800f65a:	0a1b      	lsrs	r3, r3, #8
 800f65c:	b29a      	uxth	r2, r3
 800f65e:	4b15      	ldr	r3, [pc, #84]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f660:	689b      	ldr	r3, [r3, #8]
 800f662:	b2d2      	uxtb	r2, r2
 800f664:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800f666:	4b13      	ldr	r3, [pc, #76]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f668:	899a      	ldrh	r2, [r3, #12]
 800f66a:	4b12      	ldr	r3, [pc, #72]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f66c:	689b      	ldr	r3, [r3, #8]
 800f66e:	3301      	adds	r3, #1
 800f670:	b2d2      	uxtb	r2, r2
 800f672:	701a      	strb	r2, [r3, #0]
                break;
 800f674:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800f676:	23e0      	movs	r3, #224	; 0xe0
 800f678:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800f67a:	4b0e      	ldr	r3, [pc, #56]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f67c:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800f67e:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800f680:	4b0c      	ldr	r3, [pc, #48]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f682:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800f684:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 800f686:	480c      	ldr	r0, [pc, #48]	; (800f6b8 <LmhpComplianceTxProcess+0xe4>)
 800f688:	f00d fc5a 	bl	801cf40 <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 800f68c:	4b0b      	ldr	r3, [pc, #44]	; (800f6bc <LmhpComplianceTxProcess+0xe8>)
 800f68e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f690:	2b00      	cmp	r3, #0
 800f692:	d102      	bne.n	800f69a <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 800f694:	f04f 33ff 	mov.w	r3, #4294967295
 800f698:	e008      	b.n	800f6ac <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800f69a:	4b08      	ldr	r3, [pc, #32]	; (800f6bc <LmhpComplianceTxProcess+0xe8>)
 800f69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f69e:	4a05      	ldr	r2, [pc, #20]	; (800f6b4 <LmhpComplianceTxProcess+0xe0>)
 800f6a0:	78d2      	ldrb	r2, [r2, #3]
 800f6a2:	4611      	mov	r1, r2
 800f6a4:	4638      	mov	r0, r7
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	4798      	blx	r3
 800f6aa:	4603      	mov	r3, r0
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3708      	adds	r7, #8
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}
 800f6b4:	2000093c 	.word	0x2000093c
 800f6b8:	20000924 	.word	0x20000924
 800f6bc:	200000ec 	.word	0x200000ec

0800f6c0 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b0a4      	sub	sp, #144	; 0x90
 800f6c4:	af02      	add	r7, sp, #8
 800f6c6:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800f6c8:	4ba5      	ldr	r3, [pc, #660]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	f083 0301 	eor.w	r3, r3, #1
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	f040 81c6 	bne.w	800fa64 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	7b5b      	ldrb	r3, [r3, #13]
 800f6dc:	f083 0301 	eor.w	r3, r3, #1
 800f6e0:	b2db      	uxtb	r3, r3
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	f040 81c0 	bne.w	800fa68 <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800f6e8:	4b9d      	ldr	r3, [pc, #628]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f6ea:	785b      	ldrb	r3, [r3, #1]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d00c      	beq.n	800f70a <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	7b9b      	ldrb	r3, [r3, #14]
 800f6f4:	f083 0301 	eor.w	r3, r3, #1
 800f6f8:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d005      	beq.n	800f70a <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800f6fe:	4b98      	ldr	r3, [pc, #608]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f700:	899b      	ldrh	r3, [r3, #12]
 800f702:	3301      	adds	r3, #1
 800f704:	b29a      	uxth	r2, r3
 800f706:	4b96      	ldr	r3, [pc, #600]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f708:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	78db      	ldrb	r3, [r3, #3]
 800f70e:	2be0      	cmp	r3, #224	; 0xe0
 800f710:	f040 81ac 	bne.w	800fa6c <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800f714:	4b92      	ldr	r3, [pc, #584]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f716:	785b      	ldrb	r3, [r3, #1]
 800f718:	f083 0301 	eor.w	r3, r3, #1
 800f71c:	b2db      	uxtb	r3, r3
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d060      	beq.n	800f7e4 <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	7b1b      	ldrb	r3, [r3, #12]
 800f726:	2b04      	cmp	r3, #4
 800f728:	f040 81a7 	bne.w	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	689b      	ldr	r3, [r3, #8]
 800f730:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800f732:	2b01      	cmp	r3, #1
 800f734:	f040 81a1 	bne.w	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	689b      	ldr	r3, [r3, #8]
 800f73c:	3301      	adds	r3, #1
 800f73e:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800f740:	2b01      	cmp	r3, #1
 800f742:	f040 819a 	bne.w	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	689b      	ldr	r3, [r3, #8]
 800f74a:	3302      	adds	r3, #2
 800f74c:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800f74e:	2b01      	cmp	r3, #1
 800f750:	f040 8193 	bne.w	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	689b      	ldr	r3, [r3, #8]
 800f758:	3303      	adds	r3, #3
 800f75a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800f75c:	2b01      	cmp	r3, #1
 800f75e:	f040 818c 	bne.w	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 800f762:	4b7f      	ldr	r3, [pc, #508]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f764:	2200      	movs	r2, #0
 800f766:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800f768:	4b7d      	ldr	r3, [pc, #500]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f76a:	22e0      	movs	r2, #224	; 0xe0
 800f76c:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800f76e:	4b7c      	ldr	r3, [pc, #496]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f770:	2202      	movs	r2, #2
 800f772:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800f774:	4b7a      	ldr	r3, [pc, #488]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f776:	2200      	movs	r2, #0
 800f778:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800f77a:	4b79      	ldr	r3, [pc, #484]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f77c:	2200      	movs	r2, #0
 800f77e:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800f780:	4b77      	ldr	r3, [pc, #476]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f782:	2200      	movs	r2, #0
 800f784:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800f786:	4b76      	ldr	r3, [pc, #472]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f788:	2200      	movs	r2, #0
 800f78a:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800f78c:	4b74      	ldr	r3, [pc, #464]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f78e:	2201      	movs	r2, #1
 800f790:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800f792:	4b73      	ldr	r3, [pc, #460]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f794:	2201      	movs	r2, #1
 800f796:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 800f798:	2304      	movs	r3, #4
 800f79a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 800f79c:	2301      	movs	r3, #1
 800f79e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f7a0:	f107 030c 	add.w	r3, r7, #12
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f004 f8a1 	bl	80138ec <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 800f7aa:	2000      	movs	r0, #0
 800f7ac:	f004 fe7a 	bl	80144a4 <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800f7b0:	4b6c      	ldr	r3, [pc, #432]	; (800f964 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	685b      	ldr	r3, [r3, #4]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d003      	beq.n	800f7c2 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800f7ba:	4b6a      	ldr	r3, [pc, #424]	; (800f964 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	9300      	str	r3, [sp, #0]
 800f7c6:	4b68      	ldr	r3, [pc, #416]	; (800f968 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	f04f 31ff 	mov.w	r1, #4294967295
 800f7ce:	4867      	ldr	r0, [pc, #412]	; (800f96c <LmhpComplianceOnMcpsIndication+0x2ac>)
 800f7d0:	f00d fb80 	bl	801ced4 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800f7d4:	f241 3188 	movw	r1, #5000	; 0x1388
 800f7d8:	4864      	ldr	r0, [pc, #400]	; (800f96c <LmhpComplianceOnMcpsIndication+0x2ac>)
 800f7da:	f00d fc8f 	bl	801d0fc <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 800f7de:	f7ff fef9 	bl	800f5d4 <LmhpComplianceTxProcess>
 800f7e2:	e14a      	b.n	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	689b      	ldr	r3, [r3, #8]
 800f7e8:	781a      	ldrb	r2, [r3, #0]
 800f7ea:	4b5d      	ldr	r3, [pc, #372]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f7ec:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800f7ee:	4b5c      	ldr	r3, [pc, #368]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f7f0:	789b      	ldrb	r3, [r3, #2]
 800f7f2:	2b0a      	cmp	r3, #10
 800f7f4:	f200 813c 	bhi.w	800fa70 <LmhpComplianceOnMcpsIndication+0x3b0>
 800f7f8:	a201      	add	r2, pc, #4	; (adr r2, 800f800 <LmhpComplianceOnMcpsIndication+0x140>)
 800f7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7fe:	bf00      	nop
 800f800:	0800f82d 	.word	0x0800f82d
 800f804:	0800f877 	.word	0x0800f877
 800f808:	0800f87f 	.word	0x0800f87f
 800f80c:	0800f88d 	.word	0x0800f88d
 800f810:	0800f89b 	.word	0x0800f89b
 800f814:	0800f8f3 	.word	0x0800f8f3
 800f818:	0800f905 	.word	0x0800f905
 800f81c:	0800f975 	.word	0x0800f975
 800f820:	0800fa1d 	.word	0x0800fa1d
 800f824:	0800fa2f 	.word	0x0800fa2f
 800f828:	0800fa49 	.word	0x0800fa49
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800f82c:	484f      	ldr	r0, [pc, #316]	; (800f96c <LmhpComplianceOnMcpsIndication+0x2ac>)
 800f82e:	f00d fbf5 	bl	801d01c <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800f832:	4b4b      	ldr	r3, [pc, #300]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f834:	2200      	movs	r2, #0
 800f836:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800f838:	4b49      	ldr	r3, [pc, #292]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f83a:	2200      	movs	r2, #0
 800f83c:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800f83e:	2304      	movs	r3, #4
 800f840:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800f842:	4b48      	ldr	r3, [pc, #288]	; (800f964 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	781b      	ldrb	r3, [r3, #0]
 800f848:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800f84a:	f107 030c 	add.w	r3, r7, #12
 800f84e:	4618      	mov	r0, r3
 800f850:	f004 f84c 	bl	80138ec <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800f854:	4b43      	ldr	r3, [pc, #268]	; (800f964 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	785b      	ldrb	r3, [r3, #1]
 800f85a:	4618      	mov	r0, r3
 800f85c:	f004 fe22 	bl	80144a4 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800f860:	4b40      	ldr	r3, [pc, #256]	; (800f964 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	689b      	ldr	r3, [r3, #8]
 800f866:	2b00      	cmp	r3, #0
 800f868:	f000 8104 	beq.w	800fa74 <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800f86c:	4b3d      	ldr	r3, [pc, #244]	; (800f964 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	689b      	ldr	r3, [r3, #8]
 800f872:	4798      	blx	r3
                    }
                }
                break;
 800f874:	e0fe      	b.n	800fa74 <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 800f876:	4b3a      	ldr	r3, [pc, #232]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f878:	2202      	movs	r2, #2
 800f87a:	719a      	strb	r2, [r3, #6]
                break;
 800f87c:	e0fd      	b.n	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 800f87e:	4b38      	ldr	r3, [pc, #224]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f880:	2201      	movs	r2, #1
 800f882:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800f884:	4b36      	ldr	r3, [pc, #216]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f886:	2201      	movs	r2, #1
 800f888:	709a      	strb	r2, [r3, #2]
                break;
 800f88a:	e0f6      	b.n	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 800f88c:	4b34      	ldr	r3, [pc, #208]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f88e:	2200      	movs	r2, #0
 800f890:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800f892:	4b33      	ldr	r3, [pc, #204]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f894:	2201      	movs	r2, #1
 800f896:	709a      	strb	r2, [r3, #2]
                break;
 800f898:	e0ef      	b.n	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	7b1a      	ldrb	r2, [r3, #12]
 800f89e:	4b30      	ldr	r3, [pc, #192]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f8a0:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 800f8a2:	4b2f      	ldr	r3, [pc, #188]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f8a4:	689b      	ldr	r3, [r3, #8]
 800f8a6:	2204      	movs	r2, #4
 800f8a8:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800f8b0:	e012      	b.n	800f8d8 <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	689a      	ldr	r2, [r3, #8]
 800f8b6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f8ba:	4413      	add	r3, r2
 800f8bc:	781a      	ldrb	r2, [r3, #0]
 800f8be:	4b28      	ldr	r3, [pc, #160]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f8c0:	6899      	ldr	r1, [r3, #8]
 800f8c2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f8c6:	440b      	add	r3, r1
 800f8c8:	3201      	adds	r2, #1
 800f8ca:	b2d2      	uxtb	r2, r2
 800f8cc:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800f8ce:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800f8d8:	4b21      	ldr	r3, [pc, #132]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f8da:	795a      	ldrb	r2, [r3, #5]
 800f8dc:	4b20      	ldr	r3, [pc, #128]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f8de:	799b      	ldrb	r3, [r3, #6]
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	bf28      	it	cs
 800f8e4:	4613      	movcs	r3, r2
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d3e0      	bcc.n	800f8b2 <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 800f8f0:	e0c3      	b.n	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 800f8f2:	2305      	movs	r3, #5
 800f8f4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 800f8f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f004 fb89 	bl	8014014 <LoRaMacMlmeRequest>
                }
                break;
 800f902:	e0ba      	b.n	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800f904:	4819      	ldr	r0, [pc, #100]	; (800f96c <LmhpComplianceOnMcpsIndication+0x2ac>)
 800f906:	f00d fb89 	bl	801d01c <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800f90a:	4b15      	ldr	r3, [pc, #84]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f90c:	2200      	movs	r2, #0
 800f90e:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800f910:	4b13      	ldr	r3, [pc, #76]	; (800f960 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f912:	2200      	movs	r2, #0
 800f914:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800f916:	2304      	movs	r3, #4
 800f918:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800f91a:	4b12      	ldr	r3, [pc, #72]	; (800f964 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800f922:	f107 030c 	add.w	r3, r7, #12
 800f926:	4618      	mov	r0, r3
 800f928:	f003 ffe0 	bl	80138ec <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800f92c:	4b0d      	ldr	r3, [pc, #52]	; (800f964 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	785b      	ldrb	r3, [r3, #1]
 800f932:	4618      	mov	r0, r3
 800f934:	f004 fdb6 	bl	80144a4 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800f938:	4b0a      	ldr	r3, [pc, #40]	; (800f964 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	689b      	ldr	r3, [r3, #8]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d003      	beq.n	800f94a <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800f942:	4b08      	ldr	r3, [pc, #32]	; (800f964 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	689b      	ldr	r3, [r3, #8]
 800f948:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 800f94a:	4b09      	ldr	r3, [pc, #36]	; (800f970 <LmhpComplianceOnMcpsIndication+0x2b0>)
 800f94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f94e:	2b00      	cmp	r3, #0
 800f950:	f000 8092 	beq.w	800fa78 <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800f954:	4b06      	ldr	r3, [pc, #24]	; (800f970 <LmhpComplianceOnMcpsIndication+0x2b0>)
 800f956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f958:	2101      	movs	r1, #1
 800f95a:	2002      	movs	r0, #2
 800f95c:	4798      	blx	r3
                    }
                }
                break;
 800f95e:	e08b      	b.n	800fa78 <LmhpComplianceOnMcpsIndication+0x3b8>
 800f960:	2000093c 	.word	0x2000093c
 800f964:	20000950 	.word	0x20000950
 800f968:	0800fa91 	.word	0x0800fa91
 800f96c:	20000924 	.word	0x20000924
 800f970:	200000ec 	.word	0x200000ec
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	7b1b      	ldrb	r3, [r3, #12]
 800f978:	2b03      	cmp	r3, #3
 800f97a:	d113      	bne.n	800f9a4 <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 800f97c:	2306      	movs	r3, #6
 800f97e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	689b      	ldr	r3, [r3, #8]
 800f986:	3301      	adds	r3, #1
 800f988:	781b      	ldrb	r3, [r3, #0]
 800f98a:	021b      	lsls	r3, r3, #8
 800f98c:	b21a      	sxth	r2, r3
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	689b      	ldr	r3, [r3, #8]
 800f992:	3302      	adds	r3, #2
 800f994:	781b      	ldrb	r3, [r3, #0]
 800f996:	b21b      	sxth	r3, r3
 800f998:	4313      	orrs	r3, r2
 800f99a:	b21b      	sxth	r3, r3
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800f9a2:	e032      	b.n	800fa0a <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	7b1b      	ldrb	r3, [r3, #12]
 800f9a8:	2b07      	cmp	r3, #7
 800f9aa:	d12e      	bne.n	800fa0a <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 800f9ac:	2307      	movs	r3, #7
 800f9ae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	689b      	ldr	r3, [r3, #8]
 800f9b6:	3301      	adds	r3, #1
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	021b      	lsls	r3, r3, #8
 800f9bc:	b21a      	sxth	r2, r3
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	689b      	ldr	r3, [r3, #8]
 800f9c2:	3302      	adds	r3, #2
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	b21b      	sxth	r3, r3
 800f9c8:	4313      	orrs	r3, r2
 800f9ca:	b21b      	sxth	r3, r3
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	689b      	ldr	r3, [r3, #8]
 800f9d6:	3303      	adds	r3, #3
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	041a      	lsls	r2, r3, #16
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	689b      	ldr	r3, [r3, #8]
 800f9e0:	3304      	adds	r3, #4
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	021b      	lsls	r3, r3, #8
 800f9e6:	4313      	orrs	r3, r2
 800f9e8:	687a      	ldr	r2, [r7, #4]
 800f9ea:	6892      	ldr	r2, [r2, #8]
 800f9ec:	3205      	adds	r2, #5
 800f9ee:	7812      	ldrb	r2, [r2, #0]
 800f9f0:	4313      	orrs	r3, r2
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	2364      	movs	r3, #100	; 0x64
 800f9f6:	fb02 f303 	mul.w	r3, r2, r3
 800f9fa:	667b      	str	r3, [r7, #100]	; 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	689b      	ldr	r3, [r3, #8]
 800fa00:	3306      	adds	r3, #6
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	b25b      	sxtb	r3, r3
 800fa06:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 800fa0a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f004 fb00 	bl	8014014 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 800fa14:	4b1a      	ldr	r3, [pc, #104]	; (800fa80 <LmhpComplianceOnMcpsIndication+0x3c0>)
 800fa16:	2201      	movs	r2, #1
 800fa18:	709a      	strb	r2, [r3, #2]
                }
                break;
 800fa1a:	e02e      	b.n	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 800fa1c:	230a      	movs	r3, #10
 800fa1e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800fa22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fa26:	4618      	mov	r0, r3
 800fa28:	f004 faf4 	bl	8014014 <LoRaMacMlmeRequest>
                }
                break;
 800fa2c:	e025      	b.n	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	689b      	ldr	r3, [r3, #8]
 800fa36:	3301      	adds	r3, #1
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800fa3c:	f107 030c 	add.w	r3, r7, #12
 800fa40:	4618      	mov	r0, r3
 800fa42:	f003 ff53 	bl	80138ec <LoRaMacMibSetRequestConfirm>
                }
                break;
 800fa46:	e018      	b.n	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800fa48:	230d      	movs	r3, #13
 800fa4a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	689b      	ldr	r3, [r3, #8]
 800fa52:	785b      	ldrb	r3, [r3, #1]
 800fa54:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 800fa58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f004 fad9 	bl	8014014 <LoRaMacMlmeRequest>
                }
                break;
 800fa62:	e00a      	b.n	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800fa64:	bf00      	nop
 800fa66:	e008      	b.n	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800fa68:	bf00      	nop
 800fa6a:	e006      	b.n	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800fa6c:	bf00      	nop
 800fa6e:	e004      	b.n	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 800fa70:	bf00      	nop
 800fa72:	e002      	b.n	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 800fa74:	bf00      	nop
 800fa76:	e000      	b.n	800fa7a <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 800fa78:	bf00      	nop
        }
    }
}
 800fa7a:	3788      	adds	r7, #136	; 0x88
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}
 800fa80:	2000093c 	.word	0x2000093c

0800fa84 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800fa84:	b480      	push	{r7}
 800fa86:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800fa88:	bf00      	nop
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bc80      	pop	{r7}
 800fa8e:	4770      	bx	lr

0800fa90 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b082      	sub	sp, #8
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800fa98:	f7ff fd9c 	bl	800f5d4 <LmhpComplianceTxProcess>
}
 800fa9c:	bf00      	nop
 800fa9e:	3708      	adds	r7, #8
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}

0800faa4 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800faa4:	b480      	push	{r7}
 800faa6:	b083      	sub	sp, #12
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800faac:	2300      	movs	r3, #0
}
 800faae:	4618      	mov	r0, r3
 800fab0:	370c      	adds	r7, #12
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bc80      	pop	{r7}
 800fab6:	4770      	bx	lr

0800fab8 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800fab8:	b480      	push	{r7}
 800faba:	b083      	sub	sp, #12
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	4603      	mov	r3, r0
 800fac0:	6039      	str	r1, [r7, #0]
 800fac2:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800fac4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800fac8:	4618      	mov	r0, r3
 800faca:	370c      	adds	r7, #12
 800facc:	46bd      	mov	sp, r7
 800face:	bc80      	pop	{r7}
 800fad0:	4770      	bx	lr
	...

0800fad4 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800fad4:	b590      	push	{r4, r7, lr}
 800fad6:	b083      	sub	sp, #12
 800fad8:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800fada:	f00d fbb9 	bl	801d250 <UTIL_TIMER_GetCurrentTime>
 800fade:	4603      	mov	r3, r0
 800fae0:	4a0f      	ldr	r2, [pc, #60]	; (800fb20 <OnRadioTxDone+0x4c>)
 800fae2:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800fae4:	4c0f      	ldr	r4, [pc, #60]	; (800fb24 <OnRadioTxDone+0x50>)
 800fae6:	463b      	mov	r3, r7
 800fae8:	4618      	mov	r0, r3
 800faea:	f00c fd2f 	bl	801c54c <SysTimeGet>
 800faee:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800faf2:	463a      	mov	r2, r7
 800faf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800faf8:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800fafc:	4a0a      	ldr	r2, [pc, #40]	; (800fb28 <OnRadioTxDone+0x54>)
 800fafe:	7813      	ldrb	r3, [r2, #0]
 800fb00:	f043 0310 	orr.w	r3, r3, #16
 800fb04:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800fb06:	f003 f8e1 	bl	8012ccc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800fb0a:	4b08      	ldr	r3, [pc, #32]	; (800fb2c <OnRadioTxDone+0x58>)
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	2100      	movs	r1, #0
 800fb10:	2002      	movs	r0, #2
 800fb12:	f00d fc8d 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
}
 800fb16:	bf00      	nop
 800fb18:	370c      	adds	r7, #12
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd90      	pop	{r4, r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	200015c8 	.word	0x200015c8
 800fb24:	20000954 	.word	0x20000954
 800fb28:	200015c4 	.word	0x200015c4
 800fb2c:	0801e1e0 	.word	0x0801e1e0

0800fb30 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	60f8      	str	r0, [r7, #12]
 800fb38:	4608      	mov	r0, r1
 800fb3a:	4611      	mov	r1, r2
 800fb3c:	461a      	mov	r2, r3
 800fb3e:	4603      	mov	r3, r0
 800fb40:	817b      	strh	r3, [r7, #10]
 800fb42:	460b      	mov	r3, r1
 800fb44:	813b      	strh	r3, [r7, #8]
 800fb46:	4613      	mov	r3, r2
 800fb48:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800fb4a:	f00d fb81 	bl	801d250 <UTIL_TIMER_GetCurrentTime>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	4a0f      	ldr	r2, [pc, #60]	; (800fb90 <OnRadioRxDone+0x60>)
 800fb52:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800fb54:	4a0e      	ldr	r2, [pc, #56]	; (800fb90 <OnRadioRxDone+0x60>)
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800fb5a:	4a0d      	ldr	r2, [pc, #52]	; (800fb90 <OnRadioRxDone+0x60>)
 800fb5c:	897b      	ldrh	r3, [r7, #10]
 800fb5e:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800fb60:	4a0b      	ldr	r2, [pc, #44]	; (800fb90 <OnRadioRxDone+0x60>)
 800fb62:	893b      	ldrh	r3, [r7, #8]
 800fb64:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800fb66:	4a0a      	ldr	r2, [pc, #40]	; (800fb90 <OnRadioRxDone+0x60>)
 800fb68:	79fb      	ldrb	r3, [r7, #7]
 800fb6a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800fb6c:	4a09      	ldr	r2, [pc, #36]	; (800fb94 <OnRadioRxDone+0x64>)
 800fb6e:	7813      	ldrb	r3, [r2, #0]
 800fb70:	f043 0308 	orr.w	r3, r3, #8
 800fb74:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800fb76:	f003 f8a9 	bl	8012ccc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800fb7a:	4b07      	ldr	r3, [pc, #28]	; (800fb98 <OnRadioRxDone+0x68>)
 800fb7c:	2201      	movs	r2, #1
 800fb7e:	2100      	movs	r1, #0
 800fb80:	2002      	movs	r0, #2
 800fb82:	f00d fc55 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
}
 800fb86:	bf00      	nop
 800fb88:	3710      	adds	r7, #16
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	200015cc 	.word	0x200015cc
 800fb94:	200015c4 	.word	0x200015c4
 800fb98:	0801e1f0 	.word	0x0801e1f0

0800fb9c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800fba0:	4a07      	ldr	r2, [pc, #28]	; (800fbc0 <OnRadioTxTimeout+0x24>)
 800fba2:	7813      	ldrb	r3, [r2, #0]
 800fba4:	f043 0304 	orr.w	r3, r3, #4
 800fba8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800fbaa:	f003 f88f 	bl	8012ccc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800fbae:	4b05      	ldr	r3, [pc, #20]	; (800fbc4 <OnRadioTxTimeout+0x28>)
 800fbb0:	2201      	movs	r2, #1
 800fbb2:	2100      	movs	r1, #0
 800fbb4:	2002      	movs	r0, #2
 800fbb6:	f00d fc3b 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
}
 800fbba:	bf00      	nop
 800fbbc:	bd80      	pop	{r7, pc}
 800fbbe:	bf00      	nop
 800fbc0:	200015c4 	.word	0x200015c4
 800fbc4:	0801e200 	.word	0x0801e200

0800fbc8 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800fbcc:	4a04      	ldr	r2, [pc, #16]	; (800fbe0 <OnRadioRxError+0x18>)
 800fbce:	7813      	ldrb	r3, [r2, #0]
 800fbd0:	f043 0302 	orr.w	r3, r3, #2
 800fbd4:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800fbd6:	f003 f879 	bl	8012ccc <OnMacProcessNotify>
}
 800fbda:	bf00      	nop
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	200015c4 	.word	0x200015c4

0800fbe4 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800fbe8:	4a07      	ldr	r2, [pc, #28]	; (800fc08 <OnRadioRxTimeout+0x24>)
 800fbea:	7813      	ldrb	r3, [r2, #0]
 800fbec:	f043 0301 	orr.w	r3, r3, #1
 800fbf0:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800fbf2:	f003 f86b 	bl	8012ccc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800fbf6:	4b05      	ldr	r3, [pc, #20]	; (800fc0c <OnRadioRxTimeout+0x28>)
 800fbf8:	2201      	movs	r2, #1
 800fbfa:	2100      	movs	r1, #0
 800fbfc:	2002      	movs	r0, #2
 800fbfe:	f00d fc17 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
}
 800fc02:	bf00      	nop
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	200015c4 	.word	0x200015c4
 800fc0c:	0801e210 	.word	0x0801e210

0800fc10 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800fc10:	b480      	push	{r7}
 800fc12:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fc14:	4b08      	ldr	r3, [pc, #32]	; (800fc38 <UpdateRxSlotIdleState+0x28>)
 800fc16:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800fc1a:	2b02      	cmp	r3, #2
 800fc1c:	d004      	beq.n	800fc28 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800fc1e:	4b07      	ldr	r3, [pc, #28]	; (800fc3c <UpdateRxSlotIdleState+0x2c>)
 800fc20:	2206      	movs	r2, #6
 800fc22:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800fc26:	e003      	b.n	800fc30 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fc28:	4b04      	ldr	r3, [pc, #16]	; (800fc3c <UpdateRxSlotIdleState+0x2c>)
 800fc2a:	2202      	movs	r2, #2
 800fc2c:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800fc30:	bf00      	nop
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bc80      	pop	{r7}
 800fc36:	4770      	bx	lr
 800fc38:	20000e5c 	.word	0x20000e5c
 800fc3c:	20000954 	.word	0x20000954

0800fc40 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b092      	sub	sp, #72	; 0x48
 800fc44:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fc46:	4b50      	ldr	r3, [pc, #320]	; (800fd88 <ProcessRadioTxDone+0x148>)
 800fc48:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800fc4c:	2b02      	cmp	r3, #2
 800fc4e:	d002      	beq.n	800fc56 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800fc50:	4b4e      	ldr	r3, [pc, #312]	; (800fd8c <ProcessRadioTxDone+0x14c>)
 800fc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc54:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc56:	f3ef 8310 	mrs	r3, PRIMASK
 800fc5a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800fc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800fc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800fc60:	b672      	cpsid	i
}
 800fc62:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800fc64:	f00d faf4 	bl	801d250 <UTIL_TIMER_GetCurrentTime>
 800fc68:	4602      	mov	r2, r0
 800fc6a:	4b49      	ldr	r3, [pc, #292]	; (800fd90 <ProcessRadioTxDone+0x150>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	1ad3      	subs	r3, r2, r3
 800fc70:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800fc72:	4b48      	ldr	r3, [pc, #288]	; (800fd94 <ProcessRadioTxDone+0x154>)
 800fc74:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 800fc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc7a:	1ad3      	subs	r3, r2, r3
 800fc7c:	4619      	mov	r1, r3
 800fc7e:	4846      	ldr	r0, [pc, #280]	; (800fd98 <ProcessRadioTxDone+0x158>)
 800fc80:	f00d fa3c 	bl	801d0fc <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800fc84:	4844      	ldr	r0, [pc, #272]	; (800fd98 <ProcessRadioTxDone+0x158>)
 800fc86:	f00d f95b 	bl	801cf40 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800fc8a:	4b42      	ldr	r3, [pc, #264]	; (800fd94 <ProcessRadioTxDone+0x154>)
 800fc8c:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800fc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc92:	1ad3      	subs	r3, r2, r3
 800fc94:	4619      	mov	r1, r3
 800fc96:	4841      	ldr	r0, [pc, #260]	; (800fd9c <ProcessRadioTxDone+0x15c>)
 800fc98:	f00d fa30 	bl	801d0fc <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800fc9c:	483f      	ldr	r0, [pc, #252]	; (800fd9c <ProcessRadioTxDone+0x15c>)
 800fc9e:	f00d f94f 	bl	801cf40 <UTIL_TIMER_Start>
 800fca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fca4:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fca8:	f383 8810 	msr	PRIMASK, r3
}
 800fcac:	bf00      	nop
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800fcae:	4b36      	ldr	r3, [pc, #216]	; (800fd88 <ProcessRadioTxDone+0x148>)
 800fcb0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800fcb4:	2b02      	cmp	r3, #2
 800fcb6:	d004      	beq.n	800fcc2 <ProcessRadioTxDone+0x82>
 800fcb8:	4b36      	ldr	r3, [pc, #216]	; (800fd94 <ProcessRadioTxDone+0x154>)
 800fcba:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d019      	beq.n	800fcf6 <ProcessRadioTxDone+0xb6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800fcc2:	2316      	movs	r3, #22
 800fcc4:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fcc8:	4b2f      	ldr	r3, [pc, #188]	; (800fd88 <ProcessRadioTxDone+0x148>)
 800fcca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fcce:	f107 0220 	add.w	r2, r7, #32
 800fcd2:	4611      	mov	r1, r2
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f006 fcec 	bl	80166b2 <RegionGetPhyParam>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800fcde:	4b2d      	ldr	r3, [pc, #180]	; (800fd94 <ProcessRadioTxDone+0x154>)
 800fce0:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	4413      	add	r3, r2
 800fce8:	4619      	mov	r1, r3
 800fcea:	482d      	ldr	r0, [pc, #180]	; (800fda0 <ProcessRadioTxDone+0x160>)
 800fcec:	f00d fa06 	bl	801d0fc <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800fcf0:	482b      	ldr	r0, [pc, #172]	; (800fda0 <ProcessRadioTxDone+0x160>)
 800fcf2:	f00d f925 	bl	801cf40 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800fcf6:	4b26      	ldr	r3, [pc, #152]	; (800fd90 <ProcessRadioTxDone+0x150>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	4a23      	ldr	r2, [pc, #140]	; (800fd88 <ProcessRadioTxDone+0x148>)
 800fcfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800fcfe:	4b25      	ldr	r3, [pc, #148]	; (800fd94 <ProcessRadioTxDone+0x154>)
 800fd00:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 800fd04:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800fd06:	4b22      	ldr	r3, [pc, #136]	; (800fd90 <ProcessRadioTxDone+0x150>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800fd0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd10:	4618      	mov	r0, r3
 800fd12:	f00c fc53 	bl	801c5bc <SysTimeGetMcuTime>
 800fd16:	4638      	mov	r0, r7
 800fd18:	4b1b      	ldr	r3, [pc, #108]	; (800fd88 <ProcessRadioTxDone+0x148>)
 800fd1a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 800fd1e:	9200      	str	r2, [sp, #0]
 800fd20:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800fd24:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fd28:	ca06      	ldmia	r2, {r1, r2}
 800fd2a:	f00c fba8 	bl	801c47e <SysTimeSub>
 800fd2e:	f107 0314 	add.w	r3, r7, #20
 800fd32:	463a      	mov	r2, r7
 800fd34:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd38:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800fd3c:	4b15      	ldr	r3, [pc, #84]	; (800fd94 <ProcessRadioTxDone+0x154>)
 800fd3e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800fd42:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800fd44:	2301      	movs	r3, #1
 800fd46:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fd48:	4b0f      	ldr	r3, [pc, #60]	; (800fd88 <ProcessRadioTxDone+0x148>)
 800fd4a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d101      	bne.n	800fd56 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800fd52:	2300      	movs	r3, #0
 800fd54:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800fd56:	4b0c      	ldr	r3, [pc, #48]	; (800fd88 <ProcessRadioTxDone+0x148>)
 800fd58:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fd5c:	f107 0208 	add.w	r2, r7, #8
 800fd60:	4611      	mov	r1, r2
 800fd62:	4618      	mov	r0, r3
 800fd64:	f006 fcbd 	bl	80166e2 <RegionSetBandTxDone>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800fd68:	4b0a      	ldr	r3, [pc, #40]	; (800fd94 <ProcessRadioTxDone+0x154>)
 800fd6a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800fd6e:	f083 0301 	eor.w	r3, r3, #1
 800fd72:	b2db      	uxtb	r3, r3
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d003      	beq.n	800fd80 <ProcessRadioTxDone+0x140>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fd78:	4b06      	ldr	r3, [pc, #24]	; (800fd94 <ProcessRadioTxDone+0x154>)
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    }
#endif /* LORAMAC_VERSION */
}
 800fd80:	bf00      	nop
 800fd82:	3740      	adds	r7, #64	; 0x40
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}
 800fd88:	20000e5c 	.word	0x20000e5c
 800fd8c:	0801e8c0 	.word	0x0801e8c0
 800fd90:	200015c8 	.word	0x200015c8
 800fd94:	20000954 	.word	0x20000954
 800fd98:	20000cd4 	.word	0x20000cd4
 800fd9c:	20000cec 	.word	0x20000cec
 800fda0:	20000d48 	.word	0x20000d48

0800fda4 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800fda8:	4b10      	ldr	r3, [pc, #64]	; (800fdec <PrepareRxDoneAbort+0x48>)
 800fdaa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fdae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdb2:	4a0e      	ldr	r2, [pc, #56]	; (800fdec <PrepareRxDoneAbort+0x48>)
 800fdb4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800fdb8:	4b0c      	ldr	r3, [pc, #48]	; (800fdec <PrepareRxDoneAbort+0x48>)
 800fdba:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d002      	beq.n	800fdc8 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800fdc2:	2000      	movs	r0, #0
 800fdc4:	f001 f950 	bl	8011068 <OnAckTimeoutTimerEvent>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800fdc8:	4a08      	ldr	r2, [pc, #32]	; (800fdec <PrepareRxDoneAbort+0x48>)
 800fdca:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800fdce:	f043 0302 	orr.w	r3, r3, #2
 800fdd2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fdd6:	4a05      	ldr	r2, [pc, #20]	; (800fdec <PrepareRxDoneAbort+0x48>)
 800fdd8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800fddc:	f043 0310 	orr.w	r3, r3, #16
 800fde0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800fde4:	f7ff ff14 	bl	800fc10 <UpdateRxSlotIdleState>
}
 800fde8:	bf00      	nop
 800fdea:	bd80      	pop	{r7, pc}
 800fdec:	20000954 	.word	0x20000954

0800fdf0 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800fdf0:	b5b0      	push	{r4, r5, r7, lr}
 800fdf2:	b0aa      	sub	sp, #168	; 0xa8
 800fdf4:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800fdf6:	2313      	movs	r3, #19
 800fdf8:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800fdfc:	4b78      	ldr	r3, [pc, #480]	; (800ffe0 <ProcessRadioRxDone+0x1f0>)
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint16_t size = RxDoneParams.Size;
 800fe04:	4b76      	ldr	r3, [pc, #472]	; (800ffe0 <ProcessRadioRxDone+0x1f0>)
 800fe06:	891b      	ldrh	r3, [r3, #8]
 800fe08:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 800fe0c:	4b74      	ldr	r3, [pc, #464]	; (800ffe0 <ProcessRadioRxDone+0x1f0>)
 800fe0e:	895b      	ldrh	r3, [r3, #10]
 800fe10:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    int8_t snr = RxDoneParams.Snr;
 800fe14:	4b72      	ldr	r3, [pc, #456]	; (800ffe0 <ProcessRadioRxDone+0x1f0>)
 800fe16:	7b1b      	ldrb	r3, [r3, #12]
 800fe18:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

    uint8_t pktHeaderLen = 0;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    uint32_t downLinkCounter = 0;
 800fe22:	2300      	movs	r3, #0
 800fe24:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800fe26:	4b6f      	ldr	r3, [pc, #444]	; (800ffe4 <ProcessRadioRxDone+0x1f4>)
 800fe28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fe2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint8_t multicast = 0;
 800fe30:	2300      	movs	r3, #0
 800fe32:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800fe36:	2301      	movs	r3, #1
 800fe38:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800fe42:	4b69      	ldr	r3, [pc, #420]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800fe44:	2200      	movs	r2, #0
 800fe46:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    MacCtx.RxStatus.Rssi = rssi;
 800fe4a:	4a67      	ldr	r2, [pc, #412]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800fe4c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800fe50:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800fe54:	4a64      	ldr	r2, [pc, #400]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800fe56:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800fe5a:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800fe5e:	4b62      	ldr	r3, [pc, #392]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800fe60:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800fe64:	4b60      	ldr	r3, [pc, #384]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800fe66:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800fe6a:	4b5f      	ldr	r3, [pc, #380]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 800fe72:	4b5d      	ldr	r3, [pc, #372]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800fe74:	2200      	movs	r2, #0
 800fe76:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800fe7a:	4b5b      	ldr	r3, [pc, #364]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 800fe82:	4b59      	ldr	r3, [pc, #356]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800fe84:	2200      	movs	r2, #0
 800fe86:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 800fe8a:	4b57      	ldr	r3, [pc, #348]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.RxData = false;
 800fe92:	4b55      	ldr	r3, [pc, #340]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800fe94:	2200      	movs	r2, #0
 800fe96:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.AckReceived = false;
 800fe9a:	4b53      	ldr	r3, [pc, #332]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800fea2:	4b51      	ldr	r3, [pc, #324]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800fea4:	2200      	movs	r2, #0
 800fea6:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800feaa:	4b4f      	ldr	r3, [pc, #316]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800feac:	2200      	movs	r2, #0
 800feae:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 800feb2:	4b4d      	ldr	r3, [pc, #308]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800feb4:	2200      	movs	r2, #0
 800feb6:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800feba:	4b4b      	ldr	r3, [pc, #300]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800febc:	2200      	movs	r2, #0
 800febe:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800fec2:	4b4a      	ldr	r3, [pc, #296]	; (800ffec <ProcessRadioRxDone+0x1fc>)
 800fec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fec6:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800fec8:	4849      	ldr	r0, [pc, #292]	; (800fff0 <ProcessRadioRxDone+0x200>)
 800feca:	f00d f8a7 	bl	801d01c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800fece:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800fed2:	4619      	mov	r1, r3
 800fed4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800fed8:	f004 fc4b 	bl	8014772 <LoRaMacClassBRxBeacon>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d00b      	beq.n	800fefa <ProcessRadioRxDone+0x10a>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800fee2:	4a41      	ldr	r2, [pc, #260]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800fee4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800fee8:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800feec:	4a3e      	ldr	r2, [pc, #248]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800feee:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800fef2:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800fef6:	f000 bc1f 	b.w	8010738 <ProcessRadioRxDone+0x948>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fefa:	4b3a      	ldr	r3, [pc, #232]	; (800ffe4 <ProcessRadioRxDone+0x1f4>)
 800fefc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ff00:	2b01      	cmp	r3, #1
 800ff02:	d11e      	bne.n	800ff42 <ProcessRadioRxDone+0x152>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ff04:	f004 fc48 	bl	8014798 <LoRaMacClassBIsPingExpected>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d00a      	beq.n	800ff24 <ProcessRadioRxDone+0x134>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ff0e:	2000      	movs	r0, #0
 800ff10:	f004 fbf9 	bl	8014706 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ff14:	2000      	movs	r0, #0
 800ff16:	f004 fc1a 	bl	801474e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800ff1a:	4b33      	ldr	r3, [pc, #204]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800ff1c:	2204      	movs	r2, #4
 800ff1e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800ff22:	e00e      	b.n	800ff42 <ProcessRadioRxDone+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ff24:	f004 fc3f 	bl	80147a6 <LoRaMacClassBIsMulticastExpected>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d009      	beq.n	800ff42 <ProcessRadioRxDone+0x152>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ff2e:	2000      	movs	r0, #0
 800ff30:	f004 fbf3 	bl	801471a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ff34:	2000      	movs	r0, #0
 800ff36:	f004 fc13 	bl	8014760 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ff3a:	4b2b      	ldr	r3, [pc, #172]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800ff3c:	2205      	movs	r2, #5
 800ff3e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800ff42:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d106      	bne.n	800ff58 <ProcessRadioRxDone+0x168>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ff4a:	4b27      	ldr	r3, [pc, #156]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800ff4c:	2201      	movs	r2, #1
 800ff4e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
        PrepareRxDoneAbort( );
 800ff52:	f7ff ff27 	bl	800fda4 <PrepareRxDoneAbort>
        return;
 800ff56:	e3ef      	b.n	8010738 <ProcessRadioRxDone+0x948>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800ff58:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800ff5c:	1c5a      	adds	r2, r3, #1
 800ff5e:	f887 2086 	strb.w	r2, [r7, #134]	; 0x86
 800ff62:	461a      	mov	r2, r3
 800ff64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff68:	4413      	add	r3, r2
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800ff70:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800ff74:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800ff78:	b2db      	uxtb	r3, r3
 800ff7a:	3b01      	subs	r3, #1
 800ff7c:	2b06      	cmp	r3, #6
 800ff7e:	f200 83b4 	bhi.w	80106ea <ProcessRadioRxDone+0x8fa>
 800ff82:	a201      	add	r2, pc, #4	; (adr r2, 800ff88 <ProcessRadioRxDone+0x198>)
 800ff84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff88:	0800ffa5 	.word	0x0800ffa5
 800ff8c:	080106eb 	.word	0x080106eb
 800ff90:	08010185 	.word	0x08010185
 800ff94:	080106eb 	.word	0x080106eb
 800ff98:	0801017d 	.word	0x0801017d
 800ff9c:	080106eb 	.word	0x080106eb
 800ffa0:	0801068f 	.word	0x0801068f
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800ffa4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ffa8:	2b10      	cmp	r3, #16
 800ffaa:	d806      	bhi.n	800ffba <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ffac:	4b0e      	ldr	r3, [pc, #56]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800ffae:	2201      	movs	r2, #1
 800ffb0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800ffb4:	f7ff fef6 	bl	800fda4 <PrepareRxDoneAbort>
                return;
 800ffb8:	e3be      	b.n	8010738 <ProcessRadioRxDone+0x948>
            }
            macMsgJoinAccept.Buffer = payload;
 800ffba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ffbe:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 800ffc0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ffc4:	b2db      	uxtb	r3, r3
 800ffc6:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ffc8:	4b06      	ldr	r3, [pc, #24]	; (800ffe4 <ProcessRadioRxDone+0x1f4>)
 800ffca:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d010      	beq.n	800fff4 <ProcessRadioRxDone+0x204>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ffd2:	4b05      	ldr	r3, [pc, #20]	; (800ffe8 <ProcessRadioRxDone+0x1f8>)
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800ffda:	f7ff fee3 	bl	800fda4 <PrepareRxDoneAbort>
                return;
 800ffde:	e3ab      	b.n	8010738 <ProcessRadioRxDone+0x948>
 800ffe0:	200015cc 	.word	0x200015cc
 800ffe4:	20000e5c 	.word	0x20000e5c
 800ffe8:	20000954 	.word	0x20000954
 800ffec:	0801e8c0 	.word	0x0801e8c0
 800fff0:	20000cec 	.word	0x20000cec
            }

            SecureElementGetJoinEui( joinEui );
 800fff4:	1d3b      	adds	r3, r7, #4
 800fff6:	4618      	mov	r0, r3
 800fff8:	f7fe fa92 	bl	800e520 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800fffc:	f107 0214 	add.w	r2, r7, #20
 8010000:	1d3b      	adds	r3, r7, #4
 8010002:	4619      	mov	r1, r3
 8010004:	20ff      	movs	r0, #255	; 0xff
 8010006:	f005 fdd5 	bl	8015bb4 <LoRaMacCryptoHandleJoinAccept>
 801000a:	4603      	mov	r3, r0
 801000c:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 8010010:	2300      	movs	r3, #0
 8010012:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010016:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801001a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801001e:	b2db      	uxtb	r3, r3
 8010020:	b25b      	sxtb	r3, r3
 8010022:	703b      	strb	r3, [r7, #0]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010024:	4bbb      	ldr	r3, [pc, #748]	; (8010314 <ProcessRadioRxDone+0x524>)
 8010026:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801002a:	707b      	strb	r3, [r7, #1]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 801002c:	4bb9      	ldr	r3, [pc, #740]	; (8010314 <ProcessRadioRxDone+0x524>)
 801002e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010032:	4639      	mov	r1, r7
 8010034:	2207      	movs	r2, #7
 8010036:	4618      	mov	r0, r3
 8010038:	f006 fb76 	bl	8016728 <RegionVerify>
 801003c:	4603      	mov	r3, r0
 801003e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 8010042:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8010046:	2b00      	cmp	r3, #0
 8010048:	f040 808c 	bne.w	8010164 <ProcessRadioRxDone+0x374>
 801004c:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8010050:	2b00      	cmp	r3, #0
 8010052:	f000 8087 	beq.w	8010164 <ProcessRadioRxDone+0x374>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8010056:	7f7b      	ldrb	r3, [r7, #29]
 8010058:	461a      	mov	r2, r3
 801005a:	4bae      	ldr	r3, [pc, #696]	; (8010314 <ProcessRadioRxDone+0x524>)
 801005c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8010060:	4bac      	ldr	r3, [pc, #688]	; (8010314 <ProcessRadioRxDone+0x524>)
 8010062:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010066:	7fbb      	ldrb	r3, [r7, #30]
 8010068:	021b      	lsls	r3, r3, #8
 801006a:	4313      	orrs	r3, r2
 801006c:	4aa9      	ldr	r2, [pc, #676]	; (8010314 <ProcessRadioRxDone+0x524>)
 801006e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8010072:	4ba8      	ldr	r3, [pc, #672]	; (8010314 <ProcessRadioRxDone+0x524>)
 8010074:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010078:	7ffb      	ldrb	r3, [r7, #31]
 801007a:	041b      	lsls	r3, r3, #16
 801007c:	4313      	orrs	r3, r2
 801007e:	4aa5      	ldr	r2, [pc, #660]	; (8010314 <ProcessRadioRxDone+0x524>)
 8010080:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8010084:	6a3b      	ldr	r3, [r7, #32]
 8010086:	4aa3      	ldr	r2, [pc, #652]	; (8010314 <ProcessRadioRxDone+0x524>)
 8010088:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 801008c:	4ba1      	ldr	r3, [pc, #644]	; (8010314 <ProcessRadioRxDone+0x524>)
 801008e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010092:	4619      	mov	r1, r3
 8010094:	2002      	movs	r0, #2
 8010096:	f7fe fa5b 	bl	800e550 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 801009a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801009e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80100a2:	b2db      	uxtb	r3, r3
 80100a4:	461a      	mov	r2, r3
 80100a6:	4b9b      	ldr	r3, [pc, #620]	; (8010314 <ProcessRadioRxDone+0x524>)
 80100a8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80100ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80100b0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80100b4:	b2db      	uxtb	r3, r3
 80100b6:	461a      	mov	r2, r3
 80100b8:	4b96      	ldr	r3, [pc, #600]	; (8010314 <ProcessRadioRxDone+0x524>)
 80100ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80100be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80100c2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80100c6:	b2db      	uxtb	r3, r3
 80100c8:	461a      	mov	r2, r3
 80100ca:	4b92      	ldr	r3, [pc, #584]	; (8010314 <ProcessRadioRxDone+0x524>)
 80100cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 80100d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80100d4:	461a      	mov	r2, r3
 80100d6:	4b8f      	ldr	r3, [pc, #572]	; (8010314 <ProcessRadioRxDone+0x524>)
 80100d8:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 80100da:	4b8e      	ldr	r3, [pc, #568]	; (8010314 <ProcessRadioRxDone+0x524>)
 80100dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d102      	bne.n	80100e8 <ProcessRadioRxDone+0x2f8>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 80100e2:	4b8c      	ldr	r3, [pc, #560]	; (8010314 <ProcessRadioRxDone+0x524>)
 80100e4:	2201      	movs	r2, #1
 80100e6:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 80100e8:	4b8a      	ldr	r3, [pc, #552]	; (8010314 <ProcessRadioRxDone+0x524>)
 80100ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80100f0:	fb02 f303 	mul.w	r3, r2, r3
 80100f4:	4a87      	ldr	r2, [pc, #540]	; (8010314 <ProcessRadioRxDone+0x524>)
 80100f6:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80100f8:	4b86      	ldr	r3, [pc, #536]	; (8010314 <ProcessRadioRxDone+0x524>)
 80100fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100fc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8010100:	4a84      	ldr	r2, [pc, #528]	; (8010314 <ProcessRadioRxDone+0x524>)
 8010102:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8010104:	4b83      	ldr	r3, [pc, #524]	; (8010314 <ProcessRadioRxDone+0x524>)
 8010106:	2201      	movs	r2, #1
 8010108:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 801010c:	4b81      	ldr	r3, [pc, #516]	; (8010314 <ProcessRadioRxDone+0x524>)
 801010e:	2200      	movs	r2, #0
 8010110:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8010114:	f107 0314 	add.w	r3, r7, #20
 8010118:	3312      	adds	r3, #18
 801011a:	67bb      	str	r3, [r7, #120]	; 0x78
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 801011c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010120:	b2db      	uxtb	r3, r3
 8010122:	3b11      	subs	r3, #17
 8010124:	b2db      	uxtb	r3, r3
 8010126:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 801012a:	4b7a      	ldr	r3, [pc, #488]	; (8010314 <ProcessRadioRxDone+0x524>)
 801012c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010130:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8010134:	4611      	mov	r1, r2
 8010136:	4618      	mov	r0, r3
 8010138:	f006 fb0d 	bl	8016756 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 801013c:	4b75      	ldr	r3, [pc, #468]	; (8010314 <ProcessRadioRxDone+0x524>)
 801013e:	2202      	movs	r2, #2
 8010140:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8010144:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8010148:	4618      	mov	r0, r3
 801014a:	f005 f80d 	bl	8015168 <LoRaMacConfirmQueueIsCmdActive>
 801014e:	4603      	mov	r3, r0
 8010150:	2b00      	cmp	r3, #0
 8010152:	f000 82d2 	beq.w	80106fa <ProcessRadioRxDone+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 8010156:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 801015a:	4619      	mov	r1, r3
 801015c:	2000      	movs	r0, #0
 801015e:	f004 ff77 	bl	8015050 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8010162:	e2ca      	b.n	80106fa <ProcessRadioRxDone+0x90a>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010164:	2001      	movs	r0, #1
 8010166:	f004 ffff 	bl	8015168 <LoRaMacConfirmQueueIsCmdActive>
 801016a:	4603      	mov	r3, r0
 801016c:	2b00      	cmp	r3, #0
 801016e:	f000 82c3 	beq.w	80106f8 <ProcessRadioRxDone+0x908>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8010172:	2101      	movs	r1, #1
 8010174:	2007      	movs	r0, #7
 8010176:	f004 ff6b 	bl	8015050 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 801017a:	e2bd      	b.n	80106f8 <ProcessRadioRxDone+0x908>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 801017c:	4b66      	ldr	r3, [pc, #408]	; (8010318 <ProcessRadioRxDone+0x528>)
 801017e:	2201      	movs	r2, #1
 8010180:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010184:	4b63      	ldr	r3, [pc, #396]	; (8010314 <ProcessRadioRxDone+0x524>)
 8010186:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801018a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 801018e:	4b62      	ldr	r3, [pc, #392]	; (8010318 <ProcessRadioRxDone+0x528>)
 8010190:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8010194:	b25b      	sxtb	r3, r3
 8010196:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 801019a:	230d      	movs	r3, #13
 801019c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80101a0:	4b5c      	ldr	r3, [pc, #368]	; (8010314 <ProcessRadioRxDone+0x524>)
 80101a2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d002      	beq.n	80101b0 <ProcessRadioRxDone+0x3c0>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80101aa:	230e      	movs	r3, #14
 80101ac:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80101b0:	4b58      	ldr	r3, [pc, #352]	; (8010314 <ProcessRadioRxDone+0x524>)
 80101b2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80101b6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80101ba:	4611      	mov	r1, r2
 80101bc:	4618      	mov	r0, r3
 80101be:	f006 fa78 	bl	80166b2 <RegionGetPhyParam>
 80101c2:	4603      	mov	r3, r0
 80101c4:	66fb      	str	r3, [r7, #108]	; 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 80101c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80101ca:	3b0d      	subs	r3, #13
 80101cc:	b29b      	uxth	r3, r3
 80101ce:	b21b      	sxth	r3, r3
 80101d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80101d4:	b21a      	sxth	r2, r3
 80101d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101d8:	b21b      	sxth	r3, r3
 80101da:	429a      	cmp	r2, r3
 80101dc:	dc03      	bgt.n	80101e6 <ProcessRadioRxDone+0x3f6>
 80101de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80101e2:	2b0b      	cmp	r3, #11
 80101e4:	d806      	bhi.n	80101f4 <ProcessRadioRxDone+0x404>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80101e6:	4b4c      	ldr	r3, [pc, #304]	; (8010318 <ProcessRadioRxDone+0x528>)
 80101e8:	2201      	movs	r2, #1
 80101ea:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 80101ee:	f7ff fdd9 	bl	800fda4 <PrepareRxDoneAbort>
                return;
 80101f2:	e2a1      	b.n	8010738 <ProcessRadioRxDone+0x948>
            }
            macMsgData.Buffer = payload;
 80101f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80101f8:	63fb      	str	r3, [r7, #60]	; 0x3c
            macMsgData.BufSize = size;
 80101fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80101fe:	b2db      	uxtb	r3, r3
 8010200:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8010204:	4b45      	ldr	r3, [pc, #276]	; (801031c <ProcessRadioRxDone+0x52c>)
 8010206:	663b      	str	r3, [r7, #96]	; 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8010208:	23ff      	movs	r3, #255	; 0xff
 801020a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 801020e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010212:	4618      	mov	r0, r3
 8010214:	f005 ffd0 	bl	80161b8 <LoRaMacParserData>
 8010218:	4603      	mov	r3, r0
 801021a:	2b00      	cmp	r3, #0
 801021c:	d006      	beq.n	801022c <ProcessRadioRxDone+0x43c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801021e:	4b3e      	ldr	r3, [pc, #248]	; (8010318 <ProcessRadioRxDone+0x528>)
 8010220:	2201      	movs	r2, #1
 8010222:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8010226:	f7ff fdbd 	bl	800fda4 <PrepareRxDoneAbort>
                return;
 801022a:	e285      	b.n	8010738 <ProcessRadioRxDone+0x948>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 801022c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801022e:	4a3a      	ldr	r2, [pc, #232]	; (8010318 <ProcessRadioRxDone+0x528>)
 8010230:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8010234:	f107 020e 	add.w	r2, r7, #14
 8010238:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801023c:	4611      	mov	r1, r2
 801023e:	4618      	mov	r0, r3
 8010240:	f002 fc6b 	bl	8012b1a <DetermineFrameType>
 8010244:	4603      	mov	r3, r0
 8010246:	2b00      	cmp	r3, #0
 8010248:	d006      	beq.n	8010258 <ProcessRadioRxDone+0x468>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801024a:	4b33      	ldr	r3, [pc, #204]	; (8010318 <ProcessRadioRxDone+0x528>)
 801024c:	2201      	movs	r2, #1
 801024e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8010252:	f7ff fda7 	bl	800fda4 <PrepareRxDoneAbort>
                return;
 8010256:	e26f      	b.n	8010738 <ProcessRadioRxDone+0x948>
            }

            //Check if it is a multicast message
            multicast = 0;
 8010258:	2300      	movs	r3, #0
 801025a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
            downLinkCounter = 0;
 801025e:	2300      	movs	r3, #0
 8010260:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010262:	2300      	movs	r3, #0
 8010264:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8010268:	e04f      	b.n	801030a <ProcessRadioRxDone+0x51a>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 801026a:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 801026e:	4929      	ldr	r1, [pc, #164]	; (8010314 <ProcessRadioRxDone+0x524>)
 8010270:	4613      	mov	r3, r2
 8010272:	005b      	lsls	r3, r3, #1
 8010274:	4413      	add	r3, r2
 8010276:	011b      	lsls	r3, r3, #4
 8010278:	440b      	add	r3, r1
 801027a:	33ec      	adds	r3, #236	; 0xec
 801027c:	681a      	ldr	r2, [r3, #0]
 801027e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010280:	429a      	cmp	r2, r3
 8010282:	d13d      	bne.n	8010300 <ProcessRadioRxDone+0x510>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8010284:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8010288:	4922      	ldr	r1, [pc, #136]	; (8010314 <ProcessRadioRxDone+0x524>)
 801028a:	4613      	mov	r3, r2
 801028c:	005b      	lsls	r3, r3, #1
 801028e:	4413      	add	r3, r2
 8010290:	011b      	lsls	r3, r3, #4
 8010292:	440b      	add	r3, r1
 8010294:	33e9      	adds	r3, #233	; 0xe9
 8010296:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8010298:	2b00      	cmp	r3, #0
 801029a:	d031      	beq.n	8010300 <ProcessRadioRxDone+0x510>
                {
                    multicast = 1;
 801029c:	2301      	movs	r3, #1
 801029e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 80102a2:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80102a6:	491b      	ldr	r1, [pc, #108]	; (8010314 <ProcessRadioRxDone+0x524>)
 80102a8:	4613      	mov	r3, r2
 80102aa:	005b      	lsls	r3, r3, #1
 80102ac:	4413      	add	r3, r2
 80102ae:	011b      	lsls	r3, r3, #4
 80102b0:	440b      	add	r3, r1
 80102b2:	33ea      	adds	r3, #234	; 0xea
 80102b4:	781b      	ldrb	r3, [r3, #0]
 80102b6:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 80102ba:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80102be:	4915      	ldr	r1, [pc, #84]	; (8010314 <ProcessRadioRxDone+0x524>)
 80102c0:	4613      	mov	r3, r2
 80102c2:	005b      	lsls	r3, r3, #1
 80102c4:	4413      	add	r3, r2
 80102c6:	011b      	lsls	r3, r3, #4
 80102c8:	440b      	add	r3, r1
 80102ca:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 80102d4:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80102d8:	490e      	ldr	r1, [pc, #56]	; (8010314 <ProcessRadioRxDone+0x524>)
 80102da:	4613      	mov	r3, r2
 80102dc:	005b      	lsls	r3, r3, #1
 80102de:	4413      	add	r3, r2
 80102e0:	011b      	lsls	r3, r3, #4
 80102e2:	440b      	add	r3, r1
 80102e4:	33ec      	adds	r3, #236	; 0xec
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80102ec:	4b09      	ldr	r3, [pc, #36]	; (8010314 <ProcessRadioRxDone+0x524>)
 80102ee:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80102f2:	2b02      	cmp	r3, #2
 80102f4:	d114      	bne.n	8010320 <ProcessRadioRxDone+0x530>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80102f6:	4b08      	ldr	r3, [pc, #32]	; (8010318 <ProcessRadioRxDone+0x528>)
 80102f8:	2203      	movs	r2, #3
 80102fa:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 80102fe:	e00f      	b.n	8010320 <ProcessRadioRxDone+0x530>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010300:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8010304:	3301      	adds	r3, #1
 8010306:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 801030a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 801030e:	2b00      	cmp	r3, #0
 8010310:	d0ab      	beq.n	801026a <ProcessRadioRxDone+0x47a>
 8010312:	e006      	b.n	8010322 <ProcessRadioRxDone+0x532>
 8010314:	20000e5c 	.word	0x20000e5c
 8010318:	20000954 	.word	0x20000954
 801031c:	20000b8c 	.word	0x20000b8c
                    break;
 8010320:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8010322:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8010326:	2b01      	cmp	r3, #1
 8010328:	d117      	bne.n	801035a <ProcessRadioRxDone+0x56a>
 801032a:	7bbb      	ldrb	r3, [r7, #14]
 801032c:	2b03      	cmp	r3, #3
 801032e:	d10d      	bne.n	801034c <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8010330:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010334:	f003 0320 	and.w	r3, r3, #32
 8010338:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 801033a:	2b00      	cmp	r3, #0
 801033c:	d106      	bne.n	801034c <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 801033e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010346:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8010348:	2b00      	cmp	r3, #0
 801034a:	d006      	beq.n	801035a <ProcessRadioRxDone+0x56a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801034c:	4bb3      	ldr	r3, [pc, #716]	; (801061c <ProcessRadioRxDone+0x82c>)
 801034e:	2201      	movs	r2, #1
 8010350:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8010354:	f7ff fd26 	bl	800fda4 <PrepareRxDoneAbort>
                return;
 8010358:	e1ee      	b.n	8010738 <ProcessRadioRxDone+0x948>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 801035a:	2315      	movs	r3, #21
 801035c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010360:	4baf      	ldr	r3, [pc, #700]	; (8010620 <ProcessRadioRxDone+0x830>)
 8010362:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010366:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801036a:	4611      	mov	r1, r2
 801036c:	4618      	mov	r0, r3
 801036e:	f006 f9a0 	bl	80166b2 <RegionGetPhyParam>
 8010372:	4603      	mov	r3, r0
 8010374:	66fb      	str	r3, [r7, #108]	; 0x6c

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 8010376:	7bb9      	ldrb	r1, [r7, #14]
 8010378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801037a:	b29b      	uxth	r3, r3
 801037c:	4da8      	ldr	r5, [pc, #672]	; (8010620 <ProcessRadioRxDone+0x830>)
 801037e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8010382:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 8010386:	f107 0210 	add.w	r2, r7, #16
 801038a:	9202      	str	r2, [sp, #8]
 801038c:	f107 020f 	add.w	r2, r7, #15
 8010390:	9201      	str	r2, [sp, #4]
 8010392:	9300      	str	r3, [sp, #0]
 8010394:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 8010398:	4622      	mov	r2, r4
 801039a:	f000 fe8d 	bl	80110b8 <GetFCntDown>
 801039e:	4603      	mov	r3, r0
 80103a0:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80103a4:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d035      	beq.n	8010418 <ProcessRadioRxDone+0x628>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 80103ac:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80103b0:	2b07      	cmp	r3, #7
 80103b2:	d119      	bne.n	80103e8 <ProcessRadioRxDone+0x5f8>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80103b4:	4b99      	ldr	r3, [pc, #612]	; (801061c <ProcessRadioRxDone+0x82c>)
 80103b6:	2208      	movs	r2, #8
 80103b8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 80103bc:	4b98      	ldr	r3, [pc, #608]	; (8010620 <ProcessRadioRxDone+0x830>)
 80103be:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d11d      	bne.n	8010402 <ProcessRadioRxDone+0x612>
 80103c6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80103ca:	f023 031f 	bic.w	r3, r3, #31
 80103ce:	b2db      	uxtb	r3, r3
 80103d0:	2ba0      	cmp	r3, #160	; 0xa0
 80103d2:	d116      	bne.n	8010402 <ProcessRadioRxDone+0x612>
 80103d4:	4b92      	ldr	r3, [pc, #584]	; (8010620 <ProcessRadioRxDone+0x830>)
 80103d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80103d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80103da:	429a      	cmp	r2, r3
 80103dc:	d111      	bne.n	8010402 <ProcessRadioRxDone+0x612>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 80103de:	4b90      	ldr	r3, [pc, #576]	; (8010620 <ProcessRadioRxDone+0x830>)
 80103e0:	2201      	movs	r2, #1
 80103e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80103e6:	e00c      	b.n	8010402 <ProcessRadioRxDone+0x612>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 80103e8:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80103ec:	2b08      	cmp	r3, #8
 80103ee:	d104      	bne.n	80103fa <ProcessRadioRxDone+0x60a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 80103f0:	4b8a      	ldr	r3, [pc, #552]	; (801061c <ProcessRadioRxDone+0x82c>)
 80103f2:	220a      	movs	r2, #10
 80103f4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80103f8:	e003      	b.n	8010402 <ProcessRadioRxDone+0x612>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80103fa:	4b88      	ldr	r3, [pc, #544]	; (801061c <ProcessRadioRxDone+0x82c>)
 80103fc:	2201      	movs	r2, #1
 80103fe:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	4a85      	ldr	r2, [pc, #532]	; (801061c <ProcessRadioRxDone+0x82c>)
 8010406:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	4a83      	ldr	r2, [pc, #524]	; (801061c <ProcessRadioRxDone+0x82c>)
 801040e:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
                PrepareRxDoneAbort( );
 8010412:	f7ff fcc7 	bl	800fda4 <PrepareRxDoneAbort>
                return;
 8010416:	e18f      	b.n	8010738 <ProcessRadioRxDone+0x948>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8010418:	7bfa      	ldrb	r2, [r7, #15]
 801041a:	6939      	ldr	r1, [r7, #16]
 801041c:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 8010420:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010424:	9300      	str	r3, [sp, #0]
 8010426:	460b      	mov	r3, r1
 8010428:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801042c:	f005 fd24 	bl	8015e78 <LoRaMacCryptoUnsecureMessage>
 8010430:	4603      	mov	r3, r0
 8010432:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8010436:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 801043a:	2b00      	cmp	r3, #0
 801043c:	d00f      	beq.n	801045e <ProcessRadioRxDone+0x66e>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 801043e:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8010442:	2b02      	cmp	r3, #2
 8010444:	d104      	bne.n	8010450 <ProcessRadioRxDone+0x660>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8010446:	4b75      	ldr	r3, [pc, #468]	; (801061c <ProcessRadioRxDone+0x82c>)
 8010448:	220b      	movs	r2, #11
 801044a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 801044e:	e003      	b.n	8010458 <ProcessRadioRxDone+0x668>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8010450:	4b72      	ldr	r3, [pc, #456]	; (801061c <ProcessRadioRxDone+0x82c>)
 8010452:	220c      	movs	r2, #12
 8010454:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                PrepareRxDoneAbort( );
 8010458:	f7ff fca4 	bl	800fda4 <PrepareRxDoneAbort>
                return;
 801045c:	e16c      	b.n	8010738 <ProcessRadioRxDone+0x948>
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801045e:	4b6f      	ldr	r3, [pc, #444]	; (801061c <ProcessRadioRxDone+0x82c>)
 8010460:	2200      	movs	r2, #0
 8010462:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 8010466:	4a6d      	ldr	r2, [pc, #436]	; (801061c <ProcessRadioRxDone+0x82c>)
 8010468:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 801046c:	f882 341a 	strb.w	r3, [r2, #1050]	; 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 8010470:	4b6a      	ldr	r3, [pc, #424]	; (801061c <ProcessRadioRxDone+0x82c>)
 8010472:	2200      	movs	r2, #0
 8010474:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 8010478:	4b68      	ldr	r3, [pc, #416]	; (801061c <ProcessRadioRxDone+0x82c>)
 801047a:	2200      	movs	r2, #0
 801047c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8010480:	693b      	ldr	r3, [r7, #16]
 8010482:	4a66      	ldr	r2, [pc, #408]	; (801061c <ProcessRadioRxDone+0x82c>)
 8010484:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	4a64      	ldr	r2, [pc, #400]	; (801061c <ProcessRadioRxDone+0x82c>)
 801048c:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8010490:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010494:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010498:	b2db      	uxtb	r3, r3
 801049a:	2b00      	cmp	r3, #0
 801049c:	bf14      	ite	ne
 801049e:	2301      	movne	r3, #1
 80104a0:	2300      	moveq	r3, #0
 80104a2:	b2da      	uxtb	r2, r3
 80104a4:	4b5d      	ldr	r3, [pc, #372]	; (801061c <ProcessRadioRxDone+0x82c>)
 80104a6:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80104aa:	4b5c      	ldr	r3, [pc, #368]	; (801061c <ProcessRadioRxDone+0x82c>)
 80104ac:	2200      	movs	r2, #0
 80104ae:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80104b2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80104b6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80104ba:	b2db      	uxtb	r3, r3
 80104bc:	2b00      	cmp	r3, #0
 80104be:	bf14      	ite	ne
 80104c0:	2301      	movne	r3, #1
 80104c2:	2300      	moveq	r3, #0
 80104c4:	b2da      	uxtb	r2, r3
 80104c6:	4b55      	ldr	r3, [pc, #340]	; (801061c <ProcessRadioRxDone+0x82c>)
 80104c8:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80104cc:	4b53      	ldr	r3, [pc, #332]	; (801061c <ProcessRadioRxDone+0x82c>)
 80104ce:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d004      	beq.n	80104e0 <ProcessRadioRxDone+0x6f0>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80104d6:	4b51      	ldr	r3, [pc, #324]	; (801061c <ProcessRadioRxDone+0x82c>)
 80104d8:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80104dc:	2b01      	cmp	r3, #1
 80104de:	d102      	bne.n	80104e6 <ProcessRadioRxDone+0x6f6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 80104e0:	4b4f      	ldr	r3, [pc, #316]	; (8010620 <ProcessRadioRxDone+0x830>)
 80104e2:	2200      	movs	r2, #0
 80104e4:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 80104e6:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80104ea:	2b01      	cmp	r3, #1
 80104ec:	d104      	bne.n	80104f8 <ProcessRadioRxDone+0x708>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 80104ee:	4b4b      	ldr	r3, [pc, #300]	; (801061c <ProcessRadioRxDone+0x82c>)
 80104f0:	2202      	movs	r2, #2
 80104f2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 80104f6:	e01f      	b.n	8010538 <ProcessRadioRxDone+0x748>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 80104f8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80104fc:	f023 031f 	bic.w	r3, r3, #31
 8010500:	b2db      	uxtb	r3, r3
 8010502:	2ba0      	cmp	r3, #160	; 0xa0
 8010504:	d110      	bne.n	8010528 <ProcessRadioRxDone+0x738>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8010506:	4b46      	ldr	r3, [pc, #280]	; (8010620 <ProcessRadioRxDone+0x830>)
 8010508:	2201      	movs	r2, #1
 801050a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 801050e:	4b44      	ldr	r3, [pc, #272]	; (8010620 <ProcessRadioRxDone+0x830>)
 8010510:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8010514:	2b00      	cmp	r3, #0
 8010516:	d102      	bne.n	801051e <ProcessRadioRxDone+0x72e>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8010518:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801051a:	4a41      	ldr	r2, [pc, #260]	; (8010620 <ProcessRadioRxDone+0x830>)
 801051c:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 801051e:	4b3f      	ldr	r3, [pc, #252]	; (801061c <ProcessRadioRxDone+0x82c>)
 8010520:	2201      	movs	r2, #1
 8010522:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8010526:	e007      	b.n	8010538 <ProcessRadioRxDone+0x748>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8010528:	4b3d      	ldr	r3, [pc, #244]	; (8010620 <ProcessRadioRxDone+0x830>)
 801052a:	2200      	movs	r2, #0
 801052c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010530:	4b3a      	ldr	r3, [pc, #232]	; (801061c <ProcessRadioRxDone+0x82c>)
 8010532:	2200      	movs	r2, #0
 8010534:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8010538:	4b39      	ldr	r3, [pc, #228]	; (8010620 <ProcessRadioRxDone+0x830>)
 801053a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801053e:	2b00      	cmp	r3, #0
 8010540:	d106      	bne.n	8010550 <ProcessRadioRxDone+0x760>
 8010542:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010546:	f003 0310 	and.w	r3, r3, #16
 801054a:	b2db      	uxtb	r3, r3
 801054c:	2b00      	cmp	r3, #0
 801054e:	d008      	beq.n	8010562 <ProcessRadioRxDone+0x772>
 8010550:	4b33      	ldr	r3, [pc, #204]	; (8010620 <ProcessRadioRxDone+0x830>)
 8010552:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010556:	2b00      	cmp	r3, #0
 8010558:	d103      	bne.n	8010562 <ProcessRadioRxDone+0x772>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 801055a:	4b30      	ldr	r3, [pc, #192]	; (801061c <ProcessRadioRxDone+0x82c>)
 801055c:	2201      	movs	r2, #1
 801055e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8010562:	4b2e      	ldr	r3, [pc, #184]	; (801061c <ProcessRadioRxDone+0x82c>)
 8010564:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8010568:	4a2c      	ldr	r2, [pc, #176]	; (801061c <ProcessRadioRxDone+0x82c>)
 801056a:	f892 2434 	ldrb.w	r2, [r2, #1076]	; 0x434
 801056e:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8010572:	4618      	mov	r0, r3
 8010574:	f001 fef2 	bl	801235c <RemoveMacCommands>

            switch( fType )
 8010578:	7bbb      	ldrb	r3, [r7, #14]
 801057a:	2b03      	cmp	r3, #3
 801057c:	d878      	bhi.n	8010670 <ProcessRadioRxDone+0x880>
 801057e:	a201      	add	r2, pc, #4	; (adr r2, 8010584 <ProcessRadioRxDone+0x794>)
 8010580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010584:	08010595 	.word	0x08010595
 8010588:	080105e5 	.word	0x080105e5
 801058c:	08010625 	.word	0x08010625
 8010590:	0801064b 	.word	0x0801064b
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8010594:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010598:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801059c:	b2db      	uxtb	r3, r3
 801059e:	461c      	mov	r4, r3
 80105a0:	4b1e      	ldr	r3, [pc, #120]	; (801061c <ProcessRadioRxDone+0x82c>)
 80105a2:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80105a6:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 80105aa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80105ae:	f102 0010 	add.w	r0, r2, #16
 80105b2:	9300      	str	r3, [sp, #0]
 80105b4:	460b      	mov	r3, r1
 80105b6:	4622      	mov	r2, r4
 80105b8:	2100      	movs	r1, #0
 80105ba:	f000 fef7 	bl	80113ac <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80105be:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80105c2:	4b16      	ldr	r3, [pc, #88]	; (801061c <ProcessRadioRxDone+0x82c>)
 80105c4:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80105c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105ca:	4a14      	ldr	r2, [pc, #80]	; (801061c <ProcessRadioRxDone+0x82c>)
 80105cc:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80105d0:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80105d4:	4b11      	ldr	r3, [pc, #68]	; (801061c <ProcessRadioRxDone+0x82c>)
 80105d6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 80105da:	4b10      	ldr	r3, [pc, #64]	; (801061c <ProcessRadioRxDone+0x82c>)
 80105dc:	2201      	movs	r2, #1
 80105de:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 80105e2:	e04c      	b.n	801067e <ProcessRadioRxDone+0x88e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80105e4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80105e8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80105ec:	b2db      	uxtb	r3, r3
 80105ee:	461c      	mov	r4, r3
 80105f0:	4b0a      	ldr	r3, [pc, #40]	; (801061c <ProcessRadioRxDone+0x82c>)
 80105f2:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80105f6:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 80105fa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80105fe:	f102 0010 	add.w	r0, r2, #16
 8010602:	9300      	str	r3, [sp, #0]
 8010604:	460b      	mov	r3, r1
 8010606:	4622      	mov	r2, r4
 8010608:	2100      	movs	r1, #0
 801060a:	f000 fecf 	bl	80113ac <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801060e:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8010612:	4b02      	ldr	r3, [pc, #8]	; (801061c <ProcessRadioRxDone+0x82c>)
 8010614:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 8010618:	e031      	b.n	801067e <ProcessRadioRxDone+0x88e>
 801061a:	bf00      	nop
 801061c:	20000954 	.word	0x20000954
 8010620:	20000e5c 	.word	0x20000e5c
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8010624:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010626:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 801062a:	4b45      	ldr	r3, [pc, #276]	; (8010740 <ProcessRadioRxDone+0x950>)
 801062c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8010630:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 8010634:	9300      	str	r3, [sp, #0]
 8010636:	460b      	mov	r3, r1
 8010638:	2100      	movs	r1, #0
 801063a:	f000 feb7 	bl	80113ac <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801063e:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8010642:	4b3f      	ldr	r3, [pc, #252]	; (8010740 <ProcessRadioRxDone+0x950>)
 8010644:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 8010648:	e019      	b.n	801067e <ProcessRadioRxDone+0x88e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801064a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 801064e:	4b3c      	ldr	r3, [pc, #240]	; (8010740 <ProcessRadioRxDone+0x950>)
 8010650:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8010654:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010656:	4a3a      	ldr	r2, [pc, #232]	; (8010740 <ProcessRadioRxDone+0x950>)
 8010658:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 801065c:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8010660:	4b37      	ldr	r3, [pc, #220]	; (8010740 <ProcessRadioRxDone+0x950>)
 8010662:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 8010666:	4b36      	ldr	r3, [pc, #216]	; (8010740 <ProcessRadioRxDone+0x950>)
 8010668:	2201      	movs	r2, #1
 801066a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 801066e:	e006      	b.n	801067e <ProcessRadioRxDone+0x88e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010670:	4b33      	ldr	r3, [pc, #204]	; (8010740 <ProcessRadioRxDone+0x950>)
 8010672:	2201      	movs	r2, #1
 8010674:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    PrepareRxDoneAbort( );
 8010678:	f7ff fb94 	bl	800fda4 <PrepareRxDoneAbort>
                    break;
 801067c:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 801067e:	4a30      	ldr	r2, [pc, #192]	; (8010740 <ProcessRadioRxDone+0x950>)
 8010680:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010684:	f043 0302 	orr.w	r3, r3, #2
 8010688:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 801068c:	e035      	b.n	80106fa <ProcessRadioRxDone+0x90a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 801068e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8010692:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010696:	18d1      	adds	r1, r2, r3
 8010698:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 801069c:	b29b      	uxth	r3, r3
 801069e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80106a2:	1ad3      	subs	r3, r2, r3
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	461a      	mov	r2, r3
 80106a8:	4826      	ldr	r0, [pc, #152]	; (8010744 <ProcessRadioRxDone+0x954>)
 80106aa:	f008 fb1c 	bl	8018ce6 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80106ae:	4b24      	ldr	r3, [pc, #144]	; (8010740 <ProcessRadioRxDone+0x950>)
 80106b0:	2203      	movs	r2, #3
 80106b2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80106b6:	4b22      	ldr	r3, [pc, #136]	; (8010740 <ProcessRadioRxDone+0x950>)
 80106b8:	2200      	movs	r2, #0
 80106ba:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80106be:	4b20      	ldr	r3, [pc, #128]	; (8010740 <ProcessRadioRxDone+0x950>)
 80106c0:	4a20      	ldr	r2, [pc, #128]	; (8010744 <ProcessRadioRxDone+0x954>)
 80106c2:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80106c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80106ca:	b2da      	uxtb	r2, r3
 80106cc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80106d0:	1ad3      	subs	r3, r2, r3
 80106d2:	b2da      	uxtb	r2, r3
 80106d4:	4b1a      	ldr	r3, [pc, #104]	; (8010740 <ProcessRadioRxDone+0x950>)
 80106d6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

            MacCtx.MacFlags.Bits.McpsInd = 1;
 80106da:	4a19      	ldr	r2, [pc, #100]	; (8010740 <ProcessRadioRxDone+0x950>)
 80106dc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80106e0:	f043 0302 	orr.w	r3, r3, #2
 80106e4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 80106e8:	e007      	b.n	80106fa <ProcessRadioRxDone+0x90a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80106ea:	4b15      	ldr	r3, [pc, #84]	; (8010740 <ProcessRadioRxDone+0x950>)
 80106ec:	2201      	movs	r2, #1
 80106ee:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            PrepareRxDoneAbort( );
 80106f2:	f7ff fb57 	bl	800fda4 <PrepareRxDoneAbort>
            break;
 80106f6:	e000      	b.n	80106fa <ProcessRadioRxDone+0x90a>
            break;
 80106f8:	bf00      	nop
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 80106fa:	4b11      	ldr	r3, [pc, #68]	; (8010740 <ProcessRadioRxDone+0x950>)
 80106fc:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010700:	2b00      	cmp	r3, #0
 8010702:	d008      	beq.n	8010716 <ProcessRadioRxDone+0x926>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8010704:	4b0e      	ldr	r3, [pc, #56]	; (8010740 <ProcessRadioRxDone+0x950>)
 8010706:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 801070a:	2b00      	cmp	r3, #0
 801070c:	d00b      	beq.n	8010726 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 801070e:	2000      	movs	r0, #0
 8010710:	f000 fcaa 	bl	8011068 <OnAckTimeoutTimerEvent>
 8010714:	e007      	b.n	8010726 <ProcessRadioRxDone+0x936>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8010716:	4b0c      	ldr	r3, [pc, #48]	; (8010748 <ProcessRadioRxDone+0x958>)
 8010718:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801071c:	2b02      	cmp	r3, #2
 801071e:	d102      	bne.n	8010726 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 8010720:	2000      	movs	r0, #0
 8010722:	f000 fca1 	bl	8011068 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010726:	4a06      	ldr	r2, [pc, #24]	; (8010740 <ProcessRadioRxDone+0x950>)
 8010728:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801072c:	f043 0310 	orr.w	r3, r3, #16
 8010730:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8010734:	f7ff fa6c 	bl	800fc10 <UpdateRxSlotIdleState>
}
 8010738:	3798      	adds	r7, #152	; 0x98
 801073a:	46bd      	mov	sp, r7
 801073c:	bdb0      	pop	{r4, r5, r7, pc}
 801073e:	bf00      	nop
 8010740:	20000954 	.word	0x20000954
 8010744:	20000b8c 	.word	0x20000b8c
 8010748:	20000e5c 	.word	0x20000e5c

0801074c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 801074c:	b580      	push	{r7, lr}
 801074e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010750:	4b11      	ldr	r3, [pc, #68]	; (8010798 <ProcessRadioTxTimeout+0x4c>)
 8010752:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010756:	2b02      	cmp	r3, #2
 8010758:	d002      	beq.n	8010760 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 801075a:	4b10      	ldr	r3, [pc, #64]	; (801079c <ProcessRadioTxTimeout+0x50>)
 801075c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801075e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8010760:	f7ff fa56 	bl	800fc10 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8010764:	4b0e      	ldr	r3, [pc, #56]	; (80107a0 <ProcessRadioTxTimeout+0x54>)
 8010766:	2202      	movs	r2, #2
 8010768:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 801076c:	2002      	movs	r0, #2
 801076e:	f004 fcc7 	bl	8015100 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8010772:	4b0b      	ldr	r3, [pc, #44]	; (80107a0 <ProcessRadioTxTimeout+0x54>)
 8010774:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010778:	2b00      	cmp	r3, #0
 801077a:	d003      	beq.n	8010784 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 801077c:	4b08      	ldr	r3, [pc, #32]	; (80107a0 <ProcessRadioTxTimeout+0x54>)
 801077e:	2201      	movs	r2, #1
 8010780:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010784:	4a06      	ldr	r2, [pc, #24]	; (80107a0 <ProcessRadioTxTimeout+0x54>)
 8010786:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801078a:	f043 0310 	orr.w	r3, r3, #16
 801078e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8010792:	bf00      	nop
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	20000e5c 	.word	0x20000e5c
 801079c:	0801e8c0 	.word	0x0801e8c0
 80107a0:	20000954 	.word	0x20000954

080107a4 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b084      	sub	sp, #16
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	4603      	mov	r3, r0
 80107ac:	460a      	mov	r2, r1
 80107ae:	71fb      	strb	r3, [r7, #7]
 80107b0:	4613      	mov	r3, r2
 80107b2:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 80107b4:	2300      	movs	r3, #0
 80107b6:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80107b8:	4b40      	ldr	r3, [pc, #256]	; (80108bc <HandleRadioRxErrorTimeout+0x118>)
 80107ba:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80107be:	2b02      	cmp	r3, #2
 80107c0:	d002      	beq.n	80107c8 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 80107c2:	4b3f      	ldr	r3, [pc, #252]	; (80108c0 <HandleRadioRxErrorTimeout+0x11c>)
 80107c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107c6:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80107c8:	f003 ffdf 	bl	801478a <LoRaMacClassBIsBeaconExpected>
 80107cc:	4603      	mov	r3, r0
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d007      	beq.n	80107e2 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80107d2:	2002      	movs	r0, #2
 80107d4:	f003 ff8d 	bl	80146f2 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80107d8:	2000      	movs	r0, #0
 80107da:	f003 ffaf 	bl	801473c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 80107de:	2301      	movs	r3, #1
 80107e0:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80107e2:	4b36      	ldr	r3, [pc, #216]	; (80108bc <HandleRadioRxErrorTimeout+0x118>)
 80107e4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	d119      	bne.n	8010820 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80107ec:	f003 ffd4 	bl	8014798 <LoRaMacClassBIsPingExpected>
 80107f0:	4603      	mov	r3, r0
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d007      	beq.n	8010806 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80107f6:	2000      	movs	r0, #0
 80107f8:	f003 ff85 	bl	8014706 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80107fc:	2000      	movs	r0, #0
 80107fe:	f003 ffa6 	bl	801474e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8010802:	2301      	movs	r3, #1
 8010804:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010806:	f003 ffce 	bl	80147a6 <LoRaMacClassBIsMulticastExpected>
 801080a:	4603      	mov	r3, r0
 801080c:	2b00      	cmp	r3, #0
 801080e:	d007      	beq.n	8010820 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010810:	2000      	movs	r0, #0
 8010812:	f003 ff82 	bl	801471a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010816:	2000      	movs	r0, #0
 8010818:	f003 ffa2 	bl	8014760 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 801081c:	2301      	movs	r3, #1
 801081e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8010820:	7bfb      	ldrb	r3, [r7, #15]
 8010822:	f083 0301 	eor.w	r3, r3, #1
 8010826:	b2db      	uxtb	r3, r3
 8010828:	2b00      	cmp	r3, #0
 801082a:	d040      	beq.n	80108ae <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 801082c:	4b25      	ldr	r3, [pc, #148]	; (80108c4 <HandleRadioRxErrorTimeout+0x120>)
 801082e:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8010832:	2b00      	cmp	r3, #0
 8010834:	d122      	bne.n	801087c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8010836:	4b23      	ldr	r3, [pc, #140]	; (80108c4 <HandleRadioRxErrorTimeout+0x120>)
 8010838:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801083c:	2b00      	cmp	r3, #0
 801083e:	d003      	beq.n	8010848 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8010840:	4a20      	ldr	r2, [pc, #128]	; (80108c4 <HandleRadioRxErrorTimeout+0x120>)
 8010842:	79fb      	ldrb	r3, [r7, #7]
 8010844:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8010848:	79fb      	ldrb	r3, [r7, #7]
 801084a:	4618      	mov	r0, r3
 801084c:	f004 fc58 	bl	8015100 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8010850:	4b1a      	ldr	r3, [pc, #104]	; (80108bc <HandleRadioRxErrorTimeout+0x118>)
 8010852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010854:	4618      	mov	r0, r3
 8010856:	f00c fd0d 	bl	801d274 <UTIL_TIMER_GetElapsedTime>
 801085a:	4602      	mov	r2, r0
 801085c:	4b19      	ldr	r3, [pc, #100]	; (80108c4 <HandleRadioRxErrorTimeout+0x120>)
 801085e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8010862:	429a      	cmp	r2, r3
 8010864:	d323      	bcc.n	80108ae <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8010866:	4818      	ldr	r0, [pc, #96]	; (80108c8 <HandleRadioRxErrorTimeout+0x124>)
 8010868:	f00c fbd8 	bl	801d01c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 801086c:	4a15      	ldr	r2, [pc, #84]	; (80108c4 <HandleRadioRxErrorTimeout+0x120>)
 801086e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010872:	f043 0310 	orr.w	r3, r3, #16
 8010876:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 801087a:	e018      	b.n	80108ae <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 801087c:	4b11      	ldr	r3, [pc, #68]	; (80108c4 <HandleRadioRxErrorTimeout+0x120>)
 801087e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010882:	2b00      	cmp	r3, #0
 8010884:	d003      	beq.n	801088e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8010886:	4a0f      	ldr	r2, [pc, #60]	; (80108c4 <HandleRadioRxErrorTimeout+0x120>)
 8010888:	79bb      	ldrb	r3, [r7, #6]
 801088a:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 801088e:	79bb      	ldrb	r3, [r7, #6]
 8010890:	4618      	mov	r0, r3
 8010892:	f004 fc35 	bl	8015100 <LoRaMacConfirmQueueSetStatusCmn>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010896:	4b09      	ldr	r3, [pc, #36]	; (80108bc <HandleRadioRxErrorTimeout+0x118>)
 8010898:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801089c:	2b02      	cmp	r3, #2
 801089e:	d006      	beq.n	80108ae <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 80108a0:	4a08      	ldr	r2, [pc, #32]	; (80108c4 <HandleRadioRxErrorTimeout+0x120>)
 80108a2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80108a6:	f043 0310 	orr.w	r3, r3, #16
 80108aa:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 80108ae:	f7ff f9af 	bl	800fc10 <UpdateRxSlotIdleState>
}
 80108b2:	bf00      	nop
 80108b4:	3710      	adds	r7, #16
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
 80108ba:	bf00      	nop
 80108bc:	20000e5c 	.word	0x20000e5c
 80108c0:	0801e8c0 	.word	0x0801e8c0
 80108c4:	20000954 	.word	0x20000954
 80108c8:	20000cec 	.word	0x20000cec

080108cc <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80108d0:	2106      	movs	r1, #6
 80108d2:	2005      	movs	r0, #5
 80108d4:	f7ff ff66 	bl	80107a4 <HandleRadioRxErrorTimeout>
}
 80108d8:	bf00      	nop
 80108da:	bd80      	pop	{r7, pc}

080108dc <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 80108e0:	2104      	movs	r1, #4
 80108e2:	2003      	movs	r0, #3
 80108e4:	f7ff ff5e 	bl	80107a4 <HandleRadioRxErrorTimeout>
}
 80108e8:	bf00      	nop
 80108ea:	bd80      	pop	{r7, pc}

080108ec <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b084      	sub	sp, #16
 80108f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108f2:	f3ef 8310 	mrs	r3, PRIMASK
 80108f6:	607b      	str	r3, [r7, #4]
  return(result);
 80108f8:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 80108fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80108fc:	b672      	cpsid	i
}
 80108fe:	bf00      	nop
    events = LoRaMacRadioEvents;
 8010900:	4b1d      	ldr	r3, [pc, #116]	; (8010978 <LoRaMacHandleIrqEvents+0x8c>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8010906:	4b1c      	ldr	r3, [pc, #112]	; (8010978 <LoRaMacHandleIrqEvents+0x8c>)
 8010908:	2200      	movs	r2, #0
 801090a:	601a      	str	r2, [r3, #0]
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010910:	68bb      	ldr	r3, [r7, #8]
 8010912:	f383 8810 	msr	PRIMASK, r3
}
 8010916:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d027      	beq.n	801096e <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 801091e:	783b      	ldrb	r3, [r7, #0]
 8010920:	f003 0310 	and.w	r3, r3, #16
 8010924:	b2db      	uxtb	r3, r3
 8010926:	2b00      	cmp	r3, #0
 8010928:	d001      	beq.n	801092e <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 801092a:	f7ff f989 	bl	800fc40 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 801092e:	783b      	ldrb	r3, [r7, #0]
 8010930:	f003 0308 	and.w	r3, r3, #8
 8010934:	b2db      	uxtb	r3, r3
 8010936:	2b00      	cmp	r3, #0
 8010938:	d001      	beq.n	801093e <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 801093a:	f7ff fa59 	bl	800fdf0 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 801093e:	783b      	ldrb	r3, [r7, #0]
 8010940:	f003 0304 	and.w	r3, r3, #4
 8010944:	b2db      	uxtb	r3, r3
 8010946:	2b00      	cmp	r3, #0
 8010948:	d001      	beq.n	801094e <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 801094a:	f7ff feff 	bl	801074c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 801094e:	783b      	ldrb	r3, [r7, #0]
 8010950:	f003 0302 	and.w	r3, r3, #2
 8010954:	b2db      	uxtb	r3, r3
 8010956:	2b00      	cmp	r3, #0
 8010958:	d001      	beq.n	801095e <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 801095a:	f7ff ffb7 	bl	80108cc <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 801095e:	783b      	ldrb	r3, [r7, #0]
 8010960:	f003 0301 	and.w	r3, r3, #1
 8010964:	b2db      	uxtb	r3, r3
 8010966:	2b00      	cmp	r3, #0
 8010968:	d001      	beq.n	801096e <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 801096a:	f7ff ffb7 	bl	80108dc <ProcessRadioRxTimeout>
        }
    }
}
 801096e:	bf00      	nop
 8010970:	3710      	adds	r7, #16
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}
 8010976:	bf00      	nop
 8010978:	200015c4 	.word	0x200015c4

0801097c <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 801097c:	b480      	push	{r7}
 801097e:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8010980:	4b0b      	ldr	r3, [pc, #44]	; (80109b0 <LoRaMacIsBusy+0x34>)
 8010982:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010986:	2b01      	cmp	r3, #1
 8010988:	d101      	bne.n	801098e <LoRaMacIsBusy+0x12>
    {
        return false;
 801098a:	2300      	movs	r3, #0
 801098c:	e00c      	b.n	80109a8 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 801098e:	4b08      	ldr	r3, [pc, #32]	; (80109b0 <LoRaMacIsBusy+0x34>)
 8010990:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010994:	2b00      	cmp	r3, #0
 8010996:	d106      	bne.n	80109a6 <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8010998:	4b05      	ldr	r3, [pc, #20]	; (80109b0 <LoRaMacIsBusy+0x34>)
 801099a:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 801099e:	2b01      	cmp	r3, #1
 80109a0:	d101      	bne.n	80109a6 <LoRaMacIsBusy+0x2a>
    {
        return false;
 80109a2:	2300      	movs	r3, #0
 80109a4:	e000      	b.n	80109a8 <LoRaMacIsBusy+0x2c>
    }
    return true;
 80109a6:	2301      	movs	r3, #1
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bc80      	pop	{r7}
 80109ae:	4770      	bx	lr
 80109b0:	20000954 	.word	0x20000954

080109b4 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 80109b4:	b480      	push	{r7}
 80109b6:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 80109b8:	4b05      	ldr	r3, [pc, #20]	; (80109d0 <LoRaMacIsStopped+0x1c>)
 80109ba:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80109be:	2b01      	cmp	r3, #1
 80109c0:	d101      	bne.n	80109c6 <LoRaMacIsStopped+0x12>
    {
        return true;
 80109c2:	2301      	movs	r3, #1
 80109c4:	e000      	b.n	80109c8 <LoRaMacIsStopped+0x14>
    }
    return false;
 80109c6:	2300      	movs	r3, #0
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bc80      	pop	{r7}
 80109ce:	4770      	bx	lr
 80109d0:	20000954 	.word	0x20000954

080109d4 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 80109d4:	b480      	push	{r7}
 80109d6:	b083      	sub	sp, #12
 80109d8:	af00      	add	r7, sp, #0
 80109da:	4603      	mov	r3, r0
 80109dc:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 80109de:	4a04      	ldr	r2, [pc, #16]	; (80109f0 <LoRaMacEnableRequests+0x1c>)
 80109e0:	79fb      	ldrb	r3, [r7, #7]
 80109e2:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 80109e6:	bf00      	nop
 80109e8:	370c      	adds	r7, #12
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bc80      	pop	{r7}
 80109ee:	4770      	bx	lr
 80109f0:	20000954 	.word	0x20000954

080109f4 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b082      	sub	sp, #8
 80109f8:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 80109fa:	4b2c      	ldr	r3, [pc, #176]	; (8010aac <LoRaMacHandleRequestEvents+0xb8>)
 80109fc:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010a00:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8010a02:	4b2a      	ldr	r3, [pc, #168]	; (8010aac <LoRaMacHandleRequestEvents+0xb8>)
 8010a04:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d14a      	bne.n	8010aa2 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010a0c:	4b27      	ldr	r3, [pc, #156]	; (8010aac <LoRaMacHandleRequestEvents+0xb8>)
 8010a0e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010a12:	f003 0301 	and.w	r3, r3, #1
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d006      	beq.n	8010a2a <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8010a1c:	4a23      	ldr	r2, [pc, #140]	; (8010aac <LoRaMacHandleRequestEvents+0xb8>)
 8010a1e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010a22:	f36f 0300 	bfc	r3, #0, #1
 8010a26:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010a2a:	4b20      	ldr	r3, [pc, #128]	; (8010aac <LoRaMacHandleRequestEvents+0xb8>)
 8010a2c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010a30:	f003 0304 	and.w	r3, r3, #4
 8010a34:	b2db      	uxtb	r3, r3
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d006      	beq.n	8010a48 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8010a3a:	4a1c      	ldr	r2, [pc, #112]	; (8010aac <LoRaMacHandleRequestEvents+0xb8>)
 8010a3c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010a40:	f36f 0382 	bfc	r3, #2, #1
 8010a44:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010a48:	2001      	movs	r0, #1
 8010a4a:	f7ff ffc3 	bl	80109d4 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8010a4e:	793b      	ldrb	r3, [r7, #4]
 8010a50:	f003 0301 	and.w	r3, r3, #1
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d005      	beq.n	8010a66 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8010a5a:	4b14      	ldr	r3, [pc, #80]	; (8010aac <LoRaMacHandleRequestEvents+0xb8>)
 8010a5c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	4813      	ldr	r0, [pc, #76]	; (8010ab0 <LoRaMacHandleRequestEvents+0xbc>)
 8010a64:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8010a66:	793b      	ldrb	r3, [r7, #4]
 8010a68:	f003 0304 	and.w	r3, r3, #4
 8010a6c:	b2db      	uxtb	r3, r3
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d00e      	beq.n	8010a90 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8010a72:	4810      	ldr	r0, [pc, #64]	; (8010ab4 <LoRaMacHandleRequestEvents+0xc0>)
 8010a74:	f004 fb92 	bl	801519c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8010a78:	f004 fbe2 	bl	8015240 <LoRaMacConfirmQueueGetCnt>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d006      	beq.n	8010a90 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8010a82:	4a0a      	ldr	r2, [pc, #40]	; (8010aac <LoRaMacHandleRequestEvents+0xb8>)
 8010a84:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010a88:	f043 0304 	orr.w	r3, r3, #4
 8010a8c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8010a90:	f003 fea7 	bl	80147e2 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8010a94:	4a05      	ldr	r2, [pc, #20]	; (8010aac <LoRaMacHandleRequestEvents+0xb8>)
 8010a96:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010a9a:	f36f 1304 	bfc	r3, #4, #1
 8010a9e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 8010aa2:	bf00      	nop
 8010aa4:	3708      	adds	r7, #8
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
 8010aaa:	bf00      	nop
 8010aac:	20000954 	.word	0x20000954
 8010ab0:	20000d88 	.word	0x20000d88
 8010ab4:	20000d9c 	.word	0x20000d9c

08010ab8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8010abc:	4b16      	ldr	r3, [pc, #88]	; (8010b18 <LoRaMacHandleIndicationEvents+0x60>)
 8010abe:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010ac2:	f003 0308 	and.w	r3, r3, #8
 8010ac6:	b2db      	uxtb	r3, r3
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d00d      	beq.n	8010ae8 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8010acc:	4a12      	ldr	r2, [pc, #72]	; (8010b18 <LoRaMacHandleIndicationEvents+0x60>)
 8010ace:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010ad2:	f36f 03c3 	bfc	r3, #3, #1
 8010ad6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8010ada:	4b0f      	ldr	r3, [pc, #60]	; (8010b18 <LoRaMacHandleIndicationEvents+0x60>)
 8010adc:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8010ae0:	68db      	ldr	r3, [r3, #12]
 8010ae2:	490e      	ldr	r1, [pc, #56]	; (8010b1c <LoRaMacHandleIndicationEvents+0x64>)
 8010ae4:	480e      	ldr	r0, [pc, #56]	; (8010b20 <LoRaMacHandleIndicationEvents+0x68>)
 8010ae6:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010ae8:	4b0b      	ldr	r3, [pc, #44]	; (8010b18 <LoRaMacHandleIndicationEvents+0x60>)
 8010aea:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010aee:	f003 0302 	and.w	r3, r3, #2
 8010af2:	b2db      	uxtb	r3, r3
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d00d      	beq.n	8010b14 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8010af8:	4a07      	ldr	r2, [pc, #28]	; (8010b18 <LoRaMacHandleIndicationEvents+0x60>)
 8010afa:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010afe:	f36f 0341 	bfc	r3, #1, #1
 8010b02:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8010b06:	4b04      	ldr	r3, [pc, #16]	; (8010b18 <LoRaMacHandleIndicationEvents+0x60>)
 8010b08:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8010b0c:	685b      	ldr	r3, [r3, #4]
 8010b0e:	4903      	ldr	r1, [pc, #12]	; (8010b1c <LoRaMacHandleIndicationEvents+0x64>)
 8010b10:	4804      	ldr	r0, [pc, #16]	; (8010b24 <LoRaMacHandleIndicationEvents+0x6c>)
 8010b12:	4798      	blx	r3
    }
}
 8010b14:	bf00      	nop
 8010b16:	bd80      	pop	{r7, pc}
 8010b18:	20000954 	.word	0x20000954
 8010b1c:	20000dd0 	.word	0x20000dd0
 8010b20:	20000db0 	.word	0x20000db0
 8010b24:	20000d6c 	.word	0x20000d6c

08010b28 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b082      	sub	sp, #8
 8010b2c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010b2e:	4b32      	ldr	r3, [pc, #200]	; (8010bf8 <LoRaMacHandleMcpsRequest+0xd0>)
 8010b30:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010b34:	f003 0301 	and.w	r3, r3, #1
 8010b38:	b2db      	uxtb	r3, r3
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d058      	beq.n	8010bf0 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8010b42:	2300      	movs	r3, #0
 8010b44:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010b46:	4b2c      	ldr	r3, [pc, #176]	; (8010bf8 <LoRaMacHandleMcpsRequest+0xd0>)
 8010b48:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d004      	beq.n	8010b5a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010b50:	4b29      	ldr	r3, [pc, #164]	; (8010bf8 <LoRaMacHandleMcpsRequest+0xd0>)
 8010b52:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010b56:	2b03      	cmp	r3, #3
 8010b58:	d104      	bne.n	8010b64 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8010b5a:	f002 f82d 	bl	8012bb8 <CheckRetransUnconfirmedUplink>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	71fb      	strb	r3, [r7, #7]
 8010b62:	e020      	b.n	8010ba6 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8010b64:	4b24      	ldr	r3, [pc, #144]	; (8010bf8 <LoRaMacHandleMcpsRequest+0xd0>)
 8010b66:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8010b6a:	2b01      	cmp	r3, #1
 8010b6c:	d11b      	bne.n	8010ba6 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 8010b6e:	4b22      	ldr	r3, [pc, #136]	; (8010bf8 <LoRaMacHandleMcpsRequest+0xd0>)
 8010b70:	f893 340f 	ldrb.w	r3, [r3, #1039]	; 0x40f
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d014      	beq.n	8010ba2 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8010b78:	f002 f84a 	bl	8012c10 <CheckRetransConfirmedUplink>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8010b80:	4b1e      	ldr	r3, [pc, #120]	; (8010bfc <LoRaMacHandleMcpsRequest+0xd4>)
 8010b82:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d10d      	bne.n	8010ba6 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 8010b8a:	79fb      	ldrb	r3, [r7, #7]
 8010b8c:	f083 0301 	eor.w	r3, r3, #1
 8010b90:	b2db      	uxtb	r3, r3
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d002      	beq.n	8010b9c <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 8010b96:	f002 f8cd 	bl	8012d34 <AckTimeoutRetriesProcess>
 8010b9a:	e004      	b.n	8010ba6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8010b9c:	f002 f908 	bl	8012db0 <AckTimeoutRetriesFinalize>
 8010ba0:	e001      	b.n	8010ba6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8010ba6:	79fb      	ldrb	r3, [r7, #7]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d00d      	beq.n	8010bc8 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8010bac:	4814      	ldr	r0, [pc, #80]	; (8010c00 <LoRaMacHandleMcpsRequest+0xd8>)
 8010bae:	f00c fa35 	bl	801d01c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010bb2:	4b11      	ldr	r3, [pc, #68]	; (8010bf8 <LoRaMacHandleMcpsRequest+0xd0>)
 8010bb4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010bb8:	f023 0320 	bic.w	r3, r3, #32
 8010bbc:	4a0e      	ldr	r2, [pc, #56]	; (8010bf8 <LoRaMacHandleMcpsRequest+0xd0>)
 8010bbe:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8010bc2:	f002 f847 	bl	8012c54 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8010bc6:	e013      	b.n	8010bf0 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 8010bc8:	79bb      	ldrb	r3, [r7, #6]
 8010bca:	f083 0301 	eor.w	r3, r3, #1
 8010bce:	b2db      	uxtb	r3, r3
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d00d      	beq.n	8010bf0 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8010bd4:	4a08      	ldr	r2, [pc, #32]	; (8010bf8 <LoRaMacHandleMcpsRequest+0xd0>)
 8010bd6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010bda:	f36f 1304 	bfc	r3, #4, #1
 8010bde:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 8010be2:	4b05      	ldr	r3, [pc, #20]	; (8010bf8 <LoRaMacHandleMcpsRequest+0xd0>)
 8010be4:	2200      	movs	r2, #0
 8010be6:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
            OnTxDelayedTimerEvent( NULL );
 8010bea:	2000      	movs	r0, #0
 8010bec:	f000 f992 	bl	8010f14 <OnTxDelayedTimerEvent>
}
 8010bf0:	bf00      	nop
 8010bf2:	3708      	adds	r7, #8
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}
 8010bf8:	20000954 	.word	0x20000954
 8010bfc:	20000e5c 	.word	0x20000e5c
 8010c00:	20000cbc 	.word	0x20000cbc

08010c04 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010c08:	4b1b      	ldr	r3, [pc, #108]	; (8010c78 <LoRaMacHandleMlmeRequest+0x74>)
 8010c0a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010c0e:	f003 0304 	and.w	r3, r3, #4
 8010c12:	b2db      	uxtb	r3, r3
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d02c      	beq.n	8010c72 <LoRaMacHandleMlmeRequest+0x6e>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010c18:	2001      	movs	r0, #1
 8010c1a:	f004 faa5 	bl	8015168 <LoRaMacConfirmQueueIsCmdActive>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d012      	beq.n	8010c4a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8010c24:	2001      	movs	r0, #1
 8010c26:	f004 fa41 	bl	80150ac <LoRaMacConfirmQueueGetStatus>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d103      	bne.n	8010c38 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8010c30:	4b11      	ldr	r3, [pc, #68]	; (8010c78 <LoRaMacHandleMlmeRequest+0x74>)
 8010c32:	2200      	movs	r2, #0
 8010c34:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010c38:	4b0f      	ldr	r3, [pc, #60]	; (8010c78 <LoRaMacHandleMlmeRequest+0x74>)
 8010c3a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010c3e:	f023 0302 	bic.w	r3, r3, #2
 8010c42:	4a0d      	ldr	r2, [pc, #52]	; (8010c78 <LoRaMacHandleMlmeRequest+0x74>)
 8010c44:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8010c48:	e013      	b.n	8010c72 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8010c4a:	2006      	movs	r0, #6
 8010c4c:	f004 fa8c 	bl	8015168 <LoRaMacConfirmQueueIsCmdActive>
 8010c50:	4603      	mov	r3, r0
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d105      	bne.n	8010c62 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8010c56:	2007      	movs	r0, #7
 8010c58:	f004 fa86 	bl	8015168 <LoRaMacConfirmQueueIsCmdActive>
 8010c5c:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d007      	beq.n	8010c72 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010c62:	4b05      	ldr	r3, [pc, #20]	; (8010c78 <LoRaMacHandleMlmeRequest+0x74>)
 8010c64:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010c68:	f023 0302 	bic.w	r3, r3, #2
 8010c6c:	4a02      	ldr	r2, [pc, #8]	; (8010c78 <LoRaMacHandleMlmeRequest+0x74>)
 8010c6e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8010c72:	bf00      	nop
 8010c74:	bd80      	pop	{r7, pc}
 8010c76:	bf00      	nop
 8010c78:	20000954 	.word	0x20000954

08010c7c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010c80:	200c      	movs	r0, #12
 8010c82:	f004 fa71 	bl	8015168 <LoRaMacConfirmQueueIsCmdActive>
 8010c86:	4603      	mov	r3, r0
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d019      	beq.n	8010cc0 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8010c8c:	4b0e      	ldr	r3, [pc, #56]	; (8010cc8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010c8e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010c92:	f003 0301 	and.w	r3, r3, #1
 8010c96:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d111      	bne.n	8010cc0 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010c9c:	4b0a      	ldr	r3, [pc, #40]	; (8010cc8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010c9e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010ca2:	f003 0304 	and.w	r3, r3, #4
 8010ca6:	b2db      	uxtb	r3, r3
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d009      	beq.n	8010cc0 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010cac:	4b06      	ldr	r3, [pc, #24]	; (8010cc8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010cae:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010cb2:	f023 0302 	bic.w	r3, r3, #2
 8010cb6:	4a04      	ldr	r2, [pc, #16]	; (8010cc8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010cb8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	e000      	b.n	8010cc2 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8010cc0:	2300      	movs	r3, #0
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	bd80      	pop	{r7, pc}
 8010cc6:	bf00      	nop
 8010cc8:	20000954 	.word	0x20000954

08010ccc <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8010ccc:	b480      	push	{r7}
 8010cce:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8010cd0:	4b0d      	ldr	r3, [pc, #52]	; (8010d08 <LoRaMacCheckForRxAbort+0x3c>)
 8010cd2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d00f      	beq.n	8010cfe <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8010cde:	4b0a      	ldr	r3, [pc, #40]	; (8010d08 <LoRaMacCheckForRxAbort+0x3c>)
 8010ce0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ce8:	4a07      	ldr	r2, [pc, #28]	; (8010d08 <LoRaMacCheckForRxAbort+0x3c>)
 8010cea:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010cee:	4b06      	ldr	r3, [pc, #24]	; (8010d08 <LoRaMacCheckForRxAbort+0x3c>)
 8010cf0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010cf4:	f023 0302 	bic.w	r3, r3, #2
 8010cf8:	4a03      	ldr	r2, [pc, #12]	; (8010d08 <LoRaMacCheckForRxAbort+0x3c>)
 8010cfa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8010cfe:	bf00      	nop
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bc80      	pop	{r7}
 8010d04:	4770      	bx	lr
 8010d06:	bf00      	nop
 8010d08:	20000954 	.word	0x20000954

08010d0c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b084      	sub	sp, #16
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010d14:	2300      	movs	r3, #0
 8010d16:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8010d1c:	4b50      	ldr	r3, [pc, #320]	; (8010e60 <LoRaMacHandleNvm+0x154>)
 8010d1e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	f040 8098 	bne.w	8010e58 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2124      	movs	r1, #36	; 0x24
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f008 f82f 	bl	8018d90 <Crc32>
 8010d32:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d38:	68ba      	ldr	r2, [r7, #8]
 8010d3a:	429a      	cmp	r2, r3
 8010d3c:	d006      	beq.n	8010d4c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	68ba      	ldr	r2, [r7, #8]
 8010d42:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8010d44:	89fb      	ldrh	r3, [r7, #14]
 8010d46:	f043 0301 	orr.w	r3, r3, #1
 8010d4a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	3328      	adds	r3, #40	; 0x28
 8010d50:	211c      	movs	r1, #28
 8010d52:	4618      	mov	r0, r3
 8010d54:	f008 f81c 	bl	8018d90 <Crc32>
 8010d58:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d5e:	68ba      	ldr	r2, [r7, #8]
 8010d60:	429a      	cmp	r2, r3
 8010d62:	d006      	beq.n	8010d72 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	68ba      	ldr	r2, [r7, #8]
 8010d68:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8010d6a:	89fb      	ldrh	r3, [r7, #14]
 8010d6c:	f043 0302 	orr.w	r3, r3, #2
 8010d70:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	3348      	adds	r3, #72	; 0x48
 8010d76:	21fc      	movs	r1, #252	; 0xfc
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f008 f809 	bl	8018d90 <Crc32>
 8010d7e:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8010d86:	68ba      	ldr	r2, [r7, #8]
 8010d88:	429a      	cmp	r2, r3
 8010d8a:	d007      	beq.n	8010d9c <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	68ba      	ldr	r2, [r7, #8]
 8010d90:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8010d94:	89fb      	ldrh	r3, [r7, #14]
 8010d96:	f043 0304 	orr.w	r3, r3, #4
 8010d9a:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8010da2:	21d4      	movs	r1, #212	; 0xd4
 8010da4:	4618      	mov	r0, r3
 8010da6:	f007 fff3 	bl	8018d90 <Crc32>
 8010daa:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8010db2:	68ba      	ldr	r2, [r7, #8]
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d007      	beq.n	8010dc8 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	68ba      	ldr	r2, [r7, #8]
 8010dbc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8010dc0:	89fb      	ldrh	r3, [r7, #14]
 8010dc2:	f043 0308 	orr.w	r3, r3, #8
 8010dc6:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8010dce:	2190      	movs	r1, #144	; 0x90
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f007 ffdd 	bl	8018d90 <Crc32>
 8010dd6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010dde:	68ba      	ldr	r2, [r7, #8]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d007      	beq.n	8010df4 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	68ba      	ldr	r2, [r7, #8]
 8010de8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8010dec:	89fb      	ldrh	r3, [r7, #14]
 8010dee:	f043 0310 	orr.w	r3, r3, #16
 8010df2:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8010dfa:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f007 ffc6 	bl	8018d90 <Crc32>
 8010e04:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8010e0c:	68ba      	ldr	r2, [r7, #8]
 8010e0e:	429a      	cmp	r2, r3
 8010e10:	d007      	beq.n	8010e22 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	68ba      	ldr	r2, [r7, #8]
 8010e16:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8010e1a:	89fb      	ldrh	r3, [r7, #14]
 8010e1c:	f043 0320 	orr.w	r3, r3, #32
 8010e20:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 8010e28:	2114      	movs	r1, #20
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f007 ffb0 	bl	8018d90 <Crc32>
 8010e30:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8010e38:	68ba      	ldr	r2, [r7, #8]
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d007      	beq.n	8010e4e <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	68ba      	ldr	r2, [r7, #8]
 8010e42:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8010e46:	89fb      	ldrh	r3, [r7, #14]
 8010e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e4c:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8010e4e:	89fb      	ldrh	r3, [r7, #14]
 8010e50:	4618      	mov	r0, r3
 8010e52:	f001 ff51 	bl	8012cf8 <CallNvmDataChangeCallback>
 8010e56:	e000      	b.n	8010e5a <LoRaMacHandleNvm+0x14e>
        return;
 8010e58:	bf00      	nop
}
 8010e5a:	3710      	adds	r7, #16
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}
 8010e60:	20000954 	.word	0x20000954

08010e64 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b082      	sub	sp, #8
 8010e68:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8010e6e:	f7ff fd3d 	bl	80108ec <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8010e72:	f003 fd1a 	bl	80148aa <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8010e76:	4b25      	ldr	r3, [pc, #148]	; (8010f0c <LoRaMacProcess+0xa8>)
 8010e78:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010e7c:	f003 0310 	and.w	r3, r3, #16
 8010e80:	b2db      	uxtb	r3, r3
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d023      	beq.n	8010ece <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8010e86:	2000      	movs	r0, #0
 8010e88:	f7ff fda4 	bl	80109d4 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8010e8c:	f7ff ff1e 	bl	8010ccc <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8010e90:	f001 ffc2 	bl	8012e18 <IsRequestPending>
 8010e94:	4603      	mov	r3, r0
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d006      	beq.n	8010ea8 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8010e9a:	f7ff feef 	bl	8010c7c <LoRaMacCheckForBeaconAcquisition>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	79fb      	ldrb	r3, [r7, #7]
 8010ea4:	4313      	orrs	r3, r2
 8010ea6:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8010ea8:	79fb      	ldrb	r3, [r7, #7]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d103      	bne.n	8010eb6 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8010eae:	f7ff fea9 	bl	8010c04 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8010eb2:	f7ff fe39 	bl	8010b28 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8010eb6:	f7ff fd9d 	bl	80109f4 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010eba:	2001      	movs	r0, #1
 8010ebc:	f7ff fd8a 	bl	80109d4 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8010ec0:	4a12      	ldr	r2, [pc, #72]	; (8010f0c <LoRaMacProcess+0xa8>)
 8010ec2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010ec6:	f043 0320 	orr.w	r3, r3, #32
 8010eca:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    LoRaMacHandleIndicationEvents( );
 8010ece:	f7ff fdf3 	bl	8010ab8 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8010ed2:	4b0e      	ldr	r3, [pc, #56]	; (8010f0c <LoRaMacProcess+0xa8>)
 8010ed4:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8010ed8:	2b02      	cmp	r3, #2
 8010eda:	d101      	bne.n	8010ee0 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8010edc:	f001 fbb8 	bl	8012650 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8010ee0:	4b0a      	ldr	r3, [pc, #40]	; (8010f0c <LoRaMacProcess+0xa8>)
 8010ee2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010ee6:	f003 0320 	and.w	r3, r3, #32
 8010eea:	b2db      	uxtb	r3, r3
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d009      	beq.n	8010f04 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8010ef0:	4a06      	ldr	r2, [pc, #24]	; (8010f0c <LoRaMacProcess+0xa8>)
 8010ef2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010ef6:	f36f 1345 	bfc	r3, #5, #1
 8010efa:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        LoRaMacHandleNvm( &Nvm );
 8010efe:	4804      	ldr	r0, [pc, #16]	; (8010f10 <LoRaMacProcess+0xac>)
 8010f00:	f7ff ff04 	bl	8010d0c <LoRaMacHandleNvm>
    }
}
 8010f04:	bf00      	nop
 8010f06:	3708      	adds	r7, #8
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}
 8010f0c:	20000954 	.word	0x20000954
 8010f10:	20000e5c 	.word	0x20000e5c

08010f14 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010f1c:	4817      	ldr	r0, [pc, #92]	; (8010f7c <OnTxDelayedTimerEvent+0x68>)
 8010f1e:	f00c f87d 	bl	801d01c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010f22:	4b17      	ldr	r3, [pc, #92]	; (8010f80 <OnTxDelayedTimerEvent+0x6c>)
 8010f24:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010f28:	f023 0320 	bic.w	r3, r3, #32
 8010f2c:	4a14      	ldr	r2, [pc, #80]	; (8010f80 <OnTxDelayedTimerEvent+0x6c>)
 8010f2e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8010f32:	2001      	movs	r0, #1
 8010f34:	f001 f8e4 	bl	8012100 <ScheduleTx>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d018      	beq.n	8010f70 <OnTxDelayedTimerEvent+0x5c>
 8010f3e:	2b0b      	cmp	r3, #11
 8010f40:	d016      	beq.n	8010f70 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010f42:	4b10      	ldr	r3, [pc, #64]	; (8010f84 <OnTxDelayedTimerEvent+0x70>)
 8010f44:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010f48:	b2da      	uxtb	r2, r3
 8010f4a:	4b0d      	ldr	r3, [pc, #52]	; (8010f80 <OnTxDelayedTimerEvent+0x6c>)
 8010f4c:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010f50:	4b0b      	ldr	r3, [pc, #44]	; (8010f80 <OnTxDelayedTimerEvent+0x6c>)
 8010f52:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8010f56:	4b0a      	ldr	r3, [pc, #40]	; (8010f80 <OnTxDelayedTimerEvent+0x6c>)
 8010f58:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8010f5c:	4b08      	ldr	r3, [pc, #32]	; (8010f80 <OnTxDelayedTimerEvent+0x6c>)
 8010f5e:	2209      	movs	r2, #9
 8010f60:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8010f64:	2009      	movs	r0, #9
 8010f66:	f004 f8cb 	bl	8015100 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010f6a:	f001 fe73 	bl	8012c54 <StopRetransmission>
            break;
 8010f6e:	e000      	b.n	8010f72 <OnTxDelayedTimerEvent+0x5e>
            break;
 8010f70:	bf00      	nop
        }
    }
}
 8010f72:	bf00      	nop
 8010f74:	3708      	adds	r7, #8
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}
 8010f7a:	bf00      	nop
 8010f7c:	20000cbc 	.word	0x20000cbc
 8010f80:	20000954 	.word	0x20000954
 8010f84:	20000e5c 	.word	0x20000e5c

08010f88 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8010f90:	4b14      	ldr	r3, [pc, #80]	; (8010fe4 <OnRxWindow1TimerEvent+0x5c>)
 8010f92:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8010f96:	4b13      	ldr	r3, [pc, #76]	; (8010fe4 <OnRxWindow1TimerEvent+0x5c>)
 8010f98:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8010f9c:	4b12      	ldr	r3, [pc, #72]	; (8010fe8 <OnRxWindow1TimerEvent+0x60>)
 8010f9e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8010fa2:	b25a      	sxtb	r2, r3
 8010fa4:	4b0f      	ldr	r3, [pc, #60]	; (8010fe4 <OnRxWindow1TimerEvent+0x5c>)
 8010fa6:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010faa:	4b0f      	ldr	r3, [pc, #60]	; (8010fe8 <OnRxWindow1TimerEvent+0x60>)
 8010fac:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8010fb0:	4b0c      	ldr	r3, [pc, #48]	; (8010fe4 <OnRxWindow1TimerEvent+0x5c>)
 8010fb2:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010fb6:	4b0c      	ldr	r3, [pc, #48]	; (8010fe8 <OnRxWindow1TimerEvent+0x60>)
 8010fb8:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8010fbc:	4b09      	ldr	r3, [pc, #36]	; (8010fe4 <OnRxWindow1TimerEvent+0x5c>)
 8010fbe:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8010fc2:	4b08      	ldr	r3, [pc, #32]	; (8010fe4 <OnRxWindow1TimerEvent+0x5c>)
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8010fca:	4b06      	ldr	r3, [pc, #24]	; (8010fe4 <OnRxWindow1TimerEvent+0x5c>)
 8010fcc:	2200      	movs	r2, #0
 8010fce:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8010fd2:	4906      	ldr	r1, [pc, #24]	; (8010fec <OnRxWindow1TimerEvent+0x64>)
 8010fd4:	4806      	ldr	r0, [pc, #24]	; (8010ff0 <OnRxWindow1TimerEvent+0x68>)
 8010fd6:	f001 fb07 	bl	80125e8 <RxWindowSetup>
}
 8010fda:	bf00      	nop
 8010fdc:	3708      	adds	r7, #8
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	20000954 	.word	0x20000954
 8010fe8:	20000e5c 	.word	0x20000e5c
 8010fec:	20000d0c 	.word	0x20000d0c
 8010ff0:	20000cd4 	.word	0x20000cd4

08010ff4 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b082      	sub	sp, #8
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010ffc:	4b16      	ldr	r3, [pc, #88]	; (8011058 <OnRxWindow2TimerEvent+0x64>)
 8010ffe:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8011002:	2b00      	cmp	r3, #0
 8011004:	d023      	beq.n	801104e <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8011006:	4b14      	ldr	r3, [pc, #80]	; (8011058 <OnRxWindow2TimerEvent+0x64>)
 8011008:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 801100c:	4b12      	ldr	r3, [pc, #72]	; (8011058 <OnRxWindow2TimerEvent+0x64>)
 801100e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8011012:	4b12      	ldr	r3, [pc, #72]	; (801105c <OnRxWindow2TimerEvent+0x68>)
 8011014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011016:	4a10      	ldr	r2, [pc, #64]	; (8011058 <OnRxWindow2TimerEvent+0x64>)
 8011018:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801101c:	4b0f      	ldr	r3, [pc, #60]	; (801105c <OnRxWindow2TimerEvent+0x68>)
 801101e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8011022:	4b0d      	ldr	r3, [pc, #52]	; (8011058 <OnRxWindow2TimerEvent+0x64>)
 8011024:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011028:	4b0c      	ldr	r3, [pc, #48]	; (801105c <OnRxWindow2TimerEvent+0x68>)
 801102a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 801102e:	4b0a      	ldr	r3, [pc, #40]	; (8011058 <OnRxWindow2TimerEvent+0x64>)
 8011030:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011034:	4b08      	ldr	r3, [pc, #32]	; (8011058 <OnRxWindow2TimerEvent+0x64>)
 8011036:	2200      	movs	r2, #0
 8011038:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801103c:	4b06      	ldr	r3, [pc, #24]	; (8011058 <OnRxWindow2TimerEvent+0x64>)
 801103e:	2201      	movs	r2, #1
 8011040:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8011044:	4906      	ldr	r1, [pc, #24]	; (8011060 <OnRxWindow2TimerEvent+0x6c>)
 8011046:	4807      	ldr	r0, [pc, #28]	; (8011064 <OnRxWindow2TimerEvent+0x70>)
 8011048:	f001 face 	bl	80125e8 <RxWindowSetup>
 801104c:	e000      	b.n	8011050 <OnRxWindow2TimerEvent+0x5c>
        return;
 801104e:	bf00      	nop
}
 8011050:	3708      	adds	r7, #8
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}
 8011056:	bf00      	nop
 8011058:	20000954 	.word	0x20000954
 801105c:	20000e5c 	.word	0x20000e5c
 8011060:	20000d20 	.word	0x20000d20
 8011064:	20000cec 	.word	0x20000cec

08011068 <OnAckTimeoutTimerEvent>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8011070:	480e      	ldr	r0, [pc, #56]	; (80110ac <OnAckTimeoutTimerEvent+0x44>)
 8011072:	f00b ffd3 	bl	801d01c <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8011076:	4b0e      	ldr	r3, [pc, #56]	; (80110b0 <OnAckTimeoutTimerEvent+0x48>)
 8011078:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801107c:	2b00      	cmp	r3, #0
 801107e:	d003      	beq.n	8011088 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 8011080:	4b0b      	ldr	r3, [pc, #44]	; (80110b0 <OnAckTimeoutTimerEvent+0x48>)
 8011082:	2201      	movs	r2, #1
 8011084:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011088:	4b0a      	ldr	r3, [pc, #40]	; (80110b4 <OnAckTimeoutTimerEvent+0x4c>)
 801108a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801108e:	2b02      	cmp	r3, #2
 8011090:	d106      	bne.n	80110a0 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8011092:	4a07      	ldr	r2, [pc, #28]	; (80110b0 <OnAckTimeoutTimerEvent+0x48>)
 8011094:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011098:	f043 0310 	orr.w	r3, r3, #16
 801109c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    OnMacProcessNotify( );
 80110a0:	f001 fe14 	bl	8012ccc <OnMacProcessNotify>
}
 80110a4:	bf00      	nop
 80110a6:	3708      	adds	r7, #8
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}
 80110ac:	20000d48 	.word	0x20000d48
 80110b0:	20000954 	.word	0x20000954
 80110b4:	20000e5c 	.word	0x20000e5c

080110b8 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b084      	sub	sp, #16
 80110bc:	af00      	add	r7, sp, #0
 80110be:	60ba      	str	r2, [r7, #8]
 80110c0:	607b      	str	r3, [r7, #4]
 80110c2:	4603      	mov	r3, r0
 80110c4:	73fb      	strb	r3, [r7, #15]
 80110c6:	460b      	mov	r3, r1
 80110c8:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d005      	beq.n	80110dc <GetFCntDown+0x24>
 80110d0:	69fb      	ldr	r3, [r7, #28]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d002      	beq.n	80110dc <GetFCntDown+0x24>
 80110d6:	6a3b      	ldr	r3, [r7, #32]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d101      	bne.n	80110e0 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80110dc:	230a      	movs	r3, #10
 80110de:	e029      	b.n	8011134 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 80110e0:	7bfb      	ldrb	r3, [r7, #15]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d016      	beq.n	8011114 <GetFCntDown+0x5c>
 80110e6:	2b01      	cmp	r3, #1
 80110e8:	d118      	bne.n	801111c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 80110ea:	79bb      	ldrb	r3, [r7, #6]
 80110ec:	2b01      	cmp	r3, #1
 80110ee:	d10d      	bne.n	801110c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80110f0:	7bbb      	ldrb	r3, [r7, #14]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d002      	beq.n	80110fc <GetFCntDown+0x44>
 80110f6:	7bbb      	ldrb	r3, [r7, #14]
 80110f8:	2b03      	cmp	r3, #3
 80110fa:	d103      	bne.n	8011104 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 80110fc:	69fb      	ldr	r3, [r7, #28]
 80110fe:	2202      	movs	r2, #2
 8011100:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8011102:	e00d      	b.n	8011120 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8011104:	69fb      	ldr	r3, [r7, #28]
 8011106:	2201      	movs	r2, #1
 8011108:	701a      	strb	r2, [r3, #0]
            break;
 801110a:	e009      	b.n	8011120 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	2203      	movs	r2, #3
 8011110:	701a      	strb	r2, [r3, #0]
            break;
 8011112:	e005      	b.n	8011120 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8011114:	69fb      	ldr	r3, [r7, #28]
 8011116:	2204      	movs	r2, #4
 8011118:	701a      	strb	r2, [r3, #0]
            break;
 801111a:	e001      	b.n	8011120 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 801111c:	2305      	movs	r3, #5
 801111e:	e009      	b.n	8011134 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8011120:	69fb      	ldr	r3, [r7, #28]
 8011122:	7818      	ldrb	r0, [r3, #0]
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	89db      	ldrh	r3, [r3, #14]
 8011128:	461a      	mov	r2, r3
 801112a:	8b39      	ldrh	r1, [r7, #24]
 801112c:	6a3b      	ldr	r3, [r7, #32]
 801112e:	f004 fc25 	bl	801597c <LoRaMacCryptoGetFCntDown>
 8011132:	4603      	mov	r3, r0
}
 8011134:	4618      	mov	r0, r3
 8011136:	3710      	adds	r7, #16
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 801113c:	b5b0      	push	{r4, r5, r7, lr}
 801113e:	b084      	sub	sp, #16
 8011140:	af00      	add	r7, sp, #0
 8011142:	4603      	mov	r3, r0
 8011144:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011146:	2303      	movs	r3, #3
 8011148:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 801114a:	4b6d      	ldr	r3, [pc, #436]	; (8011300 <SwitchClass+0x1c4>)
 801114c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011150:	2b02      	cmp	r3, #2
 8011152:	f000 80b9 	beq.w	80112c8 <SwitchClass+0x18c>
 8011156:	2b02      	cmp	r3, #2
 8011158:	f300 80cc 	bgt.w	80112f4 <SwitchClass+0x1b8>
 801115c:	2b00      	cmp	r3, #0
 801115e:	d003      	beq.n	8011168 <SwitchClass+0x2c>
 8011160:	2b01      	cmp	r3, #1
 8011162:	f000 80a3 	beq.w	80112ac <SwitchClass+0x170>
 8011166:	e0c5      	b.n	80112f4 <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8011168:	79fb      	ldrb	r3, [r7, #7]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d109      	bne.n	8011182 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801116e:	4b64      	ldr	r3, [pc, #400]	; (8011300 <SwitchClass+0x1c4>)
 8011170:	4a63      	ldr	r2, [pc, #396]	; (8011300 <SwitchClass+0x1c4>)
 8011172:	3374      	adds	r3, #116	; 0x74
 8011174:	326c      	adds	r2, #108	; 0x6c
 8011176:	e892 0003 	ldmia.w	r2, {r0, r1}
 801117a:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 801117e:	2300      	movs	r3, #0
 8011180:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 8011182:	79fb      	ldrb	r3, [r7, #7]
 8011184:	2b01      	cmp	r3, #1
 8011186:	d10c      	bne.n	80111a2 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8011188:	79fb      	ldrb	r3, [r7, #7]
 801118a:	4618      	mov	r0, r3
 801118c:	f003 fb2f 	bl	80147ee <LoRaMacClassBSwitchClass>
 8011190:	4603      	mov	r3, r0
 8011192:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8011194:	7bfb      	ldrb	r3, [r7, #15]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d103      	bne.n	80111a2 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 801119a:	4a59      	ldr	r2, [pc, #356]	; (8011300 <SwitchClass+0x1c4>)
 801119c:	79fb      	ldrb	r3, [r7, #7]
 801119e:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 80111a2:	79fb      	ldrb	r3, [r7, #7]
 80111a4:	2b02      	cmp	r3, #2
 80111a6:	f040 80a0 	bne.w	80112ea <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80111aa:	4a55      	ldr	r2, [pc, #340]	; (8011300 <SwitchClass+0x1c4>)
 80111ac:	79fb      	ldrb	r3, [r7, #7]
 80111ae:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80111b2:	4a54      	ldr	r2, [pc, #336]	; (8011304 <SwitchClass+0x1c8>)
 80111b4:	4b53      	ldr	r3, [pc, #332]	; (8011304 <SwitchClass+0x1c8>)
 80111b6:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 80111ba:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 80111be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80111c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80111c2:	682b      	ldr	r3, [r5, #0]
 80111c4:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80111c6:	4b4f      	ldr	r3, [pc, #316]	; (8011304 <SwitchClass+0x1c8>)
 80111c8:	2202      	movs	r2, #2
 80111ca:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80111ce:	2300      	movs	r3, #0
 80111d0:	73bb      	strb	r3, [r7, #14]
 80111d2:	e05b      	b.n	801128c <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 80111d4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80111d8:	4949      	ldr	r1, [pc, #292]	; (8011300 <SwitchClass+0x1c4>)
 80111da:	4613      	mov	r3, r2
 80111dc:	005b      	lsls	r3, r3, #1
 80111de:	4413      	add	r3, r2
 80111e0:	011b      	lsls	r3, r3, #4
 80111e2:	440b      	add	r3, r1
 80111e4:	33e9      	adds	r3, #233	; 0xe9
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d049      	beq.n	8011280 <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 80111ec:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80111f0:	4943      	ldr	r1, [pc, #268]	; (8011300 <SwitchClass+0x1c4>)
 80111f2:	4613      	mov	r3, r2
 80111f4:	005b      	lsls	r3, r3, #1
 80111f6:	4413      	add	r3, r2
 80111f8:	011b      	lsls	r3, r3, #4
 80111fa:	440b      	add	r3, r1
 80111fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011200:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8011202:	2b02      	cmp	r3, #2
 8011204:	d13c      	bne.n	8011280 <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8011206:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801120a:	493d      	ldr	r1, [pc, #244]	; (8011300 <SwitchClass+0x1c4>)
 801120c:	4613      	mov	r3, r2
 801120e:	005b      	lsls	r3, r3, #1
 8011210:	4413      	add	r3, r2
 8011212:	011b      	lsls	r3, r3, #4
 8011214:	440b      	add	r3, r1
 8011216:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	4a38      	ldr	r2, [pc, #224]	; (8011300 <SwitchClass+0x1c4>)
 801121e:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8011220:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8011224:	4936      	ldr	r1, [pc, #216]	; (8011300 <SwitchClass+0x1c4>)
 8011226:	4613      	mov	r3, r2
 8011228:	005b      	lsls	r3, r3, #1
 801122a:	4413      	add	r3, r2
 801122c:	011b      	lsls	r3, r3, #4
 801122e:	440b      	add	r3, r1
 8011230:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8011234:	f993 3000 	ldrsb.w	r3, [r3]
 8011238:	b2da      	uxtb	r2, r3
 801123a:	4b31      	ldr	r3, [pc, #196]	; (8011300 <SwitchClass+0x1c4>)
 801123c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011240:	4b30      	ldr	r3, [pc, #192]	; (8011304 <SwitchClass+0x1c8>)
 8011242:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8011246:	4b2f      	ldr	r3, [pc, #188]	; (8011304 <SwitchClass+0x1c8>)
 8011248:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 801124c:	4b2c      	ldr	r3, [pc, #176]	; (8011300 <SwitchClass+0x1c4>)
 801124e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011250:	4a2c      	ldr	r2, [pc, #176]	; (8011304 <SwitchClass+0x1c8>)
 8011252:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011256:	4b2a      	ldr	r3, [pc, #168]	; (8011300 <SwitchClass+0x1c4>)
 8011258:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801125c:	4b29      	ldr	r3, [pc, #164]	; (8011304 <SwitchClass+0x1c8>)
 801125e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011262:	4b27      	ldr	r3, [pc, #156]	; (8011300 <SwitchClass+0x1c4>)
 8011264:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011268:	4b26      	ldr	r3, [pc, #152]	; (8011304 <SwitchClass+0x1c8>)
 801126a:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 801126e:	4b25      	ldr	r3, [pc, #148]	; (8011304 <SwitchClass+0x1c8>)
 8011270:	2203      	movs	r2, #3
 8011272:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8011276:	4b23      	ldr	r3, [pc, #140]	; (8011304 <SwitchClass+0x1c8>)
 8011278:	2201      	movs	r2, #1
 801127a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 801127e:	e009      	b.n	8011294 <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011280:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011284:	b2db      	uxtb	r3, r3
 8011286:	3301      	adds	r3, #1
 8011288:	b2db      	uxtb	r3, r3
 801128a:	73bb      	strb	r3, [r7, #14]
 801128c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011290:	2b00      	cmp	r3, #0
 8011292:	dd9f      	ble.n	80111d4 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8011294:	4b1b      	ldr	r3, [pc, #108]	; (8011304 <SwitchClass+0x1c8>)
 8011296:	2200      	movs	r2, #0
 8011298:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 801129c:	4b1a      	ldr	r3, [pc, #104]	; (8011308 <SwitchClass+0x1cc>)
 801129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112a0:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80112a2:	f001 f9d5 	bl	8012650 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 80112a6:	2300      	movs	r3, #0
 80112a8:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80112aa:	e01e      	b.n	80112ea <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 80112ac:	79fb      	ldrb	r3, [r7, #7]
 80112ae:	4618      	mov	r0, r3
 80112b0:	f003 fa9d 	bl	80147ee <LoRaMacClassBSwitchClass>
 80112b4:	4603      	mov	r3, r0
 80112b6:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 80112b8:	7bfb      	ldrb	r3, [r7, #15]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d117      	bne.n	80112ee <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80112be:	4a10      	ldr	r2, [pc, #64]	; (8011300 <SwitchClass+0x1c4>)
 80112c0:	79fb      	ldrb	r3, [r7, #7]
 80112c2:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 80112c6:	e012      	b.n	80112ee <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 80112c8:	79fb      	ldrb	r3, [r7, #7]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d111      	bne.n	80112f2 <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 80112ce:	4b0d      	ldr	r3, [pc, #52]	; (8011304 <SwitchClass+0x1c8>)
 80112d0:	2206      	movs	r2, #6
 80112d2:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 80112d6:	4a0a      	ldr	r2, [pc, #40]	; (8011300 <SwitchClass+0x1c4>)
 80112d8:	79fb      	ldrb	r3, [r7, #7]
 80112da:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 80112de:	4b0a      	ldr	r3, [pc, #40]	; (8011308 <SwitchClass+0x1cc>)
 80112e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112e2:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 80112e4:	2300      	movs	r3, #0
 80112e6:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 80112e8:	e003      	b.n	80112f2 <SwitchClass+0x1b6>
            break;
 80112ea:	bf00      	nop
 80112ec:	e002      	b.n	80112f4 <SwitchClass+0x1b8>
            break;
 80112ee:	bf00      	nop
 80112f0:	e000      	b.n	80112f4 <SwitchClass+0x1b8>
            break;
 80112f2:	bf00      	nop
        }
    }

    return status;
 80112f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3710      	adds	r7, #16
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bdb0      	pop	{r4, r5, r7, pc}
 80112fe:	bf00      	nop
 8011300:	20000e5c 	.word	0x20000e5c
 8011304:	20000954 	.word	0x20000954
 8011308:	0801e8c0 	.word	0x0801e8c0

0801130c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b086      	sub	sp, #24
 8011310:	af00      	add	r7, sp, #0
 8011312:	4603      	mov	r3, r0
 8011314:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011316:	4b10      	ldr	r3, [pc, #64]	; (8011358 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011318:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801131c:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 801131e:	79fb      	ldrb	r3, [r7, #7]
 8011320:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8011322:	230d      	movs	r3, #13
 8011324:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8011326:	4b0c      	ldr	r3, [pc, #48]	; (8011358 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011328:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 801132c:	2b00      	cmp	r3, #0
 801132e:	d001      	beq.n	8011334 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8011330:	230e      	movs	r3, #14
 8011332:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011334:	4b08      	ldr	r3, [pc, #32]	; (8011358 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011336:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801133a:	f107 0210 	add.w	r2, r7, #16
 801133e:	4611      	mov	r1, r2
 8011340:	4618      	mov	r0, r3
 8011342:	f005 f9b6 	bl	80166b2 <RegionGetPhyParam>
 8011346:	4603      	mov	r3, r0
 8011348:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	b2db      	uxtb	r3, r3
}
 801134e:	4618      	mov	r0, r3
 8011350:	3718      	adds	r7, #24
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}
 8011356:	bf00      	nop
 8011358:	20000e5c 	.word	0x20000e5c

0801135c <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
 8011362:	4603      	mov	r3, r0
 8011364:	71fb      	strb	r3, [r7, #7]
 8011366:	460b      	mov	r3, r1
 8011368:	71bb      	strb	r3, [r7, #6]
 801136a:	4613      	mov	r3, r2
 801136c:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 801136e:	2300      	movs	r3, #0
 8011370:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8011372:	2300      	movs	r3, #0
 8011374:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8011376:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801137a:	4618      	mov	r0, r3
 801137c:	f7ff ffc6 	bl	801130c <GetMaxAppPayloadWithoutFOptsLength>
 8011380:	4603      	mov	r3, r0
 8011382:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8011384:	79fb      	ldrb	r3, [r7, #7]
 8011386:	b29a      	uxth	r2, r3
 8011388:	797b      	ldrb	r3, [r7, #5]
 801138a:	b29b      	uxth	r3, r3
 801138c:	4413      	add	r3, r2
 801138e:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8011390:	89ba      	ldrh	r2, [r7, #12]
 8011392:	89fb      	ldrh	r3, [r7, #14]
 8011394:	429a      	cmp	r2, r3
 8011396:	d804      	bhi.n	80113a2 <ValidatePayloadLength+0x46>
 8011398:	89bb      	ldrh	r3, [r7, #12]
 801139a:	2bff      	cmp	r3, #255	; 0xff
 801139c:	d801      	bhi.n	80113a2 <ValidatePayloadLength+0x46>
    {
        return true;
 801139e:	2301      	movs	r3, #1
 80113a0:	e000      	b.n	80113a4 <ValidatePayloadLength+0x48>
    }
    return false;
 80113a2:	2300      	movs	r3, #0
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3710      	adds	r7, #16
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80113ac:	b590      	push	{r4, r7, lr}
 80113ae:	b0a5      	sub	sp, #148	; 0x94
 80113b0:	af02      	add	r7, sp, #8
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	4608      	mov	r0, r1
 80113b6:	4611      	mov	r1, r2
 80113b8:	461a      	mov	r2, r3
 80113ba:	4603      	mov	r3, r0
 80113bc:	70fb      	strb	r3, [r7, #3]
 80113be:	460b      	mov	r3, r1
 80113c0:	70bb      	strb	r3, [r7, #2]
 80113c2:	4613      	mov	r3, r2
 80113c4:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 80113c6:	2300      	movs	r3, #0
 80113c8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 80113cc:	2300      	movs	r3, #0
 80113ce:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80113d2:	2300      	movs	r3, #0
 80113d4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 80113d8:	f000 bc6d 	b.w	8011cb6 <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80113dc:	78fb      	ldrb	r3, [r7, #3]
 80113de:	687a      	ldr	r2, [r7, #4]
 80113e0:	4413      	add	r3, r2
 80113e2:	781b      	ldrb	r3, [r3, #0]
 80113e4:	4618      	mov	r0, r3
 80113e6:	f003 fce7 	bl	8014db8 <LoRaMacCommandsGetCmdSize>
 80113ea:	4603      	mov	r3, r0
 80113ec:	461a      	mov	r2, r3
 80113ee:	78fb      	ldrb	r3, [r7, #3]
 80113f0:	441a      	add	r2, r3
 80113f2:	78bb      	ldrb	r3, [r7, #2]
 80113f4:	429a      	cmp	r2, r3
 80113f6:	f300 8464 	bgt.w	8011cc2 <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 80113fa:	78fb      	ldrb	r3, [r7, #3]
 80113fc:	1c5a      	adds	r2, r3, #1
 80113fe:	70fa      	strb	r2, [r7, #3]
 8011400:	461a      	mov	r2, r3
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	4413      	add	r3, r2
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	3b02      	subs	r3, #2
 801140a:	2b11      	cmp	r3, #17
 801140c:	f200 845b 	bhi.w	8011cc6 <ProcessMacCommands+0x91a>
 8011410:	a201      	add	r2, pc, #4	; (adr r2, 8011418 <ProcessMacCommands+0x6c>)
 8011412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011416:	bf00      	nop
 8011418:	08011461 	.word	0x08011461
 801141c:	080114a3 	.word	0x080114a3
 8011420:	080115bf 	.word	0x080115bf
 8011424:	080115fd 	.word	0x080115fd
 8011428:	080116e9 	.word	0x080116e9
 801142c:	08011745 	.word	0x08011745
 8011430:	08011801 	.word	0x08011801
 8011434:	08011857 	.word	0x08011857
 8011438:	0801193d 	.word	0x0801193d
 801143c:	08011cc7 	.word	0x08011cc7
 8011440:	08011cc7 	.word	0x08011cc7
 8011444:	080119e1 	.word	0x080119e1
 8011448:	08011cc7 	.word	0x08011cc7
 801144c:	08011cc7 	.word	0x08011cc7
 8011450:	08011af7 	.word	0x08011af7
 8011454:	08011b2b 	.word	0x08011b2b
 8011458:	08011bbb 	.word	0x08011bbb
 801145c:	08011c31 	.word	0x08011c31
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8011460:	2005      	movs	r0, #5
 8011462:	f003 fe81 	bl	8015168 <LoRaMacConfirmQueueIsCmdActive>
 8011466:	4603      	mov	r3, r0
 8011468:	2b00      	cmp	r3, #0
 801146a:	f000 8424 	beq.w	8011cb6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 801146e:	2105      	movs	r1, #5
 8011470:	2000      	movs	r0, #0
 8011472:	f003 fded 	bl	8015050 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8011476:	78fb      	ldrb	r3, [r7, #3]
 8011478:	1c5a      	adds	r2, r3, #1
 801147a:	70fa      	strb	r2, [r7, #3]
 801147c:	461a      	mov	r2, r3
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	4413      	add	r3, r2
 8011482:	781a      	ldrb	r2, [r3, #0]
 8011484:	4bac      	ldr	r3, [pc, #688]	; (8011738 <ProcessMacCommands+0x38c>)
 8011486:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 801148a:	78fb      	ldrb	r3, [r7, #3]
 801148c:	1c5a      	adds	r2, r3, #1
 801148e:	70fa      	strb	r2, [r7, #3]
 8011490:	461a      	mov	r2, r3
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	4413      	add	r3, r2
 8011496:	781a      	ldrb	r2, [r3, #0]
 8011498:	4ba7      	ldr	r3, [pc, #668]	; (8011738 <ProcessMacCommands+0x38c>)
 801149a:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
                }
                break;
 801149e:	f000 bc0a 	b.w	8011cb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80114a2:	2300      	movs	r3, #0
 80114a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 80114a8:	2300      	movs	r3, #0
 80114aa:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 80114ae:	2300      	movs	r3, #0
 80114b0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 80114b4:	2300      	movs	r3, #0
 80114b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 80114ba:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80114be:	f083 0301 	eor.w	r3, r3, #1
 80114c2:	b2db      	uxtb	r3, r3
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d078      	beq.n	80115ba <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 80114c8:	2301      	movs	r3, #1
 80114ca:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80114ce:	78fb      	ldrb	r3, [r7, #3]
 80114d0:	3b01      	subs	r3, #1
 80114d2:	687a      	ldr	r2, [r7, #4]
 80114d4:	4413      	add	r3, r2
 80114d6:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80114d8:	78ba      	ldrb	r2, [r7, #2]
 80114da:	78fb      	ldrb	r3, [r7, #3]
 80114dc:	1ad3      	subs	r3, r2, r3
 80114de:	b2db      	uxtb	r3, r3
 80114e0:	3301      	adds	r3, #1
 80114e2:	b2db      	uxtb	r3, r3
 80114e4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80114e8:	4b94      	ldr	r3, [pc, #592]	; (801173c <ProcessMacCommands+0x390>)
 80114ea:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80114ee:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80114f2:	4b92      	ldr	r3, [pc, #584]	; (801173c <ProcessMacCommands+0x390>)
 80114f4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80114f8:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80114fc:	4b8f      	ldr	r3, [pc, #572]	; (801173c <ProcessMacCommands+0x390>)
 80114fe:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011502:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011506:	4b8d      	ldr	r3, [pc, #564]	; (801173c <ProcessMacCommands+0x390>)
 8011508:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801150c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011510:	4b8a      	ldr	r3, [pc, #552]	; (801173c <ProcessMacCommands+0x390>)
 8011512:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8011516:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 801151a:	4b88      	ldr	r3, [pc, #544]	; (801173c <ProcessMacCommands+0x390>)
 801151c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8011520:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8011522:	4b86      	ldr	r3, [pc, #536]	; (801173c <ProcessMacCommands+0x390>)
 8011524:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8011528:	f107 0456 	add.w	r4, r7, #86	; 0x56
 801152c:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8011530:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011534:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011538:	9301      	str	r3, [sp, #4]
 801153a:	f107 0355 	add.w	r3, r7, #85	; 0x55
 801153e:	9300      	str	r3, [sp, #0]
 8011540:	4623      	mov	r3, r4
 8011542:	f005 f973 	bl	801682c <RegionLinkAdrReq>
 8011546:	4603      	mov	r3, r0
 8011548:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 801154c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011550:	f003 0307 	and.w	r3, r3, #7
 8011554:	2b07      	cmp	r3, #7
 8011556:	d10e      	bne.n	8011576 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8011558:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 801155c:	4b77      	ldr	r3, [pc, #476]	; (801173c <ProcessMacCommands+0x390>)
 801155e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8011562:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8011566:	4b75      	ldr	r3, [pc, #468]	; (801173c <ProcessMacCommands+0x390>)
 8011568:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 801156c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8011570:	4b72      	ldr	r3, [pc, #456]	; (801173c <ProcessMacCommands+0x390>)
 8011572:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8011576:	2300      	movs	r3, #0
 8011578:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 801157c:	e00b      	b.n	8011596 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 801157e:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8011582:	2201      	movs	r2, #1
 8011584:	4619      	mov	r1, r3
 8011586:	2003      	movs	r0, #3
 8011588:	f003 fab6 	bl	8014af8 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801158c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8011590:	3301      	adds	r3, #1
 8011592:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8011596:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801159a:	4a69      	ldr	r2, [pc, #420]	; (8011740 <ProcessMacCommands+0x394>)
 801159c:	fba2 2303 	umull	r2, r3, r2, r3
 80115a0:	089b      	lsrs	r3, r3, #2
 80115a2:	b2db      	uxtb	r3, r3
 80115a4:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80115a8:	429a      	cmp	r2, r3
 80115aa:	d3e8      	bcc.n	801157e <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 80115ac:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80115b0:	78fb      	ldrb	r3, [r7, #3]
 80115b2:	4413      	add	r3, r2
 80115b4:	b2db      	uxtb	r3, r3
 80115b6:	3b01      	subs	r3, #1
 80115b8:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80115ba:	bf00      	nop
 80115bc:	e37b      	b.n	8011cb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80115be:	78fb      	ldrb	r3, [r7, #3]
 80115c0:	1c5a      	adds	r2, r3, #1
 80115c2:	70fa      	strb	r2, [r7, #3]
 80115c4:	461a      	mov	r2, r3
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	4413      	add	r3, r2
 80115ca:	781b      	ldrb	r3, [r3, #0]
 80115cc:	f003 030f 	and.w	r3, r3, #15
 80115d0:	b2da      	uxtb	r2, r3
 80115d2:	4b5a      	ldr	r3, [pc, #360]	; (801173c <ProcessMacCommands+0x390>)
 80115d4:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80115d8:	4b58      	ldr	r3, [pc, #352]	; (801173c <ProcessMacCommands+0x390>)
 80115da:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 80115de:	461a      	mov	r2, r3
 80115e0:	2301      	movs	r3, #1
 80115e2:	4093      	lsls	r3, r2
 80115e4:	b29a      	uxth	r2, r3
 80115e6:	4b55      	ldr	r3, [pc, #340]	; (801173c <ProcessMacCommands+0x390>)
 80115e8:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80115ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80115f0:	2200      	movs	r2, #0
 80115f2:	4619      	mov	r1, r3
 80115f4:	2004      	movs	r0, #4
 80115f6:	f003 fa7f 	bl	8014af8 <LoRaMacCommandsAddCmd>
                break;
 80115fa:	e35c      	b.n	8011cb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 80115fc:	2307      	movs	r3, #7
 80115fe:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8011602:	78fb      	ldrb	r3, [r7, #3]
 8011604:	687a      	ldr	r2, [r7, #4]
 8011606:	4413      	add	r3, r2
 8011608:	781b      	ldrb	r3, [r3, #0]
 801160a:	091b      	lsrs	r3, r3, #4
 801160c:	b2db      	uxtb	r3, r3
 801160e:	b25b      	sxtb	r3, r3
 8011610:	f003 0307 	and.w	r3, r3, #7
 8011614:	b25b      	sxtb	r3, r3
 8011616:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801161a:	78fb      	ldrb	r3, [r7, #3]
 801161c:	687a      	ldr	r2, [r7, #4]
 801161e:	4413      	add	r3, r2
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	b25b      	sxtb	r3, r3
 8011624:	f003 030f 	and.w	r3, r3, #15
 8011628:	b25b      	sxtb	r3, r3
 801162a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 801162e:	78fb      	ldrb	r3, [r7, #3]
 8011630:	3301      	adds	r3, #1
 8011632:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8011634:	78fb      	ldrb	r3, [r7, #3]
 8011636:	1c5a      	adds	r2, r3, #1
 8011638:	70fa      	strb	r2, [r7, #3]
 801163a:	461a      	mov	r2, r3
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	4413      	add	r3, r2
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011644:	78fb      	ldrb	r3, [r7, #3]
 8011646:	1c5a      	adds	r2, r3, #1
 8011648:	70fa      	strb	r2, [r7, #3]
 801164a:	461a      	mov	r2, r3
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	4413      	add	r3, r2
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	021a      	lsls	r2, r3, #8
 8011654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011656:	4313      	orrs	r3, r2
 8011658:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801165a:	78fb      	ldrb	r3, [r7, #3]
 801165c:	1c5a      	adds	r2, r3, #1
 801165e:	70fa      	strb	r2, [r7, #3]
 8011660:	461a      	mov	r2, r3
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	4413      	add	r3, r2
 8011666:	781b      	ldrb	r3, [r3, #0]
 8011668:	041a      	lsls	r2, r3, #16
 801166a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801166c:	4313      	orrs	r3, r2
 801166e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8011670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011672:	2264      	movs	r2, #100	; 0x64
 8011674:	fb02 f303 	mul.w	r3, r2, r3
 8011678:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 801167a:	4b30      	ldr	r3, [pc, #192]	; (801173c <ProcessMacCommands+0x390>)
 801167c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011680:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8011684:	4611      	mov	r1, r2
 8011686:	4618      	mov	r0, r3
 8011688:	f005 f8ea 	bl	8016860 <RegionRxParamSetupReq>
 801168c:	4603      	mov	r3, r0
 801168e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8011692:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011696:	f003 0307 	and.w	r3, r3, #7
 801169a:	2b07      	cmp	r3, #7
 801169c:	d117      	bne.n	80116ce <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 801169e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80116a2:	b2da      	uxtb	r2, r3
 80116a4:	4b25      	ldr	r3, [pc, #148]	; (801173c <ProcessMacCommands+0x390>)
 80116a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80116aa:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80116ae:	b2da      	uxtb	r2, r3
 80116b0:	4b22      	ldr	r3, [pc, #136]	; (801173c <ProcessMacCommands+0x390>)
 80116b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80116b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116b8:	4a20      	ldr	r2, [pc, #128]	; (801173c <ProcessMacCommands+0x390>)
 80116ba:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80116bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116be:	4a1f      	ldr	r2, [pc, #124]	; (801173c <ProcessMacCommands+0x390>)
 80116c0:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80116c2:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80116c6:	b2da      	uxtb	r2, r3
 80116c8:	4b1c      	ldr	r3, [pc, #112]	; (801173c <ProcessMacCommands+0x390>)
 80116ca:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 80116ce:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80116d2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80116d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80116da:	2201      	movs	r2, #1
 80116dc:	4619      	mov	r1, r3
 80116de:	2005      	movs	r0, #5
 80116e0:	f003 fa0a 	bl	8014af8 <LoRaMacCommandsAddCmd>
                break;
 80116e4:	bf00      	nop
 80116e6:	e2e6      	b.n	8011cb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80116e8:	23ff      	movs	r3, #255	; 0xff
 80116ea:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80116ee:	4b12      	ldr	r3, [pc, #72]	; (8011738 <ProcessMacCommands+0x38c>)
 80116f0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d00d      	beq.n	8011714 <ProcessMacCommands+0x368>
 80116f8:	4b0f      	ldr	r3, [pc, #60]	; (8011738 <ProcessMacCommands+0x38c>)
 80116fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d007      	beq.n	8011714 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8011704:	4b0c      	ldr	r3, [pc, #48]	; (8011738 <ProcessMacCommands+0x38c>)
 8011706:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	4798      	blx	r3
 801170e:	4603      	mov	r3, r0
 8011710:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8011714:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8011718:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 801171c:	787b      	ldrb	r3, [r7, #1]
 801171e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011722:	b2db      	uxtb	r3, r3
 8011724:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8011728:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801172c:	2202      	movs	r2, #2
 801172e:	4619      	mov	r1, r3
 8011730:	2006      	movs	r0, #6
 8011732:	f003 f9e1 	bl	8014af8 <LoRaMacCommandsAddCmd>
                break;
 8011736:	e2be      	b.n	8011cb6 <ProcessMacCommands+0x90a>
 8011738:	20000954 	.word	0x20000954
 801173c:	20000e5c 	.word	0x20000e5c
 8011740:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8011744:	2303      	movs	r3, #3
 8011746:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 801174a:	78fb      	ldrb	r3, [r7, #3]
 801174c:	1c5a      	adds	r2, r3, #1
 801174e:	70fa      	strb	r2, [r7, #3]
 8011750:	461a      	mov	r2, r3
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	4413      	add	r3, r2
 8011756:	781b      	ldrb	r3, [r3, #0]
 8011758:	b25b      	sxtb	r3, r3
 801175a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 801175e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011762:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8011764:	78fb      	ldrb	r3, [r7, #3]
 8011766:	1c5a      	adds	r2, r3, #1
 8011768:	70fa      	strb	r2, [r7, #3]
 801176a:	461a      	mov	r2, r3
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	4413      	add	r3, r2
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011774:	78fb      	ldrb	r3, [r7, #3]
 8011776:	1c5a      	adds	r2, r3, #1
 8011778:	70fa      	strb	r2, [r7, #3]
 801177a:	461a      	mov	r2, r3
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	4413      	add	r3, r2
 8011780:	781b      	ldrb	r3, [r3, #0]
 8011782:	021a      	lsls	r2, r3, #8
 8011784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011786:	4313      	orrs	r3, r2
 8011788:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801178a:	78fb      	ldrb	r3, [r7, #3]
 801178c:	1c5a      	adds	r2, r3, #1
 801178e:	70fa      	strb	r2, [r7, #3]
 8011790:	461a      	mov	r2, r3
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	4413      	add	r3, r2
 8011796:	781b      	ldrb	r3, [r3, #0]
 8011798:	041a      	lsls	r2, r3, #16
 801179a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801179c:	4313      	orrs	r3, r2
 801179e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 80117a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a2:	2264      	movs	r2, #100	; 0x64
 80117a4:	fb02 f303 	mul.w	r3, r2, r3
 80117a8:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 80117aa:	2300      	movs	r3, #0
 80117ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80117ae:	78fb      	ldrb	r3, [r7, #3]
 80117b0:	1c5a      	adds	r2, r3, #1
 80117b2:	70fa      	strb	r2, [r7, #3]
 80117b4:	461a      	mov	r2, r3
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	4413      	add	r3, r2
 80117ba:	781b      	ldrb	r3, [r3, #0]
 80117bc:	b25b      	sxtb	r3, r3
 80117be:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80117c2:	4b85      	ldr	r3, [pc, #532]	; (80119d8 <ProcessMacCommands+0x62c>)
 80117c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80117c8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80117cc:	4611      	mov	r1, r2
 80117ce:	4618      	mov	r0, r3
 80117d0:	f005 f859 	bl	8016886 <RegionNewChannelReq>
 80117d4:	4603      	mov	r3, r0
 80117d6:	b2db      	uxtb	r3, r3
 80117d8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80117dc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80117e0:	b25b      	sxtb	r3, r3
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	db0a      	blt.n	80117fc <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 80117e6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80117ea:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80117ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80117f2:	2201      	movs	r2, #1
 80117f4:	4619      	mov	r1, r3
 80117f6:	2007      	movs	r0, #7
 80117f8:	f003 f97e 	bl	8014af8 <LoRaMacCommandsAddCmd>
                }
                break;
 80117fc:	bf00      	nop
 80117fe:	e25a      	b.n	8011cb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8011800:	78fb      	ldrb	r3, [r7, #3]
 8011802:	1c5a      	adds	r2, r3, #1
 8011804:	70fa      	strb	r2, [r7, #3]
 8011806:	461a      	mov	r2, r3
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	4413      	add	r3, r2
 801180c:	781b      	ldrb	r3, [r3, #0]
 801180e:	f003 030f 	and.w	r3, r3, #15
 8011812:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8011816:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801181a:	2b00      	cmp	r3, #0
 801181c:	d104      	bne.n	8011828 <ProcessMacCommands+0x47c>
                {
                    delay++;
 801181e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8011822:	3301      	adds	r3, #1
 8011824:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8011828:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801182c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011830:	fb02 f303 	mul.w	r3, r2, r3
 8011834:	461a      	mov	r2, r3
 8011836:	4b68      	ldr	r3, [pc, #416]	; (80119d8 <ProcessMacCommands+0x62c>)
 8011838:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801183a:	4b67      	ldr	r3, [pc, #412]	; (80119d8 <ProcessMacCommands+0x62c>)
 801183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801183e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8011842:	4a65      	ldr	r2, [pc, #404]	; (80119d8 <ProcessMacCommands+0x62c>)
 8011844:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8011846:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801184a:	2200      	movs	r2, #0
 801184c:	4619      	mov	r1, r3
 801184e:	2008      	movs	r0, #8
 8011850:	f003 f952 	bl	8014af8 <LoRaMacCommandsAddCmd>
                break;
 8011854:	e22f      	b.n	8011cb6 <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8011856:	78fb      	ldrb	r3, [r7, #3]
 8011858:	1c5a      	adds	r2, r3, #1
 801185a:	70fa      	strb	r2, [r7, #3]
 801185c:	461a      	mov	r2, r3
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	4413      	add	r3, r2
 8011862:	781b      	ldrb	r3, [r3, #0]
 8011864:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8011868:	2300      	movs	r3, #0
 801186a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 801186e:	2300      	movs	r3, #0
 8011870:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8011874:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011878:	f003 0320 	and.w	r3, r3, #32
 801187c:	2b00      	cmp	r3, #0
 801187e:	d002      	beq.n	8011886 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8011880:	2301      	movs	r3, #1
 8011882:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8011886:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801188a:	f003 0310 	and.w	r3, r3, #16
 801188e:	2b00      	cmp	r3, #0
 8011890:	d002      	beq.n	8011898 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8011892:	2301      	movs	r3, #1
 8011894:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8011898:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801189c:	f003 030f 	and.w	r3, r3, #15
 80118a0:	b2db      	uxtb	r3, r3
 80118a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80118a6:	4b4c      	ldr	r3, [pc, #304]	; (80119d8 <ProcessMacCommands+0x62c>)
 80118a8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80118ac:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80118b0:	4611      	mov	r1, r2
 80118b2:	4618      	mov	r0, r3
 80118b4:	f004 fffa 	bl	80168ac <RegionTxParamSetupReq>
 80118b8:	4603      	mov	r3, r0
 80118ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118be:	d03b      	beq.n	8011938 <ProcessMacCommands+0x58c>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80118c0:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80118c4:	4b44      	ldr	r3, [pc, #272]	; (80119d8 <ProcessMacCommands+0x62c>)
 80118c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80118ca:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80118ce:	4b42      	ldr	r3, [pc, #264]	; (80119d8 <ProcessMacCommands+0x62c>)
 80118d0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80118d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80118d8:	461a      	mov	r2, r3
 80118da:	4b40      	ldr	r3, [pc, #256]	; (80119dc <ProcessMacCommands+0x630>)
 80118dc:	5c9b      	ldrb	r3, [r3, r2]
 80118de:	4618      	mov	r0, r3
 80118e0:	f7ef f9d6 	bl	8000c90 <__aeabi_ui2f>
 80118e4:	4603      	mov	r3, r0
 80118e6:	4a3c      	ldr	r2, [pc, #240]	; (80119d8 <ProcessMacCommands+0x62c>)
 80118e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80118ec:	2302      	movs	r3, #2
 80118ee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80118f2:	4b39      	ldr	r3, [pc, #228]	; (80119d8 <ProcessMacCommands+0x62c>)
 80118f4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80118f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80118fc:	4b36      	ldr	r3, [pc, #216]	; (80119d8 <ProcessMacCommands+0x62c>)
 80118fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011902:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011906:	4611      	mov	r1, r2
 8011908:	4618      	mov	r0, r3
 801190a:	f004 fed2 	bl	80166b2 <RegionGetPhyParam>
 801190e:	4603      	mov	r3, r0
 8011910:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8011912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011914:	b25a      	sxtb	r2, r3
 8011916:	4b30      	ldr	r3, [pc, #192]	; (80119d8 <ProcessMacCommands+0x62c>)
 8011918:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801191c:	4293      	cmp	r3, r2
 801191e:	bfb8      	it	lt
 8011920:	4613      	movlt	r3, r2
 8011922:	b25a      	sxtb	r2, r3
 8011924:	4b2c      	ldr	r3, [pc, #176]	; (80119d8 <ProcessMacCommands+0x62c>)
 8011926:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 801192a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801192e:	2200      	movs	r2, #0
 8011930:	4619      	mov	r1, r3
 8011932:	2009      	movs	r0, #9
 8011934:	f003 f8e0 	bl	8014af8 <LoRaMacCommandsAddCmd>
                }
                break;
 8011938:	bf00      	nop
 801193a:	e1bc      	b.n	8011cb6 <ProcessMacCommands+0x90a>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 801193c:	2303      	movs	r3, #3
 801193e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8011942:	78fb      	ldrb	r3, [r7, #3]
 8011944:	1c5a      	adds	r2, r3, #1
 8011946:	70fa      	strb	r2, [r7, #3]
 8011948:	461a      	mov	r2, r3
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	4413      	add	r3, r2
 801194e:	781b      	ldrb	r3, [r3, #0]
 8011950:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8011954:	78fb      	ldrb	r3, [r7, #3]
 8011956:	1c5a      	adds	r2, r3, #1
 8011958:	70fa      	strb	r2, [r7, #3]
 801195a:	461a      	mov	r2, r3
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	4413      	add	r3, r2
 8011960:	781b      	ldrb	r3, [r3, #0]
 8011962:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011964:	78fb      	ldrb	r3, [r7, #3]
 8011966:	1c5a      	adds	r2, r3, #1
 8011968:	70fa      	strb	r2, [r7, #3]
 801196a:	461a      	mov	r2, r3
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	4413      	add	r3, r2
 8011970:	781b      	ldrb	r3, [r3, #0]
 8011972:	021a      	lsls	r2, r3, #8
 8011974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011976:	4313      	orrs	r3, r2
 8011978:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801197a:	78fb      	ldrb	r3, [r7, #3]
 801197c:	1c5a      	adds	r2, r3, #1
 801197e:	70fa      	strb	r2, [r7, #3]
 8011980:	461a      	mov	r2, r3
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	4413      	add	r3, r2
 8011986:	781b      	ldrb	r3, [r3, #0]
 8011988:	041a      	lsls	r2, r3, #16
 801198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801198c:	4313      	orrs	r3, r2
 801198e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8011990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011992:	2264      	movs	r2, #100	; 0x64
 8011994:	fb02 f303 	mul.w	r3, r2, r3
 8011998:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 801199a:	4b0f      	ldr	r3, [pc, #60]	; (80119d8 <ProcessMacCommands+0x62c>)
 801199c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80119a0:	f107 0220 	add.w	r2, r7, #32
 80119a4:	4611      	mov	r1, r2
 80119a6:	4618      	mov	r0, r3
 80119a8:	f004 ff93 	bl	80168d2 <RegionDlChannelReq>
 80119ac:	4603      	mov	r3, r0
 80119ae:	b2db      	uxtb	r3, r3
 80119b0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80119b4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80119b8:	b25b      	sxtb	r3, r3
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	db0a      	blt.n	80119d4 <ProcessMacCommands+0x628>
                {
                    macCmdPayload[0] = status;
 80119be:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80119c2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80119c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80119ca:	2201      	movs	r2, #1
 80119cc:	4619      	mov	r1, r3
 80119ce:	200a      	movs	r0, #10
 80119d0:	f003 f892 	bl	8014af8 <LoRaMacCommandsAddCmd>
                }
                break;
 80119d4:	bf00      	nop
 80119d6:	e16e      	b.n	8011cb6 <ProcessMacCommands+0x90a>
 80119d8:	20000e5c 	.word	0x20000e5c
 80119dc:	0801e878 	.word	0x0801e878
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80119e0:	200a      	movs	r0, #10
 80119e2:	f003 fbc1 	bl	8015168 <LoRaMacConfirmQueueIsCmdActive>
 80119e6:	4603      	mov	r3, r0
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	f000 8164 	beq.w	8011cb6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80119ee:	210a      	movs	r1, #10
 80119f0:	2000      	movs	r0, #0
 80119f2:	f003 fb2d 	bl	8015050 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 80119f6:	f107 0318 	add.w	r3, r7, #24
 80119fa:	2200      	movs	r2, #0
 80119fc:	601a      	str	r2, [r3, #0]
 80119fe:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8011a00:	f107 0310 	add.w	r3, r7, #16
 8011a04:	2200      	movs	r2, #0
 8011a06:	601a      	str	r2, [r3, #0]
 8011a08:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8011a0a:	f107 0308 	add.w	r3, r7, #8
 8011a0e:	2200      	movs	r2, #0
 8011a10:	601a      	str	r2, [r3, #0]
 8011a12:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8011a14:	78fb      	ldrb	r3, [r7, #3]
 8011a16:	1c5a      	adds	r2, r3, #1
 8011a18:	70fa      	strb	r2, [r7, #3]
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	4413      	add	r3, r2
 8011a20:	781b      	ldrb	r3, [r3, #0]
 8011a22:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8011a24:	78fb      	ldrb	r3, [r7, #3]
 8011a26:	1c5a      	adds	r2, r3, #1
 8011a28:	70fa      	strb	r2, [r7, #3]
 8011a2a:	461a      	mov	r2, r3
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	4413      	add	r3, r2
 8011a30:	781b      	ldrb	r3, [r3, #0]
 8011a32:	021a      	lsls	r2, r3, #8
 8011a34:	69bb      	ldr	r3, [r7, #24]
 8011a36:	4313      	orrs	r3, r2
 8011a38:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8011a3a:	78fb      	ldrb	r3, [r7, #3]
 8011a3c:	1c5a      	adds	r2, r3, #1
 8011a3e:	70fa      	strb	r2, [r7, #3]
 8011a40:	461a      	mov	r2, r3
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	4413      	add	r3, r2
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	041a      	lsls	r2, r3, #16
 8011a4a:	69bb      	ldr	r3, [r7, #24]
 8011a4c:	4313      	orrs	r3, r2
 8011a4e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8011a50:	78fb      	ldrb	r3, [r7, #3]
 8011a52:	1c5a      	adds	r2, r3, #1
 8011a54:	70fa      	strb	r2, [r7, #3]
 8011a56:	461a      	mov	r2, r3
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	4413      	add	r3, r2
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	061a      	lsls	r2, r3, #24
 8011a60:	69bb      	ldr	r3, [r7, #24]
 8011a62:	4313      	orrs	r3, r2
 8011a64:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8011a66:	78fb      	ldrb	r3, [r7, #3]
 8011a68:	1c5a      	adds	r2, r3, #1
 8011a6a:	70fa      	strb	r2, [r7, #3]
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	4413      	add	r3, r2
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	b21b      	sxth	r3, r3
 8011a76:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8011a78:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8011a7c:	461a      	mov	r2, r3
 8011a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011a82:	fb02 f303 	mul.w	r3, r2, r3
 8011a86:	121b      	asrs	r3, r3, #8
 8011a88:	b21b      	sxth	r3, r3
 8011a8a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8011a8c:	f107 0310 	add.w	r3, r7, #16
 8011a90:	f107 0218 	add.w	r2, r7, #24
 8011a94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a98:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8011a9c:	693a      	ldr	r2, [r7, #16]
 8011a9e:	4b8c      	ldr	r3, [pc, #560]	; (8011cd0 <ProcessMacCommands+0x924>)
 8011aa0:	4413      	add	r3, r2
 8011aa2:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8011aa4:	f107 0308 	add.w	r3, r7, #8
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f00a fd4f 	bl	801c54c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8011aae:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8011ab2:	4b88      	ldr	r3, [pc, #544]	; (8011cd4 <ProcessMacCommands+0x928>)
 8011ab4:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8011ab8:	9200      	str	r2, [sp, #0]
 8011aba:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8011abe:	f107 0210 	add.w	r2, r7, #16
 8011ac2:	ca06      	ldmia	r2, {r1, r2}
 8011ac4:	f00a fcdb 	bl	801c47e <SysTimeSub>
 8011ac8:	f107 0010 	add.w	r0, r7, #16
 8011acc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ace:	9300      	str	r3, [sp, #0]
 8011ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ad2:	f107 0208 	add.w	r2, r7, #8
 8011ad6:	ca06      	ldmia	r2, {r1, r2}
 8011ad8:	f00a fc98 	bl	801c40c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8011adc:	f107 0310 	add.w	r3, r7, #16
 8011ae0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011ae4:	f00a fd04 	bl	801c4f0 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8011ae8:	f002 febf 	bl	801486a <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8011aec:	4b79      	ldr	r3, [pc, #484]	; (8011cd4 <ProcessMacCommands+0x928>)
 8011aee:	2201      	movs	r2, #1
 8011af0:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8011af4:	e0df      	b.n	8011cb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8011af6:	200d      	movs	r0, #13
 8011af8:	f003 fb36 	bl	8015168 <LoRaMacConfirmQueueIsCmdActive>
 8011afc:	4603      	mov	r3, r0
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	f000 80d9 	beq.w	8011cb6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8011b04:	210d      	movs	r1, #13
 8011b06:	2000      	movs	r0, #0
 8011b08:	f003 faa2 	bl	8015050 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8011b0c:	4b71      	ldr	r3, [pc, #452]	; (8011cd4 <ProcessMacCommands+0x928>)
 8011b0e:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8011b12:	2b04      	cmp	r3, #4
 8011b14:	f000 80cf 	beq.w	8011cb6 <ProcessMacCommands+0x90a>
 8011b18:	4b6e      	ldr	r3, [pc, #440]	; (8011cd4 <ProcessMacCommands+0x928>)
 8011b1a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8011b1e:	2b05      	cmp	r3, #5
 8011b20:	f000 80c9 	beq.w	8011cb6 <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8011b24:	f002 fe82 	bl	801482c <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8011b28:	e0c5      	b.n	8011cb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8011b2a:	2303      	movs	r3, #3
 8011b2c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8011b30:	2300      	movs	r3, #0
 8011b32:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8011b34:	78fb      	ldrb	r3, [r7, #3]
 8011b36:	1c5a      	adds	r2, r3, #1
 8011b38:	70fa      	strb	r2, [r7, #3]
 8011b3a:	461a      	mov	r2, r3
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	4413      	add	r3, r2
 8011b40:	781b      	ldrb	r3, [r3, #0]
 8011b42:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011b44:	78fb      	ldrb	r3, [r7, #3]
 8011b46:	1c5a      	adds	r2, r3, #1
 8011b48:	70fa      	strb	r2, [r7, #3]
 8011b4a:	461a      	mov	r2, r3
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	4413      	add	r3, r2
 8011b50:	781b      	ldrb	r3, [r3, #0]
 8011b52:	021b      	lsls	r3, r3, #8
 8011b54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011b56:	4313      	orrs	r3, r2
 8011b58:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011b5a:	78fb      	ldrb	r3, [r7, #3]
 8011b5c:	1c5a      	adds	r2, r3, #1
 8011b5e:	70fa      	strb	r2, [r7, #3]
 8011b60:	461a      	mov	r2, r3
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	4413      	add	r3, r2
 8011b66:	781b      	ldrb	r3, [r3, #0]
 8011b68:	041b      	lsls	r3, r3, #16
 8011b6a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011b6c:	4313      	orrs	r3, r2
 8011b6e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8011b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b72:	2264      	movs	r2, #100	; 0x64
 8011b74:	fb02 f303 	mul.w	r3, r2, r3
 8011b78:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8011b7a:	78fb      	ldrb	r3, [r7, #3]
 8011b7c:	1c5a      	adds	r2, r3, #1
 8011b7e:	70fa      	strb	r2, [r7, #3]
 8011b80:	461a      	mov	r2, r3
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	4413      	add	r3, r2
 8011b86:	781b      	ldrb	r3, [r3, #0]
 8011b88:	f003 030f 	and.w	r3, r3, #15
 8011b8c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8011b90:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011b94:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011b96:	4618      	mov	r0, r3
 8011b98:	f002 fe4e 	bl	8014838 <LoRaMacClassBPingSlotChannelReq>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8011ba2:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8011ba6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8011baa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011bae:	2201      	movs	r2, #1
 8011bb0:	4619      	mov	r1, r3
 8011bb2:	2011      	movs	r0, #17
 8011bb4:	f002 ffa0 	bl	8014af8 <LoRaMacCommandsAddCmd>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
#endif /* LORAMAC_VERSION */
                break;
 8011bb8:	e07d      	b.n	8011cb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8011bba:	200e      	movs	r0, #14
 8011bbc:	f003 fad4 	bl	8015168 <LoRaMacConfirmQueueIsCmdActive>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d077      	beq.n	8011cb6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8011bc6:	210e      	movs	r1, #14
 8011bc8:	2000      	movs	r0, #0
 8011bca:	f003 fa41 	bl	8015050 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8011bda:	78fb      	ldrb	r3, [r7, #3]
 8011bdc:	1c5a      	adds	r2, r3, #1
 8011bde:	70fa      	strb	r2, [r7, #3]
 8011be0:	461a      	mov	r2, r3
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	4413      	add	r3, r2
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8011bec:	78fb      	ldrb	r3, [r7, #3]
 8011bee:	1c5a      	adds	r2, r3, #1
 8011bf0:	70fa      	strb	r2, [r7, #3]
 8011bf2:	461a      	mov	r2, r3
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	4413      	add	r3, r2
 8011bf8:	781b      	ldrb	r3, [r3, #0]
 8011bfa:	021b      	lsls	r3, r3, #8
 8011bfc:	b21a      	sxth	r2, r3
 8011bfe:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8011c02:	4313      	orrs	r3, r2
 8011c04:	b21b      	sxth	r3, r3
 8011c06:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8011c0a:	78fb      	ldrb	r3, [r7, #3]
 8011c0c:	1c5a      	adds	r2, r3, #1
 8011c0e:	70fa      	strb	r2, [r7, #3]
 8011c10:	461a      	mov	r2, r3
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	4413      	add	r3, r2
 8011c16:	781b      	ldrb	r3, [r3, #0]
 8011c18:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8011c1c:	4b2e      	ldr	r3, [pc, #184]	; (8011cd8 <ProcessMacCommands+0x92c>)
 8011c1e:	681a      	ldr	r2, [r3, #0]
 8011c20:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8011c24:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f002 fe11 	bl	8014850 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8011c2e:	e042      	b.n	8011cb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8011c30:	2300      	movs	r3, #0
 8011c32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8011c36:	78fb      	ldrb	r3, [r7, #3]
 8011c38:	1c5a      	adds	r2, r3, #1
 8011c3a:	70fa      	strb	r2, [r7, #3]
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	4413      	add	r3, r2
 8011c42:	781b      	ldrb	r3, [r3, #0]
 8011c44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011c48:	78fb      	ldrb	r3, [r7, #3]
 8011c4a:	1c5a      	adds	r2, r3, #1
 8011c4c:	70fa      	strb	r2, [r7, #3]
 8011c4e:	461a      	mov	r2, r3
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	4413      	add	r3, r2
 8011c54:	781b      	ldrb	r3, [r3, #0]
 8011c56:	021b      	lsls	r3, r3, #8
 8011c58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011c5c:	4313      	orrs	r3, r2
 8011c5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011c62:	78fb      	ldrb	r3, [r7, #3]
 8011c64:	1c5a      	adds	r2, r3, #1
 8011c66:	70fa      	strb	r2, [r7, #3]
 8011c68:	461a      	mov	r2, r3
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	4413      	add	r3, r2
 8011c6e:	781b      	ldrb	r3, [r3, #0]
 8011c70:	041b      	lsls	r3, r3, #16
 8011c72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011c76:	4313      	orrs	r3, r2
 8011c78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8011c7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011c80:	2264      	movs	r2, #100	; 0x64
 8011c82:	fb02 f303 	mul.w	r3, r2, r3
 8011c86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8011c8a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8011c8e:	f002 fdf2 	bl	8014876 <LoRaMacClassBBeaconFreqReq>
 8011c92:	4603      	mov	r3, r0
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d003      	beq.n	8011ca0 <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 8011c98:	2301      	movs	r3, #1
 8011c9a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8011c9e:	e002      	b.n	8011ca6 <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8011ca6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011caa:	2201      	movs	r2, #1
 8011cac:	4619      	mov	r1, r3
 8011cae:	2013      	movs	r0, #19
 8011cb0:	f002 ff22 	bl	8014af8 <LoRaMacCommandsAddCmd>
                }
                break;
 8011cb4:	bf00      	nop
    while( macIndex < commandsSize )
 8011cb6:	78fa      	ldrb	r2, [r7, #3]
 8011cb8:	78bb      	ldrb	r3, [r7, #2]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	f4ff ab8e 	bcc.w	80113dc <ProcessMacCommands+0x30>
 8011cc0:	e002      	b.n	8011cc8 <ProcessMacCommands+0x91c>
            return;
 8011cc2:	bf00      	nop
 8011cc4:	e000      	b.n	8011cc8 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8011cc6:	bf00      	nop
        }
    }
}
 8011cc8:	378c      	adds	r7, #140	; 0x8c
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd90      	pop	{r4, r7, pc}
 8011cce:	bf00      	nop
 8011cd0:	12d53d80 	.word	0x12d53d80
 8011cd4:	20000954 	.word	0x20000954
 8011cd8:	200015cc 	.word	0x200015cc

08011cdc <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b08e      	sub	sp, #56	; 0x38
 8011ce0:	af02      	add	r7, sp, #8
 8011ce2:	60f8      	str	r0, [r7, #12]
 8011ce4:	607a      	str	r2, [r7, #4]
 8011ce6:	461a      	mov	r2, r3
 8011ce8:	460b      	mov	r3, r1
 8011cea:	72fb      	strb	r3, [r7, #11]
 8011cec:	4613      	mov	r3, r2
 8011cee:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011cf0:	2303      	movs	r3, #3
 8011cf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011cf6:	4b65      	ldr	r3, [pc, #404]	; (8011e8c <Send+0x1b0>)
 8011cf8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011cfc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8011d00:	4b62      	ldr	r3, [pc, #392]	; (8011e8c <Send+0x1b0>)
 8011d02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011d06:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011d0a:	4b60      	ldr	r3, [pc, #384]	; (8011e8c <Send+0x1b0>)
 8011d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011d10:	4b5e      	ldr	r3, [pc, #376]	; (8011e8c <Send+0x1b0>)
 8011d12:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d101      	bne.n	8011d1e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8011d1a:	2307      	movs	r3, #7
 8011d1c:	e0b1      	b.n	8011e82 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8011d1e:	4b5b      	ldr	r3, [pc, #364]	; (8011e8c <Send+0x1b0>)
 8011d20:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d102      	bne.n	8011d2e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011d28:	4b58      	ldr	r3, [pc, #352]	; (8011e8c <Send+0x1b0>)
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8011d34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011d38:	f36f 0303 	bfc	r3, #0, #4
 8011d3c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8011d40:	4b52      	ldr	r3, [pc, #328]	; (8011e8c <Send+0x1b0>)
 8011d42:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8011d46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011d4a:	f362 13c7 	bfi	r3, r2, #7, #1
 8011d4e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011d52:	4b4e      	ldr	r3, [pc, #312]	; (8011e8c <Send+0x1b0>)
 8011d54:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011d58:	2b01      	cmp	r3, #1
 8011d5a:	d106      	bne.n	8011d6a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8011d5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011d60:	f043 0310 	orr.w	r3, r3, #16
 8011d64:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8011d68:	e005      	b.n	8011d76 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8011d6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011d6e:	f36f 1304 	bfc	r3, #4, #1
 8011d72:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8011d76:	4b45      	ldr	r3, [pc, #276]	; (8011e8c <Send+0x1b0>)
 8011d78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d005      	beq.n	8011d8c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8011d80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011d84:	f043 0320 	orr.w	r3, r3, #32
 8011d88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8011d90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011d94:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011d98:	b2db      	uxtb	r3, r3
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	bf14      	ite	ne
 8011d9e:	2301      	movne	r3, #1
 8011da0:	2300      	moveq	r3, #0
 8011da2:	b2db      	uxtb	r3, r3
 8011da4:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011da6:	4b39      	ldr	r3, [pc, #228]	; (8011e8c <Send+0x1b0>)
 8011da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011daa:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8011dac:	4b37      	ldr	r3, [pc, #220]	; (8011e8c <Send+0x1b0>)
 8011dae:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8011db2:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011db4:	4b35      	ldr	r3, [pc, #212]	; (8011e8c <Send+0x1b0>)
 8011db6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8011dba:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011dbc:	4b33      	ldr	r3, [pc, #204]	; (8011e8c <Send+0x1b0>)
 8011dbe:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011dc2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011dc6:	4b31      	ldr	r3, [pc, #196]	; (8011e8c <Send+0x1b0>)
 8011dc8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011dcc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011dd0:	4b2e      	ldr	r3, [pc, #184]	; (8011e8c <Send+0x1b0>)
 8011dd2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011dd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8011dda:	4b2c      	ldr	r3, [pc, #176]	; (8011e8c <Send+0x1b0>)
 8011ddc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8011de4:	4b29      	ldr	r3, [pc, #164]	; (8011e8c <Send+0x1b0>)
 8011de6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8011dea:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8011dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011df0:	f107 0014 	add.w	r0, r7, #20
 8011df4:	4a26      	ldr	r2, [pc, #152]	; (8011e90 <Send+0x1b4>)
 8011df6:	4927      	ldr	r1, [pc, #156]	; (8011e94 <Send+0x1b8>)
 8011df8:	f002 fc58 	bl	80146ac <LoRaMacAdrCalcNext>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	461a      	mov	r2, r3
 8011e00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011e04:	f362 1386 	bfi	r3, r2, #6, #1
 8011e08:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8011e0c:	7afa      	ldrb	r2, [r7, #11]
 8011e0e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8011e12:	893b      	ldrh	r3, [r7, #8]
 8011e14:	9300      	str	r3, [sp, #0]
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	68f8      	ldr	r0, [r7, #12]
 8011e1a:	f000 fc5d 	bl	80126d8 <PrepareFrame>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011e24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d003      	beq.n	8011e34 <Send+0x158>
 8011e2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e30:	2b0a      	cmp	r3, #10
 8011e32:	d107      	bne.n	8011e44 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8011e34:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f000 f961 	bl	8012100 <ScheduleTx>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8011e44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d00a      	beq.n	8011e62 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8011e4c:	4a0f      	ldr	r2, [pc, #60]	; (8011e8c <Send+0x1b0>)
 8011e4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011e52:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8011e56:	4a0d      	ldr	r2, [pc, #52]	; (8011e8c <Send+0x1b0>)
 8011e58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011e5c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8011e60:	e00d      	b.n	8011e7e <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8011e62:	4b0a      	ldr	r3, [pc, #40]	; (8011e8c <Send+0x1b0>)
 8011e64:	2200      	movs	r2, #0
 8011e66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8011e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e6c:	4a07      	ldr	r2, [pc, #28]	; (8011e8c <Send+0x1b0>)
 8011e6e:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8011e70:	f002 fee8 	bl	8014c44 <LoRaMacCommandsRemoveNoneStickyCmds>
 8011e74:	4603      	mov	r3, r0
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d001      	beq.n	8011e7e <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011e7a:	2313      	movs	r3, #19
 8011e7c:	e001      	b.n	8011e82 <Send+0x1a6>
        }
    }
    return status;
 8011e7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	3730      	adds	r7, #48	; 0x30
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}
 8011e8a:	bf00      	nop
 8011e8c:	20000e5c 	.word	0x20000e5c
 8011e90:	20000e94 	.word	0x20000e94
 8011e94:	20000e95 	.word	0x20000e95

08011e98 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b084      	sub	sp, #16
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8011eaa:	2301      	movs	r3, #1
 8011eac:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8011eae:	79fb      	ldrb	r3, [r7, #7]
 8011eb0:	2bff      	cmp	r3, #255	; 0xff
 8011eb2:	d11f      	bne.n	8011ef4 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8011eb4:	2000      	movs	r0, #0
 8011eb6:	f7ff f941 	bl	801113c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8011eba:	4b15      	ldr	r3, [pc, #84]	; (8011f10 <SendReJoinReq+0x78>)
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8011ec2:	4b13      	ldr	r3, [pc, #76]	; (8011f10 <SendReJoinReq+0x78>)
 8011ec4:	4a13      	ldr	r2, [pc, #76]	; (8011f14 <SendReJoinReq+0x7c>)
 8011ec6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011eca:	4b11      	ldr	r3, [pc, #68]	; (8011f10 <SendReJoinReq+0x78>)
 8011ecc:	22ff      	movs	r2, #255	; 0xff
 8011ece:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8011ed2:	7b3b      	ldrb	r3, [r7, #12]
 8011ed4:	f36f 1347 	bfc	r3, #5, #3
 8011ed8:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8011eda:	7b3a      	ldrb	r2, [r7, #12]
 8011edc:	4b0c      	ldr	r3, [pc, #48]	; (8011f10 <SendReJoinReq+0x78>)
 8011ede:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8011ee2:	480d      	ldr	r0, [pc, #52]	; (8011f18 <SendReJoinReq+0x80>)
 8011ee4:	f7fc fb1c 	bl	800e520 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8011ee8:	480c      	ldr	r0, [pc, #48]	; (8011f1c <SendReJoinReq+0x84>)
 8011eea:	f7fc fae9 	bl	800e4c0 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	73fb      	strb	r3, [r7, #15]

            break;
 8011ef2:	e002      	b.n	8011efa <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011ef4:	2302      	movs	r3, #2
 8011ef6:	73bb      	strb	r3, [r7, #14]
            break;
 8011ef8:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011efa:	7bfb      	ldrb	r3, [r7, #15]
 8011efc:	4618      	mov	r0, r3
 8011efe:	f000 f8ff 	bl	8012100 <ScheduleTx>
 8011f02:	4603      	mov	r3, r0
 8011f04:	73bb      	strb	r3, [r7, #14]
    return status;
 8011f06:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3710      	adds	r7, #16
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	20000954 	.word	0x20000954
 8011f14:	20000956 	.word	0x20000956
 8011f18:	20000a62 	.word	0x20000a62
 8011f1c:	20000a6a 	.word	0x20000a6a

08011f20 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011f24:	f002 fc31 	bl	801478a <LoRaMacClassBIsBeaconExpected>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d001      	beq.n	8011f32 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8011f2e:	230e      	movs	r3, #14
 8011f30:	e013      	b.n	8011f5a <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011f32:	4b0b      	ldr	r3, [pc, #44]	; (8011f60 <CheckForClassBCollision+0x40>)
 8011f34:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011f38:	2b01      	cmp	r3, #1
 8011f3a:	d10d      	bne.n	8011f58 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011f3c:	f002 fc2c 	bl	8014798 <LoRaMacClassBIsPingExpected>
 8011f40:	4603      	mov	r3, r0
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d001      	beq.n	8011f4a <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011f46:	230f      	movs	r3, #15
 8011f48:	e007      	b.n	8011f5a <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011f4a:	f002 fc2c 	bl	80147a6 <LoRaMacClassBIsMulticastExpected>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d001      	beq.n	8011f58 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011f54:	230f      	movs	r3, #15
 8011f56:	e000      	b.n	8011f5a <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8011f58:	2300      	movs	r3, #0
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	bd80      	pop	{r7, pc}
 8011f5e:	bf00      	nop
 8011f60:	20000e5c 	.word	0x20000e5c

08011f64 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8011f64:	b590      	push	{r4, r7, lr}
 8011f66:	b083      	sub	sp, #12
 8011f68:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011f6a:	4b2d      	ldr	r3, [pc, #180]	; (8012020 <ComputeRxWindowParameters+0xbc>)
 8011f6c:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011f70:	4b2b      	ldr	r3, [pc, #172]	; (8012020 <ComputeRxWindowParameters+0xbc>)
 8011f72:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8011f76:	4b2a      	ldr	r3, [pc, #168]	; (8012020 <ComputeRxWindowParameters+0xbc>)
 8011f78:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 8011f7c:	4b28      	ldr	r3, [pc, #160]	; (8012020 <ComputeRxWindowParameters+0xbc>)
 8011f7e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8011f82:	4b27      	ldr	r3, [pc, #156]	; (8012020 <ComputeRxWindowParameters+0xbc>)
 8011f84:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011f88:	b25b      	sxtb	r3, r3
 8011f8a:	f004 fcf9 	bl	8016980 <RegionApplyDrOffset>
 8011f8e:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011f90:	b259      	sxtb	r1, r3
 8011f92:	4b23      	ldr	r3, [pc, #140]	; (8012020 <ComputeRxWindowParameters+0xbc>)
 8011f94:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8011f98:	4b21      	ldr	r3, [pc, #132]	; (8012020 <ComputeRxWindowParameters+0xbc>)
 8011f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f9c:	4821      	ldr	r0, [pc, #132]	; (8012024 <ComputeRxWindowParameters+0xc0>)
 8011f9e:	9000      	str	r0, [sp, #0]
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	f004 fbfd 	bl	80167a0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011fa6:	4b1e      	ldr	r3, [pc, #120]	; (8012020 <ComputeRxWindowParameters+0xbc>)
 8011fa8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8011fac:	4b1c      	ldr	r3, [pc, #112]	; (8012020 <ComputeRxWindowParameters+0xbc>)
 8011fae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011fb2:	b259      	sxtb	r1, r3
 8011fb4:	4b1a      	ldr	r3, [pc, #104]	; (8012020 <ComputeRxWindowParameters+0xbc>)
 8011fb6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8011fba:	4b19      	ldr	r3, [pc, #100]	; (8012020 <ComputeRxWindowParameters+0xbc>)
 8011fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011fbe:	4c1a      	ldr	r4, [pc, #104]	; (8012028 <ComputeRxWindowParameters+0xc4>)
 8011fc0:	9400      	str	r4, [sp, #0]
 8011fc2:	f004 fbed 	bl	80167a0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011fc6:	4b16      	ldr	r3, [pc, #88]	; (8012020 <ComputeRxWindowParameters+0xbc>)
 8011fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fca:	4a18      	ldr	r2, [pc, #96]	; (801202c <ComputeRxWindowParameters+0xc8>)
 8011fcc:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8011fd0:	4413      	add	r3, r2
 8011fd2:	4a16      	ldr	r2, [pc, #88]	; (801202c <ComputeRxWindowParameters+0xc8>)
 8011fd4:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011fd8:	4b11      	ldr	r3, [pc, #68]	; (8012020 <ComputeRxWindowParameters+0xbc>)
 8011fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011fdc:	4a13      	ldr	r2, [pc, #76]	; (801202c <ComputeRxWindowParameters+0xc8>)
 8011fde:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8011fe2:	4413      	add	r3, r2
 8011fe4:	4a11      	ldr	r2, [pc, #68]	; (801202c <ComputeRxWindowParameters+0xc8>)
 8011fe6:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8011fea:	4b10      	ldr	r3, [pc, #64]	; (801202c <ComputeRxWindowParameters+0xc8>)
 8011fec:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011ff0:	2b04      	cmp	r3, #4
 8011ff2:	d011      	beq.n	8012018 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011ff4:	4b0a      	ldr	r3, [pc, #40]	; (8012020 <ComputeRxWindowParameters+0xbc>)
 8011ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011ff8:	4a0c      	ldr	r2, [pc, #48]	; (801202c <ComputeRxWindowParameters+0xc8>)
 8011ffa:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8011ffe:	4413      	add	r3, r2
 8012000:	4a0a      	ldr	r2, [pc, #40]	; (801202c <ComputeRxWindowParameters+0xc8>)
 8012002:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012006:	4b06      	ldr	r3, [pc, #24]	; (8012020 <ComputeRxWindowParameters+0xbc>)
 8012008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801200a:	4a08      	ldr	r2, [pc, #32]	; (801202c <ComputeRxWindowParameters+0xc8>)
 801200c:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8012010:	4413      	add	r3, r2
 8012012:	4a06      	ldr	r2, [pc, #24]	; (801202c <ComputeRxWindowParameters+0xc8>)
 8012014:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8012018:	bf00      	nop
 801201a:	3704      	adds	r7, #4
 801201c:	46bd      	mov	sp, r7
 801201e:	bd90      	pop	{r4, r7, pc}
 8012020:	20000e5c 	.word	0x20000e5c
 8012024:	20000d0c 	.word	0x20000d0c
 8012028:	20000d20 	.word	0x20000d20
 801202c:	20000954 	.word	0x20000954

08012030 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b082      	sub	sp, #8
 8012034:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8012036:	2300      	movs	r3, #0
 8012038:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 801203a:	4b13      	ldr	r3, [pc, #76]	; (8012088 <VerifyTxFrame+0x58>)
 801203c:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8012040:	2b00      	cmp	r3, #0
 8012042:	d01b      	beq.n	801207c <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012044:	1d3b      	adds	r3, r7, #4
 8012046:	4618      	mov	r0, r3
 8012048:	f002 fe4c 	bl	8014ce4 <LoRaMacCommandsGetSizeSerializedCmds>
 801204c:	4603      	mov	r3, r0
 801204e:	2b00      	cmp	r3, #0
 8012050:	d001      	beq.n	8012056 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012052:	2313      	movs	r3, #19
 8012054:	e013      	b.n	801207e <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8012056:	4b0d      	ldr	r3, [pc, #52]	; (801208c <VerifyTxFrame+0x5c>)
 8012058:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801205c:	4a0a      	ldr	r2, [pc, #40]	; (8012088 <VerifyTxFrame+0x58>)
 801205e:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8012062:	687a      	ldr	r2, [r7, #4]
 8012064:	b2d2      	uxtb	r2, r2
 8012066:	4618      	mov	r0, r3
 8012068:	f7ff f978 	bl	801135c <ValidatePayloadLength>
 801206c:	4603      	mov	r3, r0
 801206e:	f083 0301 	eor.w	r3, r3, #1
 8012072:	b2db      	uxtb	r3, r3
 8012074:	2b00      	cmp	r3, #0
 8012076:	d001      	beq.n	801207c <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8012078:	2308      	movs	r3, #8
 801207a:	e000      	b.n	801207e <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 801207c:	2300      	movs	r3, #0
}
 801207e:	4618      	mov	r0, r3
 8012080:	3708      	adds	r7, #8
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}
 8012086:	bf00      	nop
 8012088:	20000e5c 	.word	0x20000e5c
 801208c:	20000954 	.word	0x20000954

08012090 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b082      	sub	sp, #8
 8012094:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8012096:	4b18      	ldr	r3, [pc, #96]	; (80120f8 <SerializeTxFrame+0x68>)
 8012098:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801209c:	2b00      	cmp	r3, #0
 801209e:	d002      	beq.n	80120a6 <SerializeTxFrame+0x16>
 80120a0:	2b04      	cmp	r3, #4
 80120a2:	d011      	beq.n	80120c8 <SerializeTxFrame+0x38>
 80120a4:	e021      	b.n	80120ea <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80120a6:	4815      	ldr	r0, [pc, #84]	; (80120fc <SerializeTxFrame+0x6c>)
 80120a8:	f004 f97a 	bl	80163a0 <LoRaMacSerializerJoinRequest>
 80120ac:	4603      	mov	r3, r0
 80120ae:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80120b0:	79fb      	ldrb	r3, [r7, #7]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d001      	beq.n	80120ba <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80120b6:	2311      	movs	r3, #17
 80120b8:	e01a      	b.n	80120f0 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80120ba:	4b0f      	ldr	r3, [pc, #60]	; (80120f8 <SerializeTxFrame+0x68>)
 80120bc:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80120c0:	b29a      	uxth	r2, r3
 80120c2:	4b0d      	ldr	r3, [pc, #52]	; (80120f8 <SerializeTxFrame+0x68>)
 80120c4:	801a      	strh	r2, [r3, #0]
            break;
 80120c6:	e012      	b.n	80120ee <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80120c8:	480c      	ldr	r0, [pc, #48]	; (80120fc <SerializeTxFrame+0x6c>)
 80120ca:	f004 f9eb 	bl	80164a4 <LoRaMacSerializerData>
 80120ce:	4603      	mov	r3, r0
 80120d0:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80120d2:	79fb      	ldrb	r3, [r7, #7]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d001      	beq.n	80120dc <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80120d8:	2311      	movs	r3, #17
 80120da:	e009      	b.n	80120f0 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80120dc:	4b06      	ldr	r3, [pc, #24]	; (80120f8 <SerializeTxFrame+0x68>)
 80120de:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80120e2:	b29a      	uxth	r2, r3
 80120e4:	4b04      	ldr	r3, [pc, #16]	; (80120f8 <SerializeTxFrame+0x68>)
 80120e6:	801a      	strh	r2, [r3, #0]
            break;
 80120e8:	e001      	b.n	80120ee <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80120ea:	2303      	movs	r3, #3
 80120ec:	e000      	b.n	80120f0 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 80120ee:	2300      	movs	r3, #0
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	3708      	adds	r7, #8
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}
 80120f8:	20000954 	.word	0x20000954
 80120fc:	20000a5c 	.word	0x20000a5c

08012100 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b090      	sub	sp, #64	; 0x40
 8012104:	af02      	add	r7, sp, #8
 8012106:	4603      	mov	r3, r0
 8012108:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801210a:	2303      	movs	r3, #3
 801210c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8012110:	f7ff ff06 	bl	8011f20 <CheckForClassBCollision>
 8012114:	4603      	mov	r3, r0
 8012116:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801211a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801211e:	2b00      	cmp	r3, #0
 8012120:	d002      	beq.n	8012128 <ScheduleTx+0x28>
    {
        return status;
 8012122:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012126:	e092      	b.n	801224e <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8012128:	f000 f8fe 	bl	8012328 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 801212c:	f7ff ffb0 	bl	8012090 <SerializeTxFrame>
 8012130:	4603      	mov	r3, r0
 8012132:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8012136:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801213a:	2b00      	cmp	r3, #0
 801213c:	d002      	beq.n	8012144 <ScheduleTx+0x44>
    {
        return status;
 801213e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012142:	e084      	b.n	801224e <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8012144:	4b44      	ldr	r3, [pc, #272]	; (8012258 <ScheduleTx+0x158>)
 8012146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012148:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801214a:	4b43      	ldr	r3, [pc, #268]	; (8012258 <ScheduleTx+0x158>)
 801214c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012150:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8012152:	4b41      	ldr	r3, [pc, #260]	; (8012258 <ScheduleTx+0x158>)
 8012154:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8012158:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 801215a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801215e:	4618      	mov	r0, r3
 8012160:	f00a fa2c 	bl	801c5bc <SysTimeGetMcuTime>
 8012164:	4638      	mov	r0, r7
 8012166:	4b3c      	ldr	r3, [pc, #240]	; (8012258 <ScheduleTx+0x158>)
 8012168:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 801216c:	9200      	str	r2, [sp, #0]
 801216e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012172:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012176:	ca06      	ldmia	r2, {r1, r2}
 8012178:	f00a f981 	bl	801c47e <SysTimeSub>
 801217c:	f107 0320 	add.w	r3, r7, #32
 8012180:	463a      	mov	r2, r7
 8012182:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012186:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 801218a:	4b33      	ldr	r3, [pc, #204]	; (8012258 <ScheduleTx+0x158>)
 801218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801218e:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8012190:	2300      	movs	r3, #0
 8012192:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8012196:	2301      	movs	r3, #1
 8012198:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 801219a:	4b30      	ldr	r3, [pc, #192]	; (801225c <ScheduleTx+0x15c>)
 801219c:	881b      	ldrh	r3, [r3, #0]
 801219e:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80121a0:	4b2d      	ldr	r3, [pc, #180]	; (8012258 <ScheduleTx+0x158>)
 80121a2:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d104      	bne.n	80121b4 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80121aa:	2301      	movs	r3, #1
 80121ac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 80121b0:	2300      	movs	r3, #0
 80121b2:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80121b4:	4b28      	ldr	r3, [pc, #160]	; (8012258 <ScheduleTx+0x158>)
 80121b6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80121ba:	f107 0114 	add.w	r1, r7, #20
 80121be:	4b28      	ldr	r3, [pc, #160]	; (8012260 <ScheduleTx+0x160>)
 80121c0:	9300      	str	r3, [sp, #0]
 80121c2:	4b28      	ldr	r3, [pc, #160]	; (8012264 <ScheduleTx+0x164>)
 80121c4:	4a28      	ldr	r2, [pc, #160]	; (8012268 <ScheduleTx+0x168>)
 80121c6:	f004 fbb1 	bl	801692c <RegionNextChannel>
 80121ca:	4603      	mov	r3, r0
 80121cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 80121d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d025      	beq.n	8012224 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 80121d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80121dc:	2b0b      	cmp	r3, #11
 80121de:	d11e      	bne.n	801221e <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 80121e0:	4b1e      	ldr	r3, [pc, #120]	; (801225c <ScheduleTx+0x15c>)
 80121e2:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d01c      	beq.n	8012224 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 80121ea:	7bfb      	ldrb	r3, [r7, #15]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d013      	beq.n	8012218 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80121f0:	4b1a      	ldr	r3, [pc, #104]	; (801225c <ScheduleTx+0x15c>)
 80121f2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80121f6:	f043 0320 	orr.w	r3, r3, #32
 80121fa:	4a18      	ldr	r2, [pc, #96]	; (801225c <ScheduleTx+0x15c>)
 80121fc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8012200:	4b16      	ldr	r3, [pc, #88]	; (801225c <ScheduleTx+0x15c>)
 8012202:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8012206:	4619      	mov	r1, r3
 8012208:	4818      	ldr	r0, [pc, #96]	; (801226c <ScheduleTx+0x16c>)
 801220a:	f00a ff77 	bl	801d0fc <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 801220e:	4817      	ldr	r0, [pc, #92]	; (801226c <ScheduleTx+0x16c>)
 8012210:	f00a fe96 	bl	801cf40 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8012214:	2300      	movs	r3, #0
 8012216:	e01a      	b.n	801224e <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8012218:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801221c:	e017      	b.n	801224e <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 801221e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012222:	e014      	b.n	801224e <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8012224:	f7ff fe9e 	bl	8011f64 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8012228:	f7ff ff02 	bl	8012030 <VerifyTxFrame>
 801222c:	4603      	mov	r3, r0
 801222e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8012232:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012236:	2b00      	cmp	r3, #0
 8012238:	d002      	beq.n	8012240 <ScheduleTx+0x140>
    {
        return status;
 801223a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801223e:	e006      	b.n	801224e <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8012240:	4b06      	ldr	r3, [pc, #24]	; (801225c <ScheduleTx+0x15c>)
 8012242:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8012246:	4618      	mov	r0, r3
 8012248:	f000 fb62 	bl	8012910 <SendFrameOnChannel>
 801224c:	4603      	mov	r3, r0
}
 801224e:	4618      	mov	r0, r3
 8012250:	3738      	adds	r7, #56	; 0x38
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}
 8012256:	bf00      	nop
 8012258:	20000e5c 	.word	0x20000e5c
 801225c:	20000954 	.word	0x20000954
 8012260:	20000e8c 	.word	0x20000e8c
 8012264:	20000dd8 	.word	0x20000dd8
 8012268:	20000d65 	.word	0x20000d65
 801226c:	20000cbc 	.word	0x20000cbc

08012270 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b084      	sub	sp, #16
 8012274:	af00      	add	r7, sp, #0
 8012276:	4603      	mov	r3, r0
 8012278:	460a      	mov	r2, r1
 801227a:	71fb      	strb	r3, [r7, #7]
 801227c:	4613      	mov	r3, r2
 801227e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8012280:	2313      	movs	r3, #19
 8012282:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8012284:	2300      	movs	r3, #0
 8012286:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8012288:	4b25      	ldr	r3, [pc, #148]	; (8012320 <SecureFrame+0xb0>)
 801228a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801228e:	2b00      	cmp	r3, #0
 8012290:	d002      	beq.n	8012298 <SecureFrame+0x28>
 8012292:	2b04      	cmp	r3, #4
 8012294:	d011      	beq.n	80122ba <SecureFrame+0x4a>
 8012296:	e03b      	b.n	8012310 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8012298:	4822      	ldr	r0, [pc, #136]	; (8012324 <SecureFrame+0xb4>)
 801229a:	f003 fc47 	bl	8015b2c <LoRaMacCryptoPrepareJoinRequest>
 801229e:	4603      	mov	r3, r0
 80122a0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80122a2:	7bfb      	ldrb	r3, [r7, #15]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d001      	beq.n	80122ac <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80122a8:	2311      	movs	r3, #17
 80122aa:	e034      	b.n	8012316 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80122ac:	4b1c      	ldr	r3, [pc, #112]	; (8012320 <SecureFrame+0xb0>)
 80122ae:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80122b2:	b29a      	uxth	r2, r3
 80122b4:	4b1a      	ldr	r3, [pc, #104]	; (8012320 <SecureFrame+0xb0>)
 80122b6:	801a      	strh	r2, [r3, #0]
            break;
 80122b8:	e02c      	b.n	8012314 <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80122ba:	f107 0308 	add.w	r3, r7, #8
 80122be:	4618      	mov	r0, r3
 80122c0:	f003 fb44 	bl	801594c <LoRaMacCryptoGetFCntUp>
 80122c4:	4603      	mov	r3, r0
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d001      	beq.n	80122ce <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80122ca:	2312      	movs	r3, #18
 80122cc:	e023      	b.n	8012316 <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80122ce:	4b14      	ldr	r3, [pc, #80]	; (8012320 <SecureFrame+0xb0>)
 80122d0:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d104      	bne.n	80122e2 <SecureFrame+0x72>
 80122d8:	4b11      	ldr	r3, [pc, #68]	; (8012320 <SecureFrame+0xb0>)
 80122da:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 80122de:	2b01      	cmp	r3, #1
 80122e0:	d902      	bls.n	80122e8 <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	3b01      	subs	r3, #1
 80122e6:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80122e8:	68b8      	ldr	r0, [r7, #8]
 80122ea:	79ba      	ldrb	r2, [r7, #6]
 80122ec:	79f9      	ldrb	r1, [r7, #7]
 80122ee:	4b0d      	ldr	r3, [pc, #52]	; (8012324 <SecureFrame+0xb4>)
 80122f0:	f003 fd4a 	bl	8015d88 <LoRaMacCryptoSecureMessage>
 80122f4:	4603      	mov	r3, r0
 80122f6:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80122f8:	7bfb      	ldrb	r3, [r7, #15]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d001      	beq.n	8012302 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80122fe:	2311      	movs	r3, #17
 8012300:	e009      	b.n	8012316 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012302:	4b07      	ldr	r3, [pc, #28]	; (8012320 <SecureFrame+0xb0>)
 8012304:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012308:	b29a      	uxth	r2, r3
 801230a:	4b05      	ldr	r3, [pc, #20]	; (8012320 <SecureFrame+0xb0>)
 801230c:	801a      	strh	r2, [r3, #0]
            break;
 801230e:	e001      	b.n	8012314 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012310:	2303      	movs	r3, #3
 8012312:	e000      	b.n	8012316 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8012314:	2300      	movs	r3, #0
}
 8012316:	4618      	mov	r0, r3
 8012318:	3710      	adds	r7, #16
 801231a:	46bd      	mov	sp, r7
 801231c:	bd80      	pop	{r7, pc}
 801231e:	bf00      	nop
 8012320:	20000954 	.word	0x20000954
 8012324:	20000a5c 	.word	0x20000a5c

08012328 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8012328:	b480      	push	{r7}
 801232a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 801232c:	4b09      	ldr	r3, [pc, #36]	; (8012354 <CalculateBackOff+0x2c>)
 801232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012330:	2b00      	cmp	r3, #0
 8012332:	d10a      	bne.n	801234a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8012334:	4b07      	ldr	r3, [pc, #28]	; (8012354 <CalculateBackOff+0x2c>)
 8012336:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 801233a:	3b01      	subs	r3, #1
 801233c:	4a06      	ldr	r2, [pc, #24]	; (8012358 <CalculateBackOff+0x30>)
 801233e:	f8d2 2414 	ldr.w	r2, [r2, #1044]	; 0x414
 8012342:	fb02 f303 	mul.w	r3, r2, r3
 8012346:	4a03      	ldr	r2, [pc, #12]	; (8012354 <CalculateBackOff+0x2c>)
 8012348:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 801234a:	bf00      	nop
 801234c:	46bd      	mov	sp, r7
 801234e:	bc80      	pop	{r7}
 8012350:	4770      	bx	lr
 8012352:	bf00      	nop
 8012354:	20000e5c 	.word	0x20000e5c
 8012358:	20000954 	.word	0x20000954

0801235c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b082      	sub	sp, #8
 8012360:	af00      	add	r7, sp, #0
 8012362:	4603      	mov	r3, r0
 8012364:	7139      	strb	r1, [r7, #4]
 8012366:	71fb      	strb	r3, [r7, #7]
 8012368:	4613      	mov	r3, r2
 801236a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 801236c:	79fb      	ldrb	r3, [r7, #7]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d002      	beq.n	8012378 <RemoveMacCommands+0x1c>
 8012372:	79fb      	ldrb	r3, [r7, #7]
 8012374:	2b01      	cmp	r3, #1
 8012376:	d10d      	bne.n	8012394 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8012378:	79bb      	ldrb	r3, [r7, #6]
 801237a:	2b01      	cmp	r3, #1
 801237c:	d108      	bne.n	8012390 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 801237e:	793b      	ldrb	r3, [r7, #4]
 8012380:	f003 0320 	and.w	r3, r3, #32
 8012384:	b2db      	uxtb	r3, r3
 8012386:	2b00      	cmp	r3, #0
 8012388:	d004      	beq.n	8012394 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801238a:	f002 fc7f 	bl	8014c8c <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 801238e:	e001      	b.n	8012394 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8012390:	f002 fc7c 	bl	8014c8c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8012394:	bf00      	nop
 8012396:	3708      	adds	r7, #8
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}

0801239c <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 801239c:	b5b0      	push	{r4, r5, r7, lr}
 801239e:	b090      	sub	sp, #64	; 0x40
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	4603      	mov	r3, r0
 80123a4:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 80123a6:	79fb      	ldrb	r3, [r7, #7]
 80123a8:	f083 0301 	eor.w	r3, r3, #1
 80123ac:	b2db      	uxtb	r3, r3
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d003      	beq.n	80123ba <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80123b2:	4b80      	ldr	r3, [pc, #512]	; (80125b4 <ResetMacParameters+0x218>)
 80123b4:	2200      	movs	r2, #0
 80123b6:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80123ba:	4b7e      	ldr	r3, [pc, #504]	; (80125b4 <ResetMacParameters+0x218>)
 80123bc:	2200      	movs	r2, #0
 80123be:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80123c0:	4b7d      	ldr	r3, [pc, #500]	; (80125b8 <ResetMacParameters+0x21c>)
 80123c2:	2200      	movs	r2, #0
 80123c4:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 80123c8:	4b7b      	ldr	r3, [pc, #492]	; (80125b8 <ResetMacParameters+0x21c>)
 80123ca:	2201      	movs	r2, #1
 80123cc:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 80123d0:	4b79      	ldr	r3, [pc, #484]	; (80125b8 <ResetMacParameters+0x21c>)
 80123d2:	2201      	movs	r2, #1
 80123d4:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetry = false;
 80123d8:	4b77      	ldr	r3, [pc, #476]	; (80125b8 <ResetMacParameters+0x21c>)
 80123da:	2200      	movs	r2, #0
 80123dc:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 80123e0:	4b74      	ldr	r3, [pc, #464]	; (80125b4 <ResetMacParameters+0x218>)
 80123e2:	2200      	movs	r2, #0
 80123e4:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80123e8:	4b72      	ldr	r3, [pc, #456]	; (80125b4 <ResetMacParameters+0x218>)
 80123ea:	2201      	movs	r2, #1
 80123ec:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80123f0:	4b70      	ldr	r3, [pc, #448]	; (80125b4 <ResetMacParameters+0x218>)
 80123f2:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 80123f6:	4b6f      	ldr	r3, [pc, #444]	; (80125b4 <ResetMacParameters+0x218>)
 80123f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80123fc:	4b6d      	ldr	r3, [pc, #436]	; (80125b4 <ResetMacParameters+0x218>)
 80123fe:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8012402:	4b6c      	ldr	r3, [pc, #432]	; (80125b4 <ResetMacParameters+0x218>)
 8012404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8012408:	4b6a      	ldr	r3, [pc, #424]	; (80125b4 <ResetMacParameters+0x218>)
 801240a:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 801240e:	4b69      	ldr	r3, [pc, #420]	; (80125b4 <ResetMacParameters+0x218>)
 8012410:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012414:	4b67      	ldr	r3, [pc, #412]	; (80125b4 <ResetMacParameters+0x218>)
 8012416:	4a67      	ldr	r2, [pc, #412]	; (80125b4 <ResetMacParameters+0x218>)
 8012418:	336c      	adds	r3, #108	; 0x6c
 801241a:	32b4      	adds	r2, #180	; 0xb4
 801241c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012420:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012424:	4b63      	ldr	r3, [pc, #396]	; (80125b4 <ResetMacParameters+0x218>)
 8012426:	4a63      	ldr	r2, [pc, #396]	; (80125b4 <ResetMacParameters+0x218>)
 8012428:	3374      	adds	r3, #116	; 0x74
 801242a:	32bc      	adds	r2, #188	; 0xbc
 801242c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012430:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8012434:	4b5f      	ldr	r3, [pc, #380]	; (80125b4 <ResetMacParameters+0x218>)
 8012436:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 801243a:	4b5e      	ldr	r3, [pc, #376]	; (80125b4 <ResetMacParameters+0x218>)
 801243c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8012440:	4b5c      	ldr	r3, [pc, #368]	; (80125b4 <ResetMacParameters+0x218>)
 8012442:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8012446:	4b5b      	ldr	r3, [pc, #364]	; (80125b4 <ResetMacParameters+0x218>)
 8012448:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 801244c:	4b59      	ldr	r3, [pc, #356]	; (80125b4 <ResetMacParameters+0x218>)
 801244e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012452:	4a58      	ldr	r2, [pc, #352]	; (80125b4 <ResetMacParameters+0x218>)
 8012454:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012458:	4b56      	ldr	r3, [pc, #344]	; (80125b4 <ResetMacParameters+0x218>)
 801245a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801245e:	4a55      	ldr	r2, [pc, #340]	; (80125b4 <ResetMacParameters+0x218>)
 8012460:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8012464:	4b53      	ldr	r3, [pc, #332]	; (80125b4 <ResetMacParameters+0x218>)
 8012466:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 801246a:	4b52      	ldr	r3, [pc, #328]	; (80125b4 <ResetMacParameters+0x218>)
 801246c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8012470:	4b50      	ldr	r3, [pc, #320]	; (80125b4 <ResetMacParameters+0x218>)
 8012472:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8012476:	4b4f      	ldr	r3, [pc, #316]	; (80125b4 <ResetMacParameters+0x218>)
 8012478:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 801247c:	4b4e      	ldr	r3, [pc, #312]	; (80125b8 <ResetMacParameters+0x21c>)
 801247e:	2200      	movs	r2, #0
 8012480:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 8012484:	4b4b      	ldr	r3, [pc, #300]	; (80125b4 <ResetMacParameters+0x218>)
 8012486:	2200      	movs	r2, #0
 8012488:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 801248c:	4b49      	ldr	r3, [pc, #292]	; (80125b4 <ResetMacParameters+0x218>)
 801248e:	2200      	movs	r2, #0
 8012490:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8012494:	4b47      	ldr	r3, [pc, #284]	; (80125b4 <ResetMacParameters+0x218>)
 8012496:	2200      	movs	r2, #0
 8012498:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 801249c:	4b45      	ldr	r3, [pc, #276]	; (80125b4 <ResetMacParameters+0x218>)
 801249e:	2200      	movs	r2, #0
 80124a0:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 80124a4:	4b43      	ldr	r3, [pc, #268]	; (80125b4 <ResetMacParameters+0x218>)
 80124a6:	2200      	movs	r2, #0
 80124a8:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 80124ac:	4b41      	ldr	r3, [pc, #260]	; (80125b4 <ResetMacParameters+0x218>)
 80124ae:	2200      	movs	r2, #0
 80124b0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 80124b4:	4b3f      	ldr	r3, [pc, #252]	; (80125b4 <ResetMacParameters+0x218>)
 80124b6:	2200      	movs	r2, #0
 80124b8:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 80124bc:	4b3d      	ldr	r3, [pc, #244]	; (80125b4 <ResetMacParameters+0x218>)
 80124be:	2200      	movs	r2, #0
 80124c0:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 80124c4:	4b3b      	ldr	r3, [pc, #236]	; (80125b4 <ResetMacParameters+0x218>)
 80124c6:	2200      	movs	r2, #0
 80124c8:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80124cc:	2301      	movs	r3, #1
 80124ce:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80124d0:	4b3a      	ldr	r3, [pc, #232]	; (80125bc <ResetMacParameters+0x220>)
 80124d2:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80124d4:	4b3a      	ldr	r3, [pc, #232]	; (80125c0 <ResetMacParameters+0x224>)
 80124d6:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80124d8:	4b36      	ldr	r3, [pc, #216]	; (80125b4 <ResetMacParameters+0x218>)
 80124da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80124de:	f107 020c 	add.w	r2, r7, #12
 80124e2:	4611      	mov	r1, r2
 80124e4:	4618      	mov	r0, r3
 80124e6:	f004 f90d 	bl	8016704 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80124ea:	4b33      	ldr	r3, [pc, #204]	; (80125b8 <ResetMacParameters+0x21c>)
 80124ec:	2200      	movs	r2, #0
 80124ee:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80124f2:	4b31      	ldr	r3, [pc, #196]	; (80125b8 <ResetMacParameters+0x21c>)
 80124f4:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 80124f8:	4b2f      	ldr	r3, [pc, #188]	; (80125b8 <ResetMacParameters+0x21c>)
 80124fa:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80124fe:	4b2d      	ldr	r3, [pc, #180]	; (80125b4 <ResetMacParameters+0x218>)
 8012500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012502:	4a2d      	ldr	r2, [pc, #180]	; (80125b8 <ResetMacParameters+0x21c>)
 8012504:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012508:	4b2a      	ldr	r3, [pc, #168]	; (80125b4 <ResetMacParameters+0x218>)
 801250a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801250e:	4b2a      	ldr	r3, [pc, #168]	; (80125b8 <ResetMacParameters+0x21c>)
 8012510:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012514:	4b27      	ldr	r3, [pc, #156]	; (80125b4 <ResetMacParameters+0x218>)
 8012516:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 801251a:	4b27      	ldr	r3, [pc, #156]	; (80125b8 <ResetMacParameters+0x21c>)
 801251c:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8012520:	4b25      	ldr	r3, [pc, #148]	; (80125b8 <ResetMacParameters+0x21c>)
 8012522:	2200      	movs	r2, #0
 8012524:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012528:	4b23      	ldr	r3, [pc, #140]	; (80125b8 <ResetMacParameters+0x21c>)
 801252a:	2201      	movs	r2, #1
 801252c:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8012530:	4a21      	ldr	r2, [pc, #132]	; (80125b8 <ResetMacParameters+0x21c>)
 8012532:	4b21      	ldr	r3, [pc, #132]	; (80125b8 <ResetMacParameters+0x21c>)
 8012534:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8012538:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 801253c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801253e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012540:	682b      	ldr	r3, [r5, #0]
 8012542:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012544:	4b1c      	ldr	r3, [pc, #112]	; (80125b8 <ResetMacParameters+0x21c>)
 8012546:	2201      	movs	r2, #1
 8012548:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801254c:	4b1a      	ldr	r3, [pc, #104]	; (80125b8 <ResetMacParameters+0x21c>)
 801254e:	2202      	movs	r2, #2
 8012550:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8012554:	2300      	movs	r3, #0
 8012556:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8012558:	2300      	movs	r3, #0
 801255a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 801255c:	4b16      	ldr	r3, [pc, #88]	; (80125b8 <ResetMacParameters+0x21c>)
 801255e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012562:	2b00      	cmp	r3, #0
 8012564:	d009      	beq.n	801257a <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8012566:	4b14      	ldr	r3, [pc, #80]	; (80125b8 <ResetMacParameters+0x21c>)
 8012568:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801256c:	685b      	ldr	r3, [r3, #4]
 801256e:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8012570:	4b11      	ldr	r3, [pc, #68]	; (80125b8 <ResetMacParameters+0x21c>)
 8012572:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012576:	695b      	ldr	r3, [r3, #20]
 8012578:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 801257a:	4b12      	ldr	r3, [pc, #72]	; (80125c4 <ResetMacParameters+0x228>)
 801257c:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 801257e:	4b12      	ldr	r3, [pc, #72]	; (80125c8 <ResetMacParameters+0x22c>)
 8012580:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8012582:	4b12      	ldr	r3, [pc, #72]	; (80125cc <ResetMacParameters+0x230>)
 8012584:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8012586:	4b12      	ldr	r3, [pc, #72]	; (80125d0 <ResetMacParameters+0x234>)
 8012588:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 801258a:	4b12      	ldr	r3, [pc, #72]	; (80125d4 <ResetMacParameters+0x238>)
 801258c:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 801258e:	4b12      	ldr	r3, [pc, #72]	; (80125d8 <ResetMacParameters+0x23c>)
 8012590:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8012592:	4b12      	ldr	r3, [pc, #72]	; (80125dc <ResetMacParameters+0x240>)
 8012594:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8012596:	4b12      	ldr	r3, [pc, #72]	; (80125e0 <ResetMacParameters+0x244>)
 8012598:	637b      	str	r3, [r7, #52]	; 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 801259a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801259e:	f107 0318 	add.w	r3, r7, #24
 80125a2:	4a10      	ldr	r2, [pc, #64]	; (80125e4 <ResetMacParameters+0x248>)
 80125a4:	4618      	mov	r0, r3
 80125a6:	f002 f899 	bl	80146dc <LoRaMacClassBInit>
}
 80125aa:	bf00      	nop
 80125ac:	3740      	adds	r7, #64	; 0x40
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bdb0      	pop	{r4, r5, r7, pc}
 80125b2:	bf00      	nop
 80125b4:	20000e5c 	.word	0x20000e5c
 80125b8:	20000954 	.word	0x20000954
 80125bc:	2000107c 	.word	0x2000107c
 80125c0:	20001110 	.word	0x20001110
 80125c4:	20000db0 	.word	0x20000db0
 80125c8:	20000d6c 	.word	0x20000d6c
 80125cc:	20000d9c 	.word	0x20000d9c
 80125d0:	20000dd5 	.word	0x20000dd5
 80125d4:	20000f40 	.word	0x20000f40
 80125d8:	20000ea4 	.word	0x20000ea4
 80125dc:	20000ea8 	.word	0x20000ea8
 80125e0:	20000f44 	.word	0x20000f44
 80125e4:	200015ac 	.word	0x200015ac

080125e8 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b082      	sub	sp, #8
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
 80125f0:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f00a fd12 	bl	801d01c <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80125f8:	4b11      	ldr	r3, [pc, #68]	; (8012640 <RxWindowSetup+0x58>)
 80125fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125fc:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80125fe:	4b11      	ldr	r3, [pc, #68]	; (8012644 <RxWindowSetup+0x5c>)
 8012600:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012604:	4a10      	ldr	r2, [pc, #64]	; (8012648 <RxWindowSetup+0x60>)
 8012606:	6839      	ldr	r1, [r7, #0]
 8012608:	4618      	mov	r0, r3
 801260a:	f004 f8e3 	bl	80167d4 <RegionRxConfig>
 801260e:	4603      	mov	r3, r0
 8012610:	2b00      	cmp	r3, #0
 8012612:	d010      	beq.n	8012636 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8012614:	4b0d      	ldr	r3, [pc, #52]	; (801264c <RxWindowSetup+0x64>)
 8012616:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 801261a:	4b0c      	ldr	r3, [pc, #48]	; (801264c <RxWindowSetup+0x64>)
 801261c:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8012620:	4b07      	ldr	r3, [pc, #28]	; (8012640 <RxWindowSetup+0x58>)
 8012622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012624:	4a07      	ldr	r2, [pc, #28]	; (8012644 <RxWindowSetup+0x5c>)
 8012626:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012628:	4610      	mov	r0, r2
 801262a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	7cda      	ldrb	r2, [r3, #19]
 8012630:	4b06      	ldr	r3, [pc, #24]	; (801264c <RxWindowSetup+0x64>)
 8012632:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8012636:	bf00      	nop
 8012638:	3708      	adds	r7, #8
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
 801263e:	bf00      	nop
 8012640:	0801e8c0 	.word	0x0801e8c0
 8012644:	20000e5c 	.word	0x20000e5c
 8012648:	20000d70 	.word	0x20000d70
 801264c:	20000954 	.word	0x20000954

08012650 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8012650:	b590      	push	{r4, r7, lr}
 8012652:	b083      	sub	sp, #12
 8012654:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012656:	4b1b      	ldr	r3, [pc, #108]	; (80126c4 <OpenContinuousRxCWindow+0x74>)
 8012658:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 801265c:	4b19      	ldr	r3, [pc, #100]	; (80126c4 <OpenContinuousRxCWindow+0x74>)
 801265e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012662:	b259      	sxtb	r1, r3
 8012664:	4b17      	ldr	r3, [pc, #92]	; (80126c4 <OpenContinuousRxCWindow+0x74>)
 8012666:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801266a:	4b16      	ldr	r3, [pc, #88]	; (80126c4 <OpenContinuousRxCWindow+0x74>)
 801266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801266e:	4c16      	ldr	r4, [pc, #88]	; (80126c8 <OpenContinuousRxCWindow+0x78>)
 8012670:	9400      	str	r4, [sp, #0]
 8012672:	f004 f895 	bl	80167a0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012676:	4b15      	ldr	r3, [pc, #84]	; (80126cc <OpenContinuousRxCWindow+0x7c>)
 8012678:	2202      	movs	r2, #2
 801267a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801267e:	4b13      	ldr	r3, [pc, #76]	; (80126cc <OpenContinuousRxCWindow+0x7c>)
 8012680:	2201      	movs	r2, #1
 8012682:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012686:	4b0f      	ldr	r3, [pc, #60]	; (80126c4 <OpenContinuousRxCWindow+0x74>)
 8012688:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801268c:	4a10      	ldr	r2, [pc, #64]	; (80126d0 <OpenContinuousRxCWindow+0x80>)
 801268e:	490e      	ldr	r1, [pc, #56]	; (80126c8 <OpenContinuousRxCWindow+0x78>)
 8012690:	4618      	mov	r0, r3
 8012692:	f004 f89f 	bl	80167d4 <RegionRxConfig>
 8012696:	4603      	mov	r3, r0
 8012698:	2b00      	cmp	r3, #0
 801269a:	d00f      	beq.n	80126bc <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 801269c:	4b0b      	ldr	r3, [pc, #44]	; (80126cc <OpenContinuousRxCWindow+0x7c>)
 801269e:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 80126a2:	4b0a      	ldr	r3, [pc, #40]	; (80126cc <OpenContinuousRxCWindow+0x7c>)
 80126a4:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( 0 ); // Continuous mode
 80126a8:	4b0a      	ldr	r3, [pc, #40]	; (80126d4 <OpenContinuousRxCWindow+0x84>)
 80126aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126ac:	2000      	movs	r0, #0
 80126ae:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80126b0:	4b06      	ldr	r3, [pc, #24]	; (80126cc <OpenContinuousRxCWindow+0x7c>)
 80126b2:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 80126b6:	4b05      	ldr	r3, [pc, #20]	; (80126cc <OpenContinuousRxCWindow+0x7c>)
 80126b8:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 80126bc:	bf00      	nop
 80126be:	3704      	adds	r7, #4
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd90      	pop	{r4, r7, pc}
 80126c4:	20000e5c 	.word	0x20000e5c
 80126c8:	20000d34 	.word	0x20000d34
 80126cc:	20000954 	.word	0x20000954
 80126d0:	20000d70 	.word	0x20000d70
 80126d4:	0801e8c0 	.word	0x0801e8c0

080126d8 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b088      	sub	sp, #32
 80126dc:	af00      	add	r7, sp, #0
 80126de:	60f8      	str	r0, [r7, #12]
 80126e0:	60b9      	str	r1, [r7, #8]
 80126e2:	603b      	str	r3, [r7, #0]
 80126e4:	4613      	mov	r3, r2
 80126e6:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80126e8:	4b82      	ldr	r3, [pc, #520]	; (80128f4 <PrepareFrame+0x21c>)
 80126ea:	2200      	movs	r2, #0
 80126ec:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80126ee:	4b81      	ldr	r3, [pc, #516]	; (80128f4 <PrepareFrame+0x21c>)
 80126f0:	2200      	movs	r2, #0
 80126f2:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    uint32_t fCntUp = 0;
 80126f6:	2300      	movs	r3, #0
 80126f8:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80126fa:	2300      	movs	r3, #0
 80126fc:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80126fe:	2300      	movs	r3, #0
 8012700:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d101      	bne.n	801270c <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8012708:	2300      	movs	r3, #0
 801270a:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 801270c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801270e:	461a      	mov	r2, r3
 8012710:	6839      	ldr	r1, [r7, #0]
 8012712:	4879      	ldr	r0, [pc, #484]	; (80128f8 <PrepareFrame+0x220>)
 8012714:	f006 fae7 	bl	8018ce6 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8012718:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801271a:	b2da      	uxtb	r2, r3
 801271c:	4b75      	ldr	r3, [pc, #468]	; (80128f4 <PrepareFrame+0x21c>)
 801271e:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	781a      	ldrb	r2, [r3, #0]
 8012726:	4b73      	ldr	r3, [pc, #460]	; (80128f4 <PrepareFrame+0x21c>)
 8012728:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	781b      	ldrb	r3, [r3, #0]
 801272e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8012732:	b2db      	uxtb	r3, r3
 8012734:	2b07      	cmp	r3, #7
 8012736:	f000 80b9 	beq.w	80128ac <PrepareFrame+0x1d4>
 801273a:	2b07      	cmp	r3, #7
 801273c:	f300 80d0 	bgt.w	80128e0 <PrepareFrame+0x208>
 8012740:	2b02      	cmp	r3, #2
 8012742:	d006      	beq.n	8012752 <PrepareFrame+0x7a>
 8012744:	2b04      	cmp	r3, #4
 8012746:	f040 80cb 	bne.w	80128e0 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801274a:	4b6a      	ldr	r3, [pc, #424]	; (80128f4 <PrepareFrame+0x21c>)
 801274c:	2201      	movs	r2, #1
 801274e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8012752:	4b68      	ldr	r3, [pc, #416]	; (80128f4 <PrepareFrame+0x21c>)
 8012754:	2204      	movs	r2, #4
 8012756:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801275a:	4b66      	ldr	r3, [pc, #408]	; (80128f4 <PrepareFrame+0x21c>)
 801275c:	4a67      	ldr	r2, [pc, #412]	; (80128fc <PrepareFrame+0x224>)
 801275e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012762:	4b64      	ldr	r3, [pc, #400]	; (80128f4 <PrepareFrame+0x21c>)
 8012764:	22ff      	movs	r2, #255	; 0xff
 8012766:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	781a      	ldrb	r2, [r3, #0]
 801276e:	4b61      	ldr	r3, [pc, #388]	; (80128f4 <PrepareFrame+0x21c>)
 8012770:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8012774:	4a5f      	ldr	r2, [pc, #380]	; (80128f4 <PrepareFrame+0x21c>)
 8012776:	79fb      	ldrb	r3, [r7, #7]
 8012778:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 801277c:	4b60      	ldr	r3, [pc, #384]	; (8012900 <PrepareFrame+0x228>)
 801277e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8012782:	4a5c      	ldr	r2, [pc, #368]	; (80128f4 <PrepareFrame+0x21c>)
 8012784:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012788:	68bb      	ldr	r3, [r7, #8]
 801278a:	781a      	ldrb	r2, [r3, #0]
 801278c:	4b59      	ldr	r3, [pc, #356]	; (80128f4 <PrepareFrame+0x21c>)
 801278e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8012792:	4b58      	ldr	r3, [pc, #352]	; (80128f4 <PrepareFrame+0x21c>)
 8012794:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8012798:	4b56      	ldr	r3, [pc, #344]	; (80128f4 <PrepareFrame+0x21c>)
 801279a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801279e:	4b55      	ldr	r3, [pc, #340]	; (80128f4 <PrepareFrame+0x21c>)
 80127a0:	4a55      	ldr	r2, [pc, #340]	; (80128f8 <PrepareFrame+0x220>)
 80127a2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80127a6:	f107 0318 	add.w	r3, r7, #24
 80127aa:	4618      	mov	r0, r3
 80127ac:	f003 f8ce 	bl	801594c <LoRaMacCryptoGetFCntUp>
 80127b0:	4603      	mov	r3, r0
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d001      	beq.n	80127ba <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80127b6:	2312      	movs	r3, #18
 80127b8:	e098      	b.n	80128ec <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80127ba:	69bb      	ldr	r3, [r7, #24]
 80127bc:	b29a      	uxth	r2, r3
 80127be:	4b4d      	ldr	r3, [pc, #308]	; (80128f4 <PrepareFrame+0x21c>)
 80127c0:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 80127c4:	4b4b      	ldr	r3, [pc, #300]	; (80128f4 <PrepareFrame+0x21c>)
 80127c6:	2200      	movs	r2, #0
 80127c8:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80127cc:	4b49      	ldr	r3, [pc, #292]	; (80128f4 <PrepareFrame+0x21c>)
 80127ce:	2200      	movs	r2, #0
 80127d0:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80127d4:	69bb      	ldr	r3, [r7, #24]
 80127d6:	4a47      	ldr	r2, [pc, #284]	; (80128f4 <PrepareFrame+0x21c>)
 80127d8:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80127dc:	f107 0314 	add.w	r3, r7, #20
 80127e0:	4618      	mov	r0, r3
 80127e2:	f002 fa7f 	bl	8014ce4 <LoRaMacCommandsGetSizeSerializedCmds>
 80127e6:	4603      	mov	r3, r0
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d001      	beq.n	80127f0 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80127ec:	2313      	movs	r3, #19
 80127ee:	e07d      	b.n	80128ec <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d076      	beq.n	80128e4 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80127f6:	4b42      	ldr	r3, [pc, #264]	; (8012900 <PrepareFrame+0x228>)
 80127f8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80127fc:	4618      	mov	r0, r3
 80127fe:	f7fe fd85 	bl	801130c <GetMaxAppPayloadWithoutFOptsLength>
 8012802:	4603      	mov	r3, r0
 8012804:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012806:	4b3b      	ldr	r3, [pc, #236]	; (80128f4 <PrepareFrame+0x21c>)
 8012808:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801280c:	2b00      	cmp	r3, #0
 801280e:	d01d      	beq.n	801284c <PrepareFrame+0x174>
 8012810:	697b      	ldr	r3, [r7, #20]
 8012812:	2b0f      	cmp	r3, #15
 8012814:	d81a      	bhi.n	801284c <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8012816:	f107 0314 	add.w	r3, r7, #20
 801281a:	4a3a      	ldr	r2, [pc, #232]	; (8012904 <PrepareFrame+0x22c>)
 801281c:	4619      	mov	r1, r3
 801281e:	200f      	movs	r0, #15
 8012820:	f002 fa76 	bl	8014d10 <LoRaMacCommandsSerializeCmds>
 8012824:	4603      	mov	r3, r0
 8012826:	2b00      	cmp	r3, #0
 8012828:	d001      	beq.n	801282e <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801282a:	2313      	movs	r3, #19
 801282c:	e05e      	b.n	80128ec <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801282e:	697b      	ldr	r3, [r7, #20]
 8012830:	f003 030f 	and.w	r3, r3, #15
 8012834:	b2d9      	uxtb	r1, r3
 8012836:	68ba      	ldr	r2, [r7, #8]
 8012838:	7813      	ldrb	r3, [r2, #0]
 801283a:	f361 0303 	bfi	r3, r1, #0, #4
 801283e:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	781a      	ldrb	r2, [r3, #0]
 8012844:	4b2b      	ldr	r3, [pc, #172]	; (80128f4 <PrepareFrame+0x21c>)
 8012846:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801284a:	e04b      	b.n	80128e4 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801284c:	4b29      	ldr	r3, [pc, #164]	; (80128f4 <PrepareFrame+0x21c>)
 801284e:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012852:	2b00      	cmp	r3, #0
 8012854:	d010      	beq.n	8012878 <PrepareFrame+0x1a0>
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	2b0f      	cmp	r3, #15
 801285a:	d90d      	bls.n	8012878 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801285c:	7ffb      	ldrb	r3, [r7, #31]
 801285e:	f107 0114 	add.w	r1, r7, #20
 8012862:	4a29      	ldr	r2, [pc, #164]	; (8012908 <PrepareFrame+0x230>)
 8012864:	4618      	mov	r0, r3
 8012866:	f002 fa53 	bl	8014d10 <LoRaMacCommandsSerializeCmds>
 801286a:	4603      	mov	r3, r0
 801286c:	2b00      	cmp	r3, #0
 801286e:	d001      	beq.n	8012874 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012870:	2313      	movs	r3, #19
 8012872:	e03b      	b.n	80128ec <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8012874:	230a      	movs	r3, #10
 8012876:	e039      	b.n	80128ec <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012878:	7ffb      	ldrb	r3, [r7, #31]
 801287a:	f107 0114 	add.w	r1, r7, #20
 801287e:	4a22      	ldr	r2, [pc, #136]	; (8012908 <PrepareFrame+0x230>)
 8012880:	4618      	mov	r0, r3
 8012882:	f002 fa45 	bl	8014d10 <LoRaMacCommandsSerializeCmds>
 8012886:	4603      	mov	r3, r0
 8012888:	2b00      	cmp	r3, #0
 801288a:	d001      	beq.n	8012890 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801288c:	2313      	movs	r3, #19
 801288e:	e02d      	b.n	80128ec <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8012890:	4b18      	ldr	r3, [pc, #96]	; (80128f4 <PrepareFrame+0x21c>)
 8012892:	2200      	movs	r2, #0
 8012894:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8012898:	4b16      	ldr	r3, [pc, #88]	; (80128f4 <PrepareFrame+0x21c>)
 801289a:	4a1b      	ldr	r2, [pc, #108]	; (8012908 <PrepareFrame+0x230>)
 801289c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	b2da      	uxtb	r2, r3
 80128a4:	4b13      	ldr	r3, [pc, #76]	; (80128f4 <PrepareFrame+0x21c>)
 80128a6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80128aa:	e01b      	b.n	80128e4 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d01a      	beq.n	80128e8 <PrepareFrame+0x210>
 80128b2:	4b10      	ldr	r3, [pc, #64]	; (80128f4 <PrepareFrame+0x21c>)
 80128b4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d015      	beq.n	80128e8 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80128bc:	4813      	ldr	r0, [pc, #76]	; (801290c <PrepareFrame+0x234>)
 80128be:	4b0d      	ldr	r3, [pc, #52]	; (80128f4 <PrepareFrame+0x21c>)
 80128c0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80128c4:	b29b      	uxth	r3, r3
 80128c6:	461a      	mov	r2, r3
 80128c8:	6839      	ldr	r1, [r7, #0]
 80128ca:	f006 fa0c 	bl	8018ce6 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80128ce:	4b09      	ldr	r3, [pc, #36]	; (80128f4 <PrepareFrame+0x21c>)
 80128d0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80128d4:	b29b      	uxth	r3, r3
 80128d6:	3301      	adds	r3, #1
 80128d8:	b29a      	uxth	r2, r3
 80128da:	4b06      	ldr	r3, [pc, #24]	; (80128f4 <PrepareFrame+0x21c>)
 80128dc:	801a      	strh	r2, [r3, #0]
            }
            break;
 80128de:	e003      	b.n	80128e8 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80128e0:	2302      	movs	r3, #2
 80128e2:	e003      	b.n	80128ec <PrepareFrame+0x214>
            break;
 80128e4:	bf00      	nop
 80128e6:	e000      	b.n	80128ea <PrepareFrame+0x212>
            break;
 80128e8:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80128ea:	2300      	movs	r3, #0
}
 80128ec:	4618      	mov	r0, r3
 80128ee:	3720      	adds	r7, #32
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bd80      	pop	{r7, pc}
 80128f4:	20000954 	.word	0x20000954
 80128f8:	20000a8c 	.word	0x20000a8c
 80128fc:	20000956 	.word	0x20000956
 8012900:	20000e5c 	.word	0x20000e5c
 8012904:	20000a6c 	.word	0x20000a6c
 8012908:	20000ddc 	.word	0x20000ddc
 801290c:	20000957 	.word	0x20000957

08012910 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b08a      	sub	sp, #40	; 0x28
 8012914:	af00      	add	r7, sp, #0
 8012916:	4603      	mov	r3, r0
 8012918:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801291a:	2303      	movs	r3, #3
 801291c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8012920:	2300      	movs	r3, #0
 8012922:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8012924:	79fb      	ldrb	r3, [r7, #7]
 8012926:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012928:	4b48      	ldr	r3, [pc, #288]	; (8012a4c <SendFrameOnChannel+0x13c>)
 801292a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801292e:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012930:	4b46      	ldr	r3, [pc, #280]	; (8012a4c <SendFrameOnChannel+0x13c>)
 8012932:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012936:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8012938:	4b44      	ldr	r3, [pc, #272]	; (8012a4c <SendFrameOnChannel+0x13c>)
 801293a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801293e:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012940:	4b42      	ldr	r3, [pc, #264]	; (8012a4c <SendFrameOnChannel+0x13c>)
 8012942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012946:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8012948:	4b41      	ldr	r3, [pc, #260]	; (8012a50 <SendFrameOnChannel+0x140>)
 801294a:	881b      	ldrh	r3, [r3, #0]
 801294c:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801294e:	4b3f      	ldr	r3, [pc, #252]	; (8012a4c <SendFrameOnChannel+0x13c>)
 8012950:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012954:	f107 020f 	add.w	r2, r7, #15
 8012958:	f107 0110 	add.w	r1, r7, #16
 801295c:	4b3d      	ldr	r3, [pc, #244]	; (8012a54 <SendFrameOnChannel+0x144>)
 801295e:	f003 ff4e 	bl	80167fe <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012962:	4b3b      	ldr	r3, [pc, #236]	; (8012a50 <SendFrameOnChannel+0x140>)
 8012964:	2201      	movs	r2, #1
 8012966:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801296a:	4b38      	ldr	r3, [pc, #224]	; (8012a4c <SendFrameOnChannel+0x13c>)
 801296c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012970:	b2da      	uxtb	r2, r3
 8012972:	4b37      	ldr	r3, [pc, #220]	; (8012a50 <SendFrameOnChannel+0x140>)
 8012974:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 8012978:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801297c:	4b34      	ldr	r3, [pc, #208]	; (8012a50 <SendFrameOnChannel+0x140>)
 801297e:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
    MacCtx.McpsConfirm.Channel = channel;
 8012982:	79fb      	ldrb	r3, [r7, #7]
 8012984:	4a32      	ldr	r2, [pc, #200]	; (8012a50 <SendFrameOnChannel+0x140>)
 8012986:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801298a:	4b31      	ldr	r3, [pc, #196]	; (8012a50 <SendFrameOnChannel+0x140>)
 801298c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8012990:	4a2f      	ldr	r2, [pc, #188]	; (8012a50 <SendFrameOnChannel+0x140>)
 8012992:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012996:	4b2e      	ldr	r3, [pc, #184]	; (8012a50 <SendFrameOnChannel+0x140>)
 8012998:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 801299c:	4a2c      	ldr	r2, [pc, #176]	; (8012a50 <SendFrameOnChannel+0x140>)
 801299e:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80129a2:	f001 ff07 	bl	80147b4 <LoRaMacClassBIsBeaconModeActive>
 80129a6:	4603      	mov	r3, r0
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d00b      	beq.n	80129c4 <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80129ac:	4b28      	ldr	r3, [pc, #160]	; (8012a50 <SendFrameOnChannel+0x140>)
 80129ae:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80129b2:	4618      	mov	r0, r3
 80129b4:	f001 ff69 	bl	801488a <LoRaMacClassBIsUplinkCollision>
 80129b8:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80129ba:	6a3b      	ldr	r3, [r7, #32]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d001      	beq.n	80129c4 <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80129c0:	2310      	movs	r3, #16
 80129c2:	e03e      	b.n	8012a42 <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80129c4:	4b21      	ldr	r3, [pc, #132]	; (8012a4c <SendFrameOnChannel+0x13c>)
 80129c6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80129ca:	2b01      	cmp	r3, #1
 80129cc:	d101      	bne.n	80129d2 <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80129ce:	f001 ff66 	bl	801489e <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80129d2:	f001 ff00 	bl	80147d6 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80129d6:	4b1d      	ldr	r3, [pc, #116]	; (8012a4c <SendFrameOnChannel+0x13c>)
 80129d8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80129dc:	b2db      	uxtb	r3, r3
 80129de:	4a1c      	ldr	r2, [pc, #112]	; (8012a50 <SendFrameOnChannel+0x140>)
 80129e0:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 80129e4:	4611      	mov	r1, r2
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7ff fc42 	bl	8012270 <SecureFrame>
 80129ec:	4603      	mov	r3, r0
 80129ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 80129f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d002      	beq.n	8012a00 <SendFrameOnChannel+0xf0>
    {
        return status;
 80129fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129fe:	e020      	b.n	8012a42 <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012a00:	4b13      	ldr	r3, [pc, #76]	; (8012a50 <SendFrameOnChannel+0x140>)
 8012a02:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012a06:	f043 0302 	orr.w	r3, r3, #2
 8012a0a:	4a11      	ldr	r2, [pc, #68]	; (8012a50 <SendFrameOnChannel+0x140>)
 8012a0c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8012a10:	4b0f      	ldr	r3, [pc, #60]	; (8012a50 <SendFrameOnChannel+0x140>)
 8012a12:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8012a16:	f083 0301 	eor.w	r3, r3, #1
 8012a1a:	b2db      	uxtb	r3, r3
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d007      	beq.n	8012a30 <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 8012a20:	4b0b      	ldr	r3, [pc, #44]	; (8012a50 <SendFrameOnChannel+0x140>)
 8012a22:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8012a26:	3301      	adds	r3, #1
 8012a28:	b2da      	uxtb	r2, r3
 8012a2a:	4b09      	ldr	r3, [pc, #36]	; (8012a50 <SendFrameOnChannel+0x140>)
 8012a2c:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8012a30:	4b09      	ldr	r3, [pc, #36]	; (8012a58 <SendFrameOnChannel+0x148>)
 8012a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a34:	4a06      	ldr	r2, [pc, #24]	; (8012a50 <SendFrameOnChannel+0x140>)
 8012a36:	8812      	ldrh	r2, [r2, #0]
 8012a38:	b2d2      	uxtb	r2, r2
 8012a3a:	4611      	mov	r1, r2
 8012a3c:	4807      	ldr	r0, [pc, #28]	; (8012a5c <SendFrameOnChannel+0x14c>)
 8012a3e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8012a40:	2300      	movs	r3, #0
}
 8012a42:	4618      	mov	r0, r3
 8012a44:	3728      	adds	r7, #40	; 0x28
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
 8012a4a:	bf00      	nop
 8012a4c:	20000e5c 	.word	0x20000e5c
 8012a50:	20000954 	.word	0x20000954
 8012a54:	20000d68 	.word	0x20000d68
 8012a58:	0801e8c0 	.word	0x0801e8c0
 8012a5c:	20000956 	.word	0x20000956

08012a60 <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b086      	sub	sp, #24
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	4603      	mov	r3, r0
 8012a68:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8012a6a:	4b16      	ldr	r3, [pc, #88]	; (8012ac4 <SetTxContinuousWave+0x64>)
 8012a6c:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8012a70:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012a72:	4b15      	ldr	r3, [pc, #84]	; (8012ac8 <SetTxContinuousWave+0x68>)
 8012a74:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012a78:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012a7a:	4b13      	ldr	r3, [pc, #76]	; (8012ac8 <SetTxContinuousWave+0x68>)
 8012a7c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012a80:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8012a82:	4b11      	ldr	r3, [pc, #68]	; (8012ac8 <SetTxContinuousWave+0x68>)
 8012a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a88:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012a8a:	4b0f      	ldr	r3, [pc, #60]	; (8012ac8 <SetTxContinuousWave+0x68>)
 8012a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a90:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8012a92:	88fb      	ldrh	r3, [r7, #6]
 8012a94:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8012a96:	4b0c      	ldr	r3, [pc, #48]	; (8012ac8 <SetTxContinuousWave+0x68>)
 8012a98:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012a9c:	f107 0208 	add.w	r2, r7, #8
 8012aa0:	4611      	mov	r1, r2
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f003 ff5a 	bl	801695c <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012aa8:	4b06      	ldr	r3, [pc, #24]	; (8012ac4 <SetTxContinuousWave+0x64>)
 8012aaa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012aae:	f043 0302 	orr.w	r3, r3, #2
 8012ab2:	4a04      	ldr	r2, [pc, #16]	; (8012ac4 <SetTxContinuousWave+0x64>)
 8012ab4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8012ab8:	2300      	movs	r3, #0
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	3718      	adds	r7, #24
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}
 8012ac2:	bf00      	nop
 8012ac4:	20000954 	.word	0x20000954
 8012ac8:	20000e5c 	.word	0x20000e5c

08012acc <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b082      	sub	sp, #8
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	6039      	str	r1, [r7, #0]
 8012ad6:	80fb      	strh	r3, [r7, #6]
 8012ad8:	4613      	mov	r3, r2
 8012ada:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8012adc:	4b09      	ldr	r3, [pc, #36]	; (8012b04 <SetTxContinuousWave1+0x38>)
 8012ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ae0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8012ae4:	88fa      	ldrh	r2, [r7, #6]
 8012ae6:	6838      	ldr	r0, [r7, #0]
 8012ae8:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012aea:	4b07      	ldr	r3, [pc, #28]	; (8012b08 <SetTxContinuousWave1+0x3c>)
 8012aec:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012af0:	f043 0302 	orr.w	r3, r3, #2
 8012af4:	4a04      	ldr	r2, [pc, #16]	; (8012b08 <SetTxContinuousWave1+0x3c>)
 8012af6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8012afa:	2300      	movs	r3, #0
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3708      	adds	r7, #8
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}
 8012b04:	0801e8c0 	.word	0x0801e8c0
 8012b08:	20000954 	.word	0x20000954

08012b0c <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8012b0c:	b480      	push	{r7}
 8012b0e:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8012b10:	2300      	movs	r3, #0
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bc80      	pop	{r7}
 8012b18:	4770      	bx	lr

08012b1a <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8012b1a:	b480      	push	{r7}
 8012b1c:	b083      	sub	sp, #12
 8012b1e:	af00      	add	r7, sp, #0
 8012b20:	6078      	str	r0, [r7, #4]
 8012b22:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d002      	beq.n	8012b30 <DetermineFrameType+0x16>
 8012b2a:	683b      	ldr	r3, [r7, #0]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d101      	bne.n	8012b34 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012b30:	2303      	movs	r3, #3
 8012b32:	e03b      	b.n	8012bac <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	7b1b      	ldrb	r3, [r3, #12]
 8012b38:	f003 030f 	and.w	r3, r3, #15
 8012b3c:	b2db      	uxtb	r3, r3
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d008      	beq.n	8012b54 <DetermineFrameType+0x3a>
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d003      	beq.n	8012b54 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	701a      	strb	r2, [r3, #0]
 8012b52:	e02a      	b.n	8012baa <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d103      	bne.n	8012b66 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	2201      	movs	r2, #1
 8012b62:	701a      	strb	r2, [r3, #0]
 8012b64:	e021      	b.n	8012baa <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	7b1b      	ldrb	r3, [r3, #12]
 8012b6a:	f003 030f 	and.w	r3, r3, #15
 8012b6e:	b2db      	uxtb	r3, r3
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d108      	bne.n	8012b86 <DetermineFrameType+0x6c>
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d103      	bne.n	8012b86 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8012b7e:	683b      	ldr	r3, [r7, #0]
 8012b80:	2202      	movs	r2, #2
 8012b82:	701a      	strb	r2, [r3, #0]
 8012b84:	e011      	b.n	8012baa <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	7b1b      	ldrb	r3, [r3, #12]
 8012b8a:	f003 030f 	and.w	r3, r3, #15
 8012b8e:	b2db      	uxtb	r3, r3
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d108      	bne.n	8012ba6 <DetermineFrameType+0x8c>
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d003      	beq.n	8012ba6 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	2203      	movs	r2, #3
 8012ba2:	701a      	strb	r2, [r3, #0]
 8012ba4:	e001      	b.n	8012baa <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8012ba6:	2318      	movs	r3, #24
 8012ba8:	e000      	b.n	8012bac <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8012baa:	2300      	movs	r3, #0
}
 8012bac:	4618      	mov	r0, r3
 8012bae:	370c      	adds	r7, #12
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bc80      	pop	{r7}
 8012bb4:	4770      	bx	lr
	...

08012bb8 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8012bb8:	b480      	push	{r7}
 8012bba:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8012bbc:	4b12      	ldr	r3, [pc, #72]	; (8012c08 <CheckRetransUnconfirmedUplink+0x50>)
 8012bbe:	f893 240c 	ldrb.w	r2, [r3, #1036]	; 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8012bc2:	4b12      	ldr	r3, [pc, #72]	; (8012c0c <CheckRetransUnconfirmedUplink+0x54>)
 8012bc4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d301      	bcc.n	8012bd0 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8012bcc:	2301      	movs	r3, #1
 8012bce:	e016      	b.n	8012bfe <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012bd0:	4b0d      	ldr	r3, [pc, #52]	; (8012c08 <CheckRetransUnconfirmedUplink+0x50>)
 8012bd2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8012bd6:	f003 0302 	and.w	r3, r3, #2
 8012bda:	b2db      	uxtb	r3, r3
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d00d      	beq.n	8012bfc <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012be0:	4b0a      	ldr	r3, [pc, #40]	; (8012c0c <CheckRetransUnconfirmedUplink+0x54>)
 8012be2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d101      	bne.n	8012bee <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8012bea:	2301      	movs	r3, #1
 8012bec:	e007      	b.n	8012bfe <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8012bee:	4b06      	ldr	r3, [pc, #24]	; (8012c08 <CheckRetransUnconfirmedUplink+0x50>)
 8012bf0:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d101      	bne.n	8012bfc <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8012bf8:	2301      	movs	r3, #1
 8012bfa:	e000      	b.n	8012bfe <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8012bfc:	2300      	movs	r3, #0
}
 8012bfe:	4618      	mov	r0, r3
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bc80      	pop	{r7}
 8012c04:	4770      	bx	lr
 8012c06:	bf00      	nop
 8012c08:	20000954 	.word	0x20000954
 8012c0c:	20000e5c 	.word	0x20000e5c

08012c10 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012c10:	b480      	push	{r7}
 8012c12:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012c14:	4b0e      	ldr	r3, [pc, #56]	; (8012c50 <CheckRetransConfirmedUplink+0x40>)
 8012c16:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
        MacCtx.AckTimeoutRetries )
 8012c1a:	4b0d      	ldr	r3, [pc, #52]	; (8012c50 <CheckRetransConfirmedUplink+0x40>)
 8012c1c:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012c20:	429a      	cmp	r2, r3
 8012c22:	d301      	bcc.n	8012c28 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8012c24:	2301      	movs	r3, #1
 8012c26:	e00f      	b.n	8012c48 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012c28:	4b09      	ldr	r3, [pc, #36]	; (8012c50 <CheckRetransConfirmedUplink+0x40>)
 8012c2a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8012c2e:	f003 0302 	and.w	r3, r3, #2
 8012c32:	b2db      	uxtb	r3, r3
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d006      	beq.n	8012c46 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8012c38:	4b05      	ldr	r3, [pc, #20]	; (8012c50 <CheckRetransConfirmedUplink+0x40>)
 8012c3a:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d001      	beq.n	8012c46 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8012c42:	2301      	movs	r3, #1
 8012c44:	e000      	b.n	8012c48 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8012c46:	2300      	movs	r3, #0
}
 8012c48:	4618      	mov	r0, r3
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bc80      	pop	{r7}
 8012c4e:	4770      	bx	lr
 8012c50:	20000954 	.word	0x20000954

08012c54 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8012c54:	b480      	push	{r7}
 8012c56:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012c58:	4b1a      	ldr	r3, [pc, #104]	; (8012cc4 <StopRetransmission+0x70>)
 8012c5a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8012c5e:	f003 0302 	and.w	r3, r3, #2
 8012c62:	b2db      	uxtb	r3, r3
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d009      	beq.n	8012c7c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012c68:	4b16      	ldr	r3, [pc, #88]	; (8012cc4 <StopRetransmission+0x70>)
 8012c6a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d00e      	beq.n	8012c90 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8012c72:	4b14      	ldr	r3, [pc, #80]	; (8012cc4 <StopRetransmission+0x70>)
 8012c74:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012c78:	2b01      	cmp	r3, #1
 8012c7a:	d009      	beq.n	8012c90 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8012c7c:	4b12      	ldr	r3, [pc, #72]	; (8012cc8 <StopRetransmission+0x74>)
 8012c7e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d004      	beq.n	8012c90 <StopRetransmission+0x3c>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8012c86:	4b10      	ldr	r3, [pc, #64]	; (8012cc8 <StopRetransmission+0x74>)
 8012c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c8a:	3301      	adds	r3, #1
 8012c8c:	4a0e      	ldr	r2, [pc, #56]	; (8012cc8 <StopRetransmission+0x74>)
 8012c8e:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8012c90:	4b0c      	ldr	r3, [pc, #48]	; (8012cc4 <StopRetransmission+0x70>)
 8012c92:	2200      	movs	r2, #0
 8012c94:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.NodeAckRequested = false;
 8012c98:	4b0a      	ldr	r3, [pc, #40]	; (8012cc4 <StopRetransmission+0x70>)
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8012ca0:	4b08      	ldr	r3, [pc, #32]	; (8012cc4 <StopRetransmission+0x70>)
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012ca8:	4b06      	ldr	r3, [pc, #24]	; (8012cc4 <StopRetransmission+0x70>)
 8012caa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012cae:	f023 0302 	bic.w	r3, r3, #2
 8012cb2:	4a04      	ldr	r2, [pc, #16]	; (8012cc4 <StopRetransmission+0x70>)
 8012cb4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8012cb8:	2301      	movs	r3, #1
}
 8012cba:	4618      	mov	r0, r3
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	bc80      	pop	{r7}
 8012cc0:	4770      	bx	lr
 8012cc2:	bf00      	nop
 8012cc4:	20000954 	.word	0x20000954
 8012cc8:	20000e5c 	.word	0x20000e5c

08012ccc <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8012cd0:	4b08      	ldr	r3, [pc, #32]	; (8012cf4 <OnMacProcessNotify+0x28>)
 8012cd2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d00a      	beq.n	8012cf0 <OnMacProcessNotify+0x24>
 8012cda:	4b06      	ldr	r3, [pc, #24]	; (8012cf4 <OnMacProcessNotify+0x28>)
 8012cdc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012ce0:	695b      	ldr	r3, [r3, #20]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d004      	beq.n	8012cf0 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8012ce6:	4b03      	ldr	r3, [pc, #12]	; (8012cf4 <OnMacProcessNotify+0x28>)
 8012ce8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012cec:	695b      	ldr	r3, [r3, #20]
 8012cee:	4798      	blx	r3
    }
}
 8012cf0:	bf00      	nop
 8012cf2:	bd80      	pop	{r7, pc}
 8012cf4:	20000954 	.word	0x20000954

08012cf8 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b082      	sub	sp, #8
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	4603      	mov	r3, r0
 8012d00:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8012d02:	4b0b      	ldr	r3, [pc, #44]	; (8012d30 <CallNvmDataChangeCallback+0x38>)
 8012d04:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d00c      	beq.n	8012d26 <CallNvmDataChangeCallback+0x2e>
 8012d0c:	4b08      	ldr	r3, [pc, #32]	; (8012d30 <CallNvmDataChangeCallback+0x38>)
 8012d0e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012d12:	691b      	ldr	r3, [r3, #16]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d006      	beq.n	8012d26 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8012d18:	4b05      	ldr	r3, [pc, #20]	; (8012d30 <CallNvmDataChangeCallback+0x38>)
 8012d1a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012d1e:	691b      	ldr	r3, [r3, #16]
 8012d20:	88fa      	ldrh	r2, [r7, #6]
 8012d22:	4610      	mov	r0, r2
 8012d24:	4798      	blx	r3
    }
}
 8012d26:	bf00      	nop
 8012d28:	3708      	adds	r7, #8
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}
 8012d2e:	bf00      	nop
 8012d30:	20000954 	.word	0x20000954

08012d34 <AckTimeoutRetriesProcess>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b084      	sub	sp, #16
 8012d38:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8012d3a:	4b1b      	ldr	r3, [pc, #108]	; (8012da8 <AckTimeoutRetriesProcess+0x74>)
 8012d3c:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8012d40:	4b19      	ldr	r3, [pc, #100]	; (8012da8 <AckTimeoutRetriesProcess+0x74>)
 8012d42:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 8012d46:	429a      	cmp	r2, r3
 8012d48:	d229      	bcs.n	8012d9e <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8012d4a:	4b17      	ldr	r3, [pc, #92]	; (8012da8 <AckTimeoutRetriesProcess+0x74>)
 8012d4c:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8012d50:	3301      	adds	r3, #1
 8012d52:	b2da      	uxtb	r2, r3
 8012d54:	4b14      	ldr	r3, [pc, #80]	; (8012da8 <AckTimeoutRetriesProcess+0x74>)
 8012d56:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8012d5a:	4b13      	ldr	r3, [pc, #76]	; (8012da8 <AckTimeoutRetriesProcess+0x74>)
 8012d5c:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8012d60:	f003 0301 	and.w	r3, r3, #1
 8012d64:	b2db      	uxtb	r3, r3
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d019      	beq.n	8012d9e <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012d6a:	2322      	movs	r3, #34	; 0x22
 8012d6c:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012d6e:	4b0f      	ldr	r3, [pc, #60]	; (8012dac <AckTimeoutRetriesProcess+0x78>)
 8012d70:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012d74:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012d76:	4b0d      	ldr	r3, [pc, #52]	; (8012dac <AckTimeoutRetriesProcess+0x78>)
 8012d78:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012d7c:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d7e:	4b0b      	ldr	r3, [pc, #44]	; (8012dac <AckTimeoutRetriesProcess+0x78>)
 8012d80:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012d84:	f107 0208 	add.w	r2, r7, #8
 8012d88:	4611      	mov	r1, r2
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	f003 fc91 	bl	80166b2 <RegionGetPhyParam>
 8012d90:	4603      	mov	r3, r0
 8012d92:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	b25a      	sxtb	r2, r3
 8012d98:	4b04      	ldr	r3, [pc, #16]	; (8012dac <AckTimeoutRetriesProcess+0x78>)
 8012d9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8012d9e:	bf00      	nop
 8012da0:	3710      	adds	r7, #16
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}
 8012da6:	bf00      	nop
 8012da8:	20000954 	.word	0x20000954
 8012dac:	20000e5c 	.word	0x20000e5c

08012db0 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b084      	sub	sp, #16
 8012db4:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8012db6:	4b14      	ldr	r3, [pc, #80]	; (8012e08 <AckTimeoutRetriesFinalize+0x58>)
 8012db8:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8012dbc:	f083 0301 	eor.w	r3, r3, #1
 8012dc0:	b2db      	uxtb	r3, r3
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d015      	beq.n	8012df2 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012dc6:	2302      	movs	r3, #2
 8012dc8:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8012dca:	4b10      	ldr	r3, [pc, #64]	; (8012e0c <AckTimeoutRetriesFinalize+0x5c>)
 8012dcc:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8012dce:	4b10      	ldr	r3, [pc, #64]	; (8012e10 <AckTimeoutRetriesFinalize+0x60>)
 8012dd0:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012dd2:	4b10      	ldr	r3, [pc, #64]	; (8012e14 <AckTimeoutRetriesFinalize+0x64>)
 8012dd4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012dd8:	1d3a      	adds	r2, r7, #4
 8012dda:	4611      	mov	r1, r2
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f003 fc91 	bl	8016704 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8012de2:	4b09      	ldr	r3, [pc, #36]	; (8012e08 <AckTimeoutRetriesFinalize+0x58>)
 8012de4:	2200      	movs	r2, #0
 8012de6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 8012dea:	4b07      	ldr	r3, [pc, #28]	; (8012e08 <AckTimeoutRetriesFinalize+0x58>)
 8012dec:	2200      	movs	r2, #0
 8012dee:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8012df2:	4b05      	ldr	r3, [pc, #20]	; (8012e08 <AckTimeoutRetriesFinalize+0x58>)
 8012df4:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8012df8:	4b03      	ldr	r3, [pc, #12]	; (8012e08 <AckTimeoutRetriesFinalize+0x58>)
 8012dfa:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 8012dfe:	bf00      	nop
 8012e00:	3710      	adds	r7, #16
 8012e02:	46bd      	mov	sp, r7
 8012e04:	bd80      	pop	{r7, pc}
 8012e06:	bf00      	nop
 8012e08:	20000954 	.word	0x20000954
 8012e0c:	2000107c 	.word	0x2000107c
 8012e10:	20001110 	.word	0x20001110
 8012e14:	20000e5c 	.word	0x20000e5c

08012e18 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8012e18:	b480      	push	{r7}
 8012e1a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012e1c:	4b0b      	ldr	r3, [pc, #44]	; (8012e4c <IsRequestPending+0x34>)
 8012e1e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8012e22:	f003 0304 	and.w	r3, r3, #4
 8012e26:	b2db      	uxtb	r3, r3
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d107      	bne.n	8012e3c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8012e2c:	4b07      	ldr	r3, [pc, #28]	; (8012e4c <IsRequestPending+0x34>)
 8012e2e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8012e32:	f003 0301 	and.w	r3, r3, #1
 8012e36:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d001      	beq.n	8012e40 <IsRequestPending+0x28>
    {
        return 1;
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	e000      	b.n	8012e42 <IsRequestPending+0x2a>
    }
    return 0;
 8012e40:	2300      	movs	r3, #0
}
 8012e42:	4618      	mov	r0, r3
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bc80      	pop	{r7}
 8012e48:	4770      	bx	lr
 8012e4a:	bf00      	nop
 8012e4c:	20000954 	.word	0x20000954

08012e50 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012e50:	b590      	push	{r4, r7, lr}
 8012e52:	b08f      	sub	sp, #60	; 0x3c
 8012e54:	af02      	add	r7, sp, #8
 8012e56:	6178      	str	r0, [r7, #20]
 8012e58:	6139      	str	r1, [r7, #16]
 8012e5a:	4613      	mov	r3, r2
 8012e5c:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8012e5e:	697b      	ldr	r3, [r7, #20]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d002      	beq.n	8012e6a <LoRaMacInitialization+0x1a>
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d101      	bne.n	8012e6e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012e6a:	2303      	movs	r3, #3
 8012e6c:	e273      	b.n	8013356 <LoRaMacInitialization+0x506>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d00b      	beq.n	8012e8e <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d007      	beq.n	8012e8e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d003      	beq.n	8012e8e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8012e86:	697b      	ldr	r3, [r7, #20]
 8012e88:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d101      	bne.n	8012e92 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012e8e:	2303      	movs	r3, #3
 8012e90:	e261      	b.n	8013356 <LoRaMacInitialization+0x506>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012e92:	7bfb      	ldrb	r3, [r7, #15]
 8012e94:	4618      	mov	r0, r3
 8012e96:	f003 fbfc 	bl	8016692 <RegionIsActive>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	f083 0301 	eor.w	r3, r3, #1
 8012ea0:	b2db      	uxtb	r3, r3
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d001      	beq.n	8012eaa <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012ea6:	2309      	movs	r3, #9
 8012ea8:	e255      	b.n	8013356 <LoRaMacInitialization+0x506>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8012eaa:	6978      	ldr	r0, [r7, #20]
 8012eac:	f002 f852 	bl	8014f54 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8012eb0:	f44f 62ed 	mov.w	r2, #1896	; 0x768
 8012eb4:	2100      	movs	r1, #0
 8012eb6:	48c7      	ldr	r0, [pc, #796]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012eb8:	f005 ff50 	bl	8018d5c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012ebc:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8012ec0:	2100      	movs	r1, #0
 8012ec2:	48c5      	ldr	r0, [pc, #788]	; (80131d8 <LoRaMacInitialization+0x388>)
 8012ec4:	f005 ff4a 	bl	8018d5c <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012ec8:	4bc3      	ldr	r3, [pc, #780]	; (80131d8 <LoRaMacInitialization+0x388>)
 8012eca:	2201      	movs	r2, #1
 8012ecc:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetries = 1;
 8012ed0:	4bc1      	ldr	r3, [pc, #772]	; (80131d8 <LoRaMacInitialization+0x388>)
 8012ed2:	2201      	movs	r2, #1
 8012ed4:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8012ed8:	4abe      	ldr	r2, [pc, #760]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012eda:	7bfb      	ldrb	r3, [r7, #15]
 8012edc:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8012ee0:	4bbc      	ldr	r3, [pc, #752]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8012ee8:	4bba      	ldr	r3, [pc, #744]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012eea:	2200      	movs	r2, #0
 8012eec:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8012ef0:	4bb8      	ldr	r3, [pc, #736]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012ef2:	4aba      	ldr	r2, [pc, #744]	; (80131dc <LoRaMacInitialization+0x38c>)
 8012ef4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012ef8:	230f      	movs	r3, #15
 8012efa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012efe:	4bb5      	ldr	r3, [pc, #724]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012f00:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012f04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012f08:	4611      	mov	r1, r2
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f003 fbd1 	bl	80166b2 <RegionGetPhyParam>
 8012f10:	4603      	mov	r3, r0
 8012f12:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8012f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	bf14      	ite	ne
 8012f1a:	2301      	movne	r3, #1
 8012f1c:	2300      	moveq	r3, #0
 8012f1e:	b2da      	uxtb	r2, r3
 8012f20:	4bac      	ldr	r3, [pc, #688]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012f22:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8012f26:	230a      	movs	r3, #10
 8012f28:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012f2c:	4ba9      	ldr	r3, [pc, #676]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012f2e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012f32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012f36:	4611      	mov	r1, r2
 8012f38:	4618      	mov	r0, r3
 8012f3a:	f003 fbba 	bl	80166b2 <RegionGetPhyParam>
 8012f3e:	4603      	mov	r3, r0
 8012f40:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8012f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f44:	b25a      	sxtb	r2, r3
 8012f46:	4ba3      	ldr	r3, [pc, #652]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012f48:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012f4c:	2306      	movs	r3, #6
 8012f4e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012f52:	4ba0      	ldr	r3, [pc, #640]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012f54:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012f58:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012f5c:	4611      	mov	r1, r2
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f003 fba7 	bl	80166b2 <RegionGetPhyParam>
 8012f64:	4603      	mov	r3, r0
 8012f66:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8012f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6a:	b25a      	sxtb	r2, r3
 8012f6c:	4b99      	ldr	r3, [pc, #612]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012f6e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8012f72:	2310      	movs	r3, #16
 8012f74:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012f78:	4b96      	ldr	r3, [pc, #600]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012f7a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012f7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012f82:	4611      	mov	r1, r2
 8012f84:	4618      	mov	r0, r3
 8012f86:	f003 fb94 	bl	80166b2 <RegionGetPhyParam>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8012f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f90:	4a90      	ldr	r2, [pc, #576]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012f92:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8012f96:	2311      	movs	r3, #17
 8012f98:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012f9c:	4b8d      	ldr	r3, [pc, #564]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012f9e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012fa2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012fa6:	4611      	mov	r1, r2
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f003 fb82 	bl	80166b2 <RegionGetPhyParam>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fb4:	4a87      	ldr	r2, [pc, #540]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012fb6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8012fba:	2312      	movs	r3, #18
 8012fbc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012fc0:	4b84      	ldr	r3, [pc, #528]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012fc2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012fc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012fca:	4611      	mov	r1, r2
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f003 fb70 	bl	80166b2 <RegionGetPhyParam>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8012fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd8:	4a7e      	ldr	r2, [pc, #504]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012fda:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8012fde:	2313      	movs	r3, #19
 8012fe0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012fe4:	4b7b      	ldr	r3, [pc, #492]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012fe6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012fea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012fee:	4611      	mov	r1, r2
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f003 fb5e 	bl	80166b2 <RegionGetPhyParam>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8012ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ffc:	4a75      	ldr	r2, [pc, #468]	; (80131d4 <LoRaMacInitialization+0x384>)
 8012ffe:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8013002:	2314      	movs	r3, #20
 8013004:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013008:	4b72      	ldr	r3, [pc, #456]	; (80131d4 <LoRaMacInitialization+0x384>)
 801300a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801300e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013012:	4611      	mov	r1, r2
 8013014:	4618      	mov	r0, r3
 8013016:	f003 fb4c 	bl	80166b2 <RegionGetPhyParam>
 801301a:	4603      	mov	r3, r0
 801301c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013020:	4a6c      	ldr	r2, [pc, #432]	; (80131d4 <LoRaMacInitialization+0x384>)
 8013022:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8013026:	2317      	movs	r3, #23
 8013028:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801302c:	4b69      	ldr	r3, [pc, #420]	; (80131d4 <LoRaMacInitialization+0x384>)
 801302e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013032:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013036:	4611      	mov	r1, r2
 8013038:	4618      	mov	r0, r3
 801303a:	f003 fb3a 	bl	80166b2 <RegionGetPhyParam>
 801303e:	4603      	mov	r3, r0
 8013040:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8013042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013044:	b2da      	uxtb	r2, r3
 8013046:	4b63      	ldr	r3, [pc, #396]	; (80131d4 <LoRaMacInitialization+0x384>)
 8013048:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 801304c:	2318      	movs	r3, #24
 801304e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013052:	4b60      	ldr	r3, [pc, #384]	; (80131d4 <LoRaMacInitialization+0x384>)
 8013054:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013058:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801305c:	4611      	mov	r1, r2
 801305e:	4618      	mov	r0, r3
 8013060:	f003 fb27 	bl	80166b2 <RegionGetPhyParam>
 8013064:	4603      	mov	r3, r0
 8013066:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8013068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801306a:	4a5a      	ldr	r2, [pc, #360]	; (80131d4 <LoRaMacInitialization+0x384>)
 801306c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8013070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013072:	4a58      	ldr	r2, [pc, #352]	; (80131d4 <LoRaMacInitialization+0x384>)
 8013074:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8013078:	2319      	movs	r3, #25
 801307a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801307e:	4b55      	ldr	r3, [pc, #340]	; (80131d4 <LoRaMacInitialization+0x384>)
 8013080:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013084:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013088:	4611      	mov	r1, r2
 801308a:	4618      	mov	r0, r3
 801308c:	f003 fb11 	bl	80166b2 <RegionGetPhyParam>
 8013090:	4603      	mov	r3, r0
 8013092:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8013094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013096:	b2da      	uxtb	r2, r3
 8013098:	4b4e      	ldr	r3, [pc, #312]	; (80131d4 <LoRaMacInitialization+0x384>)
 801309a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a0:	b2da      	uxtb	r2, r3
 80130a2:	4b4c      	ldr	r3, [pc, #304]	; (80131d4 <LoRaMacInitialization+0x384>)
 80130a4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80130a8:	231e      	movs	r3, #30
 80130aa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80130ae:	4b49      	ldr	r3, [pc, #292]	; (80131d4 <LoRaMacInitialization+0x384>)
 80130b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80130b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80130b8:	4611      	mov	r1, r2
 80130ba:	4618      	mov	r0, r3
 80130bc:	f003 faf9 	bl	80166b2 <RegionGetPhyParam>
 80130c0:	4603      	mov	r3, r0
 80130c2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80130c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c6:	b2da      	uxtb	r2, r3
 80130c8:	4b42      	ldr	r3, [pc, #264]	; (80131d4 <LoRaMacInitialization+0x384>)
 80130ca:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80130ce:	231f      	movs	r3, #31
 80130d0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80130d4:	4b3f      	ldr	r3, [pc, #252]	; (80131d4 <LoRaMacInitialization+0x384>)
 80130d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80130da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80130de:	4611      	mov	r1, r2
 80130e0:	4618      	mov	r0, r3
 80130e2:	f003 fae6 	bl	80166b2 <RegionGetPhyParam>
 80130e6:	4603      	mov	r3, r0
 80130e8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80130ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ec:	b2da      	uxtb	r2, r3
 80130ee:	4b39      	ldr	r3, [pc, #228]	; (80131d4 <LoRaMacInitialization+0x384>)
 80130f0:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80130f4:	2320      	movs	r3, #32
 80130f6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80130fa:	4b36      	ldr	r3, [pc, #216]	; (80131d4 <LoRaMacInitialization+0x384>)
 80130fc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013100:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013104:	4611      	mov	r1, r2
 8013106:	4618      	mov	r0, r3
 8013108:	f003 fad3 	bl	80166b2 <RegionGetPhyParam>
 801310c:	4603      	mov	r3, r0
 801310e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8013110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013112:	4a30      	ldr	r2, [pc, #192]	; (80131d4 <LoRaMacInitialization+0x384>)
 8013114:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8013118:	2321      	movs	r3, #33	; 0x21
 801311a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801311e:	4b2d      	ldr	r3, [pc, #180]	; (80131d4 <LoRaMacInitialization+0x384>)
 8013120:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013124:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013128:	4611      	mov	r1, r2
 801312a:	4618      	mov	r0, r3
 801312c:	f003 fac1 	bl	80166b2 <RegionGetPhyParam>
 8013130:	4603      	mov	r3, r0
 8013132:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8013134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013136:	4a27      	ldr	r2, [pc, #156]	; (80131d4 <LoRaMacInitialization+0x384>)
 8013138:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 801313c:	230b      	movs	r3, #11
 801313e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013142:	4b24      	ldr	r3, [pc, #144]	; (80131d4 <LoRaMacInitialization+0x384>)
 8013144:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013148:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801314c:	4611      	mov	r1, r2
 801314e:	4618      	mov	r0, r3
 8013150:	f003 faaf 	bl	80166b2 <RegionGetPhyParam>
 8013154:	4603      	mov	r3, r0
 8013156:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8013158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315a:	b29a      	uxth	r2, r3
 801315c:	4b1d      	ldr	r3, [pc, #116]	; (80131d4 <LoRaMacInitialization+0x384>)
 801315e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8013162:	230c      	movs	r3, #12
 8013164:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013168:	4b1a      	ldr	r3, [pc, #104]	; (80131d4 <LoRaMacInitialization+0x384>)
 801316a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801316e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013172:	4611      	mov	r1, r2
 8013174:	4618      	mov	r0, r3
 8013176:	f003 fa9c 	bl	80166b2 <RegionGetPhyParam>
 801317a:	4603      	mov	r3, r0
 801317c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 801317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013180:	b29a      	uxth	r2, r3
 8013182:	4b14      	ldr	r3, [pc, #80]	; (80131d4 <LoRaMacInitialization+0x384>)
 8013184:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8013188:	4b12      	ldr	r3, [pc, #72]	; (80131d4 <LoRaMacInitialization+0x384>)
 801318a:	2201      	movs	r2, #1
 801318c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8013190:	4b10      	ldr	r3, [pc, #64]	; (80131d4 <LoRaMacInitialization+0x384>)
 8013192:	220a      	movs	r2, #10
 8013194:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8013198:	4b0e      	ldr	r3, [pc, #56]	; (80131d4 <LoRaMacInitialization+0x384>)
 801319a:	2206      	movs	r2, #6
 801319c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80131a0:	4b0c      	ldr	r3, [pc, #48]	; (80131d4 <LoRaMacInitialization+0x384>)
 80131a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80131a6:	4a0b      	ldr	r2, [pc, #44]	; (80131d4 <LoRaMacInitialization+0x384>)
 80131a8:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80131aa:	4b0a      	ldr	r3, [pc, #40]	; (80131d4 <LoRaMacInitialization+0x384>)
 80131ac:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 80131b0:	4b08      	ldr	r3, [pc, #32]	; (80131d4 <LoRaMacInitialization+0x384>)
 80131b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80131b6:	4b07      	ldr	r3, [pc, #28]	; (80131d4 <LoRaMacInitialization+0x384>)
 80131b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80131bc:	4a05      	ldr	r2, [pc, #20]	; (80131d4 <LoRaMacInitialization+0x384>)
 80131be:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80131c0:	4b04      	ldr	r3, [pc, #16]	; (80131d4 <LoRaMacInitialization+0x384>)
 80131c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80131c6:	4a03      	ldr	r2, [pc, #12]	; (80131d4 <LoRaMacInitialization+0x384>)
 80131c8:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80131ca:	4b02      	ldr	r3, [pc, #8]	; (80131d4 <LoRaMacInitialization+0x384>)
 80131cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80131d0:	e006      	b.n	80131e0 <LoRaMacInitialization+0x390>
 80131d2:	bf00      	nop
 80131d4:	20000e5c 	.word	0x20000e5c
 80131d8:	20000954 	.word	0x20000954
 80131dc:	01000300 	.word	0x01000300
 80131e0:	4a5f      	ldr	r2, [pc, #380]	; (8013360 <LoRaMacInitialization+0x510>)
 80131e2:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80131e4:	4b5e      	ldr	r3, [pc, #376]	; (8013360 <LoRaMacInitialization+0x510>)
 80131e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80131ea:	4a5d      	ldr	r2, [pc, #372]	; (8013360 <LoRaMacInitialization+0x510>)
 80131ec:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80131ee:	4b5c      	ldr	r3, [pc, #368]	; (8013360 <LoRaMacInitialization+0x510>)
 80131f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80131f4:	4a5a      	ldr	r2, [pc, #360]	; (8013360 <LoRaMacInitialization+0x510>)
 80131f6:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80131f8:	4b59      	ldr	r3, [pc, #356]	; (8013360 <LoRaMacInitialization+0x510>)
 80131fa:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 80131fe:	4b58      	ldr	r3, [pc, #352]	; (8013360 <LoRaMacInitialization+0x510>)
 8013200:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8013204:	2300      	movs	r3, #0
 8013206:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801320a:	4b56      	ldr	r3, [pc, #344]	; (8013364 <LoRaMacInitialization+0x514>)
 801320c:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801320e:	4b56      	ldr	r3, [pc, #344]	; (8013368 <LoRaMacInitialization+0x518>)
 8013210:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013212:	4b53      	ldr	r3, [pc, #332]	; (8013360 <LoRaMacInitialization+0x510>)
 8013214:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013218:	f107 0218 	add.w	r2, r7, #24
 801321c:	4611      	mov	r1, r2
 801321e:	4618      	mov	r0, r3
 8013220:	f003 fa70 	bl	8016704 <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8013224:	4a51      	ldr	r2, [pc, #324]	; (801336c <LoRaMacInitialization+0x51c>)
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 801322c:	2000      	movs	r0, #0
 801322e:	f7ff f8b5 	bl	801239c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8013232:	4b4b      	ldr	r3, [pc, #300]	; (8013360 <LoRaMacInitialization+0x510>)
 8013234:	2201      	movs	r2, #1
 8013236:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 801323a:	4a4c      	ldr	r2, [pc, #304]	; (801336c <LoRaMacInitialization+0x51c>)
 801323c:	697b      	ldr	r3, [r7, #20]
 801323e:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8013242:	4b4a      	ldr	r3, [pc, #296]	; (801336c <LoRaMacInitialization+0x51c>)
 8013244:	2200      	movs	r2, #0
 8013246:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 801324a:	4b48      	ldr	r3, [pc, #288]	; (801336c <LoRaMacInitialization+0x51c>)
 801324c:	2201      	movs	r2, #1
 801324e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8013252:	4b43      	ldr	r3, [pc, #268]	; (8013360 <LoRaMacInitialization+0x510>)
 8013254:	2200      	movs	r2, #0
 8013256:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8013258:	4b41      	ldr	r3, [pc, #260]	; (8013360 <LoRaMacInitialization+0x510>)
 801325a:	2200      	movs	r2, #0
 801325c:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 801325e:	2300      	movs	r3, #0
 8013260:	9300      	str	r3, [sp, #0]
 8013262:	4b43      	ldr	r3, [pc, #268]	; (8013370 <LoRaMacInitialization+0x520>)
 8013264:	2200      	movs	r2, #0
 8013266:	f04f 31ff 	mov.w	r1, #4294967295
 801326a:	4842      	ldr	r0, [pc, #264]	; (8013374 <LoRaMacInitialization+0x524>)
 801326c:	f009 fe32 	bl	801ced4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8013270:	2300      	movs	r3, #0
 8013272:	9300      	str	r3, [sp, #0]
 8013274:	4b40      	ldr	r3, [pc, #256]	; (8013378 <LoRaMacInitialization+0x528>)
 8013276:	2200      	movs	r2, #0
 8013278:	f04f 31ff 	mov.w	r1, #4294967295
 801327c:	483f      	ldr	r0, [pc, #252]	; (801337c <LoRaMacInitialization+0x52c>)
 801327e:	f009 fe29 	bl	801ced4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8013282:	2300      	movs	r3, #0
 8013284:	9300      	str	r3, [sp, #0]
 8013286:	4b3e      	ldr	r3, [pc, #248]	; (8013380 <LoRaMacInitialization+0x530>)
 8013288:	2200      	movs	r2, #0
 801328a:	f04f 31ff 	mov.w	r1, #4294967295
 801328e:	483d      	ldr	r0, [pc, #244]	; (8013384 <LoRaMacInitialization+0x534>)
 8013290:	f009 fe20 	bl	801ced4 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8013294:	2300      	movs	r3, #0
 8013296:	9300      	str	r3, [sp, #0]
 8013298:	4b3b      	ldr	r3, [pc, #236]	; (8013388 <LoRaMacInitialization+0x538>)
 801329a:	2200      	movs	r2, #0
 801329c:	f04f 31ff 	mov.w	r1, #4294967295
 80132a0:	483a      	ldr	r0, [pc, #232]	; (801338c <LoRaMacInitialization+0x53c>)
 80132a2:	f009 fe17 	bl	801ced4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80132a6:	4c2e      	ldr	r4, [pc, #184]	; (8013360 <LoRaMacInitialization+0x510>)
 80132a8:	463b      	mov	r3, r7
 80132aa:	4618      	mov	r0, r3
 80132ac:	f009 f986 	bl	801c5bc <SysTimeGetMcuTime>
 80132b0:	f504 7390 	add.w	r3, r4, #288	; 0x120
 80132b4:	463a      	mov	r2, r7
 80132b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132ba:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80132be:	4b2b      	ldr	r3, [pc, #172]	; (801336c <LoRaMacInitialization+0x51c>)
 80132c0:	4a33      	ldr	r2, [pc, #204]	; (8013390 <LoRaMacInitialization+0x540>)
 80132c2:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80132c6:	4b29      	ldr	r3, [pc, #164]	; (801336c <LoRaMacInitialization+0x51c>)
 80132c8:	4a32      	ldr	r2, [pc, #200]	; (8013394 <LoRaMacInitialization+0x544>)
 80132ca:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80132ce:	4b27      	ldr	r3, [pc, #156]	; (801336c <LoRaMacInitialization+0x51c>)
 80132d0:	4a31      	ldr	r2, [pc, #196]	; (8013398 <LoRaMacInitialization+0x548>)
 80132d2:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80132d6:	4b25      	ldr	r3, [pc, #148]	; (801336c <LoRaMacInitialization+0x51c>)
 80132d8:	4a30      	ldr	r2, [pc, #192]	; (801339c <LoRaMacInitialization+0x54c>)
 80132da:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80132de:	4b23      	ldr	r3, [pc, #140]	; (801336c <LoRaMacInitialization+0x51c>)
 80132e0:	4a2f      	ldr	r2, [pc, #188]	; (80133a0 <LoRaMacInitialization+0x550>)
 80132e2:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80132e6:	4b2f      	ldr	r3, [pc, #188]	; (80133a4 <LoRaMacInitialization+0x554>)
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	482f      	ldr	r0, [pc, #188]	; (80133a8 <LoRaMacInitialization+0x558>)
 80132ec:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 80132ee:	482f      	ldr	r0, [pc, #188]	; (80133ac <LoRaMacInitialization+0x55c>)
 80132f0:	f7fa fe10 	bl	800df14 <SecureElementInit>
 80132f4:	4603      	mov	r3, r0
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d001      	beq.n	80132fe <LoRaMacInitialization+0x4ae>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80132fa:	2311      	movs	r3, #17
 80132fc:	e02b      	b.n	8013356 <LoRaMacInitialization+0x506>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80132fe:	4818      	ldr	r0, [pc, #96]	; (8013360 <LoRaMacInitialization+0x510>)
 8013300:	f002 fae8 	bl	80158d4 <LoRaMacCryptoInit>
 8013304:	4603      	mov	r3, r0
 8013306:	2b00      	cmp	r3, #0
 8013308:	d001      	beq.n	801330e <LoRaMacInitialization+0x4be>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801330a:	2311      	movs	r3, #17
 801330c:	e023      	b.n	8013356 <LoRaMacInitialization+0x506>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 801330e:	f001 fbe3 	bl	8014ad8 <LoRaMacCommandsInit>
 8013312:	4603      	mov	r3, r0
 8013314:	2b00      	cmp	r3, #0
 8013316:	d001      	beq.n	801331c <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013318:	2313      	movs	r3, #19
 801331a:	e01c      	b.n	8013356 <LoRaMacInitialization+0x506>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 801331c:	4824      	ldr	r0, [pc, #144]	; (80133b0 <LoRaMacInitialization+0x560>)
 801331e:	f002 fba3 	bl	8015a68 <LoRaMacCryptoSetMulticastReference>
 8013322:	4603      	mov	r3, r0
 8013324:	2b00      	cmp	r3, #0
 8013326:	d001      	beq.n	801332c <LoRaMacInitialization+0x4dc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013328:	2311      	movs	r3, #17
 801332a:	e014      	b.n	8013356 <LoRaMacInitialization+0x506>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 801332c:	4b1d      	ldr	r3, [pc, #116]	; (80133a4 <LoRaMacInitialization+0x554>)
 801332e:	695b      	ldr	r3, [r3, #20]
 8013330:	4798      	blx	r3
 8013332:	4603      	mov	r3, r0
 8013334:	4618      	mov	r0, r3
 8013336:	f005 fcb1 	bl	8018c9c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801333a:	4b1a      	ldr	r3, [pc, #104]	; (80133a4 <LoRaMacInitialization+0x554>)
 801333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801333e:	4a08      	ldr	r2, [pc, #32]	; (8013360 <LoRaMacInitialization+0x510>)
 8013340:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8013344:	4610      	mov	r0, r2
 8013346:	4798      	blx	r3
    Radio.Sleep( );
 8013348:	4b16      	ldr	r3, [pc, #88]	; (80133a4 <LoRaMacInitialization+0x554>)
 801334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801334c:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801334e:	2001      	movs	r0, #1
 8013350:	f7fd fb40 	bl	80109d4 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8013354:	2300      	movs	r3, #0
}
 8013356:	4618      	mov	r0, r3
 8013358:	3734      	adds	r7, #52	; 0x34
 801335a:	46bd      	mov	sp, r7
 801335c:	bd90      	pop	{r4, r7, pc}
 801335e:	bf00      	nop
 8013360:	20000e5c 	.word	0x20000e5c
 8013364:	2000107c 	.word	0x2000107c
 8013368:	20001110 	.word	0x20001110
 801336c:	20000954 	.word	0x20000954
 8013370:	08010f15 	.word	0x08010f15
 8013374:	20000cbc 	.word	0x20000cbc
 8013378:	08010f89 	.word	0x08010f89
 801337c:	20000cd4 	.word	0x20000cd4
 8013380:	08010ff5 	.word	0x08010ff5
 8013384:	20000cec 	.word	0x20000cec
 8013388:	08011069 	.word	0x08011069
 801338c:	20000d48 	.word	0x20000d48
 8013390:	0800fad5 	.word	0x0800fad5
 8013394:	0800fb31 	.word	0x0800fb31
 8013398:	0800fbc9 	.word	0x0800fbc9
 801339c:	0800fb9d 	.word	0x0800fb9d
 80133a0:	0800fbe5 	.word	0x0800fbe5
 80133a4:	0801e8c0 	.word	0x0801e8c0
 80133a8:	20000ca0 	.word	0x20000ca0
 80133ac:	20000fa4 	.word	0x20000fa4
 80133b0:	20000f44 	.word	0x20000f44

080133b4 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80133b8:	4b04      	ldr	r3, [pc, #16]	; (80133cc <LoRaMacStart+0x18>)
 80133ba:	2200      	movs	r2, #0
 80133bc:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 80133c0:	f7fc fc26 	bl	800fc10 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 80133c4:	2300      	movs	r3, #0
}
 80133c6:	4618      	mov	r0, r3
 80133c8:	bd80      	pop	{r7, pc}
 80133ca:	bf00      	nop
 80133cc:	20000954 	.word	0x20000954

080133d0 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 80133d4:	f7fd fad2 	bl	801097c <LoRaMacIsBusy>
 80133d8:	4603      	mov	r3, r0
 80133da:	f083 0301 	eor.w	r3, r3, #1
 80133de:	b2db      	uxtb	r3, r3
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d00d      	beq.n	8013400 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80133e4:	4b0b      	ldr	r3, [pc, #44]	; (8013414 <LoRaMacStop+0x44>)
 80133e6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80133ea:	2b02      	cmp	r3, #2
 80133ec:	d102      	bne.n	80133f4 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 80133ee:	4b0a      	ldr	r3, [pc, #40]	; (8013418 <LoRaMacStop+0x48>)
 80133f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133f2:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 80133f4:	4b09      	ldr	r3, [pc, #36]	; (801341c <LoRaMacStop+0x4c>)
 80133f6:	2201      	movs	r2, #1
 80133f8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 80133fc:	2300      	movs	r3, #0
 80133fe:	e007      	b.n	8013410 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8013400:	4b06      	ldr	r3, [pc, #24]	; (801341c <LoRaMacStop+0x4c>)
 8013402:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013406:	2b01      	cmp	r3, #1
 8013408:	d101      	bne.n	801340e <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 801340a:	2300      	movs	r3, #0
 801340c:	e000      	b.n	8013410 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 801340e:	2301      	movs	r3, #1
}
 8013410:	4618      	mov	r0, r3
 8013412:	bd80      	pop	{r7, pc}
 8013414:	20000e5c 	.word	0x20000e5c
 8013418:	0801e8c0 	.word	0x0801e8c0
 801341c:	20000954 	.word	0x20000954

08013420 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8013420:	b580      	push	{r7, lr}
 8013422:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8013424:	480d      	ldr	r0, [pc, #52]	; (801345c <LoRaMacHalt+0x3c>)
 8013426:	f009 fdf9 	bl	801d01c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 801342a:	480d      	ldr	r0, [pc, #52]	; (8013460 <LoRaMacHalt+0x40>)
 801342c:	f009 fdf6 	bl	801d01c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8013430:	480c      	ldr	r0, [pc, #48]	; (8013464 <LoRaMacHalt+0x44>)
 8013432:	f009 fdf3 	bl	801d01c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 8013436:	480c      	ldr	r0, [pc, #48]	; (8013468 <LoRaMacHalt+0x48>)
 8013438:	f009 fdf0 	bl	801d01c <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 801343c:	f001 f9cb 	bl	80147d6 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8013440:	4b0a      	ldr	r3, [pc, #40]	; (801346c <LoRaMacHalt+0x4c>)
 8013442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013444:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8013446:	4b0a      	ldr	r3, [pc, #40]	; (8013470 <LoRaMacHalt+0x50>)
 8013448:	2200      	movs	r2, #0
 801344a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 801344e:	4b08      	ldr	r3, [pc, #32]	; (8013470 <LoRaMacHalt+0x50>)
 8013450:	2201      	movs	r2, #1
 8013452:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013456:	2300      	movs	r3, #0
}
 8013458:	4618      	mov	r0, r3
 801345a:	bd80      	pop	{r7, pc}
 801345c:	20000cbc 	.word	0x20000cbc
 8013460:	20000cd4 	.word	0x20000cd4
 8013464:	20000cec 	.word	0x20000cec
 8013468:	20000d48 	.word	0x20000d48
 801346c:	0801e8c0 	.word	0x0801e8c0
 8013470:	20000954 	.word	0x20000954

08013474 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b08a      	sub	sp, #40	; 0x28
 8013478:	af00      	add	r7, sp, #0
 801347a:	4603      	mov	r3, r0
 801347c:	6039      	str	r1, [r7, #0]
 801347e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8013480:	4b3e      	ldr	r3, [pc, #248]	; (801357c <LoRaMacQueryTxPossible+0x108>)
 8013482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013484:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013486:	4b3d      	ldr	r3, [pc, #244]	; (801357c <LoRaMacQueryTxPossible+0x108>)
 8013488:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 801348c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801348e:	4b3b      	ldr	r3, [pc, #236]	; (801357c <LoRaMacQueryTxPossible+0x108>)
 8013490:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8013494:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8013496:	2300      	movs	r3, #0
 8013498:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d101      	bne.n	80134a4 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80134a0:	2303      	movs	r3, #3
 80134a2:	e066      	b.n	8013572 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 80134a4:	4b35      	ldr	r3, [pc, #212]	; (801357c <LoRaMacQueryTxPossible+0x108>)
 80134a6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80134aa:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80134ac:	2300      	movs	r3, #0
 80134ae:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80134b0:	4b32      	ldr	r3, [pc, #200]	; (801357c <LoRaMacQueryTxPossible+0x108>)
 80134b2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80134b6:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80134b8:	4b30      	ldr	r3, [pc, #192]	; (801357c <LoRaMacQueryTxPossible+0x108>)
 80134ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134bc:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80134be:	4b2f      	ldr	r3, [pc, #188]	; (801357c <LoRaMacQueryTxPossible+0x108>)
 80134c0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80134c4:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80134c6:	4b2d      	ldr	r3, [pc, #180]	; (801357c <LoRaMacQueryTxPossible+0x108>)
 80134c8:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80134cc:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80134ce:	4b2b      	ldr	r3, [pc, #172]	; (801357c <LoRaMacQueryTxPossible+0x108>)
 80134d0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80134d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80134d8:	4b28      	ldr	r3, [pc, #160]	; (801357c <LoRaMacQueryTxPossible+0x108>)
 80134da:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80134de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80134e2:	4b26      	ldr	r3, [pc, #152]	; (801357c <LoRaMacQueryTxPossible+0x108>)
 80134e4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80134e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80134ec:	4b23      	ldr	r3, [pc, #140]	; (801357c <LoRaMacQueryTxPossible+0x108>)
 80134ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80134f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80134f6:	f107 0310 	add.w	r3, r7, #16
 80134fa:	f107 020e 	add.w	r2, r7, #14
 80134fe:	f107 010f 	add.w	r1, r7, #15
 8013502:	f107 0014 	add.w	r0, r7, #20
 8013506:	f001 f8d1 	bl	80146ac <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801350a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801350e:	4618      	mov	r0, r3
 8013510:	f7fd fefc 	bl	801130c <GetMaxAppPayloadWithoutFOptsLength>
 8013514:	4603      	mov	r3, r0
 8013516:	461a      	mov	r2, r3
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801351c:	f107 0308 	add.w	r3, r7, #8
 8013520:	4618      	mov	r0, r3
 8013522:	f001 fbdf 	bl	8014ce4 <LoRaMacCommandsGetSizeSerializedCmds>
 8013526:	4603      	mov	r3, r0
 8013528:	2b00      	cmp	r3, #0
 801352a:	d001      	beq.n	8013530 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801352c:	2313      	movs	r3, #19
 801352e:	e020      	b.n	8013572 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	2b0f      	cmp	r3, #15
 8013534:	d819      	bhi.n	801356a <LoRaMacQueryTxPossible+0xf6>
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	785b      	ldrb	r3, [r3, #1]
 801353a:	461a      	mov	r2, r3
 801353c:	68bb      	ldr	r3, [r7, #8]
 801353e:	429a      	cmp	r2, r3
 8013540:	d313      	bcc.n	801356a <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	785a      	ldrb	r2, [r3, #1]
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	b2db      	uxtb	r3, r3
 801354a:	1ad3      	subs	r3, r2, r3
 801354c:	b2da      	uxtb	r2, r3
 801354e:	683b      	ldr	r3, [r7, #0]
 8013550:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	785b      	ldrb	r3, [r3, #1]
 8013556:	4619      	mov	r1, r3
 8013558:	79fa      	ldrb	r2, [r7, #7]
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	4413      	add	r3, r2
 801355e:	4299      	cmp	r1, r3
 8013560:	d301      	bcc.n	8013566 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8013562:	2300      	movs	r3, #0
 8013564:	e005      	b.n	8013572 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8013566:	2308      	movs	r3, #8
 8013568:	e003      	b.n	8013572 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	2200      	movs	r2, #0
 801356e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8013570:	2308      	movs	r3, #8
    }
}
 8013572:	4618      	mov	r0, r3
 8013574:	3728      	adds	r7, #40	; 0x28
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}
 801357a:	bf00      	nop
 801357c:	20000e5c 	.word	0x20000e5c

08013580 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8013580:	b590      	push	{r4, r7, lr}
 8013582:	b087      	sub	sp, #28
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013588:	2300      	movs	r3, #0
 801358a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d101      	bne.n	8013596 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013592:	2303      	movs	r3, #3
 8013594:	e1a4      	b.n	80138e0 <LoRaMacMibGetRequestConfirm+0x360>
    }

    switch( mibGet->Type )
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	781b      	ldrb	r3, [r3, #0]
 801359a:	2b3f      	cmp	r3, #63	; 0x3f
 801359c:	f200 8199 	bhi.w	80138d2 <LoRaMacMibGetRequestConfirm+0x352>
 80135a0:	a201      	add	r2, pc, #4	; (adr r2, 80135a8 <LoRaMacMibGetRequestConfirm+0x28>)
 80135a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135a6:	bf00      	nop
 80135a8:	080136a9 	.word	0x080136a9
 80135ac:	080136b5 	.word	0x080136b5
 80135b0:	080136c1 	.word	0x080136c1
 80135b4:	080136cd 	.word	0x080136cd
 80135b8:	080136d9 	.word	0x080136d9
 80135bc:	080136e5 	.word	0x080136e5
 80135c0:	080136f1 	.word	0x080136f1
 80135c4:	080138d3 	.word	0x080138d3
 80135c8:	080138d3 	.word	0x080138d3
 80135cc:	080138d3 	.word	0x080138d3
 80135d0:	080138d3 	.word	0x080138d3
 80135d4:	080138d3 	.word	0x080138d3
 80135d8:	080138d3 	.word	0x080138d3
 80135dc:	080138d3 	.word	0x080138d3
 80135e0:	080138d3 	.word	0x080138d3
 80135e4:	08013705 	.word	0x08013705
 80135e8:	08013711 	.word	0x08013711
 80135ec:	0801371d 	.word	0x0801371d
 80135f0:	0801373f 	.word	0x0801373f
 80135f4:	08013751 	.word	0x08013751
 80135f8:	08013763 	.word	0x08013763
 80135fc:	08013775 	.word	0x08013775
 8013600:	080137a9 	.word	0x080137a9
 8013604:	08013787 	.word	0x08013787
 8013608:	080137cb 	.word	0x080137cb
 801360c:	080137d7 	.word	0x080137d7
 8013610:	080137e1 	.word	0x080137e1
 8013614:	080137eb 	.word	0x080137eb
 8013618:	080137f5 	.word	0x080137f5
 801361c:	080137ff 	.word	0x080137ff
 8013620:	08013809 	.word	0x08013809
 8013624:	08013815 	.word	0x08013815
 8013628:	0801382d 	.word	0x0801382d
 801362c:	08013821 	.word	0x08013821
 8013630:	08013839 	.word	0x08013839
 8013634:	08013843 	.word	0x08013843
 8013638:	0801384f 	.word	0x0801384f
 801363c:	0801386b 	.word	0x0801386b
 8013640:	0801385b 	.word	0x0801385b
 8013644:	08013863 	.word	0x08013863
 8013648:	080138d3 	.word	0x080138d3
 801364c:	08013877 	.word	0x08013877
 8013650:	080138d3 	.word	0x080138d3
 8013654:	080138d3 	.word	0x080138d3
 8013658:	080138d3 	.word	0x080138d3
 801365c:	080138d3 	.word	0x080138d3
 8013660:	080138d3 	.word	0x080138d3
 8013664:	080138d3 	.word	0x080138d3
 8013668:	080138d3 	.word	0x080138d3
 801366c:	080138d3 	.word	0x080138d3
 8013670:	080138d3 	.word	0x080138d3
 8013674:	080138d3 	.word	0x080138d3
 8013678:	080138d3 	.word	0x080138d3
 801367c:	080138d3 	.word	0x080138d3
 8013680:	080138d3 	.word	0x080138d3
 8013684:	080138d3 	.word	0x080138d3
 8013688:	080138d3 	.word	0x080138d3
 801368c:	0801388b 	.word	0x0801388b
 8013690:	08013897 	.word	0x08013897
 8013694:	080138a3 	.word	0x080138a3
 8013698:	080138af 	.word	0x080138af
 801369c:	080138bb 	.word	0x080138bb
 80136a0:	080138c7 	.word	0x080138c7
 80136a4:	080138cd 	.word	0x080138cd
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80136a8:	4b8f      	ldr	r3, [pc, #572]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 80136aa:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	711a      	strb	r2, [r3, #4]
            break;
 80136b2:	e114      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80136b4:	4b8c      	ldr	r3, [pc, #560]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 80136b6:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	711a      	strb	r2, [r3, #4]
            break;
 80136be:	e10e      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	685b      	ldr	r3, [r3, #4]
 80136c4:	4618      	mov	r0, r3
 80136c6:	f7fa fefb 	bl	800e4c0 <SecureElementGetDevEui>
            break;
 80136ca:	e108      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	685b      	ldr	r3, [r3, #4]
 80136d0:	4618      	mov	r0, r3
 80136d2:	f7fa ff25 	bl	800e520 <SecureElementGetJoinEui>
            break;
 80136d6:	e102      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80136d8:	4b83      	ldr	r3, [pc, #524]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 80136da:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	711a      	strb	r2, [r3, #4]
            break;
 80136e2:	e0fc      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80136e4:	4b80      	ldr	r3, [pc, #512]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 80136e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	605a      	str	r2, [r3, #4]
            break;
 80136ee:	e0f6      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 80136f0:	4b7d      	ldr	r3, [pc, #500]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 80136f2:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	3304      	adds	r3, #4
 80136fa:	4619      	mov	r1, r3
 80136fc:	4610      	mov	r0, r2
 80136fe:	f7fa ff41 	bl	800e584 <SecureElementGetDevAddr>
            break;
 8013702:	e0ec      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8013704:	4b78      	ldr	r3, [pc, #480]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 8013706:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	711a      	strb	r2, [r3, #4]
            break;
 801370e:	e0e6      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8013710:	4b75      	ldr	r3, [pc, #468]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 8013712:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	711a      	strb	r2, [r3, #4]
            break;
 801371a:	e0e0      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 801371c:	231d      	movs	r3, #29
 801371e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013720:	4b71      	ldr	r3, [pc, #452]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 8013722:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013726:	f107 0210 	add.w	r2, r7, #16
 801372a:	4611      	mov	r1, r2
 801372c:	4618      	mov	r0, r3
 801372e:	f002 ffc0 	bl	80166b2 <RegionGetPhyParam>
 8013732:	4603      	mov	r3, r0
 8013734:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8013736:	68fa      	ldr	r2, [r7, #12]
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	605a      	str	r2, [r3, #4]
            break;
 801373c:	e0cf      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	4a69      	ldr	r2, [pc, #420]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 8013742:	3304      	adds	r3, #4
 8013744:	326c      	adds	r2, #108	; 0x6c
 8013746:	e892 0003 	ldmia.w	r2, {r0, r1}
 801374a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801374e:	e0c6      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	4a65      	ldr	r2, [pc, #404]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 8013754:	3304      	adds	r3, #4
 8013756:	32b4      	adds	r2, #180	; 0xb4
 8013758:	e892 0003 	ldmia.w	r2, {r0, r1}
 801375c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013760:	e0bd      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	4a60      	ldr	r2, [pc, #384]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 8013766:	3304      	adds	r3, #4
 8013768:	3274      	adds	r2, #116	; 0x74
 801376a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801376e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013772:	e0b4      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	4a5c      	ldr	r2, [pc, #368]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 8013778:	3304      	adds	r3, #4
 801377a:	32bc      	adds	r2, #188	; 0xbc
 801377c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013780:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013784:	e0ab      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8013786:	231b      	movs	r3, #27
 8013788:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801378a:	4b57      	ldr	r3, [pc, #348]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 801378c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013790:	f107 0210 	add.w	r2, r7, #16
 8013794:	4611      	mov	r1, r2
 8013796:	4618      	mov	r0, r3
 8013798:	f002 ff8b 	bl	80166b2 <RegionGetPhyParam>
 801379c:	4603      	mov	r3, r0
 801379e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80137a0:	68fa      	ldr	r2, [r7, #12]
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	605a      	str	r2, [r3, #4]
            break;
 80137a6:	e09a      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80137a8:	231a      	movs	r3, #26
 80137aa:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80137ac:	4b4e      	ldr	r3, [pc, #312]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 80137ae:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80137b2:	f107 0210 	add.w	r2, r7, #16
 80137b6:	4611      	mov	r1, r2
 80137b8:	4618      	mov	r0, r3
 80137ba:	f002 ff7a 	bl	80166b2 <RegionGetPhyParam>
 80137be:	4603      	mov	r3, r0
 80137c0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80137c2:	68fa      	ldr	r2, [r7, #12]
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	605a      	str	r2, [r3, #4]
            break;
 80137c8:	e089      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80137ca:	4b47      	ldr	r3, [pc, #284]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 80137cc:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	711a      	strb	r2, [r3, #4]
            break;
 80137d4:	e083      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80137d6:	4b44      	ldr	r3, [pc, #272]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 80137d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	605a      	str	r2, [r3, #4]
            break;
 80137de:	e07e      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80137e0:	4b41      	ldr	r3, [pc, #260]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 80137e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	605a      	str	r2, [r3, #4]
            break;
 80137e8:	e079      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80137ea:	4b3f      	ldr	r3, [pc, #252]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 80137ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	605a      	str	r2, [r3, #4]
            break;
 80137f2:	e074      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80137f4:	4b3c      	ldr	r3, [pc, #240]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 80137f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	605a      	str	r2, [r3, #4]
            break;
 80137fc:	e06f      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80137fe:	4b3a      	ldr	r3, [pc, #232]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 8013800:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	605a      	str	r2, [r3, #4]
            break;
 8013806:	e06a      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013808:	4b37      	ldr	r3, [pc, #220]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 801380a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	711a      	strb	r2, [r3, #4]
            break;
 8013812:	e064      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8013814:	4b34      	ldr	r3, [pc, #208]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 8013816:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	711a      	strb	r2, [r3, #4]
            break;
 801381e:	e05e      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013820:	4b31      	ldr	r3, [pc, #196]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 8013822:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	711a      	strb	r2, [r3, #4]
            break;
 801382a:	e058      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801382c:	4b2e      	ldr	r3, [pc, #184]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 801382e:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	711a      	strb	r2, [r3, #4]
            break;
 8013836:	e052      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8013838:	4b2b      	ldr	r3, [pc, #172]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 801383a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	605a      	str	r2, [r3, #4]
            break;
 8013840:	e04d      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8013842:	4b29      	ldr	r3, [pc, #164]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 8013844:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	711a      	strb	r2, [r3, #4]
            break;
 801384c:	e047      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801384e:	4b26      	ldr	r3, [pc, #152]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 8013850:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	605a      	str	r2, [r3, #4]
            break;
 8013858:	e041      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	4a22      	ldr	r2, [pc, #136]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 801385e:	605a      	str	r2, [r3, #4]
            break;
 8013860:	e03d      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	2200      	movs	r2, #0
 8013866:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8013868:	e039      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801386a:	4b1f      	ldr	r3, [pc, #124]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 801386c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	605a      	str	r2, [r3, #4]
            break;
 8013874:	e033      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	4a1b      	ldr	r2, [pc, #108]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 801387a:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 801387e:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8013880:	687c      	ldr	r4, [r7, #4]
 8013882:	f003 f89f 	bl	80169c4 <RegionGetVersion>
 8013886:	60a0      	str	r0, [r4, #8]
            break;
 8013888:	e029      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 801388a:	4b17      	ldr	r3, [pc, #92]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 801388c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	605a      	str	r2, [r3, #4]
            break;
 8013894:	e023      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8013896:	4b14      	ldr	r3, [pc, #80]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 8013898:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	809a      	strh	r2, [r3, #4]
            break;
 80138a0:	e01d      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80138a2:	4b11      	ldr	r3, [pc, #68]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 80138a4:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	809a      	strh	r2, [r3, #4]
            break;
 80138ac:	e017      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80138ae:	4b0e      	ldr	r3, [pc, #56]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 80138b0:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	809a      	strh	r2, [r3, #4]
            break;
 80138b8:	e011      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80138ba:	4b0b      	ldr	r3, [pc, #44]	; (80138e8 <LoRaMacMibGetRequestConfirm+0x368>)
 80138bc:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	809a      	strh	r2, [r3, #4]
            break;
 80138c4:	e00b      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80138c6:	2318      	movs	r3, #24
 80138c8:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80138ca:	e008      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80138cc:	2318      	movs	r3, #24
 80138ce:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80138d0:	e005      	b.n	80138de <LoRaMacMibGetRequestConfirm+0x35e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80138d2:	6878      	ldr	r0, [r7, #4]
 80138d4:	f000 ff96 	bl	8014804 <LoRaMacClassBMibGetRequestConfirm>
 80138d8:	4603      	mov	r3, r0
 80138da:	75fb      	strb	r3, [r7, #23]
            break;
 80138dc:	bf00      	nop
        }
    }
    return status;
 80138de:	7dfb      	ldrb	r3, [r7, #23]
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	371c      	adds	r7, #28
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd90      	pop	{r4, r7, pc}
 80138e8:	20000e5c 	.word	0x20000e5c

080138ec <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b086      	sub	sp, #24
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80138f4:	2300      	movs	r3, #0
 80138f6:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d101      	bne.n	8013902 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80138fe:	2303      	movs	r3, #3
 8013900:	e382      	b.n	8014008 <LoRaMacMibSetRequestConfirm+0x71c>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8013902:	4bbb      	ldr	r3, [pc, #748]	; (8013bf0 <LoRaMacMibSetRequestConfirm+0x304>)
 8013904:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013908:	f003 0302 	and.w	r3, r3, #2
 801390c:	2b00      	cmp	r3, #0
 801390e:	d001      	beq.n	8013914 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8013910:	2301      	movs	r3, #1
 8013912:	e379      	b.n	8014008 <LoRaMacMibSetRequestConfirm+0x71c>
    }

    switch( mibSet->Type )
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	781b      	ldrb	r3, [r3, #0]
 8013918:	2b3f      	cmp	r3, #63	; 0x3f
 801391a:	f200 8353 	bhi.w	8013fc4 <LoRaMacMibSetRequestConfirm+0x6d8>
 801391e:	a201      	add	r2, pc, #4	; (adr r2, 8013924 <LoRaMacMibSetRequestConfirm+0x38>)
 8013920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013924:	08013a25 	.word	0x08013a25
 8013928:	08013a35 	.word	0x08013a35
 801392c:	08013a4f 	.word	0x08013a4f
 8013930:	08013a67 	.word	0x08013a67
 8013934:	08013a7f 	.word	0x08013a7f
 8013938:	08013a8b 	.word	0x08013a8b
 801393c:	08013a97 	.word	0x08013a97
 8013940:	08013ac1 	.word	0x08013ac1
 8013944:	08013ae7 	.word	0x08013ae7
 8013948:	08013b0d 	.word	0x08013b0d
 801394c:	08013b33 	.word	0x08013b33
 8013950:	08013b59 	.word	0x08013b59
 8013954:	08013b7f 	.word	0x08013b7f
 8013958:	08013ba5 	.word	0x08013ba5
 801395c:	08013bcb 	.word	0x08013bcb
 8013960:	08013bf9 	.word	0x08013bf9
 8013964:	08013c19 	.word	0x08013c19
 8013968:	08013fc5 	.word	0x08013fc5
 801396c:	08013c25 	.word	0x08013c25
 8013970:	08013c95 	.word	0x08013c95
 8013974:	08013cd5 	.word	0x08013cd5
 8013978:	08013d37 	.word	0x08013d37
 801397c:	08013da7 	.word	0x08013da7
 8013980:	08013d77 	.word	0x08013d77
 8013984:	08013dd7 	.word	0x08013dd7
 8013988:	08013df9 	.word	0x08013df9
 801398c:	08013e03 	.word	0x08013e03
 8013990:	08013e0d 	.word	0x08013e0d
 8013994:	08013e17 	.word	0x08013e17
 8013998:	08013e21 	.word	0x08013e21
 801399c:	08013e2b 	.word	0x08013e2b
 80139a0:	08013e5d 	.word	0x08013e5d
 80139a4:	08013ed1 	.word	0x08013ed1
 80139a8:	08013e97 	.word	0x08013e97
 80139ac:	08013f03 	.word	0x08013f03
 80139b0:	08013f19 	.word	0x08013f19
 80139b4:	08013f31 	.word	0x08013f31
 80139b8:	08013f3d 	.word	0x08013f3d
 80139bc:	08013f49 	.word	0x08013f49
 80139c0:	08013fc5 	.word	0x08013fc5
 80139c4:	08013f53 	.word	0x08013f53
 80139c8:	08013fc5 	.word	0x08013fc5
 80139cc:	08013fc5 	.word	0x08013fc5
 80139d0:	08013fc5 	.word	0x08013fc5
 80139d4:	08013fc5 	.word	0x08013fc5
 80139d8:	08013fc5 	.word	0x08013fc5
 80139dc:	08013fc5 	.word	0x08013fc5
 80139e0:	08013fc5 	.word	0x08013fc5
 80139e4:	08013fc5 	.word	0x08013fc5
 80139e8:	08013fc5 	.word	0x08013fc5
 80139ec:	08013fc5 	.word	0x08013fc5
 80139f0:	08013fc5 	.word	0x08013fc5
 80139f4:	08013fc5 	.word	0x08013fc5
 80139f8:	08013fc5 	.word	0x08013fc5
 80139fc:	08013fc5 	.word	0x08013fc5
 8013a00:	08013fc5 	.word	0x08013fc5
 8013a04:	08013fc5 	.word	0x08013fc5
 8013a08:	08013f7d 	.word	0x08013f7d
 8013a0c:	08013f89 	.word	0x08013f89
 8013a10:	08013f95 	.word	0x08013f95
 8013a14:	08013fa1 	.word	0x08013fa1
 8013a18:	08013fad 	.word	0x08013fad
 8013a1c:	08013fb9 	.word	0x08013fb9
 8013a20:	08013fbf 	.word	0x08013fbf
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	791b      	ldrb	r3, [r3, #4]
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f7fd fb87 	bl	801113c <SwitchClass>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	75fb      	strb	r3, [r7, #23]
            break;
 8013a32:	e2e8      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	791b      	ldrb	r3, [r3, #4]
 8013a38:	2b02      	cmp	r3, #2
 8013a3a:	d005      	beq.n	8013a48 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	791a      	ldrb	r2, [r3, #4]
 8013a40:	4b6c      	ldr	r3, [pc, #432]	; (8013bf4 <LoRaMacMibSetRequestConfirm+0x308>)
 8013a42:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013a46:	e2de      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a48:	2303      	movs	r3, #3
 8013a4a:	75fb      	strb	r3, [r7, #23]
            break;
 8013a4c:	e2db      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	685b      	ldr	r3, [r3, #4]
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7fa fd1c 	bl	800e490 <SecureElementSetDevEui>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	f000 82b8 	beq.w	8013fd0 <LoRaMacMibSetRequestConfirm+0x6e4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a60:	2303      	movs	r3, #3
 8013a62:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013a64:	e2b4      	b.n	8013fd0 <LoRaMacMibSetRequestConfirm+0x6e4>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	685b      	ldr	r3, [r3, #4]
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f7fa fd40 	bl	800e4f0 <SecureElementSetJoinEui>
 8013a70:	4603      	mov	r3, r0
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	f000 82ae 	beq.w	8013fd4 <LoRaMacMibSetRequestConfirm+0x6e8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a78:	2303      	movs	r3, #3
 8013a7a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013a7c:	e2aa      	b.n	8013fd4 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	791a      	ldrb	r2, [r3, #4]
 8013a82:	4b5c      	ldr	r3, [pc, #368]	; (8013bf4 <LoRaMacMibSetRequestConfirm+0x308>)
 8013a84:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8013a88:	e2bd      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	4a59      	ldr	r2, [pc, #356]	; (8013bf4 <LoRaMacMibSetRequestConfirm+0x308>)
 8013a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 8013a94:	e2b7      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8013a96:	4b57      	ldr	r3, [pc, #348]	; (8013bf4 <LoRaMacMibSetRequestConfirm+0x308>)
 8013a98:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	685b      	ldr	r3, [r3, #4]
 8013aa0:	4619      	mov	r1, r3
 8013aa2:	4610      	mov	r0, r2
 8013aa4:	f7fa fd54 	bl	800e550 <SecureElementSetDevAddr>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d002      	beq.n	8013ab4 <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013aae:	2303      	movs	r3, #3
 8013ab0:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8013ab2:	e2a8      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	685b      	ldr	r3, [r3, #4]
 8013ab8:	4a4e      	ldr	r2, [pc, #312]	; (8013bf4 <LoRaMacMibSetRequestConfirm+0x308>)
 8013aba:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 8013abe:	e2a2      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	685b      	ldr	r3, [r3, #4]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d00b      	beq.n	8013ae0 <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	685b      	ldr	r3, [r3, #4]
 8013acc:	4619      	mov	r1, r3
 8013ace:	2000      	movs	r0, #0
 8013ad0:	f001 fff4 	bl	8015abc <LoRaMacCryptoSetKey>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	f000 827e 	beq.w	8013fd8 <LoRaMacMibSetRequestConfirm+0x6ec>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013adc:	2311      	movs	r3, #17
 8013ade:	e293      	b.n	8014008 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ae0:	2303      	movs	r3, #3
 8013ae2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013ae4:	e278      	b.n	8013fd8 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	685b      	ldr	r3, [r3, #4]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d00b      	beq.n	8013b06 <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	685b      	ldr	r3, [r3, #4]
 8013af2:	4619      	mov	r1, r3
 8013af4:	2001      	movs	r0, #1
 8013af6:	f001 ffe1 	bl	8015abc <LoRaMacCryptoSetKey>
 8013afa:	4603      	mov	r3, r0
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	f000 826d 	beq.w	8013fdc <LoRaMacMibSetRequestConfirm+0x6f0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b02:	2311      	movs	r3, #17
 8013b04:	e280      	b.n	8014008 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b06:	2303      	movs	r3, #3
 8013b08:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013b0a:	e267      	b.n	8013fdc <LoRaMacMibSetRequestConfirm+0x6f0>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	685b      	ldr	r3, [r3, #4]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d00b      	beq.n	8013b2c <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	685b      	ldr	r3, [r3, #4]
 8013b18:	4619      	mov	r1, r3
 8013b1a:	2008      	movs	r0, #8
 8013b1c:	f001 ffce 	bl	8015abc <LoRaMacCryptoSetKey>
 8013b20:	4603      	mov	r3, r0
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	f000 825c 	beq.w	8013fe0 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b28:	2311      	movs	r3, #17
 8013b2a:	e26d      	b.n	8014008 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b2c:	2303      	movs	r3, #3
 8013b2e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013b30:	e256      	b.n	8013fe0 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	685b      	ldr	r3, [r3, #4]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d00b      	beq.n	8013b52 <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	685b      	ldr	r3, [r3, #4]
 8013b3e:	4619      	mov	r1, r3
 8013b40:	2009      	movs	r0, #9
 8013b42:	f001 ffbb 	bl	8015abc <LoRaMacCryptoSetKey>
 8013b46:	4603      	mov	r3, r0
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	f000 824b 	beq.w	8013fe4 <LoRaMacMibSetRequestConfirm+0x6f8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b4e:	2311      	movs	r3, #17
 8013b50:	e25a      	b.n	8014008 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b52:	2303      	movs	r3, #3
 8013b54:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013b56:	e245      	b.n	8013fe4 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	685b      	ldr	r3, [r3, #4]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d00b      	beq.n	8013b78 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	685b      	ldr	r3, [r3, #4]
 8013b64:	4619      	mov	r1, r3
 8013b66:	200c      	movs	r0, #12
 8013b68:	f001 ffa8 	bl	8015abc <LoRaMacCryptoSetKey>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	f000 823a 	beq.w	8013fe8 <LoRaMacMibSetRequestConfirm+0x6fc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b74:	2311      	movs	r3, #17
 8013b76:	e247      	b.n	8014008 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b78:	2303      	movs	r3, #3
 8013b7a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013b7c:	e234      	b.n	8013fe8 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	685b      	ldr	r3, [r3, #4]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d00b      	beq.n	8013b9e <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	685b      	ldr	r3, [r3, #4]
 8013b8a:	4619      	mov	r1, r3
 8013b8c:	200d      	movs	r0, #13
 8013b8e:	f001 ff95 	bl	8015abc <LoRaMacCryptoSetKey>
 8013b92:	4603      	mov	r3, r0
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	f000 8229 	beq.w	8013fec <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b9a:	2311      	movs	r3, #17
 8013b9c:	e234      	b.n	8014008 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b9e:	2303      	movs	r3, #3
 8013ba0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013ba2:	e223      	b.n	8013fec <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	685b      	ldr	r3, [r3, #4]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d00b      	beq.n	8013bc4 <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	685b      	ldr	r3, [r3, #4]
 8013bb0:	4619      	mov	r1, r3
 8013bb2:	200e      	movs	r0, #14
 8013bb4:	f001 ff82 	bl	8015abc <LoRaMacCryptoSetKey>
 8013bb8:	4603      	mov	r3, r0
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	f000 8218 	beq.w	8013ff0 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013bc0:	2311      	movs	r3, #17
 8013bc2:	e221      	b.n	8014008 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013bc4:	2303      	movs	r3, #3
 8013bc6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013bc8:	e212      	b.n	8013ff0 <LoRaMacMibSetRequestConfirm+0x704>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	685b      	ldr	r3, [r3, #4]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d00b      	beq.n	8013bea <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	685b      	ldr	r3, [r3, #4]
 8013bd6:	4619      	mov	r1, r3
 8013bd8:	200f      	movs	r0, #15
 8013bda:	f001 ff6f 	bl	8015abc <LoRaMacCryptoSetKey>
 8013bde:	4603      	mov	r3, r0
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	f000 8207 	beq.w	8013ff4 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013be6:	2311      	movs	r3, #17
 8013be8:	e20e      	b.n	8014008 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013bea:	2303      	movs	r3, #3
 8013bec:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013bee:	e201      	b.n	8013ff4 <LoRaMacMibSetRequestConfirm+0x708>
 8013bf0:	20000954 	.word	0x20000954
 8013bf4:	20000e5c 	.word	0x20000e5c
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	791a      	ldrb	r2, [r3, #4]
 8013bfc:	4bb2      	ldr	r3, [pc, #712]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013bfe:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013c02:	4bb2      	ldr	r3, [pc, #712]	; (8013ecc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c06:	4ab0      	ldr	r2, [pc, #704]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013c08:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8013c0c:	4610      	mov	r0, r2
 8013c0e:	4798      	blx	r3
            Radio.Sleep( );
 8013c10:	4bae      	ldr	r3, [pc, #696]	; (8013ecc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c14:	4798      	blx	r3
            break;
 8013c16:	e1f6      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	791a      	ldrb	r2, [r3, #4]
 8013c1c:	4baa      	ldr	r3, [pc, #680]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013c1e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 8013c22:	e1f0      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	7a1b      	ldrb	r3, [r3, #8]
 8013c28:	b25b      	sxtb	r3, r3
 8013c2a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013c2c:	4ba6      	ldr	r3, [pc, #664]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013c2e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8013c32:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8013c34:	4ba4      	ldr	r3, [pc, #656]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013c36:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013c3a:	f107 0108 	add.w	r1, r7, #8
 8013c3e:	2207      	movs	r2, #7
 8013c40:	4618      	mov	r0, r3
 8013c42:	f002 fd71 	bl	8016728 <RegionVerify>
 8013c46:	4603      	mov	r3, r0
 8013c48:	f083 0301 	eor.w	r3, r3, #1
 8013c4c:	b2db      	uxtb	r3, r3
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d002      	beq.n	8013c58 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c52:	2303      	movs	r3, #3
 8013c54:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8013c56:	e1d6      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	685b      	ldr	r3, [r3, #4]
 8013c5c:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8013c5e:	4b9a      	ldr	r3, [pc, #616]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013c60:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013c64:	f107 0108 	add.w	r1, r7, #8
 8013c68:	2200      	movs	r2, #0
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f002 fd5c 	bl	8016728 <RegionVerify>
 8013c70:	4603      	mov	r3, r0
 8013c72:	f083 0301 	eor.w	r3, r3, #1
 8013c76:	b2db      	uxtb	r3, r3
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d002      	beq.n	8013c82 <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c7c:	2303      	movs	r3, #3
 8013c7e:	75fb      	strb	r3, [r7, #23]
            break;
 8013c80:	e1c1      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8013c82:	4b91      	ldr	r3, [pc, #580]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013c84:	687a      	ldr	r2, [r7, #4]
 8013c86:	336c      	adds	r3, #108	; 0x6c
 8013c88:	3204      	adds	r2, #4
 8013c8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013c8e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013c92:	e1b8      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	7a1b      	ldrb	r3, [r3, #8]
 8013c98:	b25b      	sxtb	r3, r3
 8013c9a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013c9c:	4b8a      	ldr	r3, [pc, #552]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013c9e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8013ca2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013ca4:	4b88      	ldr	r3, [pc, #544]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013ca6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013caa:	f107 0108 	add.w	r1, r7, #8
 8013cae:	2207      	movs	r2, #7
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	f002 fd39 	bl	8016728 <RegionVerify>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d008      	beq.n	8013cce <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8013cbc:	4b82      	ldr	r3, [pc, #520]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013cbe:	687a      	ldr	r2, [r7, #4]
 8013cc0:	33b4      	adds	r3, #180	; 0xb4
 8013cc2:	3204      	adds	r2, #4
 8013cc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013cc8:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013ccc:	e19b      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013cce:	2303      	movs	r3, #3
 8013cd0:	75fb      	strb	r3, [r7, #23]
            break;
 8013cd2:	e198      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	7a1b      	ldrb	r3, [r3, #8]
 8013cd8:	b25b      	sxtb	r3, r3
 8013cda:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013cdc:	4b7a      	ldr	r3, [pc, #488]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013cde:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8013ce2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013ce4:	4b78      	ldr	r3, [pc, #480]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013ce6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013cea:	f107 0108 	add.w	r1, r7, #8
 8013cee:	2207      	movs	r2, #7
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f002 fd19 	bl	8016728 <RegionVerify>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d019      	beq.n	8013d30 <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013cfc:	4b72      	ldr	r3, [pc, #456]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013cfe:	687a      	ldr	r2, [r7, #4]
 8013d00:	3374      	adds	r3, #116	; 0x74
 8013d02:	3204      	adds	r2, #4
 8013d04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013d08:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013d0c:	4b6e      	ldr	r3, [pc, #440]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013d0e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013d12:	2b02      	cmp	r3, #2
 8013d14:	f040 8170 	bne.w	8013ff8 <LoRaMacMibSetRequestConfirm+0x70c>
 8013d18:	4b6b      	ldr	r3, [pc, #428]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013d1a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	f000 816a 	beq.w	8013ff8 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8013d24:	4b69      	ldr	r3, [pc, #420]	; (8013ecc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d28:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013d2a:	f7fe fc91 	bl	8012650 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013d2e:	e163      	b.n	8013ff8 <LoRaMacMibSetRequestConfirm+0x70c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d30:	2303      	movs	r3, #3
 8013d32:	75fb      	strb	r3, [r7, #23]
            break;
 8013d34:	e160      	b.n	8013ff8 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	7a1b      	ldrb	r3, [r3, #8]
 8013d3a:	b25b      	sxtb	r3, r3
 8013d3c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013d3e:	4b62      	ldr	r3, [pc, #392]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013d40:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8013d44:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013d46:	4b60      	ldr	r3, [pc, #384]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013d48:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013d4c:	f107 0108 	add.w	r1, r7, #8
 8013d50:	2207      	movs	r2, #7
 8013d52:	4618      	mov	r0, r3
 8013d54:	f002 fce8 	bl	8016728 <RegionVerify>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d008      	beq.n	8013d70 <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8013d5e:	4b5a      	ldr	r3, [pc, #360]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013d60:	687a      	ldr	r2, [r7, #4]
 8013d62:	33bc      	adds	r3, #188	; 0xbc
 8013d64:	3204      	adds	r2, #4
 8013d66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013d6a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013d6e:	e14a      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d70:	2303      	movs	r3, #3
 8013d72:	75fb      	strb	r3, [r7, #23]
            break;
 8013d74:	e147      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	685b      	ldr	r3, [r3, #4]
 8013d7a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013d80:	4b51      	ldr	r3, [pc, #324]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013d82:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013d86:	f107 020c 	add.w	r2, r7, #12
 8013d8a:	4611      	mov	r1, r2
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f002 fcf4 	bl	801677a <RegionChanMaskSet>
 8013d92:	4603      	mov	r3, r0
 8013d94:	f083 0301 	eor.w	r3, r3, #1
 8013d98:	b2db      	uxtb	r3, r3
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	f000 812e 	beq.w	8013ffc <LoRaMacMibSetRequestConfirm+0x710>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013da0:	2303      	movs	r3, #3
 8013da2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013da4:	e12a      	b.n	8013ffc <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	685b      	ldr	r3, [r3, #4]
 8013daa:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013dac:	2300      	movs	r3, #0
 8013dae:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013db0:	4b45      	ldr	r3, [pc, #276]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013db2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013db6:	f107 020c 	add.w	r2, r7, #12
 8013dba:	4611      	mov	r1, r2
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f002 fcdc 	bl	801677a <RegionChanMaskSet>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	f083 0301 	eor.w	r3, r3, #1
 8013dc8:	b2db      	uxtb	r3, r3
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	f000 8118 	beq.w	8014000 <LoRaMacMibSetRequestConfirm+0x714>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013dd0:	2303      	movs	r3, #3
 8013dd2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013dd4:	e114      	b.n	8014000 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	791b      	ldrb	r3, [r3, #4]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d009      	beq.n	8013df2 <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013de2:	2b0f      	cmp	r3, #15
 8013de4:	d805      	bhi.n	8013df2 <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	791a      	ldrb	r2, [r3, #4]
 8013dea:	4b37      	ldr	r3, [pc, #220]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013dec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013df0:	e109      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013df2:	2303      	movs	r3, #3
 8013df4:	75fb      	strb	r3, [r7, #23]
            break;
 8013df6:	e106      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	685b      	ldr	r3, [r3, #4]
 8013dfc:	4a32      	ldr	r2, [pc, #200]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013dfe:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8013e00:	e101      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	685b      	ldr	r3, [r3, #4]
 8013e06:	4a30      	ldr	r2, [pc, #192]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013e08:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8013e0a:	e0fc      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	685b      	ldr	r3, [r3, #4]
 8013e10:	4a2d      	ldr	r2, [pc, #180]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013e12:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8013e14:	e0f7      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	685b      	ldr	r3, [r3, #4]
 8013e1a:	4a2b      	ldr	r2, [pc, #172]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013e1c:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 8013e1e:	e0f2      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	685b      	ldr	r3, [r3, #4]
 8013e24:	4a28      	ldr	r2, [pc, #160]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013e26:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8013e28:	e0ed      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013e30:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8013e32:	4b25      	ldr	r3, [pc, #148]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013e34:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013e38:	f107 0108 	add.w	r1, r7, #8
 8013e3c:	2206      	movs	r2, #6
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f002 fc72 	bl	8016728 <RegionVerify>
 8013e44:	4603      	mov	r3, r0
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d005      	beq.n	8013e56 <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8013e4a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013e4e:	4b1e      	ldr	r3, [pc, #120]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013e50:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013e54:	e0d7      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e56:	2303      	movs	r3, #3
 8013e58:	75fb      	strb	r3, [r7, #23]
            break;
 8013e5a:	e0d4      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013e62:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013e64:	4b18      	ldr	r3, [pc, #96]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013e66:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013e6a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013e6c:	4b16      	ldr	r3, [pc, #88]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013e6e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013e72:	f107 0108 	add.w	r1, r7, #8
 8013e76:	2205      	movs	r2, #5
 8013e78:	4618      	mov	r0, r3
 8013e7a:	f002 fc55 	bl	8016728 <RegionVerify>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d005      	beq.n	8013e90 <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013e84:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013e88:	4b0f      	ldr	r3, [pc, #60]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013e8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013e8e:	e0ba      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e90:	2303      	movs	r3, #3
 8013e92:	75fb      	strb	r3, [r7, #23]
            break;
 8013e94:	e0b7      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013e9c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8013e9e:	4b0a      	ldr	r3, [pc, #40]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013ea0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013ea4:	f107 0108 	add.w	r1, r7, #8
 8013ea8:	220a      	movs	r2, #10
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f002 fc3c 	bl	8016728 <RegionVerify>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d005      	beq.n	8013ec2 <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8013eb6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013eba:	4b03      	ldr	r3, [pc, #12]	; (8013ec8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013ebc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013ec0:	e0a1      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ec2:	2303      	movs	r3, #3
 8013ec4:	75fb      	strb	r3, [r7, #23]
            break;
 8013ec6:	e09e      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
 8013ec8:	20000e5c 	.word	0x20000e5c
 8013ecc:	0801e8c0 	.word	0x0801e8c0
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013ed6:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8013ed8:	4b4d      	ldr	r3, [pc, #308]	; (8014010 <LoRaMacMibSetRequestConfirm+0x724>)
 8013eda:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013ede:	f107 0108 	add.w	r1, r7, #8
 8013ee2:	2209      	movs	r2, #9
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f002 fc1f 	bl	8016728 <RegionVerify>
 8013eea:	4603      	mov	r3, r0
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d005      	beq.n	8013efc <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8013ef0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013ef4:	4b46      	ldr	r3, [pc, #280]	; (8014010 <LoRaMacMibSetRequestConfirm+0x724>)
 8013ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013efa:	e084      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013efc:	2303      	movs	r3, #3
 8013efe:	75fb      	strb	r3, [r7, #23]
            break;
 8013f00:	e081      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	685b      	ldr	r3, [r3, #4]
 8013f06:	4a42      	ldr	r2, [pc, #264]	; (8014010 <LoRaMacMibSetRequestConfirm+0x724>)
 8013f08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8013f0c:	4b40      	ldr	r3, [pc, #256]	; (8014010 <LoRaMacMibSetRequestConfirm+0x724>)
 8013f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013f12:	4a3f      	ldr	r2, [pc, #252]	; (8014010 <LoRaMacMibSetRequestConfirm+0x724>)
 8013f14:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8013f16:	e076      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	791a      	ldrb	r2, [r3, #4]
 8013f1c:	4b3c      	ldr	r3, [pc, #240]	; (8014010 <LoRaMacMibSetRequestConfirm+0x724>)
 8013f1e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8013f22:	4b3b      	ldr	r3, [pc, #236]	; (8014010 <LoRaMacMibSetRequestConfirm+0x724>)
 8013f24:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8013f28:	4b39      	ldr	r3, [pc, #228]	; (8014010 <LoRaMacMibSetRequestConfirm+0x724>)
 8013f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 8013f2e:	e06a      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	685b      	ldr	r3, [r3, #4]
 8013f34:	4a36      	ldr	r2, [pc, #216]	; (8014010 <LoRaMacMibSetRequestConfirm+0x724>)
 8013f36:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8013f3a:	e064      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	685b      	ldr	r3, [r3, #4]
 8013f40:	4a33      	ldr	r2, [pc, #204]	; (8014010 <LoRaMacMibSetRequestConfirm+0x724>)
 8013f42:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8013f46:	e05e      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8013f48:	f7fe fde0 	bl	8012b0c <RestoreNvmData>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	75fb      	strb	r3, [r7, #23]
            break;
 8013f50:	e059      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	799b      	ldrb	r3, [r3, #6]
 8013f56:	2b01      	cmp	r3, #1
 8013f58:	d80d      	bhi.n	8013f76 <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8013f5a:	4a2d      	ldr	r2, [pc, #180]	; (8014010 <LoRaMacMibSetRequestConfirm+0x724>)
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	685b      	ldr	r3, [r3, #4]
 8013f60:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	6858      	ldr	r0, [r3, #4]
 8013f68:	f001 fce0 	bl	801592c <LoRaMacCryptoSetLrWanVersion>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d048      	beq.n	8014004 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013f72:	2311      	movs	r3, #17
 8013f74:	e048      	b.n	8014008 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f76:	2303      	movs	r3, #3
 8013f78:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013f7a:	e043      	b.n	8014004 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	685b      	ldr	r3, [r3, #4]
 8013f80:	4a23      	ldr	r2, [pc, #140]	; (8014010 <LoRaMacMibSetRequestConfirm+0x724>)
 8013f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 8013f86:	e03e      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	889a      	ldrh	r2, [r3, #4]
 8013f8c:	4b20      	ldr	r3, [pc, #128]	; (8014010 <LoRaMacMibSetRequestConfirm+0x724>)
 8013f8e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 8013f92:	e038      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	889a      	ldrh	r2, [r3, #4]
 8013f98:	4b1d      	ldr	r3, [pc, #116]	; (8014010 <LoRaMacMibSetRequestConfirm+0x724>)
 8013f9a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 8013f9e:	e032      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	889a      	ldrh	r2, [r3, #4]
 8013fa4:	4b1a      	ldr	r3, [pc, #104]	; (8014010 <LoRaMacMibSetRequestConfirm+0x724>)
 8013fa6:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 8013faa:	e02c      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	889a      	ldrh	r2, [r3, #4]
 8013fb0:	4b17      	ldr	r3, [pc, #92]	; (8014010 <LoRaMacMibSetRequestConfirm+0x724>)
 8013fb2:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 8013fb6:	e026      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013fb8:	2318      	movs	r3, #24
 8013fba:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013fbc:	e023      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013fbe:	2318      	movs	r3, #24
 8013fc0:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013fc2:	e020      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8013fc4:	6878      	ldr	r0, [r7, #4]
 8013fc6:	f000 fc27 	bl	8014818 <LoRaMacMibClassBSetRequestConfirm>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	75fb      	strb	r3, [r7, #23]
            break;
 8013fce:	e01a      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013fd0:	bf00      	nop
 8013fd2:	e018      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013fd4:	bf00      	nop
 8013fd6:	e016      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013fd8:	bf00      	nop
 8013fda:	e014      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013fdc:	bf00      	nop
 8013fde:	e012      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013fe0:	bf00      	nop
 8013fe2:	e010      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013fe4:	bf00      	nop
 8013fe6:	e00e      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013fe8:	bf00      	nop
 8013fea:	e00c      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013fec:	bf00      	nop
 8013fee:	e00a      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013ff0:	bf00      	nop
 8013ff2:	e008      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013ff4:	bf00      	nop
 8013ff6:	e006      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013ff8:	bf00      	nop
 8013ffa:	e004      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013ffc:	bf00      	nop
 8013ffe:	e002      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014000:	bf00      	nop
 8014002:	e000      	b.n	8014006 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014004:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8014006:	7dfb      	ldrb	r3, [r7, #23]
}
 8014008:	4618      	mov	r0, r3
 801400a:	3718      	adds	r7, #24
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}
 8014010:	20000e5c 	.word	0x20000e5c

08014014 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b086      	sub	sp, #24
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801401c:	2302      	movs	r3, #2
 801401e:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8014020:	2300      	movs	r3, #0
 8014022:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d101      	bne.n	801402e <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801402a:	2303      	movs	r3, #3
 801402c:	e13a      	b.n	80142a4 <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 801402e:	f7fc fca5 	bl	801097c <LoRaMacIsBusy>
 8014032:	4603      	mov	r3, r0
 8014034:	2b00      	cmp	r3, #0
 8014036:	d001      	beq.n	801403c <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8014038:	2301      	movs	r3, #1
 801403a:	e133      	b.n	80142a4 <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 801403c:	f001 f90c 	bl	8015258 <LoRaMacConfirmQueueIsFull>
 8014040:	4603      	mov	r3, r0
 8014042:	2b00      	cmp	r3, #0
 8014044:	d001      	beq.n	801404a <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8014046:	2301      	movs	r3, #1
 8014048:	e12c      	b.n	80142a4 <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801404a:	f001 f8f9 	bl	8015240 <LoRaMacConfirmQueueGetCnt>
 801404e:	4603      	mov	r3, r0
 8014050:	2b00      	cmp	r3, #0
 8014052:	d104      	bne.n	801405e <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8014054:	2214      	movs	r2, #20
 8014056:	2100      	movs	r1, #0
 8014058:	4894      	ldr	r0, [pc, #592]	; (80142ac <LoRaMacMlmeRequest+0x298>)
 801405a:	f004 fe7f 	bl	8018d5c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801405e:	4b94      	ldr	r3, [pc, #592]	; (80142b0 <LoRaMacMlmeRequest+0x29c>)
 8014060:	2201      	movs	r2, #1
 8014062:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8014066:	4a92      	ldr	r2, [pc, #584]	; (80142b0 <LoRaMacMlmeRequest+0x29c>)
 8014068:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801406c:	f043 0304 	orr.w	r3, r3, #4
 8014070:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	781b      	ldrb	r3, [r3, #0]
 8014078:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801407a:	2301      	movs	r3, #1
 801407c:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 801407e:	2300      	movs	r3, #0
 8014080:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	781b      	ldrb	r3, [r3, #0]
 8014086:	3b01      	subs	r3, #1
 8014088:	2b0d      	cmp	r3, #13
 801408a:	f200 80e1 	bhi.w	8014250 <LoRaMacMlmeRequest+0x23c>
 801408e:	a201      	add	r2, pc, #4	; (adr r2, 8014094 <LoRaMacMlmeRequest+0x80>)
 8014090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014094:	080140cd 	.word	0x080140cd
 8014098:	08014251 	.word	0x08014251
 801409c:	08014251 	.word	0x08014251
 80140a0:	08014251 	.word	0x08014251
 80140a4:	08014145 	.word	0x08014145
 80140a8:	08014163 	.word	0x08014163
 80140ac:	08014173 	.word	0x08014173
 80140b0:	08014251 	.word	0x08014251
 80140b4:	08014251 	.word	0x08014251
 80140b8:	0801418f 	.word	0x0801418f
 80140bc:	08014251 	.word	0x08014251
 80140c0:	08014225 	.word	0x08014225
 80140c4:	080141c5 	.word	0x080141c5
 80140c8:	08014207 	.word	0x08014207
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80140cc:	4b78      	ldr	r3, [pc, #480]	; (80142b0 <LoRaMacMlmeRequest+0x29c>)
 80140ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80140d2:	f003 0320 	and.w	r3, r3, #32
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d001      	beq.n	80140de <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 80140da:	2301      	movs	r3, #1
 80140dc:	e0e2      	b.n	80142a4 <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 80140de:	2000      	movs	r0, #0
 80140e0:	f7fe f95c 	bl	801239c <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80140e4:	4b73      	ldr	r3, [pc, #460]	; (80142b4 <LoRaMacMlmeRequest+0x2a0>)
 80140e6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	795b      	ldrb	r3, [r3, #5]
 80140ee:	b25b      	sxtb	r3, r3
 80140f0:	2200      	movs	r2, #0
 80140f2:	4619      	mov	r1, r3
 80140f4:	f002 fc00 	bl	80168f8 <RegionAlternateDr>
 80140f8:	4603      	mov	r3, r0
 80140fa:	461a      	mov	r2, r3
 80140fc:	4b6d      	ldr	r3, [pc, #436]	; (80142b4 <LoRaMacMlmeRequest+0x2a0>)
 80140fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8014108:	4b6a      	ldr	r3, [pc, #424]	; (80142b4 <LoRaMacMlmeRequest+0x2a0>)
 801410a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 801410e:	2307      	movs	r3, #7
 8014110:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8014112:	20ff      	movs	r0, #255	; 0xff
 8014114:	f7fd fec0 	bl	8011e98 <SendReJoinReq>
 8014118:	4603      	mov	r3, r0
 801411a:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 801411c:	7dfb      	ldrb	r3, [r7, #23]
 801411e:	2b00      	cmp	r3, #0
 8014120:	f000 8098 	beq.w	8014254 <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8014124:	4b63      	ldr	r3, [pc, #396]	; (80142b4 <LoRaMacMlmeRequest+0x2a0>)
 8014126:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	795b      	ldrb	r3, [r3, #5]
 801412e:	b25b      	sxtb	r3, r3
 8014130:	2201      	movs	r2, #1
 8014132:	4619      	mov	r1, r3
 8014134:	f002 fbe0 	bl	80168f8 <RegionAlternateDr>
 8014138:	4603      	mov	r3, r0
 801413a:	461a      	mov	r2, r3
 801413c:	4b5d      	ldr	r3, [pc, #372]	; (80142b4 <LoRaMacMlmeRequest+0x2a0>)
 801413e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8014142:	e087      	b.n	8014254 <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014144:	2300      	movs	r3, #0
 8014146:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014148:	f107 030c 	add.w	r3, r7, #12
 801414c:	2200      	movs	r2, #0
 801414e:	4619      	mov	r1, r3
 8014150:	2002      	movs	r0, #2
 8014152:	f000 fcd1 	bl	8014af8 <LoRaMacCommandsAddCmd>
 8014156:	4603      	mov	r3, r0
 8014158:	2b00      	cmp	r3, #0
 801415a:	d07d      	beq.n	8014258 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801415c:	2313      	movs	r3, #19
 801415e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014160:	e07a      	b.n	8014258 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	889b      	ldrh	r3, [r3, #4]
 8014166:	4618      	mov	r0, r3
 8014168:	f7fe fc7a 	bl	8012a60 <SetTxContinuousWave>
 801416c:	4603      	mov	r3, r0
 801416e:	75fb      	strb	r3, [r7, #23]
            break;
 8014170:	e079      	b.n	8014266 <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	8898      	ldrh	r0, [r3, #4]
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	6899      	ldr	r1, [r3, #8]
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8014180:	b2db      	uxtb	r3, r3
 8014182:	461a      	mov	r2, r3
 8014184:	f7fe fca2 	bl	8012acc <SetTxContinuousWave1>
 8014188:	4603      	mov	r3, r0
 801418a:	75fb      	strb	r3, [r7, #23]
            break;
 801418c:	e06b      	b.n	8014266 <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801418e:	2300      	movs	r3, #0
 8014190:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8014192:	f107 0308 	add.w	r3, r7, #8
 8014196:	4619      	mov	r1, r3
 8014198:	200d      	movs	r0, #13
 801419a:	f000 fd2d 	bl	8014bf8 <LoRaMacCommandsGetCmd>
 801419e:	4603      	mov	r3, r0
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d102      	bne.n	80141aa <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 80141a4:	2300      	movs	r3, #0
 80141a6:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 80141a8:	e058      	b.n	801425c <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80141aa:	f107 030c 	add.w	r3, r7, #12
 80141ae:	2200      	movs	r2, #0
 80141b0:	4619      	mov	r1, r3
 80141b2:	200d      	movs	r0, #13
 80141b4:	f000 fca0 	bl	8014af8 <LoRaMacCommandsAddCmd>
 80141b8:	4603      	mov	r3, r0
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d04e      	beq.n	801425c <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80141be:	2313      	movs	r3, #19
 80141c0:	75fb      	strb	r3, [r7, #23]
            break;
 80141c2:	e04b      	b.n	801425c <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80141c4:	4b3b      	ldr	r3, [pc, #236]	; (80142b4 <LoRaMacMlmeRequest+0x2a0>)
 80141c6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d148      	bne.n	8014260 <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	791b      	ldrb	r3, [r3, #4]
 80141d2:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	791b      	ldrb	r3, [r3, #4]
 80141d8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80141dc:	b2db      	uxtb	r3, r3
 80141de:	4618      	mov	r0, r3
 80141e0:	f000 faef 	bl	80147c2 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80141e4:	7dbb      	ldrb	r3, [r7, #22]
 80141e6:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 80141e8:	2300      	movs	r3, #0
 80141ea:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80141ec:	f107 030c 	add.w	r3, r7, #12
 80141f0:	2201      	movs	r2, #1
 80141f2:	4619      	mov	r1, r3
 80141f4:	2010      	movs	r0, #16
 80141f6:	f000 fc7f 	bl	8014af8 <LoRaMacCommandsAddCmd>
 80141fa:	4603      	mov	r3, r0
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d02f      	beq.n	8014260 <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014200:	2313      	movs	r3, #19
 8014202:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8014204:	e02c      	b.n	8014260 <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014206:	2300      	movs	r3, #0
 8014208:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801420a:	f107 030c 	add.w	r3, r7, #12
 801420e:	2200      	movs	r2, #0
 8014210:	4619      	mov	r1, r3
 8014212:	2012      	movs	r0, #18
 8014214:	f000 fc70 	bl	8014af8 <LoRaMacCommandsAddCmd>
 8014218:	4603      	mov	r3, r0
 801421a:	2b00      	cmp	r3, #0
 801421c:	d022      	beq.n	8014264 <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801421e:	2313      	movs	r3, #19
 8014220:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014222:	e01f      	b.n	8014264 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8014224:	2301      	movs	r3, #1
 8014226:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8014228:	f000 fa81 	bl	801472e <LoRaMacClassBIsAcquisitionInProgress>
 801422c:	4603      	mov	r3, r0
 801422e:	f083 0301 	eor.w	r3, r3, #1
 8014232:	b2db      	uxtb	r3, r3
 8014234:	2b00      	cmp	r3, #0
 8014236:	d008      	beq.n	801424a <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8014238:	2000      	movs	r0, #0
 801423a:	f000 fa5a 	bl	80146f2 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801423e:	2000      	movs	r0, #0
 8014240:	f000 fa7c 	bl	801473c <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8014244:	2300      	movs	r3, #0
 8014246:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8014248:	e00d      	b.n	8014266 <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 801424a:	2301      	movs	r3, #1
 801424c:	75fb      	strb	r3, [r7, #23]
            break;
 801424e:	e00a      	b.n	8014266 <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 8014250:	bf00      	nop
 8014252:	e008      	b.n	8014266 <LoRaMacMlmeRequest+0x252>
            break;
 8014254:	bf00      	nop
 8014256:	e006      	b.n	8014266 <LoRaMacMlmeRequest+0x252>
            break;
 8014258:	bf00      	nop
 801425a:	e004      	b.n	8014266 <LoRaMacMlmeRequest+0x252>
            break;
 801425c:	bf00      	nop
 801425e:	e002      	b.n	8014266 <LoRaMacMlmeRequest+0x252>
            break;
 8014260:	bf00      	nop
 8014262:	e000      	b.n	8014266 <LoRaMacMlmeRequest+0x252>
            break;
 8014264:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8014266:	4b12      	ldr	r3, [pc, #72]	; (80142b0 <LoRaMacMlmeRequest+0x29c>)
 8014268:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8014270:	7dfb      	ldrb	r3, [r7, #23]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d010      	beq.n	8014298 <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014276:	f000 ffe3 	bl	8015240 <LoRaMacConfirmQueueGetCnt>
 801427a:	4603      	mov	r3, r0
 801427c:	2b00      	cmp	r3, #0
 801427e:	d110      	bne.n	80142a2 <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 8014280:	4b0b      	ldr	r3, [pc, #44]	; (80142b0 <LoRaMacMlmeRequest+0x29c>)
 8014282:	2200      	movs	r2, #0
 8014284:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8014288:	4a09      	ldr	r2, [pc, #36]	; (80142b0 <LoRaMacMlmeRequest+0x29c>)
 801428a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801428e:	f36f 0382 	bfc	r3, #2, #1
 8014292:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8014296:	e004      	b.n	80142a2 <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8014298:	f107 0310 	add.w	r3, r7, #16
 801429c:	4618      	mov	r0, r3
 801429e:	f000 fe7b 	bl	8014f98 <LoRaMacConfirmQueueAdd>
    }
    return status;
 80142a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80142a4:	4618      	mov	r0, r3
 80142a6:	3718      	adds	r7, #24
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	20000d9c 	.word	0x20000d9c
 80142b0:	20000954 	.word	0x20000954
 80142b4:	20000e5c 	.word	0x20000e5c

080142b8 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b08c      	sub	sp, #48	; 0x30
 80142bc:	af02      	add	r7, sp, #8
 80142be:	6078      	str	r0, [r7, #4]
 80142c0:	460b      	mov	r3, r1
 80142c2:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80142c4:	2302      	movs	r3, #2
 80142c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80142ca:	2300      	movs	r3, #0
 80142cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    void* fBuffer = NULL;
 80142d0:	2300      	movs	r3, #0
 80142d2:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80142d4:	2300      	movs	r3, #0
 80142d6:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 80142d8:	2300      	movs	r3, #0
 80142da:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d101      	bne.n	80142e6 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80142e2:	2303      	movs	r3, #3
 80142e4:	e0d4      	b.n	8014490 <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 80142e6:	f7fc fb49 	bl	801097c <LoRaMacIsBusy>
 80142ea:	4603      	mov	r3, r0
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d001      	beq.n	80142f4 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 80142f0:	2301      	movs	r3, #1
 80142f2:	e0cd      	b.n	8014490 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 80142f4:	2300      	movs	r3, #0
 80142f6:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80142f8:	2214      	movs	r2, #20
 80142fa:	2100      	movs	r1, #0
 80142fc:	4866      	ldr	r0, [pc, #408]	; (8014498 <LoRaMacMcpsRequest+0x1e0>)
 80142fe:	f004 fd2d 	bl	8018d5c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014302:	4b66      	ldr	r3, [pc, #408]	; (801449c <LoRaMacMcpsRequest+0x1e4>)
 8014304:	2201      	movs	r2, #1
 8014306:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 801430a:	4b64      	ldr	r3, [pc, #400]	; (801449c <LoRaMacMcpsRequest+0x1e4>)
 801430c:	2201      	movs	r2, #1
 801430e:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

    switch( mcpsRequest->Type )
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	781b      	ldrb	r3, [r3, #0]
 8014316:	2b03      	cmp	r3, #3
 8014318:	d03d      	beq.n	8014396 <LoRaMacMcpsRequest+0xde>
 801431a:	2b03      	cmp	r3, #3
 801431c:	dc4f      	bgt.n	80143be <LoRaMacMcpsRequest+0x106>
 801431e:	2b00      	cmp	r3, #0
 8014320:	d002      	beq.n	8014328 <LoRaMacMcpsRequest+0x70>
 8014322:	2b01      	cmp	r3, #1
 8014324:	d019      	beq.n	801435a <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8014326:	e04a      	b.n	80143be <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8014328:	2301      	movs	r3, #1
 801432a:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 801432c:	4b5b      	ldr	r3, [pc, #364]	; (801449c <LoRaMacMcpsRequest+0x1e4>)
 801432e:	2201      	movs	r2, #1
 8014330:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8014334:	7b3b      	ldrb	r3, [r7, #12]
 8014336:	2202      	movs	r2, #2
 8014338:	f362 1347 	bfi	r3, r2, #5, #3
 801433c:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	791b      	ldrb	r3, [r3, #4]
 8014342:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	689b      	ldr	r3, [r3, #8]
 801434a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	899b      	ldrh	r3, [r3, #12]
 8014350:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	7b9b      	ldrb	r3, [r3, #14]
 8014356:	777b      	strb	r3, [r7, #29]
            break;
 8014358:	e032      	b.n	80143c0 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 801435a:	2301      	movs	r3, #1
 801435c:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	7bdb      	ldrb	r3, [r3, #15]
 8014362:	2b08      	cmp	r3, #8
 8014364:	bf28      	it	cs
 8014366:	2308      	movcs	r3, #8
 8014368:	b2da      	uxtb	r2, r3
 801436a:	4b4c      	ldr	r3, [pc, #304]	; (801449c <LoRaMacMcpsRequest+0x1e4>)
 801436c:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8014370:	7b3b      	ldrb	r3, [r7, #12]
 8014372:	2204      	movs	r2, #4
 8014374:	f362 1347 	bfi	r3, r2, #5, #3
 8014378:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	791b      	ldrb	r3, [r3, #4]
 801437e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	689b      	ldr	r3, [r3, #8]
 8014386:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	899b      	ldrh	r3, [r3, #12]
 801438c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	7b9b      	ldrb	r3, [r3, #14]
 8014392:	777b      	strb	r3, [r7, #29]
            break;
 8014394:	e014      	b.n	80143c0 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8014396:	2301      	movs	r3, #1
 8014398:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 801439a:	4b40      	ldr	r3, [pc, #256]	; (801449c <LoRaMacMcpsRequest+0x1e4>)
 801439c:	2201      	movs	r2, #1
 801439e:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80143a2:	7b3b      	ldrb	r3, [r7, #12]
 80143a4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80143a8:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	891b      	ldrh	r3, [r3, #8]
 80143b4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	7a9b      	ldrb	r3, [r3, #10]
 80143ba:	777b      	strb	r3, [r7, #29]
            break;
 80143bc:	e000      	b.n	80143c0 <LoRaMacMcpsRequest+0x108>
            break;
 80143be:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80143c0:	2302      	movs	r3, #2
 80143c2:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80143c4:	4b36      	ldr	r3, [pc, #216]	; (80144a0 <LoRaMacMcpsRequest+0x1e8>)
 80143c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80143ca:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143cc:	4b34      	ldr	r3, [pc, #208]	; (80144a0 <LoRaMacMcpsRequest+0x1e8>)
 80143ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80143d2:	f107 0214 	add.w	r2, r7, #20
 80143d6:	4611      	mov	r1, r2
 80143d8:	4618      	mov	r0, r3
 80143da:	f002 f96a 	bl	80166b2 <RegionGetPhyParam>
 80143de:	4603      	mov	r3, r0
 80143e0:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80143e2:	693b      	ldr	r3, [r7, #16]
 80143e4:	b25b      	sxtb	r3, r3
 80143e6:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80143ea:	4293      	cmp	r3, r2
 80143ec:	bfb8      	it	lt
 80143ee:	4613      	movlt	r3, r2
 80143f0:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 80143f2:	7f3b      	ldrb	r3, [r7, #28]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d044      	beq.n	8014482 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 80143f8:	4b29      	ldr	r3, [pc, #164]	; (80144a0 <LoRaMacMcpsRequest+0x1e8>)
 80143fa:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80143fe:	f083 0301 	eor.w	r3, r3, #1
 8014402:	b2db      	uxtb	r3, r3
 8014404:	2b00      	cmp	r3, #0
 8014406:	d019      	beq.n	801443c <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8014408:	7f7b      	ldrb	r3, [r7, #29]
 801440a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801440c:	4b24      	ldr	r3, [pc, #144]	; (80144a0 <LoRaMacMcpsRequest+0x1e8>)
 801440e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014412:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014414:	4b22      	ldr	r3, [pc, #136]	; (80144a0 <LoRaMacMcpsRequest+0x1e8>)
 8014416:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801441a:	f107 0108 	add.w	r1, r7, #8
 801441e:	2205      	movs	r2, #5
 8014420:	4618      	mov	r0, r3
 8014422:	f002 f981 	bl	8016728 <RegionVerify>
 8014426:	4603      	mov	r3, r0
 8014428:	2b00      	cmp	r3, #0
 801442a:	d005      	beq.n	8014438 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801442c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014430:	4b1b      	ldr	r3, [pc, #108]	; (80144a0 <LoRaMacMcpsRequest+0x1e8>)
 8014432:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8014436:	e001      	b.n	801443c <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8014438:	2303      	movs	r3, #3
 801443a:	e029      	b.n	8014490 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 801443c:	8bfa      	ldrh	r2, [r7, #30]
 801443e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8014442:	f107 000c 	add.w	r0, r7, #12
 8014446:	78fb      	ldrb	r3, [r7, #3]
 8014448:	9300      	str	r3, [sp, #0]
 801444a:	4613      	mov	r3, r2
 801444c:	6a3a      	ldr	r2, [r7, #32]
 801444e:	f7fd fc45 	bl	8011cdc <Send>
 8014452:	4603      	mov	r3, r0
 8014454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8014458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801445c:	2b00      	cmp	r3, #0
 801445e:	d10c      	bne.n	801447a <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	781a      	ldrb	r2, [r3, #0]
 8014464:	4b0d      	ldr	r3, [pc, #52]	; (801449c <LoRaMacMcpsRequest+0x1e4>)
 8014466:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 801446a:	4a0c      	ldr	r2, [pc, #48]	; (801449c <LoRaMacMcpsRequest+0x1e4>)
 801446c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8014470:	f043 0301 	orr.w	r3, r3, #1
 8014474:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8014478:	e003      	b.n	8014482 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 801447a:	4b08      	ldr	r3, [pc, #32]	; (801449c <LoRaMacMcpsRequest+0x1e4>)
 801447c:	2200      	movs	r2, #0
 801447e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8014482:	4b06      	ldr	r3, [pc, #24]	; (801449c <LoRaMacMcpsRequest+0x1e4>)
 8014484:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	611a      	str	r2, [r3, #16]

    return status;
 801448c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8014490:	4618      	mov	r0, r3
 8014492:	3728      	adds	r7, #40	; 0x28
 8014494:	46bd      	mov	sp, r7
 8014496:	bd80      	pop	{r7, pc}
 8014498:	20000d88 	.word	0x20000d88
 801449c:	20000954 	.word	0x20000954
 80144a0:	20000e5c 	.word	0x20000e5c

080144a4 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b084      	sub	sp, #16
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	4603      	mov	r3, r0
 80144ac:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80144ae:	79fb      	ldrb	r3, [r7, #7]
 80144b0:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80144b2:	4b0d      	ldr	r3, [pc, #52]	; (80144e8 <LoRaMacTestSetDutyCycleOn+0x44>)
 80144b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80144b8:	f107 010c 	add.w	r1, r7, #12
 80144bc:	220f      	movs	r2, #15
 80144be:	4618      	mov	r0, r3
 80144c0:	f002 f932 	bl	8016728 <RegionVerify>
 80144c4:	4603      	mov	r3, r0
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d00a      	beq.n	80144e0 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80144ca:	4a07      	ldr	r2, [pc, #28]	; (80144e8 <LoRaMacTestSetDutyCycleOn+0x44>)
 80144cc:	79fb      	ldrb	r3, [r7, #7]
 80144ce:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80144d2:	4a06      	ldr	r2, [pc, #24]	; (80144ec <LoRaMacTestSetDutyCycleOn+0x48>)
 80144d4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80144d8:	f043 0320 	orr.w	r3, r3, #32
 80144dc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 80144e0:	bf00      	nop
 80144e2:	3710      	adds	r7, #16
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}
 80144e8:	20000e5c 	.word	0x20000e5c
 80144ec:	20000954 	.word	0x20000954

080144f0 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 80144f4:	f7fe ff6c 	bl	80133d0 <LoRaMacStop>
 80144f8:	4603      	mov	r3, r0
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d115      	bne.n	801452a <LoRaMacDeInitialization+0x3a>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 80144fe:	480c      	ldr	r0, [pc, #48]	; (8014530 <LoRaMacDeInitialization+0x40>)
 8014500:	f008 fd8c 	bl	801d01c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8014504:	480b      	ldr	r0, [pc, #44]	; (8014534 <LoRaMacDeInitialization+0x44>)
 8014506:	f008 fd89 	bl	801d01c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 801450a:	480b      	ldr	r0, [pc, #44]	; (8014538 <LoRaMacDeInitialization+0x48>)
 801450c:	f008 fd86 	bl	801d01c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8014510:	480a      	ldr	r0, [pc, #40]	; (801453c <LoRaMacDeInitialization+0x4c>)
 8014512:	f008 fd83 	bl	801d01c <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8014516:	f000 f95e 	bl	80147d6 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 801451a:	2000      	movs	r0, #0
 801451c:	f7fd ff3e 	bl	801239c <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8014520:	4b07      	ldr	r3, [pc, #28]	; (8014540 <LoRaMacDeInitialization+0x50>)
 8014522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014524:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8014526:	2300      	movs	r3, #0
 8014528:	e000      	b.n	801452c <LoRaMacDeInitialization+0x3c>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 801452a:	2301      	movs	r3, #1
    }
}
 801452c:	4618      	mov	r0, r3
 801452e:	bd80      	pop	{r7, pc}
 8014530:	20000cbc 	.word	0x20000cbc
 8014534:	20000cd4 	.word	0x20000cd4
 8014538:	20000cec 	.word	0x20000cec
 801453c:	20000d48 	.word	0x20000d48
 8014540:	0801e8c0 	.word	0x0801e8c0

08014544 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b08c      	sub	sp, #48	; 0x30
 8014548:	af00      	add	r7, sp, #0
 801454a:	60f8      	str	r0, [r7, #12]
 801454c:	60b9      	str	r1, [r7, #8]
 801454e:	607a      	str	r2, [r7, #4]
 8014550:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8014552:	2300      	movs	r3, #0
 8014554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	7c1b      	ldrb	r3, [r3, #16]
 801455c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	7c5b      	ldrb	r3, [r3, #17]
 8014564:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	689a      	ldr	r2, [r3, #8]
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	795b      	ldrb	r3, [r3, #5]
 8014574:	2b00      	cmp	r3, #0
 8014576:	f000 808b 	beq.w	8014690 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801457a:	2302      	movs	r3, #2
 801457c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	7c9b      	ldrb	r3, [r3, #18]
 8014584:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	7cdb      	ldrb	r3, [r3, #19]
 801458c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014590:	4611      	mov	r1, r2
 8014592:	4618      	mov	r0, r3
 8014594:	f002 f88d 	bl	80166b2 <RegionGetPhyParam>
 8014598:	4603      	mov	r3, r0
 801459a:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 801459c:	6a3b      	ldr	r3, [r7, #32]
 801459e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 80145a2:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 80145a6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80145aa:	4293      	cmp	r3, r2
 80145ac:	bfb8      	it	lt
 80145ae:	4613      	movlt	r3, r2
 80145b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 80145b4:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80145b8:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80145bc:	429a      	cmp	r2, r3
 80145be:	d106      	bne.n	80145ce <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	2200      	movs	r2, #0
 80145c4:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80145c6:	2300      	movs	r3, #0
 80145c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80145cc:	e060      	b.n	8014690 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	689b      	ldr	r3, [r3, #8]
 80145d2:	68fa      	ldr	r2, [r7, #12]
 80145d4:	8992      	ldrh	r2, [r2, #12]
 80145d6:	4293      	cmp	r3, r2
 80145d8:	d303      	bcc.n	80145e2 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 80145da:	2301      	movs	r3, #1
 80145dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80145e0:	e002      	b.n	80145e8 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 80145e2:	2300      	movs	r3, #0
 80145e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	689b      	ldr	r3, [r3, #8]
 80145ec:	68fa      	ldr	r2, [r7, #12]
 80145ee:	8992      	ldrh	r2, [r2, #12]
 80145f0:	4611      	mov	r1, r2
 80145f2:	68fa      	ldr	r2, [r7, #12]
 80145f4:	89d2      	ldrh	r2, [r2, #14]
 80145f6:	440a      	add	r2, r1
 80145f8:	4293      	cmp	r3, r2
 80145fa:	d349      	bcc.n	8014690 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80145fc:	2308      	movs	r3, #8
 80145fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	7cdb      	ldrb	r3, [r3, #19]
 8014606:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801460a:	4611      	mov	r1, r2
 801460c:	4618      	mov	r0, r3
 801460e:	f002 f850 	bl	80166b2 <RegionGetPhyParam>
 8014612:	4603      	mov	r3, r0
 8014614:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8014616:	6a3b      	ldr	r3, [r7, #32]
 8014618:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	689b      	ldr	r3, [r3, #8]
 8014620:	68fa      	ldr	r2, [r7, #12]
 8014622:	89d2      	ldrh	r2, [r2, #14]
 8014624:	fbb3 f1f2 	udiv	r1, r3, r2
 8014628:	fb01 f202 	mul.w	r2, r1, r2
 801462c:	1a9b      	subs	r3, r3, r2
 801462e:	2b01      	cmp	r3, #1
 8014630:	d12e      	bne.n	8014690 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8014632:	2322      	movs	r3, #34	; 0x22
 8014634:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8014638:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801463c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	7c9b      	ldrb	r3, [r3, #18]
 8014644:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	7cdb      	ldrb	r3, [r3, #19]
 801464c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014650:	4611      	mov	r1, r2
 8014652:	4618      	mov	r0, r3
 8014654:	f002 f82d 	bl	80166b2 <RegionGetPhyParam>
 8014658:	4603      	mov	r3, r0
 801465a:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 801465c:	6a3b      	ldr	r3, [r7, #32]
 801465e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8014662:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8014666:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801466a:	429a      	cmp	r2, r3
 801466c:	d110      	bne.n	8014690 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 801466e:	2300      	movs	r3, #0
 8014670:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	791b      	ldrb	r3, [r3, #4]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d009      	beq.n	8014690 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801467c:	2302      	movs	r3, #2
 801467e:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	7cdb      	ldrb	r3, [r3, #19]
 8014684:	f107 0214 	add.w	r2, r7, #20
 8014688:	4611      	mov	r1, r2
 801468a:	4618      	mov	r0, r3
 801468c:	f002 f83a 	bl	8016704 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8014690:	68bb      	ldr	r3, [r7, #8]
 8014692:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8014696:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801469e:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80146a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80146a4:	4618      	mov	r0, r3
 80146a6:	3730      	adds	r7, #48	; 0x30
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}

080146ac <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b084      	sub	sp, #16
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	60f8      	str	r0, [r7, #12]
 80146b4:	60b9      	str	r1, [r7, #8]
 80146b6:	607a      	str	r2, [r7, #4]
 80146b8:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	789b      	ldrb	r3, [r3, #2]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d107      	bne.n	80146d2 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	687a      	ldr	r2, [r7, #4]
 80146c6:	68b9      	ldr	r1, [r7, #8]
 80146c8:	68f8      	ldr	r0, [r7, #12]
 80146ca:	f7ff ff3b 	bl	8014544 <CalcNextV10X>
 80146ce:	4603      	mov	r3, r0
 80146d0:	e000      	b.n	80146d4 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80146d2:	2300      	movs	r3, #0
}
 80146d4:	4618      	mov	r0, r3
 80146d6:	3710      	adds	r7, #16
 80146d8:	46bd      	mov	sp, r7
 80146da:	bd80      	pop	{r7, pc}

080146dc <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80146dc:	b480      	push	{r7}
 80146de:	b085      	sub	sp, #20
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	60f8      	str	r0, [r7, #12]
 80146e4:	60b9      	str	r1, [r7, #8]
 80146e6:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80146e8:	bf00      	nop
 80146ea:	3714      	adds	r7, #20
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bc80      	pop	{r7}
 80146f0:	4770      	bx	lr

080146f2 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80146f2:	b480      	push	{r7}
 80146f4:	b083      	sub	sp, #12
 80146f6:	af00      	add	r7, sp, #0
 80146f8:	4603      	mov	r3, r0
 80146fa:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80146fc:	bf00      	nop
 80146fe:	370c      	adds	r7, #12
 8014700:	46bd      	mov	sp, r7
 8014702:	bc80      	pop	{r7}
 8014704:	4770      	bx	lr

08014706 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8014706:	b480      	push	{r7}
 8014708:	b083      	sub	sp, #12
 801470a:	af00      	add	r7, sp, #0
 801470c:	4603      	mov	r3, r0
 801470e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014710:	bf00      	nop
 8014712:	370c      	adds	r7, #12
 8014714:	46bd      	mov	sp, r7
 8014716:	bc80      	pop	{r7}
 8014718:	4770      	bx	lr

0801471a <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 801471a:	b480      	push	{r7}
 801471c:	b083      	sub	sp, #12
 801471e:	af00      	add	r7, sp, #0
 8014720:	4603      	mov	r3, r0
 8014722:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014724:	bf00      	nop
 8014726:	370c      	adds	r7, #12
 8014728:	46bd      	mov	sp, r7
 801472a:	bc80      	pop	{r7}
 801472c:	4770      	bx	lr

0801472e <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801472e:	b480      	push	{r7}
 8014730:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8014732:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014734:	4618      	mov	r0, r3
 8014736:	46bd      	mov	sp, r7
 8014738:	bc80      	pop	{r7}
 801473a:	4770      	bx	lr

0801473c <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 801473c:	b480      	push	{r7}
 801473e:	b083      	sub	sp, #12
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014744:	bf00      	nop
 8014746:	370c      	adds	r7, #12
 8014748:	46bd      	mov	sp, r7
 801474a:	bc80      	pop	{r7}
 801474c:	4770      	bx	lr

0801474e <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 801474e:	b480      	push	{r7}
 8014750:	b083      	sub	sp, #12
 8014752:	af00      	add	r7, sp, #0
 8014754:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014756:	bf00      	nop
 8014758:	370c      	adds	r7, #12
 801475a:	46bd      	mov	sp, r7
 801475c:	bc80      	pop	{r7}
 801475e:	4770      	bx	lr

08014760 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8014760:	b480      	push	{r7}
 8014762:	b083      	sub	sp, #12
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014768:	bf00      	nop
 801476a:	370c      	adds	r7, #12
 801476c:	46bd      	mov	sp, r7
 801476e:	bc80      	pop	{r7}
 8014770:	4770      	bx	lr

08014772 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8014772:	b480      	push	{r7}
 8014774:	b083      	sub	sp, #12
 8014776:	af00      	add	r7, sp, #0
 8014778:	6078      	str	r0, [r7, #4]
 801477a:	460b      	mov	r3, r1
 801477c:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 801477e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014780:	4618      	mov	r0, r3
 8014782:	370c      	adds	r7, #12
 8014784:	46bd      	mov	sp, r7
 8014786:	bc80      	pop	{r7}
 8014788:	4770      	bx	lr

0801478a <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801478a:	b480      	push	{r7}
 801478c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801478e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014790:	4618      	mov	r0, r3
 8014792:	46bd      	mov	sp, r7
 8014794:	bc80      	pop	{r7}
 8014796:	4770      	bx	lr

08014798 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8014798:	b480      	push	{r7}
 801479a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801479c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801479e:	4618      	mov	r0, r3
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bc80      	pop	{r7}
 80147a4:	4770      	bx	lr

080147a6 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80147a6:	b480      	push	{r7}
 80147a8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80147aa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80147ac:	4618      	mov	r0, r3
 80147ae:	46bd      	mov	sp, r7
 80147b0:	bc80      	pop	{r7}
 80147b2:	4770      	bx	lr

080147b4 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80147b4:	b480      	push	{r7}
 80147b6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80147b8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80147ba:	4618      	mov	r0, r3
 80147bc:	46bd      	mov	sp, r7
 80147be:	bc80      	pop	{r7}
 80147c0:	4770      	bx	lr

080147c2 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80147c2:	b480      	push	{r7}
 80147c4:	b083      	sub	sp, #12
 80147c6:	af00      	add	r7, sp, #0
 80147c8:	4603      	mov	r3, r0
 80147ca:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80147cc:	bf00      	nop
 80147ce:	370c      	adds	r7, #12
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bc80      	pop	{r7}
 80147d4:	4770      	bx	lr

080147d6 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80147d6:	b480      	push	{r7}
 80147d8:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80147da:	bf00      	nop
 80147dc:	46bd      	mov	sp, r7
 80147de:	bc80      	pop	{r7}
 80147e0:	4770      	bx	lr

080147e2 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80147e2:	b480      	push	{r7}
 80147e4:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80147e6:	bf00      	nop
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bc80      	pop	{r7}
 80147ec:	4770      	bx	lr

080147ee <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80147ee:	b480      	push	{r7}
 80147f0:	b083      	sub	sp, #12
 80147f2:	af00      	add	r7, sp, #0
 80147f4:	4603      	mov	r3, r0
 80147f6:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80147f8:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	370c      	adds	r7, #12
 80147fe:	46bd      	mov	sp, r7
 8014800:	bc80      	pop	{r7}
 8014802:	4770      	bx	lr

08014804 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8014804:	b480      	push	{r7}
 8014806:	b083      	sub	sp, #12
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801480c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801480e:	4618      	mov	r0, r3
 8014810:	370c      	adds	r7, #12
 8014812:	46bd      	mov	sp, r7
 8014814:	bc80      	pop	{r7}
 8014816:	4770      	bx	lr

08014818 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8014818:	b480      	push	{r7}
 801481a:	b083      	sub	sp, #12
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014820:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014822:	4618      	mov	r0, r3
 8014824:	370c      	adds	r7, #12
 8014826:	46bd      	mov	sp, r7
 8014828:	bc80      	pop	{r7}
 801482a:	4770      	bx	lr

0801482c <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 801482c:	b480      	push	{r7}
 801482e:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014830:	bf00      	nop
 8014832:	46bd      	mov	sp, r7
 8014834:	bc80      	pop	{r7}
 8014836:	4770      	bx	lr

08014838 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8014838:	b480      	push	{r7}
 801483a:	b083      	sub	sp, #12
 801483c:	af00      	add	r7, sp, #0
 801483e:	4603      	mov	r3, r0
 8014840:	6039      	str	r1, [r7, #0]
 8014842:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8014844:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014846:	4618      	mov	r0, r3
 8014848:	370c      	adds	r7, #12
 801484a:	46bd      	mov	sp, r7
 801484c:	bc80      	pop	{r7}
 801484e:	4770      	bx	lr

08014850 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8014850:	b480      	push	{r7}
 8014852:	b083      	sub	sp, #12
 8014854:	af00      	add	r7, sp, #0
 8014856:	4603      	mov	r3, r0
 8014858:	603a      	str	r2, [r7, #0]
 801485a:	80fb      	strh	r3, [r7, #6]
 801485c:	460b      	mov	r3, r1
 801485e:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014860:	bf00      	nop
 8014862:	370c      	adds	r7, #12
 8014864:	46bd      	mov	sp, r7
 8014866:	bc80      	pop	{r7}
 8014868:	4770      	bx	lr

0801486a <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 801486a:	b480      	push	{r7}
 801486c:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801486e:	bf00      	nop
 8014870:	46bd      	mov	sp, r7
 8014872:	bc80      	pop	{r7}
 8014874:	4770      	bx	lr

08014876 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8014876:	b480      	push	{r7}
 8014878:	b083      	sub	sp, #12
 801487a:	af00      	add	r7, sp, #0
 801487c:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 801487e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014880:	4618      	mov	r0, r3
 8014882:	370c      	adds	r7, #12
 8014884:	46bd      	mov	sp, r7
 8014886:	bc80      	pop	{r7}
 8014888:	4770      	bx	lr

0801488a <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801488a:	b480      	push	{r7}
 801488c:	b083      	sub	sp, #12
 801488e:	af00      	add	r7, sp, #0
 8014890:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8014892:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014894:	4618      	mov	r0, r3
 8014896:	370c      	adds	r7, #12
 8014898:	46bd      	mov	sp, r7
 801489a:	bc80      	pop	{r7}
 801489c:	4770      	bx	lr

0801489e <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 801489e:	b480      	push	{r7}
 80148a0:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80148a2:	bf00      	nop
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bc80      	pop	{r7}
 80148a8:	4770      	bx	lr

080148aa <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80148aa:	b480      	push	{r7}
 80148ac:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80148ae:	bf00      	nop
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bc80      	pop	{r7}
 80148b4:	4770      	bx	lr

080148b6 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80148b6:	b480      	push	{r7}
 80148b8:	b085      	sub	sp, #20
 80148ba:	af00      	add	r7, sp, #0
 80148bc:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80148c2:	2300      	movs	r3, #0
 80148c4:	81fb      	strh	r3, [r7, #14]
 80148c6:	e00a      	b.n	80148de <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80148c8:	89fb      	ldrh	r3, [r7, #14]
 80148ca:	68ba      	ldr	r2, [r7, #8]
 80148cc:	4413      	add	r3, r2
 80148ce:	781b      	ldrb	r3, [r3, #0]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d001      	beq.n	80148d8 <IsSlotFree+0x22>
        {
            return false;
 80148d4:	2300      	movs	r3, #0
 80148d6:	e006      	b.n	80148e6 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80148d8:	89fb      	ldrh	r3, [r7, #14]
 80148da:	3301      	adds	r3, #1
 80148dc:	81fb      	strh	r3, [r7, #14]
 80148de:	89fb      	ldrh	r3, [r7, #14]
 80148e0:	2b0f      	cmp	r3, #15
 80148e2:	d9f1      	bls.n	80148c8 <IsSlotFree+0x12>
        }
    }
    return true;
 80148e4:	2301      	movs	r3, #1
}
 80148e6:	4618      	mov	r0, r3
 80148e8:	3714      	adds	r7, #20
 80148ea:	46bd      	mov	sp, r7
 80148ec:	bc80      	pop	{r7}
 80148ee:	4770      	bx	lr

080148f0 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b082      	sub	sp, #8
 80148f4:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80148f6:	2300      	movs	r3, #0
 80148f8:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80148fa:	e007      	b.n	801490c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80148fc:	79fb      	ldrb	r3, [r7, #7]
 80148fe:	3301      	adds	r3, #1
 8014900:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8014902:	79fb      	ldrb	r3, [r7, #7]
 8014904:	2b0f      	cmp	r3, #15
 8014906:	d101      	bne.n	801490c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8014908:	2300      	movs	r3, #0
 801490a:	e012      	b.n	8014932 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801490c:	79fb      	ldrb	r3, [r7, #7]
 801490e:	011b      	lsls	r3, r3, #4
 8014910:	3308      	adds	r3, #8
 8014912:	4a0a      	ldr	r2, [pc, #40]	; (801493c <MallocNewMacCommandSlot+0x4c>)
 8014914:	4413      	add	r3, r2
 8014916:	4618      	mov	r0, r3
 8014918:	f7ff ffcd 	bl	80148b6 <IsSlotFree>
 801491c:	4603      	mov	r3, r0
 801491e:	f083 0301 	eor.w	r3, r3, #1
 8014922:	b2db      	uxtb	r3, r3
 8014924:	2b00      	cmp	r3, #0
 8014926:	d1e9      	bne.n	80148fc <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8014928:	79fb      	ldrb	r3, [r7, #7]
 801492a:	011b      	lsls	r3, r3, #4
 801492c:	3308      	adds	r3, #8
 801492e:	4a03      	ldr	r2, [pc, #12]	; (801493c <MallocNewMacCommandSlot+0x4c>)
 8014930:	4413      	add	r3, r2
}
 8014932:	4618      	mov	r0, r3
 8014934:	3708      	adds	r7, #8
 8014936:	46bd      	mov	sp, r7
 8014938:	bd80      	pop	{r7, pc}
 801493a:	bf00      	nop
 801493c:	200015dc 	.word	0x200015dc

08014940 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d101      	bne.n	8014952 <FreeMacCommandSlot+0x12>
    {
        return false;
 801494e:	2300      	movs	r3, #0
 8014950:	e005      	b.n	801495e <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8014952:	2210      	movs	r2, #16
 8014954:	2100      	movs	r1, #0
 8014956:	6878      	ldr	r0, [r7, #4]
 8014958:	f004 fa00 	bl	8018d5c <memset1>

    return true;
 801495c:	2301      	movs	r3, #1
}
 801495e:	4618      	mov	r0, r3
 8014960:	3708      	adds	r7, #8
 8014962:	46bd      	mov	sp, r7
 8014964:	bd80      	pop	{r7, pc}

08014966 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8014966:	b480      	push	{r7}
 8014968:	b083      	sub	sp, #12
 801496a:	af00      	add	r7, sp, #0
 801496c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d101      	bne.n	8014978 <LinkedListInit+0x12>
    {
        return false;
 8014974:	2300      	movs	r3, #0
 8014976:	e006      	b.n	8014986 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	2200      	movs	r2, #0
 801497c:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	2200      	movs	r2, #0
 8014982:	605a      	str	r2, [r3, #4]

    return true;
 8014984:	2301      	movs	r3, #1
}
 8014986:	4618      	mov	r0, r3
 8014988:	370c      	adds	r7, #12
 801498a:	46bd      	mov	sp, r7
 801498c:	bc80      	pop	{r7}
 801498e:	4770      	bx	lr

08014990 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8014990:	b480      	push	{r7}
 8014992:	b083      	sub	sp, #12
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
 8014998:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d002      	beq.n	80149a6 <LinkedListAdd+0x16>
 80149a0:	683b      	ldr	r3, [r7, #0]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d101      	bne.n	80149aa <LinkedListAdd+0x1a>
    {
        return false;
 80149a6:	2300      	movs	r3, #0
 80149a8:	e015      	b.n	80149d6 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d102      	bne.n	80149b8 <LinkedListAdd+0x28>
    {
        list->First = element;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	683a      	ldr	r2, [r7, #0]
 80149b6:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	685b      	ldr	r3, [r3, #4]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d003      	beq.n	80149c8 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	685b      	ldr	r3, [r3, #4]
 80149c4:	683a      	ldr	r2, [r7, #0]
 80149c6:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80149c8:	683b      	ldr	r3, [r7, #0]
 80149ca:	2200      	movs	r2, #0
 80149cc:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	683a      	ldr	r2, [r7, #0]
 80149d2:	605a      	str	r2, [r3, #4]

    return true;
 80149d4:	2301      	movs	r3, #1
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	370c      	adds	r7, #12
 80149da:	46bd      	mov	sp, r7
 80149dc:	bc80      	pop	{r7}
 80149de:	4770      	bx	lr

080149e0 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80149e0:	b480      	push	{r7}
 80149e2:	b085      	sub	sp, #20
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
 80149e8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d002      	beq.n	80149f6 <LinkedListGetPrevious+0x16>
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d101      	bne.n	80149fa <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80149f6:	2300      	movs	r3, #0
 80149f8:	e016      	b.n	8014a28 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8014a00:	683a      	ldr	r2, [r7, #0]
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	429a      	cmp	r2, r3
 8014a06:	d00c      	beq.n	8014a22 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014a08:	e002      	b.n	8014a10 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d007      	beq.n	8014a26 <LinkedListGetPrevious+0x46>
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	683a      	ldr	r2, [r7, #0]
 8014a1c:	429a      	cmp	r2, r3
 8014a1e:	d1f4      	bne.n	8014a0a <LinkedListGetPrevious+0x2a>
 8014a20:	e001      	b.n	8014a26 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8014a22:	2300      	movs	r3, #0
 8014a24:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8014a26:	68fb      	ldr	r3, [r7, #12]
}
 8014a28:	4618      	mov	r0, r3
 8014a2a:	3714      	adds	r7, #20
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	bc80      	pop	{r7}
 8014a30:	4770      	bx	lr

08014a32 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8014a32:	b580      	push	{r7, lr}
 8014a34:	b084      	sub	sp, #16
 8014a36:	af00      	add	r7, sp, #0
 8014a38:	6078      	str	r0, [r7, #4]
 8014a3a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d002      	beq.n	8014a48 <LinkedListRemove+0x16>
 8014a42:	683b      	ldr	r3, [r7, #0]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d101      	bne.n	8014a4c <LinkedListRemove+0x1a>
    {
        return false;
 8014a48:	2300      	movs	r3, #0
 8014a4a:	e020      	b.n	8014a8e <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8014a4c:	6839      	ldr	r1, [r7, #0]
 8014a4e:	6878      	ldr	r0, [r7, #4]
 8014a50:	f7ff ffc6 	bl	80149e0 <LinkedListGetPrevious>
 8014a54:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	683a      	ldr	r2, [r7, #0]
 8014a5c:	429a      	cmp	r2, r3
 8014a5e:	d103      	bne.n	8014a68 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	681a      	ldr	r2, [r3, #0]
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	685b      	ldr	r3, [r3, #4]
 8014a6c:	683a      	ldr	r2, [r7, #0]
 8014a6e:	429a      	cmp	r2, r3
 8014a70:	d102      	bne.n	8014a78 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	68fa      	ldr	r2, [r7, #12]
 8014a76:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d003      	beq.n	8014a86 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8014a7e:	683b      	ldr	r3, [r7, #0]
 8014a80:	681a      	ldr	r2, [r3, #0]
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8014a86:	683b      	ldr	r3, [r7, #0]
 8014a88:	2200      	movs	r2, #0
 8014a8a:	601a      	str	r2, [r3, #0]

    return true;
 8014a8c:	2301      	movs	r3, #1
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	3710      	adds	r7, #16
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}

08014a96 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8014a96:	b480      	push	{r7}
 8014a98:	b083      	sub	sp, #12
 8014a9a:	af00      	add	r7, sp, #0
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8014aa0:	79fb      	ldrb	r3, [r7, #7]
 8014aa2:	2b05      	cmp	r3, #5
 8014aa4:	d004      	beq.n	8014ab0 <IsSticky+0x1a>
 8014aa6:	2b05      	cmp	r3, #5
 8014aa8:	db04      	blt.n	8014ab4 <IsSticky+0x1e>
 8014aaa:	3b08      	subs	r3, #8
 8014aac:	2b02      	cmp	r3, #2
 8014aae:	d801      	bhi.n	8014ab4 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8014ab0:	2301      	movs	r3, #1
 8014ab2:	e000      	b.n	8014ab6 <IsSticky+0x20>
        default:
            return false;
 8014ab4:	2300      	movs	r3, #0
    }
}
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	370c      	adds	r7, #12
 8014aba:	46bd      	mov	sp, r7
 8014abc:	bc80      	pop	{r7}
 8014abe:	4770      	bx	lr

08014ac0 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8014ac0:	b480      	push	{r7}
 8014ac2:	b083      	sub	sp, #12
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8014aca:	2300      	movs	r3, #0
    }
}
 8014acc:	4618      	mov	r0, r3
 8014ace:	370c      	adds	r7, #12
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	bc80      	pop	{r7}
 8014ad4:	4770      	bx	lr
	...

08014ad8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8014adc:	22fc      	movs	r2, #252	; 0xfc
 8014ade:	2100      	movs	r1, #0
 8014ae0:	4804      	ldr	r0, [pc, #16]	; (8014af4 <LoRaMacCommandsInit+0x1c>)
 8014ae2:	f004 f93b 	bl	8018d5c <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8014ae6:	4803      	ldr	r0, [pc, #12]	; (8014af4 <LoRaMacCommandsInit+0x1c>)
 8014ae8:	f7ff ff3d 	bl	8014966 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8014aec:	2300      	movs	r3, #0
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	bd80      	pop	{r7, pc}
 8014af2:	bf00      	nop
 8014af4:	200015dc 	.word	0x200015dc

08014af8 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b086      	sub	sp, #24
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	4603      	mov	r3, r0
 8014b00:	60b9      	str	r1, [r7, #8]
 8014b02:	607a      	str	r2, [r7, #4]
 8014b04:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8014b06:	68bb      	ldr	r3, [r7, #8]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d101      	bne.n	8014b10 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014b0c:	2301      	movs	r3, #1
 8014b0e:	e03b      	b.n	8014b88 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014b10:	f7ff feee 	bl	80148f0 <MallocNewMacCommandSlot>
 8014b14:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8014b16:	697b      	ldr	r3, [r7, #20]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d101      	bne.n	8014b20 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8014b1c:	2302      	movs	r3, #2
 8014b1e:	e033      	b.n	8014b88 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8014b20:	6979      	ldr	r1, [r7, #20]
 8014b22:	481b      	ldr	r0, [pc, #108]	; (8014b90 <LoRaMacCommandsAddCmd+0x98>)
 8014b24:	f7ff ff34 	bl	8014990 <LinkedListAdd>
 8014b28:	4603      	mov	r3, r0
 8014b2a:	f083 0301 	eor.w	r3, r3, #1
 8014b2e:	b2db      	uxtb	r3, r3
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d001      	beq.n	8014b38 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014b34:	2305      	movs	r3, #5
 8014b36:	e027      	b.n	8014b88 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8014b38:	697b      	ldr	r3, [r7, #20]
 8014b3a:	7bfa      	ldrb	r2, [r7, #15]
 8014b3c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8014b3e:	697b      	ldr	r3, [r7, #20]
 8014b40:	687a      	ldr	r2, [r7, #4]
 8014b42:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8014b44:	697b      	ldr	r3, [r7, #20]
 8014b46:	3305      	adds	r3, #5
 8014b48:	687a      	ldr	r2, [r7, #4]
 8014b4a:	b292      	uxth	r2, r2
 8014b4c:	68b9      	ldr	r1, [r7, #8]
 8014b4e:	4618      	mov	r0, r3
 8014b50:	f004 f8c9 	bl	8018ce6 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8014b54:	7bfb      	ldrb	r3, [r7, #15]
 8014b56:	4618      	mov	r0, r3
 8014b58:	f7ff ff9d 	bl	8014a96 <IsSticky>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	461a      	mov	r2, r3
 8014b60:	697b      	ldr	r3, [r7, #20]
 8014b62:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8014b64:	7bfb      	ldrb	r3, [r7, #15]
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7ff ffaa 	bl	8014ac0 <IsConfirmationRequired>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	461a      	mov	r2, r3
 8014b70:	697b      	ldr	r3, [r7, #20]
 8014b72:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8014b74:	4b06      	ldr	r3, [pc, #24]	; (8014b90 <LoRaMacCommandsAddCmd+0x98>)
 8014b76:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	4413      	add	r3, r2
 8014b7e:	3301      	adds	r3, #1
 8014b80:	4a03      	ldr	r2, [pc, #12]	; (8014b90 <LoRaMacCommandsAddCmd+0x98>)
 8014b82:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8014b86:	2300      	movs	r3, #0
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	3718      	adds	r7, #24
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}
 8014b90:	200015dc 	.word	0x200015dc

08014b94 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8014b94:	b580      	push	{r7, lr}
 8014b96:	b082      	sub	sp, #8
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d101      	bne.n	8014ba6 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014ba2:	2301      	movs	r3, #1
 8014ba4:	e021      	b.n	8014bea <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8014ba6:	6879      	ldr	r1, [r7, #4]
 8014ba8:	4812      	ldr	r0, [pc, #72]	; (8014bf4 <LoRaMacCommandsRemoveCmd+0x60>)
 8014baa:	f7ff ff42 	bl	8014a32 <LinkedListRemove>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	f083 0301 	eor.w	r3, r3, #1
 8014bb4:	b2db      	uxtb	r3, r3
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d001      	beq.n	8014bbe <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014bba:	2303      	movs	r3, #3
 8014bbc:	e015      	b.n	8014bea <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8014bbe:	4b0d      	ldr	r3, [pc, #52]	; (8014bf4 <LoRaMacCommandsRemoveCmd+0x60>)
 8014bc0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	689b      	ldr	r3, [r3, #8]
 8014bc8:	1ad3      	subs	r3, r2, r3
 8014bca:	3b01      	subs	r3, #1
 8014bcc:	4a09      	ldr	r2, [pc, #36]	; (8014bf4 <LoRaMacCommandsRemoveCmd+0x60>)
 8014bce:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8014bd2:	6878      	ldr	r0, [r7, #4]
 8014bd4:	f7ff feb4 	bl	8014940 <FreeMacCommandSlot>
 8014bd8:	4603      	mov	r3, r0
 8014bda:	f083 0301 	eor.w	r3, r3, #1
 8014bde:	b2db      	uxtb	r3, r3
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d001      	beq.n	8014be8 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014be4:	2305      	movs	r3, #5
 8014be6:	e000      	b.n	8014bea <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014be8:	2300      	movs	r3, #0
}
 8014bea:	4618      	mov	r0, r3
 8014bec:	3708      	adds	r7, #8
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd80      	pop	{r7, pc}
 8014bf2:	bf00      	nop
 8014bf4:	200015dc 	.word	0x200015dc

08014bf8 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8014bf8:	b480      	push	{r7}
 8014bfa:	b085      	sub	sp, #20
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	4603      	mov	r3, r0
 8014c00:	6039      	str	r1, [r7, #0]
 8014c02:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014c04:	4b0e      	ldr	r3, [pc, #56]	; (8014c40 <LoRaMacCommandsGetCmd+0x48>)
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8014c0a:	e002      	b.n	8014c12 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d004      	beq.n	8014c22 <LoRaMacCommandsGetCmd+0x2a>
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	791b      	ldrb	r3, [r3, #4]
 8014c1c:	79fa      	ldrb	r2, [r7, #7]
 8014c1e:	429a      	cmp	r2, r3
 8014c20:	d1f4      	bne.n	8014c0c <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8014c22:	683b      	ldr	r3, [r7, #0]
 8014c24:	68fa      	ldr	r2, [r7, #12]
 8014c26:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d101      	bne.n	8014c32 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014c2e:	2303      	movs	r3, #3
 8014c30:	e000      	b.n	8014c34 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8014c32:	2300      	movs	r3, #0
}
 8014c34:	4618      	mov	r0, r3
 8014c36:	3714      	adds	r7, #20
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	bc80      	pop	{r7}
 8014c3c:	4770      	bx	lr
 8014c3e:	bf00      	nop
 8014c40:	200015dc 	.word	0x200015dc

08014c44 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b082      	sub	sp, #8
 8014c48:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014c4a:	4b0f      	ldr	r3, [pc, #60]	; (8014c88 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014c50:	e012      	b.n	8014c78 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	7b1b      	ldrb	r3, [r3, #12]
 8014c56:	f083 0301 	eor.w	r3, r3, #1
 8014c5a:	b2db      	uxtb	r3, r3
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d008      	beq.n	8014c72 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8014c66:	6878      	ldr	r0, [r7, #4]
 8014c68:	f7ff ff94 	bl	8014b94 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8014c6c:	683b      	ldr	r3, [r7, #0]
 8014c6e:	607b      	str	r3, [r7, #4]
 8014c70:	e002      	b.n	8014c78 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d1e9      	bne.n	8014c52 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014c7e:	2300      	movs	r3, #0
}
 8014c80:	4618      	mov	r0, r3
 8014c82:	3708      	adds	r7, #8
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}
 8014c88:	200015dc 	.word	0x200015dc

08014c8c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b082      	sub	sp, #8
 8014c90:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014c92:	4b13      	ldr	r3, [pc, #76]	; (8014ce0 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014c98:	e01a      	b.n	8014cd0 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	791b      	ldrb	r3, [r3, #4]
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f7ff fef6 	bl	8014a96 <IsSticky>
 8014caa:	4603      	mov	r3, r0
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d00d      	beq.n	8014ccc <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	791b      	ldrb	r3, [r3, #4]
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f7ff ff03 	bl	8014ac0 <IsConfirmationRequired>
 8014cba:	4603      	mov	r3, r0
 8014cbc:	f083 0301 	eor.w	r3, r3, #1
 8014cc0:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d002      	beq.n	8014ccc <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8014cc6:	6878      	ldr	r0, [r7, #4]
 8014cc8:	f7ff ff64 	bl	8014b94 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8014ccc:	683b      	ldr	r3, [r7, #0]
 8014cce:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d1e1      	bne.n	8014c9a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014cd6:	2300      	movs	r3, #0
}
 8014cd8:	4618      	mov	r0, r3
 8014cda:	3708      	adds	r7, #8
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	bd80      	pop	{r7, pc}
 8014ce0:	200015dc 	.word	0x200015dc

08014ce4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8014ce4:	b480      	push	{r7}
 8014ce6:	b083      	sub	sp, #12
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d101      	bne.n	8014cf6 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014cf2:	2301      	movs	r3, #1
 8014cf4:	e005      	b.n	8014d02 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8014cf6:	4b05      	ldr	r3, [pc, #20]	; (8014d0c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8014cf8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8014d00:	2300      	movs	r3, #0
}
 8014d02:	4618      	mov	r0, r3
 8014d04:	370c      	adds	r7, #12
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bc80      	pop	{r7}
 8014d0a:	4770      	bx	lr
 8014d0c:	200015dc 	.word	0x200015dc

08014d10 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b088      	sub	sp, #32
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	60f8      	str	r0, [r7, #12]
 8014d18:	60b9      	str	r1, [r7, #8]
 8014d1a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8014d1c:	4b25      	ldr	r3, [pc, #148]	; (8014db4 <LoRaMacCommandsSerializeCmds+0xa4>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8014d22:	2300      	movs	r3, #0
 8014d24:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d002      	beq.n	8014d32 <LoRaMacCommandsSerializeCmds+0x22>
 8014d2c:	68bb      	ldr	r3, [r7, #8]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d126      	bne.n	8014d80 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014d32:	2301      	movs	r3, #1
 8014d34:	e039      	b.n	8014daa <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8014d36:	7efb      	ldrb	r3, [r7, #27]
 8014d38:	68fa      	ldr	r2, [r7, #12]
 8014d3a:	1ad2      	subs	r2, r2, r3
 8014d3c:	69fb      	ldr	r3, [r7, #28]
 8014d3e:	689b      	ldr	r3, [r3, #8]
 8014d40:	3301      	adds	r3, #1
 8014d42:	429a      	cmp	r2, r3
 8014d44:	d320      	bcc.n	8014d88 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8014d46:	7efb      	ldrb	r3, [r7, #27]
 8014d48:	1c5a      	adds	r2, r3, #1
 8014d4a:	76fa      	strb	r2, [r7, #27]
 8014d4c:	461a      	mov	r2, r3
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	4413      	add	r3, r2
 8014d52:	69fa      	ldr	r2, [r7, #28]
 8014d54:	7912      	ldrb	r2, [r2, #4]
 8014d56:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8014d58:	7efb      	ldrb	r3, [r7, #27]
 8014d5a:	687a      	ldr	r2, [r7, #4]
 8014d5c:	18d0      	adds	r0, r2, r3
 8014d5e:	69fb      	ldr	r3, [r7, #28]
 8014d60:	1d59      	adds	r1, r3, #5
 8014d62:	69fb      	ldr	r3, [r7, #28]
 8014d64:	689b      	ldr	r3, [r3, #8]
 8014d66:	b29b      	uxth	r3, r3
 8014d68:	461a      	mov	r2, r3
 8014d6a:	f003 ffbc 	bl	8018ce6 <memcpy1>
            itr += curElement->PayloadSize;
 8014d6e:	69fb      	ldr	r3, [r7, #28]
 8014d70:	689b      	ldr	r3, [r3, #8]
 8014d72:	b2da      	uxtb	r2, r3
 8014d74:	7efb      	ldrb	r3, [r7, #27]
 8014d76:	4413      	add	r3, r2
 8014d78:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8014d7a:	69fb      	ldr	r3, [r7, #28]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014d80:	69fb      	ldr	r3, [r7, #28]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d1d7      	bne.n	8014d36 <LoRaMacCommandsSerializeCmds+0x26>
 8014d86:	e009      	b.n	8014d9c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8014d88:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8014d8a:	e007      	b.n	8014d9c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8014d8c:	69fb      	ldr	r3, [r7, #28]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8014d92:	69f8      	ldr	r0, [r7, #28]
 8014d94:	f7ff fefe 	bl	8014b94 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8014d98:	697b      	ldr	r3, [r7, #20]
 8014d9a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014d9c:	69fb      	ldr	r3, [r7, #28]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d1f4      	bne.n	8014d8c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8014da2:	68b8      	ldr	r0, [r7, #8]
 8014da4:	f7ff ff9e 	bl	8014ce4 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8014da8:	2300      	movs	r3, #0
}
 8014daa:	4618      	mov	r0, r3
 8014dac:	3720      	adds	r7, #32
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}
 8014db2:	bf00      	nop
 8014db4:	200015dc 	.word	0x200015dc

08014db8 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8014db8:	b480      	push	{r7}
 8014dba:	b085      	sub	sp, #20
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8014dc6:	79fb      	ldrb	r3, [r7, #7]
 8014dc8:	3b02      	subs	r3, #2
 8014dca:	2b11      	cmp	r3, #17
 8014dcc:	d850      	bhi.n	8014e70 <LoRaMacCommandsGetCmdSize+0xb8>
 8014dce:	a201      	add	r2, pc, #4	; (adr r2, 8014dd4 <LoRaMacCommandsGetCmdSize+0x1c>)
 8014dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dd4:	08014e1d 	.word	0x08014e1d
 8014dd8:	08014e23 	.word	0x08014e23
 8014ddc:	08014e29 	.word	0x08014e29
 8014de0:	08014e2f 	.word	0x08014e2f
 8014de4:	08014e35 	.word	0x08014e35
 8014de8:	08014e3b 	.word	0x08014e3b
 8014dec:	08014e41 	.word	0x08014e41
 8014df0:	08014e47 	.word	0x08014e47
 8014df4:	08014e4d 	.word	0x08014e4d
 8014df8:	08014e71 	.word	0x08014e71
 8014dfc:	08014e71 	.word	0x08014e71
 8014e00:	08014e53 	.word	0x08014e53
 8014e04:	08014e71 	.word	0x08014e71
 8014e08:	08014e71 	.word	0x08014e71
 8014e0c:	08014e59 	.word	0x08014e59
 8014e10:	08014e5f 	.word	0x08014e5f
 8014e14:	08014e65 	.word	0x08014e65
 8014e18:	08014e6b 	.word	0x08014e6b
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8014e1c:	2303      	movs	r3, #3
 8014e1e:	73fb      	strb	r3, [r7, #15]
            break;
 8014e20:	e027      	b.n	8014e72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8014e22:	2305      	movs	r3, #5
 8014e24:	73fb      	strb	r3, [r7, #15]
            break;
 8014e26:	e024      	b.n	8014e72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8014e28:	2302      	movs	r3, #2
 8014e2a:	73fb      	strb	r3, [r7, #15]
            break;
 8014e2c:	e021      	b.n	8014e72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8014e2e:	2305      	movs	r3, #5
 8014e30:	73fb      	strb	r3, [r7, #15]
            break;
 8014e32:	e01e      	b.n	8014e72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014e34:	2301      	movs	r3, #1
 8014e36:	73fb      	strb	r3, [r7, #15]
            break;
 8014e38:	e01b      	b.n	8014e72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8014e3a:	2306      	movs	r3, #6
 8014e3c:	73fb      	strb	r3, [r7, #15]
            break;
 8014e3e:	e018      	b.n	8014e72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8014e40:	2302      	movs	r3, #2
 8014e42:	73fb      	strb	r3, [r7, #15]
            break;
 8014e44:	e015      	b.n	8014e72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8014e46:	2302      	movs	r3, #2
 8014e48:	73fb      	strb	r3, [r7, #15]
            break;
 8014e4a:	e012      	b.n	8014e72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8014e4c:	2305      	movs	r3, #5
 8014e4e:	73fb      	strb	r3, [r7, #15]
            break;
 8014e50:	e00f      	b.n	8014e72 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8014e52:	2306      	movs	r3, #6
 8014e54:	73fb      	strb	r3, [r7, #15]
            break;
 8014e56:	e00c      	b.n	8014e72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8014e58:	2301      	movs	r3, #1
 8014e5a:	73fb      	strb	r3, [r7, #15]
            break;
 8014e5c:	e009      	b.n	8014e72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8014e5e:	2305      	movs	r3, #5
 8014e60:	73fb      	strb	r3, [r7, #15]
            break;
 8014e62:	e006      	b.n	8014e72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8014e64:	2304      	movs	r3, #4
 8014e66:	73fb      	strb	r3, [r7, #15]
            break;
 8014e68:	e003      	b.n	8014e72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8014e6a:	2304      	movs	r3, #4
 8014e6c:	73fb      	strb	r3, [r7, #15]
            break;
 8014e6e:	e000      	b.n	8014e72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8014e70:	bf00      	nop
        }
    }
    return cidSize;
 8014e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e74:	4618      	mov	r0, r3
 8014e76:	3714      	adds	r7, #20
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	bc80      	pop	{r7}
 8014e7c:	4770      	bx	lr
 8014e7e:	bf00      	nop

08014e80 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8014e80:	b480      	push	{r7}
 8014e82:	b083      	sub	sp, #12
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	4a07      	ldr	r2, [pc, #28]	; (8014ea8 <IncreaseBufferPointer+0x28>)
 8014e8c:	4293      	cmp	r3, r2
 8014e8e:	d102      	bne.n	8014e96 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014e90:	4b06      	ldr	r3, [pc, #24]	; (8014eac <IncreaseBufferPointer+0x2c>)
 8014e92:	607b      	str	r3, [r7, #4]
 8014e94:	e002      	b.n	8014e9c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	3304      	adds	r3, #4
 8014e9a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8014e9c:	687b      	ldr	r3, [r7, #4]
}
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	370c      	adds	r7, #12
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	bc80      	pop	{r7}
 8014ea6:	4770      	bx	lr
 8014ea8:	200016f4 	.word	0x200016f4
 8014eac:	200016e4 	.word	0x200016e4

08014eb0 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8014eb0:	b480      	push	{r7}
 8014eb2:	b083      	sub	sp, #12
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8014eba:	79fb      	ldrb	r3, [r7, #7]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d101      	bne.n	8014ec4 <IsListEmpty+0x14>
    {
        return true;
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	e000      	b.n	8014ec6 <IsListEmpty+0x16>
    }
    return false;
 8014ec4:	2300      	movs	r3, #0
}
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	370c      	adds	r7, #12
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	bc80      	pop	{r7}
 8014ece:	4770      	bx	lr

08014ed0 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8014ed0:	b480      	push	{r7}
 8014ed2:	b083      	sub	sp, #12
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8014eda:	79fb      	ldrb	r3, [r7, #7]
 8014edc:	2b04      	cmp	r3, #4
 8014ede:	d901      	bls.n	8014ee4 <IsListFull+0x14>
    {
        return true;
 8014ee0:	2301      	movs	r3, #1
 8014ee2:	e000      	b.n	8014ee6 <IsListFull+0x16>
    }
    return false;
 8014ee4:	2300      	movs	r3, #0
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	370c      	adds	r7, #12
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bc80      	pop	{r7}
 8014eee:	4770      	bx	lr

08014ef0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b086      	sub	sp, #24
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	4603      	mov	r3, r0
 8014ef8:	60b9      	str	r1, [r7, #8]
 8014efa:	607a      	str	r2, [r7, #4]
 8014efc:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8014efe:	68bb      	ldr	r3, [r7, #8]
 8014f00:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014f02:	4b13      	ldr	r3, [pc, #76]	; (8014f50 <GetElement+0x60>)
 8014f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f7ff ffd1 	bl	8014eb0 <IsListEmpty>
 8014f0e:	4603      	mov	r3, r0
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d001      	beq.n	8014f18 <GetElement+0x28>
    {
        return NULL;
 8014f14:	2300      	movs	r3, #0
 8014f16:	e017      	b.n	8014f48 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014f18:	2300      	movs	r3, #0
 8014f1a:	74fb      	strb	r3, [r7, #19]
 8014f1c:	e00d      	b.n	8014f3a <GetElement+0x4a>
    {
        if( element->Request == request )
 8014f1e:	697b      	ldr	r3, [r7, #20]
 8014f20:	781b      	ldrb	r3, [r3, #0]
 8014f22:	7bfa      	ldrb	r2, [r7, #15]
 8014f24:	429a      	cmp	r2, r3
 8014f26:	d101      	bne.n	8014f2c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8014f28:	697b      	ldr	r3, [r7, #20]
 8014f2a:	e00d      	b.n	8014f48 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8014f2c:	6978      	ldr	r0, [r7, #20]
 8014f2e:	f7ff ffa7 	bl	8014e80 <IncreaseBufferPointer>
 8014f32:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014f34:	7cfb      	ldrb	r3, [r7, #19]
 8014f36:	3301      	adds	r3, #1
 8014f38:	74fb      	strb	r3, [r7, #19]
 8014f3a:	4b05      	ldr	r3, [pc, #20]	; (8014f50 <GetElement+0x60>)
 8014f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014f40:	7cfa      	ldrb	r2, [r7, #19]
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d3eb      	bcc.n	8014f1e <GetElement+0x2e>
    }

    return NULL;
 8014f46:	2300      	movs	r3, #0
}
 8014f48:	4618      	mov	r0, r3
 8014f4a:	3718      	adds	r7, #24
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}
 8014f50:	200016d8 	.word	0x200016d8

08014f54 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b082      	sub	sp, #8
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8014f5c:	4a0c      	ldr	r2, [pc, #48]	; (8014f90 <LoRaMacConfirmQueueInit+0x3c>)
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8014f62:	4b0b      	ldr	r3, [pc, #44]	; (8014f90 <LoRaMacConfirmQueueInit+0x3c>)
 8014f64:	2200      	movs	r2, #0
 8014f66:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014f6a:	4b09      	ldr	r3, [pc, #36]	; (8014f90 <LoRaMacConfirmQueueInit+0x3c>)
 8014f6c:	4a09      	ldr	r2, [pc, #36]	; (8014f94 <LoRaMacConfirmQueueInit+0x40>)
 8014f6e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014f70:	4b07      	ldr	r3, [pc, #28]	; (8014f90 <LoRaMacConfirmQueueInit+0x3c>)
 8014f72:	4a08      	ldr	r2, [pc, #32]	; (8014f94 <LoRaMacConfirmQueueInit+0x40>)
 8014f74:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8014f76:	2214      	movs	r2, #20
 8014f78:	21ff      	movs	r1, #255	; 0xff
 8014f7a:	4806      	ldr	r0, [pc, #24]	; (8014f94 <LoRaMacConfirmQueueInit+0x40>)
 8014f7c:	f003 feee 	bl	8018d5c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014f80:	4b03      	ldr	r3, [pc, #12]	; (8014f90 <LoRaMacConfirmQueueInit+0x3c>)
 8014f82:	2201      	movs	r2, #1
 8014f84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8014f88:	bf00      	nop
 8014f8a:	3708      	adds	r7, #8
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	bd80      	pop	{r7, pc}
 8014f90:	200016d8 	.word	0x200016d8
 8014f94:	200016e4 	.word	0x200016e4

08014f98 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b082      	sub	sp, #8
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014fa0:	4b19      	ldr	r3, [pc, #100]	; (8015008 <LoRaMacConfirmQueueAdd+0x70>)
 8014fa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f7ff ff92 	bl	8014ed0 <IsListFull>
 8014fac:	4603      	mov	r3, r0
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d001      	beq.n	8014fb6 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	e023      	b.n	8014ffe <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8014fb6:	4b14      	ldr	r3, [pc, #80]	; (8015008 <LoRaMacConfirmQueueAdd+0x70>)
 8014fb8:	689b      	ldr	r3, [r3, #8]
 8014fba:	687a      	ldr	r2, [r7, #4]
 8014fbc:	7812      	ldrb	r2, [r2, #0]
 8014fbe:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8014fc0:	4b11      	ldr	r3, [pc, #68]	; (8015008 <LoRaMacConfirmQueueAdd+0x70>)
 8014fc2:	689b      	ldr	r3, [r3, #8]
 8014fc4:	687a      	ldr	r2, [r7, #4]
 8014fc6:	7852      	ldrb	r2, [r2, #1]
 8014fc8:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8014fca:	4b0f      	ldr	r3, [pc, #60]	; (8015008 <LoRaMacConfirmQueueAdd+0x70>)
 8014fcc:	689b      	ldr	r3, [r3, #8]
 8014fce:	687a      	ldr	r2, [r7, #4]
 8014fd0:	78d2      	ldrb	r2, [r2, #3]
 8014fd2:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8014fd4:	4b0c      	ldr	r3, [pc, #48]	; (8015008 <LoRaMacConfirmQueueAdd+0x70>)
 8014fd6:	689b      	ldr	r3, [r3, #8]
 8014fd8:	2200      	movs	r2, #0
 8014fda:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8014fdc:	4b0a      	ldr	r3, [pc, #40]	; (8015008 <LoRaMacConfirmQueueAdd+0x70>)
 8014fde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014fe2:	3301      	adds	r3, #1
 8014fe4:	b2da      	uxtb	r2, r3
 8014fe6:	4b08      	ldr	r3, [pc, #32]	; (8015008 <LoRaMacConfirmQueueAdd+0x70>)
 8014fe8:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8014fec:	4b06      	ldr	r3, [pc, #24]	; (8015008 <LoRaMacConfirmQueueAdd+0x70>)
 8014fee:	689b      	ldr	r3, [r3, #8]
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	f7ff ff45 	bl	8014e80 <IncreaseBufferPointer>
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	4a03      	ldr	r2, [pc, #12]	; (8015008 <LoRaMacConfirmQueueAdd+0x70>)
 8014ffa:	6093      	str	r3, [r2, #8]

    return true;
 8014ffc:	2301      	movs	r3, #1
}
 8014ffe:	4618      	mov	r0, r3
 8015000:	3708      	adds	r7, #8
 8015002:	46bd      	mov	sp, r7
 8015004:	bd80      	pop	{r7, pc}
 8015006:	bf00      	nop
 8015008:	200016d8 	.word	0x200016d8

0801500c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 801500c:	b580      	push	{r7, lr}
 801500e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015010:	4b0e      	ldr	r3, [pc, #56]	; (801504c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015012:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015016:	4618      	mov	r0, r3
 8015018:	f7ff ff4a 	bl	8014eb0 <IsListEmpty>
 801501c:	4603      	mov	r3, r0
 801501e:	2b00      	cmp	r3, #0
 8015020:	d001      	beq.n	8015026 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8015022:	2300      	movs	r3, #0
 8015024:	e010      	b.n	8015048 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8015026:	4b09      	ldr	r3, [pc, #36]	; (801504c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015028:	f893 3020 	ldrb.w	r3, [r3, #32]
 801502c:	3b01      	subs	r3, #1
 801502e:	b2da      	uxtb	r2, r3
 8015030:	4b06      	ldr	r3, [pc, #24]	; (801504c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015032:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8015036:	4b05      	ldr	r3, [pc, #20]	; (801504c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015038:	685b      	ldr	r3, [r3, #4]
 801503a:	4618      	mov	r0, r3
 801503c:	f7ff ff20 	bl	8014e80 <IncreaseBufferPointer>
 8015040:	4603      	mov	r3, r0
 8015042:	4a02      	ldr	r2, [pc, #8]	; (801504c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015044:	6053      	str	r3, [r2, #4]

    return true;
 8015046:	2301      	movs	r3, #1
}
 8015048:	4618      	mov	r0, r3
 801504a:	bd80      	pop	{r7, pc}
 801504c:	200016d8 	.word	0x200016d8

08015050 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b084      	sub	sp, #16
 8015054:	af00      	add	r7, sp, #0
 8015056:	4603      	mov	r3, r0
 8015058:	460a      	mov	r2, r1
 801505a:	71fb      	strb	r3, [r7, #7]
 801505c:	4613      	mov	r3, r2
 801505e:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8015060:	2300      	movs	r3, #0
 8015062:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015064:	4b10      	ldr	r3, [pc, #64]	; (80150a8 <LoRaMacConfirmQueueSetStatus+0x58>)
 8015066:	f893 3020 	ldrb.w	r3, [r3, #32]
 801506a:	4618      	mov	r0, r3
 801506c:	f7ff ff20 	bl	8014eb0 <IsListEmpty>
 8015070:	4603      	mov	r3, r0
 8015072:	f083 0301 	eor.w	r3, r3, #1
 8015076:	b2db      	uxtb	r3, r3
 8015078:	2b00      	cmp	r3, #0
 801507a:	d011      	beq.n	80150a0 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801507c:	4b0a      	ldr	r3, [pc, #40]	; (80150a8 <LoRaMacConfirmQueueSetStatus+0x58>)
 801507e:	6859      	ldr	r1, [r3, #4]
 8015080:	4b09      	ldr	r3, [pc, #36]	; (80150a8 <LoRaMacConfirmQueueSetStatus+0x58>)
 8015082:	689a      	ldr	r2, [r3, #8]
 8015084:	79bb      	ldrb	r3, [r7, #6]
 8015086:	4618      	mov	r0, r3
 8015088:	f7ff ff32 	bl	8014ef0 <GetElement>
 801508c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d005      	beq.n	80150a0 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	79fa      	ldrb	r2, [r7, #7]
 8015098:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	2201      	movs	r2, #1
 801509e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80150a0:	bf00      	nop
 80150a2:	3710      	adds	r7, #16
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}
 80150a8:	200016d8 	.word	0x200016d8

080150ac <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b084      	sub	sp, #16
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	4603      	mov	r3, r0
 80150b4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80150b6:	2300      	movs	r3, #0
 80150b8:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80150ba:	4b10      	ldr	r3, [pc, #64]	; (80150fc <LoRaMacConfirmQueueGetStatus+0x50>)
 80150bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80150c0:	4618      	mov	r0, r3
 80150c2:	f7ff fef5 	bl	8014eb0 <IsListEmpty>
 80150c6:	4603      	mov	r3, r0
 80150c8:	f083 0301 	eor.w	r3, r3, #1
 80150cc:	b2db      	uxtb	r3, r3
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d00e      	beq.n	80150f0 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80150d2:	4b0a      	ldr	r3, [pc, #40]	; (80150fc <LoRaMacConfirmQueueGetStatus+0x50>)
 80150d4:	6859      	ldr	r1, [r3, #4]
 80150d6:	4b09      	ldr	r3, [pc, #36]	; (80150fc <LoRaMacConfirmQueueGetStatus+0x50>)
 80150d8:	689a      	ldr	r2, [r3, #8]
 80150da:	79fb      	ldrb	r3, [r7, #7]
 80150dc:	4618      	mov	r0, r3
 80150de:	f7ff ff07 	bl	8014ef0 <GetElement>
 80150e2:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d002      	beq.n	80150f0 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	785b      	ldrb	r3, [r3, #1]
 80150ee:	e000      	b.n	80150f2 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80150f0:	2301      	movs	r3, #1
}
 80150f2:	4618      	mov	r0, r3
 80150f4:	3710      	adds	r7, #16
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}
 80150fa:	bf00      	nop
 80150fc:	200016d8 	.word	0x200016d8

08015100 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b084      	sub	sp, #16
 8015104:	af00      	add	r7, sp, #0
 8015106:	4603      	mov	r3, r0
 8015108:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801510a:	4b16      	ldr	r3, [pc, #88]	; (8015164 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801510c:	685b      	ldr	r3, [r3, #4]
 801510e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8015110:	4a14      	ldr	r2, [pc, #80]	; (8015164 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015112:	79fb      	ldrb	r3, [r7, #7]
 8015114:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015118:	4b12      	ldr	r3, [pc, #72]	; (8015164 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801511a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801511e:	4618      	mov	r0, r3
 8015120:	f7ff fec6 	bl	8014eb0 <IsListEmpty>
 8015124:	4603      	mov	r3, r0
 8015126:	f083 0301 	eor.w	r3, r3, #1
 801512a:	b2db      	uxtb	r3, r3
 801512c:	2b00      	cmp	r3, #0
 801512e:	d015      	beq.n	801515c <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	79fa      	ldrb	r2, [r7, #7]
 8015134:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	78db      	ldrb	r3, [r3, #3]
 801513a:	f083 0301 	eor.w	r3, r3, #1
 801513e:	b2db      	uxtb	r3, r3
 8015140:	2b00      	cmp	r3, #0
 8015142:	d002      	beq.n	801514a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	2201      	movs	r2, #1
 8015148:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801514a:	68f8      	ldr	r0, [r7, #12]
 801514c:	f7ff fe98 	bl	8014e80 <IncreaseBufferPointer>
 8015150:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8015152:	4b04      	ldr	r3, [pc, #16]	; (8015164 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015154:	689b      	ldr	r3, [r3, #8]
 8015156:	68fa      	ldr	r2, [r7, #12]
 8015158:	429a      	cmp	r2, r3
 801515a:	d1e9      	bne.n	8015130 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 801515c:	bf00      	nop
 801515e:	3710      	adds	r7, #16
 8015160:	46bd      	mov	sp, r7
 8015162:	bd80      	pop	{r7, pc}
 8015164:	200016d8 	.word	0x200016d8

08015168 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b082      	sub	sp, #8
 801516c:	af00      	add	r7, sp, #0
 801516e:	4603      	mov	r3, r0
 8015170:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8015172:	4b09      	ldr	r3, [pc, #36]	; (8015198 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015174:	6859      	ldr	r1, [r3, #4]
 8015176:	4b08      	ldr	r3, [pc, #32]	; (8015198 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015178:	689a      	ldr	r2, [r3, #8]
 801517a:	79fb      	ldrb	r3, [r7, #7]
 801517c:	4618      	mov	r0, r3
 801517e:	f7ff feb7 	bl	8014ef0 <GetElement>
 8015182:	4603      	mov	r3, r0
 8015184:	2b00      	cmp	r3, #0
 8015186:	d001      	beq.n	801518c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8015188:	2301      	movs	r3, #1
 801518a:	e000      	b.n	801518e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 801518c:	2300      	movs	r3, #0
}
 801518e:	4618      	mov	r0, r3
 8015190:	3708      	adds	r7, #8
 8015192:	46bd      	mov	sp, r7
 8015194:	bd80      	pop	{r7, pc}
 8015196:	bf00      	nop
 8015198:	200016d8 	.word	0x200016d8

0801519c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b084      	sub	sp, #16
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80151a4:	4b25      	ldr	r3, [pc, #148]	; (801523c <LoRaMacConfirmQueueHandleCb+0xa0>)
 80151a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80151aa:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80151ac:	2300      	movs	r3, #0
 80151ae:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 80151b0:	f107 0308 	add.w	r3, r7, #8
 80151b4:	2204      	movs	r2, #4
 80151b6:	2100      	movs	r1, #0
 80151b8:	4618      	mov	r0, r3
 80151ba:	f003 fdcf 	bl	8018d5c <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 80151be:	2300      	movs	r3, #0
 80151c0:	73fb      	strb	r3, [r7, #15]
 80151c2:	e032      	b.n	801522a <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80151c4:	4b1d      	ldr	r3, [pc, #116]	; (801523c <LoRaMacConfirmQueueHandleCb+0xa0>)
 80151c6:	685b      	ldr	r3, [r3, #4]
 80151c8:	781a      	ldrb	r2, [r3, #0]
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80151ce:	4b1b      	ldr	r3, [pc, #108]	; (801523c <LoRaMacConfirmQueueHandleCb+0xa0>)
 80151d0:	685b      	ldr	r3, [r3, #4]
 80151d2:	785a      	ldrb	r2, [r3, #1]
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80151d8:	4b18      	ldr	r3, [pc, #96]	; (801523c <LoRaMacConfirmQueueHandleCb+0xa0>)
 80151da:	685b      	ldr	r3, [r3, #4]
 80151dc:	789b      	ldrb	r3, [r3, #2]
 80151de:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80151e0:	7b7b      	ldrb	r3, [r7, #13]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d005      	beq.n	80151f2 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80151e6:	4b15      	ldr	r3, [pc, #84]	; (801523c <LoRaMacConfirmQueueHandleCb+0xa0>)
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	689b      	ldr	r3, [r3, #8]
 80151ec:	6878      	ldr	r0, [r7, #4]
 80151ee:	4798      	blx	r3
 80151f0:	e00b      	b.n	801520a <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80151f2:	4b12      	ldr	r3, [pc, #72]	; (801523c <LoRaMacConfirmQueueHandleCb+0xa0>)
 80151f4:	685b      	ldr	r3, [r3, #4]
 80151f6:	781b      	ldrb	r3, [r3, #0]
 80151f8:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80151fa:	4b10      	ldr	r3, [pc, #64]	; (801523c <LoRaMacConfirmQueueHandleCb+0xa0>)
 80151fc:	685b      	ldr	r3, [r3, #4]
 80151fe:	785b      	ldrb	r3, [r3, #1]
 8015200:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8015202:	4b0e      	ldr	r3, [pc, #56]	; (801523c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015204:	685b      	ldr	r3, [r3, #4]
 8015206:	78db      	ldrb	r3, [r3, #3]
 8015208:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801520a:	f7ff feff 	bl	801500c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801520e:	7b7b      	ldrb	r3, [r7, #13]
 8015210:	f083 0301 	eor.w	r3, r3, #1
 8015214:	b2db      	uxtb	r3, r3
 8015216:	2b00      	cmp	r3, #0
 8015218:	d004      	beq.n	8015224 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801521a:	f107 0308 	add.w	r3, r7, #8
 801521e:	4618      	mov	r0, r3
 8015220:	f7ff feba 	bl	8014f98 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8015224:	7bfb      	ldrb	r3, [r7, #15]
 8015226:	3301      	adds	r3, #1
 8015228:	73fb      	strb	r3, [r7, #15]
 801522a:	7bfa      	ldrb	r2, [r7, #15]
 801522c:	7bbb      	ldrb	r3, [r7, #14]
 801522e:	429a      	cmp	r2, r3
 8015230:	d3c8      	bcc.n	80151c4 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8015232:	bf00      	nop
 8015234:	bf00      	nop
 8015236:	3710      	adds	r7, #16
 8015238:	46bd      	mov	sp, r7
 801523a:	bd80      	pop	{r7, pc}
 801523c:	200016d8 	.word	0x200016d8

08015240 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8015240:	b480      	push	{r7}
 8015242:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8015244:	4b03      	ldr	r3, [pc, #12]	; (8015254 <LoRaMacConfirmQueueGetCnt+0x14>)
 8015246:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801524a:	4618      	mov	r0, r3
 801524c:	46bd      	mov	sp, r7
 801524e:	bc80      	pop	{r7}
 8015250:	4770      	bx	lr
 8015252:	bf00      	nop
 8015254:	200016d8 	.word	0x200016d8

08015258 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8015258:	b580      	push	{r7, lr}
 801525a:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801525c:	4b06      	ldr	r3, [pc, #24]	; (8015278 <LoRaMacConfirmQueueIsFull+0x20>)
 801525e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015262:	4618      	mov	r0, r3
 8015264:	f7ff fe34 	bl	8014ed0 <IsListFull>
 8015268:	4603      	mov	r3, r0
 801526a:	2b00      	cmp	r3, #0
 801526c:	d001      	beq.n	8015272 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801526e:	2301      	movs	r3, #1
 8015270:	e000      	b.n	8015274 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8015272:	2300      	movs	r3, #0
    }
}
 8015274:	4618      	mov	r0, r3
 8015276:	bd80      	pop	{r7, pc}
 8015278:	200016d8 	.word	0x200016d8

0801527c <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b08e      	sub	sp, #56	; 0x38
 8015280:	af00      	add	r7, sp, #0
 8015282:	60f8      	str	r0, [r7, #12]
 8015284:	607b      	str	r3, [r7, #4]
 8015286:	460b      	mov	r3, r1
 8015288:	817b      	strh	r3, [r7, #10]
 801528a:	4613      	mov	r3, r2
 801528c:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d101      	bne.n	8015298 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015294:	230a      	movs	r3, #10
 8015296:	e086      	b.n	80153a6 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8015298:	2300      	movs	r3, #0
 801529a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 801529e:	2301      	movs	r3, #1
 80152a0:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80152a2:	2300      	movs	r3, #0
 80152a4:	623b      	str	r3, [r7, #32]
 80152a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80152aa:	2200      	movs	r2, #0
 80152ac:	601a      	str	r2, [r3, #0]
 80152ae:	605a      	str	r2, [r3, #4]
 80152b0:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80152b2:	2300      	movs	r3, #0
 80152b4:	613b      	str	r3, [r7, #16]
 80152b6:	f107 0314 	add.w	r3, r7, #20
 80152ba:	2200      	movs	r2, #0
 80152bc:	601a      	str	r2, [r3, #0]
 80152be:	605a      	str	r2, [r3, #4]
 80152c0:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80152c2:	2301      	movs	r3, #1
 80152c4:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80152c6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80152ca:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	b2db      	uxtb	r3, r3
 80152d0:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	0a1b      	lsrs	r3, r3, #8
 80152d6:	b2db      	uxtb	r3, r3
 80152d8:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	0c1b      	lsrs	r3, r3, #16
 80152de:	b2db      	uxtb	r3, r3
 80152e0:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	0e1b      	lsrs	r3, r3, #24
 80152e6:	b2db      	uxtb	r3, r3
 80152e8:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80152ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152ec:	b2db      	uxtb	r3, r3
 80152ee:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80152f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152f2:	0a1b      	lsrs	r3, r3, #8
 80152f4:	b2db      	uxtb	r3, r3
 80152f6:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80152f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152fa:	0c1b      	lsrs	r3, r3, #16
 80152fc:	b2db      	uxtb	r3, r3
 80152fe:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8015300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015302:	0e1b      	lsrs	r3, r3, #24
 8015304:	b2db      	uxtb	r3, r3
 8015306:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8015308:	e048      	b.n	801539c <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801530a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801530c:	b2db      	uxtb	r3, r3
 801530e:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8015310:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015312:	3301      	adds	r3, #1
 8015314:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8015316:	f107 0320 	add.w	r3, r7, #32
 801531a:	7a7a      	ldrb	r2, [r7, #9]
 801531c:	f107 0010 	add.w	r0, r7, #16
 8015320:	2110      	movs	r1, #16
 8015322:	f7f8 ff69 	bl	800e1f8 <SecureElementAesEncrypt>
 8015326:	4603      	mov	r3, r0
 8015328:	2b00      	cmp	r3, #0
 801532a:	d001      	beq.n	8015330 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801532c:	230f      	movs	r3, #15
 801532e:	e03a      	b.n	80153a6 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015330:	2300      	movs	r3, #0
 8015332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015336:	e01e      	b.n	8015376 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8015338:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801533c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015340:	4413      	add	r3, r2
 8015342:	461a      	mov	r2, r3
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	4413      	add	r3, r2
 8015348:	7819      	ldrb	r1, [r3, #0]
 801534a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801534e:	3338      	adds	r3, #56	; 0x38
 8015350:	443b      	add	r3, r7
 8015352:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8015356:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 801535a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801535e:	4403      	add	r3, r0
 8015360:	4618      	mov	r0, r3
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	4403      	add	r3, r0
 8015366:	404a      	eors	r2, r1
 8015368:	b2d2      	uxtb	r2, r2
 801536a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801536c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015370:	3301      	adds	r3, #1
 8015372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015376:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801537a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801537e:	2a10      	cmp	r2, #16
 8015380:	bfa8      	it	ge
 8015382:	2210      	movge	r2, #16
 8015384:	b212      	sxth	r2, r2
 8015386:	4293      	cmp	r3, r2
 8015388:	dbd6      	blt.n	8015338 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 801538a:	897b      	ldrh	r3, [r7, #10]
 801538c:	3b10      	subs	r3, #16
 801538e:	b29b      	uxth	r3, r3
 8015390:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8015392:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015396:	3310      	adds	r3, #16
 8015398:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 801539c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	dcb2      	bgt.n	801530a <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80153a4:	2300      	movs	r3, #0
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3738      	adds	r7, #56	; 0x38
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}

080153ae <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80153ae:	b490      	push	{r4, r7}
 80153b0:	b082      	sub	sp, #8
 80153b2:	af00      	add	r7, sp, #0
 80153b4:	4604      	mov	r4, r0
 80153b6:	4608      	mov	r0, r1
 80153b8:	4611      	mov	r1, r2
 80153ba:	461a      	mov	r2, r3
 80153bc:	4623      	mov	r3, r4
 80153be:	80fb      	strh	r3, [r7, #6]
 80153c0:	4603      	mov	r3, r0
 80153c2:	717b      	strb	r3, [r7, #5]
 80153c4:	460b      	mov	r3, r1
 80153c6:	713b      	strb	r3, [r7, #4]
 80153c8:	4613      	mov	r3, r2
 80153ca:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80153cc:	69bb      	ldr	r3, [r7, #24]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d101      	bne.n	80153d6 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80153d2:	230a      	movs	r3, #10
 80153d4:	e04e      	b.n	8015474 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80153d6:	69bb      	ldr	r3, [r7, #24]
 80153d8:	2249      	movs	r2, #73	; 0x49
 80153da:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 80153dc:	69bb      	ldr	r3, [r7, #24]
 80153de:	3301      	adds	r3, #1
 80153e0:	2200      	movs	r2, #0
 80153e2:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80153e4:	69bb      	ldr	r3, [r7, #24]
 80153e6:	3302      	adds	r3, #2
 80153e8:	2200      	movs	r2, #0
 80153ea:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80153ec:	69bb      	ldr	r3, [r7, #24]
 80153ee:	3303      	adds	r3, #3
 80153f0:	2200      	movs	r2, #0
 80153f2:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80153f4:	69bb      	ldr	r3, [r7, #24]
 80153f6:	3304      	adds	r3, #4
 80153f8:	2200      	movs	r2, #0
 80153fa:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80153fc:	69bb      	ldr	r3, [r7, #24]
 80153fe:	3305      	adds	r3, #5
 8015400:	78fa      	ldrb	r2, [r7, #3]
 8015402:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8015404:	69bb      	ldr	r3, [r7, #24]
 8015406:	3306      	adds	r3, #6
 8015408:	693a      	ldr	r2, [r7, #16]
 801540a:	b2d2      	uxtb	r2, r2
 801540c:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801540e:	693b      	ldr	r3, [r7, #16]
 8015410:	0a1a      	lsrs	r2, r3, #8
 8015412:	69bb      	ldr	r3, [r7, #24]
 8015414:	3307      	adds	r3, #7
 8015416:	b2d2      	uxtb	r2, r2
 8015418:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801541a:	693b      	ldr	r3, [r7, #16]
 801541c:	0c1a      	lsrs	r2, r3, #16
 801541e:	69bb      	ldr	r3, [r7, #24]
 8015420:	3308      	adds	r3, #8
 8015422:	b2d2      	uxtb	r2, r2
 8015424:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8015426:	693b      	ldr	r3, [r7, #16]
 8015428:	0e1a      	lsrs	r2, r3, #24
 801542a:	69bb      	ldr	r3, [r7, #24]
 801542c:	3309      	adds	r3, #9
 801542e:	b2d2      	uxtb	r2, r2
 8015430:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8015432:	69bb      	ldr	r3, [r7, #24]
 8015434:	330a      	adds	r3, #10
 8015436:	697a      	ldr	r2, [r7, #20]
 8015438:	b2d2      	uxtb	r2, r2
 801543a:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 801543c:	697b      	ldr	r3, [r7, #20]
 801543e:	0a1a      	lsrs	r2, r3, #8
 8015440:	69bb      	ldr	r3, [r7, #24]
 8015442:	330b      	adds	r3, #11
 8015444:	b2d2      	uxtb	r2, r2
 8015446:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8015448:	697b      	ldr	r3, [r7, #20]
 801544a:	0c1a      	lsrs	r2, r3, #16
 801544c:	69bb      	ldr	r3, [r7, #24]
 801544e:	330c      	adds	r3, #12
 8015450:	b2d2      	uxtb	r2, r2
 8015452:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8015454:	697b      	ldr	r3, [r7, #20]
 8015456:	0e1a      	lsrs	r2, r3, #24
 8015458:	69bb      	ldr	r3, [r7, #24]
 801545a:	330d      	adds	r3, #13
 801545c:	b2d2      	uxtb	r2, r2
 801545e:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8015460:	69bb      	ldr	r3, [r7, #24]
 8015462:	330e      	adds	r3, #14
 8015464:	2200      	movs	r2, #0
 8015466:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8015468:	69bb      	ldr	r3, [r7, #24]
 801546a:	330f      	adds	r3, #15
 801546c:	88fa      	ldrh	r2, [r7, #6]
 801546e:	b2d2      	uxtb	r2, r2
 8015470:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015472:	2300      	movs	r3, #0
}
 8015474:	4618      	mov	r0, r3
 8015476:	3708      	adds	r7, #8
 8015478:	46bd      	mov	sp, r7
 801547a:	bc90      	pop	{r4, r7}
 801547c:	4770      	bx	lr

0801547e <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801547e:	b590      	push	{r4, r7, lr}
 8015480:	b08b      	sub	sp, #44	; 0x2c
 8015482:	af04      	add	r7, sp, #16
 8015484:	6078      	str	r0, [r7, #4]
 8015486:	4608      	mov	r0, r1
 8015488:	4611      	mov	r1, r2
 801548a:	461a      	mov	r2, r3
 801548c:	4603      	mov	r3, r0
 801548e:	807b      	strh	r3, [r7, #2]
 8015490:	460b      	mov	r3, r1
 8015492:	707b      	strb	r3, [r7, #1]
 8015494:	4613      	mov	r3, r2
 8015496:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d002      	beq.n	80154a4 <ComputeCmacB0+0x26>
 801549e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d101      	bne.n	80154a8 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80154a4:	230a      	movs	r3, #10
 80154a6:	e024      	b.n	80154f2 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80154a8:	887b      	ldrh	r3, [r7, #2]
 80154aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80154ae:	d901      	bls.n	80154b4 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80154b0:	230e      	movs	r3, #14
 80154b2:	e01e      	b.n	80154f2 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80154b4:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80154b8:	783a      	ldrb	r2, [r7, #0]
 80154ba:	7879      	ldrb	r1, [r7, #1]
 80154bc:	8878      	ldrh	r0, [r7, #2]
 80154be:	f107 0308 	add.w	r3, r7, #8
 80154c2:	9302      	str	r3, [sp, #8]
 80154c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154c6:	9301      	str	r3, [sp, #4]
 80154c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154ca:	9300      	str	r3, [sp, #0]
 80154cc:	4623      	mov	r3, r4
 80154ce:	f7ff ff6e 	bl	80153ae <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80154d2:	887a      	ldrh	r2, [r7, #2]
 80154d4:	7879      	ldrb	r1, [r7, #1]
 80154d6:	f107 0008 	add.w	r0, r7, #8
 80154da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154dc:	9300      	str	r3, [sp, #0]
 80154de:	460b      	mov	r3, r1
 80154e0:	6879      	ldr	r1, [r7, #4]
 80154e2:	f7f8 fe43 	bl	800e16c <SecureElementComputeAesCmac>
 80154e6:	4603      	mov	r3, r0
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d001      	beq.n	80154f0 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80154ec:	230f      	movs	r3, #15
 80154ee:	e000      	b.n	80154f2 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80154f0:	2300      	movs	r3, #0
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	371c      	adds	r7, #28
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd90      	pop	{r4, r7, pc}

080154fa <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80154fa:	b590      	push	{r4, r7, lr}
 80154fc:	b0cd      	sub	sp, #308	; 0x134
 80154fe:	af04      	add	r7, sp, #16
 8015500:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8015504:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8015508:	6020      	str	r0, [r4, #0]
 801550a:	460c      	mov	r4, r1
 801550c:	4610      	mov	r0, r2
 801550e:	4619      	mov	r1, r3
 8015510:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015514:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8015518:	4622      	mov	r2, r4
 801551a:	801a      	strh	r2, [r3, #0]
 801551c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015520:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8015524:	4602      	mov	r2, r0
 8015526:	701a      	strb	r2, [r3, #0]
 8015528:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801552c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8015530:	460a      	mov	r2, r1
 8015532:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8015534:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015538:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d101      	bne.n	8015546 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015542:	230a      	movs	r3, #10
 8015544:	e063      	b.n	801560e <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015546:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801554a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801554e:	881b      	ldrh	r3, [r3, #0]
 8015550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015554:	d901      	bls.n	801555a <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015556:	230e      	movs	r3, #14
 8015558:	e059      	b.n	801560e <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801555a:	f107 030c 	add.w	r3, r7, #12
 801555e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8015562:	2100      	movs	r1, #0
 8015564:	4618      	mov	r0, r3
 8015566:	f003 fbf9 	bl	8018d5c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801556a:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 801556e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015572:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8015576:	781a      	ldrb	r2, [r3, #0]
 8015578:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801557c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8015580:	7819      	ldrb	r1, [r3, #0]
 8015582:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015586:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801558a:	8818      	ldrh	r0, [r3, #0]
 801558c:	f107 030c 	add.w	r3, r7, #12
 8015590:	9302      	str	r3, [sp, #8]
 8015592:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015596:	9301      	str	r3, [sp, #4]
 8015598:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801559c:	9300      	str	r3, [sp, #0]
 801559e:	4623      	mov	r3, r4
 80155a0:	f7ff ff05 	bl	80153ae <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80155a4:	f107 030c 	add.w	r3, r7, #12
 80155a8:	3310      	adds	r3, #16
 80155aa:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80155ae:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 80155b2:	8812      	ldrh	r2, [r2, #0]
 80155b4:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80155b8:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80155bc:	6809      	ldr	r1, [r1, #0]
 80155be:	4618      	mov	r0, r3
 80155c0:	f003 fb91 	bl	8018ce6 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80155c4:	2306      	movs	r3, #6
 80155c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80155ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80155ce:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80155d2:	881b      	ldrh	r3, [r3, #0]
 80155d4:	3310      	adds	r3, #16
 80155d6:	4619      	mov	r1, r3
 80155d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80155dc:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80155e0:	781b      	ldrb	r3, [r3, #0]
 80155e2:	f107 000c 	add.w	r0, r7, #12
 80155e6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80155ea:	f7f8 fdd9 	bl	800e1a0 <SecureElementVerifyAesCmac>
 80155ee:	4603      	mov	r3, r0
 80155f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80155f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d101      	bne.n	8015600 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80155fc:	2300      	movs	r3, #0
 80155fe:	e006      	b.n	801560e <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8015600:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8015604:	2b01      	cmp	r3, #1
 8015606:	d101      	bne.n	801560c <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8015608:	2301      	movs	r3, #1
 801560a:	e000      	b.n	801560e <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801560c:	230f      	movs	r3, #15
}
 801560e:	4618      	mov	r0, r3
 8015610:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8015614:	46bd      	mov	sp, r7
 8015616:	bd90      	pop	{r4, r7, pc}

08015618 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8015618:	b480      	push	{r7}
 801561a:	b085      	sub	sp, #20
 801561c:	af00      	add	r7, sp, #0
 801561e:	4603      	mov	r3, r0
 8015620:	6039      	str	r1, [r7, #0]
 8015622:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015624:	2300      	movs	r3, #0
 8015626:	73fb      	strb	r3, [r7, #15]
 8015628:	e011      	b.n	801564e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801562a:	7bfb      	ldrb	r3, [r7, #15]
 801562c:	4a0c      	ldr	r2, [pc, #48]	; (8015660 <GetKeyAddrItem+0x48>)
 801562e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8015632:	79fa      	ldrb	r2, [r7, #7]
 8015634:	429a      	cmp	r2, r3
 8015636:	d107      	bne.n	8015648 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8015638:	7bfb      	ldrb	r3, [r7, #15]
 801563a:	009b      	lsls	r3, r3, #2
 801563c:	4a08      	ldr	r2, [pc, #32]	; (8015660 <GetKeyAddrItem+0x48>)
 801563e:	441a      	add	r2, r3
 8015640:	683b      	ldr	r3, [r7, #0]
 8015642:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8015644:	2300      	movs	r3, #0
 8015646:	e006      	b.n	8015656 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015648:	7bfb      	ldrb	r3, [r7, #15]
 801564a:	3301      	adds	r3, #1
 801564c:	73fb      	strb	r3, [r7, #15]
 801564e:	7bfb      	ldrb	r3, [r7, #15]
 8015650:	2b01      	cmp	r3, #1
 8015652:	d9ea      	bls.n	801562a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8015654:	230c      	movs	r3, #12
}
 8015656:	4618      	mov	r0, r3
 8015658:	3714      	adds	r7, #20
 801565a:	46bd      	mov	sp, r7
 801565c:	bc80      	pop	{r7}
 801565e:	4770      	bx	lr
 8015660:	20000128 	.word	0x20000128

08015664 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b088      	sub	sp, #32
 8015668:	af00      	add	r7, sp, #0
 801566a:	60b9      	str	r1, [r7, #8]
 801566c:	607a      	str	r2, [r7, #4]
 801566e:	461a      	mov	r2, r3
 8015670:	4603      	mov	r3, r0
 8015672:	73fb      	strb	r3, [r7, #15]
 8015674:	4613      	mov	r3, r2
 8015676:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8015678:	2300      	movs	r3, #0
 801567a:	613b      	str	r3, [r7, #16]
 801567c:	f107 0314 	add.w	r3, r7, #20
 8015680:	2200      	movs	r2, #0
 8015682:	601a      	str	r2, [r3, #0]
 8015684:	605a      	str	r2, [r3, #4]
 8015686:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8015688:	7bfb      	ldrb	r3, [r7, #15]
 801568a:	2b08      	cmp	r3, #8
 801568c:	d002      	beq.n	8015694 <DeriveSessionKey10x+0x30>
 801568e:	2b09      	cmp	r3, #9
 8015690:	d003      	beq.n	801569a <DeriveSessionKey10x+0x36>
 8015692:	e005      	b.n	80156a0 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8015694:	2301      	movs	r3, #1
 8015696:	743b      	strb	r3, [r7, #16]
            break;
 8015698:	e004      	b.n	80156a4 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 801569a:	2302      	movs	r3, #2
 801569c:	743b      	strb	r3, [r7, #16]
            break;
 801569e:	e001      	b.n	80156a4 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80156a0:	230b      	movs	r3, #11
 80156a2:	e02a      	b.n	80156fa <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80156a4:	68bb      	ldr	r3, [r7, #8]
 80156a6:	b2db      	uxtb	r3, r3
 80156a8:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80156aa:	68bb      	ldr	r3, [r7, #8]
 80156ac:	0a1b      	lsrs	r3, r3, #8
 80156ae:	b2db      	uxtb	r3, r3
 80156b0:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80156b2:	68bb      	ldr	r3, [r7, #8]
 80156b4:	0c1b      	lsrs	r3, r3, #16
 80156b6:	b2db      	uxtb	r3, r3
 80156b8:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	b2db      	uxtb	r3, r3
 80156be:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	0a1b      	lsrs	r3, r3, #8
 80156c4:	b2db      	uxtb	r3, r3
 80156c6:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	0c1b      	lsrs	r3, r3, #16
 80156cc:	b2db      	uxtb	r3, r3
 80156ce:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80156d0:	89bb      	ldrh	r3, [r7, #12]
 80156d2:	b2db      	uxtb	r3, r3
 80156d4:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80156d6:	89bb      	ldrh	r3, [r7, #12]
 80156d8:	0a1b      	lsrs	r3, r3, #8
 80156da:	b29b      	uxth	r3, r3
 80156dc:	b2db      	uxtb	r3, r3
 80156de:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80156e0:	7bfa      	ldrb	r2, [r7, #15]
 80156e2:	f107 0310 	add.w	r3, r7, #16
 80156e6:	2101      	movs	r1, #1
 80156e8:	4618      	mov	r0, r3
 80156ea:	f7f8 fe05 	bl	800e2f8 <SecureElementDeriveAndStoreKey>
 80156ee:	4603      	mov	r3, r0
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d001      	beq.n	80156f8 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80156f4:	230f      	movs	r3, #15
 80156f6:	e000      	b.n	80156fa <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80156f8:	2300      	movs	r3, #0
}
 80156fa:	4618      	mov	r0, r3
 80156fc:	3720      	adds	r7, #32
 80156fe:	46bd      	mov	sp, r7
 8015700:	bd80      	pop	{r7, pc}
	...

08015704 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8015704:	b480      	push	{r7}
 8015706:	b083      	sub	sp, #12
 8015708:	af00      	add	r7, sp, #0
 801570a:	4603      	mov	r3, r0
 801570c:	6039      	str	r1, [r7, #0]
 801570e:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8015710:	683b      	ldr	r3, [r7, #0]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d101      	bne.n	801571a <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015716:	230a      	movs	r3, #10
 8015718:	e029      	b.n	801576e <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 801571a:	79fb      	ldrb	r3, [r7, #7]
 801571c:	3b01      	subs	r3, #1
 801571e:	2b03      	cmp	r3, #3
 8015720:	d822      	bhi.n	8015768 <GetLastFcntDown+0x64>
 8015722:	a201      	add	r2, pc, #4	; (adr r2, 8015728 <GetLastFcntDown+0x24>)
 8015724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015728:	08015739 	.word	0x08015739
 801572c:	08015745 	.word	0x08015745
 8015730:	08015751 	.word	0x08015751
 8015734:	0801575d 	.word	0x0801575d
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8015738:	4b0f      	ldr	r3, [pc, #60]	; (8015778 <GetLastFcntDown+0x74>)
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	691a      	ldr	r2, [r3, #16]
 801573e:	683b      	ldr	r3, [r7, #0]
 8015740:	601a      	str	r2, [r3, #0]
            break;
 8015742:	e013      	b.n	801576c <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8015744:	4b0c      	ldr	r3, [pc, #48]	; (8015778 <GetLastFcntDown+0x74>)
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	695a      	ldr	r2, [r3, #20]
 801574a:	683b      	ldr	r3, [r7, #0]
 801574c:	601a      	str	r2, [r3, #0]
            break;
 801574e:	e00d      	b.n	801576c <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8015750:	4b09      	ldr	r3, [pc, #36]	; (8015778 <GetLastFcntDown+0x74>)
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	699a      	ldr	r2, [r3, #24]
 8015756:	683b      	ldr	r3, [r7, #0]
 8015758:	601a      	str	r2, [r3, #0]
            break;
 801575a:	e007      	b.n	801576c <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 801575c:	4b06      	ldr	r3, [pc, #24]	; (8015778 <GetLastFcntDown+0x74>)
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	69da      	ldr	r2, [r3, #28]
 8015762:	683b      	ldr	r3, [r7, #0]
 8015764:	601a      	str	r2, [r3, #0]
            break;
 8015766:	e001      	b.n	801576c <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8015768:	2305      	movs	r3, #5
 801576a:	e000      	b.n	801576e <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801576c:	2300      	movs	r3, #0
}
 801576e:	4618      	mov	r0, r3
 8015770:	370c      	adds	r7, #12
 8015772:	46bd      	mov	sp, r7
 8015774:	bc80      	pop	{r7}
 8015776:	4770      	bx	lr
 8015778:	200016fc 	.word	0x200016fc

0801577c <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b084      	sub	sp, #16
 8015780:	af00      	add	r7, sp, #0
 8015782:	4603      	mov	r3, r0
 8015784:	6039      	str	r1, [r7, #0]
 8015786:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8015788:	2300      	movs	r3, #0
 801578a:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 801578c:	f107 020c 	add.w	r2, r7, #12
 8015790:	79fb      	ldrb	r3, [r7, #7]
 8015792:	4611      	mov	r1, r2
 8015794:	4618      	mov	r0, r3
 8015796:	f7ff ffb5 	bl	8015704 <GetLastFcntDown>
 801579a:	4603      	mov	r3, r0
 801579c:	2b00      	cmp	r3, #0
 801579e:	d001      	beq.n	80157a4 <CheckFCntDown+0x28>
    {
        return false;
 80157a0:	2300      	movs	r3, #0
 80157a2:	e00a      	b.n	80157ba <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	683a      	ldr	r2, [r7, #0]
 80157a8:	429a      	cmp	r2, r3
 80157aa:	d803      	bhi.n	80157b4 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 80157ac:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80157ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157b2:	d101      	bne.n	80157b8 <CheckFCntDown+0x3c>
    {
        return true;
 80157b4:	2301      	movs	r3, #1
 80157b6:	e000      	b.n	80157ba <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80157b8:	2300      	movs	r3, #0
    }
}
 80157ba:	4618      	mov	r0, r3
 80157bc:	3710      	adds	r7, #16
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
	...

080157c4 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80157c4:	b480      	push	{r7}
 80157c6:	b083      	sub	sp, #12
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	4603      	mov	r3, r0
 80157cc:	6039      	str	r1, [r7, #0]
 80157ce:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80157d0:	79fb      	ldrb	r3, [r7, #7]
 80157d2:	3b01      	subs	r3, #1
 80157d4:	2b03      	cmp	r3, #3
 80157d6:	d82b      	bhi.n	8015830 <UpdateFCntDown+0x6c>
 80157d8:	a201      	add	r2, pc, #4	; (adr r2, 80157e0 <UpdateFCntDown+0x1c>)
 80157da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157de:	bf00      	nop
 80157e0:	080157f1 	.word	0x080157f1
 80157e4:	08015803 	.word	0x08015803
 80157e8:	08015815 	.word	0x08015815
 80157ec:	08015827 	.word	0x08015827
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80157f0:	4b12      	ldr	r3, [pc, #72]	; (801583c <UpdateFCntDown+0x78>)
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	683a      	ldr	r2, [r7, #0]
 80157f6:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 80157f8:	4b10      	ldr	r3, [pc, #64]	; (801583c <UpdateFCntDown+0x78>)
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	683a      	ldr	r2, [r7, #0]
 80157fe:	621a      	str	r2, [r3, #32]
            break;
 8015800:	e017      	b.n	8015832 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8015802:	4b0e      	ldr	r3, [pc, #56]	; (801583c <UpdateFCntDown+0x78>)
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	683a      	ldr	r2, [r7, #0]
 8015808:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 801580a:	4b0c      	ldr	r3, [pc, #48]	; (801583c <UpdateFCntDown+0x78>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	683a      	ldr	r2, [r7, #0]
 8015810:	621a      	str	r2, [r3, #32]
            break;
 8015812:	e00e      	b.n	8015832 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8015814:	4b09      	ldr	r3, [pc, #36]	; (801583c <UpdateFCntDown+0x78>)
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	683a      	ldr	r2, [r7, #0]
 801581a:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 801581c:	4b07      	ldr	r3, [pc, #28]	; (801583c <UpdateFCntDown+0x78>)
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	683a      	ldr	r2, [r7, #0]
 8015822:	621a      	str	r2, [r3, #32]
            break;
 8015824:	e005      	b.n	8015832 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8015826:	4b05      	ldr	r3, [pc, #20]	; (801583c <UpdateFCntDown+0x78>)
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	683a      	ldr	r2, [r7, #0]
 801582c:	61da      	str	r2, [r3, #28]
            break;
 801582e:	e000      	b.n	8015832 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8015830:	bf00      	nop
    }
}
 8015832:	bf00      	nop
 8015834:	370c      	adds	r7, #12
 8015836:	46bd      	mov	sp, r7
 8015838:	bc80      	pop	{r7}
 801583a:	4770      	bx	lr
 801583c:	200016fc 	.word	0x200016fc

08015840 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8015840:	b480      	push	{r7}
 8015842:	b083      	sub	sp, #12
 8015844:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8015846:	4b18      	ldr	r3, [pc, #96]	; (80158a8 <ResetFCnts+0x68>)
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	2200      	movs	r2, #0
 801584c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801584e:	4b16      	ldr	r3, [pc, #88]	; (80158a8 <ResetFCnts+0x68>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	f04f 32ff 	mov.w	r2, #4294967295
 8015856:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015858:	4b13      	ldr	r3, [pc, #76]	; (80158a8 <ResetFCnts+0x68>)
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	f04f 32ff 	mov.w	r2, #4294967295
 8015860:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015862:	4b11      	ldr	r3, [pc, #68]	; (80158a8 <ResetFCnts+0x68>)
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	f04f 32ff 	mov.w	r2, #4294967295
 801586a:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801586c:	4b0e      	ldr	r3, [pc, #56]	; (80158a8 <ResetFCnts+0x68>)
 801586e:	681a      	ldr	r2, [r3, #0]
 8015870:	4b0d      	ldr	r3, [pc, #52]	; (80158a8 <ResetFCnts+0x68>)
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	6992      	ldr	r2, [r2, #24]
 8015876:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015878:	2300      	movs	r3, #0
 801587a:	607b      	str	r3, [r7, #4]
 801587c:	e00b      	b.n	8015896 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 801587e:	4b0a      	ldr	r3, [pc, #40]	; (80158a8 <ResetFCnts+0x68>)
 8015880:	681a      	ldr	r2, [r3, #0]
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	3306      	adds	r3, #6
 8015886:	009b      	lsls	r3, r3, #2
 8015888:	4413      	add	r3, r2
 801588a:	f04f 32ff 	mov.w	r2, #4294967295
 801588e:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	3301      	adds	r3, #1
 8015894:	607b      	str	r3, [r7, #4]
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	2b00      	cmp	r3, #0
 801589a:	ddf0      	ble.n	801587e <ResetFCnts+0x3e>
    }
}
 801589c:	bf00      	nop
 801589e:	bf00      	nop
 80158a0:	370c      	adds	r7, #12
 80158a2:	46bd      	mov	sp, r7
 80158a4:	bc80      	pop	{r7}
 80158a6:	4770      	bx	lr
 80158a8:	200016fc 	.word	0x200016fc

080158ac <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 80158ac:	b480      	push	{r7}
 80158ae:	b083      	sub	sp, #12
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 80158b4:	4b06      	ldr	r3, [pc, #24]	; (80158d0 <IsJoinNonce10xOk+0x24>)
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	689b      	ldr	r3, [r3, #8]
 80158ba:	687a      	ldr	r2, [r7, #4]
 80158bc:	429a      	cmp	r2, r3
 80158be:	bf8c      	ite	hi
 80158c0:	2301      	movhi	r3, #1
 80158c2:	2300      	movls	r3, #0
 80158c4:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 80158c6:	4618      	mov	r0, r3
 80158c8:	370c      	adds	r7, #12
 80158ca:	46bd      	mov	sp, r7
 80158cc:	bc80      	pop	{r7}
 80158ce:	4770      	bx	lr
 80158d0:	200016fc 	.word	0x200016fc

080158d4 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b082      	sub	sp, #8
 80158d8:	af00      	add	r7, sp, #0
 80158da:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d101      	bne.n	80158e6 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80158e2:	2309      	movs	r3, #9
 80158e4:	e01c      	b.n	8015920 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80158e6:	4a10      	ldr	r2, [pc, #64]	; (8015928 <LoRaMacCryptoInit+0x54>)
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80158ec:	4b0e      	ldr	r3, [pc, #56]	; (8015928 <LoRaMacCryptoInit+0x54>)
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	2228      	movs	r2, #40	; 0x28
 80158f2:	2100      	movs	r1, #0
 80158f4:	4618      	mov	r0, r3
 80158f6:	f003 fa31 	bl	8018d5c <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80158fa:	4b0b      	ldr	r3, [pc, #44]	; (8015928 <LoRaMacCryptoInit+0x54>)
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	2201      	movs	r2, #1
 8015900:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8015902:	4b09      	ldr	r3, [pc, #36]	; (8015928 <LoRaMacCryptoInit+0x54>)
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	2201      	movs	r2, #1
 8015908:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801590a:	4b07      	ldr	r3, [pc, #28]	; (8015928 <LoRaMacCryptoInit+0x54>)
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	2201      	movs	r2, #1
 8015910:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8015912:	4b05      	ldr	r3, [pc, #20]	; (8015928 <LoRaMacCryptoInit+0x54>)
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	2200      	movs	r2, #0
 8015918:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801591a:	f7ff ff91 	bl	8015840 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801591e:	2300      	movs	r3, #0
}
 8015920:	4618      	mov	r0, r3
 8015922:	3708      	adds	r7, #8
 8015924:	46bd      	mov	sp, r7
 8015926:	bd80      	pop	{r7, pc}
 8015928:	200016fc 	.word	0x200016fc

0801592c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 801592c:	b480      	push	{r7}
 801592e:	b083      	sub	sp, #12
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8015934:	4b04      	ldr	r3, [pc, #16]	; (8015948 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	687a      	ldr	r2, [r7, #4]
 801593a:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 801593c:	2300      	movs	r3, #0
}
 801593e:	4618      	mov	r0, r3
 8015940:	370c      	adds	r7, #12
 8015942:	46bd      	mov	sp, r7
 8015944:	bc80      	pop	{r7}
 8015946:	4770      	bx	lr
 8015948:	200016fc 	.word	0x200016fc

0801594c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 801594c:	b480      	push	{r7}
 801594e:	b083      	sub	sp, #12
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d101      	bne.n	801595e <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801595a:	230a      	movs	r3, #10
 801595c:	e006      	b.n	801596c <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801595e:	4b06      	ldr	r3, [pc, #24]	; (8015978 <LoRaMacCryptoGetFCntUp+0x2c>)
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	68db      	ldr	r3, [r3, #12]
 8015964:	1c5a      	adds	r2, r3, #1
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801596a:	2300      	movs	r3, #0
}
 801596c:	4618      	mov	r0, r3
 801596e:	370c      	adds	r7, #12
 8015970:	46bd      	mov	sp, r7
 8015972:	bc80      	pop	{r7}
 8015974:	4770      	bx	lr
 8015976:	bf00      	nop
 8015978:	200016fc 	.word	0x200016fc

0801597c <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 801597c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015980:	b08a      	sub	sp, #40	; 0x28
 8015982:	af00      	add	r7, sp, #0
 8015984:	613a      	str	r2, [r7, #16]
 8015986:	60fb      	str	r3, [r7, #12]
 8015988:	4603      	mov	r3, r0
 801598a:	75fb      	strb	r3, [r7, #23]
 801598c:	460b      	mov	r3, r1
 801598e:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8015990:	2300      	movs	r3, #0
 8015992:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8015994:	2300      	movs	r3, #0
 8015996:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8015998:	2313      	movs	r3, #19
 801599a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d101      	bne.n	80159a8 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80159a4:	230a      	movs	r3, #10
 80159a6:	e057      	b.n	8015a58 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80159a8:	f107 021c 	add.w	r2, r7, #28
 80159ac:	7dfb      	ldrb	r3, [r7, #23]
 80159ae:	4611      	mov	r1, r2
 80159b0:	4618      	mov	r0, r3
 80159b2:	f7ff fea7 	bl	8015704 <GetLastFcntDown>
 80159b6:	4603      	mov	r3, r0
 80159b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80159bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d002      	beq.n	80159ca <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 80159c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80159c8:	e046      	b.n	8015a58 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 80159ca:	69fb      	ldr	r3, [r7, #28]
 80159cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159d0:	d103      	bne.n	80159da <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	693a      	ldr	r2, [r7, #16]
 80159d6:	601a      	str	r2, [r3, #0]
 80159d8:	e01e      	b.n	8015a18 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80159da:	69fb      	ldr	r3, [r7, #28]
 80159dc:	b29b      	uxth	r3, r3
 80159de:	693a      	ldr	r2, [r7, #16]
 80159e0:	1ad3      	subs	r3, r2, r3
 80159e2:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 80159e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	dd05      	ble.n	80159f6 <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80159ea:	69fa      	ldr	r2, [r7, #28]
 80159ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159ee:	441a      	add	r2, r3
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	601a      	str	r2, [r3, #0]
 80159f4:	e010      	b.n	8015a18 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 80159f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d104      	bne.n	8015a06 <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80159fc:	69fa      	ldr	r2, [r7, #28]
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8015a02:	2307      	movs	r3, #7
 8015a04:	e028      	b.n	8015a58 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8015a06:	69fb      	ldr	r3, [r7, #28]
 8015a08:	0c1b      	lsrs	r3, r3, #16
 8015a0a:	041b      	lsls	r3, r3, #16
 8015a0c:	693a      	ldr	r2, [r7, #16]
 8015a0e:	4413      	add	r3, r2
 8015a10:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8015a18:	4b12      	ldr	r3, [pc, #72]	; (8015a64 <LoRaMacCryptoGetFCntDown+0xe8>)
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	789b      	ldrb	r3, [r3, #2]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d119      	bne.n	8015a56 <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	2200      	movs	r2, #0
 8015a28:	603b      	str	r3, [r7, #0]
 8015a2a:	607a      	str	r2, [r7, #4]
 8015a2c:	69fb      	ldr	r3, [r7, #28]
 8015a2e:	2200      	movs	r2, #0
 8015a30:	469a      	mov	sl, r3
 8015a32:	4693      	mov	fp, r2
 8015a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015a38:	4611      	mov	r1, r2
 8015a3a:	ebb1 040a 	subs.w	r4, r1, sl
 8015a3e:	eb63 050b 	sbc.w	r5, r3, fp
 8015a42:	8abb      	ldrh	r3, [r7, #20]
 8015a44:	2200      	movs	r2, #0
 8015a46:	4698      	mov	r8, r3
 8015a48:	4691      	mov	r9, r2
 8015a4a:	4544      	cmp	r4, r8
 8015a4c:	eb75 0309 	sbcs.w	r3, r5, r9
 8015a50:	db01      	blt.n	8015a56 <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8015a52:	2308      	movs	r3, #8
 8015a54:	e000      	b.n	8015a58 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015a56:	2300      	movs	r3, #0
}
 8015a58:	4618      	mov	r0, r3
 8015a5a:	3728      	adds	r7, #40	; 0x28
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015a62:	bf00      	nop
 8015a64:	200016fc 	.word	0x200016fc

08015a68 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8015a68:	b480      	push	{r7}
 8015a6a:	b085      	sub	sp, #20
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d101      	bne.n	8015a7a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015a76:	230a      	movs	r3, #10
 8015a78:	e019      	b.n	8015aae <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	60fb      	str	r3, [r7, #12]
 8015a7e:	e012      	b.n	8015aa6 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8015a80:	4b0d      	ldr	r3, [pc, #52]	; (8015ab8 <LoRaMacCryptoSetMulticastReference+0x50>)
 8015a82:	6819      	ldr	r1, [r3, #0]
 8015a84:	68fa      	ldr	r2, [r7, #12]
 8015a86:	4613      	mov	r3, r2
 8015a88:	005b      	lsls	r3, r3, #1
 8015a8a:	4413      	add	r3, r2
 8015a8c:	011b      	lsls	r3, r3, #4
 8015a8e:	461a      	mov	r2, r3
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	4413      	add	r3, r2
 8015a94:	68fa      	ldr	r2, [r7, #12]
 8015a96:	3206      	adds	r2, #6
 8015a98:	0092      	lsls	r2, r2, #2
 8015a9a:	440a      	add	r2, r1
 8015a9c:	3204      	adds	r2, #4
 8015a9e:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	3301      	adds	r3, #1
 8015aa4:	60fb      	str	r3, [r7, #12]
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	dde9      	ble.n	8015a80 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015aac:	2300      	movs	r3, #0
}
 8015aae:	4618      	mov	r0, r3
 8015ab0:	3714      	adds	r7, #20
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bc80      	pop	{r7}
 8015ab6:	4770      	bx	lr
 8015ab8:	200016fc 	.word	0x200016fc

08015abc <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b082      	sub	sp, #8
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	6039      	str	r1, [r7, #0]
 8015ac6:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8015ac8:	79fb      	ldrb	r3, [r7, #7]
 8015aca:	6839      	ldr	r1, [r7, #0]
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7f8 faef 	bl	800e0b0 <SecureElementSetKey>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d001      	beq.n	8015adc <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015ad8:	230f      	movs	r3, #15
 8015ada:	e021      	b.n	8015b20 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8015adc:	79fb      	ldrb	r3, [r7, #7]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d11d      	bne.n	8015b1e <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015ae2:	4b11      	ldr	r3, [pc, #68]	; (8015b28 <LoRaMacCryptoSetKey+0x6c>)
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	789b      	ldrb	r3, [r3, #2]
 8015ae8:	210b      	movs	r1, #11
 8015aea:	4618      	mov	r0, r3
 8015aec:	f000 fa5e 	bl	8015fac <LoRaMacCryptoDeriveLifeTimeKey>
 8015af0:	4603      	mov	r3, r0
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d001      	beq.n	8015afa <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015af6:	230f      	movs	r3, #15
 8015af8:	e012      	b.n	8015b20 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015afa:	210c      	movs	r1, #12
 8015afc:	2000      	movs	r0, #0
 8015afe:	f000 fa55 	bl	8015fac <LoRaMacCryptoDeriveLifeTimeKey>
 8015b02:	4603      	mov	r3, r0
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d001      	beq.n	8015b0c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015b08:	230f      	movs	r3, #15
 8015b0a:	e009      	b.n	8015b20 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015b0c:	210a      	movs	r1, #10
 8015b0e:	2000      	movs	r0, #0
 8015b10:	f000 fa4c 	bl	8015fac <LoRaMacCryptoDeriveLifeTimeKey>
 8015b14:	4603      	mov	r3, r0
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d001      	beq.n	8015b1e <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015b1a:	230f      	movs	r3, #15
 8015b1c:	e000      	b.n	8015b20 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015b1e:	2300      	movs	r3, #0
}
 8015b20:	4618      	mov	r0, r3
 8015b22:	3708      	adds	r7, #8
 8015b24:	46bd      	mov	sp, r7
 8015b26:	bd80      	pop	{r7, pc}
 8015b28:	200016fc 	.word	0x200016fc

08015b2c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b086      	sub	sp, #24
 8015b30:	af02      	add	r7, sp, #8
 8015b32:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d101      	bne.n	8015b3e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015b3a:	230a      	movs	r3, #10
 8015b3c:	e033      	b.n	8015ba6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8015b3e:	2301      	movs	r3, #1
 8015b40:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8015b42:	2300      	movs	r3, #0
 8015b44:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8015b46:	f107 0308 	add.w	r3, r7, #8
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f7f8 fc8a 	bl	800e464 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8015b50:	68ba      	ldr	r2, [r7, #8]
 8015b52:	4b17      	ldr	r3, [pc, #92]	; (8015bb0 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	b292      	uxth	r2, r2
 8015b58:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8015b5a:	4b15      	ldr	r3, [pc, #84]	; (8015bb0 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	889a      	ldrh	r2, [r3, #4]
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015b64:	6878      	ldr	r0, [r7, #4]
 8015b66:	f000 fc1b 	bl	80163a0 <LoRaMacSerializerJoinRequest>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d001      	beq.n	8015b74 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015b70:	2311      	movs	r3, #17
 8015b72:	e018      	b.n	8015ba6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	6819      	ldr	r1, [r3, #0]
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	3318      	adds	r3, #24
 8015b7c:	7bfa      	ldrb	r2, [r7, #15]
 8015b7e:	9300      	str	r3, [sp, #0]
 8015b80:	4613      	mov	r3, r2
 8015b82:	2213      	movs	r2, #19
 8015b84:	2000      	movs	r0, #0
 8015b86:	f7f8 faf1 	bl	800e16c <SecureElementComputeAesCmac>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d001      	beq.n	8015b94 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015b90:	230f      	movs	r3, #15
 8015b92:	e008      	b.n	8015ba6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015b94:	6878      	ldr	r0, [r7, #4]
 8015b96:	f000 fc03 	bl	80163a0 <LoRaMacSerializerJoinRequest>
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d001      	beq.n	8015ba4 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015ba0:	2311      	movs	r3, #17
 8015ba2:	e000      	b.n	8015ba6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015ba4:	2300      	movs	r3, #0
}
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	3710      	adds	r7, #16
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd80      	pop	{r7, pc}
 8015bae:	bf00      	nop
 8015bb0:	200016fc 	.word	0x200016fc

08015bb4 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8015bb4:	b590      	push	{r4, r7, lr}
 8015bb6:	b097      	sub	sp, #92	; 0x5c
 8015bb8:	af04      	add	r7, sp, #16
 8015bba:	4603      	mov	r3, r0
 8015bbc:	60b9      	str	r1, [r7, #8]
 8015bbe:	607a      	str	r2, [r7, #4]
 8015bc0:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d002      	beq.n	8015bce <LoRaMacCryptoHandleJoinAccept+0x1a>
 8015bc8:	68bb      	ldr	r3, [r7, #8]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d101      	bne.n	8015bd2 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015bce:	230a      	movs	r3, #10
 8015bd0:	e0d3      	b.n	8015d7a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015bd2:	2313      	movs	r3, #19
 8015bd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8015bd8:	2300      	movs	r3, #0
 8015bda:	617b      	str	r3, [r7, #20]
 8015bdc:	f107 0318 	add.w	r3, r7, #24
 8015be0:	221d      	movs	r2, #29
 8015be2:	2100      	movs	r1, #0
 8015be4:	4618      	mov	r0, r3
 8015be6:	f007 fe9b 	bl	801d920 <memset>
    uint8_t versionMinor         = 0;
 8015bea:	2300      	movs	r3, #0
 8015bec:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8015bee:	4b65      	ldr	r3, [pc, #404]	; (8015d84 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	889b      	ldrh	r3, [r3, #4]
 8015bf4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	681c      	ldr	r4, [r3, #0]
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	791b      	ldrb	r3, [r3, #4]
 8015c00:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8015c04:	7bf8      	ldrb	r0, [r7, #15]
 8015c06:	f107 0213 	add.w	r2, r7, #19
 8015c0a:	9202      	str	r2, [sp, #8]
 8015c0c:	f107 0214 	add.w	r2, r7, #20
 8015c10:	9201      	str	r2, [sp, #4]
 8015c12:	9300      	str	r3, [sp, #0]
 8015c14:	4623      	mov	r3, r4
 8015c16:	460a      	mov	r2, r1
 8015c18:	68b9      	ldr	r1, [r7, #8]
 8015c1a:	f7f8 fbad 	bl	800e378 <SecureElementProcessJoinAccept>
 8015c1e:	4603      	mov	r3, r0
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d001      	beq.n	8015c28 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015c24:	230f      	movs	r3, #15
 8015c26:	e0a8      	b.n	8015d7a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	6818      	ldr	r0, [r3, #0]
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	791b      	ldrb	r3, [r3, #4]
 8015c30:	b29a      	uxth	r2, r3
 8015c32:	f107 0314 	add.w	r3, r7, #20
 8015c36:	4619      	mov	r1, r3
 8015c38:	f003 f855 	bl	8018ce6 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015c3c:	6878      	ldr	r0, [r7, #4]
 8015c3e:	f000 f9f0 	bl	8016022 <LoRaMacParserJoinAccept>
 8015c42:	4603      	mov	r3, r0
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d001      	beq.n	8015c4c <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015c48:	2310      	movs	r3, #16
 8015c4a:	e096      	b.n	8015d7a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	799b      	ldrb	r3, [r3, #6]
 8015c56:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	79db      	ldrb	r3, [r3, #7]
 8015c5c:	021b      	lsls	r3, r3, #8
 8015c5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015c60:	4313      	orrs	r3, r2
 8015c62:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	7a1b      	ldrb	r3, [r3, #8]
 8015c68:	041b      	lsls	r3, r3, #16
 8015c6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015c6c:	4313      	orrs	r3, r2
 8015c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8015c70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015c72:	f7ff fe1b 	bl	80158ac <IsJoinNonce10xOk>
 8015c76:	4603      	mov	r3, r0
 8015c78:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8015c7c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d010      	beq.n	8015ca6 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8015c84:	4b3f      	ldr	r3, [pc, #252]	; (8015d84 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015c8a:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8015c8c:	7cfb      	ldrb	r3, [r7, #19]
 8015c8e:	210b      	movs	r1, #11
 8015c90:	4618      	mov	r0, r3
 8015c92:	f000 f98b 	bl	8015fac <LoRaMacCryptoDeriveLifeTimeKey>
 8015c96:	4603      	mov	r3, r0
 8015c98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015c9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d005      	beq.n	8015cb0 <LoRaMacCryptoHandleJoinAccept+0xfc>
 8015ca4:	e001      	b.n	8015caa <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8015ca6:	2303      	movs	r3, #3
 8015ca8:	e067      	b.n	8015d7a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8015caa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015cae:	e064      	b.n	8015d7a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8015cb0:	210c      	movs	r1, #12
 8015cb2:	2000      	movs	r0, #0
 8015cb4:	f000 f97a 	bl	8015fac <LoRaMacCryptoDeriveLifeTimeKey>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015cbe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d002      	beq.n	8015ccc <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8015cc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015cca:	e056      	b.n	8015d7a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8015ccc:	210a      	movs	r1, #10
 8015cce:	2000      	movs	r0, #0
 8015cd0:	f000 f96c 	bl	8015fac <LoRaMacCryptoDeriveLifeTimeKey>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015cda:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d002      	beq.n	8015ce8 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 8015ce2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015ce6:	e048      	b.n	8015d7a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	7a5b      	ldrb	r3, [r3, #9]
 8015cec:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	7a9b      	ldrb	r3, [r3, #10]
 8015cf2:	021b      	lsls	r3, r3, #8
 8015cf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015cf6:	4313      	orrs	r3, r2
 8015cf8:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	7adb      	ldrb	r3, [r3, #11]
 8015cfe:	041b      	lsls	r3, r3, #16
 8015d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015d02:	4313      	orrs	r3, r2
 8015d04:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8015d06:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015d0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015d0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015d0e:	2009      	movs	r0, #9
 8015d10:	f7ff fca8 	bl	8015664 <DeriveSessionKey10x>
 8015d14:	4603      	mov	r3, r0
 8015d16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015d1a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d002      	beq.n	8015d28 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8015d22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015d26:	e028      	b.n	8015d7a <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8015d28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015d2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015d2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015d30:	2008      	movs	r0, #8
 8015d32:	f7ff fc97 	bl	8015664 <DeriveSessionKey10x>
 8015d36:	4603      	mov	r3, r0
 8015d38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015d3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d002      	beq.n	8015d4a <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8015d44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015d48:	e017      	b.n	8015d7a <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8015d4a:	4b0e      	ldr	r3, [pc, #56]	; (8015d84 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	7cfa      	ldrb	r2, [r7, #19]
 8015d50:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8015d52:	4b0c      	ldr	r3, [pc, #48]	; (8015d84 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	2200      	movs	r2, #0
 8015d58:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015d5a:	4b0a      	ldr	r3, [pc, #40]	; (8015d84 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8015d62:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015d64:	4b07      	ldr	r3, [pc, #28]	; (8015d84 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	f04f 32ff 	mov.w	r2, #4294967295
 8015d6c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015d6e:	4b05      	ldr	r3, [pc, #20]	; (8015d84 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	f04f 32ff 	mov.w	r2, #4294967295
 8015d76:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8015d78:	2300      	movs	r3, #0
}
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	374c      	adds	r7, #76	; 0x4c
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	bd90      	pop	{r4, r7, pc}
 8015d82:	bf00      	nop
 8015d84:	200016fc 	.word	0x200016fc

08015d88 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8015d88:	b590      	push	{r4, r7, lr}
 8015d8a:	b08b      	sub	sp, #44	; 0x2c
 8015d8c:	af04      	add	r7, sp, #16
 8015d8e:	60f8      	str	r0, [r7, #12]
 8015d90:	607b      	str	r3, [r7, #4]
 8015d92:	460b      	mov	r3, r1
 8015d94:	72fb      	strb	r3, [r7, #11]
 8015d96:	4613      	mov	r3, r2
 8015d98:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015d9a:	2313      	movs	r3, #19
 8015d9c:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015d9e:	2309      	movs	r3, #9
 8015da0:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d101      	bne.n	8015dac <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015da8:	230a      	movs	r3, #10
 8015daa:	e05f      	b.n	8015e6c <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8015dac:	4b31      	ldr	r3, [pc, #196]	; (8015e74 <LoRaMacCryptoSecureMessage+0xec>)
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	68db      	ldr	r3, [r3, #12]
 8015db2:	68fa      	ldr	r2, [r7, #12]
 8015db4:	429a      	cmp	r2, r3
 8015db6:	d201      	bcs.n	8015dbc <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015db8:	2306      	movs	r3, #6
 8015dba:	e057      	b.n	8015e6c <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d101      	bne.n	8015dca <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015dc6:	2308      	movs	r3, #8
 8015dc8:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8015dca:	4b2a      	ldr	r3, [pc, #168]	; (8015e74 <LoRaMacCryptoSecureMessage+0xec>)
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	68db      	ldr	r3, [r3, #12]
 8015dd0:	68fa      	ldr	r2, [r7, #12]
 8015dd2:	429a      	cmp	r2, r3
 8015dd4:	d916      	bls.n	8015e04 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015de0:	b219      	sxth	r1, r3
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	689c      	ldr	r4, [r3, #8]
 8015de6:	7dfa      	ldrb	r2, [r7, #23]
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	9301      	str	r3, [sp, #4]
 8015dec:	2300      	movs	r3, #0
 8015dee:	9300      	str	r3, [sp, #0]
 8015df0:	4623      	mov	r3, r4
 8015df2:	f7ff fa43 	bl	801527c <PayloadEncrypt>
 8015df6:	4603      	mov	r3, r0
 8015df8:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015dfa:	7dbb      	ldrb	r3, [r7, #22]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d001      	beq.n	8015e04 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8015e00:	7dbb      	ldrb	r3, [r7, #22]
 8015e02:	e033      	b.n	8015e6c <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015e04:	6878      	ldr	r0, [r7, #4]
 8015e06:	f000 fb4d 	bl	80164a4 <LoRaMacSerializerData>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d001      	beq.n	8015e14 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015e10:	2311      	movs	r3, #17
 8015e12:	e02b      	b.n	8015e6c <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015e14:	2308      	movs	r3, #8
 8015e16:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	6818      	ldr	r0, [r3, #0]
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	791b      	ldrb	r3, [r3, #4]
 8015e20:	b29b      	uxth	r3, r3
 8015e22:	3b04      	subs	r3, #4
 8015e24:	b299      	uxth	r1, r3
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	689b      	ldr	r3, [r3, #8]
 8015e2a:	687a      	ldr	r2, [r7, #4]
 8015e2c:	322c      	adds	r2, #44	; 0x2c
 8015e2e:	7dfc      	ldrb	r4, [r7, #23]
 8015e30:	9203      	str	r2, [sp, #12]
 8015e32:	68fa      	ldr	r2, [r7, #12]
 8015e34:	9202      	str	r2, [sp, #8]
 8015e36:	9301      	str	r3, [sp, #4]
 8015e38:	2300      	movs	r3, #0
 8015e3a:	9300      	str	r3, [sp, #0]
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	4622      	mov	r2, r4
 8015e40:	f7ff fb1d 	bl	801547e <ComputeCmacB0>
 8015e44:	4603      	mov	r3, r0
 8015e46:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015e48:	7dbb      	ldrb	r3, [r7, #22]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d001      	beq.n	8015e52 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8015e4e:	7dbb      	ldrb	r3, [r7, #22]
 8015e50:	e00c      	b.n	8015e6c <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015e52:	6878      	ldr	r0, [r7, #4]
 8015e54:	f000 fb26 	bl	80164a4 <LoRaMacSerializerData>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d001      	beq.n	8015e62 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015e5e:	2311      	movs	r3, #17
 8015e60:	e004      	b.n	8015e6c <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8015e62:	4b04      	ldr	r3, [pc, #16]	; (8015e74 <LoRaMacCryptoSecureMessage+0xec>)
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	68fa      	ldr	r2, [r7, #12]
 8015e68:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8015e6a:	2300      	movs	r3, #0
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	371c      	adds	r7, #28
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd90      	pop	{r4, r7, pc}
 8015e74:	200016fc 	.word	0x200016fc

08015e78 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8015e78:	b590      	push	{r4, r7, lr}
 8015e7a:	b08b      	sub	sp, #44	; 0x2c
 8015e7c:	af04      	add	r7, sp, #16
 8015e7e:	60b9      	str	r1, [r7, #8]
 8015e80:	607b      	str	r3, [r7, #4]
 8015e82:	4603      	mov	r3, r0
 8015e84:	73fb      	strb	r3, [r7, #15]
 8015e86:	4613      	mov	r3, r2
 8015e88:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8015e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d101      	bne.n	8015e94 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015e90:	230a      	movs	r3, #10
 8015e92:	e084      	b.n	8015f9e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8015e94:	7bbb      	ldrb	r3, [r7, #14]
 8015e96:	6879      	ldr	r1, [r7, #4]
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f7ff fc6f 	bl	801577c <CheckFCntDown>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	f083 0301 	eor.w	r3, r3, #1
 8015ea4:	b2db      	uxtb	r3, r3
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d001      	beq.n	8015eae <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015eaa:	2306      	movs	r3, #6
 8015eac:	e077      	b.n	8015f9e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015eae:	2313      	movs	r3, #19
 8015eb0:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015eb2:	2309      	movs	r3, #9
 8015eb4:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8015eb6:	2308      	movs	r3, #8
 8015eb8:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ebc:	f000 f97c 	bl	80161b8 <LoRaMacParserData>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d001      	beq.n	8015eca <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015ec6:	2310      	movs	r3, #16
 8015ec8:	e069      	b.n	8015f9e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8015eca:	f107 0210 	add.w	r2, r7, #16
 8015ece:	7bfb      	ldrb	r3, [r7, #15]
 8015ed0:	4611      	mov	r1, r2
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	f7ff fba0 	bl	8015618 <GetKeyAddrItem>
 8015ed8:	4603      	mov	r3, r0
 8015eda:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015edc:	7d7b      	ldrb	r3, [r7, #21]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d001      	beq.n	8015ee6 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8015ee2:	7d7b      	ldrb	r3, [r7, #21]
 8015ee4:	e05b      	b.n	8015f9e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8015ee6:	693b      	ldr	r3, [r7, #16]
 8015ee8:	785b      	ldrb	r3, [r3, #1]
 8015eea:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8015eec:	693b      	ldr	r3, [r7, #16]
 8015eee:	789b      	ldrb	r3, [r3, #2]
 8015ef0:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8015ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef4:	689b      	ldr	r3, [r3, #8]
 8015ef6:	68ba      	ldr	r2, [r7, #8]
 8015ef8:	429a      	cmp	r2, r3
 8015efa:	d001      	beq.n	8015f00 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8015efc:	2302      	movs	r3, #2
 8015efe:	e04e      	b.n	8015f9e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8015f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f02:	7b1b      	ldrb	r3, [r3, #12]
 8015f04:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015f08:	b2db      	uxtb	r3, r3
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	bf14      	ite	ne
 8015f0e:	2301      	movne	r3, #1
 8015f10:	2300      	moveq	r3, #0
 8015f12:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8015f14:	4b24      	ldr	r3, [pc, #144]	; (8015fa8 <LoRaMacCryptoUnsecureMessage+0x130>)
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	789b      	ldrb	r3, [r3, #2]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d101      	bne.n	8015f22 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8015f1e:	2300      	movs	r3, #0
 8015f20:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8015f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f24:	6818      	ldr	r0, [r3, #0]
 8015f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f28:	791b      	ldrb	r3, [r3, #4]
 8015f2a:	b29b      	uxth	r3, r3
 8015f2c:	3b04      	subs	r3, #4
 8015f2e:	b299      	uxth	r1, r3
 8015f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f34:	7dbc      	ldrb	r4, [r7, #22]
 8015f36:	7d3a      	ldrb	r2, [r7, #20]
 8015f38:	9303      	str	r3, [sp, #12]
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	9302      	str	r3, [sp, #8]
 8015f3e:	68bb      	ldr	r3, [r7, #8]
 8015f40:	9301      	str	r3, [sp, #4]
 8015f42:	2301      	movs	r3, #1
 8015f44:	9300      	str	r3, [sp, #0]
 8015f46:	4623      	mov	r3, r4
 8015f48:	f7ff fad7 	bl	80154fa <VerifyCmacB0>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015f50:	7d7b      	ldrb	r3, [r7, #21]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d001      	beq.n	8015f5a <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8015f56:	7d7b      	ldrb	r3, [r7, #21]
 8015f58:	e021      	b.n	8015f9e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8015f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d101      	bne.n	8015f68 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015f64:	2308      	movs	r3, #8
 8015f66:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8015f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f6a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f72:	b219      	sxth	r1, r3
 8015f74:	7dfa      	ldrb	r2, [r7, #23]
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	9301      	str	r3, [sp, #4]
 8015f7a:	2301      	movs	r3, #1
 8015f7c:	9300      	str	r3, [sp, #0]
 8015f7e:	68bb      	ldr	r3, [r7, #8]
 8015f80:	f7ff f97c 	bl	801527c <PayloadEncrypt>
 8015f84:	4603      	mov	r3, r0
 8015f86:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015f88:	7d7b      	ldrb	r3, [r7, #21]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d001      	beq.n	8015f92 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8015f8e:	7d7b      	ldrb	r3, [r7, #21]
 8015f90:	e005      	b.n	8015f9e <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8015f92:	7bbb      	ldrb	r3, [r7, #14]
 8015f94:	6879      	ldr	r1, [r7, #4]
 8015f96:	4618      	mov	r0, r3
 8015f98:	f7ff fc14 	bl	80157c4 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8015f9c:	2300      	movs	r3, #0
}
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	371c      	adds	r7, #28
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	bd90      	pop	{r4, r7, pc}
 8015fa6:	bf00      	nop
 8015fa8:	200016fc 	.word	0x200016fc

08015fac <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b088      	sub	sp, #32
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	4603      	mov	r3, r0
 8015fb4:	460a      	mov	r2, r1
 8015fb6:	71fb      	strb	r3, [r7, #7]
 8015fb8:	4613      	mov	r3, r2
 8015fba:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	60fb      	str	r3, [r7, #12]
 8015fc0:	f107 0310 	add.w	r3, r7, #16
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	601a      	str	r2, [r3, #0]
 8015fc8:	605a      	str	r2, [r3, #4]
 8015fca:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8015fcc:	2300      	movs	r3, #0
 8015fce:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8015fd0:	79bb      	ldrb	r3, [r7, #6]
 8015fd2:	2b0c      	cmp	r3, #12
 8015fd4:	d00b      	beq.n	8015fee <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8015fd6:	2b0c      	cmp	r3, #12
 8015fd8:	dc0f      	bgt.n	8015ffa <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8015fda:	2b0a      	cmp	r3, #10
 8015fdc:	d00a      	beq.n	8015ff4 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8015fde:	2b0b      	cmp	r3, #11
 8015fe0:	d10b      	bne.n	8015ffa <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8015fe2:	79fb      	ldrb	r3, [r7, #7]
 8015fe4:	2b01      	cmp	r3, #1
 8015fe6:	d10a      	bne.n	8015ffe <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8015fe8:	2320      	movs	r3, #32
 8015fea:	733b      	strb	r3, [r7, #12]
            }
            break;
 8015fec:	e007      	b.n	8015ffe <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8015fee:	230b      	movs	r3, #11
 8015ff0:	77fb      	strb	r3, [r7, #31]
            break;
 8015ff2:	e005      	b.n	8016000 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8015ff4:	2330      	movs	r3, #48	; 0x30
 8015ff6:	733b      	strb	r3, [r7, #12]
            break;
 8015ff8:	e002      	b.n	8016000 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015ffa:	230b      	movs	r3, #11
 8015ffc:	e00d      	b.n	801601a <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8015ffe:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8016000:	79ba      	ldrb	r2, [r7, #6]
 8016002:	7ff9      	ldrb	r1, [r7, #31]
 8016004:	f107 030c 	add.w	r3, r7, #12
 8016008:	4618      	mov	r0, r3
 801600a:	f7f8 f975 	bl	800e2f8 <SecureElementDeriveAndStoreKey>
 801600e:	4603      	mov	r3, r0
 8016010:	2b00      	cmp	r3, #0
 8016012:	d001      	beq.n	8016018 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016014:	230f      	movs	r3, #15
 8016016:	e000      	b.n	801601a <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016018:	2300      	movs	r3, #0
}
 801601a:	4618      	mov	r0, r3
 801601c:	3720      	adds	r7, #32
 801601e:	46bd      	mov	sp, r7
 8016020:	bd80      	pop	{r7, pc}

08016022 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8016022:	b580      	push	{r7, lr}
 8016024:	b084      	sub	sp, #16
 8016026:	af00      	add	r7, sp, #0
 8016028:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d003      	beq.n	8016038 <LoRaMacParserJoinAccept+0x16>
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d101      	bne.n	801603c <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016038:	2302      	movs	r3, #2
 801603a:	e0b9      	b.n	80161b0 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 801603c:	2300      	movs	r3, #0
 801603e:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	681a      	ldr	r2, [r3, #0]
 8016044:	89fb      	ldrh	r3, [r7, #14]
 8016046:	1c59      	adds	r1, r3, #1
 8016048:	81f9      	strh	r1, [r7, #14]
 801604a:	4413      	add	r3, r2
 801604c:	781a      	ldrb	r2, [r3, #0]
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	1d98      	adds	r0, r3, #6
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	681a      	ldr	r2, [r3, #0]
 801605a:	89fb      	ldrh	r3, [r7, #14]
 801605c:	4413      	add	r3, r2
 801605e:	2203      	movs	r2, #3
 8016060:	4619      	mov	r1, r3
 8016062:	f002 fe40 	bl	8018ce6 <memcpy1>
    bufItr = bufItr + 3;
 8016066:	89fb      	ldrh	r3, [r7, #14]
 8016068:	3303      	adds	r3, #3
 801606a:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	f103 0009 	add.w	r0, r3, #9
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	681a      	ldr	r2, [r3, #0]
 8016076:	89fb      	ldrh	r3, [r7, #14]
 8016078:	4413      	add	r3, r2
 801607a:	2203      	movs	r2, #3
 801607c:	4619      	mov	r1, r3
 801607e:	f002 fe32 	bl	8018ce6 <memcpy1>
    bufItr = bufItr + 3;
 8016082:	89fb      	ldrh	r3, [r7, #14]
 8016084:	3303      	adds	r3, #3
 8016086:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	681a      	ldr	r2, [r3, #0]
 801608c:	89fb      	ldrh	r3, [r7, #14]
 801608e:	1c59      	adds	r1, r3, #1
 8016090:	81f9      	strh	r1, [r7, #14]
 8016092:	4413      	add	r3, r2
 8016094:	781b      	ldrb	r3, [r3, #0]
 8016096:	461a      	mov	r2, r3
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	681a      	ldr	r2, [r3, #0]
 80160a0:	89fb      	ldrh	r3, [r7, #14]
 80160a2:	1c59      	adds	r1, r3, #1
 80160a4:	81f9      	strh	r1, [r7, #14]
 80160a6:	4413      	add	r3, r2
 80160a8:	781b      	ldrb	r3, [r3, #0]
 80160aa:	021a      	lsls	r2, r3, #8
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	68db      	ldr	r3, [r3, #12]
 80160b0:	431a      	orrs	r2, r3
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	681a      	ldr	r2, [r3, #0]
 80160ba:	89fb      	ldrh	r3, [r7, #14]
 80160bc:	1c59      	adds	r1, r3, #1
 80160be:	81f9      	strh	r1, [r7, #14]
 80160c0:	4413      	add	r3, r2
 80160c2:	781b      	ldrb	r3, [r3, #0]
 80160c4:	041a      	lsls	r2, r3, #16
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	68db      	ldr	r3, [r3, #12]
 80160ca:	431a      	orrs	r2, r3
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	681a      	ldr	r2, [r3, #0]
 80160d4:	89fb      	ldrh	r3, [r7, #14]
 80160d6:	1c59      	adds	r1, r3, #1
 80160d8:	81f9      	strh	r1, [r7, #14]
 80160da:	4413      	add	r3, r2
 80160dc:	781b      	ldrb	r3, [r3, #0]
 80160de:	061a      	lsls	r2, r3, #24
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	68db      	ldr	r3, [r3, #12]
 80160e4:	431a      	orrs	r2, r3
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	681a      	ldr	r2, [r3, #0]
 80160ee:	89fb      	ldrh	r3, [r7, #14]
 80160f0:	1c59      	adds	r1, r3, #1
 80160f2:	81f9      	strh	r1, [r7, #14]
 80160f4:	4413      	add	r3, r2
 80160f6:	781a      	ldrb	r2, [r3, #0]
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	681a      	ldr	r2, [r3, #0]
 8016100:	89fb      	ldrh	r3, [r7, #14]
 8016102:	1c59      	adds	r1, r3, #1
 8016104:	81f9      	strh	r1, [r7, #14]
 8016106:	4413      	add	r3, r2
 8016108:	781a      	ldrb	r2, [r3, #0]
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	791b      	ldrb	r3, [r3, #4]
 8016112:	1f1a      	subs	r2, r3, #4
 8016114:	89fb      	ldrh	r3, [r7, #14]
 8016116:	1ad3      	subs	r3, r2, r3
 8016118:	2b10      	cmp	r3, #16
 801611a:	d10e      	bne.n	801613a <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	f103 0012 	add.w	r0, r3, #18
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	681a      	ldr	r2, [r3, #0]
 8016126:	89fb      	ldrh	r3, [r7, #14]
 8016128:	4413      	add	r3, r2
 801612a:	2210      	movs	r2, #16
 801612c:	4619      	mov	r1, r3
 801612e:	f002 fdda 	bl	8018ce6 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8016132:	89fb      	ldrh	r3, [r7, #14]
 8016134:	3310      	adds	r3, #16
 8016136:	81fb      	strh	r3, [r7, #14]
 8016138:	e008      	b.n	801614c <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	791b      	ldrb	r3, [r3, #4]
 801613e:	1f1a      	subs	r2, r3, #4
 8016140:	89fb      	ldrh	r3, [r7, #14]
 8016142:	1ad3      	subs	r3, r2, r3
 8016144:	2b00      	cmp	r3, #0
 8016146:	dd01      	ble.n	801614c <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8016148:	2301      	movs	r3, #1
 801614a:	e031      	b.n	80161b0 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	681a      	ldr	r2, [r3, #0]
 8016150:	89fb      	ldrh	r3, [r7, #14]
 8016152:	1c59      	adds	r1, r3, #1
 8016154:	81f9      	strh	r1, [r7, #14]
 8016156:	4413      	add	r3, r2
 8016158:	781b      	ldrb	r3, [r3, #0]
 801615a:	461a      	mov	r2, r3
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	681a      	ldr	r2, [r3, #0]
 8016164:	89fb      	ldrh	r3, [r7, #14]
 8016166:	1c59      	adds	r1, r3, #1
 8016168:	81f9      	strh	r1, [r7, #14]
 801616a:	4413      	add	r3, r2
 801616c:	781b      	ldrb	r3, [r3, #0]
 801616e:	021a      	lsls	r2, r3, #8
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016174:	431a      	orrs	r2, r3
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	681a      	ldr	r2, [r3, #0]
 801617e:	89fb      	ldrh	r3, [r7, #14]
 8016180:	1c59      	adds	r1, r3, #1
 8016182:	81f9      	strh	r1, [r7, #14]
 8016184:	4413      	add	r3, r2
 8016186:	781b      	ldrb	r3, [r3, #0]
 8016188:	041a      	lsls	r2, r3, #16
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801618e:	431a      	orrs	r2, r3
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	681a      	ldr	r2, [r3, #0]
 8016198:	89fb      	ldrh	r3, [r7, #14]
 801619a:	1c59      	adds	r1, r3, #1
 801619c:	81f9      	strh	r1, [r7, #14]
 801619e:	4413      	add	r3, r2
 80161a0:	781b      	ldrb	r3, [r3, #0]
 80161a2:	061a      	lsls	r2, r3, #24
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161a8:	431a      	orrs	r2, r3
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80161ae:	2300      	movs	r3, #0
}
 80161b0:	4618      	mov	r0, r3
 80161b2:	3710      	adds	r7, #16
 80161b4:	46bd      	mov	sp, r7
 80161b6:	bd80      	pop	{r7, pc}

080161b8 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b084      	sub	sp, #16
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d003      	beq.n	80161ce <LoRaMacParserData+0x16>
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d101      	bne.n	80161d2 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80161ce:	2302      	movs	r3, #2
 80161d0:	e0e2      	b.n	8016398 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 80161d2:	2300      	movs	r3, #0
 80161d4:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	681a      	ldr	r2, [r3, #0]
 80161da:	89fb      	ldrh	r3, [r7, #14]
 80161dc:	1c59      	adds	r1, r3, #1
 80161de:	81f9      	strh	r1, [r7, #14]
 80161e0:	4413      	add	r3, r2
 80161e2:	781a      	ldrb	r2, [r3, #0]
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	681a      	ldr	r2, [r3, #0]
 80161ec:	89fb      	ldrh	r3, [r7, #14]
 80161ee:	1c59      	adds	r1, r3, #1
 80161f0:	81f9      	strh	r1, [r7, #14]
 80161f2:	4413      	add	r3, r2
 80161f4:	781b      	ldrb	r3, [r3, #0]
 80161f6:	461a      	mov	r2, r3
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	681a      	ldr	r2, [r3, #0]
 8016200:	89fb      	ldrh	r3, [r7, #14]
 8016202:	1c59      	adds	r1, r3, #1
 8016204:	81f9      	strh	r1, [r7, #14]
 8016206:	4413      	add	r3, r2
 8016208:	781b      	ldrb	r3, [r3, #0]
 801620a:	021a      	lsls	r2, r3, #8
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	689b      	ldr	r3, [r3, #8]
 8016210:	431a      	orrs	r2, r3
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	681a      	ldr	r2, [r3, #0]
 801621a:	89fb      	ldrh	r3, [r7, #14]
 801621c:	1c59      	adds	r1, r3, #1
 801621e:	81f9      	strh	r1, [r7, #14]
 8016220:	4413      	add	r3, r2
 8016222:	781b      	ldrb	r3, [r3, #0]
 8016224:	041a      	lsls	r2, r3, #16
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	689b      	ldr	r3, [r3, #8]
 801622a:	431a      	orrs	r2, r3
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	681a      	ldr	r2, [r3, #0]
 8016234:	89fb      	ldrh	r3, [r7, #14]
 8016236:	1c59      	adds	r1, r3, #1
 8016238:	81f9      	strh	r1, [r7, #14]
 801623a:	4413      	add	r3, r2
 801623c:	781b      	ldrb	r3, [r3, #0]
 801623e:	061a      	lsls	r2, r3, #24
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	689b      	ldr	r3, [r3, #8]
 8016244:	431a      	orrs	r2, r3
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	681a      	ldr	r2, [r3, #0]
 801624e:	89fb      	ldrh	r3, [r7, #14]
 8016250:	1c59      	adds	r1, r3, #1
 8016252:	81f9      	strh	r1, [r7, #14]
 8016254:	4413      	add	r3, r2
 8016256:	781a      	ldrb	r2, [r3, #0]
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	681a      	ldr	r2, [r3, #0]
 8016260:	89fb      	ldrh	r3, [r7, #14]
 8016262:	1c59      	adds	r1, r3, #1
 8016264:	81f9      	strh	r1, [r7, #14]
 8016266:	4413      	add	r3, r2
 8016268:	781b      	ldrb	r3, [r3, #0]
 801626a:	b29a      	uxth	r2, r3
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	681a      	ldr	r2, [r3, #0]
 8016274:	89fb      	ldrh	r3, [r7, #14]
 8016276:	1c59      	adds	r1, r3, #1
 8016278:	81f9      	strh	r1, [r7, #14]
 801627a:	4413      	add	r3, r2
 801627c:	781b      	ldrb	r3, [r3, #0]
 801627e:	0219      	lsls	r1, r3, #8
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	89db      	ldrh	r3, [r3, #14]
 8016284:	b21a      	sxth	r2, r3
 8016286:	b20b      	sxth	r3, r1
 8016288:	4313      	orrs	r3, r2
 801628a:	b21b      	sxth	r3, r3
 801628c:	b29a      	uxth	r2, r3
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	f103 0010 	add.w	r0, r3, #16
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	681a      	ldr	r2, [r3, #0]
 801629c:	89fb      	ldrh	r3, [r7, #14]
 801629e:	18d1      	adds	r1, r2, r3
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	7b1b      	ldrb	r3, [r3, #12]
 80162a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80162a8:	b2db      	uxtb	r3, r3
 80162aa:	b29b      	uxth	r3, r3
 80162ac:	461a      	mov	r2, r3
 80162ae:	f002 fd1a 	bl	8018ce6 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	7b1b      	ldrb	r3, [r3, #12]
 80162b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80162ba:	b2db      	uxtb	r3, r3
 80162bc:	b29a      	uxth	r2, r3
 80162be:	89fb      	ldrh	r3, [r7, #14]
 80162c0:	4413      	add	r3, r2
 80162c2:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	2200      	movs	r2, #0
 80162c8:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	2200      	movs	r2, #0
 80162d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	791b      	ldrb	r3, [r3, #4]
 80162d8:	461a      	mov	r2, r3
 80162da:	89fb      	ldrh	r3, [r7, #14]
 80162dc:	1ad3      	subs	r3, r2, r3
 80162de:	2b04      	cmp	r3, #4
 80162e0:	dd28      	ble.n	8016334 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	681a      	ldr	r2, [r3, #0]
 80162e6:	89fb      	ldrh	r3, [r7, #14]
 80162e8:	1c59      	adds	r1, r3, #1
 80162ea:	81f9      	strh	r1, [r7, #14]
 80162ec:	4413      	add	r3, r2
 80162ee:	781a      	ldrb	r2, [r3, #0]
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	791a      	ldrb	r2, [r3, #4]
 80162fa:	89fb      	ldrh	r3, [r7, #14]
 80162fc:	b2db      	uxtb	r3, r3
 80162fe:	1ad3      	subs	r3, r2, r3
 8016300:	b2db      	uxtb	r3, r3
 8016302:	3b04      	subs	r3, #4
 8016304:	b2da      	uxtb	r2, r3
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	681a      	ldr	r2, [r3, #0]
 8016314:	89fb      	ldrh	r3, [r7, #14]
 8016316:	18d1      	adds	r1, r2, r3
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801631e:	b29b      	uxth	r3, r3
 8016320:	461a      	mov	r2, r3
 8016322:	f002 fce0 	bl	8018ce6 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801632c:	b29a      	uxth	r2, r3
 801632e:	89fb      	ldrh	r3, [r7, #14]
 8016330:	4413      	add	r3, r2
 8016332:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681a      	ldr	r2, [r3, #0]
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	791b      	ldrb	r3, [r3, #4]
 801633c:	3b04      	subs	r3, #4
 801633e:	4413      	add	r3, r2
 8016340:	781b      	ldrb	r3, [r3, #0]
 8016342:	461a      	mov	r2, r3
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	6819      	ldr	r1, [r3, #0]
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	791b      	ldrb	r3, [r3, #4]
 8016354:	3b03      	subs	r3, #3
 8016356:	440b      	add	r3, r1
 8016358:	781b      	ldrb	r3, [r3, #0]
 801635a:	021b      	lsls	r3, r3, #8
 801635c:	431a      	orrs	r2, r3
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	6819      	ldr	r1, [r3, #0]
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	791b      	ldrb	r3, [r3, #4]
 801636e:	3b02      	subs	r3, #2
 8016370:	440b      	add	r3, r1
 8016372:	781b      	ldrb	r3, [r3, #0]
 8016374:	041b      	lsls	r3, r3, #16
 8016376:	431a      	orrs	r2, r3
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	6819      	ldr	r1, [r3, #0]
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	791b      	ldrb	r3, [r3, #4]
 8016388:	3b01      	subs	r3, #1
 801638a:	440b      	add	r3, r1
 801638c:	781b      	ldrb	r3, [r3, #0]
 801638e:	061b      	lsls	r3, r3, #24
 8016390:	431a      	orrs	r2, r3
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8016396:	2300      	movs	r3, #0
}
 8016398:	4618      	mov	r0, r3
 801639a:	3710      	adds	r7, #16
 801639c:	46bd      	mov	sp, r7
 801639e:	bd80      	pop	{r7, pc}

080163a0 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b084      	sub	sp, #16
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d003      	beq.n	80163b6 <LoRaMacSerializerJoinRequest+0x16>
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d101      	bne.n	80163ba <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80163b6:	2301      	movs	r3, #1
 80163b8:	e070      	b.n	801649c <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80163ba:	2300      	movs	r3, #0
 80163bc:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	791b      	ldrb	r3, [r3, #4]
 80163c2:	2b16      	cmp	r3, #22
 80163c4:	d801      	bhi.n	80163ca <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80163c6:	2302      	movs	r3, #2
 80163c8:	e068      	b.n	801649c <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	681a      	ldr	r2, [r3, #0]
 80163ce:	89fb      	ldrh	r3, [r7, #14]
 80163d0:	1c59      	adds	r1, r3, #1
 80163d2:	81f9      	strh	r1, [r7, #14]
 80163d4:	4413      	add	r3, r2
 80163d6:	687a      	ldr	r2, [r7, #4]
 80163d8:	7952      	ldrb	r2, [r2, #5]
 80163da:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	681a      	ldr	r2, [r3, #0]
 80163e0:	89fb      	ldrh	r3, [r7, #14]
 80163e2:	18d0      	adds	r0, r2, r3
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	3306      	adds	r3, #6
 80163e8:	2208      	movs	r2, #8
 80163ea:	4619      	mov	r1, r3
 80163ec:	f002 fc96 	bl	8018d1c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80163f0:	89fb      	ldrh	r3, [r7, #14]
 80163f2:	3308      	adds	r3, #8
 80163f4:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	681a      	ldr	r2, [r3, #0]
 80163fa:	89fb      	ldrh	r3, [r7, #14]
 80163fc:	18d0      	adds	r0, r2, r3
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	330e      	adds	r3, #14
 8016402:	2208      	movs	r2, #8
 8016404:	4619      	mov	r1, r3
 8016406:	f002 fc89 	bl	8018d1c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 801640a:	89fb      	ldrh	r3, [r7, #14]
 801640c:	3308      	adds	r3, #8
 801640e:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	8ad9      	ldrh	r1, [r3, #22]
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	681a      	ldr	r2, [r3, #0]
 8016418:	89fb      	ldrh	r3, [r7, #14]
 801641a:	1c58      	adds	r0, r3, #1
 801641c:	81f8      	strh	r0, [r7, #14]
 801641e:	4413      	add	r3, r2
 8016420:	b2ca      	uxtb	r2, r1
 8016422:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	8adb      	ldrh	r3, [r3, #22]
 8016428:	0a1b      	lsrs	r3, r3, #8
 801642a:	b299      	uxth	r1, r3
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	681a      	ldr	r2, [r3, #0]
 8016430:	89fb      	ldrh	r3, [r7, #14]
 8016432:	1c58      	adds	r0, r3, #1
 8016434:	81f8      	strh	r0, [r7, #14]
 8016436:	4413      	add	r3, r2
 8016438:	b2ca      	uxtb	r2, r1
 801643a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	6999      	ldr	r1, [r3, #24]
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	681a      	ldr	r2, [r3, #0]
 8016444:	89fb      	ldrh	r3, [r7, #14]
 8016446:	1c58      	adds	r0, r3, #1
 8016448:	81f8      	strh	r0, [r7, #14]
 801644a:	4413      	add	r3, r2
 801644c:	b2ca      	uxtb	r2, r1
 801644e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	699b      	ldr	r3, [r3, #24]
 8016454:	0a19      	lsrs	r1, r3, #8
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	681a      	ldr	r2, [r3, #0]
 801645a:	89fb      	ldrh	r3, [r7, #14]
 801645c:	1c58      	adds	r0, r3, #1
 801645e:	81f8      	strh	r0, [r7, #14]
 8016460:	4413      	add	r3, r2
 8016462:	b2ca      	uxtb	r2, r1
 8016464:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	699b      	ldr	r3, [r3, #24]
 801646a:	0c19      	lsrs	r1, r3, #16
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	681a      	ldr	r2, [r3, #0]
 8016470:	89fb      	ldrh	r3, [r7, #14]
 8016472:	1c58      	adds	r0, r3, #1
 8016474:	81f8      	strh	r0, [r7, #14]
 8016476:	4413      	add	r3, r2
 8016478:	b2ca      	uxtb	r2, r1
 801647a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	699b      	ldr	r3, [r3, #24]
 8016480:	0e19      	lsrs	r1, r3, #24
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681a      	ldr	r2, [r3, #0]
 8016486:	89fb      	ldrh	r3, [r7, #14]
 8016488:	1c58      	adds	r0, r3, #1
 801648a:	81f8      	strh	r0, [r7, #14]
 801648c:	4413      	add	r3, r2
 801648e:	b2ca      	uxtb	r2, r1
 8016490:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016492:	89fb      	ldrh	r3, [r7, #14]
 8016494:	b2da      	uxtb	r2, r3
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801649a:	2300      	movs	r3, #0
}
 801649c:	4618      	mov	r0, r3
 801649e:	3710      	adds	r7, #16
 80164a0:	46bd      	mov	sp, r7
 80164a2:	bd80      	pop	{r7, pc}

080164a4 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b084      	sub	sp, #16
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d003      	beq.n	80164ba <LoRaMacSerializerData+0x16>
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d101      	bne.n	80164be <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80164ba:	2301      	movs	r3, #1
 80164bc:	e0e5      	b.n	801668a <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 80164be:	2300      	movs	r3, #0
 80164c0:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80164c2:	2308      	movs	r3, #8
 80164c4:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	7b1b      	ldrb	r3, [r3, #12]
 80164ca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80164ce:	b2db      	uxtb	r3, r3
 80164d0:	b29a      	uxth	r2, r3
 80164d2:	89bb      	ldrh	r3, [r7, #12]
 80164d4:	4413      	add	r3, r2
 80164d6:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d002      	beq.n	80164e8 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80164e2:	89bb      	ldrh	r3, [r7, #12]
 80164e4:	3301      	adds	r3, #1
 80164e6:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80164ee:	b29a      	uxth	r2, r3
 80164f0:	89bb      	ldrh	r3, [r7, #12]
 80164f2:	4413      	add	r3, r2
 80164f4:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80164f6:	89bb      	ldrh	r3, [r7, #12]
 80164f8:	3304      	adds	r3, #4
 80164fa:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	791b      	ldrb	r3, [r3, #4]
 8016500:	b29b      	uxth	r3, r3
 8016502:	89ba      	ldrh	r2, [r7, #12]
 8016504:	429a      	cmp	r2, r3
 8016506:	d901      	bls.n	801650c <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016508:	2302      	movs	r3, #2
 801650a:	e0be      	b.n	801668a <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	681a      	ldr	r2, [r3, #0]
 8016510:	89fb      	ldrh	r3, [r7, #14]
 8016512:	1c59      	adds	r1, r3, #1
 8016514:	81f9      	strh	r1, [r7, #14]
 8016516:	4413      	add	r3, r2
 8016518:	687a      	ldr	r2, [r7, #4]
 801651a:	7952      	ldrb	r2, [r2, #5]
 801651c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	6899      	ldr	r1, [r3, #8]
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	681a      	ldr	r2, [r3, #0]
 8016526:	89fb      	ldrh	r3, [r7, #14]
 8016528:	1c58      	adds	r0, r3, #1
 801652a:	81f8      	strh	r0, [r7, #14]
 801652c:	4413      	add	r3, r2
 801652e:	b2ca      	uxtb	r2, r1
 8016530:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	689b      	ldr	r3, [r3, #8]
 8016536:	0a19      	lsrs	r1, r3, #8
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681a      	ldr	r2, [r3, #0]
 801653c:	89fb      	ldrh	r3, [r7, #14]
 801653e:	1c58      	adds	r0, r3, #1
 8016540:	81f8      	strh	r0, [r7, #14]
 8016542:	4413      	add	r3, r2
 8016544:	b2ca      	uxtb	r2, r1
 8016546:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	689b      	ldr	r3, [r3, #8]
 801654c:	0c19      	lsrs	r1, r3, #16
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	681a      	ldr	r2, [r3, #0]
 8016552:	89fb      	ldrh	r3, [r7, #14]
 8016554:	1c58      	adds	r0, r3, #1
 8016556:	81f8      	strh	r0, [r7, #14]
 8016558:	4413      	add	r3, r2
 801655a:	b2ca      	uxtb	r2, r1
 801655c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	689b      	ldr	r3, [r3, #8]
 8016562:	0e19      	lsrs	r1, r3, #24
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681a      	ldr	r2, [r3, #0]
 8016568:	89fb      	ldrh	r3, [r7, #14]
 801656a:	1c58      	adds	r0, r3, #1
 801656c:	81f8      	strh	r0, [r7, #14]
 801656e:	4413      	add	r3, r2
 8016570:	b2ca      	uxtb	r2, r1
 8016572:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	681a      	ldr	r2, [r3, #0]
 8016578:	89fb      	ldrh	r3, [r7, #14]
 801657a:	1c59      	adds	r1, r3, #1
 801657c:	81f9      	strh	r1, [r7, #14]
 801657e:	4413      	add	r3, r2
 8016580:	687a      	ldr	r2, [r7, #4]
 8016582:	7b12      	ldrb	r2, [r2, #12]
 8016584:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	89d9      	ldrh	r1, [r3, #14]
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	681a      	ldr	r2, [r3, #0]
 801658e:	89fb      	ldrh	r3, [r7, #14]
 8016590:	1c58      	adds	r0, r3, #1
 8016592:	81f8      	strh	r0, [r7, #14]
 8016594:	4413      	add	r3, r2
 8016596:	b2ca      	uxtb	r2, r1
 8016598:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	89db      	ldrh	r3, [r3, #14]
 801659e:	0a1b      	lsrs	r3, r3, #8
 80165a0:	b299      	uxth	r1, r3
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	681a      	ldr	r2, [r3, #0]
 80165a6:	89fb      	ldrh	r3, [r7, #14]
 80165a8:	1c58      	adds	r0, r3, #1
 80165aa:	81f8      	strh	r0, [r7, #14]
 80165ac:	4413      	add	r3, r2
 80165ae:	b2ca      	uxtb	r2, r1
 80165b0:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	681a      	ldr	r2, [r3, #0]
 80165b6:	89fb      	ldrh	r3, [r7, #14]
 80165b8:	18d0      	adds	r0, r2, r3
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	f103 0110 	add.w	r1, r3, #16
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	7b1b      	ldrb	r3, [r3, #12]
 80165c4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80165c8:	b2db      	uxtb	r3, r3
 80165ca:	b29b      	uxth	r3, r3
 80165cc:	461a      	mov	r2, r3
 80165ce:	f002 fb8a 	bl	8018ce6 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	7b1b      	ldrb	r3, [r3, #12]
 80165d6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80165da:	b2db      	uxtb	r3, r3
 80165dc:	b29a      	uxth	r2, r3
 80165de:	89fb      	ldrh	r3, [r7, #14]
 80165e0:	4413      	add	r3, r2
 80165e2:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d009      	beq.n	8016602 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	681a      	ldr	r2, [r3, #0]
 80165f2:	89fb      	ldrh	r3, [r7, #14]
 80165f4:	1c59      	adds	r1, r3, #1
 80165f6:	81f9      	strh	r1, [r7, #14]
 80165f8:	4413      	add	r3, r2
 80165fa:	687a      	ldr	r2, [r7, #4]
 80165fc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8016600:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	681a      	ldr	r2, [r3, #0]
 8016606:	89fb      	ldrh	r3, [r7, #14]
 8016608:	18d0      	adds	r0, r2, r3
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016614:	b29b      	uxth	r3, r3
 8016616:	461a      	mov	r2, r3
 8016618:	f002 fb65 	bl	8018ce6 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016622:	b29a      	uxth	r2, r3
 8016624:	89fb      	ldrh	r3, [r7, #14]
 8016626:	4413      	add	r3, r2
 8016628:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	681a      	ldr	r2, [r3, #0]
 8016632:	89fb      	ldrh	r3, [r7, #14]
 8016634:	1c58      	adds	r0, r3, #1
 8016636:	81f8      	strh	r0, [r7, #14]
 8016638:	4413      	add	r3, r2
 801663a:	b2ca      	uxtb	r2, r1
 801663c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016642:	0a19      	lsrs	r1, r3, #8
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	681a      	ldr	r2, [r3, #0]
 8016648:	89fb      	ldrh	r3, [r7, #14]
 801664a:	1c58      	adds	r0, r3, #1
 801664c:	81f8      	strh	r0, [r7, #14]
 801664e:	4413      	add	r3, r2
 8016650:	b2ca      	uxtb	r2, r1
 8016652:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016658:	0c19      	lsrs	r1, r3, #16
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	681a      	ldr	r2, [r3, #0]
 801665e:	89fb      	ldrh	r3, [r7, #14]
 8016660:	1c58      	adds	r0, r3, #1
 8016662:	81f8      	strh	r0, [r7, #14]
 8016664:	4413      	add	r3, r2
 8016666:	b2ca      	uxtb	r2, r1
 8016668:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801666e:	0e19      	lsrs	r1, r3, #24
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	681a      	ldr	r2, [r3, #0]
 8016674:	89fb      	ldrh	r3, [r7, #14]
 8016676:	1c58      	adds	r0, r3, #1
 8016678:	81f8      	strh	r0, [r7, #14]
 801667a:	4413      	add	r3, r2
 801667c:	b2ca      	uxtb	r2, r1
 801667e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016680:	89fb      	ldrh	r3, [r7, #14]
 8016682:	b2da      	uxtb	r2, r3
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016688:	2300      	movs	r3, #0
}
 801668a:	4618      	mov	r0, r3
 801668c:	3710      	adds	r7, #16
 801668e:	46bd      	mov	sp, r7
 8016690:	bd80      	pop	{r7, pc}

08016692 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8016692:	b480      	push	{r7}
 8016694:	b083      	sub	sp, #12
 8016696:	af00      	add	r7, sp, #0
 8016698:	4603      	mov	r3, r0
 801669a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801669c:	79fb      	ldrb	r3, [r7, #7]
 801669e:	2b05      	cmp	r3, #5
 80166a0:	d101      	bne.n	80166a6 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80166a2:	2301      	movs	r3, #1
 80166a4:	e000      	b.n	80166a8 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80166a6:	2300      	movs	r3, #0
        }
    }
}
 80166a8:	4618      	mov	r0, r3
 80166aa:	370c      	adds	r7, #12
 80166ac:	46bd      	mov	sp, r7
 80166ae:	bc80      	pop	{r7}
 80166b0:	4770      	bx	lr

080166b2 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80166b2:	b580      	push	{r7, lr}
 80166b4:	b084      	sub	sp, #16
 80166b6:	af00      	add	r7, sp, #0
 80166b8:	4603      	mov	r3, r0
 80166ba:	6039      	str	r1, [r7, #0]
 80166bc:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80166be:	2300      	movs	r3, #0
 80166c0:	60bb      	str	r3, [r7, #8]
    switch( region )
 80166c2:	79fb      	ldrb	r3, [r7, #7]
 80166c4:	2b05      	cmp	r3, #5
 80166c6:	d105      	bne.n	80166d4 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80166c8:	6838      	ldr	r0, [r7, #0]
 80166ca:	f001 f995 	bl	80179f8 <RegionEU868GetPhyParam>
 80166ce:	4603      	mov	r3, r0
 80166d0:	60fb      	str	r3, [r7, #12]
 80166d2:	e001      	b.n	80166d8 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80166d4:	68bb      	ldr	r3, [r7, #8]
 80166d6:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	4618      	mov	r0, r3
 80166dc:	3710      	adds	r7, #16
 80166de:	46bd      	mov	sp, r7
 80166e0:	bd80      	pop	{r7, pc}

080166e2 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80166e2:	b580      	push	{r7, lr}
 80166e4:	b082      	sub	sp, #8
 80166e6:	af00      	add	r7, sp, #0
 80166e8:	4603      	mov	r3, r0
 80166ea:	6039      	str	r1, [r7, #0]
 80166ec:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80166ee:	79fb      	ldrb	r3, [r7, #7]
 80166f0:	2b05      	cmp	r3, #5
 80166f2:	d103      	bne.n	80166fc <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 80166f4:	6838      	ldr	r0, [r7, #0]
 80166f6:	f001 facb 	bl	8017c90 <RegionEU868SetBandTxDone>
 80166fa:	e000      	b.n	80166fe <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80166fc:	bf00      	nop
        }
    }
}
 80166fe:	3708      	adds	r7, #8
 8016700:	46bd      	mov	sp, r7
 8016702:	bd80      	pop	{r7, pc}

08016704 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b082      	sub	sp, #8
 8016708:	af00      	add	r7, sp, #0
 801670a:	4603      	mov	r3, r0
 801670c:	6039      	str	r1, [r7, #0]
 801670e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016710:	79fb      	ldrb	r3, [r7, #7]
 8016712:	2b05      	cmp	r3, #5
 8016714:	d103      	bne.n	801671e <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8016716:	6838      	ldr	r0, [r7, #0]
 8016718:	f001 fae6 	bl	8017ce8 <RegionEU868InitDefaults>
 801671c:	e000      	b.n	8016720 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801671e:	bf00      	nop
        }
    }
}
 8016720:	bf00      	nop
 8016722:	3708      	adds	r7, #8
 8016724:	46bd      	mov	sp, r7
 8016726:	bd80      	pop	{r7, pc}

08016728 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b082      	sub	sp, #8
 801672c:	af00      	add	r7, sp, #0
 801672e:	4603      	mov	r3, r0
 8016730:	6039      	str	r1, [r7, #0]
 8016732:	71fb      	strb	r3, [r7, #7]
 8016734:	4613      	mov	r3, r2
 8016736:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8016738:	79fb      	ldrb	r3, [r7, #7]
 801673a:	2b05      	cmp	r3, #5
 801673c:	d106      	bne.n	801674c <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 801673e:	79bb      	ldrb	r3, [r7, #6]
 8016740:	4619      	mov	r1, r3
 8016742:	6838      	ldr	r0, [r7, #0]
 8016744:	f001 fb6e 	bl	8017e24 <RegionEU868Verify>
 8016748:	4603      	mov	r3, r0
 801674a:	e000      	b.n	801674e <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 801674c:	2300      	movs	r3, #0
        }
    }
}
 801674e:	4618      	mov	r0, r3
 8016750:	3708      	adds	r7, #8
 8016752:	46bd      	mov	sp, r7
 8016754:	bd80      	pop	{r7, pc}

08016756 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8016756:	b580      	push	{r7, lr}
 8016758:	b082      	sub	sp, #8
 801675a:	af00      	add	r7, sp, #0
 801675c:	4603      	mov	r3, r0
 801675e:	6039      	str	r1, [r7, #0]
 8016760:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016762:	79fb      	ldrb	r3, [r7, #7]
 8016764:	2b05      	cmp	r3, #5
 8016766:	d103      	bne.n	8016770 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8016768:	6838      	ldr	r0, [r7, #0]
 801676a:	f001 fbd7 	bl	8017f1c <RegionEU868ApplyCFList>
 801676e:	e000      	b.n	8016772 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8016770:	bf00      	nop
        }
    }
}
 8016772:	bf00      	nop
 8016774:	3708      	adds	r7, #8
 8016776:	46bd      	mov	sp, r7
 8016778:	bd80      	pop	{r7, pc}

0801677a <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 801677a:	b580      	push	{r7, lr}
 801677c:	b082      	sub	sp, #8
 801677e:	af00      	add	r7, sp, #0
 8016780:	4603      	mov	r3, r0
 8016782:	6039      	str	r1, [r7, #0]
 8016784:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016786:	79fb      	ldrb	r3, [r7, #7]
 8016788:	2b05      	cmp	r3, #5
 801678a:	d104      	bne.n	8016796 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 801678c:	6838      	ldr	r0, [r7, #0]
 801678e:	f001 fc39 	bl	8018004 <RegionEU868ChanMaskSet>
 8016792:	4603      	mov	r3, r0
 8016794:	e000      	b.n	8016798 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8016796:	2300      	movs	r3, #0
        }
    }
}
 8016798:	4618      	mov	r0, r3
 801679a:	3708      	adds	r7, #8
 801679c:	46bd      	mov	sp, r7
 801679e:	bd80      	pop	{r7, pc}

080167a0 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b082      	sub	sp, #8
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	603b      	str	r3, [r7, #0]
 80167a8:	4603      	mov	r3, r0
 80167aa:	71fb      	strb	r3, [r7, #7]
 80167ac:	460b      	mov	r3, r1
 80167ae:	71bb      	strb	r3, [r7, #6]
 80167b0:	4613      	mov	r3, r2
 80167b2:	717b      	strb	r3, [r7, #5]
    switch( region )
 80167b4:	79fb      	ldrb	r3, [r7, #7]
 80167b6:	2b05      	cmp	r3, #5
 80167b8:	d107      	bne.n	80167ca <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80167ba:	7979      	ldrb	r1, [r7, #5]
 80167bc:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80167c0:	693b      	ldr	r3, [r7, #16]
 80167c2:	683a      	ldr	r2, [r7, #0]
 80167c4:	f001 fc48 	bl	8018058 <RegionEU868ComputeRxWindowParameters>
 80167c8:	e000      	b.n	80167cc <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80167ca:	bf00      	nop
        }
    }
}
 80167cc:	bf00      	nop
 80167ce:	3708      	adds	r7, #8
 80167d0:	46bd      	mov	sp, r7
 80167d2:	bd80      	pop	{r7, pc}

080167d4 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b084      	sub	sp, #16
 80167d8:	af00      	add	r7, sp, #0
 80167da:	4603      	mov	r3, r0
 80167dc:	60b9      	str	r1, [r7, #8]
 80167de:	607a      	str	r2, [r7, #4]
 80167e0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80167e2:	7bfb      	ldrb	r3, [r7, #15]
 80167e4:	2b05      	cmp	r3, #5
 80167e6:	d105      	bne.n	80167f4 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80167e8:	6879      	ldr	r1, [r7, #4]
 80167ea:	68b8      	ldr	r0, [r7, #8]
 80167ec:	f001 fc8e 	bl	801810c <RegionEU868RxConfig>
 80167f0:	4603      	mov	r3, r0
 80167f2:	e000      	b.n	80167f6 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80167f4:	2300      	movs	r3, #0
        }
    }
}
 80167f6:	4618      	mov	r0, r3
 80167f8:	3710      	adds	r7, #16
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}

080167fe <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80167fe:	b580      	push	{r7, lr}
 8016800:	b084      	sub	sp, #16
 8016802:	af00      	add	r7, sp, #0
 8016804:	60b9      	str	r1, [r7, #8]
 8016806:	607a      	str	r2, [r7, #4]
 8016808:	603b      	str	r3, [r7, #0]
 801680a:	4603      	mov	r3, r0
 801680c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801680e:	7bfb      	ldrb	r3, [r7, #15]
 8016810:	2b05      	cmp	r3, #5
 8016812:	d106      	bne.n	8016822 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8016814:	683a      	ldr	r2, [r7, #0]
 8016816:	6879      	ldr	r1, [r7, #4]
 8016818:	68b8      	ldr	r0, [r7, #8]
 801681a:	f001 fd47 	bl	80182ac <RegionEU868TxConfig>
 801681e:	4603      	mov	r3, r0
 8016820:	e000      	b.n	8016824 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8016822:	2300      	movs	r3, #0
        }
    }
}
 8016824:	4618      	mov	r0, r3
 8016826:	3710      	adds	r7, #16
 8016828:	46bd      	mov	sp, r7
 801682a:	bd80      	pop	{r7, pc}

0801682c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b086      	sub	sp, #24
 8016830:	af02      	add	r7, sp, #8
 8016832:	60b9      	str	r1, [r7, #8]
 8016834:	607a      	str	r2, [r7, #4]
 8016836:	603b      	str	r3, [r7, #0]
 8016838:	4603      	mov	r3, r0
 801683a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801683c:	7bfb      	ldrb	r3, [r7, #15]
 801683e:	2b05      	cmp	r3, #5
 8016840:	d109      	bne.n	8016856 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8016842:	69fb      	ldr	r3, [r7, #28]
 8016844:	9300      	str	r3, [sp, #0]
 8016846:	69bb      	ldr	r3, [r7, #24]
 8016848:	683a      	ldr	r2, [r7, #0]
 801684a:	6879      	ldr	r1, [r7, #4]
 801684c:	68b8      	ldr	r0, [r7, #8]
 801684e:	f001 fdfd 	bl	801844c <RegionEU868LinkAdrReq>
 8016852:	4603      	mov	r3, r0
 8016854:	e000      	b.n	8016858 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8016856:	2300      	movs	r3, #0
        }
    }
}
 8016858:	4618      	mov	r0, r3
 801685a:	3710      	adds	r7, #16
 801685c:	46bd      	mov	sp, r7
 801685e:	bd80      	pop	{r7, pc}

08016860 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016860:	b580      	push	{r7, lr}
 8016862:	b082      	sub	sp, #8
 8016864:	af00      	add	r7, sp, #0
 8016866:	4603      	mov	r3, r0
 8016868:	6039      	str	r1, [r7, #0]
 801686a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801686c:	79fb      	ldrb	r3, [r7, #7]
 801686e:	2b05      	cmp	r3, #5
 8016870:	d104      	bne.n	801687c <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8016872:	6838      	ldr	r0, [r7, #0]
 8016874:	f001 ff0c 	bl	8018690 <RegionEU868RxParamSetupReq>
 8016878:	4603      	mov	r3, r0
 801687a:	e000      	b.n	801687e <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801687c:	2300      	movs	r3, #0
        }
    }
}
 801687e:	4618      	mov	r0, r3
 8016880:	3708      	adds	r7, #8
 8016882:	46bd      	mov	sp, r7
 8016884:	bd80      	pop	{r7, pc}

08016886 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8016886:	b580      	push	{r7, lr}
 8016888:	b082      	sub	sp, #8
 801688a:	af00      	add	r7, sp, #0
 801688c:	4603      	mov	r3, r0
 801688e:	6039      	str	r1, [r7, #0]
 8016890:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016892:	79fb      	ldrb	r3, [r7, #7]
 8016894:	2b05      	cmp	r3, #5
 8016896:	d104      	bne.n	80168a2 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8016898:	6838      	ldr	r0, [r7, #0]
 801689a:	f001 ff37 	bl	801870c <RegionEU868NewChannelReq>
 801689e:	4603      	mov	r3, r0
 80168a0:	e000      	b.n	80168a4 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80168a2:	2300      	movs	r3, #0
        }
    }
}
 80168a4:	4618      	mov	r0, r3
 80168a6:	3708      	adds	r7, #8
 80168a8:	46bd      	mov	sp, r7
 80168aa:	bd80      	pop	{r7, pc}

080168ac <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b082      	sub	sp, #8
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	4603      	mov	r3, r0
 80168b4:	6039      	str	r1, [r7, #0]
 80168b6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80168b8:	79fb      	ldrb	r3, [r7, #7]
 80168ba:	2b05      	cmp	r3, #5
 80168bc:	d104      	bne.n	80168c8 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80168be:	6838      	ldr	r0, [r7, #0]
 80168c0:	f001 ff82 	bl	80187c8 <RegionEU868TxParamSetupReq>
 80168c4:	4603      	mov	r3, r0
 80168c6:	e000      	b.n	80168ca <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80168c8:	2300      	movs	r3, #0
        }
    }
}
 80168ca:	4618      	mov	r0, r3
 80168cc:	3708      	adds	r7, #8
 80168ce:	46bd      	mov	sp, r7
 80168d0:	bd80      	pop	{r7, pc}

080168d2 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80168d2:	b580      	push	{r7, lr}
 80168d4:	b082      	sub	sp, #8
 80168d6:	af00      	add	r7, sp, #0
 80168d8:	4603      	mov	r3, r0
 80168da:	6039      	str	r1, [r7, #0]
 80168dc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80168de:	79fb      	ldrb	r3, [r7, #7]
 80168e0:	2b05      	cmp	r3, #5
 80168e2:	d104      	bne.n	80168ee <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80168e4:	6838      	ldr	r0, [r7, #0]
 80168e6:	f001 ff7b 	bl	80187e0 <RegionEU868DlChannelReq>
 80168ea:	4603      	mov	r3, r0
 80168ec:	e000      	b.n	80168f0 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80168ee:	2300      	movs	r3, #0
        }
    }
}
 80168f0:	4618      	mov	r0, r3
 80168f2:	3708      	adds	r7, #8
 80168f4:	46bd      	mov	sp, r7
 80168f6:	bd80      	pop	{r7, pc}

080168f8 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b082      	sub	sp, #8
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	4603      	mov	r3, r0
 8016900:	71fb      	strb	r3, [r7, #7]
 8016902:	460b      	mov	r3, r1
 8016904:	71bb      	strb	r3, [r7, #6]
 8016906:	4613      	mov	r3, r2
 8016908:	717b      	strb	r3, [r7, #5]
    switch( region )
 801690a:	79fb      	ldrb	r3, [r7, #7]
 801690c:	2b05      	cmp	r3, #5
 801690e:	d108      	bne.n	8016922 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8016910:	797a      	ldrb	r2, [r7, #5]
 8016912:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016916:	4611      	mov	r1, r2
 8016918:	4618      	mov	r0, r3
 801691a:	f001 ffab 	bl	8018874 <RegionEU868AlternateDr>
 801691e:	4603      	mov	r3, r0
 8016920:	e000      	b.n	8016924 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8016922:	2300      	movs	r3, #0
        }
    }
}
 8016924:	4618      	mov	r0, r3
 8016926:	3708      	adds	r7, #8
 8016928:	46bd      	mov	sp, r7
 801692a:	bd80      	pop	{r7, pc}

0801692c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801692c:	b580      	push	{r7, lr}
 801692e:	b084      	sub	sp, #16
 8016930:	af00      	add	r7, sp, #0
 8016932:	60b9      	str	r1, [r7, #8]
 8016934:	607a      	str	r2, [r7, #4]
 8016936:	603b      	str	r3, [r7, #0]
 8016938:	4603      	mov	r3, r0
 801693a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801693c:	7bfb      	ldrb	r3, [r7, #15]
 801693e:	2b05      	cmp	r3, #5
 8016940:	d107      	bne.n	8016952 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8016942:	69bb      	ldr	r3, [r7, #24]
 8016944:	683a      	ldr	r2, [r7, #0]
 8016946:	6879      	ldr	r1, [r7, #4]
 8016948:	68b8      	ldr	r0, [r7, #8]
 801694a:	f001 ffa3 	bl	8018894 <RegionEU868NextChannel>
 801694e:	4603      	mov	r3, r0
 8016950:	e000      	b.n	8016954 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8016952:	2309      	movs	r3, #9
        }
    }
}
 8016954:	4618      	mov	r0, r3
 8016956:	3710      	adds	r7, #16
 8016958:	46bd      	mov	sp, r7
 801695a:	bd80      	pop	{r7, pc}

0801695c <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b082      	sub	sp, #8
 8016960:	af00      	add	r7, sp, #0
 8016962:	4603      	mov	r3, r0
 8016964:	6039      	str	r1, [r7, #0]
 8016966:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016968:	79fb      	ldrb	r3, [r7, #7]
 801696a:	2b05      	cmp	r3, #5
 801696c:	d103      	bne.n	8016976 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 801696e:	6838      	ldr	r0, [r7, #0]
 8016970:	f002 f90a 	bl	8018b88 <RegionEU868SetContinuousWave>
 8016974:	e000      	b.n	8016978 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8016976:	bf00      	nop
        }
    }
}
 8016978:	bf00      	nop
 801697a:	3708      	adds	r7, #8
 801697c:	46bd      	mov	sp, r7
 801697e:	bd80      	pop	{r7, pc}

08016980 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016980:	b590      	push	{r4, r7, lr}
 8016982:	b083      	sub	sp, #12
 8016984:	af00      	add	r7, sp, #0
 8016986:	4604      	mov	r4, r0
 8016988:	4608      	mov	r0, r1
 801698a:	4611      	mov	r1, r2
 801698c:	461a      	mov	r2, r3
 801698e:	4623      	mov	r3, r4
 8016990:	71fb      	strb	r3, [r7, #7]
 8016992:	4603      	mov	r3, r0
 8016994:	71bb      	strb	r3, [r7, #6]
 8016996:	460b      	mov	r3, r1
 8016998:	717b      	strb	r3, [r7, #5]
 801699a:	4613      	mov	r3, r2
 801699c:	713b      	strb	r3, [r7, #4]
    switch( region )
 801699e:	79fb      	ldrb	r3, [r7, #7]
 80169a0:	2b05      	cmp	r3, #5
 80169a2:	d109      	bne.n	80169b8 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80169a4:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80169a8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80169ac:	79bb      	ldrb	r3, [r7, #6]
 80169ae:	4618      	mov	r0, r3
 80169b0:	f002 f938 	bl	8018c24 <RegionEU868ApplyDrOffset>
 80169b4:	4603      	mov	r3, r0
 80169b6:	e000      	b.n	80169ba <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80169b8:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80169ba:	4618      	mov	r0, r3
 80169bc:	370c      	adds	r7, #12
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd90      	pop	{r4, r7, pc}
	...

080169c4 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80169c4:	b480      	push	{r7}
 80169c6:	b083      	sub	sp, #12
 80169c8:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80169ca:	4b04      	ldr	r3, [pc, #16]	; (80169dc <RegionGetVersion+0x18>)
 80169cc:	607b      	str	r3, [r7, #4]

    return version;
 80169ce:	687b      	ldr	r3, [r7, #4]
}
 80169d0:	4618      	mov	r0, r3
 80169d2:	370c      	adds	r7, #12
 80169d4:	46bd      	mov	sp, r7
 80169d6:	bc80      	pop	{r7}
 80169d8:	4770      	bx	lr
 80169da:	bf00      	nop
 80169dc:	01010003 	.word	0x01010003

080169e0 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80169e0:	b480      	push	{r7}
 80169e2:	b087      	sub	sp, #28
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	60f8      	str	r0, [r7, #12]
 80169e8:	4608      	mov	r0, r1
 80169ea:	4639      	mov	r1, r7
 80169ec:	e881 000c 	stmia.w	r1, {r2, r3}
 80169f0:	4603      	mov	r3, r0
 80169f2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	881b      	ldrh	r3, [r3, #0]
 80169f8:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80169fa:	7afb      	ldrb	r3, [r7, #11]
 80169fc:	f083 0301 	eor.w	r3, r3, #1
 8016a00:	b2db      	uxtb	r3, r3
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d01b      	beq.n	8016a3e <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016a06:	f242 7310 	movw	r3, #10000	; 0x2710
 8016a0a:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016a0c:	683b      	ldr	r3, [r7, #0]
 8016a0e:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8016a12:	d202      	bcs.n	8016a1a <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8016a14:	2364      	movs	r3, #100	; 0x64
 8016a16:	82bb      	strh	r3, [r7, #20]
 8016a18:	e00b      	b.n	8016a32 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016a1a:	683b      	ldr	r3, [r7, #0]
 8016a1c:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8016a20:	4293      	cmp	r3, r2
 8016a22:	d803      	bhi.n	8016a2c <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8016a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016a28:	82bb      	strh	r3, [r7, #20]
 8016a2a:	e002      	b.n	8016a32 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016a2c:	f242 7310 	movw	r3, #10000	; 0x2710
 8016a30:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8016a32:	8aba      	ldrh	r2, [r7, #20]
 8016a34:	8afb      	ldrh	r3, [r7, #22]
 8016a36:	4293      	cmp	r3, r2
 8016a38:	bf38      	it	cc
 8016a3a:	4613      	movcc	r3, r2
 8016a3c:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8016a3e:	8afb      	ldrh	r3, [r7, #22]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d101      	bne.n	8016a48 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8016a44:	2301      	movs	r3, #1
 8016a46:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8016a48:	8afb      	ldrh	r3, [r7, #22]
}
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	371c      	adds	r7, #28
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bc80      	pop	{r7}
 8016a52:	4770      	bx	lr

08016a54 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b08e      	sub	sp, #56	; 0x38
 8016a58:	af02      	add	r7, sp, #8
 8016a5a:	60f8      	str	r0, [r7, #12]
 8016a5c:	4608      	mov	r0, r1
 8016a5e:	4639      	mov	r1, r7
 8016a60:	e881 000c 	stmia.w	r1, {r2, r3}
 8016a64:	4603      	mov	r3, r0
 8016a66:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	881b      	ldrh	r3, [r3, #0]
 8016a6c:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016a6e:	4b4b      	ldr	r3, [pc, #300]	; (8016b9c <SetMaxTimeCredits+0x148>)
 8016a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8016a72:	463b      	mov	r3, r7
 8016a74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016a78:	f005 fdc0 	bl	801c5fc <SysTimeToMs>
 8016a7c:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8016a7e:	f107 0314 	add.w	r3, r7, #20
 8016a82:	2200      	movs	r2, #0
 8016a84:	601a      	str	r2, [r3, #0]
 8016a86:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016a88:	7af9      	ldrb	r1, [r7, #11]
 8016a8a:	463b      	mov	r3, r7
 8016a8c:	cb0c      	ldmia	r3, {r2, r3}
 8016a8e:	68f8      	ldr	r0, [r7, #12]
 8016a90:	f7ff ffa6 	bl	80169e0 <GetDutyCycle>
 8016a94:	4603      	mov	r3, r0
 8016a96:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8016a98:	7afb      	ldrb	r3, [r7, #11]
 8016a9a:	f083 0301 	eor.w	r3, r3, #1
 8016a9e:	b2db      	uxtb	r3, r3
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d062      	beq.n	8016b6a <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8016aa4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016aa6:	2b64      	cmp	r3, #100	; 0x64
 8016aa8:	d105      	bne.n	8016ab6 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016aaa:	4b3c      	ldr	r3, [pc, #240]	; (8016b9c <SetMaxTimeCredits+0x148>)
 8016aac:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ab2:	609a      	str	r2, [r3, #8]
 8016ab4:	e00b      	b.n	8016ace <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8016ab6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016ab8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016abc:	d105      	bne.n	8016aca <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8016abe:	4b38      	ldr	r3, [pc, #224]	; (8016ba0 <SetMaxTimeCredits+0x14c>)
 8016ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ac6:	609a      	str	r2, [r3, #8]
 8016ac8:	e001      	b.n	8016ace <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8016aca:	4b36      	ldr	r3, [pc, #216]	; (8016ba4 <SetMaxTimeCredits+0x150>)
 8016acc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	689a      	ldr	r2, [r3, #8]
 8016ad2:	f107 031c 	add.w	r3, r7, #28
 8016ad6:	4611      	mov	r1, r2
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f005 fdb7 	bl	801c64c <SysTimeFromMs>
 8016ade:	f107 0014 	add.w	r0, r7, #20
 8016ae2:	6a3b      	ldr	r3, [r7, #32]
 8016ae4:	9300      	str	r3, [sp, #0]
 8016ae6:	69fb      	ldr	r3, [r7, #28]
 8016ae8:	463a      	mov	r2, r7
 8016aea:	ca06      	ldmia	r2, {r1, r2}
 8016aec:	f005 fcc7 	bl	801c47e <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8016af0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8016af4:	f083 0301 	eor.w	r3, r3, #1
 8016af8:	b2db      	uxtb	r3, r3
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d006      	beq.n	8016b0c <SetMaxTimeCredits+0xb8>
 8016afe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016b02:	f083 0301 	eor.w	r3, r3, #1
 8016b06:	b2db      	uxtb	r3, r3
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d108      	bne.n	8016b1e <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8016b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b12:	429a      	cmp	r2, r3
 8016b14:	d103      	bne.n	8016b1e <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8016b16:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8016b18:	4a23      	ldr	r2, [pc, #140]	; (8016ba8 <SetMaxTimeCredits+0x154>)
 8016b1a:	4293      	cmp	r3, r2
 8016b1c:	d92f      	bls.n	8016b7e <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b22:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8016b24:	683b      	ldr	r3, [r7, #0]
 8016b26:	4a21      	ldr	r2, [pc, #132]	; (8016bac <SetMaxTimeCredits+0x158>)
 8016b28:	4293      	cmp	r3, r2
 8016b2a:	d928      	bls.n	8016b7e <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8016b2c:	683b      	ldr	r3, [r7, #0]
 8016b2e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8016b32:	3b30      	subs	r3, #48	; 0x30
 8016b34:	4a1e      	ldr	r2, [pc, #120]	; (8016bb0 <SetMaxTimeCredits+0x15c>)
 8016b36:	fba2 2303 	umull	r2, r3, r2, r3
 8016b3a:	0c1b      	lsrs	r3, r3, #16
 8016b3c:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8016b3e:	697b      	ldr	r3, [r7, #20]
 8016b40:	4a1c      	ldr	r2, [pc, #112]	; (8016bb4 <SetMaxTimeCredits+0x160>)
 8016b42:	fb02 f303 	mul.w	r3, r2, r3
 8016b46:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8016b48:	697b      	ldr	r3, [r7, #20]
 8016b4a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8016b4e:	3330      	adds	r3, #48	; 0x30
 8016b50:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8016b52:	2300      	movs	r3, #0
 8016b54:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8016b56:	f107 0314 	add.w	r3, r7, #20
 8016b5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016b5e:	f005 fd4d 	bl	801c5fc <SysTimeToMs>
 8016b62:	4602      	mov	r2, r0
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	609a      	str	r2, [r3, #8]
 8016b68:	e009      	b.n	8016b7e <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8016b6a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8016b6e:	f083 0301 	eor.w	r3, r3, #1
 8016b72:	b2db      	uxtb	r3, r3
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d002      	beq.n	8016b7e <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b7c:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	685b      	ldr	r3, [r3, #4]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d102      	bne.n	8016b8c <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b8a:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b90:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8016b92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8016b94:	4618      	mov	r0, r3
 8016b96:	3730      	adds	r7, #48	; 0x30
 8016b98:	46bd      	mov	sp, r7
 8016b9a:	bd80      	pop	{r7, pc}
 8016b9c:	001b7740 	.word	0x001b7740
 8016ba0:	0112a880 	.word	0x0112a880
 8016ba4:	02932e00 	.word	0x02932e00
 8016ba8:	0001517f 	.word	0x0001517f
 8016bac:	0001ec2f 	.word	0x0001ec2f
 8016bb0:	c22e4507 	.word	0xc22e4507
 8016bb4:	00015180 	.word	0x00015180

08016bb8 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b086      	sub	sp, #24
 8016bbc:	af02      	add	r7, sp, #8
 8016bbe:	6078      	str	r0, [r7, #4]
 8016bc0:	4608      	mov	r0, r1
 8016bc2:	4611      	mov	r1, r2
 8016bc4:	461a      	mov	r2, r3
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	70fb      	strb	r3, [r7, #3]
 8016bca:	460b      	mov	r3, r1
 8016bcc:	70bb      	strb	r3, [r7, #2]
 8016bce:	4613      	mov	r3, r2
 8016bd0:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8016bd2:	78f9      	ldrb	r1, [r7, #3]
 8016bd4:	787b      	ldrb	r3, [r7, #1]
 8016bd6:	9301      	str	r3, [sp, #4]
 8016bd8:	78bb      	ldrb	r3, [r7, #2]
 8016bda:	9300      	str	r3, [sp, #0]
 8016bdc:	f107 0318 	add.w	r3, r7, #24
 8016be0:	cb0c      	ldmia	r3, {r2, r3}
 8016be2:	6878      	ldr	r0, [r7, #4]
 8016be4:	f7ff ff36 	bl	8016a54 <SetMaxTimeCredits>
 8016be8:	4603      	mov	r3, r0
 8016bea:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8016bec:	78fb      	ldrb	r3, [r7, #3]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d00a      	beq.n	8016c08 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	685b      	ldr	r3, [r3, #4]
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	f006 fb3c 	bl	801d274 <UTIL_TIMER_GetElapsedTime>
 8016bfc:	4602      	mov	r2, r0
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	68db      	ldr	r3, [r3, #12]
 8016c02:	441a      	add	r2, r3
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	68da      	ldr	r2, [r3, #12]
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	691b      	ldr	r3, [r3, #16]
 8016c10:	429a      	cmp	r2, r3
 8016c12:	d903      	bls.n	8016c1c <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	691a      	ldr	r2, [r3, #16]
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	6a3a      	ldr	r2, [r7, #32]
 8016c20:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8016c22:	89fb      	ldrh	r3, [r7, #14]
}
 8016c24:	4618      	mov	r0, r3
 8016c26:	3710      	adds	r7, #16
 8016c28:	46bd      	mov	sp, r7
 8016c2a:	bd80      	pop	{r7, pc}

08016c2c <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016c2c:	b480      	push	{r7}
 8016c2e:	b085      	sub	sp, #20
 8016c30:	af00      	add	r7, sp, #0
 8016c32:	4603      	mov	r3, r0
 8016c34:	460a      	mov	r2, r1
 8016c36:	80fb      	strh	r3, [r7, #6]
 8016c38:	4613      	mov	r3, r2
 8016c3a:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8016c3c:	2300      	movs	r3, #0
 8016c3e:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8016c40:	2300      	movs	r3, #0
 8016c42:	73bb      	strb	r3, [r7, #14]
 8016c44:	e011      	b.n	8016c6a <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8016c46:	88fa      	ldrh	r2, [r7, #6]
 8016c48:	7bbb      	ldrb	r3, [r7, #14]
 8016c4a:	2101      	movs	r1, #1
 8016c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8016c50:	401a      	ands	r2, r3
 8016c52:	7bbb      	ldrb	r3, [r7, #14]
 8016c54:	2101      	movs	r1, #1
 8016c56:	fa01 f303 	lsl.w	r3, r1, r3
 8016c5a:	429a      	cmp	r2, r3
 8016c5c:	d102      	bne.n	8016c64 <CountChannels+0x38>
        {
            nbActiveBits++;
 8016c5e:	7bfb      	ldrb	r3, [r7, #15]
 8016c60:	3301      	adds	r3, #1
 8016c62:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8016c64:	7bbb      	ldrb	r3, [r7, #14]
 8016c66:	3301      	adds	r3, #1
 8016c68:	73bb      	strb	r3, [r7, #14]
 8016c6a:	7bba      	ldrb	r2, [r7, #14]
 8016c6c:	797b      	ldrb	r3, [r7, #5]
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d3e9      	bcc.n	8016c46 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8016c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c74:	4618      	mov	r0, r3
 8016c76:	3714      	adds	r7, #20
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	bc80      	pop	{r7}
 8016c7c:	4770      	bx	lr

08016c7e <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8016c7e:	b580      	push	{r7, lr}
 8016c80:	b084      	sub	sp, #16
 8016c82:	af00      	add	r7, sp, #0
 8016c84:	6039      	str	r1, [r7, #0]
 8016c86:	4611      	mov	r1, r2
 8016c88:	461a      	mov	r2, r3
 8016c8a:	4603      	mov	r3, r0
 8016c8c:	71fb      	strb	r3, [r7, #7]
 8016c8e:	460b      	mov	r3, r1
 8016c90:	71bb      	strb	r3, [r7, #6]
 8016c92:	4613      	mov	r3, r2
 8016c94:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8016c96:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8016c9a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8016c9e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f000 f85d 	bl	8016d62 <RegionCommonValueInRange>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d101      	bne.n	8016cb2 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8016cae:	2300      	movs	r3, #0
 8016cb0:	e053      	b.n	8016d5a <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	73fb      	strb	r3, [r7, #15]
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	73bb      	strb	r3, [r7, #14]
 8016cba:	e049      	b.n	8016d50 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	737b      	strb	r3, [r7, #13]
 8016cc0:	e03d      	b.n	8016d3e <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8016cc2:	7bbb      	ldrb	r3, [r7, #14]
 8016cc4:	005b      	lsls	r3, r3, #1
 8016cc6:	683a      	ldr	r2, [r7, #0]
 8016cc8:	4413      	add	r3, r2
 8016cca:	881b      	ldrh	r3, [r3, #0]
 8016ccc:	461a      	mov	r2, r3
 8016cce:	7b7b      	ldrb	r3, [r7, #13]
 8016cd0:	fa42 f303 	asr.w	r3, r2, r3
 8016cd4:	f003 0301 	and.w	r3, r3, #1
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d02d      	beq.n	8016d38 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016cdc:	7bfa      	ldrb	r2, [r7, #15]
 8016cde:	7b7b      	ldrb	r3, [r7, #13]
 8016ce0:	4413      	add	r3, r2
 8016ce2:	461a      	mov	r2, r3
 8016ce4:	4613      	mov	r3, r2
 8016ce6:	005b      	lsls	r3, r3, #1
 8016ce8:	4413      	add	r3, r2
 8016cea:	009b      	lsls	r3, r3, #2
 8016cec:	461a      	mov	r2, r3
 8016cee:	69fb      	ldr	r3, [r7, #28]
 8016cf0:	4413      	add	r3, r2
 8016cf2:	7a1b      	ldrb	r3, [r3, #8]
 8016cf4:	f343 0303 	sbfx	r3, r3, #0, #4
 8016cf8:	b25b      	sxtb	r3, r3
 8016cfa:	f003 030f 	and.w	r3, r3, #15
 8016cfe:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8016d00:	7bfa      	ldrb	r2, [r7, #15]
 8016d02:	7b7b      	ldrb	r3, [r7, #13]
 8016d04:	4413      	add	r3, r2
 8016d06:	461a      	mov	r2, r3
 8016d08:	4613      	mov	r3, r2
 8016d0a:	005b      	lsls	r3, r3, #1
 8016d0c:	4413      	add	r3, r2
 8016d0e:	009b      	lsls	r3, r3, #2
 8016d10:	461a      	mov	r2, r3
 8016d12:	69fb      	ldr	r3, [r7, #28]
 8016d14:	4413      	add	r3, r2
 8016d16:	7a1b      	ldrb	r3, [r3, #8]
 8016d18:	f343 1303 	sbfx	r3, r3, #4, #4
 8016d1c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016d1e:	f003 030f 	and.w	r3, r3, #15
 8016d22:	b25a      	sxtb	r2, r3
 8016d24:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016d28:	4618      	mov	r0, r3
 8016d2a:	f000 f81a 	bl	8016d62 <RegionCommonValueInRange>
 8016d2e:	4603      	mov	r3, r0
 8016d30:	2b01      	cmp	r3, #1
 8016d32:	d101      	bne.n	8016d38 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8016d34:	2301      	movs	r3, #1
 8016d36:	e010      	b.n	8016d5a <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8016d38:	7b7b      	ldrb	r3, [r7, #13]
 8016d3a:	3301      	adds	r3, #1
 8016d3c:	737b      	strb	r3, [r7, #13]
 8016d3e:	7b7b      	ldrb	r3, [r7, #13]
 8016d40:	2b0f      	cmp	r3, #15
 8016d42:	d9be      	bls.n	8016cc2 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016d44:	7bfb      	ldrb	r3, [r7, #15]
 8016d46:	3310      	adds	r3, #16
 8016d48:	73fb      	strb	r3, [r7, #15]
 8016d4a:	7bbb      	ldrb	r3, [r7, #14]
 8016d4c:	3301      	adds	r3, #1
 8016d4e:	73bb      	strb	r3, [r7, #14]
 8016d50:	7bfa      	ldrb	r2, [r7, #15]
 8016d52:	79fb      	ldrb	r3, [r7, #7]
 8016d54:	429a      	cmp	r2, r3
 8016d56:	d3b1      	bcc.n	8016cbc <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8016d58:	2300      	movs	r3, #0
}
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	3710      	adds	r7, #16
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	bd80      	pop	{r7, pc}

08016d62 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8016d62:	b480      	push	{r7}
 8016d64:	b083      	sub	sp, #12
 8016d66:	af00      	add	r7, sp, #0
 8016d68:	4603      	mov	r3, r0
 8016d6a:	71fb      	strb	r3, [r7, #7]
 8016d6c:	460b      	mov	r3, r1
 8016d6e:	71bb      	strb	r3, [r7, #6]
 8016d70:	4613      	mov	r3, r2
 8016d72:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8016d74:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016d78:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016d7c:	429a      	cmp	r2, r3
 8016d7e:	db07      	blt.n	8016d90 <RegionCommonValueInRange+0x2e>
 8016d80:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016d84:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016d88:	429a      	cmp	r2, r3
 8016d8a:	dc01      	bgt.n	8016d90 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8016d8c:	2301      	movs	r3, #1
 8016d8e:	e000      	b.n	8016d92 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8016d90:	2300      	movs	r3, #0
}
 8016d92:	4618      	mov	r0, r3
 8016d94:	370c      	adds	r7, #12
 8016d96:	46bd      	mov	sp, r7
 8016d98:	bc80      	pop	{r7}
 8016d9a:	4770      	bx	lr

08016d9c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8016d9c:	b480      	push	{r7}
 8016d9e:	b085      	sub	sp, #20
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	6078      	str	r0, [r7, #4]
 8016da4:	460b      	mov	r3, r1
 8016da6:	70fb      	strb	r3, [r7, #3]
 8016da8:	4613      	mov	r3, r2
 8016daa:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8016dac:	78fb      	ldrb	r3, [r7, #3]
 8016dae:	091b      	lsrs	r3, r3, #4
 8016db0:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8016db2:	78bb      	ldrb	r3, [r7, #2]
 8016db4:	091b      	lsrs	r3, r3, #4
 8016db6:	b2db      	uxtb	r3, r3
 8016db8:	7bfa      	ldrb	r2, [r7, #15]
 8016dba:	429a      	cmp	r2, r3
 8016dbc:	d803      	bhi.n	8016dc6 <RegionCommonChanDisable+0x2a>
 8016dbe:	78fa      	ldrb	r2, [r7, #3]
 8016dc0:	78bb      	ldrb	r3, [r7, #2]
 8016dc2:	429a      	cmp	r2, r3
 8016dc4:	d301      	bcc.n	8016dca <RegionCommonChanDisable+0x2e>
    {
        return false;
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	e017      	b.n	8016dfa <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8016dca:	7bfb      	ldrb	r3, [r7, #15]
 8016dcc:	005b      	lsls	r3, r3, #1
 8016dce:	687a      	ldr	r2, [r7, #4]
 8016dd0:	4413      	add	r3, r2
 8016dd2:	881b      	ldrh	r3, [r3, #0]
 8016dd4:	b21a      	sxth	r2, r3
 8016dd6:	78fb      	ldrb	r3, [r7, #3]
 8016dd8:	f003 030f 	and.w	r3, r3, #15
 8016ddc:	2101      	movs	r1, #1
 8016dde:	fa01 f303 	lsl.w	r3, r1, r3
 8016de2:	b21b      	sxth	r3, r3
 8016de4:	43db      	mvns	r3, r3
 8016de6:	b21b      	sxth	r3, r3
 8016de8:	4013      	ands	r3, r2
 8016dea:	b219      	sxth	r1, r3
 8016dec:	7bfb      	ldrb	r3, [r7, #15]
 8016dee:	005b      	lsls	r3, r3, #1
 8016df0:	687a      	ldr	r2, [r7, #4]
 8016df2:	4413      	add	r3, r2
 8016df4:	b28a      	uxth	r2, r1
 8016df6:	801a      	strh	r2, [r3, #0]

    return true;
 8016df8:	2301      	movs	r3, #1
}
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	3714      	adds	r7, #20
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	bc80      	pop	{r7}
 8016e02:	4770      	bx	lr

08016e04 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b084      	sub	sp, #16
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	6078      	str	r0, [r7, #4]
 8016e0c:	460b      	mov	r3, r1
 8016e0e:	70fb      	strb	r3, [r7, #3]
 8016e10:	4613      	mov	r3, r2
 8016e12:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8016e14:	2300      	movs	r3, #0
 8016e16:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d101      	bne.n	8016e22 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8016e1e:	2300      	movs	r3, #0
 8016e20:	e018      	b.n	8016e54 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016e22:	78fb      	ldrb	r3, [r7, #3]
 8016e24:	73bb      	strb	r3, [r7, #14]
 8016e26:	e010      	b.n	8016e4a <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8016e28:	7bbb      	ldrb	r3, [r7, #14]
 8016e2a:	005b      	lsls	r3, r3, #1
 8016e2c:	687a      	ldr	r2, [r7, #4]
 8016e2e:	4413      	add	r3, r2
 8016e30:	881b      	ldrh	r3, [r3, #0]
 8016e32:	2110      	movs	r1, #16
 8016e34:	4618      	mov	r0, r3
 8016e36:	f7ff fef9 	bl	8016c2c <CountChannels>
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	461a      	mov	r2, r3
 8016e3e:	7bfb      	ldrb	r3, [r7, #15]
 8016e40:	4413      	add	r3, r2
 8016e42:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016e44:	7bbb      	ldrb	r3, [r7, #14]
 8016e46:	3301      	adds	r3, #1
 8016e48:	73bb      	strb	r3, [r7, #14]
 8016e4a:	7bba      	ldrb	r2, [r7, #14]
 8016e4c:	78bb      	ldrb	r3, [r7, #2]
 8016e4e:	429a      	cmp	r2, r3
 8016e50:	d3ea      	bcc.n	8016e28 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8016e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e54:	4618      	mov	r0, r3
 8016e56:	3710      	adds	r7, #16
 8016e58:	46bd      	mov	sp, r7
 8016e5a:	bd80      	pop	{r7, pc}

08016e5c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8016e5c:	b480      	push	{r7}
 8016e5e:	b087      	sub	sp, #28
 8016e60:	af00      	add	r7, sp, #0
 8016e62:	60f8      	str	r0, [r7, #12]
 8016e64:	60b9      	str	r1, [r7, #8]
 8016e66:	4613      	mov	r3, r2
 8016e68:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d016      	beq.n	8016e9e <RegionCommonChanMaskCopy+0x42>
 8016e70:	68bb      	ldr	r3, [r7, #8]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d013      	beq.n	8016e9e <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8016e76:	2300      	movs	r3, #0
 8016e78:	75fb      	strb	r3, [r7, #23]
 8016e7a:	e00c      	b.n	8016e96 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8016e7c:	7dfb      	ldrb	r3, [r7, #23]
 8016e7e:	005b      	lsls	r3, r3, #1
 8016e80:	68ba      	ldr	r2, [r7, #8]
 8016e82:	441a      	add	r2, r3
 8016e84:	7dfb      	ldrb	r3, [r7, #23]
 8016e86:	005b      	lsls	r3, r3, #1
 8016e88:	68f9      	ldr	r1, [r7, #12]
 8016e8a:	440b      	add	r3, r1
 8016e8c:	8812      	ldrh	r2, [r2, #0]
 8016e8e:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8016e90:	7dfb      	ldrb	r3, [r7, #23]
 8016e92:	3301      	adds	r3, #1
 8016e94:	75fb      	strb	r3, [r7, #23]
 8016e96:	7dfa      	ldrb	r2, [r7, #23]
 8016e98:	79fb      	ldrb	r3, [r7, #7]
 8016e9a:	429a      	cmp	r2, r3
 8016e9c:	d3ee      	bcc.n	8016e7c <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8016e9e:	bf00      	nop
 8016ea0:	371c      	adds	r7, #28
 8016ea2:	46bd      	mov	sp, r7
 8016ea4:	bc80      	pop	{r7}
 8016ea6:	4770      	bx	lr

08016ea8 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016ea8:	b082      	sub	sp, #8
 8016eaa:	b580      	push	{r7, lr}
 8016eac:	b086      	sub	sp, #24
 8016eae:	af00      	add	r7, sp, #0
 8016eb0:	60f8      	str	r0, [r7, #12]
 8016eb2:	60b9      	str	r1, [r7, #8]
 8016eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8016eb6:	4613      	mov	r3, r2
 8016eb8:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016eba:	79f9      	ldrb	r1, [r7, #7]
 8016ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016ec0:	cb0c      	ldmia	r3, {r2, r3}
 8016ec2:	68f8      	ldr	r0, [r7, #12]
 8016ec4:	f7ff fd8c 	bl	80169e0 <GetDutyCycle>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	68da      	ldr	r2, [r3, #12]
 8016ed0:	8afb      	ldrh	r3, [r7, #22]
 8016ed2:	68b9      	ldr	r1, [r7, #8]
 8016ed4:	fb01 f303 	mul.w	r3, r1, r3
 8016ed8:	429a      	cmp	r2, r3
 8016eda:	d909      	bls.n	8016ef0 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	68da      	ldr	r2, [r3, #12]
 8016ee0:	8afb      	ldrh	r3, [r7, #22]
 8016ee2:	68b9      	ldr	r1, [r7, #8]
 8016ee4:	fb01 f303 	mul.w	r3, r1, r3
 8016ee8:	1ad2      	subs	r2, r2, r3
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8016eee:	e002      	b.n	8016ef6 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	60da      	str	r2, [r3, #12]
}
 8016ef6:	bf00      	nop
 8016ef8:	3718      	adds	r7, #24
 8016efa:	46bd      	mov	sp, r7
 8016efc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016f00:	b002      	add	sp, #8
 8016f02:	4770      	bx	lr

08016f04 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8016f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f06:	b08f      	sub	sp, #60	; 0x3c
 8016f08:	af04      	add	r7, sp, #16
 8016f0a:	6039      	str	r1, [r7, #0]
 8016f0c:	4611      	mov	r1, r2
 8016f0e:	461a      	mov	r2, r3
 8016f10:	4603      	mov	r3, r0
 8016f12:	71fb      	strb	r3, [r7, #7]
 8016f14:	460b      	mov	r3, r1
 8016f16:	71bb      	strb	r3, [r7, #6]
 8016f18:	4613      	mov	r3, r2
 8016f1a:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8016f20:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8016f22:	f006 f995 	bl	801d250 <UTIL_TIMER_GetCurrentTime>
 8016f26:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8016f28:	2300      	movs	r3, #0
 8016f2a:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8016f2c:	2301      	movs	r3, #1
 8016f2e:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8016f30:	2300      	movs	r3, #0
 8016f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8016f36:	2300      	movs	r3, #0
 8016f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8016f3c:	e0ba      	b.n	80170b4 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8016f3e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016f42:	4613      	mov	r3, r2
 8016f44:	005b      	lsls	r3, r3, #1
 8016f46:	4413      	add	r3, r2
 8016f48:	00db      	lsls	r3, r3, #3
 8016f4a:	461a      	mov	r2, r3
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	189c      	adds	r4, r3, r2
 8016f50:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8016f54:	797a      	ldrb	r2, [r7, #5]
 8016f56:	79fd      	ldrb	r5, [r7, #7]
 8016f58:	69fb      	ldr	r3, [r7, #28]
 8016f5a:	9302      	str	r3, [sp, #8]
 8016f5c:	46ec      	mov	ip, sp
 8016f5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016f62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016f66:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016f6a:	4633      	mov	r3, r6
 8016f6c:	4629      	mov	r1, r5
 8016f6e:	4620      	mov	r0, r4
 8016f70:	f7ff fe22 	bl	8016bb8 <UpdateTimeCredits>
 8016f74:	4603      	mov	r3, r0
 8016f76:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8016f78:	8afa      	ldrh	r2, [r7, #22]
 8016f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f7c:	fb02 f303 	mul.w	r3, r2, r3
 8016f80:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8016f82:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016f86:	4613      	mov	r3, r2
 8016f88:	005b      	lsls	r3, r3, #1
 8016f8a:	4413      	add	r3, r2
 8016f8c:	00db      	lsls	r3, r3, #3
 8016f8e:	461a      	mov	r2, r3
 8016f90:	683b      	ldr	r3, [r7, #0]
 8016f92:	4413      	add	r3, r2
 8016f94:	68db      	ldr	r3, [r3, #12]
 8016f96:	69ba      	ldr	r2, [r7, #24]
 8016f98:	429a      	cmp	r2, r3
 8016f9a:	d908      	bls.n	8016fae <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8016f9c:	797b      	ldrb	r3, [r7, #5]
 8016f9e:	f083 0301 	eor.w	r3, r3, #1
 8016fa2:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d013      	beq.n	8016fd0 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8016fa8:	79fb      	ldrb	r3, [r7, #7]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d010      	beq.n	8016fd0 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8016fae:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016fb2:	4613      	mov	r3, r2
 8016fb4:	005b      	lsls	r3, r3, #1
 8016fb6:	4413      	add	r3, r2
 8016fb8:	00db      	lsls	r3, r3, #3
 8016fba:	461a      	mov	r2, r3
 8016fbc:	683b      	ldr	r3, [r7, #0]
 8016fbe:	4413      	add	r3, r2
 8016fc0:	2201      	movs	r2, #1
 8016fc2:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8016fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016fc8:	3301      	adds	r3, #1
 8016fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8016fce:	e06c      	b.n	80170aa <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8016fd0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016fd4:	4613      	mov	r3, r2
 8016fd6:	005b      	lsls	r3, r3, #1
 8016fd8:	4413      	add	r3, r2
 8016fda:	00db      	lsls	r3, r3, #3
 8016fdc:	461a      	mov	r2, r3
 8016fde:	683b      	ldr	r3, [r7, #0]
 8016fe0:	4413      	add	r3, r2
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8016fe6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016fea:	4613      	mov	r3, r2
 8016fec:	005b      	lsls	r3, r3, #1
 8016fee:	4413      	add	r3, r2
 8016ff0:	00db      	lsls	r3, r3, #3
 8016ff2:	461a      	mov	r2, r3
 8016ff4:	683b      	ldr	r3, [r7, #0]
 8016ff6:	4413      	add	r3, r2
 8016ff8:	691b      	ldr	r3, [r3, #16]
 8016ffa:	69ba      	ldr	r2, [r7, #24]
 8016ffc:	429a      	cmp	r2, r3
 8016ffe:	d815      	bhi.n	801702c <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8017000:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017004:	4613      	mov	r3, r2
 8017006:	005b      	lsls	r3, r3, #1
 8017008:	4413      	add	r3, r2
 801700a:	00db      	lsls	r3, r3, #3
 801700c:	461a      	mov	r2, r3
 801700e:	683b      	ldr	r3, [r7, #0]
 8017010:	4413      	add	r3, r2
 8017012:	68db      	ldr	r3, [r3, #12]
 8017014:	69ba      	ldr	r2, [r7, #24]
 8017016:	1ad3      	subs	r3, r2, r3
 8017018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801701a:	4293      	cmp	r3, r2
 801701c:	bf28      	it	cs
 801701e:	4613      	movcs	r3, r2
 8017020:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8017022:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017026:	3301      	adds	r3, #1
 8017028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 801702c:	79fb      	ldrb	r3, [r7, #7]
 801702e:	f083 0301 	eor.w	r3, r3, #1
 8017032:	b2db      	uxtb	r3, r3
 8017034:	2b00      	cmp	r3, #0
 8017036:	d038      	beq.n	80170aa <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8017038:	2300      	movs	r3, #0
 801703a:	60fb      	str	r3, [r7, #12]
 801703c:	2300      	movs	r3, #0
 801703e:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017040:	8afb      	ldrh	r3, [r7, #22]
 8017042:	2b64      	cmp	r3, #100	; 0x64
 8017044:	d103      	bne.n	801704e <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8017046:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801704a:	60fb      	str	r3, [r7, #12]
 801704c:	e009      	b.n	8017062 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801704e:	8afb      	ldrh	r3, [r7, #22]
 8017050:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017054:	d103      	bne.n	801705e <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8017056:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 801705a:	60fb      	str	r3, [r7, #12]
 801705c:	e001      	b.n	8017062 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801705e:	4b1e      	ldr	r3, [pc, #120]	; (80170d8 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8017060:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017064:	4a1c      	ldr	r2, [pc, #112]	; (80170d8 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8017066:	4293      	cmp	r3, r2
 8017068:	d90e      	bls.n	8017088 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801706a:	68fa      	ldr	r2, [r7, #12]
 801706c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801706e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8017072:	3b30      	subs	r3, #48	; 0x30
 8017074:	4919      	ldr	r1, [pc, #100]	; (80170dc <RegionCommonUpdateBandTimeOff+0x1d8>)
 8017076:	fba1 1303 	umull	r1, r3, r1, r3
 801707a:	0c1b      	lsrs	r3, r3, #16
 801707c:	3301      	adds	r3, #1
 801707e:	4918      	ldr	r1, [pc, #96]	; (80170e0 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8017080:	fb01 f303 	mul.w	r3, r1, r3
 8017084:	4413      	add	r3, r2
 8017086:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8017088:	f107 000c 	add.w	r0, r7, #12
 801708c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801708e:	9300      	str	r3, [sp, #0]
 8017090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017092:	f107 020c 	add.w	r2, r7, #12
 8017096:	ca06      	ldmia	r2, {r1, r2}
 8017098:	f005 f9f1 	bl	801c47e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 801709c:	f107 030c 	add.w	r3, r7, #12
 80170a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80170a4:	f005 faaa 	bl	801c5fc <SysTimeToMs>
 80170a8:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80170aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80170ae:	3301      	adds	r3, #1
 80170b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80170b4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80170b8:	79bb      	ldrb	r3, [r7, #6]
 80170ba:	429a      	cmp	r2, r3
 80170bc:	f4ff af3f 	bcc.w	8016f3e <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80170c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d102      	bne.n	80170ce <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80170c8:	f04f 33ff 	mov.w	r3, #4294967295
 80170cc:	e000      	b.n	80170d0 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80170ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80170d0:	4618      	mov	r0, r3
 80170d2:	372c      	adds	r7, #44	; 0x2c
 80170d4:	46bd      	mov	sp, r7
 80170d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170d8:	0001ec30 	.word	0x0001ec30
 80170dc:	c22e4507 	.word	0xc22e4507
 80170e0:	00015180 	.word	0x00015180

080170e4 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80170e4:	b480      	push	{r7}
 80170e6:	b085      	sub	sp, #20
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	6078      	str	r0, [r7, #4]
 80170ec:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80170ee:	2300      	movs	r3, #0
 80170f0:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	781b      	ldrb	r3, [r3, #0]
 80170f6:	2b03      	cmp	r3, #3
 80170f8:	d13f      	bne.n	801717a <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	3301      	adds	r3, #1
 80170fe:	781b      	ldrb	r3, [r3, #0]
 8017100:	b25a      	sxtb	r2, r3
 8017102:	683b      	ldr	r3, [r7, #0]
 8017104:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8017106:	683b      	ldr	r3, [r7, #0]
 8017108:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801710c:	f003 030f 	and.w	r3, r3, #15
 8017110:	b25a      	sxtb	r2, r3
 8017112:	683b      	ldr	r3, [r7, #0]
 8017114:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8017116:	683b      	ldr	r3, [r7, #0]
 8017118:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801711c:	b2db      	uxtb	r3, r3
 801711e:	091b      	lsrs	r3, r3, #4
 8017120:	b2db      	uxtb	r3, r3
 8017122:	b25a      	sxtb	r2, r3
 8017124:	683b      	ldr	r3, [r7, #0]
 8017126:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	3302      	adds	r3, #2
 801712c:	781b      	ldrb	r3, [r3, #0]
 801712e:	b29a      	uxth	r2, r3
 8017130:	683b      	ldr	r3, [r7, #0]
 8017132:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017134:	683b      	ldr	r3, [r7, #0]
 8017136:	889b      	ldrh	r3, [r3, #4]
 8017138:	b21a      	sxth	r2, r3
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	3303      	adds	r3, #3
 801713e:	781b      	ldrb	r3, [r3, #0]
 8017140:	021b      	lsls	r3, r3, #8
 8017142:	b21b      	sxth	r3, r3
 8017144:	4313      	orrs	r3, r2
 8017146:	b21b      	sxth	r3, r3
 8017148:	b29a      	uxth	r2, r3
 801714a:	683b      	ldr	r3, [r7, #0]
 801714c:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	791a      	ldrb	r2, [r3, #4]
 8017152:	683b      	ldr	r3, [r7, #0]
 8017154:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8017156:	683b      	ldr	r3, [r7, #0]
 8017158:	781b      	ldrb	r3, [r3, #0]
 801715a:	091b      	lsrs	r3, r3, #4
 801715c:	b2db      	uxtb	r3, r3
 801715e:	f003 0307 	and.w	r3, r3, #7
 8017162:	b2da      	uxtb	r2, r3
 8017164:	683b      	ldr	r3, [r7, #0]
 8017166:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017168:	683b      	ldr	r3, [r7, #0]
 801716a:	781b      	ldrb	r3, [r3, #0]
 801716c:	f003 030f 	and.w	r3, r3, #15
 8017170:	b2da      	uxtb	r2, r3
 8017172:	683b      	ldr	r3, [r7, #0]
 8017174:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8017176:	2305      	movs	r3, #5
 8017178:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801717a:	7bfb      	ldrb	r3, [r7, #15]
}
 801717c:	4618      	mov	r0, r3
 801717e:	3714      	adds	r7, #20
 8017180:	46bd      	mov	sp, r7
 8017182:	bc80      	pop	{r7}
 8017184:	4770      	bx	lr

08017186 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017186:	b5b0      	push	{r4, r5, r7, lr}
 8017188:	b088      	sub	sp, #32
 801718a:	af02      	add	r7, sp, #8
 801718c:	60f8      	str	r0, [r7, #12]
 801718e:	60b9      	str	r1, [r7, #8]
 8017190:	607a      	str	r2, [r7, #4]
 8017192:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	791b      	ldrb	r3, [r3, #4]
 8017198:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	799b      	ldrb	r3, [r3, #6]
 801719e:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	79db      	ldrb	r3, [r3, #7]
 80171a4:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	7a1b      	ldrb	r3, [r3, #8]
 80171aa:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	795b      	ldrb	r3, [r3, #5]
 80171b0:	f083 0301 	eor.w	r3, r3, #1
 80171b4:	b2db      	uxtb	r3, r3
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d008      	beq.n	80171cc <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	7adb      	ldrb	r3, [r3, #11]
 80171be:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	7a5b      	ldrb	r3, [r3, #9]
 80171c4:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	7a9b      	ldrb	r3, [r3, #10]
 80171ca:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80171cc:	7dfb      	ldrb	r3, [r7, #23]
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d04a      	beq.n	8017268 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80171d2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80171d6:	2b0f      	cmp	r3, #15
 80171d8:	d103      	bne.n	80171e2 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	7a5b      	ldrb	r3, [r3, #9]
 80171de:	75bb      	strb	r3, [r7, #22]
 80171e0:	e01d      	b.n	801721e <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	7b18      	ldrb	r0, [r3, #12]
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	6919      	ldr	r1, [r3, #16]
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80171f6:	68fa      	ldr	r2, [r7, #12]
 80171f8:	6992      	ldr	r2, [r2, #24]
 80171fa:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80171fe:	9201      	str	r2, [sp, #4]
 8017200:	9300      	str	r3, [sp, #0]
 8017202:	462b      	mov	r3, r5
 8017204:	4622      	mov	r2, r4
 8017206:	f7ff fd3a 	bl	8016c7e <RegionCommonChanVerifyDr>
 801720a:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 801720c:	f083 0301 	eor.w	r3, r3, #1
 8017210:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017212:	2b00      	cmp	r3, #0
 8017214:	d003      	beq.n	801721e <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8017216:	7dfb      	ldrb	r3, [r7, #23]
 8017218:	f023 0302 	bic.w	r3, r3, #2
 801721c:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801721e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8017222:	2b0f      	cmp	r3, #15
 8017224:	d103      	bne.n	801722e <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	7a9b      	ldrb	r3, [r3, #10]
 801722a:	757b      	strb	r3, [r7, #21]
 801722c:	e01c      	b.n	8017268 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801723a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801723e:	4618      	mov	r0, r3
 8017240:	f7ff fd8f 	bl	8016d62 <RegionCommonValueInRange>
 8017244:	4603      	mov	r3, r0
 8017246:	2b00      	cmp	r3, #0
 8017248:	d10e      	bne.n	8017268 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8017250:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8017254:	429a      	cmp	r2, r3
 8017256:	da03      	bge.n	8017260 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	7f5b      	ldrb	r3, [r3, #29]
 801725c:	757b      	strb	r3, [r7, #21]
 801725e:	e003      	b.n	8017268 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8017260:	7dfb      	ldrb	r3, [r7, #23]
 8017262:	f023 0304 	bic.w	r3, r3, #4
 8017266:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8017268:	7dfb      	ldrb	r3, [r7, #23]
 801726a:	2b07      	cmp	r3, #7
 801726c:	d105      	bne.n	801727a <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801726e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d101      	bne.n	801727a <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8017276:	2301      	movs	r3, #1
 8017278:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801727a:	68bb      	ldr	r3, [r7, #8]
 801727c:	7dba      	ldrb	r2, [r7, #22]
 801727e:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	7d7a      	ldrb	r2, [r7, #21]
 8017284:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017286:	7d3a      	ldrb	r2, [r7, #20]
 8017288:	683b      	ldr	r3, [r7, #0]
 801728a:	701a      	strb	r2, [r3, #0]

    return status;
 801728c:	7dfb      	ldrb	r3, [r7, #23]
}
 801728e:	4618      	mov	r0, r3
 8017290:	3718      	adds	r7, #24
 8017292:	46bd      	mov	sp, r7
 8017294:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017298 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8017298:	b480      	push	{r7}
 801729a:	b083      	sub	sp, #12
 801729c:	af00      	add	r7, sp, #0
 801729e:	4603      	mov	r3, r0
 80172a0:	6039      	str	r1, [r7, #0]
 80172a2:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80172a4:	79fb      	ldrb	r3, [r7, #7]
 80172a6:	4a06      	ldr	r2, [pc, #24]	; (80172c0 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80172a8:	fa02 f303 	lsl.w	r3, r2, r3
 80172ac:	461a      	mov	r2, r3
 80172ae:	683b      	ldr	r3, [r7, #0]
 80172b0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80172b4:	4618      	mov	r0, r3
 80172b6:	370c      	adds	r7, #12
 80172b8:	46bd      	mov	sp, r7
 80172ba:	bc80      	pop	{r7}
 80172bc:	4770      	bx	lr
 80172be:	bf00      	nop
 80172c0:	000f4240 	.word	0x000f4240

080172c4 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80172c4:	b480      	push	{r7}
 80172c6:	b083      	sub	sp, #12
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	4603      	mov	r3, r0
 80172cc:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80172ce:	79fb      	ldrb	r3, [r7, #7]
 80172d0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80172d4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80172d8:	4618      	mov	r0, r3
 80172da:	370c      	adds	r7, #12
 80172dc:	46bd      	mov	sp, r7
 80172de:	bc80      	pop	{r7}
 80172e0:	4770      	bx	lr
	...

080172e4 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80172e4:	b480      	push	{r7}
 80172e6:	b085      	sub	sp, #20
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	60f8      	str	r0, [r7, #12]
 80172ec:	607a      	str	r2, [r7, #4]
 80172ee:	603b      	str	r3, [r7, #0]
 80172f0:	460b      	mov	r3, r1
 80172f2:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80172f4:	7afa      	ldrb	r2, [r7, #11]
 80172f6:	7afb      	ldrb	r3, [r7, #11]
 80172f8:	3b04      	subs	r3, #4
 80172fa:	4619      	mov	r1, r3
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	fb03 f101 	mul.w	r1, r3, r1
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017308:	fb00 f303 	mul.w	r3, r0, r3
 801730c:	440b      	add	r3, r1
 801730e:	005b      	lsls	r3, r3, #1
 8017310:	2b00      	cmp	r3, #0
 8017312:	d013      	beq.n	801733c <RegionCommonComputeRxWindowParameters+0x58>
 8017314:	7afb      	ldrb	r3, [r7, #11]
 8017316:	3b04      	subs	r3, #4
 8017318:	4619      	mov	r1, r3
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	fb03 f101 	mul.w	r1, r3, r1
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017326:	fb00 f303 	mul.w	r3, r0, r3
 801732a:	440b      	add	r3, r1
 801732c:	0059      	lsls	r1, r3, #1
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	440b      	add	r3, r1
 8017332:	1e59      	subs	r1, r3, #1
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	fbb1 f3f3 	udiv	r3, r1, r3
 801733a:	e00f      	b.n	801735c <RegionCommonComputeRxWindowParameters+0x78>
 801733c:	7afb      	ldrb	r3, [r7, #11]
 801733e:	3b04      	subs	r3, #4
 8017340:	4619      	mov	r1, r3
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	fb03 f101 	mul.w	r1, r3, r1
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801734e:	fb00 f303 	mul.w	r3, r0, r3
 8017352:	440b      	add	r3, r1
 8017354:	0059      	lsls	r1, r3, #1
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	fbb1 f3f3 	udiv	r3, r1, r3
 801735c:	429a      	cmp	r2, r3
 801735e:	bf38      	it	cc
 8017360:	461a      	movcc	r2, r3
 8017362:	69bb      	ldr	r3, [r7, #24]
 8017364:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	009b      	lsls	r3, r3, #2
 801736a:	4619      	mov	r1, r3
 801736c:	69bb      	ldr	r3, [r7, #24]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	68fa      	ldr	r2, [r7, #12]
 8017372:	fb02 f303 	mul.w	r3, r2, r3
 8017376:	2b00      	cmp	r3, #0
 8017378:	d007      	beq.n	801738a <RegionCommonComputeRxWindowParameters+0xa6>
 801737a:	69bb      	ldr	r3, [r7, #24]
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	68fa      	ldr	r2, [r7, #12]
 8017380:	fb02 f303 	mul.w	r3, r2, r3
 8017384:	3301      	adds	r3, #1
 8017386:	085b      	lsrs	r3, r3, #1
 8017388:	e005      	b.n	8017396 <RegionCommonComputeRxWindowParameters+0xb2>
 801738a:	69bb      	ldr	r3, [r7, #24]
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	68fa      	ldr	r2, [r7, #12]
 8017390:	fb02 f303 	mul.w	r3, r2, r3
 8017394:	085b      	lsrs	r3, r3, #1
 8017396:	1acb      	subs	r3, r1, r3
 8017398:	683a      	ldr	r2, [r7, #0]
 801739a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801739e:	fb01 f202 	mul.w	r2, r1, r2
 80173a2:	1a9b      	subs	r3, r3, r2
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	dd27      	ble.n	80173f8 <RegionCommonComputeRxWindowParameters+0x114>
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	009b      	lsls	r3, r3, #2
 80173ac:	4619      	mov	r1, r3
 80173ae:	69bb      	ldr	r3, [r7, #24]
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	68fa      	ldr	r2, [r7, #12]
 80173b4:	fb02 f303 	mul.w	r3, r2, r3
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d007      	beq.n	80173cc <RegionCommonComputeRxWindowParameters+0xe8>
 80173bc:	69bb      	ldr	r3, [r7, #24]
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	68fa      	ldr	r2, [r7, #12]
 80173c2:	fb02 f303 	mul.w	r3, r2, r3
 80173c6:	3301      	adds	r3, #1
 80173c8:	085b      	lsrs	r3, r3, #1
 80173ca:	e005      	b.n	80173d8 <RegionCommonComputeRxWindowParameters+0xf4>
 80173cc:	69bb      	ldr	r3, [r7, #24]
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	68fa      	ldr	r2, [r7, #12]
 80173d2:	fb02 f303 	mul.w	r3, r2, r3
 80173d6:	085b      	lsrs	r3, r3, #1
 80173d8:	1acb      	subs	r3, r1, r3
 80173da:	683a      	ldr	r2, [r7, #0]
 80173dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80173e0:	fb01 f202 	mul.w	r2, r1, r2
 80173e4:	1a9b      	subs	r3, r3, r2
 80173e6:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80173ea:	4a19      	ldr	r2, [pc, #100]	; (8017450 <RegionCommonComputeRxWindowParameters+0x16c>)
 80173ec:	fb82 1203 	smull	r1, r2, r2, r3
 80173f0:	1192      	asrs	r2, r2, #6
 80173f2:	17db      	asrs	r3, r3, #31
 80173f4:	1ad3      	subs	r3, r2, r3
 80173f6:	e024      	b.n	8017442 <RegionCommonComputeRxWindowParameters+0x15e>
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	009b      	lsls	r3, r3, #2
 80173fc:	4619      	mov	r1, r3
 80173fe:	69bb      	ldr	r3, [r7, #24]
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	68fa      	ldr	r2, [r7, #12]
 8017404:	fb02 f303 	mul.w	r3, r2, r3
 8017408:	2b00      	cmp	r3, #0
 801740a:	d007      	beq.n	801741c <RegionCommonComputeRxWindowParameters+0x138>
 801740c:	69bb      	ldr	r3, [r7, #24]
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	68fa      	ldr	r2, [r7, #12]
 8017412:	fb02 f303 	mul.w	r3, r2, r3
 8017416:	3301      	adds	r3, #1
 8017418:	085b      	lsrs	r3, r3, #1
 801741a:	e005      	b.n	8017428 <RegionCommonComputeRxWindowParameters+0x144>
 801741c:	69bb      	ldr	r3, [r7, #24]
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	68fa      	ldr	r2, [r7, #12]
 8017422:	fb02 f303 	mul.w	r3, r2, r3
 8017426:	085b      	lsrs	r3, r3, #1
 8017428:	1acb      	subs	r3, r1, r3
 801742a:	683a      	ldr	r2, [r7, #0]
 801742c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017430:	fb01 f202 	mul.w	r2, r1, r2
 8017434:	1a9b      	subs	r3, r3, r2
 8017436:	4a06      	ldr	r2, [pc, #24]	; (8017450 <RegionCommonComputeRxWindowParameters+0x16c>)
 8017438:	fb82 1203 	smull	r1, r2, r2, r3
 801743c:	1192      	asrs	r2, r2, #6
 801743e:	17db      	asrs	r3, r3, #31
 8017440:	1ad3      	subs	r3, r2, r3
 8017442:	69fa      	ldr	r2, [r7, #28]
 8017444:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8017446:	bf00      	nop
 8017448:	3714      	adds	r7, #20
 801744a:	46bd      	mov	sp, r7
 801744c:	bc80      	pop	{r7}
 801744e:	4770      	bx	lr
 8017450:	10624dd3 	.word	0x10624dd3

08017454 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8017454:	b580      	push	{r7, lr}
 8017456:	b086      	sub	sp, #24
 8017458:	af00      	add	r7, sp, #0
 801745a:	4603      	mov	r3, r0
 801745c:	60b9      	str	r1, [r7, #8]
 801745e:	607a      	str	r2, [r7, #4]
 8017460:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8017462:	2300      	movs	r3, #0
 8017464:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8017466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801746a:	005b      	lsls	r3, r3, #1
 801746c:	4618      	mov	r0, r3
 801746e:	f7e9 fc0f 	bl	8000c90 <__aeabi_ui2f>
 8017472:	4603      	mov	r3, r0
 8017474:	4619      	mov	r1, r3
 8017476:	68b8      	ldr	r0, [r7, #8]
 8017478:	f7e9 fb58 	bl	8000b2c <__aeabi_fsub>
 801747c:	4603      	mov	r3, r0
 801747e:	6879      	ldr	r1, [r7, #4]
 8017480:	4618      	mov	r0, r3
 8017482:	f7e9 fb53 	bl	8000b2c <__aeabi_fsub>
 8017486:	4603      	mov	r3, r0
 8017488:	4618      	mov	r0, r3
 801748a:	f7e8 ffe1 	bl	8000450 <__aeabi_f2d>
 801748e:	4602      	mov	r2, r0
 8017490:	460b      	mov	r3, r1
 8017492:	4610      	mov	r0, r2
 8017494:	4619      	mov	r1, r3
 8017496:	f006 fad7 	bl	801da48 <floor>
 801749a:	4602      	mov	r2, r0
 801749c:	460b      	mov	r3, r1
 801749e:	4610      	mov	r0, r2
 80174a0:	4619      	mov	r1, r3
 80174a2:	f7e9 fac7 	bl	8000a34 <__aeabi_d2iz>
 80174a6:	4603      	mov	r3, r0
 80174a8:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80174aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80174ae:	4618      	mov	r0, r3
 80174b0:	3718      	adds	r7, #24
 80174b2:	46bd      	mov	sp, r7
 80174b4:	bd80      	pop	{r7, pc}

080174b6 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80174b6:	b590      	push	{r4, r7, lr}
 80174b8:	b087      	sub	sp, #28
 80174ba:	af00      	add	r7, sp, #0
 80174bc:	60f8      	str	r0, [r7, #12]
 80174be:	60b9      	str	r1, [r7, #8]
 80174c0:	607a      	str	r2, [r7, #4]
 80174c2:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80174c4:	2300      	movs	r3, #0
 80174c6:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80174c8:	2300      	movs	r3, #0
 80174ca:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80174cc:	2300      	movs	r3, #0
 80174ce:	757b      	strb	r3, [r7, #21]
 80174d0:	2300      	movs	r3, #0
 80174d2:	753b      	strb	r3, [r7, #20]
 80174d4:	e09c      	b.n	8017610 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80174d6:	2300      	movs	r3, #0
 80174d8:	74fb      	strb	r3, [r7, #19]
 80174da:	e08f      	b.n	80175fc <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	685a      	ldr	r2, [r3, #4]
 80174e0:	7d3b      	ldrb	r3, [r7, #20]
 80174e2:	005b      	lsls	r3, r3, #1
 80174e4:	4413      	add	r3, r2
 80174e6:	881b      	ldrh	r3, [r3, #0]
 80174e8:	461a      	mov	r2, r3
 80174ea:	7cfb      	ldrb	r3, [r7, #19]
 80174ec:	fa42 f303 	asr.w	r3, r2, r3
 80174f0:	f003 0301 	and.w	r3, r3, #1
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d07e      	beq.n	80175f6 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	689a      	ldr	r2, [r3, #8]
 80174fc:	7d79      	ldrb	r1, [r7, #21]
 80174fe:	7cfb      	ldrb	r3, [r7, #19]
 8017500:	440b      	add	r3, r1
 8017502:	4619      	mov	r1, r3
 8017504:	460b      	mov	r3, r1
 8017506:	005b      	lsls	r3, r3, #1
 8017508:	440b      	add	r3, r1
 801750a:	009b      	lsls	r3, r3, #2
 801750c:	4413      	add	r3, r2
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d06b      	beq.n	80175ec <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	781b      	ldrb	r3, [r3, #0]
 8017518:	f083 0301 	eor.w	r3, r3, #1
 801751c:	b2db      	uxtb	r3, r3
 801751e:	2b00      	cmp	r3, #0
 8017520:	d011      	beq.n	8017546 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8017522:	68fb      	ldr	r3, [r7, #12]
 8017524:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017526:	2b00      	cmp	r3, #0
 8017528:	d00d      	beq.n	8017546 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	695a      	ldr	r2, [r3, #20]
 801752e:	7d3b      	ldrb	r3, [r7, #20]
 8017530:	005b      	lsls	r3, r3, #1
 8017532:	4413      	add	r3, r2
 8017534:	881b      	ldrh	r3, [r3, #0]
 8017536:	461a      	mov	r2, r3
 8017538:	7cfb      	ldrb	r3, [r7, #19]
 801753a:	fa42 f303 	asr.w	r3, r2, r3
 801753e:	f003 0301 	and.w	r3, r3, #1
 8017542:	2b00      	cmp	r3, #0
 8017544:	d054      	beq.n	80175f0 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	785b      	ldrb	r3, [r3, #1]
 801754a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	689a      	ldr	r2, [r3, #8]
 8017550:	7d79      	ldrb	r1, [r7, #21]
 8017552:	7cfb      	ldrb	r3, [r7, #19]
 8017554:	440b      	add	r3, r1
 8017556:	4619      	mov	r1, r3
 8017558:	460b      	mov	r3, r1
 801755a:	005b      	lsls	r3, r3, #1
 801755c:	440b      	add	r3, r1
 801755e:	009b      	lsls	r3, r3, #2
 8017560:	4413      	add	r3, r2
 8017562:	7a1b      	ldrb	r3, [r3, #8]
 8017564:	f343 0303 	sbfx	r3, r3, #0, #4
 8017568:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801756a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	689a      	ldr	r2, [r3, #8]
 8017570:	7d79      	ldrb	r1, [r7, #21]
 8017572:	7cfb      	ldrb	r3, [r7, #19]
 8017574:	440b      	add	r3, r1
 8017576:	4619      	mov	r1, r3
 8017578:	460b      	mov	r3, r1
 801757a:	005b      	lsls	r3, r3, #1
 801757c:	440b      	add	r3, r1
 801757e:	009b      	lsls	r3, r3, #2
 8017580:	4413      	add	r3, r2
 8017582:	7a1b      	ldrb	r3, [r3, #8]
 8017584:	f343 1303 	sbfx	r3, r3, #4, #4
 8017588:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801758a:	461a      	mov	r2, r3
 801758c:	4621      	mov	r1, r4
 801758e:	f7ff fbe8 	bl	8016d62 <RegionCommonValueInRange>
 8017592:	4603      	mov	r3, r0
 8017594:	2b00      	cmp	r3, #0
 8017596:	d02d      	beq.n	80175f4 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	68da      	ldr	r2, [r3, #12]
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	6899      	ldr	r1, [r3, #8]
 80175a0:	7d78      	ldrb	r0, [r7, #21]
 80175a2:	7cfb      	ldrb	r3, [r7, #19]
 80175a4:	4403      	add	r3, r0
 80175a6:	4618      	mov	r0, r3
 80175a8:	4603      	mov	r3, r0
 80175aa:	005b      	lsls	r3, r3, #1
 80175ac:	4403      	add	r3, r0
 80175ae:	009b      	lsls	r3, r3, #2
 80175b0:	440b      	add	r3, r1
 80175b2:	7a5b      	ldrb	r3, [r3, #9]
 80175b4:	4619      	mov	r1, r3
 80175b6:	460b      	mov	r3, r1
 80175b8:	005b      	lsls	r3, r3, #1
 80175ba:	440b      	add	r3, r1
 80175bc:	00db      	lsls	r3, r3, #3
 80175be:	4413      	add	r3, r2
 80175c0:	7d1b      	ldrb	r3, [r3, #20]
 80175c2:	f083 0301 	eor.w	r3, r3, #1
 80175c6:	b2db      	uxtb	r3, r3
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d003      	beq.n	80175d4 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80175cc:	7dbb      	ldrb	r3, [r7, #22]
 80175ce:	3301      	adds	r3, #1
 80175d0:	75bb      	strb	r3, [r7, #22]
                    continue;
 80175d2:	e010      	b.n	80175f6 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80175d4:	7dfb      	ldrb	r3, [r7, #23]
 80175d6:	1c5a      	adds	r2, r3, #1
 80175d8:	75fa      	strb	r2, [r7, #23]
 80175da:	461a      	mov	r2, r3
 80175dc:	68bb      	ldr	r3, [r7, #8]
 80175de:	4413      	add	r3, r2
 80175e0:	7d79      	ldrb	r1, [r7, #21]
 80175e2:	7cfa      	ldrb	r2, [r7, #19]
 80175e4:	440a      	add	r2, r1
 80175e6:	b2d2      	uxtb	r2, r2
 80175e8:	701a      	strb	r2, [r3, #0]
 80175ea:	e004      	b.n	80175f6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80175ec:	bf00      	nop
 80175ee:	e002      	b.n	80175f6 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80175f0:	bf00      	nop
 80175f2:	e000      	b.n	80175f6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80175f4:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80175f6:	7cfb      	ldrb	r3, [r7, #19]
 80175f8:	3301      	adds	r3, #1
 80175fa:	74fb      	strb	r3, [r7, #19]
 80175fc:	7cfb      	ldrb	r3, [r7, #19]
 80175fe:	2b0f      	cmp	r3, #15
 8017600:	f67f af6c 	bls.w	80174dc <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017604:	7d7b      	ldrb	r3, [r7, #21]
 8017606:	3310      	adds	r3, #16
 8017608:	757b      	strb	r3, [r7, #21]
 801760a:	7d3b      	ldrb	r3, [r7, #20]
 801760c:	3301      	adds	r3, #1
 801760e:	753b      	strb	r3, [r7, #20]
 8017610:	7d7b      	ldrb	r3, [r7, #21]
 8017612:	b29a      	uxth	r2, r3
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	8a1b      	ldrh	r3, [r3, #16]
 8017618:	429a      	cmp	r2, r3
 801761a:	f4ff af5c 	bcc.w	80174d6 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	7dfa      	ldrb	r2, [r7, #23]
 8017622:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8017624:	683b      	ldr	r3, [r7, #0]
 8017626:	7dba      	ldrb	r2, [r7, #22]
 8017628:	701a      	strb	r2, [r3, #0]
}
 801762a:	bf00      	nop
 801762c:	371c      	adds	r7, #28
 801762e:	46bd      	mov	sp, r7
 8017630:	bd90      	pop	{r4, r7, pc}

08017632 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8017632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017634:	b08b      	sub	sp, #44	; 0x2c
 8017636:	af04      	add	r7, sp, #16
 8017638:	60f8      	str	r0, [r7, #12]
 801763a:	60b9      	str	r1, [r7, #8]
 801763c:	607a      	str	r2, [r7, #4]
 801763e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	685b      	ldr	r3, [r3, #4]
 8017644:	4618      	mov	r0, r3
 8017646:	f005 fe15 	bl	801d274 <UTIL_TIMER_GetElapsedTime>
 801764a:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	681a      	ldr	r2, [r3, #0]
 8017650:	697b      	ldr	r3, [r7, #20]
 8017652:	1ad2      	subs	r2, r2, r3
 8017654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017656:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8017658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801765a:	2201      	movs	r2, #1
 801765c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801765e:	683b      	ldr	r3, [r7, #0]
 8017660:	2200      	movs	r2, #0
 8017662:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	685b      	ldr	r3, [r3, #4]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d004      	beq.n	8017676 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017670:	697a      	ldr	r2, [r7, #20]
 8017672:	429a      	cmp	r2, r3
 8017674:	d32b      	bcc.n	80176ce <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017676:	68bb      	ldr	r3, [r7, #8]
 8017678:	2200      	movs	r2, #0
 801767a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	69db      	ldr	r3, [r3, #28]
 8017680:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017686:	68dd      	ldr	r5, [r3, #12]
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	7a5e      	ldrb	r6, [r3, #9]
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	f893 c008 	ldrb.w	ip, [r3, #8]
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	7d1b      	ldrb	r3, [r3, #20]
 8017696:	68fa      	ldr	r2, [r7, #12]
 8017698:	6992      	ldr	r2, [r2, #24]
 801769a:	9203      	str	r2, [sp, #12]
 801769c:	68fa      	ldr	r2, [r7, #12]
 801769e:	f10d 0e04 	add.w	lr, sp, #4
 80176a2:	320c      	adds	r2, #12
 80176a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80176a8:	e88e 0003 	stmia.w	lr, {r0, r1}
 80176ac:	9300      	str	r3, [sp, #0]
 80176ae:	4663      	mov	r3, ip
 80176b0:	4632      	mov	r2, r6
 80176b2:	4629      	mov	r1, r5
 80176b4:	4620      	mov	r0, r4
 80176b6:	f7ff fc25 	bl	8016f04 <RegionCommonUpdateBandTimeOff>
 80176ba:	4602      	mov	r2, r0
 80176bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176be:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	69d8      	ldr	r0, [r3, #28]
 80176c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176c6:	683a      	ldr	r2, [r7, #0]
 80176c8:	6879      	ldr	r1, [r7, #4]
 80176ca:	f7ff fef4 	bl	80174b6 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80176ce:	683b      	ldr	r3, [r7, #0]
 80176d0:	781b      	ldrb	r3, [r3, #0]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d004      	beq.n	80176e0 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80176d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176d8:	2200      	movs	r2, #0
 80176da:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80176dc:	2300      	movs	r3, #0
 80176de:	e006      	b.n	80176ee <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80176e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176e2:	781b      	ldrb	r3, [r3, #0]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d001      	beq.n	80176ec <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80176e8:	230b      	movs	r3, #11
 80176ea:	e000      	b.n	80176ee <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80176ec:	230c      	movs	r3, #12
    }
}
 80176ee:	4618      	mov	r0, r3
 80176f0:	371c      	adds	r7, #28
 80176f2:	46bd      	mov	sp, r7
 80176f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080176f6 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80176f6:	b5b0      	push	{r4, r5, r7, lr}
 80176f8:	b086      	sub	sp, #24
 80176fa:	af02      	add	r7, sp, #8
 80176fc:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	781b      	ldrb	r3, [r3, #0]
 8017702:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	f993 2000 	ldrsb.w	r2, [r3]
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017710:	429a      	cmp	r2, r3
 8017712:	d103      	bne.n	801771c <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801771a:	e026      	b.n	801776a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 801771c:	7bfb      	ldrb	r3, [r7, #15]
 801771e:	3b01      	subs	r3, #1
 8017720:	b2db      	uxtb	r3, r3
 8017722:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801772a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801772e:	429a      	cmp	r2, r3
 8017730:	d019      	beq.n	8017766 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	78d8      	ldrb	r0, [r3, #3]
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	6859      	ldr	r1, [r3, #4]
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017746:	687a      	ldr	r2, [r7, #4]
 8017748:	6892      	ldr	r2, [r2, #8]
 801774a:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801774e:	9201      	str	r2, [sp, #4]
 8017750:	9300      	str	r3, [sp, #0]
 8017752:	462b      	mov	r3, r5
 8017754:	4622      	mov	r2, r4
 8017756:	f7ff fa92 	bl	8016c7e <RegionCommonChanVerifyDr>
 801775a:	4603      	mov	r3, r0
 801775c:	f083 0301 	eor.w	r3, r3, #1
 8017760:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8017762:	2b00      	cmp	r3, #0
 8017764:	d1da      	bne.n	801771c <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8017766:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801776a:	4618      	mov	r0, r3
 801776c:	3710      	adds	r7, #16
 801776e:	46bd      	mov	sp, r7
 8017770:	bdb0      	pop	{r4, r5, r7, pc}

08017772 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8017772:	b480      	push	{r7}
 8017774:	b083      	sub	sp, #12
 8017776:	af00      	add	r7, sp, #0
 8017778:	4603      	mov	r3, r0
 801777a:	460a      	mov	r2, r1
 801777c:	71fb      	strb	r3, [r7, #7]
 801777e:	4613      	mov	r3, r2
 8017780:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8017782:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801778a:	4293      	cmp	r3, r2
 801778c:	bfb8      	it	lt
 801778e:	4613      	movlt	r3, r2
 8017790:	b25b      	sxtb	r3, r3
}
 8017792:	4618      	mov	r0, r3
 8017794:	370c      	adds	r7, #12
 8017796:	46bd      	mov	sp, r7
 8017798:	bc80      	pop	{r7}
 801779a:	4770      	bx	lr

0801779c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801779c:	b480      	push	{r7}
 801779e:	b083      	sub	sp, #12
 80177a0:	af00      	add	r7, sp, #0
 80177a2:	6078      	str	r0, [r7, #4]
 80177a4:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	009b      	lsls	r3, r3, #2
 80177aa:	683a      	ldr	r2, [r7, #0]
 80177ac:	4413      	add	r3, r2
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	4a07      	ldr	r2, [pc, #28]	; (80177d0 <RegionCommonGetBandwidth+0x34>)
 80177b2:	4293      	cmp	r3, r2
 80177b4:	d004      	beq.n	80177c0 <RegionCommonGetBandwidth+0x24>
 80177b6:	4a07      	ldr	r2, [pc, #28]	; (80177d4 <RegionCommonGetBandwidth+0x38>)
 80177b8:	4293      	cmp	r3, r2
 80177ba:	d003      	beq.n	80177c4 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80177bc:	2300      	movs	r3, #0
 80177be:	e002      	b.n	80177c6 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80177c0:	2301      	movs	r3, #1
 80177c2:	e000      	b.n	80177c6 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80177c4:	2302      	movs	r3, #2
    }
}
 80177c6:	4618      	mov	r0, r3
 80177c8:	370c      	adds	r7, #12
 80177ca:	46bd      	mov	sp, r7
 80177cc:	bc80      	pop	{r7}
 80177ce:	4770      	bx	lr
 80177d0:	0003d090 	.word	0x0003d090
 80177d4:	0007a120 	.word	0x0007a120

080177d8 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b086      	sub	sp, #24
 80177dc:	af04      	add	r7, sp, #16
 80177de:	4603      	mov	r3, r0
 80177e0:	6039      	str	r1, [r7, #0]
 80177e2:	71fb      	strb	r3, [r7, #7]
 80177e4:	4613      	mov	r3, r2
 80177e6:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 80177e8:	79fb      	ldrb	r3, [r7, #7]
 80177ea:	2b05      	cmp	r3, #5
 80177ec:	d810      	bhi.n	8017810 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80177ee:	79fb      	ldrb	r3, [r7, #7]
 80177f0:	4a0f      	ldr	r2, [pc, #60]	; (8017830 <RegionCommonRxConfigPrint+0x58>)
 80177f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80177f6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80177fa:	9202      	str	r2, [sp, #8]
 80177fc:	683a      	ldr	r2, [r7, #0]
 80177fe:	9201      	str	r2, [sp, #4]
 8017800:	9300      	str	r3, [sp, #0]
 8017802:	4b0c      	ldr	r3, [pc, #48]	; (8017834 <RegionCommonRxConfigPrint+0x5c>)
 8017804:	2201      	movs	r2, #1
 8017806:	2100      	movs	r1, #0
 8017808:	2002      	movs	r0, #2
 801780a:	f005 fe11 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801780e:	e00a      	b.n	8017826 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017810:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017814:	9301      	str	r3, [sp, #4]
 8017816:	683b      	ldr	r3, [r7, #0]
 8017818:	9300      	str	r3, [sp, #0]
 801781a:	4b07      	ldr	r3, [pc, #28]	; (8017838 <RegionCommonRxConfigPrint+0x60>)
 801781c:	2201      	movs	r2, #1
 801781e:	2100      	movs	r1, #0
 8017820:	2002      	movs	r0, #2
 8017822:	f005 fe05 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
}
 8017826:	bf00      	nop
 8017828:	3708      	adds	r7, #8
 801782a:	46bd      	mov	sp, r7
 801782c:	bd80      	pop	{r7, pc}
 801782e:	bf00      	nop
 8017830:	20000130 	.word	0x20000130
 8017834:	0801e260 	.word	0x0801e260
 8017838:	0801e280 	.word	0x0801e280

0801783c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801783c:	b580      	push	{r7, lr}
 801783e:	b084      	sub	sp, #16
 8017840:	af02      	add	r7, sp, #8
 8017842:	6078      	str	r0, [r7, #4]
 8017844:	460b      	mov	r3, r1
 8017846:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801784c:	9301      	str	r3, [sp, #4]
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	9300      	str	r3, [sp, #0]
 8017852:	4b05      	ldr	r3, [pc, #20]	; (8017868 <RegionCommonTxConfigPrint+0x2c>)
 8017854:	2201      	movs	r2, #1
 8017856:	2100      	movs	r1, #0
 8017858:	2002      	movs	r0, #2
 801785a:	f005 fde9 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
}
 801785e:	bf00      	nop
 8017860:	3708      	adds	r7, #8
 8017862:	46bd      	mov	sp, r7
 8017864:	bd80      	pop	{r7, pc}
 8017866:	bf00      	nop
 8017868:	0801e29c 	.word	0x0801e29c

0801786c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b082      	sub	sp, #8
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
 8017874:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017876:	4b2d      	ldr	r3, [pc, #180]	; (801792c <VerifyRfFreq+0xc0>)
 8017878:	6a1b      	ldr	r3, [r3, #32]
 801787a:	6878      	ldr	r0, [r7, #4]
 801787c:	4798      	blx	r3
 801787e:	4603      	mov	r3, r0
 8017880:	f083 0301 	eor.w	r3, r3, #1
 8017884:	b2db      	uxtb	r3, r3
 8017886:	2b00      	cmp	r3, #0
 8017888:	d001      	beq.n	801788e <VerifyRfFreq+0x22>
    {
        return false;
 801788a:	2300      	movs	r3, #0
 801788c:	e04a      	b.n	8017924 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	4a27      	ldr	r2, [pc, #156]	; (8017930 <VerifyRfFreq+0xc4>)
 8017892:	4293      	cmp	r3, r2
 8017894:	d307      	bcc.n	80178a6 <VerifyRfFreq+0x3a>
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	4a26      	ldr	r2, [pc, #152]	; (8017934 <VerifyRfFreq+0xc8>)
 801789a:	4293      	cmp	r3, r2
 801789c:	d803      	bhi.n	80178a6 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801789e:	683b      	ldr	r3, [r7, #0]
 80178a0:	2202      	movs	r2, #2
 80178a2:	701a      	strb	r2, [r3, #0]
 80178a4:	e03d      	b.n	8017922 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	4a22      	ldr	r2, [pc, #136]	; (8017934 <VerifyRfFreq+0xc8>)
 80178aa:	4293      	cmp	r3, r2
 80178ac:	d907      	bls.n	80178be <VerifyRfFreq+0x52>
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	4a21      	ldr	r2, [pc, #132]	; (8017938 <VerifyRfFreq+0xcc>)
 80178b2:	4293      	cmp	r3, r2
 80178b4:	d803      	bhi.n	80178be <VerifyRfFreq+0x52>
    {
        *band = 0;
 80178b6:	683b      	ldr	r3, [r7, #0]
 80178b8:	2200      	movs	r2, #0
 80178ba:	701a      	strb	r2, [r3, #0]
 80178bc:	e031      	b.n	8017922 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	4a1d      	ldr	r2, [pc, #116]	; (8017938 <VerifyRfFreq+0xcc>)
 80178c2:	4293      	cmp	r3, r2
 80178c4:	d907      	bls.n	80178d6 <VerifyRfFreq+0x6a>
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	4a1c      	ldr	r2, [pc, #112]	; (801793c <VerifyRfFreq+0xd0>)
 80178ca:	4293      	cmp	r3, r2
 80178cc:	d803      	bhi.n	80178d6 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80178ce:	683b      	ldr	r3, [r7, #0]
 80178d0:	2201      	movs	r2, #1
 80178d2:	701a      	strb	r2, [r3, #0]
 80178d4:	e025      	b.n	8017922 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	4a19      	ldr	r2, [pc, #100]	; (8017940 <VerifyRfFreq+0xd4>)
 80178da:	4293      	cmp	r3, r2
 80178dc:	d907      	bls.n	80178ee <VerifyRfFreq+0x82>
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	4a18      	ldr	r2, [pc, #96]	; (8017944 <VerifyRfFreq+0xd8>)
 80178e2:	4293      	cmp	r3, r2
 80178e4:	d803      	bhi.n	80178ee <VerifyRfFreq+0x82>
    {
        *band = 5;
 80178e6:	683b      	ldr	r3, [r7, #0]
 80178e8:	2205      	movs	r2, #5
 80178ea:	701a      	strb	r2, [r3, #0]
 80178ec:	e019      	b.n	8017922 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	4a15      	ldr	r2, [pc, #84]	; (8017948 <VerifyRfFreq+0xdc>)
 80178f2:	4293      	cmp	r3, r2
 80178f4:	d907      	bls.n	8017906 <VerifyRfFreq+0x9a>
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	4a14      	ldr	r2, [pc, #80]	; (801794c <VerifyRfFreq+0xe0>)
 80178fa:	4293      	cmp	r3, r2
 80178fc:	d803      	bhi.n	8017906 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80178fe:	683b      	ldr	r3, [r7, #0]
 8017900:	2203      	movs	r2, #3
 8017902:	701a      	strb	r2, [r3, #0]
 8017904:	e00d      	b.n	8017922 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	4a11      	ldr	r2, [pc, #68]	; (8017950 <VerifyRfFreq+0xe4>)
 801790a:	4293      	cmp	r3, r2
 801790c:	d307      	bcc.n	801791e <VerifyRfFreq+0xb2>
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	4a10      	ldr	r2, [pc, #64]	; (8017954 <VerifyRfFreq+0xe8>)
 8017912:	4293      	cmp	r3, r2
 8017914:	d803      	bhi.n	801791e <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8017916:	683b      	ldr	r3, [r7, #0]
 8017918:	2204      	movs	r2, #4
 801791a:	701a      	strb	r2, [r3, #0]
 801791c:	e001      	b.n	8017922 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801791e:	2300      	movs	r3, #0
 8017920:	e000      	b.n	8017924 <VerifyRfFreq+0xb8>
    }
    return true;
 8017922:	2301      	movs	r3, #1
}
 8017924:	4618      	mov	r0, r3
 8017926:	3708      	adds	r7, #8
 8017928:	46bd      	mov	sp, r7
 801792a:	bd80      	pop	{r7, pc}
 801792c:	0801e8c0 	.word	0x0801e8c0
 8017930:	337055c0 	.word	0x337055c0
 8017934:	338eda3f 	.word	0x338eda3f
 8017938:	33bca100 	.word	0x33bca100
 801793c:	33c5c8c0 	.word	0x33c5c8c0
 8017940:	33c74f5f 	.word	0x33c74f5f
 8017944:	33cef080 	.word	0x33cef080
 8017948:	33d1fdbf 	.word	0x33d1fdbf
 801794c:	33d5ce50 	.word	0x33d5ce50
 8017950:	33d691a0 	.word	0x33d691a0
 8017954:	33db2580 	.word	0x33db2580

08017958 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017958:	b590      	push	{r4, r7, lr}
 801795a:	b08b      	sub	sp, #44	; 0x2c
 801795c:	af04      	add	r7, sp, #16
 801795e:	4603      	mov	r3, r0
 8017960:	460a      	mov	r2, r1
 8017962:	71fb      	strb	r3, [r7, #7]
 8017964:	4613      	mov	r3, r2
 8017966:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8017968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801796c:	4a1f      	ldr	r2, [pc, #124]	; (80179ec <GetTimeOnAir+0x94>)
 801796e:	5cd3      	ldrb	r3, [r2, r3]
 8017970:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8017972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017976:	491e      	ldr	r1, [pc, #120]	; (80179f0 <GetTimeOnAir+0x98>)
 8017978:	4618      	mov	r0, r3
 801797a:	f7ff ff0f 	bl	801779c <RegionCommonGetBandwidth>
 801797e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8017980:	2300      	movs	r3, #0
 8017982:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8017984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017988:	2b07      	cmp	r3, #7
 801798a:	d118      	bne.n	80179be <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801798c:	4b19      	ldr	r3, [pc, #100]	; (80179f4 <GetTimeOnAir+0x9c>)
 801798e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017990:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017998:	fb02 f303 	mul.w	r3, r2, r3
 801799c:	4619      	mov	r1, r3
 801799e:	88bb      	ldrh	r3, [r7, #4]
 80179a0:	b2db      	uxtb	r3, r3
 80179a2:	2201      	movs	r2, #1
 80179a4:	9203      	str	r2, [sp, #12]
 80179a6:	9302      	str	r3, [sp, #8]
 80179a8:	2300      	movs	r3, #0
 80179aa:	9301      	str	r3, [sp, #4]
 80179ac:	2305      	movs	r3, #5
 80179ae:	9300      	str	r3, [sp, #0]
 80179b0:	2300      	movs	r3, #0
 80179b2:	460a      	mov	r2, r1
 80179b4:	68f9      	ldr	r1, [r7, #12]
 80179b6:	2000      	movs	r0, #0
 80179b8:	47a0      	blx	r4
 80179ba:	6178      	str	r0, [r7, #20]
 80179bc:	e011      	b.n	80179e2 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80179be:	4b0d      	ldr	r3, [pc, #52]	; (80179f4 <GetTimeOnAir+0x9c>)
 80179c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80179c2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80179c6:	88bb      	ldrh	r3, [r7, #4]
 80179c8:	b2db      	uxtb	r3, r3
 80179ca:	2101      	movs	r1, #1
 80179cc:	9103      	str	r1, [sp, #12]
 80179ce:	9302      	str	r3, [sp, #8]
 80179d0:	2300      	movs	r3, #0
 80179d2:	9301      	str	r3, [sp, #4]
 80179d4:	2308      	movs	r3, #8
 80179d6:	9300      	str	r3, [sp, #0]
 80179d8:	2301      	movs	r3, #1
 80179da:	68f9      	ldr	r1, [r7, #12]
 80179dc:	2001      	movs	r0, #1
 80179de:	47a0      	blx	r4
 80179e0:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80179e2:	697b      	ldr	r3, [r7, #20]
}
 80179e4:	4618      	mov	r0, r3
 80179e6:	371c      	adds	r7, #28
 80179e8:	46bd      	mov	sp, r7
 80179ea:	bd90      	pop	{r4, r7, pc}
 80179ec:	0801e888 	.word	0x0801e888
 80179f0:	0801e890 	.word	0x0801e890
 80179f4:	0801e8c0 	.word	0x0801e8c0

080179f8 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b088      	sub	sp, #32
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017a00:	2300      	movs	r3, #0
 8017a02:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	781b      	ldrb	r3, [r3, #0]
 8017a08:	3b01      	subs	r3, #1
 8017a0a:	2b38      	cmp	r3, #56	; 0x38
 8017a0c:	f200 8128 	bhi.w	8017c60 <RegionEU868GetPhyParam+0x268>
 8017a10:	a201      	add	r2, pc, #4	; (adr r2, 8017a18 <RegionEU868GetPhyParam+0x20>)
 8017a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a16:	bf00      	nop
 8017a18:	08017afd 	.word	0x08017afd
 8017a1c:	08017b03 	.word	0x08017b03
 8017a20:	08017c61 	.word	0x08017c61
 8017a24:	08017c61 	.word	0x08017c61
 8017a28:	08017c61 	.word	0x08017c61
 8017a2c:	08017b09 	.word	0x08017b09
 8017a30:	08017c61 	.word	0x08017c61
 8017a34:	08017b43 	.word	0x08017b43
 8017a38:	08017c61 	.word	0x08017c61
 8017a3c:	08017b49 	.word	0x08017b49
 8017a40:	08017b4f 	.word	0x08017b4f
 8017a44:	08017b55 	.word	0x08017b55
 8017a48:	08017b5b 	.word	0x08017b5b
 8017a4c:	08017b6b 	.word	0x08017b6b
 8017a50:	08017b7b 	.word	0x08017b7b
 8017a54:	08017b81 	.word	0x08017b81
 8017a58:	08017b89 	.word	0x08017b89
 8017a5c:	08017b91 	.word	0x08017b91
 8017a60:	08017b99 	.word	0x08017b99
 8017a64:	08017ba1 	.word	0x08017ba1
 8017a68:	08017ba9 	.word	0x08017ba9
 8017a6c:	08017bb1 	.word	0x08017bb1
 8017a70:	08017bc5 	.word	0x08017bc5
 8017a74:	08017bcb 	.word	0x08017bcb
 8017a78:	08017bd1 	.word	0x08017bd1
 8017a7c:	08017bd7 	.word	0x08017bd7
 8017a80:	08017be3 	.word	0x08017be3
 8017a84:	08017bef 	.word	0x08017bef
 8017a88:	08017bf5 	.word	0x08017bf5
 8017a8c:	08017bfd 	.word	0x08017bfd
 8017a90:	08017c03 	.word	0x08017c03
 8017a94:	08017c09 	.word	0x08017c09
 8017a98:	08017c11 	.word	0x08017c11
 8017a9c:	08017b0f 	.word	0x08017b0f
 8017aa0:	08017c61 	.word	0x08017c61
 8017aa4:	08017c61 	.word	0x08017c61
 8017aa8:	08017c61 	.word	0x08017c61
 8017aac:	08017c61 	.word	0x08017c61
 8017ab0:	08017c61 	.word	0x08017c61
 8017ab4:	08017c61 	.word	0x08017c61
 8017ab8:	08017c61 	.word	0x08017c61
 8017abc:	08017c61 	.word	0x08017c61
 8017ac0:	08017c61 	.word	0x08017c61
 8017ac4:	08017c61 	.word	0x08017c61
 8017ac8:	08017c61 	.word	0x08017c61
 8017acc:	08017c61 	.word	0x08017c61
 8017ad0:	08017c61 	.word	0x08017c61
 8017ad4:	08017c17 	.word	0x08017c17
 8017ad8:	08017c1d 	.word	0x08017c1d
 8017adc:	08017c2b 	.word	0x08017c2b
 8017ae0:	08017c61 	.word	0x08017c61
 8017ae4:	08017c61 	.word	0x08017c61
 8017ae8:	08017c31 	.word	0x08017c31
 8017aec:	08017c37 	.word	0x08017c37
 8017af0:	08017c61 	.word	0x08017c61
 8017af4:	08017c3d 	.word	0x08017c3d
 8017af8:	08017c4d 	.word	0x08017c4d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8017afc:	2300      	movs	r3, #0
 8017afe:	61bb      	str	r3, [r7, #24]
            break;
 8017b00:	e0af      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8017b02:	2300      	movs	r3, #0
 8017b04:	61bb      	str	r3, [r7, #24]
            break;
 8017b06:	e0ac      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8017b08:	2300      	movs	r3, #0
 8017b0a:	61bb      	str	r3, [r7, #24]
            break;
 8017b0c:	e0a9      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017b14:	733b      	strb	r3, [r7, #12]
 8017b16:	2307      	movs	r3, #7
 8017b18:	737b      	strb	r3, [r7, #13]
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	73bb      	strb	r3, [r7, #14]
 8017b1e:	2310      	movs	r3, #16
 8017b20:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8017b22:	4b53      	ldr	r3, [pc, #332]	; (8017c70 <RegionEU868GetPhyParam+0x278>)
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017b2a:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017b2c:	4b50      	ldr	r3, [pc, #320]	; (8017c70 <RegionEU868GetPhyParam+0x278>)
 8017b2e:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017b30:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8017b32:	f107 030c 	add.w	r3, r7, #12
 8017b36:	4618      	mov	r0, r3
 8017b38:	f7ff fddd 	bl	80176f6 <RegionCommonGetNextLowerTxDr>
 8017b3c:	4603      	mov	r3, r0
 8017b3e:	61bb      	str	r3, [r7, #24]
            break;
 8017b40:	e08f      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8017b42:	2300      	movs	r3, #0
 8017b44:	61bb      	str	r3, [r7, #24]
            break;
 8017b46:	e08c      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8017b48:	2300      	movs	r3, #0
 8017b4a:	61bb      	str	r3, [r7, #24]
            break;
 8017b4c:	e089      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017b4e:	2340      	movs	r3, #64	; 0x40
 8017b50:	61bb      	str	r3, [r7, #24]
            break;
 8017b52:	e086      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017b54:	2320      	movs	r3, #32
 8017b56:	61bb      	str	r3, [r7, #24]
            break;
 8017b58:	e083      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017b60:	461a      	mov	r2, r3
 8017b62:	4b44      	ldr	r3, [pc, #272]	; (8017c74 <RegionEU868GetPhyParam+0x27c>)
 8017b64:	5c9b      	ldrb	r3, [r3, r2]
 8017b66:	61bb      	str	r3, [r7, #24]
            break;
 8017b68:	e07b      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017b70:	461a      	mov	r2, r3
 8017b72:	4b41      	ldr	r3, [pc, #260]	; (8017c78 <RegionEU868GetPhyParam+0x280>)
 8017b74:	5c9b      	ldrb	r3, [r3, r2]
 8017b76:	61bb      	str	r3, [r7, #24]
            break;
 8017b78:	e073      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8017b7a:	2301      	movs	r3, #1
 8017b7c:	61bb      	str	r3, [r7, #24]
            break;
 8017b7e:	e070      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8017b80:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8017b84:	61bb      	str	r3, [r7, #24]
            break;
 8017b86:	e06c      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017b8c:	61bb      	str	r3, [r7, #24]
            break;
 8017b8e:	e068      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017b90:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8017b94:	61bb      	str	r3, [r7, #24]
            break;
 8017b96:	e064      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017b98:	f241 3388 	movw	r3, #5000	; 0x1388
 8017b9c:	61bb      	str	r3, [r7, #24]
            break;
 8017b9e:	e060      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8017ba0:	f241 7370 	movw	r3, #6000	; 0x1770
 8017ba4:	61bb      	str	r3, [r7, #24]
            break;
 8017ba6:	e05c      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8017ba8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8017bac:	61bb      	str	r3, [r7, #24]
            break;
 8017bae:	e058      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8017bb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017bb4:	4831      	ldr	r0, [pc, #196]	; (8017c7c <RegionEU868GetPhyParam+0x284>)
 8017bb6:	f001 f87f 	bl	8018cb8 <randr>
 8017bba:	4603      	mov	r3, r0
 8017bbc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8017bc0:	61bb      	str	r3, [r7, #24]
            break;
 8017bc2:	e04e      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	61bb      	str	r3, [r7, #24]
            break;
 8017bc8:	e04b      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8017bca:	4b2d      	ldr	r3, [pc, #180]	; (8017c80 <RegionEU868GetPhyParam+0x288>)
 8017bcc:	61bb      	str	r3, [r7, #24]
            break;
 8017bce:	e048      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	61bb      	str	r3, [r7, #24]
            break;
 8017bd4:	e045      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017bd6:	4b26      	ldr	r3, [pc, #152]	; (8017c70 <RegionEU868GetPhyParam+0x278>)
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8017bde:	61bb      	str	r3, [r7, #24]
            break;
 8017be0:	e03f      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8017be2:	4b23      	ldr	r3, [pc, #140]	; (8017c70 <RegionEU868GetPhyParam+0x278>)
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8017bea:	61bb      	str	r3, [r7, #24]
            break;
 8017bec:	e039      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8017bee:	2310      	movs	r3, #16
 8017bf0:	61bb      	str	r3, [r7, #24]
            break;
 8017bf2:	e036      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8017bf4:	4b1e      	ldr	r3, [pc, #120]	; (8017c70 <RegionEU868GetPhyParam+0x278>)
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	61bb      	str	r3, [r7, #24]
            break;
 8017bfa:	e032      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	61bb      	str	r3, [r7, #24]
            break;
 8017c00:	e02f      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8017c02:	2300      	movs	r3, #0
 8017c04:	61bb      	str	r3, [r7, #24]
            break;
 8017c06:	e02c      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8017c08:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8017c0c:	61bb      	str	r3, [r7, #24]
            break;
 8017c0e:	e028      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8017c10:	4b1c      	ldr	r3, [pc, #112]	; (8017c84 <RegionEU868GetPhyParam+0x28c>)
 8017c12:	61bb      	str	r3, [r7, #24]
            break;
 8017c14:	e025      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8017c16:	4b1a      	ldr	r3, [pc, #104]	; (8017c80 <RegionEU868GetPhyParam+0x288>)
 8017c18:	61bb      	str	r3, [r7, #24]
            break;
 8017c1a:	e022      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8017c1c:	2311      	movs	r3, #17
 8017c1e:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8017c20:	2302      	movs	r3, #2
 8017c22:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8017c24:	2300      	movs	r3, #0
 8017c26:	76bb      	strb	r3, [r7, #26]
            break;
 8017c28:	e01b      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8017c2a:	2303      	movs	r3, #3
 8017c2c:	61bb      	str	r3, [r7, #24]
            break;
 8017c2e:	e018      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8017c30:	4b13      	ldr	r3, [pc, #76]	; (8017c80 <RegionEU868GetPhyParam+0x288>)
 8017c32:	61bb      	str	r3, [r7, #24]
            break;
 8017c34:	e015      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8017c36:	2303      	movs	r3, #3
 8017c38:	61bb      	str	r3, [r7, #24]
            break;
 8017c3a:	e012      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017c42:	461a      	mov	r2, r3
 8017c44:	4b10      	ldr	r3, [pc, #64]	; (8017c88 <RegionEU868GetPhyParam+0x290>)
 8017c46:	5c9b      	ldrb	r3, [r3, r2]
 8017c48:	61bb      	str	r3, [r7, #24]
            break;
 8017c4a:	e00a      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017c52:	490e      	ldr	r1, [pc, #56]	; (8017c8c <RegionEU868GetPhyParam+0x294>)
 8017c54:	4618      	mov	r0, r3
 8017c56:	f7ff fda1 	bl	801779c <RegionCommonGetBandwidth>
 8017c5a:	4603      	mov	r3, r0
 8017c5c:	61bb      	str	r3, [r7, #24]
            break;
 8017c5e:	e000      	b.n	8017c62 <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8017c60:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8017c62:	69bb      	ldr	r3, [r7, #24]
 8017c64:	61fb      	str	r3, [r7, #28]
 8017c66:	69fb      	ldr	r3, [r7, #28]
}
 8017c68:	4618      	mov	r0, r3
 8017c6a:	3720      	adds	r7, #32
 8017c6c:	46bd      	mov	sp, r7
 8017c6e:	bd80      	pop	{r7, pc}
 8017c70:	20001704 	.word	0x20001704
 8017c74:	0801e8b0 	.word	0x0801e8b0
 8017c78:	0801e8b8 	.word	0x0801e8b8
 8017c7c:	fffffc18 	.word	0xfffffc18
 8017c80:	33d3e608 	.word	0x33d3e608
 8017c84:	4009999a 	.word	0x4009999a
 8017c88:	0801e888 	.word	0x0801e888
 8017c8c:	0801e890 	.word	0x0801e890

08017c90 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017c90:	b590      	push	{r4, r7, lr}
 8017c92:	b085      	sub	sp, #20
 8017c94:	af02      	add	r7, sp, #8
 8017c96:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8017c98:	4b11      	ldr	r3, [pc, #68]	; (8017ce0 <RegionEU868SetBandTxDone+0x50>)
 8017c9a:	681a      	ldr	r2, [r3, #0]
 8017c9c:	4b11      	ldr	r3, [pc, #68]	; (8017ce4 <RegionEU868SetBandTxDone+0x54>)
 8017c9e:	6819      	ldr	r1, [r3, #0]
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	781b      	ldrb	r3, [r3, #0]
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	005b      	lsls	r3, r3, #1
 8017caa:	4403      	add	r3, r0
 8017cac:	009b      	lsls	r3, r3, #2
 8017cae:	440b      	add	r3, r1
 8017cb0:	3309      	adds	r3, #9
 8017cb2:	781b      	ldrb	r3, [r3, #0]
 8017cb4:	4619      	mov	r1, r3
 8017cb6:	460b      	mov	r3, r1
 8017cb8:	005b      	lsls	r3, r3, #1
 8017cba:	440b      	add	r3, r1
 8017cbc:	00db      	lsls	r3, r3, #3
 8017cbe:	18d0      	adds	r0, r2, r3
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	6899      	ldr	r1, [r3, #8]
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	785c      	ldrb	r4, [r3, #1]
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	691a      	ldr	r2, [r3, #16]
 8017ccc:	9200      	str	r2, [sp, #0]
 8017cce:	68db      	ldr	r3, [r3, #12]
 8017cd0:	4622      	mov	r2, r4
 8017cd2:	f7ff f8e9 	bl	8016ea8 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8017cd6:	bf00      	nop
 8017cd8:	370c      	adds	r7, #12
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	bd90      	pop	{r4, r7, pc}
 8017cde:	bf00      	nop
 8017ce0:	20001700 	.word	0x20001700
 8017ce4:	20001704 	.word	0x20001704

08017ce8 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b0b0      	sub	sp, #192	; 0xc0
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8017cf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017cf4:	2290      	movs	r2, #144	; 0x90
 8017cf6:	2100      	movs	r1, #0
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	f005 fe11 	bl	801d920 <memset>
 8017cfe:	2364      	movs	r3, #100	; 0x64
 8017d00:	863b      	strh	r3, [r7, #48]	; 0x30
 8017d02:	2364      	movs	r3, #100	; 0x64
 8017d04:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017d0c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8017d10:	230a      	movs	r3, #10
 8017d12:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8017d16:	2364      	movs	r3, #100	; 0x64
 8017d18:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8017d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017d20:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	7a1b      	ldrb	r3, [r3, #8]
 8017d28:	2b02      	cmp	r3, #2
 8017d2a:	d05e      	beq.n	8017dea <RegionEU868InitDefaults+0x102>
 8017d2c:	2b02      	cmp	r3, #2
 8017d2e:	dc6b      	bgt.n	8017e08 <RegionEU868InitDefaults+0x120>
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d002      	beq.n	8017d3a <RegionEU868InitDefaults+0x52>
 8017d34:	2b01      	cmp	r3, #1
 8017d36:	d03f      	beq.n	8017db8 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8017d38:	e066      	b.n	8017e08 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d063      	beq.n	8017e0a <RegionEU868InitDefaults+0x122>
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	685b      	ldr	r3, [r3, #4]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d05f      	beq.n	8017e0a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	4a30      	ldr	r2, [pc, #192]	; (8017e10 <RegionEU868InitDefaults+0x128>)
 8017d50:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	685b      	ldr	r3, [r3, #4]
 8017d56:	4a2f      	ldr	r2, [pc, #188]	; (8017e14 <RegionEU868InitDefaults+0x12c>)
 8017d58:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8017d5a:	4b2d      	ldr	r3, [pc, #180]	; (8017e10 <RegionEU868InitDefaults+0x128>)
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	4618      	mov	r0, r3
 8017d60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017d64:	2290      	movs	r2, #144	; 0x90
 8017d66:	4619      	mov	r1, r3
 8017d68:	f000 ffbd 	bl	8018ce6 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8017d6c:	4b29      	ldr	r3, [pc, #164]	; (8017e14 <RegionEU868InitDefaults+0x12c>)
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	4a29      	ldr	r2, [pc, #164]	; (8017e18 <RegionEU868InitDefaults+0x130>)
 8017d72:	ca07      	ldmia	r2, {r0, r1, r2}
 8017d74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8017d78:	4b26      	ldr	r3, [pc, #152]	; (8017e14 <RegionEU868InitDefaults+0x12c>)
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	4a27      	ldr	r2, [pc, #156]	; (8017e1c <RegionEU868InitDefaults+0x134>)
 8017d7e:	330c      	adds	r3, #12
 8017d80:	ca07      	ldmia	r2, {r0, r1, r2}
 8017d82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8017d86:	4b23      	ldr	r3, [pc, #140]	; (8017e14 <RegionEU868InitDefaults+0x12c>)
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	4a25      	ldr	r2, [pc, #148]	; (8017e20 <RegionEU868InitDefaults+0x138>)
 8017d8c:	3318      	adds	r3, #24
 8017d8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8017d90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8017d94:	4b1f      	ldr	r3, [pc, #124]	; (8017e14 <RegionEU868InitDefaults+0x12c>)
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	2207      	movs	r2, #7
 8017d9a:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017d9e:	4b1d      	ldr	r3, [pc, #116]	; (8017e14 <RegionEU868InitDefaults+0x12c>)
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8017da6:	4b1b      	ldr	r3, [pc, #108]	; (8017e14 <RegionEU868InitDefaults+0x12c>)
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8017dae:	2201      	movs	r2, #1
 8017db0:	4619      	mov	r1, r3
 8017db2:	f7ff f853 	bl	8016e5c <RegionCommonChanMaskCopy>
 8017db6:	e028      	b.n	8017e0a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8017db8:	4b16      	ldr	r3, [pc, #88]	; (8017e14 <RegionEU868InitDefaults+0x12c>)
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	2200      	movs	r2, #0
 8017dbe:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8017dc0:	4b14      	ldr	r3, [pc, #80]	; (8017e14 <RegionEU868InitDefaults+0x12c>)
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	2200      	movs	r2, #0
 8017dc6:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8017dc8:	4b12      	ldr	r3, [pc, #72]	; (8017e14 <RegionEU868InitDefaults+0x12c>)
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	2200      	movs	r2, #0
 8017dce:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017dd0:	4b10      	ldr	r3, [pc, #64]	; (8017e14 <RegionEU868InitDefaults+0x12c>)
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8017dd8:	4b0e      	ldr	r3, [pc, #56]	; (8017e14 <RegionEU868InitDefaults+0x12c>)
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8017de0:	2201      	movs	r2, #1
 8017de2:	4619      	mov	r1, r3
 8017de4:	f7ff f83a 	bl	8016e5c <RegionCommonChanMaskCopy>
            break;
 8017de8:	e00f      	b.n	8017e0a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8017dea:	4b0a      	ldr	r3, [pc, #40]	; (8017e14 <RegionEU868InitDefaults+0x12c>)
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8017df2:	4b08      	ldr	r3, [pc, #32]	; (8017e14 <RegionEU868InitDefaults+0x12c>)
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8017dfa:	4b06      	ldr	r3, [pc, #24]	; (8017e14 <RegionEU868InitDefaults+0x12c>)
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	430a      	orrs	r2, r1
 8017e00:	b292      	uxth	r2, r2
 8017e02:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 8017e06:	e000      	b.n	8017e0a <RegionEU868InitDefaults+0x122>
            break;
 8017e08:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8017e0a:	37c0      	adds	r7, #192	; 0xc0
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	bd80      	pop	{r7, pc}
 8017e10:	20001700 	.word	0x20001700
 8017e14:	20001704 	.word	0x20001704
 8017e18:	0801e2b8 	.word	0x0801e2b8
 8017e1c:	0801e2c4 	.word	0x0801e2c4
 8017e20:	0801e2d0 	.word	0x0801e2d0

08017e24 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017e24:	b580      	push	{r7, lr}
 8017e26:	b084      	sub	sp, #16
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	6078      	str	r0, [r7, #4]
 8017e2c:	460b      	mov	r3, r1
 8017e2e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8017e30:	78fb      	ldrb	r3, [r7, #3]
 8017e32:	2b0f      	cmp	r3, #15
 8017e34:	d86c      	bhi.n	8017f10 <RegionEU868Verify+0xec>
 8017e36:	a201      	add	r2, pc, #4	; (adr r2, 8017e3c <RegionEU868Verify+0x18>)
 8017e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e3c:	08017e7d 	.word	0x08017e7d
 8017e40:	08017f11 	.word	0x08017f11
 8017e44:	08017f11 	.word	0x08017f11
 8017e48:	08017f11 	.word	0x08017f11
 8017e4c:	08017f11 	.word	0x08017f11
 8017e50:	08017e95 	.word	0x08017e95
 8017e54:	08017eb3 	.word	0x08017eb3
 8017e58:	08017ed1 	.word	0x08017ed1
 8017e5c:	08017f11 	.word	0x08017f11
 8017e60:	08017eef 	.word	0x08017eef
 8017e64:	08017eef 	.word	0x08017eef
 8017e68:	08017f11 	.word	0x08017f11
 8017e6c:	08017f11 	.word	0x08017f11
 8017e70:	08017f11 	.word	0x08017f11
 8017e74:	08017f11 	.word	0x08017f11
 8017e78:	08017f0d 	.word	0x08017f0d
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	f107 020f 	add.w	r2, r7, #15
 8017e88:	4611      	mov	r1, r2
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	f7ff fcee 	bl	801786c <VerifyRfFreq>
 8017e90:	4603      	mov	r3, r0
 8017e92:	e03e      	b.n	8017f12 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	f993 3000 	ldrsb.w	r3, [r3]
 8017e9a:	2207      	movs	r2, #7
 8017e9c:	2100      	movs	r1, #0
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	f7fe ff5f 	bl	8016d62 <RegionCommonValueInRange>
 8017ea4:	4603      	mov	r3, r0
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	bf14      	ite	ne
 8017eaa:	2301      	movne	r3, #1
 8017eac:	2300      	moveq	r3, #0
 8017eae:	b2db      	uxtb	r3, r3
 8017eb0:	e02f      	b.n	8017f12 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	f993 3000 	ldrsb.w	r3, [r3]
 8017eb8:	2205      	movs	r2, #5
 8017eba:	2100      	movs	r1, #0
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	f7fe ff50 	bl	8016d62 <RegionCommonValueInRange>
 8017ec2:	4603      	mov	r3, r0
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	bf14      	ite	ne
 8017ec8:	2301      	movne	r3, #1
 8017eca:	2300      	moveq	r3, #0
 8017ecc:	b2db      	uxtb	r3, r3
 8017ece:	e020      	b.n	8017f12 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	f993 3000 	ldrsb.w	r3, [r3]
 8017ed6:	2207      	movs	r2, #7
 8017ed8:	2100      	movs	r1, #0
 8017eda:	4618      	mov	r0, r3
 8017edc:	f7fe ff41 	bl	8016d62 <RegionCommonValueInRange>
 8017ee0:	4603      	mov	r3, r0
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	bf14      	ite	ne
 8017ee6:	2301      	movne	r3, #1
 8017ee8:	2300      	moveq	r3, #0
 8017eea:	b2db      	uxtb	r3, r3
 8017eec:	e011      	b.n	8017f12 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	f993 3000 	ldrsb.w	r3, [r3]
 8017ef4:	2207      	movs	r2, #7
 8017ef6:	2100      	movs	r1, #0
 8017ef8:	4618      	mov	r0, r3
 8017efa:	f7fe ff32 	bl	8016d62 <RegionCommonValueInRange>
 8017efe:	4603      	mov	r3, r0
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	bf14      	ite	ne
 8017f04:	2301      	movne	r3, #1
 8017f06:	2300      	moveq	r3, #0
 8017f08:	b2db      	uxtb	r3, r3
 8017f0a:	e002      	b.n	8017f12 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8017f0c:	2301      	movs	r3, #1
 8017f0e:	e000      	b.n	8017f12 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8017f10:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8017f12:	4618      	mov	r0, r3
 8017f14:	3710      	adds	r7, #16
 8017f16:	46bd      	mov	sp, r7
 8017f18:	bd80      	pop	{r7, pc}
 8017f1a:	bf00      	nop

08017f1c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b08a      	sub	sp, #40	; 0x28
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8017f24:	2350      	movs	r3, #80	; 0x50
 8017f26:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	791b      	ldrb	r3, [r3, #4]
 8017f2e:	2b10      	cmp	r3, #16
 8017f30:	d162      	bne.n	8017ff8 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	330f      	adds	r3, #15
 8017f38:	781b      	ldrb	r3, [r3, #0]
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d15e      	bne.n	8017ffc <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017f3e:	2300      	movs	r3, #0
 8017f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017f44:	2303      	movs	r3, #3
 8017f46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017f4a:	e050      	b.n	8017fee <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8017f4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017f50:	2b07      	cmp	r3, #7
 8017f52:	d824      	bhi.n	8017f9e <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	681a      	ldr	r2, [r3, #0]
 8017f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f5c:	4413      	add	r3, r2
 8017f5e:	781b      	ldrb	r3, [r3, #0]
 8017f60:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8017f62:	69ba      	ldr	r2, [r7, #24]
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	6819      	ldr	r1, [r3, #0]
 8017f68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f6c:	3301      	adds	r3, #1
 8017f6e:	440b      	add	r3, r1
 8017f70:	781b      	ldrb	r3, [r3, #0]
 8017f72:	021b      	lsls	r3, r3, #8
 8017f74:	4313      	orrs	r3, r2
 8017f76:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8017f78:	69ba      	ldr	r2, [r7, #24]
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	6819      	ldr	r1, [r3, #0]
 8017f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f82:	3302      	adds	r3, #2
 8017f84:	440b      	add	r3, r1
 8017f86:	781b      	ldrb	r3, [r3, #0]
 8017f88:	041b      	lsls	r3, r3, #16
 8017f8a:	4313      	orrs	r3, r2
 8017f8c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8017f8e:	69bb      	ldr	r3, [r7, #24]
 8017f90:	2264      	movs	r2, #100	; 0x64
 8017f92:	fb02 f303 	mul.w	r3, r2, r3
 8017f96:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8017f98:	2300      	movs	r3, #0
 8017f9a:	61fb      	str	r3, [r7, #28]
 8017f9c:	e006      	b.n	8017fac <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8017fa8:	2300      	movs	r3, #0
 8017faa:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8017fac:	69bb      	ldr	r3, [r7, #24]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d00b      	beq.n	8017fca <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8017fb2:	f107 0318 	add.w	r3, r7, #24
 8017fb6:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8017fb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017fbc:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8017fbe:	f107 0310 	add.w	r3, r7, #16
 8017fc2:	4618      	mov	r0, r3
 8017fc4:	f000 fd14 	bl	80189f0 <RegionEU868ChannelAdd>
 8017fc8:	e007      	b.n	8017fda <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8017fca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017fce:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8017fd0:	f107 030c 	add.w	r3, r7, #12
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	f000 fdad 	bl	8018b34 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017fde:	3303      	adds	r3, #3
 8017fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017fe4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017fe8:	3301      	adds	r3, #1
 8017fea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017fee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017ff2:	2b0f      	cmp	r3, #15
 8017ff4:	d9aa      	bls.n	8017f4c <RegionEU868ApplyCFList+0x30>
 8017ff6:	e002      	b.n	8017ffe <RegionEU868ApplyCFList+0xe2>
        return;
 8017ff8:	bf00      	nop
 8017ffa:	e000      	b.n	8017ffe <RegionEU868ApplyCFList+0xe2>
        return;
 8017ffc:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8017ffe:	3728      	adds	r7, #40	; 0x28
 8018000:	46bd      	mov	sp, r7
 8018002:	bd80      	pop	{r7, pc}

08018004 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018004:	b580      	push	{r7, lr}
 8018006:	b082      	sub	sp, #8
 8018008:	af00      	add	r7, sp, #0
 801800a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	791b      	ldrb	r3, [r3, #4]
 8018010:	2b00      	cmp	r3, #0
 8018012:	d002      	beq.n	801801a <RegionEU868ChanMaskSet+0x16>
 8018014:	2b01      	cmp	r3, #1
 8018016:	d00b      	beq.n	8018030 <RegionEU868ChanMaskSet+0x2c>
 8018018:	e015      	b.n	8018046 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801801a:	4b0e      	ldr	r3, [pc, #56]	; (8018054 <RegionEU868ChanMaskSet+0x50>)
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	2201      	movs	r2, #1
 8018028:	4619      	mov	r1, r3
 801802a:	f7fe ff17 	bl	8016e5c <RegionCommonChanMaskCopy>
            break;
 801802e:	e00c      	b.n	801804a <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018030:	4b08      	ldr	r3, [pc, #32]	; (8018054 <RegionEU868ChanMaskSet+0x50>)
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	2201      	movs	r2, #1
 801803e:	4619      	mov	r1, r3
 8018040:	f7fe ff0c 	bl	8016e5c <RegionCommonChanMaskCopy>
            break;
 8018044:	e001      	b.n	801804a <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8018046:	2300      	movs	r3, #0
 8018048:	e000      	b.n	801804c <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 801804a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801804c:	4618      	mov	r0, r3
 801804e:	3708      	adds	r7, #8
 8018050:	46bd      	mov	sp, r7
 8018052:	bd80      	pop	{r7, pc}
 8018054:	20001704 	.word	0x20001704

08018058 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8018058:	b580      	push	{r7, lr}
 801805a:	b088      	sub	sp, #32
 801805c:	af02      	add	r7, sp, #8
 801805e:	60ba      	str	r2, [r7, #8]
 8018060:	607b      	str	r3, [r7, #4]
 8018062:	4603      	mov	r3, r0
 8018064:	73fb      	strb	r3, [r7, #15]
 8018066:	460b      	mov	r3, r1
 8018068:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801806a:	2300      	movs	r3, #0
 801806c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801806e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018072:	2b07      	cmp	r3, #7
 8018074:	bfa8      	it	ge
 8018076:	2307      	movge	r3, #7
 8018078:	b25a      	sxtb	r2, r3
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018084:	491e      	ldr	r1, [pc, #120]	; (8018100 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8018086:	4618      	mov	r0, r3
 8018088:	f7ff fb88 	bl	801779c <RegionCommonGetBandwidth>
 801808c:	4603      	mov	r3, r0
 801808e:	b2da      	uxtb	r2, r3
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801809a:	2b07      	cmp	r3, #7
 801809c:	d10a      	bne.n	80180b4 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80180a4:	461a      	mov	r2, r3
 80180a6:	4b17      	ldr	r3, [pc, #92]	; (8018104 <RegionEU868ComputeRxWindowParameters+0xac>)
 80180a8:	5c9b      	ldrb	r3, [r3, r2]
 80180aa:	4618      	mov	r0, r3
 80180ac:	f7ff f90a 	bl	80172c4 <RegionCommonComputeSymbolTimeFsk>
 80180b0:	6178      	str	r0, [r7, #20]
 80180b2:	e011      	b.n	80180d8 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80180ba:	461a      	mov	r2, r3
 80180bc:	4b11      	ldr	r3, [pc, #68]	; (8018104 <RegionEU868ComputeRxWindowParameters+0xac>)
 80180be:	5c9a      	ldrb	r2, [r3, r2]
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80180c6:	4619      	mov	r1, r3
 80180c8:	4b0d      	ldr	r3, [pc, #52]	; (8018100 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80180ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80180ce:	4619      	mov	r1, r3
 80180d0:	4610      	mov	r0, r2
 80180d2:	f7ff f8e1 	bl	8017298 <RegionCommonComputeSymbolTimeLoRa>
 80180d6:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80180d8:	4b0b      	ldr	r3, [pc, #44]	; (8018108 <RegionEU868ComputeRxWindowParameters+0xb0>)
 80180da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80180dc:	4798      	blx	r3
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	3308      	adds	r3, #8
 80180e2:	687a      	ldr	r2, [r7, #4]
 80180e4:	320c      	adds	r2, #12
 80180e6:	7bb9      	ldrb	r1, [r7, #14]
 80180e8:	9201      	str	r2, [sp, #4]
 80180ea:	9300      	str	r3, [sp, #0]
 80180ec:	4603      	mov	r3, r0
 80180ee:	68ba      	ldr	r2, [r7, #8]
 80180f0:	6978      	ldr	r0, [r7, #20]
 80180f2:	f7ff f8f7 	bl	80172e4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80180f6:	bf00      	nop
 80180f8:	3718      	adds	r7, #24
 80180fa:	46bd      	mov	sp, r7
 80180fc:	bd80      	pop	{r7, pc}
 80180fe:	bf00      	nop
 8018100:	0801e890 	.word	0x0801e890
 8018104:	0801e888 	.word	0x0801e888
 8018108:	0801e8c0 	.word	0x0801e8c0

0801810c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801810c:	b5b0      	push	{r4, r5, r7, lr}
 801810e:	b090      	sub	sp, #64	; 0x40
 8018110:	af0a      	add	r7, sp, #40	; 0x28
 8018112:	6078      	str	r0, [r7, #4]
 8018114:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	785b      	ldrb	r3, [r3, #1]
 801811a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801811c:	2300      	movs	r3, #0
 801811e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8018120:	2300      	movs	r3, #0
 8018122:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	685b      	ldr	r3, [r3, #4]
 8018128:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801812a:	4b5a      	ldr	r3, [pc, #360]	; (8018294 <RegionEU868RxConfig+0x188>)
 801812c:	685b      	ldr	r3, [r3, #4]
 801812e:	4798      	blx	r3
 8018130:	4603      	mov	r3, r0
 8018132:	2b00      	cmp	r3, #0
 8018134:	d001      	beq.n	801813a <RegionEU868RxConfig+0x2e>
    {
        return false;
 8018136:	2300      	movs	r3, #0
 8018138:	e0a8      	b.n	801828c <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	7cdb      	ldrb	r3, [r3, #19]
 801813e:	2b00      	cmp	r3, #0
 8018140:	d126      	bne.n	8018190 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8018142:	4b55      	ldr	r3, [pc, #340]	; (8018298 <RegionEU868RxConfig+0x18c>)
 8018144:	681a      	ldr	r2, [r3, #0]
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	781b      	ldrb	r3, [r3, #0]
 801814a:	4619      	mov	r1, r3
 801814c:	460b      	mov	r3, r1
 801814e:	005b      	lsls	r3, r3, #1
 8018150:	440b      	add	r3, r1
 8018152:	009b      	lsls	r3, r3, #2
 8018154:	4413      	add	r3, r2
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801815a:	4b4f      	ldr	r3, [pc, #316]	; (8018298 <RegionEU868RxConfig+0x18c>)
 801815c:	681a      	ldr	r2, [r3, #0]
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	781b      	ldrb	r3, [r3, #0]
 8018162:	4619      	mov	r1, r3
 8018164:	460b      	mov	r3, r1
 8018166:	005b      	lsls	r3, r3, #1
 8018168:	440b      	add	r3, r1
 801816a:	009b      	lsls	r3, r3, #2
 801816c:	4413      	add	r3, r2
 801816e:	3304      	adds	r3, #4
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	2b00      	cmp	r3, #0
 8018174:	d00c      	beq.n	8018190 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8018176:	4b48      	ldr	r3, [pc, #288]	; (8018298 <RegionEU868RxConfig+0x18c>)
 8018178:	681a      	ldr	r2, [r3, #0]
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	781b      	ldrb	r3, [r3, #0]
 801817e:	4619      	mov	r1, r3
 8018180:	460b      	mov	r3, r1
 8018182:	005b      	lsls	r3, r3, #1
 8018184:	440b      	add	r3, r1
 8018186:	009b      	lsls	r3, r3, #2
 8018188:	4413      	add	r3, r2
 801818a:	3304      	adds	r3, #4
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8018190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018194:	4a41      	ldr	r2, [pc, #260]	; (801829c <RegionEU868RxConfig+0x190>)
 8018196:	5cd3      	ldrb	r3, [r2, r3]
 8018198:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801819a:	4b3e      	ldr	r3, [pc, #248]	; (8018294 <RegionEU868RxConfig+0x188>)
 801819c:	68db      	ldr	r3, [r3, #12]
 801819e:	6938      	ldr	r0, [r7, #16]
 80181a0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80181a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80181a6:	2b07      	cmp	r3, #7
 80181a8:	d128      	bne.n	80181fc <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 80181aa:	2300      	movs	r3, #0
 80181ac:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80181ae:	4b39      	ldr	r3, [pc, #228]	; (8018294 <RegionEU868RxConfig+0x188>)
 80181b0:	699c      	ldr	r4, [r3, #24]
 80181b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80181b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80181ba:	fb02 f303 	mul.w	r3, r2, r3
 80181be:	4619      	mov	r1, r3
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	689b      	ldr	r3, [r3, #8]
 80181c4:	b29b      	uxth	r3, r3
 80181c6:	687a      	ldr	r2, [r7, #4]
 80181c8:	7c92      	ldrb	r2, [r2, #18]
 80181ca:	7df8      	ldrb	r0, [r7, #23]
 80181cc:	9209      	str	r2, [sp, #36]	; 0x24
 80181ce:	2200      	movs	r2, #0
 80181d0:	9208      	str	r2, [sp, #32]
 80181d2:	2200      	movs	r2, #0
 80181d4:	9207      	str	r2, [sp, #28]
 80181d6:	2200      	movs	r2, #0
 80181d8:	9206      	str	r2, [sp, #24]
 80181da:	2201      	movs	r2, #1
 80181dc:	9205      	str	r2, [sp, #20]
 80181de:	2200      	movs	r2, #0
 80181e0:	9204      	str	r2, [sp, #16]
 80181e2:	2200      	movs	r2, #0
 80181e4:	9203      	str	r2, [sp, #12]
 80181e6:	9302      	str	r3, [sp, #8]
 80181e8:	2305      	movs	r3, #5
 80181ea:	9301      	str	r3, [sp, #4]
 80181ec:	4b2c      	ldr	r3, [pc, #176]	; (80182a0 <RegionEU868RxConfig+0x194>)
 80181ee:	9300      	str	r3, [sp, #0]
 80181f0:	2300      	movs	r3, #0
 80181f2:	460a      	mov	r2, r1
 80181f4:	f24c 3150 	movw	r1, #50000	; 0xc350
 80181f8:	47a0      	blx	r4
 80181fa:	e024      	b.n	8018246 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80181fc:	2301      	movs	r3, #1
 80181fe:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8018200:	4b24      	ldr	r3, [pc, #144]	; (8018294 <RegionEU868RxConfig+0x188>)
 8018202:	699c      	ldr	r4, [r3, #24]
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	789b      	ldrb	r3, [r3, #2]
 8018208:	461d      	mov	r5, r3
 801820a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	689b      	ldr	r3, [r3, #8]
 8018212:	b29b      	uxth	r3, r3
 8018214:	687a      	ldr	r2, [r7, #4]
 8018216:	7c92      	ldrb	r2, [r2, #18]
 8018218:	7df8      	ldrb	r0, [r7, #23]
 801821a:	9209      	str	r2, [sp, #36]	; 0x24
 801821c:	2201      	movs	r2, #1
 801821e:	9208      	str	r2, [sp, #32]
 8018220:	2200      	movs	r2, #0
 8018222:	9207      	str	r2, [sp, #28]
 8018224:	2200      	movs	r2, #0
 8018226:	9206      	str	r2, [sp, #24]
 8018228:	2200      	movs	r2, #0
 801822a:	9205      	str	r2, [sp, #20]
 801822c:	2200      	movs	r2, #0
 801822e:	9204      	str	r2, [sp, #16]
 8018230:	2200      	movs	r2, #0
 8018232:	9203      	str	r2, [sp, #12]
 8018234:	9302      	str	r3, [sp, #8]
 8018236:	2308      	movs	r3, #8
 8018238:	9301      	str	r3, [sp, #4]
 801823a:	2300      	movs	r3, #0
 801823c:	9300      	str	r3, [sp, #0]
 801823e:	2301      	movs	r3, #1
 8018240:	460a      	mov	r2, r1
 8018242:	4629      	mov	r1, r5
 8018244:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	7c5b      	ldrb	r3, [r3, #17]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d005      	beq.n	801825a <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801824e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018252:	4a14      	ldr	r2, [pc, #80]	; (80182a4 <RegionEU868RxConfig+0x198>)
 8018254:	5cd3      	ldrb	r3, [r2, r3]
 8018256:	75bb      	strb	r3, [r7, #22]
 8018258:	e004      	b.n	8018264 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801825a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801825e:	4a12      	ldr	r2, [pc, #72]	; (80182a8 <RegionEU868RxConfig+0x19c>)
 8018260:	5cd3      	ldrb	r3, [r2, r3]
 8018262:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018264:	4b0b      	ldr	r3, [pc, #44]	; (8018294 <RegionEU868RxConfig+0x188>)
 8018266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018268:	7dba      	ldrb	r2, [r7, #22]
 801826a:	320d      	adds	r2, #13
 801826c:	b2d1      	uxtb	r1, r2
 801826e:	7dfa      	ldrb	r2, [r7, #23]
 8018270:	4610      	mov	r0, r2
 8018272:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	7cdb      	ldrb	r3, [r3, #19]
 8018278:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801827c:	6939      	ldr	r1, [r7, #16]
 801827e:	4618      	mov	r0, r3
 8018280:	f7ff faaa 	bl	80177d8 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8018284:	683b      	ldr	r3, [r7, #0]
 8018286:	7bfa      	ldrb	r2, [r7, #15]
 8018288:	701a      	strb	r2, [r3, #0]
    return true;
 801828a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801828c:	4618      	mov	r0, r3
 801828e:	3718      	adds	r7, #24
 8018290:	46bd      	mov	sp, r7
 8018292:	bdb0      	pop	{r4, r5, r7, pc}
 8018294:	0801e8c0 	.word	0x0801e8c0
 8018298:	20001704 	.word	0x20001704
 801829c:	0801e888 	.word	0x0801e888
 80182a0:	00014585 	.word	0x00014585
 80182a4:	0801e8b8 	.word	0x0801e8b8
 80182a8:	0801e8b0 	.word	0x0801e8b0

080182ac <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80182ac:	b590      	push	{r4, r7, lr}
 80182ae:	b093      	sub	sp, #76	; 0x4c
 80182b0:	af0a      	add	r7, sp, #40	; 0x28
 80182b2:	60f8      	str	r0, [r7, #12]
 80182b4:	60b9      	str	r1, [r7, #8]
 80182b6:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80182be:	461a      	mov	r2, r3
 80182c0:	4b5d      	ldr	r3, [pc, #372]	; (8018438 <RegionEU868TxConfig+0x18c>)
 80182c2:	5c9b      	ldrb	r3, [r3, r2]
 80182c4:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80182c6:	68fb      	ldr	r3, [r7, #12]
 80182c8:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80182cc:	4b5b      	ldr	r3, [pc, #364]	; (801843c <RegionEU868TxConfig+0x190>)
 80182ce:	681a      	ldr	r2, [r3, #0]
 80182d0:	4b5b      	ldr	r3, [pc, #364]	; (8018440 <RegionEU868TxConfig+0x194>)
 80182d2:	6819      	ldr	r1, [r3, #0]
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	781b      	ldrb	r3, [r3, #0]
 80182d8:	461c      	mov	r4, r3
 80182da:	4623      	mov	r3, r4
 80182dc:	005b      	lsls	r3, r3, #1
 80182de:	4423      	add	r3, r4
 80182e0:	009b      	lsls	r3, r3, #2
 80182e2:	440b      	add	r3, r1
 80182e4:	3309      	adds	r3, #9
 80182e6:	781b      	ldrb	r3, [r3, #0]
 80182e8:	4619      	mov	r1, r3
 80182ea:	460b      	mov	r3, r1
 80182ec:	005b      	lsls	r3, r3, #1
 80182ee:	440b      	add	r3, r1
 80182f0:	00db      	lsls	r3, r3, #3
 80182f2:	4413      	add	r3, r2
 80182f4:	3302      	adds	r3, #2
 80182f6:	f993 3000 	ldrsb.w	r3, [r3]
 80182fa:	4619      	mov	r1, r3
 80182fc:	f7ff fa39 	bl	8017772 <RegionCommonLimitTxPower>
 8018300:	4603      	mov	r3, r0
 8018302:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8018304:	68fb      	ldr	r3, [r7, #12]
 8018306:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801830a:	494e      	ldr	r1, [pc, #312]	; (8018444 <RegionEU868TxConfig+0x198>)
 801830c:	4618      	mov	r0, r3
 801830e:	f7ff fa45 	bl	801779c <RegionCommonGetBandwidth>
 8018312:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8018314:	2300      	movs	r3, #0
 8018316:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	6859      	ldr	r1, [r3, #4]
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	689a      	ldr	r2, [r3, #8]
 8018320:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8018324:	4618      	mov	r0, r3
 8018326:	f7ff f895 	bl	8017454 <RegionCommonComputeTxPower>
 801832a:	4603      	mov	r3, r0
 801832c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801832e:	4b46      	ldr	r3, [pc, #280]	; (8018448 <RegionEU868TxConfig+0x19c>)
 8018330:	68da      	ldr	r2, [r3, #12]
 8018332:	4b43      	ldr	r3, [pc, #268]	; (8018440 <RegionEU868TxConfig+0x194>)
 8018334:	6819      	ldr	r1, [r3, #0]
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	781b      	ldrb	r3, [r3, #0]
 801833a:	4618      	mov	r0, r3
 801833c:	4603      	mov	r3, r0
 801833e:	005b      	lsls	r3, r3, #1
 8018340:	4403      	add	r3, r0
 8018342:	009b      	lsls	r3, r3, #2
 8018344:	440b      	add	r3, r1
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	4618      	mov	r0, r3
 801834a:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018352:	2b07      	cmp	r3, #7
 8018354:	d124      	bne.n	80183a0 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8018356:	2300      	movs	r3, #0
 8018358:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801835a:	4b3b      	ldr	r3, [pc, #236]	; (8018448 <RegionEU868TxConfig+0x19c>)
 801835c:	69dc      	ldr	r4, [r3, #28]
 801835e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018362:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018366:	fb02 f303 	mul.w	r3, r2, r3
 801836a:	461a      	mov	r2, r3
 801836c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018370:	7ff8      	ldrb	r0, [r7, #31]
 8018372:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8018376:	9308      	str	r3, [sp, #32]
 8018378:	2300      	movs	r3, #0
 801837a:	9307      	str	r3, [sp, #28]
 801837c:	2300      	movs	r3, #0
 801837e:	9306      	str	r3, [sp, #24]
 8018380:	2300      	movs	r3, #0
 8018382:	9305      	str	r3, [sp, #20]
 8018384:	2301      	movs	r3, #1
 8018386:	9304      	str	r3, [sp, #16]
 8018388:	2300      	movs	r3, #0
 801838a:	9303      	str	r3, [sp, #12]
 801838c:	2305      	movs	r3, #5
 801838e:	9302      	str	r3, [sp, #8]
 8018390:	2300      	movs	r3, #0
 8018392:	9301      	str	r3, [sp, #4]
 8018394:	9200      	str	r2, [sp, #0]
 8018396:	69bb      	ldr	r3, [r7, #24]
 8018398:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801839c:	47a0      	blx	r4
 801839e:	e01d      	b.n	80183dc <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 80183a0:	2301      	movs	r3, #1
 80183a2:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80183a4:	4b28      	ldr	r3, [pc, #160]	; (8018448 <RegionEU868TxConfig+0x19c>)
 80183a6:	69dc      	ldr	r4, [r3, #28]
 80183a8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80183ac:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80183b0:	7ff8      	ldrb	r0, [r7, #31]
 80183b2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80183b6:	9208      	str	r2, [sp, #32]
 80183b8:	2200      	movs	r2, #0
 80183ba:	9207      	str	r2, [sp, #28]
 80183bc:	2200      	movs	r2, #0
 80183be:	9206      	str	r2, [sp, #24]
 80183c0:	2200      	movs	r2, #0
 80183c2:	9205      	str	r2, [sp, #20]
 80183c4:	2201      	movs	r2, #1
 80183c6:	9204      	str	r2, [sp, #16]
 80183c8:	2200      	movs	r2, #0
 80183ca:	9203      	str	r2, [sp, #12]
 80183cc:	2208      	movs	r2, #8
 80183ce:	9202      	str	r2, [sp, #8]
 80183d0:	2201      	movs	r2, #1
 80183d2:	9201      	str	r2, [sp, #4]
 80183d4:	9300      	str	r3, [sp, #0]
 80183d6:	69bb      	ldr	r3, [r7, #24]
 80183d8:	2200      	movs	r2, #0
 80183da:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80183dc:	4b18      	ldr	r3, [pc, #96]	; (8018440 <RegionEU868TxConfig+0x194>)
 80183de:	681a      	ldr	r2, [r3, #0]
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	781b      	ldrb	r3, [r3, #0]
 80183e4:	4619      	mov	r1, r3
 80183e6:	460b      	mov	r3, r1
 80183e8:	005b      	lsls	r3, r3, #1
 80183ea:	440b      	add	r3, r1
 80183ec:	009b      	lsls	r3, r3, #2
 80183ee:	4413      	add	r3, r2
 80183f0:	681a      	ldr	r2, [r3, #0]
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80183f8:	4619      	mov	r1, r3
 80183fa:	4610      	mov	r0, r2
 80183fc:	f7ff fa1e 	bl	801783c <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018406:	68fb      	ldr	r3, [r7, #12]
 8018408:	899b      	ldrh	r3, [r3, #12]
 801840a:	4619      	mov	r1, r3
 801840c:	4610      	mov	r0, r2
 801840e:	f7ff faa3 	bl	8017958 <GetTimeOnAir>
 8018412:	4602      	mov	r2, r0
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8018418:	4b0b      	ldr	r3, [pc, #44]	; (8018448 <RegionEU868TxConfig+0x19c>)
 801841a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801841c:	68fa      	ldr	r2, [r7, #12]
 801841e:	8992      	ldrh	r2, [r2, #12]
 8018420:	b2d1      	uxtb	r1, r2
 8018422:	7ffa      	ldrb	r2, [r7, #31]
 8018424:	4610      	mov	r0, r2
 8018426:	4798      	blx	r3

    *txPower = txPowerLimited;
 8018428:	68bb      	ldr	r3, [r7, #8]
 801842a:	7f7a      	ldrb	r2, [r7, #29]
 801842c:	701a      	strb	r2, [r3, #0]
    return true;
 801842e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8018430:	4618      	mov	r0, r3
 8018432:	3724      	adds	r7, #36	; 0x24
 8018434:	46bd      	mov	sp, r7
 8018436:	bd90      	pop	{r4, r7, pc}
 8018438:	0801e888 	.word	0x0801e888
 801843c:	20001700 	.word	0x20001700
 8018440:	20001704 	.word	0x20001704
 8018444:	0801e890 	.word	0x0801e890
 8018448:	0801e8c0 	.word	0x0801e8c0

0801844c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801844c:	b590      	push	{r4, r7, lr}
 801844e:	b093      	sub	sp, #76	; 0x4c
 8018450:	af00      	add	r7, sp, #0
 8018452:	60f8      	str	r0, [r7, #12]
 8018454:	60b9      	str	r1, [r7, #8]
 8018456:	607a      	str	r2, [r7, #4]
 8018458:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801845a:	2307      	movs	r3, #7
 801845c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018460:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018464:	2200      	movs	r2, #0
 8018466:	601a      	str	r2, [r3, #0]
 8018468:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801846a:	2300      	movs	r3, #0
 801846c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8018470:	2300      	movs	r3, #0
 8018472:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8018476:	2300      	movs	r3, #0
 8018478:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801847a:	e085      	b.n	8018588 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801847c:	68fb      	ldr	r3, [r7, #12]
 801847e:	685a      	ldr	r2, [r3, #4]
 8018480:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8018484:	4413      	add	r3, r2
 8018486:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801848a:	4611      	mov	r1, r2
 801848c:	4618      	mov	r0, r3
 801848e:	f7fe fe29 	bl	80170e4 <RegionCommonParseLinkAdrReq>
 8018492:	4603      	mov	r3, r0
 8018494:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8018498:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801849c:	2b00      	cmp	r3, #0
 801849e:	d07b      	beq.n	8018598 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80184a0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80184a4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80184a8:	4413      	add	r3, r2
 80184aa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80184ae:	2307      	movs	r3, #7
 80184b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80184b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80184b8:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80184ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d109      	bne.n	80184d6 <RegionEU868LinkAdrReq+0x8a>
 80184c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d106      	bne.n	80184d6 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80184c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80184cc:	f023 0301 	bic.w	r3, r3, #1
 80184d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80184d4:	e058      	b.n	8018588 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80184d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d003      	beq.n	80184e6 <RegionEU868LinkAdrReq+0x9a>
 80184de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80184e2:	2b05      	cmp	r3, #5
 80184e4:	d903      	bls.n	80184ee <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80184e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80184ea:	2b06      	cmp	r3, #6
 80184ec:	d906      	bls.n	80184fc <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80184ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80184f2:	f023 0301 	bic.w	r3, r3, #1
 80184f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80184fa:	e045      	b.n	8018588 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80184fc:	2300      	movs	r3, #0
 80184fe:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8018502:	e03d      	b.n	8018580 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8018504:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018508:	2b06      	cmp	r3, #6
 801850a:	d118      	bne.n	801853e <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801850c:	4b5f      	ldr	r3, [pc, #380]	; (801868c <RegionEU868LinkAdrReq+0x240>)
 801850e:	6819      	ldr	r1, [r3, #0]
 8018510:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8018514:	4613      	mov	r3, r2
 8018516:	005b      	lsls	r3, r3, #1
 8018518:	4413      	add	r3, r2
 801851a:	009b      	lsls	r3, r3, #2
 801851c:	440b      	add	r3, r1
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d028      	beq.n	8018576 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8018524:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018528:	2201      	movs	r2, #1
 801852a:	fa02 f303 	lsl.w	r3, r2, r3
 801852e:	b21a      	sxth	r2, r3
 8018530:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018532:	b21b      	sxth	r3, r3
 8018534:	4313      	orrs	r3, r2
 8018536:	b21b      	sxth	r3, r3
 8018538:	b29b      	uxth	r3, r3
 801853a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801853c:	e01b      	b.n	8018576 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801853e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018540:	461a      	mov	r2, r3
 8018542:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018546:	fa42 f303 	asr.w	r3, r2, r3
 801854a:	f003 0301 	and.w	r3, r3, #1
 801854e:	2b00      	cmp	r3, #0
 8018550:	d011      	beq.n	8018576 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8018552:	4b4e      	ldr	r3, [pc, #312]	; (801868c <RegionEU868LinkAdrReq+0x240>)
 8018554:	6819      	ldr	r1, [r3, #0]
 8018556:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801855a:	4613      	mov	r3, r2
 801855c:	005b      	lsls	r3, r3, #1
 801855e:	4413      	add	r3, r2
 8018560:	009b      	lsls	r3, r3, #2
 8018562:	440b      	add	r3, r1
 8018564:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018566:	2b00      	cmp	r3, #0
 8018568:	d105      	bne.n	8018576 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801856a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801856e:	f023 0301 	bic.w	r3, r3, #1
 8018572:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018576:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801857a:	3301      	adds	r3, #1
 801857c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8018580:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018584:	2b0f      	cmp	r3, #15
 8018586:	d9bd      	bls.n	8018504 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	7a1b      	ldrb	r3, [r3, #8]
 801858c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8018590:	429a      	cmp	r2, r3
 8018592:	f4ff af73 	bcc.w	801847c <RegionEU868LinkAdrReq+0x30>
 8018596:	e000      	b.n	801859a <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8018598:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801859a:	2302      	movs	r3, #2
 801859c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	7a5b      	ldrb	r3, [r3, #9]
 80185a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80185a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80185ac:	4618      	mov	r0, r3
 80185ae:	f7ff fa23 	bl	80179f8 <RegionEU868GetPhyParam>
 80185b2:	4603      	mov	r3, r0
 80185b4:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 80185b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80185ba:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	7a9b      	ldrb	r3, [r3, #10]
 80185c0:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80185c2:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80185c6:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80185c8:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80185cc:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80185ce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80185d2:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80185da:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80185e2:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	7b5b      	ldrb	r3, [r3, #13]
 80185e8:	b25b      	sxtb	r3, r3
 80185ea:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80185ec:	2310      	movs	r3, #16
 80185ee:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80185f0:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80185f4:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80185f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185f8:	b25b      	sxtb	r3, r3
 80185fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80185fe:	2307      	movs	r3, #7
 8018600:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8018604:	4b21      	ldr	r3, [pc, #132]	; (801868c <RegionEU868LinkAdrReq+0x240>)
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801860a:	2307      	movs	r3, #7
 801860c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8018610:	2300      	movs	r3, #0
 8018612:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801861c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8018620:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018624:	1c9a      	adds	r2, r3, #2
 8018626:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801862a:	1c59      	adds	r1, r3, #1
 801862c:	f107 0010 	add.w	r0, r7, #16
 8018630:	4623      	mov	r3, r4
 8018632:	f7fe fda8 	bl	8017186 <RegionCommonLinkAdrReqVerifyParams>
 8018636:	4603      	mov	r3, r0
 8018638:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801863c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018640:	2b07      	cmp	r3, #7
 8018642:	d10d      	bne.n	8018660 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8018644:	4b11      	ldr	r3, [pc, #68]	; (801868c <RegionEU868LinkAdrReq+0x240>)
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801864c:	220c      	movs	r2, #12
 801864e:	2100      	movs	r1, #0
 8018650:	4618      	mov	r0, r3
 8018652:	f000 fb83 	bl	8018d5c <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8018656:	4b0d      	ldr	r3, [pc, #52]	; (801868c <RegionEU868LinkAdrReq+0x240>)
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801865c:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018660:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8018664:	68bb      	ldr	r3, [r7, #8]
 8018666:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018668:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018670:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8018674:	683b      	ldr	r3, [r7, #0]
 8018676:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801867a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801867e:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8018680:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8018684:	4618      	mov	r0, r3
 8018686:	374c      	adds	r7, #76	; 0x4c
 8018688:	46bd      	mov	sp, r7
 801868a:	bd90      	pop	{r4, r7, pc}
 801868c:	20001704 	.word	0x20001704

08018690 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018690:	b580      	push	{r7, lr}
 8018692:	b084      	sub	sp, #16
 8018694:	af00      	add	r7, sp, #0
 8018696:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018698:	2307      	movs	r3, #7
 801869a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801869c:	2300      	movs	r3, #0
 801869e:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	685b      	ldr	r3, [r3, #4]
 80186a4:	f107 020e 	add.w	r2, r7, #14
 80186a8:	4611      	mov	r1, r2
 80186aa:	4618      	mov	r0, r3
 80186ac:	f7ff f8de 	bl	801786c <VerifyRfFreq>
 80186b0:	4603      	mov	r3, r0
 80186b2:	f083 0301 	eor.w	r3, r3, #1
 80186b6:	b2db      	uxtb	r3, r3
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d003      	beq.n	80186c4 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80186bc:	7bfb      	ldrb	r3, [r7, #15]
 80186be:	f023 0301 	bic.w	r3, r3, #1
 80186c2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	f993 3000 	ldrsb.w	r3, [r3]
 80186ca:	2207      	movs	r2, #7
 80186cc:	2100      	movs	r1, #0
 80186ce:	4618      	mov	r0, r3
 80186d0:	f7fe fb47 	bl	8016d62 <RegionCommonValueInRange>
 80186d4:	4603      	mov	r3, r0
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d103      	bne.n	80186e2 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80186da:	7bfb      	ldrb	r3, [r7, #15]
 80186dc:	f023 0302 	bic.w	r3, r3, #2
 80186e0:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80186e8:	2205      	movs	r2, #5
 80186ea:	2100      	movs	r1, #0
 80186ec:	4618      	mov	r0, r3
 80186ee:	f7fe fb38 	bl	8016d62 <RegionCommonValueInRange>
 80186f2:	4603      	mov	r3, r0
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d103      	bne.n	8018700 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80186f8:	7bfb      	ldrb	r3, [r7, #15]
 80186fa:	f023 0304 	bic.w	r3, r3, #4
 80186fe:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8018700:	7bfb      	ldrb	r3, [r7, #15]
}
 8018702:	4618      	mov	r0, r3
 8018704:	3710      	adds	r7, #16
 8018706:	46bd      	mov	sp, r7
 8018708:	bd80      	pop	{r7, pc}
	...

0801870c <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801870c:	b580      	push	{r7, lr}
 801870e:	b086      	sub	sp, #24
 8018710:	af00      	add	r7, sp, #0
 8018712:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018714:	2303      	movs	r3, #3
 8018716:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	2b00      	cmp	r3, #0
 8018720:	d114      	bne.n	801874c <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8018728:	b2db      	uxtb	r3, r3
 801872a:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 801872c:	f107 0308 	add.w	r3, r7, #8
 8018730:	4618      	mov	r0, r3
 8018732:	f000 f9ff 	bl	8018b34 <RegionEU868ChannelsRemove>
 8018736:	4603      	mov	r3, r0
 8018738:	f083 0301 	eor.w	r3, r3, #1
 801873c:	b2db      	uxtb	r3, r3
 801873e:	2b00      	cmp	r3, #0
 8018740:	d03b      	beq.n	80187ba <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8018742:	7dfb      	ldrb	r3, [r7, #23]
 8018744:	f023 0303 	bic.w	r3, r3, #3
 8018748:	75fb      	strb	r3, [r7, #23]
 801874a:	e036      	b.n	80187ba <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8018758:	b2db      	uxtb	r3, r3
 801875a:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 801875c:	f107 030c 	add.w	r3, r7, #12
 8018760:	4618      	mov	r0, r3
 8018762:	f000 f945 	bl	80189f0 <RegionEU868ChannelAdd>
 8018766:	4603      	mov	r3, r0
 8018768:	2b06      	cmp	r3, #6
 801876a:	d820      	bhi.n	80187ae <RegionEU868NewChannelReq+0xa2>
 801876c:	a201      	add	r2, pc, #4	; (adr r2, 8018774 <RegionEU868NewChannelReq+0x68>)
 801876e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018772:	bf00      	nop
 8018774:	080187b9 	.word	0x080187b9
 8018778:	080187af 	.word	0x080187af
 801877c:	080187af 	.word	0x080187af
 8018780:	080187af 	.word	0x080187af
 8018784:	08018791 	.word	0x08018791
 8018788:	0801879b 	.word	0x0801879b
 801878c:	080187a5 	.word	0x080187a5
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8018790:	7dfb      	ldrb	r3, [r7, #23]
 8018792:	f023 0301 	bic.w	r3, r3, #1
 8018796:	75fb      	strb	r3, [r7, #23]
                break;
 8018798:	e00f      	b.n	80187ba <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801879a:	7dfb      	ldrb	r3, [r7, #23]
 801879c:	f023 0302 	bic.w	r3, r3, #2
 80187a0:	75fb      	strb	r3, [r7, #23]
                break;
 80187a2:	e00a      	b.n	80187ba <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80187a4:	7dfb      	ldrb	r3, [r7, #23]
 80187a6:	f023 0303 	bic.w	r3, r3, #3
 80187aa:	75fb      	strb	r3, [r7, #23]
                break;
 80187ac:	e005      	b.n	80187ba <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80187ae:	7dfb      	ldrb	r3, [r7, #23]
 80187b0:	f023 0303 	bic.w	r3, r3, #3
 80187b4:	75fb      	strb	r3, [r7, #23]
                break;
 80187b6:	e000      	b.n	80187ba <RegionEU868NewChannelReq+0xae>
                break;
 80187b8:	bf00      	nop
            }
        }
    }

    return status;
 80187ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80187be:	4618      	mov	r0, r3
 80187c0:	3718      	adds	r7, #24
 80187c2:	46bd      	mov	sp, r7
 80187c4:	bd80      	pop	{r7, pc}
 80187c6:	bf00      	nop

080187c8 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80187c8:	b480      	push	{r7}
 80187ca:	b083      	sub	sp, #12
 80187cc:	af00      	add	r7, sp, #0
 80187ce:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80187d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80187d4:	4618      	mov	r0, r3
 80187d6:	370c      	adds	r7, #12
 80187d8:	46bd      	mov	sp, r7
 80187da:	bc80      	pop	{r7}
 80187dc:	4770      	bx	lr
	...

080187e0 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80187e0:	b580      	push	{r7, lr}
 80187e2:	b084      	sub	sp, #16
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80187e8:	2303      	movs	r3, #3
 80187ea:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 80187ec:	2300      	movs	r3, #0
 80187ee:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	781b      	ldrb	r3, [r3, #0]
 80187f4:	2b0f      	cmp	r3, #15
 80187f6:	d901      	bls.n	80187fc <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 80187f8:	2300      	movs	r3, #0
 80187fa:	e035      	b.n	8018868 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	685b      	ldr	r3, [r3, #4]
 8018800:	f107 020e 	add.w	r2, r7, #14
 8018804:	4611      	mov	r1, r2
 8018806:	4618      	mov	r0, r3
 8018808:	f7ff f830 	bl	801786c <VerifyRfFreq>
 801880c:	4603      	mov	r3, r0
 801880e:	f083 0301 	eor.w	r3, r3, #1
 8018812:	b2db      	uxtb	r3, r3
 8018814:	2b00      	cmp	r3, #0
 8018816:	d003      	beq.n	8018820 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8018818:	7bfb      	ldrb	r3, [r7, #15]
 801881a:	f023 0301 	bic.w	r3, r3, #1
 801881e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8018820:	4b13      	ldr	r3, [pc, #76]	; (8018870 <RegionEU868DlChannelReq+0x90>)
 8018822:	681a      	ldr	r2, [r3, #0]
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	781b      	ldrb	r3, [r3, #0]
 8018828:	4619      	mov	r1, r3
 801882a:	460b      	mov	r3, r1
 801882c:	005b      	lsls	r3, r3, #1
 801882e:	440b      	add	r3, r1
 8018830:	009b      	lsls	r3, r3, #2
 8018832:	4413      	add	r3, r2
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d103      	bne.n	8018842 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 801883a:	7bfb      	ldrb	r3, [r7, #15]
 801883c:	f023 0302 	bic.w	r3, r3, #2
 8018840:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8018842:	7bfb      	ldrb	r3, [r7, #15]
 8018844:	2b03      	cmp	r3, #3
 8018846:	d10d      	bne.n	8018864 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8018848:	4b09      	ldr	r3, [pc, #36]	; (8018870 <RegionEU868DlChannelReq+0x90>)
 801884a:	6819      	ldr	r1, [r3, #0]
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	781b      	ldrb	r3, [r3, #0]
 8018850:	4618      	mov	r0, r3
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	685a      	ldr	r2, [r3, #4]
 8018856:	4603      	mov	r3, r0
 8018858:	005b      	lsls	r3, r3, #1
 801885a:	4403      	add	r3, r0
 801885c:	009b      	lsls	r3, r3, #2
 801885e:	440b      	add	r3, r1
 8018860:	3304      	adds	r3, #4
 8018862:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8018864:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018868:	4618      	mov	r0, r3
 801886a:	3710      	adds	r7, #16
 801886c:	46bd      	mov	sp, r7
 801886e:	bd80      	pop	{r7, pc}
 8018870:	20001704 	.word	0x20001704

08018874 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018874:	b480      	push	{r7}
 8018876:	b083      	sub	sp, #12
 8018878:	af00      	add	r7, sp, #0
 801887a:	4603      	mov	r3, r0
 801887c:	460a      	mov	r2, r1
 801887e:	71fb      	strb	r3, [r7, #7]
 8018880:	4613      	mov	r3, r2
 8018882:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8018884:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8018888:	4618      	mov	r0, r3
 801888a:	370c      	adds	r7, #12
 801888c:	46bd      	mov	sp, r7
 801888e:	bc80      	pop	{r7}
 8018890:	4770      	bx	lr
	...

08018894 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018894:	b580      	push	{r7, lr}
 8018896:	b09a      	sub	sp, #104	; 0x68
 8018898:	af02      	add	r7, sp, #8
 801889a:	60f8      	str	r0, [r7, #12]
 801889c:	60b9      	str	r1, [r7, #8]
 801889e:	607a      	str	r2, [r7, #4]
 80188a0:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80188a2:	2300      	movs	r3, #0
 80188a4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 80188a8:	2300      	movs	r3, #0
 80188aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80188ae:	2300      	movs	r3, #0
 80188b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80188b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80188b6:	2200      	movs	r2, #0
 80188b8:	601a      	str	r2, [r3, #0]
 80188ba:	605a      	str	r2, [r3, #4]
 80188bc:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80188be:	230c      	movs	r3, #12
 80188c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80188c4:	2307      	movs	r3, #7
 80188c6:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80188c8:	4b47      	ldr	r3, [pc, #284]	; (80189e8 <RegionEU868NextChannel+0x154>)
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80188d0:	2201      	movs	r2, #1
 80188d2:	2100      	movs	r1, #0
 80188d4:	4618      	mov	r0, r3
 80188d6:	f7fe fa95 	bl	8016e04 <RegionCommonCountChannels>
 80188da:	4603      	mov	r3, r0
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d10a      	bne.n	80188f6 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80188e0:	4b41      	ldr	r3, [pc, #260]	; (80189e8 <RegionEU868NextChannel+0x154>)
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 80188e8:	4b3f      	ldr	r3, [pc, #252]	; (80189e8 <RegionEU868NextChannel+0x154>)
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	f042 0207 	orr.w	r2, r2, #7
 80188f0:	b292      	uxth	r2, r2
 80188f2:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	7a5b      	ldrb	r3, [r3, #9]
 80188fa:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018902:	b2db      	uxtb	r3, r3
 8018904:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018906:	4b38      	ldr	r3, [pc, #224]	; (80189e8 <RegionEU868NextChannel+0x154>)
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801890e:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8018910:	4b35      	ldr	r3, [pc, #212]	; (80189e8 <RegionEU868NextChannel+0x154>)
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8018916:	4b35      	ldr	r3, [pc, #212]	; (80189ec <RegionEU868NextChannel+0x158>)
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801891c:	2310      	movs	r3, #16
 801891e:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8018920:	f107 0312 	add.w	r3, r7, #18
 8018924:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	685b      	ldr	r3, [r3, #4]
 8018930:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	7a9b      	ldrb	r3, [r3, #10]
 8018936:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801893a:	2306      	movs	r3, #6
 801893c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018940:	68fa      	ldr	r2, [r7, #12]
 8018942:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018946:	320c      	adds	r2, #12
 8018948:	e892 0003 	ldmia.w	r2, {r0, r1}
 801894c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	7d1b      	ldrb	r3, [r3, #20]
 8018954:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	8adb      	ldrh	r3, [r3, #22]
 8018962:	4619      	mov	r1, r3
 8018964:	4610      	mov	r0, r2
 8018966:	f7fe fff7 	bl	8017958 <GetTimeOnAir>
 801896a:	4603      	mov	r3, r0
 801896c:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801896e:	f107 0314 	add.w	r3, r7, #20
 8018972:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018974:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8018978:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801897c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	9301      	str	r3, [sp, #4]
 8018984:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8018988:	9300      	str	r3, [sp, #0]
 801898a:	460b      	mov	r3, r1
 801898c:	6839      	ldr	r1, [r7, #0]
 801898e:	f7fe fe50 	bl	8017632 <RegionCommonIdentifyChannels>
 8018992:	4603      	mov	r3, r0
 8018994:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018998:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801899c:	2b00      	cmp	r3, #0
 801899e:	d10e      	bne.n	80189be <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80189a0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80189a4:	3b01      	subs	r3, #1
 80189a6:	4619      	mov	r1, r3
 80189a8:	2000      	movs	r0, #0
 80189aa:	f000 f985 	bl	8018cb8 <randr>
 80189ae:	4603      	mov	r3, r0
 80189b0:	3360      	adds	r3, #96	; 0x60
 80189b2:	443b      	add	r3, r7
 80189b4:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80189b8:	68bb      	ldr	r3, [r7, #8]
 80189ba:	701a      	strb	r2, [r3, #0]
 80189bc:	e00e      	b.n	80189dc <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80189be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80189c2:	2b0c      	cmp	r3, #12
 80189c4:	d10a      	bne.n	80189dc <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80189c6:	4b08      	ldr	r3, [pc, #32]	; (80189e8 <RegionEU868NextChannel+0x154>)
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 80189ce:	4b06      	ldr	r3, [pc, #24]	; (80189e8 <RegionEU868NextChannel+0x154>)
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	f042 0207 	orr.w	r2, r2, #7
 80189d6:	b292      	uxth	r2, r2
 80189d8:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 80189dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80189e0:	4618      	mov	r0, r3
 80189e2:	3760      	adds	r7, #96	; 0x60
 80189e4:	46bd      	mov	sp, r7
 80189e6:	bd80      	pop	{r7, pc}
 80189e8:	20001704 	.word	0x20001704
 80189ec:	20001700 	.word	0x20001700

080189f0 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80189f0:	b580      	push	{r7, lr}
 80189f2:	b084      	sub	sp, #16
 80189f4:	af00      	add	r7, sp, #0
 80189f6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80189f8:	2300      	movs	r3, #0
 80189fa:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80189fc:	2300      	movs	r3, #0
 80189fe:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8018a00:	2300      	movs	r3, #0
 8018a02:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	791b      	ldrb	r3, [r3, #4]
 8018a08:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018a0a:	7b7b      	ldrb	r3, [r7, #13]
 8018a0c:	2b02      	cmp	r3, #2
 8018a0e:	d801      	bhi.n	8018a14 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018a10:	2306      	movs	r3, #6
 8018a12:	e089      	b.n	8018b28 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8018a14:	7b7b      	ldrb	r3, [r7, #13]
 8018a16:	2b0f      	cmp	r3, #15
 8018a18:	d901      	bls.n	8018a1e <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8018a1a:	2303      	movs	r3, #3
 8018a1c:	e084      	b.n	8018b28 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	7a1b      	ldrb	r3, [r3, #8]
 8018a24:	f343 0303 	sbfx	r3, r3, #0, #4
 8018a28:	b25b      	sxtb	r3, r3
 8018a2a:	2207      	movs	r2, #7
 8018a2c:	2100      	movs	r1, #0
 8018a2e:	4618      	mov	r0, r3
 8018a30:	f7fe f997 	bl	8016d62 <RegionCommonValueInRange>
 8018a34:	4603      	mov	r3, r0
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d101      	bne.n	8018a3e <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8018a3a:	2301      	movs	r3, #1
 8018a3c:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	7a1b      	ldrb	r3, [r3, #8]
 8018a44:	f343 1303 	sbfx	r3, r3, #4, #4
 8018a48:	b25b      	sxtb	r3, r3
 8018a4a:	2207      	movs	r2, #7
 8018a4c:	2100      	movs	r1, #0
 8018a4e:	4618      	mov	r0, r3
 8018a50:	f7fe f987 	bl	8016d62 <RegionCommonValueInRange>
 8018a54:	4603      	mov	r3, r0
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d101      	bne.n	8018a5e <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8018a5a:	2301      	movs	r3, #1
 8018a5c:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	7a1b      	ldrb	r3, [r3, #8]
 8018a64:	f343 0303 	sbfx	r3, r3, #0, #4
 8018a68:	b25a      	sxtb	r2, r3
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	7a1b      	ldrb	r3, [r3, #8]
 8018a70:	f343 1303 	sbfx	r3, r3, #4, #4
 8018a74:	b25b      	sxtb	r3, r3
 8018a76:	429a      	cmp	r2, r3
 8018a78:	dd01      	ble.n	8018a7e <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8018a7a:	2301      	movs	r3, #1
 8018a7c:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8018a7e:	7bbb      	ldrb	r3, [r7, #14]
 8018a80:	f083 0301 	eor.w	r3, r3, #1
 8018a84:	b2db      	uxtb	r3, r3
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d010      	beq.n	8018aac <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	f107 020c 	add.w	r2, r7, #12
 8018a94:	4611      	mov	r1, r2
 8018a96:	4618      	mov	r0, r3
 8018a98:	f7fe fee8 	bl	801786c <VerifyRfFreq>
 8018a9c:	4603      	mov	r3, r0
 8018a9e:	f083 0301 	eor.w	r3, r3, #1
 8018aa2:	b2db      	uxtb	r3, r3
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d001      	beq.n	8018aac <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8018aa8:	2301      	movs	r3, #1
 8018aaa:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8018aac:	7bfb      	ldrb	r3, [r7, #15]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d004      	beq.n	8018abc <RegionEU868ChannelAdd+0xcc>
 8018ab2:	7bbb      	ldrb	r3, [r7, #14]
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d001      	beq.n	8018abc <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018ab8:	2306      	movs	r3, #6
 8018aba:	e035      	b.n	8018b28 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8018abc:	7bfb      	ldrb	r3, [r7, #15]
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d001      	beq.n	8018ac6 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8018ac2:	2305      	movs	r3, #5
 8018ac4:	e030      	b.n	8018b28 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8018ac6:	7bbb      	ldrb	r3, [r7, #14]
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d001      	beq.n	8018ad0 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8018acc:	2304      	movs	r3, #4
 8018ace:	e02b      	b.n	8018b28 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8018ad0:	4b17      	ldr	r3, [pc, #92]	; (8018b30 <RegionEU868ChannelAdd+0x140>)
 8018ad2:	6819      	ldr	r1, [r3, #0]
 8018ad4:	7b7a      	ldrb	r2, [r7, #13]
 8018ad6:	4613      	mov	r3, r2
 8018ad8:	005b      	lsls	r3, r3, #1
 8018ada:	4413      	add	r3, r2
 8018adc:	009b      	lsls	r3, r3, #2
 8018ade:	18c8      	adds	r0, r1, r3
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	220c      	movs	r2, #12
 8018ae6:	4619      	mov	r1, r3
 8018ae8:	f000 f8fd 	bl	8018ce6 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8018aec:	4b10      	ldr	r3, [pc, #64]	; (8018b30 <RegionEU868ChannelAdd+0x140>)
 8018aee:	6819      	ldr	r1, [r3, #0]
 8018af0:	7b7a      	ldrb	r2, [r7, #13]
 8018af2:	7b38      	ldrb	r0, [r7, #12]
 8018af4:	4613      	mov	r3, r2
 8018af6:	005b      	lsls	r3, r3, #1
 8018af8:	4413      	add	r3, r2
 8018afa:	009b      	lsls	r3, r3, #2
 8018afc:	440b      	add	r3, r1
 8018afe:	3309      	adds	r3, #9
 8018b00:	4602      	mov	r2, r0
 8018b02:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8018b04:	4b0a      	ldr	r3, [pc, #40]	; (8018b30 <RegionEU868ChannelAdd+0x140>)
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 8018b0c:	b21a      	sxth	r2, r3
 8018b0e:	7b7b      	ldrb	r3, [r7, #13]
 8018b10:	2101      	movs	r1, #1
 8018b12:	fa01 f303 	lsl.w	r3, r1, r3
 8018b16:	b21b      	sxth	r3, r3
 8018b18:	4313      	orrs	r3, r2
 8018b1a:	b21a      	sxth	r2, r3
 8018b1c:	4b04      	ldr	r3, [pc, #16]	; (8018b30 <RegionEU868ChannelAdd+0x140>)
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	b292      	uxth	r2, r2
 8018b22:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8018b26:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8018b28:	4618      	mov	r0, r3
 8018b2a:	3710      	adds	r7, #16
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd80      	pop	{r7, pc}
 8018b30:	20001704 	.word	0x20001704

08018b34 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	b086      	sub	sp, #24
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	781b      	ldrb	r3, [r3, #0]
 8018b40:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018b42:	7dfb      	ldrb	r3, [r7, #23]
 8018b44:	2b02      	cmp	r3, #2
 8018b46:	d801      	bhi.n	8018b4c <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8018b48:	2300      	movs	r3, #0
 8018b4a:	e016      	b.n	8018b7a <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8018b4c:	4b0d      	ldr	r3, [pc, #52]	; (8018b84 <RegionEU868ChannelsRemove+0x50>)
 8018b4e:	6819      	ldr	r1, [r3, #0]
 8018b50:	7dfa      	ldrb	r2, [r7, #23]
 8018b52:	4613      	mov	r3, r2
 8018b54:	005b      	lsls	r3, r3, #1
 8018b56:	4413      	add	r3, r2
 8018b58:	009b      	lsls	r3, r3, #2
 8018b5a:	440b      	add	r3, r1
 8018b5c:	461a      	mov	r2, r3
 8018b5e:	2300      	movs	r3, #0
 8018b60:	6013      	str	r3, [r2, #0]
 8018b62:	6053      	str	r3, [r2, #4]
 8018b64:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8018b66:	4b07      	ldr	r3, [pc, #28]	; (8018b84 <RegionEU868ChannelsRemove+0x50>)
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8018b6e:	7df9      	ldrb	r1, [r7, #23]
 8018b70:	2210      	movs	r2, #16
 8018b72:	4618      	mov	r0, r3
 8018b74:	f7fe f912 	bl	8016d9c <RegionCommonChanDisable>
 8018b78:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	3718      	adds	r7, #24
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	bd80      	pop	{r7, pc}
 8018b82:	bf00      	nop
 8018b84:	20001704 	.word	0x20001704

08018b88 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8018b88:	b590      	push	{r4, r7, lr}
 8018b8a:	b085      	sub	sp, #20
 8018b8c:	af00      	add	r7, sp, #0
 8018b8e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018b96:	4b20      	ldr	r3, [pc, #128]	; (8018c18 <RegionEU868SetContinuousWave+0x90>)
 8018b98:	681a      	ldr	r2, [r3, #0]
 8018b9a:	4b20      	ldr	r3, [pc, #128]	; (8018c1c <RegionEU868SetContinuousWave+0x94>)
 8018b9c:	6819      	ldr	r1, [r3, #0]
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	781b      	ldrb	r3, [r3, #0]
 8018ba2:	461c      	mov	r4, r3
 8018ba4:	4623      	mov	r3, r4
 8018ba6:	005b      	lsls	r3, r3, #1
 8018ba8:	4423      	add	r3, r4
 8018baa:	009b      	lsls	r3, r3, #2
 8018bac:	440b      	add	r3, r1
 8018bae:	3309      	adds	r3, #9
 8018bb0:	781b      	ldrb	r3, [r3, #0]
 8018bb2:	4619      	mov	r1, r3
 8018bb4:	460b      	mov	r3, r1
 8018bb6:	005b      	lsls	r3, r3, #1
 8018bb8:	440b      	add	r3, r1
 8018bba:	00db      	lsls	r3, r3, #3
 8018bbc:	4413      	add	r3, r2
 8018bbe:	3302      	adds	r3, #2
 8018bc0:	f993 3000 	ldrsb.w	r3, [r3]
 8018bc4:	4619      	mov	r1, r3
 8018bc6:	f7fe fdd4 	bl	8017772 <RegionCommonLimitTxPower>
 8018bca:	4603      	mov	r3, r0
 8018bcc:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8018bce:	2300      	movs	r3, #0
 8018bd0:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8018bd2:	4b12      	ldr	r3, [pc, #72]	; (8018c1c <RegionEU868SetContinuousWave+0x94>)
 8018bd4:	681a      	ldr	r2, [r3, #0]
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	781b      	ldrb	r3, [r3, #0]
 8018bda:	4619      	mov	r1, r3
 8018bdc:	460b      	mov	r3, r1
 8018bde:	005b      	lsls	r3, r3, #1
 8018be0:	440b      	add	r3, r1
 8018be2:	009b      	lsls	r3, r3, #2
 8018be4:	4413      	add	r3, r2
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	6859      	ldr	r1, [r3, #4]
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	689a      	ldr	r2, [r3, #8]
 8018bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018bf6:	4618      	mov	r0, r3
 8018bf8:	f7fe fc2c 	bl	8017454 <RegionCommonComputeTxPower>
 8018bfc:	4603      	mov	r3, r0
 8018bfe:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8018c00:	4b07      	ldr	r3, [pc, #28]	; (8018c20 <RegionEU868SetContinuousWave+0x98>)
 8018c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c04:	687a      	ldr	r2, [r7, #4]
 8018c06:	8992      	ldrh	r2, [r2, #12]
 8018c08:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8018c0c:	68b8      	ldr	r0, [r7, #8]
 8018c0e:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8018c10:	bf00      	nop
 8018c12:	3714      	adds	r7, #20
 8018c14:	46bd      	mov	sp, r7
 8018c16:	bd90      	pop	{r4, r7, pc}
 8018c18:	20001700 	.word	0x20001700
 8018c1c:	20001704 	.word	0x20001704
 8018c20:	0801e8c0 	.word	0x0801e8c0

08018c24 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018c24:	b480      	push	{r7}
 8018c26:	b085      	sub	sp, #20
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	71fb      	strb	r3, [r7, #7]
 8018c2e:	460b      	mov	r3, r1
 8018c30:	71bb      	strb	r3, [r7, #6]
 8018c32:	4613      	mov	r3, r2
 8018c34:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8018c36:	79ba      	ldrb	r2, [r7, #6]
 8018c38:	797b      	ldrb	r3, [r7, #5]
 8018c3a:	1ad3      	subs	r3, r2, r3
 8018c3c:	b2db      	uxtb	r3, r3
 8018c3e:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	da01      	bge.n	8018c4c <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8018c48:	2300      	movs	r3, #0
 8018c4a:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018c4c:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8018c4e:	4618      	mov	r0, r3
 8018c50:	3714      	adds	r7, #20
 8018c52:	46bd      	mov	sp, r7
 8018c54:	bc80      	pop	{r7}
 8018c56:	4770      	bx	lr

08018c58 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018c58:	b480      	push	{r7}
 8018c5a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018c5c:	4b0d      	ldr	r3, [pc, #52]	; (8018c94 <rand1+0x3c>)
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	4a0d      	ldr	r2, [pc, #52]	; (8018c98 <rand1+0x40>)
 8018c62:	fb02 f303 	mul.w	r3, r2, r3
 8018c66:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8018c6a:	3339      	adds	r3, #57	; 0x39
 8018c6c:	4a09      	ldr	r2, [pc, #36]	; (8018c94 <rand1+0x3c>)
 8018c6e:	6013      	str	r3, [r2, #0]
 8018c70:	4b08      	ldr	r3, [pc, #32]	; (8018c94 <rand1+0x3c>)
 8018c72:	681a      	ldr	r2, [r3, #0]
 8018c74:	2303      	movs	r3, #3
 8018c76:	fba3 1302 	umull	r1, r3, r3, r2
 8018c7a:	1ad1      	subs	r1, r2, r3
 8018c7c:	0849      	lsrs	r1, r1, #1
 8018c7e:	440b      	add	r3, r1
 8018c80:	0f99      	lsrs	r1, r3, #30
 8018c82:	460b      	mov	r3, r1
 8018c84:	07db      	lsls	r3, r3, #31
 8018c86:	1a5b      	subs	r3, r3, r1
 8018c88:	1ad1      	subs	r1, r2, r3
 8018c8a:	460b      	mov	r3, r1
}
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	46bd      	mov	sp, r7
 8018c90:	bc80      	pop	{r7}
 8018c92:	4770      	bx	lr
 8018c94:	20000148 	.word	0x20000148
 8018c98:	41c64e6d 	.word	0x41c64e6d

08018c9c <srand1>:

void srand1( uint32_t seed )
{
 8018c9c:	b480      	push	{r7}
 8018c9e:	b083      	sub	sp, #12
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	6078      	str	r0, [r7, #4]
    next = seed;
 8018ca4:	4a03      	ldr	r2, [pc, #12]	; (8018cb4 <srand1+0x18>)
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	6013      	str	r3, [r2, #0]
}
 8018caa:	bf00      	nop
 8018cac:	370c      	adds	r7, #12
 8018cae:	46bd      	mov	sp, r7
 8018cb0:	bc80      	pop	{r7}
 8018cb2:	4770      	bx	lr
 8018cb4:	20000148 	.word	0x20000148

08018cb8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	b082      	sub	sp, #8
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	6078      	str	r0, [r7, #4]
 8018cc0:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8018cc2:	f7ff ffc9 	bl	8018c58 <rand1>
 8018cc6:	4602      	mov	r2, r0
 8018cc8:	6839      	ldr	r1, [r7, #0]
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	1acb      	subs	r3, r1, r3
 8018cce:	3301      	adds	r3, #1
 8018cd0:	fb92 f1f3 	sdiv	r1, r2, r3
 8018cd4:	fb01 f303 	mul.w	r3, r1, r3
 8018cd8:	1ad2      	subs	r2, r2, r3
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	4413      	add	r3, r2
}
 8018cde:	4618      	mov	r0, r3
 8018ce0:	3708      	adds	r7, #8
 8018ce2:	46bd      	mov	sp, r7
 8018ce4:	bd80      	pop	{r7, pc}

08018ce6 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018ce6:	b480      	push	{r7}
 8018ce8:	b085      	sub	sp, #20
 8018cea:	af00      	add	r7, sp, #0
 8018cec:	60f8      	str	r0, [r7, #12]
 8018cee:	60b9      	str	r1, [r7, #8]
 8018cf0:	4613      	mov	r3, r2
 8018cf2:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8018cf4:	e007      	b.n	8018d06 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018cf6:	68ba      	ldr	r2, [r7, #8]
 8018cf8:	1c53      	adds	r3, r2, #1
 8018cfa:	60bb      	str	r3, [r7, #8]
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	1c59      	adds	r1, r3, #1
 8018d00:	60f9      	str	r1, [r7, #12]
 8018d02:	7812      	ldrb	r2, [r2, #0]
 8018d04:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018d06:	88fb      	ldrh	r3, [r7, #6]
 8018d08:	1e5a      	subs	r2, r3, #1
 8018d0a:	80fa      	strh	r2, [r7, #6]
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d1f2      	bne.n	8018cf6 <memcpy1+0x10>
    }
}
 8018d10:	bf00      	nop
 8018d12:	bf00      	nop
 8018d14:	3714      	adds	r7, #20
 8018d16:	46bd      	mov	sp, r7
 8018d18:	bc80      	pop	{r7}
 8018d1a:	4770      	bx	lr

08018d1c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018d1c:	b480      	push	{r7}
 8018d1e:	b085      	sub	sp, #20
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	60f8      	str	r0, [r7, #12]
 8018d24:	60b9      	str	r1, [r7, #8]
 8018d26:	4613      	mov	r3, r2
 8018d28:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018d2a:	88fb      	ldrh	r3, [r7, #6]
 8018d2c:	3b01      	subs	r3, #1
 8018d2e:	68fa      	ldr	r2, [r7, #12]
 8018d30:	4413      	add	r3, r2
 8018d32:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018d34:	e007      	b.n	8018d46 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8018d36:	68ba      	ldr	r2, [r7, #8]
 8018d38:	1c53      	adds	r3, r2, #1
 8018d3a:	60bb      	str	r3, [r7, #8]
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	1e59      	subs	r1, r3, #1
 8018d40:	60f9      	str	r1, [r7, #12]
 8018d42:	7812      	ldrb	r2, [r2, #0]
 8018d44:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018d46:	88fb      	ldrh	r3, [r7, #6]
 8018d48:	1e5a      	subs	r2, r3, #1
 8018d4a:	80fa      	strh	r2, [r7, #6]
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d1f2      	bne.n	8018d36 <memcpyr+0x1a>
    }
}
 8018d50:	bf00      	nop
 8018d52:	bf00      	nop
 8018d54:	3714      	adds	r7, #20
 8018d56:	46bd      	mov	sp, r7
 8018d58:	bc80      	pop	{r7}
 8018d5a:	4770      	bx	lr

08018d5c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018d5c:	b480      	push	{r7}
 8018d5e:	b083      	sub	sp, #12
 8018d60:	af00      	add	r7, sp, #0
 8018d62:	6078      	str	r0, [r7, #4]
 8018d64:	460b      	mov	r3, r1
 8018d66:	70fb      	strb	r3, [r7, #3]
 8018d68:	4613      	mov	r3, r2
 8018d6a:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8018d6c:	e004      	b.n	8018d78 <memset1+0x1c>
    {
        *dst++ = value;
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	1c5a      	adds	r2, r3, #1
 8018d72:	607a      	str	r2, [r7, #4]
 8018d74:	78fa      	ldrb	r2, [r7, #3]
 8018d76:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018d78:	883b      	ldrh	r3, [r7, #0]
 8018d7a:	1e5a      	subs	r2, r3, #1
 8018d7c:	803a      	strh	r2, [r7, #0]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d1f5      	bne.n	8018d6e <memset1+0x12>
    }
}
 8018d82:	bf00      	nop
 8018d84:	bf00      	nop
 8018d86:	370c      	adds	r7, #12
 8018d88:	46bd      	mov	sp, r7
 8018d8a:	bc80      	pop	{r7}
 8018d8c:	4770      	bx	lr
	...

08018d90 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8018d90:	b480      	push	{r7}
 8018d92:	b085      	sub	sp, #20
 8018d94:	af00      	add	r7, sp, #0
 8018d96:	6078      	str	r0, [r7, #4]
 8018d98:	460b      	mov	r3, r1
 8018d9a:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8018d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8018da0:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d101      	bne.n	8018dac <Crc32+0x1c>
    {
        return 0;
 8018da8:	2300      	movs	r3, #0
 8018daa:	e026      	b.n	8018dfa <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8018dac:	2300      	movs	r3, #0
 8018dae:	817b      	strh	r3, [r7, #10]
 8018db0:	e01d      	b.n	8018dee <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8018db2:	897b      	ldrh	r3, [r7, #10]
 8018db4:	687a      	ldr	r2, [r7, #4]
 8018db6:	4413      	add	r3, r2
 8018db8:	781b      	ldrb	r3, [r3, #0]
 8018dba:	461a      	mov	r2, r3
 8018dbc:	68fb      	ldr	r3, [r7, #12]
 8018dbe:	4053      	eors	r3, r2
 8018dc0:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	813b      	strh	r3, [r7, #8]
 8018dc6:	e00c      	b.n	8018de2 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	085a      	lsrs	r2, r3, #1
 8018dcc:	68fb      	ldr	r3, [r7, #12]
 8018dce:	f003 0301 	and.w	r3, r3, #1
 8018dd2:	425b      	negs	r3, r3
 8018dd4:	490b      	ldr	r1, [pc, #44]	; (8018e04 <Crc32+0x74>)
 8018dd6:	400b      	ands	r3, r1
 8018dd8:	4053      	eors	r3, r2
 8018dda:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018ddc:	893b      	ldrh	r3, [r7, #8]
 8018dde:	3301      	adds	r3, #1
 8018de0:	813b      	strh	r3, [r7, #8]
 8018de2:	893b      	ldrh	r3, [r7, #8]
 8018de4:	2b07      	cmp	r3, #7
 8018de6:	d9ef      	bls.n	8018dc8 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8018de8:	897b      	ldrh	r3, [r7, #10]
 8018dea:	3301      	adds	r3, #1
 8018dec:	817b      	strh	r3, [r7, #10]
 8018dee:	897a      	ldrh	r2, [r7, #10]
 8018df0:	887b      	ldrh	r3, [r7, #2]
 8018df2:	429a      	cmp	r2, r3
 8018df4:	d3dd      	bcc.n	8018db2 <Crc32+0x22>
        }
    }

    return ~crc;
 8018df6:	68fb      	ldr	r3, [r7, #12]
 8018df8:	43db      	mvns	r3, r3
}
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	3714      	adds	r7, #20
 8018dfe:	46bd      	mov	sp, r7
 8018e00:	bc80      	pop	{r7}
 8018e02:	4770      	bx	lr
 8018e04:	edb88320 	.word	0xedb88320

08018e08 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b084      	sub	sp, #16
 8018e0c:	af02      	add	r7, sp, #8
 8018e0e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018e10:	4a24      	ldr	r2, [pc, #144]	; (8018ea4 <RadioInit+0x9c>)
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8018e16:	4b24      	ldr	r3, [pc, #144]	; (8018ea8 <RadioInit+0xa0>)
 8018e18:	2200      	movs	r2, #0
 8018e1a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018e1c:	4b22      	ldr	r3, [pc, #136]	; (8018ea8 <RadioInit+0xa0>)
 8018e1e:	2200      	movs	r2, #0
 8018e20:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8018e22:	4b21      	ldr	r3, [pc, #132]	; (8018ea8 <RadioInit+0xa0>)
 8018e24:	2200      	movs	r2, #0
 8018e26:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018e28:	4b1f      	ldr	r3, [pc, #124]	; (8018ea8 <RadioInit+0xa0>)
 8018e2a:	2200      	movs	r2, #0
 8018e2c:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8018e2e:	481f      	ldr	r0, [pc, #124]	; (8018eac <RadioInit+0xa4>)
 8018e30:	f001 ffc2 	bl	801adb8 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8018e34:	4b1c      	ldr	r3, [pc, #112]	; (8018ea8 <RadioInit+0xa0>)
 8018e36:	2200      	movs	r2, #0
 8018e38:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8018e3a:	4b1b      	ldr	r3, [pc, #108]	; (8018ea8 <RadioInit+0xa0>)
 8018e3c:	2200      	movs	r2, #0
 8018e3e:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8018e40:	f002 fa56 	bl	801b2f0 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8018e44:	2100      	movs	r1, #0
 8018e46:	2000      	movs	r0, #0
 8018e48:	f002 fe22 	bl	801ba90 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8018e4c:	2204      	movs	r2, #4
 8018e4e:	2100      	movs	r1, #0
 8018e50:	2001      	movs	r0, #1
 8018e52:	f002 fbdf 	bl	801b614 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018e56:	2300      	movs	r3, #0
 8018e58:	2200      	movs	r2, #0
 8018e5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018e5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018e62:	f002 fb0f 	bl	801b484 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8018e66:	f000 fe99 	bl	8019b9c <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8018e6a:	2300      	movs	r3, #0
 8018e6c:	9300      	str	r3, [sp, #0]
 8018e6e:	4b10      	ldr	r3, [pc, #64]	; (8018eb0 <RadioInit+0xa8>)
 8018e70:	2200      	movs	r2, #0
 8018e72:	f04f 31ff 	mov.w	r1, #4294967295
 8018e76:	480f      	ldr	r0, [pc, #60]	; (8018eb4 <RadioInit+0xac>)
 8018e78:	f004 f82c 	bl	801ced4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8018e7c:	2300      	movs	r3, #0
 8018e7e:	9300      	str	r3, [sp, #0]
 8018e80:	4b0d      	ldr	r3, [pc, #52]	; (8018eb8 <RadioInit+0xb0>)
 8018e82:	2200      	movs	r2, #0
 8018e84:	f04f 31ff 	mov.w	r1, #4294967295
 8018e88:	480c      	ldr	r0, [pc, #48]	; (8018ebc <RadioInit+0xb4>)
 8018e8a:	f004 f823 	bl	801ced4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8018e8e:	4809      	ldr	r0, [pc, #36]	; (8018eb4 <RadioInit+0xac>)
 8018e90:	f004 f8c4 	bl	801d01c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8018e94:	4809      	ldr	r0, [pc, #36]	; (8018ebc <RadioInit+0xb4>)
 8018e96:	f004 f8c1 	bl	801d01c <UTIL_TIMER_Stop>
}
 8018e9a:	bf00      	nop
 8018e9c:	3708      	adds	r7, #8
 8018e9e:	46bd      	mov	sp, r7
 8018ea0:	bd80      	pop	{r7, pc}
 8018ea2:	bf00      	nop
 8018ea4:	20001808 	.word	0x20001808
 8018ea8:	2000180c 	.word	0x2000180c
 8018eac:	08019f95 	.word	0x08019f95
 8018eb0:	08019f1d 	.word	0x08019f1d
 8018eb4:	20001868 	.word	0x20001868
 8018eb8:	08019f31 	.word	0x08019f31
 8018ebc:	20001880 	.word	0x20001880

08018ec0 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8018ec0:	b580      	push	{r7, lr}
 8018ec2:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8018ec4:	f001 ffc0 	bl	801ae48 <SUBGRF_GetOperatingMode>
 8018ec8:	4603      	mov	r3, r0
 8018eca:	2b07      	cmp	r3, #7
 8018ecc:	d00a      	beq.n	8018ee4 <RadioGetStatus+0x24>
 8018ece:	2b07      	cmp	r3, #7
 8018ed0:	dc0a      	bgt.n	8018ee8 <RadioGetStatus+0x28>
 8018ed2:	2b04      	cmp	r3, #4
 8018ed4:	d002      	beq.n	8018edc <RadioGetStatus+0x1c>
 8018ed6:	2b05      	cmp	r3, #5
 8018ed8:	d002      	beq.n	8018ee0 <RadioGetStatus+0x20>
 8018eda:	e005      	b.n	8018ee8 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8018edc:	2302      	movs	r3, #2
 8018ede:	e004      	b.n	8018eea <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8018ee0:	2301      	movs	r3, #1
 8018ee2:	e002      	b.n	8018eea <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8018ee4:	2303      	movs	r3, #3
 8018ee6:	e000      	b.n	8018eea <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8018ee8:	2300      	movs	r3, #0
    }
}
 8018eea:	4618      	mov	r0, r3
 8018eec:	bd80      	pop	{r7, pc}
	...

08018ef0 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8018ef0:	b580      	push	{r7, lr}
 8018ef2:	b082      	sub	sp, #8
 8018ef4:	af00      	add	r7, sp, #0
 8018ef6:	4603      	mov	r3, r0
 8018ef8:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8018efa:	4a2a      	ldr	r2, [pc, #168]	; (8018fa4 <RadioSetModem+0xb4>)
 8018efc:	79fb      	ldrb	r3, [r7, #7]
 8018efe:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8018f00:	79fb      	ldrb	r3, [r7, #7]
 8018f02:	4618      	mov	r0, r3
 8018f04:	f003 f997 	bl	801c236 <RFW_SetRadioModem>
    switch( modem )
 8018f08:	79fb      	ldrb	r3, [r7, #7]
 8018f0a:	2b05      	cmp	r3, #5
 8018f0c:	d80e      	bhi.n	8018f2c <RadioSetModem+0x3c>
 8018f0e:	a201      	add	r2, pc, #4	; (adr r2, 8018f14 <RadioSetModem+0x24>)
 8018f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f14:	08018f3b 	.word	0x08018f3b
 8018f18:	08018f49 	.word	0x08018f49
 8018f1c:	08018f2d 	.word	0x08018f2d
 8018f20:	08018f6f 	.word	0x08018f6f
 8018f24:	08018f7d 	.word	0x08018f7d
 8018f28:	08018f8b 	.word	0x08018f8b
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8018f2c:	2003      	movs	r0, #3
 8018f2e:	f002 fb4b 	bl	801b5c8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018f32:	4b1c      	ldr	r3, [pc, #112]	; (8018fa4 <RadioSetModem+0xb4>)
 8018f34:	2200      	movs	r2, #0
 8018f36:	735a      	strb	r2, [r3, #13]
        break;
 8018f38:	e02f      	b.n	8018f9a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018f3a:	2000      	movs	r0, #0
 8018f3c:	f002 fb44 	bl	801b5c8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018f40:	4b18      	ldr	r3, [pc, #96]	; (8018fa4 <RadioSetModem+0xb4>)
 8018f42:	2200      	movs	r2, #0
 8018f44:	735a      	strb	r2, [r3, #13]
        break;
 8018f46:	e028      	b.n	8018f9a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8018f48:	2001      	movs	r0, #1
 8018f4a:	f002 fb3d 	bl	801b5c8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8018f4e:	4b15      	ldr	r3, [pc, #84]	; (8018fa4 <RadioSetModem+0xb4>)
 8018f50:	7b5a      	ldrb	r2, [r3, #13]
 8018f52:	4b14      	ldr	r3, [pc, #80]	; (8018fa4 <RadioSetModem+0xb4>)
 8018f54:	7b1b      	ldrb	r3, [r3, #12]
 8018f56:	429a      	cmp	r2, r3
 8018f58:	d01e      	beq.n	8018f98 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8018f5a:	4b12      	ldr	r3, [pc, #72]	; (8018fa4 <RadioSetModem+0xb4>)
 8018f5c:	7b1a      	ldrb	r2, [r3, #12]
 8018f5e:	4b11      	ldr	r3, [pc, #68]	; (8018fa4 <RadioSetModem+0xb4>)
 8018f60:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8018f62:	4b10      	ldr	r3, [pc, #64]	; (8018fa4 <RadioSetModem+0xb4>)
 8018f64:	7b5b      	ldrb	r3, [r3, #13]
 8018f66:	4618      	mov	r0, r3
 8018f68:	f000 ffa2 	bl	8019eb0 <RadioSetPublicNetwork>
        }
        break;
 8018f6c:	e014      	b.n	8018f98 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018f6e:	2002      	movs	r0, #2
 8018f70:	f002 fb2a 	bl	801b5c8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018f74:	4b0b      	ldr	r3, [pc, #44]	; (8018fa4 <RadioSetModem+0xb4>)
 8018f76:	2200      	movs	r2, #0
 8018f78:	735a      	strb	r2, [r3, #13]
        break;
 8018f7a:	e00e      	b.n	8018f9a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018f7c:	2002      	movs	r0, #2
 8018f7e:	f002 fb23 	bl	801b5c8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018f82:	4b08      	ldr	r3, [pc, #32]	; (8018fa4 <RadioSetModem+0xb4>)
 8018f84:	2200      	movs	r2, #0
 8018f86:	735a      	strb	r2, [r3, #13]
        break;
 8018f88:	e007      	b.n	8018f9a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018f8a:	2000      	movs	r0, #0
 8018f8c:	f002 fb1c 	bl	801b5c8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018f90:	4b04      	ldr	r3, [pc, #16]	; (8018fa4 <RadioSetModem+0xb4>)
 8018f92:	2200      	movs	r2, #0
 8018f94:	735a      	strb	r2, [r3, #13]
        break;
 8018f96:	e000      	b.n	8018f9a <RadioSetModem+0xaa>
        break;
 8018f98:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8018f9a:	bf00      	nop
 8018f9c:	3708      	adds	r7, #8
 8018f9e:	46bd      	mov	sp, r7
 8018fa0:	bd80      	pop	{r7, pc}
 8018fa2:	bf00      	nop
 8018fa4:	2000180c 	.word	0x2000180c

08018fa8 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b082      	sub	sp, #8
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8018fb0:	6878      	ldr	r0, [r7, #4]
 8018fb2:	f002 fac3 	bl	801b53c <SUBGRF_SetRfFrequency>
}
 8018fb6:	bf00      	nop
 8018fb8:	3708      	adds	r7, #8
 8018fba:	46bd      	mov	sp, r7
 8018fbc:	bd80      	pop	{r7, pc}

08018fbe <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8018fbe:	b580      	push	{r7, lr}
 8018fc0:	b090      	sub	sp, #64	; 0x40
 8018fc2:	af0a      	add	r7, sp, #40	; 0x28
 8018fc4:	60f8      	str	r0, [r7, #12]
 8018fc6:	60b9      	str	r1, [r7, #8]
 8018fc8:	603b      	str	r3, [r7, #0]
 8018fca:	4613      	mov	r3, r2
 8018fcc:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8018fce:	2301      	movs	r3, #1
 8018fd0:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8018fd6:	2300      	movs	r3, #0
 8018fd8:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8018fda:	f000 fdf2 	bl	8019bc2 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8018fde:	2000      	movs	r0, #0
 8018fe0:	f7ff ff86 	bl	8018ef0 <RadioSetModem>

    RadioSetChannel( freq );
 8018fe4:	68f8      	ldr	r0, [r7, #12]
 8018fe6:	f7ff ffdf 	bl	8018fa8 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8018fea:	2301      	movs	r3, #1
 8018fec:	9309      	str	r3, [sp, #36]	; 0x24
 8018fee:	2300      	movs	r3, #0
 8018ff0:	9308      	str	r3, [sp, #32]
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	9307      	str	r3, [sp, #28]
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	9306      	str	r3, [sp, #24]
 8018ffa:	2300      	movs	r3, #0
 8018ffc:	9305      	str	r3, [sp, #20]
 8018ffe:	2300      	movs	r3, #0
 8019000:	9304      	str	r3, [sp, #16]
 8019002:	2300      	movs	r3, #0
 8019004:	9303      	str	r3, [sp, #12]
 8019006:	2300      	movs	r3, #0
 8019008:	9302      	str	r3, [sp, #8]
 801900a:	2303      	movs	r3, #3
 801900c:	9301      	str	r3, [sp, #4]
 801900e:	68bb      	ldr	r3, [r7, #8]
 8019010:	9300      	str	r3, [sp, #0]
 8019012:	2300      	movs	r3, #0
 8019014:	f44f 7216 	mov.w	r2, #600	; 0x258
 8019018:	68b9      	ldr	r1, [r7, #8]
 801901a:	2000      	movs	r0, #0
 801901c:	f000 f83c 	bl	8019098 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8019020:	2000      	movs	r0, #0
 8019022:	f000 fdd5 	bl	8019bd0 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8019026:	f000 ff71 	bl	8019f0c <RadioGetWakeupTime>
 801902a:	4603      	mov	r3, r0
 801902c:	4618      	mov	r0, r3
 801902e:	f7e9 fbf5 	bl	800281c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8019032:	f004 f90d 	bl	801d250 <UTIL_TIMER_GetCurrentTime>
 8019036:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019038:	e00d      	b.n	8019056 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801903a:	2000      	movs	r0, #0
 801903c:	f000 feb6 	bl	8019dac <RadioRssi>
 8019040:	4603      	mov	r3, r0
 8019042:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8019044:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019048:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801904c:	429a      	cmp	r2, r3
 801904e:	dd02      	ble.n	8019056 <RadioIsChannelFree+0x98>
        {
            status = false;
 8019050:	2300      	movs	r3, #0
 8019052:	75fb      	strb	r3, [r7, #23]
            break;
 8019054:	e006      	b.n	8019064 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019056:	6938      	ldr	r0, [r7, #16]
 8019058:	f004 f90c 	bl	801d274 <UTIL_TIMER_GetElapsedTime>
 801905c:	4602      	mov	r2, r0
 801905e:	683b      	ldr	r3, [r7, #0]
 8019060:	4293      	cmp	r3, r2
 8019062:	d8ea      	bhi.n	801903a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8019064:	f000 fdad 	bl	8019bc2 <RadioStandby>

    return status;
 8019068:	7dfb      	ldrb	r3, [r7, #23]
}
 801906a:	4618      	mov	r0, r3
 801906c:	3718      	adds	r7, #24
 801906e:	46bd      	mov	sp, r7
 8019070:	bd80      	pop	{r7, pc}

08019072 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8019072:	b580      	push	{r7, lr}
 8019074:	b082      	sub	sp, #8
 8019076:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8019078:	2300      	movs	r3, #0
 801907a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801907c:	2300      	movs	r3, #0
 801907e:	2200      	movs	r2, #0
 8019080:	2100      	movs	r1, #0
 8019082:	2000      	movs	r0, #0
 8019084:	f002 f9fe 	bl	801b484 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8019088:	f001 ffaf 	bl	801afea <SUBGRF_GetRandom>
 801908c:	6078      	str	r0, [r7, #4]

    return rnd;
 801908e:	687b      	ldr	r3, [r7, #4]
}
 8019090:	4618      	mov	r0, r3
 8019092:	3708      	adds	r7, #8
 8019094:	46bd      	mov	sp, r7
 8019096:	bd80      	pop	{r7, pc}

08019098 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8019098:	b580      	push	{r7, lr}
 801909a:	b08a      	sub	sp, #40	; 0x28
 801909c:	af00      	add	r7, sp, #0
 801909e:	60b9      	str	r1, [r7, #8]
 80190a0:	607a      	str	r2, [r7, #4]
 80190a2:	461a      	mov	r2, r3
 80190a4:	4603      	mov	r3, r0
 80190a6:	73fb      	strb	r3, [r7, #15]
 80190a8:	4613      	mov	r3, r2
 80190aa:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80190ac:	4ab9      	ldr	r2, [pc, #740]	; (8019394 <RadioSetRxConfig+0x2fc>)
 80190ae:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80190b2:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 80190b4:	f003 f87d 	bl	801c1b2 <RFW_DeInit>
    if( rxContinuous == true )
 80190b8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d001      	beq.n	80190c4 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80190c0:	2300      	movs	r3, #0
 80190c2:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80190c4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d004      	beq.n	80190d6 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80190cc:	4ab2      	ldr	r2, [pc, #712]	; (8019398 <RadioSetRxConfig+0x300>)
 80190ce:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80190d2:	7013      	strb	r3, [r2, #0]
 80190d4:	e002      	b.n	80190dc <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80190d6:	4bb0      	ldr	r3, [pc, #704]	; (8019398 <RadioSetRxConfig+0x300>)
 80190d8:	22ff      	movs	r2, #255	; 0xff
 80190da:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80190dc:	7bfb      	ldrb	r3, [r7, #15]
 80190de:	2b05      	cmp	r3, #5
 80190e0:	d009      	beq.n	80190f6 <RadioSetRxConfig+0x5e>
 80190e2:	2b05      	cmp	r3, #5
 80190e4:	f300 81d7 	bgt.w	8019496 <RadioSetRxConfig+0x3fe>
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	f000 80bf 	beq.w	801926c <RadioSetRxConfig+0x1d4>
 80190ee:	2b01      	cmp	r3, #1
 80190f0:	f000 8124 	beq.w	801933c <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80190f4:	e1cf      	b.n	8019496 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80190f6:	2001      	movs	r0, #1
 80190f8:	f002 f8bc 	bl	801b274 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80190fc:	4ba5      	ldr	r3, [pc, #660]	; (8019394 <RadioSetRxConfig+0x2fc>)
 80190fe:	2200      	movs	r2, #0
 8019100:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019104:	4aa3      	ldr	r2, [pc, #652]	; (8019394 <RadioSetRxConfig+0x2fc>)
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801910a:	4ba2      	ldr	r3, [pc, #648]	; (8019394 <RadioSetRxConfig+0x2fc>)
 801910c:	2209      	movs	r2, #9
 801910e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8019112:	4ba0      	ldr	r3, [pc, #640]	; (8019394 <RadioSetRxConfig+0x2fc>)
 8019114:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019118:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801911a:	68b8      	ldr	r0, [r7, #8]
 801911c:	f002 ff7c 	bl	801c018 <SUBGRF_GetFskBandwidthRegValue>
 8019120:	4603      	mov	r3, r0
 8019122:	461a      	mov	r2, r3
 8019124:	4b9b      	ldr	r3, [pc, #620]	; (8019394 <RadioSetRxConfig+0x2fc>)
 8019126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801912a:	4b9a      	ldr	r3, [pc, #616]	; (8019394 <RadioSetRxConfig+0x2fc>)
 801912c:	2200      	movs	r2, #0
 801912e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019130:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019132:	00db      	lsls	r3, r3, #3
 8019134:	b29a      	uxth	r2, r3
 8019136:	4b97      	ldr	r3, [pc, #604]	; (8019394 <RadioSetRxConfig+0x2fc>)
 8019138:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801913a:	4b96      	ldr	r3, [pc, #600]	; (8019394 <RadioSetRxConfig+0x2fc>)
 801913c:	2200      	movs	r2, #0
 801913e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8019140:	4b94      	ldr	r3, [pc, #592]	; (8019394 <RadioSetRxConfig+0x2fc>)
 8019142:	2210      	movs	r2, #16
 8019144:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019146:	4b93      	ldr	r3, [pc, #588]	; (8019394 <RadioSetRxConfig+0x2fc>)
 8019148:	2200      	movs	r2, #0
 801914a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801914c:	4b91      	ldr	r3, [pc, #580]	; (8019394 <RadioSetRxConfig+0x2fc>)
 801914e:	2200      	movs	r2, #0
 8019150:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019152:	4b91      	ldr	r3, [pc, #580]	; (8019398 <RadioSetRxConfig+0x300>)
 8019154:	781a      	ldrb	r2, [r3, #0]
 8019156:	4b8f      	ldr	r3, [pc, #572]	; (8019394 <RadioSetRxConfig+0x2fc>)
 8019158:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801915a:	4b8e      	ldr	r3, [pc, #568]	; (8019394 <RadioSetRxConfig+0x2fc>)
 801915c:	2201      	movs	r2, #1
 801915e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8019160:	4b8c      	ldr	r3, [pc, #560]	; (8019394 <RadioSetRxConfig+0x2fc>)
 8019162:	2200      	movs	r2, #0
 8019164:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8019166:	2005      	movs	r0, #5
 8019168:	f7ff fec2 	bl	8018ef0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801916c:	488b      	ldr	r0, [pc, #556]	; (801939c <RadioSetRxConfig+0x304>)
 801916e:	f002 fb1f 	bl	801b7b0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019172:	488b      	ldr	r0, [pc, #556]	; (80193a0 <RadioSetRxConfig+0x308>)
 8019174:	f002 fbee 	bl	801b954 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019178:	4a8a      	ldr	r2, [pc, #552]	; (80193a4 <RadioSetRxConfig+0x30c>)
 801917a:	f107 031c 	add.w	r3, r7, #28
 801917e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019182:	e883 0003 	stmia.w	r3, {r0, r1}
 8019186:	f107 031c 	add.w	r3, r7, #28
 801918a:	4618      	mov	r0, r3
 801918c:	f001 feab 	bl	801aee6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019190:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019194:	f001 fef6 	bl	801af84 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8019198:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801919c:	f000 fe25 	bl	8019dea <RadioRead>
 80191a0:	4603      	mov	r3, r0
 80191a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80191a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80191aa:	f023 0310 	bic.w	r3, r3, #16
 80191ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80191b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80191b6:	4619      	mov	r1, r3
 80191b8:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80191bc:	f000 fe03 	bl	8019dc6 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80191c0:	2104      	movs	r1, #4
 80191c2:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80191c6:	f000 fdfe 	bl	8019dc6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80191ca:	f640 009b 	movw	r0, #2203	; 0x89b
 80191ce:	f000 fe0c 	bl	8019dea <RadioRead>
 80191d2:	4603      	mov	r3, r0
 80191d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80191d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80191dc:	f023 031c 	bic.w	r3, r3, #28
 80191e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80191e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80191e8:	f043 0308 	orr.w	r3, r3, #8
 80191ec:	b2db      	uxtb	r3, r3
 80191ee:	4619      	mov	r1, r3
 80191f0:	f640 009b 	movw	r0, #2203	; 0x89b
 80191f4:	f000 fde7 	bl	8019dc6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80191f8:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80191fc:	f000 fdf5 	bl	8019dea <RadioRead>
 8019200:	4603      	mov	r3, r0
 8019202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801920a:	f023 0318 	bic.w	r3, r3, #24
 801920e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8019212:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019216:	f043 0318 	orr.w	r3, r3, #24
 801921a:	b2db      	uxtb	r3, r3
 801921c:	4619      	mov	r1, r3
 801921e:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019222:	f000 fdd0 	bl	8019dc6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8019226:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801922a:	f000 fdde 	bl	8019dea <RadioRead>
 801922e:	4603      	mov	r3, r0
 8019230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8019234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801923c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8019240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019244:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8019248:	b2db      	uxtb	r3, r3
 801924a:	4619      	mov	r1, r3
 801924c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8019250:	f000 fdb9 	bl	8019dc6 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019254:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019256:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801925a:	fb02 f303 	mul.w	r3, r2, r3
 801925e:	461a      	mov	r2, r3
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	fbb2 f3f3 	udiv	r3, r2, r3
 8019266:	4a4b      	ldr	r2, [pc, #300]	; (8019394 <RadioSetRxConfig+0x2fc>)
 8019268:	6093      	str	r3, [r2, #8]
            break;
 801926a:	e115      	b.n	8019498 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801926c:	2000      	movs	r0, #0
 801926e:	f002 f801 	bl	801b274 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019272:	4b48      	ldr	r3, [pc, #288]	; (8019394 <RadioSetRxConfig+0x2fc>)
 8019274:	2200      	movs	r2, #0
 8019276:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801927a:	4a46      	ldr	r2, [pc, #280]	; (8019394 <RadioSetRxConfig+0x2fc>)
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019280:	4b44      	ldr	r3, [pc, #272]	; (8019394 <RadioSetRxConfig+0x2fc>)
 8019282:	220b      	movs	r2, #11
 8019284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019288:	68b8      	ldr	r0, [r7, #8]
 801928a:	f002 fec5 	bl	801c018 <SUBGRF_GetFskBandwidthRegValue>
 801928e:	4603      	mov	r3, r0
 8019290:	461a      	mov	r2, r3
 8019292:	4b40      	ldr	r3, [pc, #256]	; (8019394 <RadioSetRxConfig+0x2fc>)
 8019294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019298:	4b3e      	ldr	r3, [pc, #248]	; (8019394 <RadioSetRxConfig+0x2fc>)
 801929a:	2200      	movs	r2, #0
 801929c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801929e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80192a0:	00db      	lsls	r3, r3, #3
 80192a2:	b29a      	uxth	r2, r3
 80192a4:	4b3b      	ldr	r3, [pc, #236]	; (8019394 <RadioSetRxConfig+0x2fc>)
 80192a6:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80192a8:	4b3a      	ldr	r3, [pc, #232]	; (8019394 <RadioSetRxConfig+0x2fc>)
 80192aa:	2204      	movs	r2, #4
 80192ac:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80192ae:	4b39      	ldr	r3, [pc, #228]	; (8019394 <RadioSetRxConfig+0x2fc>)
 80192b0:	2218      	movs	r2, #24
 80192b2:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80192b4:	4b37      	ldr	r3, [pc, #220]	; (8019394 <RadioSetRxConfig+0x2fc>)
 80192b6:	2200      	movs	r2, #0
 80192b8:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80192ba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80192be:	f083 0301 	eor.w	r3, r3, #1
 80192c2:	b2db      	uxtb	r3, r3
 80192c4:	461a      	mov	r2, r3
 80192c6:	4b33      	ldr	r3, [pc, #204]	; (8019394 <RadioSetRxConfig+0x2fc>)
 80192c8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80192ca:	4b33      	ldr	r3, [pc, #204]	; (8019398 <RadioSetRxConfig+0x300>)
 80192cc:	781a      	ldrb	r2, [r3, #0]
 80192ce:	4b31      	ldr	r3, [pc, #196]	; (8019394 <RadioSetRxConfig+0x2fc>)
 80192d0:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80192d2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d003      	beq.n	80192e2 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80192da:	4b2e      	ldr	r3, [pc, #184]	; (8019394 <RadioSetRxConfig+0x2fc>)
 80192dc:	22f2      	movs	r2, #242	; 0xf2
 80192de:	75da      	strb	r2, [r3, #23]
 80192e0:	e002      	b.n	80192e8 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80192e2:	4b2c      	ldr	r3, [pc, #176]	; (8019394 <RadioSetRxConfig+0x2fc>)
 80192e4:	2201      	movs	r2, #1
 80192e6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80192e8:	4b2a      	ldr	r3, [pc, #168]	; (8019394 <RadioSetRxConfig+0x2fc>)
 80192ea:	2201      	movs	r2, #1
 80192ec:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80192ee:	f000 fc68 	bl	8019bc2 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80192f2:	2000      	movs	r0, #0
 80192f4:	f7ff fdfc 	bl	8018ef0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80192f8:	4828      	ldr	r0, [pc, #160]	; (801939c <RadioSetRxConfig+0x304>)
 80192fa:	f002 fa59 	bl	801b7b0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80192fe:	4828      	ldr	r0, [pc, #160]	; (80193a0 <RadioSetRxConfig+0x308>)
 8019300:	f002 fb28 	bl	801b954 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019304:	4a28      	ldr	r2, [pc, #160]	; (80193a8 <RadioSetRxConfig+0x310>)
 8019306:	f107 0314 	add.w	r3, r7, #20
 801930a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801930e:	e883 0003 	stmia.w	r3, {r0, r1}
 8019312:	f107 0314 	add.w	r3, r7, #20
 8019316:	4618      	mov	r0, r3
 8019318:	f001 fde5 	bl	801aee6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801931c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019320:	f001 fe30 	bl	801af84 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019324:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019326:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801932a:	fb02 f303 	mul.w	r3, r2, r3
 801932e:	461a      	mov	r2, r3
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	fbb2 f3f3 	udiv	r3, r2, r3
 8019336:	4a17      	ldr	r2, [pc, #92]	; (8019394 <RadioSetRxConfig+0x2fc>)
 8019338:	6093      	str	r3, [r2, #8]
            break;
 801933a:	e0ad      	b.n	8019498 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801933c:	2000      	movs	r0, #0
 801933e:	f001 ff99 	bl	801b274 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019342:	4b14      	ldr	r3, [pc, #80]	; (8019394 <RadioSetRxConfig+0x2fc>)
 8019344:	2201      	movs	r2, #1
 8019346:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	b2da      	uxtb	r2, r3
 801934e:	4b11      	ldr	r3, [pc, #68]	; (8019394 <RadioSetRxConfig+0x2fc>)
 8019350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8019354:	4a15      	ldr	r2, [pc, #84]	; (80193ac <RadioSetRxConfig+0x314>)
 8019356:	68bb      	ldr	r3, [r7, #8]
 8019358:	4413      	add	r3, r2
 801935a:	781a      	ldrb	r2, [r3, #0]
 801935c:	4b0d      	ldr	r3, [pc, #52]	; (8019394 <RadioSetRxConfig+0x2fc>)
 801935e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8019362:	4a0c      	ldr	r2, [pc, #48]	; (8019394 <RadioSetRxConfig+0x2fc>)
 8019364:	7bbb      	ldrb	r3, [r7, #14]
 8019366:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801936a:	68bb      	ldr	r3, [r7, #8]
 801936c:	2b00      	cmp	r3, #0
 801936e:	d105      	bne.n	801937c <RadioSetRxConfig+0x2e4>
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	2b0b      	cmp	r3, #11
 8019374:	d008      	beq.n	8019388 <RadioSetRxConfig+0x2f0>
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	2b0c      	cmp	r3, #12
 801937a:	d005      	beq.n	8019388 <RadioSetRxConfig+0x2f0>
 801937c:	68bb      	ldr	r3, [r7, #8]
 801937e:	2b01      	cmp	r3, #1
 8019380:	d116      	bne.n	80193b0 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	2b0c      	cmp	r3, #12
 8019386:	d113      	bne.n	80193b0 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019388:	4b02      	ldr	r3, [pc, #8]	; (8019394 <RadioSetRxConfig+0x2fc>)
 801938a:	2201      	movs	r2, #1
 801938c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8019390:	e012      	b.n	80193b8 <RadioSetRxConfig+0x320>
 8019392:	bf00      	nop
 8019394:	2000180c 	.word	0x2000180c
 8019398:	2000014c 	.word	0x2000014c
 801939c:	20001844 	.word	0x20001844
 80193a0:	2000181a 	.word	0x2000181a
 80193a4:	0801e2dc 	.word	0x0801e2dc
 80193a8:	0801e2e4 	.word	0x0801e2e4
 80193ac:	0801e94c 	.word	0x0801e94c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80193b0:	4b3b      	ldr	r3, [pc, #236]	; (80194a0 <RadioSetRxConfig+0x408>)
 80193b2:	2200      	movs	r2, #0
 80193b4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80193b8:	4b39      	ldr	r3, [pc, #228]	; (80194a0 <RadioSetRxConfig+0x408>)
 80193ba:	2201      	movs	r2, #1
 80193bc:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80193be:	4b38      	ldr	r3, [pc, #224]	; (80194a0 <RadioSetRxConfig+0x408>)
 80193c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80193c4:	2b05      	cmp	r3, #5
 80193c6:	d004      	beq.n	80193d2 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80193c8:	4b35      	ldr	r3, [pc, #212]	; (80194a0 <RadioSetRxConfig+0x408>)
 80193ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80193ce:	2b06      	cmp	r3, #6
 80193d0:	d10a      	bne.n	80193e8 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80193d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80193d4:	2b0b      	cmp	r3, #11
 80193d6:	d803      	bhi.n	80193e0 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80193d8:	4b31      	ldr	r3, [pc, #196]	; (80194a0 <RadioSetRxConfig+0x408>)
 80193da:	220c      	movs	r2, #12
 80193dc:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80193de:	e006      	b.n	80193ee <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80193e0:	4a2f      	ldr	r2, [pc, #188]	; (80194a0 <RadioSetRxConfig+0x408>)
 80193e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80193e4:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80193e6:	e002      	b.n	80193ee <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80193e8:	4a2d      	ldr	r2, [pc, #180]	; (80194a0 <RadioSetRxConfig+0x408>)
 80193ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80193ec:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80193ee:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80193f2:	4b2b      	ldr	r3, [pc, #172]	; (80194a0 <RadioSetRxConfig+0x408>)
 80193f4:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80193f6:	4b2b      	ldr	r3, [pc, #172]	; (80194a4 <RadioSetRxConfig+0x40c>)
 80193f8:	781a      	ldrb	r2, [r3, #0]
 80193fa:	4b29      	ldr	r3, [pc, #164]	; (80194a0 <RadioSetRxConfig+0x408>)
 80193fc:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80193fe:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8019402:	4b27      	ldr	r3, [pc, #156]	; (80194a0 <RadioSetRxConfig+0x408>)
 8019404:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8019408:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801940c:	4b24      	ldr	r3, [pc, #144]	; (80194a0 <RadioSetRxConfig+0x408>)
 801940e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8019412:	f000 fbd6 	bl	8019bc2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8019416:	2001      	movs	r0, #1
 8019418:	f7ff fd6a 	bl	8018ef0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801941c:	4822      	ldr	r0, [pc, #136]	; (80194a8 <RadioSetRxConfig+0x410>)
 801941e:	f002 f9c7 	bl	801b7b0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019422:	4822      	ldr	r0, [pc, #136]	; (80194ac <RadioSetRxConfig+0x414>)
 8019424:	f002 fa96 	bl	801b954 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019428:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801942a:	b2db      	uxtb	r3, r3
 801942c:	4618      	mov	r0, r3
 801942e:	f001 ff30 	bl	801b292 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8019432:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8019436:	f002 fbe9 	bl	801bc0c <SUBGRF_ReadRegister>
 801943a:	4603      	mov	r3, r0
 801943c:	f003 0301 	and.w	r3, r3, #1
 8019440:	b2db      	uxtb	r3, r3
 8019442:	4619      	mov	r1, r3
 8019444:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8019448:	f002 fbcc 	bl	801bbe4 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801944c:	4b14      	ldr	r3, [pc, #80]	; (80194a0 <RadioSetRxConfig+0x408>)
 801944e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8019452:	2b01      	cmp	r3, #1
 8019454:	d10d      	bne.n	8019472 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8019456:	f240 7036 	movw	r0, #1846	; 0x736
 801945a:	f002 fbd7 	bl	801bc0c <SUBGRF_ReadRegister>
 801945e:	4603      	mov	r3, r0
 8019460:	f023 0304 	bic.w	r3, r3, #4
 8019464:	b2db      	uxtb	r3, r3
 8019466:	4619      	mov	r1, r3
 8019468:	f240 7036 	movw	r0, #1846	; 0x736
 801946c:	f002 fbba 	bl	801bbe4 <SUBGRF_WriteRegister>
 8019470:	e00c      	b.n	801948c <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019472:	f240 7036 	movw	r0, #1846	; 0x736
 8019476:	f002 fbc9 	bl	801bc0c <SUBGRF_ReadRegister>
 801947a:	4603      	mov	r3, r0
 801947c:	f043 0304 	orr.w	r3, r3, #4
 8019480:	b2db      	uxtb	r3, r3
 8019482:	4619      	mov	r1, r3
 8019484:	f240 7036 	movw	r0, #1846	; 0x736
 8019488:	f002 fbac 	bl	801bbe4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801948c:	4b04      	ldr	r3, [pc, #16]	; (80194a0 <RadioSetRxConfig+0x408>)
 801948e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019492:	609a      	str	r2, [r3, #8]
            break;
 8019494:	e000      	b.n	8019498 <RadioSetRxConfig+0x400>
            break;
 8019496:	bf00      	nop
    }
}
 8019498:	bf00      	nop
 801949a:	3728      	adds	r7, #40	; 0x28
 801949c:	46bd      	mov	sp, r7
 801949e:	bd80      	pop	{r7, pc}
 80194a0:	2000180c 	.word	0x2000180c
 80194a4:	2000014c 	.word	0x2000014c
 80194a8:	20001844 	.word	0x20001844
 80194ac:	2000181a 	.word	0x2000181a

080194b0 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80194b0:	b580      	push	{r7, lr}
 80194b2:	b086      	sub	sp, #24
 80194b4:	af00      	add	r7, sp, #0
 80194b6:	60ba      	str	r2, [r7, #8]
 80194b8:	607b      	str	r3, [r7, #4]
 80194ba:	4603      	mov	r3, r0
 80194bc:	73fb      	strb	r3, [r7, #15]
 80194be:	460b      	mov	r3, r1
 80194c0:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80194c2:	f002 fe76 	bl	801c1b2 <RFW_DeInit>
    switch( modem )
 80194c6:	7bfb      	ldrb	r3, [r7, #15]
 80194c8:	2b04      	cmp	r3, #4
 80194ca:	f000 80c7 	beq.w	801965c <RadioSetTxConfig+0x1ac>
 80194ce:	2b04      	cmp	r3, #4
 80194d0:	f300 80d6 	bgt.w	8019680 <RadioSetTxConfig+0x1d0>
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d002      	beq.n	80194de <RadioSetTxConfig+0x2e>
 80194d8:	2b01      	cmp	r3, #1
 80194da:	d059      	beq.n	8019590 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80194dc:	e0d0      	b.n	8019680 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80194de:	4b77      	ldr	r3, [pc, #476]	; (80196bc <RadioSetTxConfig+0x20c>)
 80194e0:	2200      	movs	r2, #0
 80194e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80194e6:	4a75      	ldr	r2, [pc, #468]	; (80196bc <RadioSetTxConfig+0x20c>)
 80194e8:	6a3b      	ldr	r3, [r7, #32]
 80194ea:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80194ec:	4b73      	ldr	r3, [pc, #460]	; (80196bc <RadioSetTxConfig+0x20c>)
 80194ee:	220b      	movs	r2, #11
 80194f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80194f4:	6878      	ldr	r0, [r7, #4]
 80194f6:	f002 fd8f 	bl	801c018 <SUBGRF_GetFskBandwidthRegValue>
 80194fa:	4603      	mov	r3, r0
 80194fc:	461a      	mov	r2, r3
 80194fe:	4b6f      	ldr	r3, [pc, #444]	; (80196bc <RadioSetTxConfig+0x20c>)
 8019500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8019504:	4a6d      	ldr	r2, [pc, #436]	; (80196bc <RadioSetTxConfig+0x20c>)
 8019506:	68bb      	ldr	r3, [r7, #8]
 8019508:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801950a:	4b6c      	ldr	r3, [pc, #432]	; (80196bc <RadioSetTxConfig+0x20c>)
 801950c:	2200      	movs	r2, #0
 801950e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019510:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019512:	00db      	lsls	r3, r3, #3
 8019514:	b29a      	uxth	r2, r3
 8019516:	4b69      	ldr	r3, [pc, #420]	; (80196bc <RadioSetTxConfig+0x20c>)
 8019518:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801951a:	4b68      	ldr	r3, [pc, #416]	; (80196bc <RadioSetTxConfig+0x20c>)
 801951c:	2204      	movs	r2, #4
 801951e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8019520:	4b66      	ldr	r3, [pc, #408]	; (80196bc <RadioSetTxConfig+0x20c>)
 8019522:	2218      	movs	r2, #24
 8019524:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019526:	4b65      	ldr	r3, [pc, #404]	; (80196bc <RadioSetTxConfig+0x20c>)
 8019528:	2200      	movs	r2, #0
 801952a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801952c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019530:	f083 0301 	eor.w	r3, r3, #1
 8019534:	b2db      	uxtb	r3, r3
 8019536:	461a      	mov	r2, r3
 8019538:	4b60      	ldr	r3, [pc, #384]	; (80196bc <RadioSetTxConfig+0x20c>)
 801953a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801953c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019540:	2b00      	cmp	r3, #0
 8019542:	d003      	beq.n	801954c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019544:	4b5d      	ldr	r3, [pc, #372]	; (80196bc <RadioSetTxConfig+0x20c>)
 8019546:	22f2      	movs	r2, #242	; 0xf2
 8019548:	75da      	strb	r2, [r3, #23]
 801954a:	e002      	b.n	8019552 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801954c:	4b5b      	ldr	r3, [pc, #364]	; (80196bc <RadioSetTxConfig+0x20c>)
 801954e:	2201      	movs	r2, #1
 8019550:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019552:	4b5a      	ldr	r3, [pc, #360]	; (80196bc <RadioSetTxConfig+0x20c>)
 8019554:	2201      	movs	r2, #1
 8019556:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019558:	f000 fb33 	bl	8019bc2 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801955c:	2000      	movs	r0, #0
 801955e:	f7ff fcc7 	bl	8018ef0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019562:	4857      	ldr	r0, [pc, #348]	; (80196c0 <RadioSetTxConfig+0x210>)
 8019564:	f002 f924 	bl	801b7b0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019568:	4856      	ldr	r0, [pc, #344]	; (80196c4 <RadioSetTxConfig+0x214>)
 801956a:	f002 f9f3 	bl	801b954 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801956e:	4a56      	ldr	r2, [pc, #344]	; (80196c8 <RadioSetTxConfig+0x218>)
 8019570:	f107 0310 	add.w	r3, r7, #16
 8019574:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019578:	e883 0003 	stmia.w	r3, {r0, r1}
 801957c:	f107 0310 	add.w	r3, r7, #16
 8019580:	4618      	mov	r0, r3
 8019582:	f001 fcb0 	bl	801aee6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019586:	f240 10ff 	movw	r0, #511	; 0x1ff
 801958a:	f001 fcfb 	bl	801af84 <SUBGRF_SetWhiteningSeed>
            break;
 801958e:	e078      	b.n	8019682 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019590:	4b4a      	ldr	r3, [pc, #296]	; (80196bc <RadioSetTxConfig+0x20c>)
 8019592:	2201      	movs	r2, #1
 8019594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8019598:	6a3b      	ldr	r3, [r7, #32]
 801959a:	b2da      	uxtb	r2, r3
 801959c:	4b47      	ldr	r3, [pc, #284]	; (80196bc <RadioSetTxConfig+0x20c>)
 801959e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80195a2:	4a4a      	ldr	r2, [pc, #296]	; (80196cc <RadioSetTxConfig+0x21c>)
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	4413      	add	r3, r2
 80195a8:	781a      	ldrb	r2, [r3, #0]
 80195aa:	4b44      	ldr	r3, [pc, #272]	; (80196bc <RadioSetTxConfig+0x20c>)
 80195ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80195b0:	4a42      	ldr	r2, [pc, #264]	; (80196bc <RadioSetTxConfig+0x20c>)
 80195b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80195b6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d105      	bne.n	80195cc <RadioSetTxConfig+0x11c>
 80195c0:	6a3b      	ldr	r3, [r7, #32]
 80195c2:	2b0b      	cmp	r3, #11
 80195c4:	d008      	beq.n	80195d8 <RadioSetTxConfig+0x128>
 80195c6:	6a3b      	ldr	r3, [r7, #32]
 80195c8:	2b0c      	cmp	r3, #12
 80195ca:	d005      	beq.n	80195d8 <RadioSetTxConfig+0x128>
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	2b01      	cmp	r3, #1
 80195d0:	d107      	bne.n	80195e2 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80195d2:	6a3b      	ldr	r3, [r7, #32]
 80195d4:	2b0c      	cmp	r3, #12
 80195d6:	d104      	bne.n	80195e2 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80195d8:	4b38      	ldr	r3, [pc, #224]	; (80196bc <RadioSetTxConfig+0x20c>)
 80195da:	2201      	movs	r2, #1
 80195dc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80195e0:	e003      	b.n	80195ea <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80195e2:	4b36      	ldr	r3, [pc, #216]	; (80196bc <RadioSetTxConfig+0x20c>)
 80195e4:	2200      	movs	r2, #0
 80195e6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80195ea:	4b34      	ldr	r3, [pc, #208]	; (80196bc <RadioSetTxConfig+0x20c>)
 80195ec:	2201      	movs	r2, #1
 80195ee:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80195f0:	4b32      	ldr	r3, [pc, #200]	; (80196bc <RadioSetTxConfig+0x20c>)
 80195f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80195f6:	2b05      	cmp	r3, #5
 80195f8:	d004      	beq.n	8019604 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80195fa:	4b30      	ldr	r3, [pc, #192]	; (80196bc <RadioSetTxConfig+0x20c>)
 80195fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019600:	2b06      	cmp	r3, #6
 8019602:	d10a      	bne.n	801961a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8019604:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019606:	2b0b      	cmp	r3, #11
 8019608:	d803      	bhi.n	8019612 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801960a:	4b2c      	ldr	r3, [pc, #176]	; (80196bc <RadioSetTxConfig+0x20c>)
 801960c:	220c      	movs	r2, #12
 801960e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019610:	e006      	b.n	8019620 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019612:	4a2a      	ldr	r2, [pc, #168]	; (80196bc <RadioSetTxConfig+0x20c>)
 8019614:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019616:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8019618:	e002      	b.n	8019620 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801961a:	4a28      	ldr	r2, [pc, #160]	; (80196bc <RadioSetTxConfig+0x20c>)
 801961c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801961e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019620:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019624:	4b25      	ldr	r3, [pc, #148]	; (80196bc <RadioSetTxConfig+0x20c>)
 8019626:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019628:	4b29      	ldr	r3, [pc, #164]	; (80196d0 <RadioSetTxConfig+0x220>)
 801962a:	781a      	ldrb	r2, [r3, #0]
 801962c:	4b23      	ldr	r3, [pc, #140]	; (80196bc <RadioSetTxConfig+0x20c>)
 801962e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019630:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8019634:	4b21      	ldr	r3, [pc, #132]	; (80196bc <RadioSetTxConfig+0x20c>)
 8019636:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801963a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801963e:	4b1f      	ldr	r3, [pc, #124]	; (80196bc <RadioSetTxConfig+0x20c>)
 8019640:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8019644:	f000 fabd 	bl	8019bc2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8019648:	2001      	movs	r0, #1
 801964a:	f7ff fc51 	bl	8018ef0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801964e:	481c      	ldr	r0, [pc, #112]	; (80196c0 <RadioSetTxConfig+0x210>)
 8019650:	f002 f8ae 	bl	801b7b0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019654:	481b      	ldr	r0, [pc, #108]	; (80196c4 <RadioSetTxConfig+0x214>)
 8019656:	f002 f97d 	bl	801b954 <SUBGRF_SetPacketParams>
            break;
 801965a:	e012      	b.n	8019682 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801965c:	2004      	movs	r0, #4
 801965e:	f7ff fc47 	bl	8018ef0 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8019662:	4b16      	ldr	r3, [pc, #88]	; (80196bc <RadioSetTxConfig+0x20c>)
 8019664:	2202      	movs	r2, #2
 8019666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801966a:	4a14      	ldr	r2, [pc, #80]	; (80196bc <RadioSetTxConfig+0x20c>)
 801966c:	6a3b      	ldr	r3, [r7, #32]
 801966e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8019670:	4b12      	ldr	r3, [pc, #72]	; (80196bc <RadioSetTxConfig+0x20c>)
 8019672:	2216      	movs	r2, #22
 8019674:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019678:	4811      	ldr	r0, [pc, #68]	; (80196c0 <RadioSetTxConfig+0x210>)
 801967a:	f002 f899 	bl	801b7b0 <SUBGRF_SetModulationParams>
            break;
 801967e:	e000      	b.n	8019682 <RadioSetTxConfig+0x1d2>
            break;
 8019680:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8019682:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019686:	4618      	mov	r0, r3
 8019688:	f002 fbc8 	bl	801be1c <SUBGRF_SetRfTxPower>
 801968c:	4603      	mov	r3, r0
 801968e:	461a      	mov	r2, r3
 8019690:	4b0a      	ldr	r3, [pc, #40]	; (80196bc <RadioSetTxConfig+0x20c>)
 8019692:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019696:	210e      	movs	r1, #14
 8019698:	f640 101f 	movw	r0, #2335	; 0x91f
 801969c:	f002 faa2 	bl	801bbe4 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80196a0:	4b06      	ldr	r3, [pc, #24]	; (80196bc <RadioSetTxConfig+0x20c>)
 80196a2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80196a6:	4618      	mov	r0, r3
 80196a8:	f002 fd97 	bl	801c1da <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80196ac:	4a03      	ldr	r2, [pc, #12]	; (80196bc <RadioSetTxConfig+0x20c>)
 80196ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80196b0:	6053      	str	r3, [r2, #4]
}
 80196b2:	bf00      	nop
 80196b4:	3718      	adds	r7, #24
 80196b6:	46bd      	mov	sp, r7
 80196b8:	bd80      	pop	{r7, pc}
 80196ba:	bf00      	nop
 80196bc:	2000180c 	.word	0x2000180c
 80196c0:	20001844 	.word	0x20001844
 80196c4:	2000181a 	.word	0x2000181a
 80196c8:	0801e2e4 	.word	0x0801e2e4
 80196cc:	0801e94c 	.word	0x0801e94c
 80196d0:	2000014c 	.word	0x2000014c

080196d4 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80196d4:	b480      	push	{r7}
 80196d6:	b083      	sub	sp, #12
 80196d8:	af00      	add	r7, sp, #0
 80196da:	6078      	str	r0, [r7, #4]
    return true;
 80196dc:	2301      	movs	r3, #1
}
 80196de:	4618      	mov	r0, r3
 80196e0:	370c      	adds	r7, #12
 80196e2:	46bd      	mov	sp, r7
 80196e4:	bc80      	pop	{r7}
 80196e6:	4770      	bx	lr

080196e8 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80196e8:	b480      	push	{r7}
 80196ea:	b085      	sub	sp, #20
 80196ec:	af00      	add	r7, sp, #0
 80196ee:	4603      	mov	r3, r0
 80196f0:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80196f2:	2300      	movs	r3, #0
 80196f4:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80196f6:	79fb      	ldrb	r3, [r7, #7]
 80196f8:	2b0a      	cmp	r3, #10
 80196fa:	d83e      	bhi.n	801977a <RadioGetLoRaBandwidthInHz+0x92>
 80196fc:	a201      	add	r2, pc, #4	; (adr r2, 8019704 <RadioGetLoRaBandwidthInHz+0x1c>)
 80196fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019702:	bf00      	nop
 8019704:	08019731 	.word	0x08019731
 8019708:	08019741 	.word	0x08019741
 801970c:	08019751 	.word	0x08019751
 8019710:	08019761 	.word	0x08019761
 8019714:	08019769 	.word	0x08019769
 8019718:	0801976f 	.word	0x0801976f
 801971c:	08019775 	.word	0x08019775
 8019720:	0801977b 	.word	0x0801977b
 8019724:	08019739 	.word	0x08019739
 8019728:	08019749 	.word	0x08019749
 801972c:	08019759 	.word	0x08019759
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8019730:	f641 6384 	movw	r3, #7812	; 0x1e84
 8019734:	60fb      	str	r3, [r7, #12]
        break;
 8019736:	e020      	b.n	801977a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8019738:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801973c:	60fb      	str	r3, [r7, #12]
        break;
 801973e:	e01c      	b.n	801977a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8019740:	f643 5309 	movw	r3, #15625	; 0x3d09
 8019744:	60fb      	str	r3, [r7, #12]
        break;
 8019746:	e018      	b.n	801977a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8019748:	f245 1361 	movw	r3, #20833	; 0x5161
 801974c:	60fb      	str	r3, [r7, #12]
        break;
 801974e:	e014      	b.n	801977a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8019750:	f647 2312 	movw	r3, #31250	; 0x7a12
 8019754:	60fb      	str	r3, [r7, #12]
        break;
 8019756:	e010      	b.n	801977a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8019758:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801975c:	60fb      	str	r3, [r7, #12]
        break;
 801975e:	e00c      	b.n	801977a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8019760:	f24f 4324 	movw	r3, #62500	; 0xf424
 8019764:	60fb      	str	r3, [r7, #12]
        break;
 8019766:	e008      	b.n	801977a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8019768:	4b07      	ldr	r3, [pc, #28]	; (8019788 <RadioGetLoRaBandwidthInHz+0xa0>)
 801976a:	60fb      	str	r3, [r7, #12]
        break;
 801976c:	e005      	b.n	801977a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801976e:	4b07      	ldr	r3, [pc, #28]	; (801978c <RadioGetLoRaBandwidthInHz+0xa4>)
 8019770:	60fb      	str	r3, [r7, #12]
        break;
 8019772:	e002      	b.n	801977a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8019774:	4b06      	ldr	r3, [pc, #24]	; (8019790 <RadioGetLoRaBandwidthInHz+0xa8>)
 8019776:	60fb      	str	r3, [r7, #12]
        break;
 8019778:	bf00      	nop
    }

    return bandwidthInHz;
 801977a:	68fb      	ldr	r3, [r7, #12]
}
 801977c:	4618      	mov	r0, r3
 801977e:	3714      	adds	r7, #20
 8019780:	46bd      	mov	sp, r7
 8019782:	bc80      	pop	{r7}
 8019784:	4770      	bx	lr
 8019786:	bf00      	nop
 8019788:	0001e848 	.word	0x0001e848
 801978c:	0003d090 	.word	0x0003d090
 8019790:	0007a120 	.word	0x0007a120

08019794 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019794:	b480      	push	{r7}
 8019796:	b083      	sub	sp, #12
 8019798:	af00      	add	r7, sp, #0
 801979a:	6078      	str	r0, [r7, #4]
 801979c:	4608      	mov	r0, r1
 801979e:	4611      	mov	r1, r2
 80197a0:	461a      	mov	r2, r3
 80197a2:	4603      	mov	r3, r0
 80197a4:	70fb      	strb	r3, [r7, #3]
 80197a6:	460b      	mov	r3, r1
 80197a8:	803b      	strh	r3, [r7, #0]
 80197aa:	4613      	mov	r3, r2
 80197ac:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80197ae:	883b      	ldrh	r3, [r7, #0]
 80197b0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80197b2:	78ba      	ldrb	r2, [r7, #2]
 80197b4:	f082 0201 	eor.w	r2, r2, #1
 80197b8:	b2d2      	uxtb	r2, r2
 80197ba:	2a00      	cmp	r2, #0
 80197bc:	d001      	beq.n	80197c2 <RadioGetGfskTimeOnAirNumerator+0x2e>
 80197be:	2208      	movs	r2, #8
 80197c0:	e000      	b.n	80197c4 <RadioGetGfskTimeOnAirNumerator+0x30>
 80197c2:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80197c4:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80197c6:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80197ca:	7c3b      	ldrb	r3, [r7, #16]
 80197cc:	7d39      	ldrb	r1, [r7, #20]
 80197ce:	2900      	cmp	r1, #0
 80197d0:	d001      	beq.n	80197d6 <RadioGetGfskTimeOnAirNumerator+0x42>
 80197d2:	2102      	movs	r1, #2
 80197d4:	e000      	b.n	80197d8 <RadioGetGfskTimeOnAirNumerator+0x44>
 80197d6:	2100      	movs	r1, #0
 80197d8:	440b      	add	r3, r1
 80197da:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80197dc:	4413      	add	r3, r2
}
 80197de:	4618      	mov	r0, r3
 80197e0:	370c      	adds	r7, #12
 80197e2:	46bd      	mov	sp, r7
 80197e4:	bc80      	pop	{r7}
 80197e6:	4770      	bx	lr

080197e8 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80197e8:	b480      	push	{r7}
 80197ea:	b08b      	sub	sp, #44	; 0x2c
 80197ec:	af00      	add	r7, sp, #0
 80197ee:	60f8      	str	r0, [r7, #12]
 80197f0:	60b9      	str	r1, [r7, #8]
 80197f2:	4611      	mov	r1, r2
 80197f4:	461a      	mov	r2, r3
 80197f6:	460b      	mov	r3, r1
 80197f8:	71fb      	strb	r3, [r7, #7]
 80197fa:	4613      	mov	r3, r2
 80197fc:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80197fe:	79fb      	ldrb	r3, [r7, #7]
 8019800:	3304      	adds	r3, #4
 8019802:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8019804:	2300      	movs	r3, #0
 8019806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801980a:	68bb      	ldr	r3, [r7, #8]
 801980c:	2b05      	cmp	r3, #5
 801980e:	d002      	beq.n	8019816 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8019810:	68bb      	ldr	r3, [r7, #8]
 8019812:	2b06      	cmp	r3, #6
 8019814:	d104      	bne.n	8019820 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8019816:	88bb      	ldrh	r3, [r7, #4]
 8019818:	2b0b      	cmp	r3, #11
 801981a:	d801      	bhi.n	8019820 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801981c:	230c      	movs	r3, #12
 801981e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019820:	68fb      	ldr	r3, [r7, #12]
 8019822:	2b00      	cmp	r3, #0
 8019824:	d105      	bne.n	8019832 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8019826:	68bb      	ldr	r3, [r7, #8]
 8019828:	2b0b      	cmp	r3, #11
 801982a:	d008      	beq.n	801983e <RadioGetLoRaTimeOnAirNumerator+0x56>
 801982c:	68bb      	ldr	r3, [r7, #8]
 801982e:	2b0c      	cmp	r3, #12
 8019830:	d005      	beq.n	801983e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	2b01      	cmp	r3, #1
 8019836:	d105      	bne.n	8019844 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019838:	68bb      	ldr	r3, [r7, #8]
 801983a:	2b0c      	cmp	r3, #12
 801983c:	d102      	bne.n	8019844 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801983e:	2301      	movs	r3, #1
 8019840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019844:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8019848:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801984a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801984e:	2a00      	cmp	r2, #0
 8019850:	d001      	beq.n	8019856 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8019852:	2210      	movs	r2, #16
 8019854:	e000      	b.n	8019858 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8019856:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019858:	4413      	add	r3, r2
 801985a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801985c:	68bb      	ldr	r3, [r7, #8]
 801985e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8019860:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8019862:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8019866:	2a00      	cmp	r2, #0
 8019868:	d001      	beq.n	801986e <RadioGetLoRaTimeOnAirNumerator+0x86>
 801986a:	2200      	movs	r2, #0
 801986c:	e000      	b.n	8019870 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801986e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8019870:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019872:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8019874:	68bb      	ldr	r3, [r7, #8]
 8019876:	2b06      	cmp	r3, #6
 8019878:	d803      	bhi.n	8019882 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801987a:	68bb      	ldr	r3, [r7, #8]
 801987c:	009b      	lsls	r3, r3, #2
 801987e:	623b      	str	r3, [r7, #32]
 8019880:	e00e      	b.n	80198a0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8019882:	69fb      	ldr	r3, [r7, #28]
 8019884:	3308      	adds	r3, #8
 8019886:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8019888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801988c:	2b00      	cmp	r3, #0
 801988e:	d004      	beq.n	801989a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8019890:	68bb      	ldr	r3, [r7, #8]
 8019892:	3b02      	subs	r3, #2
 8019894:	009b      	lsls	r3, r3, #2
 8019896:	623b      	str	r3, [r7, #32]
 8019898:	e002      	b.n	80198a0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801989a:	68bb      	ldr	r3, [r7, #8]
 801989c:	009b      	lsls	r3, r3, #2
 801989e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80198a0:	69fb      	ldr	r3, [r7, #28]
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	da01      	bge.n	80198aa <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80198a6:	2300      	movs	r3, #0
 80198a8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80198aa:	69fa      	ldr	r2, [r7, #28]
 80198ac:	6a3b      	ldr	r3, [r7, #32]
 80198ae:	4413      	add	r3, r2
 80198b0:	1e5a      	subs	r2, r3, #1
 80198b2:	6a3b      	ldr	r3, [r7, #32]
 80198b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80198b8:	697a      	ldr	r2, [r7, #20]
 80198ba:	fb03 f202 	mul.w	r2, r3, r2
 80198be:	88bb      	ldrh	r3, [r7, #4]
 80198c0:	4413      	add	r3, r2
    int32_t intermediate =
 80198c2:	330c      	adds	r3, #12
 80198c4:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80198c6:	68bb      	ldr	r3, [r7, #8]
 80198c8:	2b06      	cmp	r3, #6
 80198ca:	d802      	bhi.n	80198d2 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80198cc:	69bb      	ldr	r3, [r7, #24]
 80198ce:	3302      	adds	r3, #2
 80198d0:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80198d2:	69bb      	ldr	r3, [r7, #24]
 80198d4:	009b      	lsls	r3, r3, #2
 80198d6:	1c5a      	adds	r2, r3, #1
 80198d8:	68bb      	ldr	r3, [r7, #8]
 80198da:	3b02      	subs	r3, #2
 80198dc:	fa02 f303 	lsl.w	r3, r2, r3
}
 80198e0:	4618      	mov	r0, r3
 80198e2:	372c      	adds	r7, #44	; 0x2c
 80198e4:	46bd      	mov	sp, r7
 80198e6:	bc80      	pop	{r7}
 80198e8:	4770      	bx	lr
	...

080198ec <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80198ec:	b580      	push	{r7, lr}
 80198ee:	b08a      	sub	sp, #40	; 0x28
 80198f0:	af04      	add	r7, sp, #16
 80198f2:	60b9      	str	r1, [r7, #8]
 80198f4:	607a      	str	r2, [r7, #4]
 80198f6:	461a      	mov	r2, r3
 80198f8:	4603      	mov	r3, r0
 80198fa:	73fb      	strb	r3, [r7, #15]
 80198fc:	4613      	mov	r3, r2
 80198fe:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019900:	2300      	movs	r3, #0
 8019902:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019904:	2301      	movs	r3, #1
 8019906:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019908:	7bfb      	ldrb	r3, [r7, #15]
 801990a:	2b00      	cmp	r3, #0
 801990c:	d002      	beq.n	8019914 <RadioTimeOnAir+0x28>
 801990e:	2b01      	cmp	r3, #1
 8019910:	d017      	beq.n	8019942 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8019912:	e035      	b.n	8019980 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8019914:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8019918:	8c3a      	ldrh	r2, [r7, #32]
 801991a:	7bb9      	ldrb	r1, [r7, #14]
 801991c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019920:	9301      	str	r3, [sp, #4]
 8019922:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019926:	9300      	str	r3, [sp, #0]
 8019928:	4603      	mov	r3, r0
 801992a:	6878      	ldr	r0, [r7, #4]
 801992c:	f7ff ff32 	bl	8019794 <RadioGetGfskTimeOnAirNumerator>
 8019930:	4603      	mov	r3, r0
 8019932:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019936:	fb02 f303 	mul.w	r3, r2, r3
 801993a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	613b      	str	r3, [r7, #16]
        break;
 8019940:	e01e      	b.n	8019980 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8019942:	8c39      	ldrh	r1, [r7, #32]
 8019944:	7bba      	ldrb	r2, [r7, #14]
 8019946:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801994a:	9302      	str	r3, [sp, #8]
 801994c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019950:	9301      	str	r3, [sp, #4]
 8019952:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019956:	9300      	str	r3, [sp, #0]
 8019958:	460b      	mov	r3, r1
 801995a:	6879      	ldr	r1, [r7, #4]
 801995c:	68b8      	ldr	r0, [r7, #8]
 801995e:	f7ff ff43 	bl	80197e8 <RadioGetLoRaTimeOnAirNumerator>
 8019962:	4603      	mov	r3, r0
 8019964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019968:	fb02 f303 	mul.w	r3, r2, r3
 801996c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801996e:	4a0a      	ldr	r2, [pc, #40]	; (8019998 <RadioTimeOnAir+0xac>)
 8019970:	68bb      	ldr	r3, [r7, #8]
 8019972:	4413      	add	r3, r2
 8019974:	781b      	ldrb	r3, [r3, #0]
 8019976:	4618      	mov	r0, r3
 8019978:	f7ff feb6 	bl	80196e8 <RadioGetLoRaBandwidthInHz>
 801997c:	6138      	str	r0, [r7, #16]
        break;
 801997e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8019980:	697a      	ldr	r2, [r7, #20]
 8019982:	693b      	ldr	r3, [r7, #16]
 8019984:	4413      	add	r3, r2
 8019986:	1e5a      	subs	r2, r3, #1
 8019988:	693b      	ldr	r3, [r7, #16]
 801998a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801998e:	4618      	mov	r0, r3
 8019990:	3718      	adds	r7, #24
 8019992:	46bd      	mov	sp, r7
 8019994:	bd80      	pop	{r7, pc}
 8019996:	bf00      	nop
 8019998:	0801e94c 	.word	0x0801e94c

0801999c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801999c:	b580      	push	{r7, lr}
 801999e:	b084      	sub	sp, #16
 80199a0:	af00      	add	r7, sp, #0
 80199a2:	6078      	str	r0, [r7, #4]
 80199a4:	460b      	mov	r3, r1
 80199a6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80199a8:	2300      	movs	r3, #0
 80199aa:	2200      	movs	r2, #0
 80199ac:	f240 2101 	movw	r1, #513	; 0x201
 80199b0:	f240 2001 	movw	r0, #513	; 0x201
 80199b4:	f001 fd66 	bl	801b484 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80199b8:	4b73      	ldr	r3, [pc, #460]	; (8019b88 <RadioSend+0x1ec>)
 80199ba:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80199be:	2101      	movs	r1, #1
 80199c0:	4618      	mov	r0, r3
 80199c2:	f002 fa03 	bl	801bdcc <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80199c6:	4b70      	ldr	r3, [pc, #448]	; (8019b88 <RadioSend+0x1ec>)
 80199c8:	781b      	ldrb	r3, [r3, #0]
 80199ca:	2b01      	cmp	r3, #1
 80199cc:	d112      	bne.n	80199f4 <RadioSend+0x58>
 80199ce:	4b6e      	ldr	r3, [pc, #440]	; (8019b88 <RadioSend+0x1ec>)
 80199d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80199d4:	2b06      	cmp	r3, #6
 80199d6:	d10d      	bne.n	80199f4 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80199d8:	f640 0089 	movw	r0, #2185	; 0x889
 80199dc:	f002 f916 	bl	801bc0c <SUBGRF_ReadRegister>
 80199e0:	4603      	mov	r3, r0
 80199e2:	f023 0304 	bic.w	r3, r3, #4
 80199e6:	b2db      	uxtb	r3, r3
 80199e8:	4619      	mov	r1, r3
 80199ea:	f640 0089 	movw	r0, #2185	; 0x889
 80199ee:	f002 f8f9 	bl	801bbe4 <SUBGRF_WriteRegister>
 80199f2:	e00c      	b.n	8019a0e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80199f4:	f640 0089 	movw	r0, #2185	; 0x889
 80199f8:	f002 f908 	bl	801bc0c <SUBGRF_ReadRegister>
 80199fc:	4603      	mov	r3, r0
 80199fe:	f043 0304 	orr.w	r3, r3, #4
 8019a02:	b2db      	uxtb	r3, r3
 8019a04:	4619      	mov	r1, r3
 8019a06:	f640 0089 	movw	r0, #2185	; 0x889
 8019a0a:	f002 f8eb 	bl	801bbe4 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8019a0e:	4b5e      	ldr	r3, [pc, #376]	; (8019b88 <RadioSend+0x1ec>)
 8019a10:	781b      	ldrb	r3, [r3, #0]
 8019a12:	2b04      	cmp	r3, #4
 8019a14:	f200 80a8 	bhi.w	8019b68 <RadioSend+0x1cc>
 8019a18:	a201      	add	r2, pc, #4	; (adr r2, 8019a20 <RadioSend+0x84>)
 8019a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a1e:	bf00      	nop
 8019a20:	08019a4f 	.word	0x08019a4f
 8019a24:	08019a35 	.word	0x08019a35
 8019a28:	08019a4f 	.word	0x08019a4f
 8019a2c:	08019ab1 	.word	0x08019ab1
 8019a30:	08019ad1 	.word	0x08019ad1
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8019a34:	4a54      	ldr	r2, [pc, #336]	; (8019b88 <RadioSend+0x1ec>)
 8019a36:	78fb      	ldrb	r3, [r7, #3]
 8019a38:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019a3a:	4854      	ldr	r0, [pc, #336]	; (8019b8c <RadioSend+0x1f0>)
 8019a3c:	f001 ff8a 	bl	801b954 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019a40:	78fb      	ldrb	r3, [r7, #3]
 8019a42:	2200      	movs	r2, #0
 8019a44:	4619      	mov	r1, r3
 8019a46:	6878      	ldr	r0, [r7, #4]
 8019a48:	f001 fa3a 	bl	801aec0 <SUBGRF_SendPayload>
            break;
 8019a4c:	e08d      	b.n	8019b6a <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019a4e:	f002 fbb6 	bl	801c1be <RFW_Is_Init>
 8019a52:	4603      	mov	r3, r0
 8019a54:	2b01      	cmp	r3, #1
 8019a56:	d11e      	bne.n	8019a96 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8019a58:	f107 020d 	add.w	r2, r7, #13
 8019a5c:	78fb      	ldrb	r3, [r7, #3]
 8019a5e:	4619      	mov	r1, r3
 8019a60:	6878      	ldr	r0, [r7, #4]
 8019a62:	f002 fbc4 	bl	801c1ee <RFW_TransmitInit>
 8019a66:	4603      	mov	r3, r0
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d10c      	bne.n	8019a86 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8019a6c:	7b7a      	ldrb	r2, [r7, #13]
 8019a6e:	4b46      	ldr	r3, [pc, #280]	; (8019b88 <RadioSend+0x1ec>)
 8019a70:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019a72:	4846      	ldr	r0, [pc, #280]	; (8019b8c <RadioSend+0x1f0>)
 8019a74:	f001 ff6e 	bl	801b954 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8019a78:	7b7b      	ldrb	r3, [r7, #13]
 8019a7a:	2200      	movs	r2, #0
 8019a7c:	4619      	mov	r1, r3
 8019a7e:	6878      	ldr	r0, [r7, #4]
 8019a80:	f001 fa1e 	bl	801aec0 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8019a84:	e071      	b.n	8019b6a <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8019a86:	4b42      	ldr	r3, [pc, #264]	; (8019b90 <RadioSend+0x1f4>)
 8019a88:	2201      	movs	r2, #1
 8019a8a:	2100      	movs	r1, #0
 8019a8c:	2002      	movs	r0, #2
 8019a8e:	f003 fccf 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8019a92:	2303      	movs	r3, #3
 8019a94:	e073      	b.n	8019b7e <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8019a96:	4a3c      	ldr	r2, [pc, #240]	; (8019b88 <RadioSend+0x1ec>)
 8019a98:	78fb      	ldrb	r3, [r7, #3]
 8019a9a:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019a9c:	483b      	ldr	r0, [pc, #236]	; (8019b8c <RadioSend+0x1f0>)
 8019a9e:	f001 ff59 	bl	801b954 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8019aa2:	78fb      	ldrb	r3, [r7, #3]
 8019aa4:	2200      	movs	r2, #0
 8019aa6:	4619      	mov	r1, r3
 8019aa8:	6878      	ldr	r0, [r7, #4]
 8019aaa:	f001 fa09 	bl	801aec0 <SUBGRF_SendPayload>
            break;
 8019aae:	e05c      	b.n	8019b6a <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019ab0:	4b35      	ldr	r3, [pc, #212]	; (8019b88 <RadioSend+0x1ec>)
 8019ab2:	2202      	movs	r2, #2
 8019ab4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8019ab6:	4a34      	ldr	r2, [pc, #208]	; (8019b88 <RadioSend+0x1ec>)
 8019ab8:	78fb      	ldrb	r3, [r7, #3]
 8019aba:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019abc:	4833      	ldr	r0, [pc, #204]	; (8019b8c <RadioSend+0x1f0>)
 8019abe:	f001 ff49 	bl	801b954 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019ac2:	78fb      	ldrb	r3, [r7, #3]
 8019ac4:	2200      	movs	r2, #0
 8019ac6:	4619      	mov	r1, r3
 8019ac8:	6878      	ldr	r0, [r7, #4]
 8019aca:	f001 f9f9 	bl	801aec0 <SUBGRF_SendPayload>
            break;
 8019ace:	e04c      	b.n	8019b6a <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8019ad0:	78fb      	ldrb	r3, [r7, #3]
 8019ad2:	461a      	mov	r2, r3
 8019ad4:	6879      	ldr	r1, [r7, #4]
 8019ad6:	482f      	ldr	r0, [pc, #188]	; (8019b94 <RadioSend+0x1f8>)
 8019ad8:	f000 fccc 	bl	801a474 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019adc:	4b2a      	ldr	r3, [pc, #168]	; (8019b88 <RadioSend+0x1ec>)
 8019ade:	2202      	movs	r2, #2
 8019ae0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8019ae2:	78fb      	ldrb	r3, [r7, #3]
 8019ae4:	3301      	adds	r3, #1
 8019ae6:	b2da      	uxtb	r2, r3
 8019ae8:	4b27      	ldr	r3, [pc, #156]	; (8019b88 <RadioSend+0x1ec>)
 8019aea:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019aec:	4827      	ldr	r0, [pc, #156]	; (8019b8c <RadioSend+0x1f0>)
 8019aee:	f001 ff31 	bl	801b954 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8019af2:	2100      	movs	r1, #0
 8019af4:	20f1      	movs	r0, #241	; 0xf1
 8019af6:	f000 f966 	bl	8019dc6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8019afa:	2100      	movs	r1, #0
 8019afc:	20f0      	movs	r0, #240	; 0xf0
 8019afe:	f000 f962 	bl	8019dc6 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8019b02:	4b21      	ldr	r3, [pc, #132]	; (8019b88 <RadioSend+0x1ec>)
 8019b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019b06:	2b64      	cmp	r3, #100	; 0x64
 8019b08:	d108      	bne.n	8019b1c <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8019b0a:	2170      	movs	r1, #112	; 0x70
 8019b0c:	20f3      	movs	r0, #243	; 0xf3
 8019b0e:	f000 f95a 	bl	8019dc6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8019b12:	211d      	movs	r1, #29
 8019b14:	20f2      	movs	r0, #242	; 0xf2
 8019b16:	f000 f956 	bl	8019dc6 <RadioWrite>
 8019b1a:	e007      	b.n	8019b2c <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8019b1c:	21e1      	movs	r1, #225	; 0xe1
 8019b1e:	20f3      	movs	r0, #243	; 0xf3
 8019b20:	f000 f951 	bl	8019dc6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8019b24:	2104      	movs	r1, #4
 8019b26:	20f2      	movs	r0, #242	; 0xf2
 8019b28:	f000 f94d 	bl	8019dc6 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019b2c:	78fb      	ldrb	r3, [r7, #3]
 8019b2e:	b29b      	uxth	r3, r3
 8019b30:	00db      	lsls	r3, r3, #3
 8019b32:	b29b      	uxth	r3, r3
 8019b34:	3302      	adds	r3, #2
 8019b36:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8019b38:	89fb      	ldrh	r3, [r7, #14]
 8019b3a:	0a1b      	lsrs	r3, r3, #8
 8019b3c:	b29b      	uxth	r3, r3
 8019b3e:	b2db      	uxtb	r3, r3
 8019b40:	4619      	mov	r1, r3
 8019b42:	20f4      	movs	r0, #244	; 0xf4
 8019b44:	f000 f93f 	bl	8019dc6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8019b48:	89fb      	ldrh	r3, [r7, #14]
 8019b4a:	b2db      	uxtb	r3, r3
 8019b4c:	4619      	mov	r1, r3
 8019b4e:	20f5      	movs	r0, #245	; 0xf5
 8019b50:	f000 f939 	bl	8019dc6 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8019b54:	78fb      	ldrb	r3, [r7, #3]
 8019b56:	3301      	adds	r3, #1
 8019b58:	b2db      	uxtb	r3, r3
 8019b5a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8019b5e:	4619      	mov	r1, r3
 8019b60:	480c      	ldr	r0, [pc, #48]	; (8019b94 <RadioSend+0x1f8>)
 8019b62:	f001 f9ad 	bl	801aec0 <SUBGRF_SendPayload>
            break;
 8019b66:	e000      	b.n	8019b6a <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019b68:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8019b6a:	4b07      	ldr	r3, [pc, #28]	; (8019b88 <RadioSend+0x1ec>)
 8019b6c:	685b      	ldr	r3, [r3, #4]
 8019b6e:	4619      	mov	r1, r3
 8019b70:	4809      	ldr	r0, [pc, #36]	; (8019b98 <RadioSend+0x1fc>)
 8019b72:	f003 fac3 	bl	801d0fc <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8019b76:	4808      	ldr	r0, [pc, #32]	; (8019b98 <RadioSend+0x1fc>)
 8019b78:	f003 f9e2 	bl	801cf40 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8019b7c:	2300      	movs	r3, #0
}
 8019b7e:	4618      	mov	r0, r3
 8019b80:	3710      	adds	r7, #16
 8019b82:	46bd      	mov	sp, r7
 8019b84:	bd80      	pop	{r7, pc}
 8019b86:	bf00      	nop
 8019b88:	2000180c 	.word	0x2000180c
 8019b8c:	2000181a 	.word	0x2000181a
 8019b90:	0801e2ec 	.word	0x0801e2ec
 8019b94:	20001708 	.word	0x20001708
 8019b98:	20001868 	.word	0x20001868

08019b9c <RadioSleep>:

static void RadioSleep( void )
{
 8019b9c:	b580      	push	{r7, lr}
 8019b9e:	b082      	sub	sp, #8
 8019ba0:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8019ba2:	2300      	movs	r3, #0
 8019ba4:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8019ba6:	793b      	ldrb	r3, [r7, #4]
 8019ba8:	f043 0304 	orr.w	r3, r3, #4
 8019bac:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8019bae:	7938      	ldrb	r0, [r7, #4]
 8019bb0:	f001 fa62 	bl	801b078 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8019bb4:	2002      	movs	r0, #2
 8019bb6:	f7e8 fe31 	bl	800281c <HAL_Delay>
}
 8019bba:	bf00      	nop
 8019bbc:	3708      	adds	r7, #8
 8019bbe:	46bd      	mov	sp, r7
 8019bc0:	bd80      	pop	{r7, pc}

08019bc2 <RadioStandby>:

static void RadioStandby( void )
{
 8019bc2:	b580      	push	{r7, lr}
 8019bc4:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8019bc6:	2000      	movs	r0, #0
 8019bc8:	f001 fa88 	bl	801b0dc <SUBGRF_SetStandby>
}
 8019bcc:	bf00      	nop
 8019bce:	bd80      	pop	{r7, pc}

08019bd0 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8019bd0:	b580      	push	{r7, lr}
 8019bd2:	b082      	sub	sp, #8
 8019bd4:	af00      	add	r7, sp, #0
 8019bd6:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8019bd8:	f002 faf1 	bl	801c1be <RFW_Is_Init>
 8019bdc:	4603      	mov	r3, r0
 8019bde:	2b01      	cmp	r3, #1
 8019be0:	d102      	bne.n	8019be8 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8019be2:	f002 fb14 	bl	801c20e <RFW_ReceiveInit>
 8019be6:	e007      	b.n	8019bf8 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019be8:	2300      	movs	r3, #0
 8019bea:	2200      	movs	r2, #0
 8019bec:	f240 2162 	movw	r1, #610	; 0x262
 8019bf0:	f240 2062 	movw	r0, #610	; 0x262
 8019bf4:	f001 fc46 	bl	801b484 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d006      	beq.n	8019c0c <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019bfe:	6879      	ldr	r1, [r7, #4]
 8019c00:	4811      	ldr	r0, [pc, #68]	; (8019c48 <RadioRx+0x78>)
 8019c02:	f003 fa7b 	bl	801d0fc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019c06:	4810      	ldr	r0, [pc, #64]	; (8019c48 <RadioRx+0x78>)
 8019c08:	f003 f99a 	bl	801cf40 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019c0c:	4b0f      	ldr	r3, [pc, #60]	; (8019c4c <RadioRx+0x7c>)
 8019c0e:	2200      	movs	r2, #0
 8019c10:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019c12:	4b0e      	ldr	r3, [pc, #56]	; (8019c4c <RadioRx+0x7c>)
 8019c14:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019c18:	2100      	movs	r1, #0
 8019c1a:	4618      	mov	r0, r3
 8019c1c:	f002 f8d6 	bl	801bdcc <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019c20:	4b0a      	ldr	r3, [pc, #40]	; (8019c4c <RadioRx+0x7c>)
 8019c22:	785b      	ldrb	r3, [r3, #1]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d004      	beq.n	8019c32 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019c28:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019c2c:	f001 fa92 	bl	801b154 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019c30:	e005      	b.n	8019c3e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8019c32:	4b06      	ldr	r3, [pc, #24]	; (8019c4c <RadioRx+0x7c>)
 8019c34:	689b      	ldr	r3, [r3, #8]
 8019c36:	019b      	lsls	r3, r3, #6
 8019c38:	4618      	mov	r0, r3
 8019c3a:	f001 fa8b 	bl	801b154 <SUBGRF_SetRx>
}
 8019c3e:	bf00      	nop
 8019c40:	3708      	adds	r7, #8
 8019c42:	46bd      	mov	sp, r7
 8019c44:	bd80      	pop	{r7, pc}
 8019c46:	bf00      	nop
 8019c48:	20001880 	.word	0x20001880
 8019c4c:	2000180c 	.word	0x2000180c

08019c50 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019c50:	b580      	push	{r7, lr}
 8019c52:	b082      	sub	sp, #8
 8019c54:	af00      	add	r7, sp, #0
 8019c56:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8019c58:	f002 fab1 	bl	801c1be <RFW_Is_Init>
 8019c5c:	4603      	mov	r3, r0
 8019c5e:	2b01      	cmp	r3, #1
 8019c60:	d102      	bne.n	8019c68 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8019c62:	f002 fad4 	bl	801c20e <RFW_ReceiveInit>
 8019c66:	e007      	b.n	8019c78 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019c68:	2300      	movs	r3, #0
 8019c6a:	2200      	movs	r2, #0
 8019c6c:	f240 2162 	movw	r1, #610	; 0x262
 8019c70:	f240 2062 	movw	r0, #610	; 0x262
 8019c74:	f001 fc06 	bl	801b484 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d006      	beq.n	8019c8c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019c7e:	6879      	ldr	r1, [r7, #4]
 8019c80:	4811      	ldr	r0, [pc, #68]	; (8019cc8 <RadioRxBoosted+0x78>)
 8019c82:	f003 fa3b 	bl	801d0fc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019c86:	4810      	ldr	r0, [pc, #64]	; (8019cc8 <RadioRxBoosted+0x78>)
 8019c88:	f003 f95a 	bl	801cf40 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019c8c:	4b0f      	ldr	r3, [pc, #60]	; (8019ccc <RadioRxBoosted+0x7c>)
 8019c8e:	2200      	movs	r2, #0
 8019c90:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019c92:	4b0e      	ldr	r3, [pc, #56]	; (8019ccc <RadioRxBoosted+0x7c>)
 8019c94:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019c98:	2100      	movs	r1, #0
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	f002 f896 	bl	801bdcc <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019ca0:	4b0a      	ldr	r3, [pc, #40]	; (8019ccc <RadioRxBoosted+0x7c>)
 8019ca2:	785b      	ldrb	r3, [r3, #1]
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d004      	beq.n	8019cb2 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8019ca8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019cac:	f001 fa72 	bl	801b194 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8019cb0:	e005      	b.n	8019cbe <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8019cb2:	4b06      	ldr	r3, [pc, #24]	; (8019ccc <RadioRxBoosted+0x7c>)
 8019cb4:	689b      	ldr	r3, [r3, #8]
 8019cb6:	019b      	lsls	r3, r3, #6
 8019cb8:	4618      	mov	r0, r3
 8019cba:	f001 fa6b 	bl	801b194 <SUBGRF_SetRxBoosted>
}
 8019cbe:	bf00      	nop
 8019cc0:	3708      	adds	r7, #8
 8019cc2:	46bd      	mov	sp, r7
 8019cc4:	bd80      	pop	{r7, pc}
 8019cc6:	bf00      	nop
 8019cc8:	20001880 	.word	0x20001880
 8019ccc:	2000180c 	.word	0x2000180c

08019cd0 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019cd0:	b580      	push	{r7, lr}
 8019cd2:	b082      	sub	sp, #8
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	6078      	str	r0, [r7, #4]
 8019cd8:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	005a      	lsls	r2, r3, #1
 8019cde:	683b      	ldr	r3, [r7, #0]
 8019ce0:	4413      	add	r3, r2
 8019ce2:	4a0c      	ldr	r2, [pc, #48]	; (8019d14 <RadioSetRxDutyCycle+0x44>)
 8019ce4:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019ce6:	2300      	movs	r3, #0
 8019ce8:	2200      	movs	r2, #0
 8019cea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019cee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019cf2:	f001 fbc7 	bl	801b484 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019cf6:	4b07      	ldr	r3, [pc, #28]	; (8019d14 <RadioSetRxDutyCycle+0x44>)
 8019cf8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019cfc:	2100      	movs	r1, #0
 8019cfe:	4618      	mov	r0, r3
 8019d00:	f002 f864 	bl	801bdcc <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8019d04:	6839      	ldr	r1, [r7, #0]
 8019d06:	6878      	ldr	r0, [r7, #4]
 8019d08:	f001 fa68 	bl	801b1dc <SUBGRF_SetRxDutyCycle>
}
 8019d0c:	bf00      	nop
 8019d0e:	3708      	adds	r7, #8
 8019d10:	46bd      	mov	sp, r7
 8019d12:	bd80      	pop	{r7, pc}
 8019d14:	2000180c 	.word	0x2000180c

08019d18 <RadioStartCad>:

static void RadioStartCad( void )
{
 8019d18:	b580      	push	{r7, lr}
 8019d1a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019d1c:	4b09      	ldr	r3, [pc, #36]	; (8019d44 <RadioStartCad+0x2c>)
 8019d1e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019d22:	2100      	movs	r1, #0
 8019d24:	4618      	mov	r0, r3
 8019d26:	f002 f851 	bl	801bdcc <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	2200      	movs	r2, #0
 8019d2e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8019d32:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8019d36:	f001 fba5 	bl	801b484 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8019d3a:	f001 fa7b 	bl	801b234 <SUBGRF_SetCad>
}
 8019d3e:	bf00      	nop
 8019d40:	bd80      	pop	{r7, pc}
 8019d42:	bf00      	nop
 8019d44:	2000180c 	.word	0x2000180c

08019d48 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	b084      	sub	sp, #16
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	6078      	str	r0, [r7, #4]
 8019d50:	460b      	mov	r3, r1
 8019d52:	70fb      	strb	r3, [r7, #3]
 8019d54:	4613      	mov	r3, r2
 8019d56:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8019d58:	883b      	ldrh	r3, [r7, #0]
 8019d5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019d5e:	fb02 f303 	mul.w	r3, r2, r3
 8019d62:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8019d64:	6878      	ldr	r0, [r7, #4]
 8019d66:	f001 fbe9 	bl	801b53c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8019d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019d6e:	4618      	mov	r0, r3
 8019d70:	f002 f854 	bl	801be1c <SUBGRF_SetRfTxPower>
 8019d74:	4603      	mov	r3, r0
 8019d76:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019d78:	210e      	movs	r1, #14
 8019d7a:	f640 101f 	movw	r0, #2335	; 0x91f
 8019d7e:	f001 ff31 	bl	801bbe4 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8019d82:	7afb      	ldrb	r3, [r7, #11]
 8019d84:	2101      	movs	r1, #1
 8019d86:	4618      	mov	r0, r3
 8019d88:	f002 f820 	bl	801bdcc <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8019d8c:	f001 fa60 	bl	801b250 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8019d90:	68f9      	ldr	r1, [r7, #12]
 8019d92:	4805      	ldr	r0, [pc, #20]	; (8019da8 <RadioSetTxContinuousWave+0x60>)
 8019d94:	f003 f9b2 	bl	801d0fc <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019d98:	4803      	ldr	r0, [pc, #12]	; (8019da8 <RadioSetTxContinuousWave+0x60>)
 8019d9a:	f003 f8d1 	bl	801cf40 <UTIL_TIMER_Start>
}
 8019d9e:	bf00      	nop
 8019da0:	3710      	adds	r7, #16
 8019da2:	46bd      	mov	sp, r7
 8019da4:	bd80      	pop	{r7, pc}
 8019da6:	bf00      	nop
 8019da8:	20001868 	.word	0x20001868

08019dac <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8019dac:	b580      	push	{r7, lr}
 8019dae:	b082      	sub	sp, #8
 8019db0:	af00      	add	r7, sp, #0
 8019db2:	4603      	mov	r3, r0
 8019db4:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8019db6:	f001 fe82 	bl	801babe <SUBGRF_GetRssiInst>
 8019dba:	4603      	mov	r3, r0
 8019dbc:	b21b      	sxth	r3, r3
}
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	3708      	adds	r7, #8
 8019dc2:	46bd      	mov	sp, r7
 8019dc4:	bd80      	pop	{r7, pc}

08019dc6 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8019dc6:	b580      	push	{r7, lr}
 8019dc8:	b082      	sub	sp, #8
 8019dca:	af00      	add	r7, sp, #0
 8019dcc:	4603      	mov	r3, r0
 8019dce:	460a      	mov	r2, r1
 8019dd0:	80fb      	strh	r3, [r7, #6]
 8019dd2:	4613      	mov	r3, r2
 8019dd4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8019dd6:	797a      	ldrb	r2, [r7, #5]
 8019dd8:	88fb      	ldrh	r3, [r7, #6]
 8019dda:	4611      	mov	r1, r2
 8019ddc:	4618      	mov	r0, r3
 8019dde:	f001 ff01 	bl	801bbe4 <SUBGRF_WriteRegister>
}
 8019de2:	bf00      	nop
 8019de4:	3708      	adds	r7, #8
 8019de6:	46bd      	mov	sp, r7
 8019de8:	bd80      	pop	{r7, pc}

08019dea <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8019dea:	b580      	push	{r7, lr}
 8019dec:	b082      	sub	sp, #8
 8019dee:	af00      	add	r7, sp, #0
 8019df0:	4603      	mov	r3, r0
 8019df2:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8019df4:	88fb      	ldrh	r3, [r7, #6]
 8019df6:	4618      	mov	r0, r3
 8019df8:	f001 ff08 	bl	801bc0c <SUBGRF_ReadRegister>
 8019dfc:	4603      	mov	r3, r0
}
 8019dfe:	4618      	mov	r0, r3
 8019e00:	3708      	adds	r7, #8
 8019e02:	46bd      	mov	sp, r7
 8019e04:	bd80      	pop	{r7, pc}

08019e06 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019e06:	b580      	push	{r7, lr}
 8019e08:	b082      	sub	sp, #8
 8019e0a:	af00      	add	r7, sp, #0
 8019e0c:	4603      	mov	r3, r0
 8019e0e:	6039      	str	r1, [r7, #0]
 8019e10:	80fb      	strh	r3, [r7, #6]
 8019e12:	4613      	mov	r3, r2
 8019e14:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8019e16:	797b      	ldrb	r3, [r7, #5]
 8019e18:	b29a      	uxth	r2, r3
 8019e1a:	88fb      	ldrh	r3, [r7, #6]
 8019e1c:	6839      	ldr	r1, [r7, #0]
 8019e1e:	4618      	mov	r0, r3
 8019e20:	f001 ff08 	bl	801bc34 <SUBGRF_WriteRegisters>
}
 8019e24:	bf00      	nop
 8019e26:	3708      	adds	r7, #8
 8019e28:	46bd      	mov	sp, r7
 8019e2a:	bd80      	pop	{r7, pc}

08019e2c <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019e2c:	b580      	push	{r7, lr}
 8019e2e:	b082      	sub	sp, #8
 8019e30:	af00      	add	r7, sp, #0
 8019e32:	4603      	mov	r3, r0
 8019e34:	6039      	str	r1, [r7, #0]
 8019e36:	80fb      	strh	r3, [r7, #6]
 8019e38:	4613      	mov	r3, r2
 8019e3a:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8019e3c:	797b      	ldrb	r3, [r7, #5]
 8019e3e:	b29a      	uxth	r2, r3
 8019e40:	88fb      	ldrh	r3, [r7, #6]
 8019e42:	6839      	ldr	r1, [r7, #0]
 8019e44:	4618      	mov	r0, r3
 8019e46:	f001 ff17 	bl	801bc78 <SUBGRF_ReadRegisters>
}
 8019e4a:	bf00      	nop
 8019e4c:	3708      	adds	r7, #8
 8019e4e:	46bd      	mov	sp, r7
 8019e50:	bd80      	pop	{r7, pc}
	...

08019e54 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8019e54:	b580      	push	{r7, lr}
 8019e56:	b082      	sub	sp, #8
 8019e58:	af00      	add	r7, sp, #0
 8019e5a:	4603      	mov	r3, r0
 8019e5c:	460a      	mov	r2, r1
 8019e5e:	71fb      	strb	r3, [r7, #7]
 8019e60:	4613      	mov	r3, r2
 8019e62:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8019e64:	79fb      	ldrb	r3, [r7, #7]
 8019e66:	2b01      	cmp	r3, #1
 8019e68:	d10a      	bne.n	8019e80 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8019e6a:	4a0e      	ldr	r2, [pc, #56]	; (8019ea4 <RadioSetMaxPayloadLength+0x50>)
 8019e6c:	79bb      	ldrb	r3, [r7, #6]
 8019e6e:	7013      	strb	r3, [r2, #0]
 8019e70:	4b0c      	ldr	r3, [pc, #48]	; (8019ea4 <RadioSetMaxPayloadLength+0x50>)
 8019e72:	781a      	ldrb	r2, [r3, #0]
 8019e74:	4b0c      	ldr	r3, [pc, #48]	; (8019ea8 <RadioSetMaxPayloadLength+0x54>)
 8019e76:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019e78:	480c      	ldr	r0, [pc, #48]	; (8019eac <RadioSetMaxPayloadLength+0x58>)
 8019e7a:	f001 fd6b 	bl	801b954 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8019e7e:	e00d      	b.n	8019e9c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8019e80:	4b09      	ldr	r3, [pc, #36]	; (8019ea8 <RadioSetMaxPayloadLength+0x54>)
 8019e82:	7d5b      	ldrb	r3, [r3, #21]
 8019e84:	2b01      	cmp	r3, #1
 8019e86:	d109      	bne.n	8019e9c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8019e88:	4a06      	ldr	r2, [pc, #24]	; (8019ea4 <RadioSetMaxPayloadLength+0x50>)
 8019e8a:	79bb      	ldrb	r3, [r7, #6]
 8019e8c:	7013      	strb	r3, [r2, #0]
 8019e8e:	4b05      	ldr	r3, [pc, #20]	; (8019ea4 <RadioSetMaxPayloadLength+0x50>)
 8019e90:	781a      	ldrb	r2, [r3, #0]
 8019e92:	4b05      	ldr	r3, [pc, #20]	; (8019ea8 <RadioSetMaxPayloadLength+0x54>)
 8019e94:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019e96:	4805      	ldr	r0, [pc, #20]	; (8019eac <RadioSetMaxPayloadLength+0x58>)
 8019e98:	f001 fd5c 	bl	801b954 <SUBGRF_SetPacketParams>
}
 8019e9c:	bf00      	nop
 8019e9e:	3708      	adds	r7, #8
 8019ea0:	46bd      	mov	sp, r7
 8019ea2:	bd80      	pop	{r7, pc}
 8019ea4:	2000014c 	.word	0x2000014c
 8019ea8:	2000180c 	.word	0x2000180c
 8019eac:	2000181a 	.word	0x2000181a

08019eb0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8019eb0:	b580      	push	{r7, lr}
 8019eb2:	b082      	sub	sp, #8
 8019eb4:	af00      	add	r7, sp, #0
 8019eb6:	4603      	mov	r3, r0
 8019eb8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8019eba:	4a13      	ldr	r2, [pc, #76]	; (8019f08 <RadioSetPublicNetwork+0x58>)
 8019ebc:	79fb      	ldrb	r3, [r7, #7]
 8019ebe:	7313      	strb	r3, [r2, #12]
 8019ec0:	4b11      	ldr	r3, [pc, #68]	; (8019f08 <RadioSetPublicNetwork+0x58>)
 8019ec2:	7b1a      	ldrb	r2, [r3, #12]
 8019ec4:	4b10      	ldr	r3, [pc, #64]	; (8019f08 <RadioSetPublicNetwork+0x58>)
 8019ec6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8019ec8:	2001      	movs	r0, #1
 8019eca:	f7ff f811 	bl	8018ef0 <RadioSetModem>
    if( enable == true )
 8019ece:	79fb      	ldrb	r3, [r7, #7]
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d00a      	beq.n	8019eea <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8019ed4:	2134      	movs	r1, #52	; 0x34
 8019ed6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8019eda:	f001 fe83 	bl	801bbe4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8019ede:	2144      	movs	r1, #68	; 0x44
 8019ee0:	f240 7041 	movw	r0, #1857	; 0x741
 8019ee4:	f001 fe7e 	bl	801bbe4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8019ee8:	e009      	b.n	8019efe <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8019eea:	2114      	movs	r1, #20
 8019eec:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8019ef0:	f001 fe78 	bl	801bbe4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8019ef4:	2124      	movs	r1, #36	; 0x24
 8019ef6:	f240 7041 	movw	r0, #1857	; 0x741
 8019efa:	f001 fe73 	bl	801bbe4 <SUBGRF_WriteRegister>
}
 8019efe:	bf00      	nop
 8019f00:	3708      	adds	r7, #8
 8019f02:	46bd      	mov	sp, r7
 8019f04:	bd80      	pop	{r7, pc}
 8019f06:	bf00      	nop
 8019f08:	2000180c 	.word	0x2000180c

08019f0c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8019f0c:	b580      	push	{r7, lr}
 8019f0e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8019f10:	f001 ffb8 	bl	801be84 <SUBGRF_GetRadioWakeUpTime>
 8019f14:	4603      	mov	r3, r0
 8019f16:	3303      	adds	r3, #3
}
 8019f18:	4618      	mov	r0, r3
 8019f1a:	bd80      	pop	{r7, pc}

08019f1c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8019f1c:	b580      	push	{r7, lr}
 8019f1e:	b082      	sub	sp, #8
 8019f20:	af00      	add	r7, sp, #0
 8019f22:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8019f24:	f000 f80e 	bl	8019f44 <RadioOnTxTimeoutProcess>
}
 8019f28:	bf00      	nop
 8019f2a:	3708      	adds	r7, #8
 8019f2c:	46bd      	mov	sp, r7
 8019f2e:	bd80      	pop	{r7, pc}

08019f30 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8019f30:	b580      	push	{r7, lr}
 8019f32:	b082      	sub	sp, #8
 8019f34:	af00      	add	r7, sp, #0
 8019f36:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8019f38:	f000 f818 	bl	8019f6c <RadioOnRxTimeoutProcess>
}
 8019f3c:	bf00      	nop
 8019f3e:	3708      	adds	r7, #8
 8019f40:	46bd      	mov	sp, r7
 8019f42:	bd80      	pop	{r7, pc}

08019f44 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8019f44:	b580      	push	{r7, lr}
 8019f46:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019f48:	4b07      	ldr	r3, [pc, #28]	; (8019f68 <RadioOnTxTimeoutProcess+0x24>)
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d008      	beq.n	8019f62 <RadioOnTxTimeoutProcess+0x1e>
 8019f50:	4b05      	ldr	r3, [pc, #20]	; (8019f68 <RadioOnTxTimeoutProcess+0x24>)
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	685b      	ldr	r3, [r3, #4]
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	d003      	beq.n	8019f62 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8019f5a:	4b03      	ldr	r3, [pc, #12]	; (8019f68 <RadioOnTxTimeoutProcess+0x24>)
 8019f5c:	681b      	ldr	r3, [r3, #0]
 8019f5e:	685b      	ldr	r3, [r3, #4]
 8019f60:	4798      	blx	r3
    }
}
 8019f62:	bf00      	nop
 8019f64:	bd80      	pop	{r7, pc}
 8019f66:	bf00      	nop
 8019f68:	20001808 	.word	0x20001808

08019f6c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8019f6c:	b580      	push	{r7, lr}
 8019f6e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019f70:	4b07      	ldr	r3, [pc, #28]	; (8019f90 <RadioOnRxTimeoutProcess+0x24>)
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d008      	beq.n	8019f8a <RadioOnRxTimeoutProcess+0x1e>
 8019f78:	4b05      	ldr	r3, [pc, #20]	; (8019f90 <RadioOnRxTimeoutProcess+0x24>)
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	68db      	ldr	r3, [r3, #12]
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d003      	beq.n	8019f8a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8019f82:	4b03      	ldr	r3, [pc, #12]	; (8019f90 <RadioOnRxTimeoutProcess+0x24>)
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	68db      	ldr	r3, [r3, #12]
 8019f88:	4798      	blx	r3
    }
}
 8019f8a:	bf00      	nop
 8019f8c:	bd80      	pop	{r7, pc}
 8019f8e:	bf00      	nop
 8019f90:	20001808 	.word	0x20001808

08019f94 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8019f94:	b580      	push	{r7, lr}
 8019f96:	b082      	sub	sp, #8
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	4603      	mov	r3, r0
 8019f9c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8019f9e:	4a05      	ldr	r2, [pc, #20]	; (8019fb4 <RadioOnDioIrq+0x20>)
 8019fa0:	88fb      	ldrh	r3, [r7, #6]
 8019fa2:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8019fa6:	f000 f807 	bl	8019fb8 <RadioIrqProcess>
}
 8019faa:	bf00      	nop
 8019fac:	3708      	adds	r7, #8
 8019fae:	46bd      	mov	sp, r7
 8019fb0:	bd80      	pop	{r7, pc}
 8019fb2:	bf00      	nop
 8019fb4:	2000180c 	.word	0x2000180c

08019fb8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8019fb8:	b5b0      	push	{r4, r5, r7, lr}
 8019fba:	b082      	sub	sp, #8
 8019fbc:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8019fbe:	2300      	movs	r3, #0
 8019fc0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8019fc2:	2300      	movs	r3, #0
 8019fc4:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8019fc6:	4ba8      	ldr	r3, [pc, #672]	; (801a268 <RadioIrqProcess+0x2b0>)
 8019fc8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8019fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019fd0:	f000 810d 	beq.w	801a1ee <RadioIrqProcess+0x236>
 8019fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019fd8:	f300 81e8 	bgt.w	801a3ac <RadioIrqProcess+0x3f4>
 8019fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019fe0:	f000 80f1 	beq.w	801a1c6 <RadioIrqProcess+0x20e>
 8019fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019fe8:	f300 81e0 	bgt.w	801a3ac <RadioIrqProcess+0x3f4>
 8019fec:	2b80      	cmp	r3, #128	; 0x80
 8019fee:	f000 80d6 	beq.w	801a19e <RadioIrqProcess+0x1e6>
 8019ff2:	2b80      	cmp	r3, #128	; 0x80
 8019ff4:	f300 81da 	bgt.w	801a3ac <RadioIrqProcess+0x3f4>
 8019ff8:	2b20      	cmp	r3, #32
 8019ffa:	dc49      	bgt.n	801a090 <RadioIrqProcess+0xd8>
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	f340 81d5 	ble.w	801a3ac <RadioIrqProcess+0x3f4>
 801a002:	3b01      	subs	r3, #1
 801a004:	2b1f      	cmp	r3, #31
 801a006:	f200 81d1 	bhi.w	801a3ac <RadioIrqProcess+0x3f4>
 801a00a:	a201      	add	r2, pc, #4	; (adr r2, 801a010 <RadioIrqProcess+0x58>)
 801a00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a010:	0801a099 	.word	0x0801a099
 801a014:	0801a0d3 	.word	0x0801a0d3
 801a018:	0801a3ad 	.word	0x0801a3ad
 801a01c:	0801a289 	.word	0x0801a289
 801a020:	0801a3ad 	.word	0x0801a3ad
 801a024:	0801a3ad 	.word	0x0801a3ad
 801a028:	0801a3ad 	.word	0x0801a3ad
 801a02c:	0801a305 	.word	0x0801a305
 801a030:	0801a3ad 	.word	0x0801a3ad
 801a034:	0801a3ad 	.word	0x0801a3ad
 801a038:	0801a3ad 	.word	0x0801a3ad
 801a03c:	0801a3ad 	.word	0x0801a3ad
 801a040:	0801a3ad 	.word	0x0801a3ad
 801a044:	0801a3ad 	.word	0x0801a3ad
 801a048:	0801a3ad 	.word	0x0801a3ad
 801a04c:	0801a321 	.word	0x0801a321
 801a050:	0801a3ad 	.word	0x0801a3ad
 801a054:	0801a3ad 	.word	0x0801a3ad
 801a058:	0801a3ad 	.word	0x0801a3ad
 801a05c:	0801a3ad 	.word	0x0801a3ad
 801a060:	0801a3ad 	.word	0x0801a3ad
 801a064:	0801a3ad 	.word	0x0801a3ad
 801a068:	0801a3ad 	.word	0x0801a3ad
 801a06c:	0801a3ad 	.word	0x0801a3ad
 801a070:	0801a3ad 	.word	0x0801a3ad
 801a074:	0801a3ad 	.word	0x0801a3ad
 801a078:	0801a3ad 	.word	0x0801a3ad
 801a07c:	0801a3ad 	.word	0x0801a3ad
 801a080:	0801a3ad 	.word	0x0801a3ad
 801a084:	0801a3ad 	.word	0x0801a3ad
 801a088:	0801a3ad 	.word	0x0801a3ad
 801a08c:	0801a32f 	.word	0x0801a32f
 801a090:	2b40      	cmp	r3, #64	; 0x40
 801a092:	f000 816d 	beq.w	801a370 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801a096:	e189      	b.n	801a3ac <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801a098:	4874      	ldr	r0, [pc, #464]	; (801a26c <RadioIrqProcess+0x2b4>)
 801a09a:	f002 ffbf 	bl	801d01c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801a09e:	2000      	movs	r0, #0
 801a0a0:	f001 f81c 	bl	801b0dc <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801a0a4:	f002 f892 	bl	801c1cc <RFW_Is_LongPacketModeEnabled>
 801a0a8:	4603      	mov	r3, r0
 801a0aa:	2b01      	cmp	r3, #1
 801a0ac:	d101      	bne.n	801a0b2 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801a0ae:	f002 f8b6 	bl	801c21e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801a0b2:	4b6f      	ldr	r3, [pc, #444]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	f000 817a 	beq.w	801a3b0 <RadioIrqProcess+0x3f8>
 801a0bc:	4b6c      	ldr	r3, [pc, #432]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	f000 8174 	beq.w	801a3b0 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801a0c8:	4b69      	ldr	r3, [pc, #420]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	4798      	blx	r3
        break;
 801a0d0:	e16e      	b.n	801a3b0 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801a0d2:	4868      	ldr	r0, [pc, #416]	; (801a274 <RadioIrqProcess+0x2bc>)
 801a0d4:	f002 ffa2 	bl	801d01c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a0d8:	4b63      	ldr	r3, [pc, #396]	; (801a268 <RadioIrqProcess+0x2b0>)
 801a0da:	785b      	ldrb	r3, [r3, #1]
 801a0dc:	f083 0301 	eor.w	r3, r3, #1
 801a0e0:	b2db      	uxtb	r3, r3
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d014      	beq.n	801a110 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801a0e6:	2000      	movs	r0, #0
 801a0e8:	f000 fff8 	bl	801b0dc <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801a0ec:	2100      	movs	r1, #0
 801a0ee:	f640 1002 	movw	r0, #2306	; 0x902
 801a0f2:	f001 fd77 	bl	801bbe4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801a0f6:	f640 1044 	movw	r0, #2372	; 0x944
 801a0fa:	f001 fd87 	bl	801bc0c <SUBGRF_ReadRegister>
 801a0fe:	4603      	mov	r3, r0
 801a100:	f043 0302 	orr.w	r3, r3, #2
 801a104:	b2db      	uxtb	r3, r3
 801a106:	4619      	mov	r1, r3
 801a108:	f640 1044 	movw	r0, #2372	; 0x944
 801a10c:	f001 fd6a 	bl	801bbe4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801a110:	1dfb      	adds	r3, r7, #7
 801a112:	22ff      	movs	r2, #255	; 0xff
 801a114:	4619      	mov	r1, r3
 801a116:	4858      	ldr	r0, [pc, #352]	; (801a278 <RadioIrqProcess+0x2c0>)
 801a118:	f000 feb0 	bl	801ae7c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801a11c:	4857      	ldr	r0, [pc, #348]	; (801a27c <RadioIrqProcess+0x2c4>)
 801a11e:	f001 fd0f 	bl	801bb40 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801a122:	4b53      	ldr	r3, [pc, #332]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	2b00      	cmp	r3, #0
 801a128:	f000 8144 	beq.w	801a3b4 <RadioIrqProcess+0x3fc>
 801a12c:	4b50      	ldr	r3, [pc, #320]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a12e:	681b      	ldr	r3, [r3, #0]
 801a130:	689b      	ldr	r3, [r3, #8]
 801a132:	2b00      	cmp	r3, #0
 801a134:	f000 813e 	beq.w	801a3b4 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801a138:	4b4b      	ldr	r3, [pc, #300]	; (801a268 <RadioIrqProcess+0x2b0>)
 801a13a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a13e:	2b01      	cmp	r3, #1
 801a140:	d10e      	bne.n	801a160 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801a142:	4b4b      	ldr	r3, [pc, #300]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a144:	681b      	ldr	r3, [r3, #0]
 801a146:	689c      	ldr	r4, [r3, #8]
 801a148:	79fb      	ldrb	r3, [r7, #7]
 801a14a:	b299      	uxth	r1, r3
 801a14c:	4b46      	ldr	r3, [pc, #280]	; (801a268 <RadioIrqProcess+0x2b0>)
 801a14e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801a152:	b21a      	sxth	r2, r3
 801a154:	4b44      	ldr	r3, [pc, #272]	; (801a268 <RadioIrqProcess+0x2b0>)
 801a156:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801a15a:	4847      	ldr	r0, [pc, #284]	; (801a278 <RadioIrqProcess+0x2c0>)
 801a15c:	47a0      	blx	r4
                break;
 801a15e:	e01d      	b.n	801a19c <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801a160:	4b41      	ldr	r3, [pc, #260]	; (801a268 <RadioIrqProcess+0x2b0>)
 801a162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a164:	463a      	mov	r2, r7
 801a166:	4611      	mov	r1, r2
 801a168:	4618      	mov	r0, r3
 801a16a:	f001 ff7d 	bl	801c068 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801a16e:	4b40      	ldr	r3, [pc, #256]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a170:	681b      	ldr	r3, [r3, #0]
 801a172:	689c      	ldr	r4, [r3, #8]
 801a174:	79fb      	ldrb	r3, [r7, #7]
 801a176:	b299      	uxth	r1, r3
 801a178:	4b3b      	ldr	r3, [pc, #236]	; (801a268 <RadioIrqProcess+0x2b0>)
 801a17a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801a17e:	b218      	sxth	r0, r3
 801a180:	683b      	ldr	r3, [r7, #0]
 801a182:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801a186:	4a3e      	ldr	r2, [pc, #248]	; (801a280 <RadioIrqProcess+0x2c8>)
 801a188:	fb82 5203 	smull	r5, r2, r2, r3
 801a18c:	1192      	asrs	r2, r2, #6
 801a18e:	17db      	asrs	r3, r3, #31
 801a190:	1ad3      	subs	r3, r2, r3
 801a192:	b25b      	sxtb	r3, r3
 801a194:	4602      	mov	r2, r0
 801a196:	4838      	ldr	r0, [pc, #224]	; (801a278 <RadioIrqProcess+0x2c0>)
 801a198:	47a0      	blx	r4
                break;
 801a19a:	bf00      	nop
        break;
 801a19c:	e10a      	b.n	801a3b4 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801a19e:	2000      	movs	r0, #0
 801a1a0:	f000 ff9c 	bl	801b0dc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a1a4:	4b32      	ldr	r3, [pc, #200]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a1a6:	681b      	ldr	r3, [r3, #0]
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	f000 8105 	beq.w	801a3b8 <RadioIrqProcess+0x400>
 801a1ae:	4b30      	ldr	r3, [pc, #192]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	699b      	ldr	r3, [r3, #24]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	f000 80ff 	beq.w	801a3b8 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801a1ba:	4b2d      	ldr	r3, [pc, #180]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	699b      	ldr	r3, [r3, #24]
 801a1c0:	2000      	movs	r0, #0
 801a1c2:	4798      	blx	r3
        break;
 801a1c4:	e0f8      	b.n	801a3b8 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801a1c6:	2000      	movs	r0, #0
 801a1c8:	f000 ff88 	bl	801b0dc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a1cc:	4b28      	ldr	r3, [pc, #160]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	f000 80f3 	beq.w	801a3bc <RadioIrqProcess+0x404>
 801a1d6:	4b26      	ldr	r3, [pc, #152]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	699b      	ldr	r3, [r3, #24]
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	f000 80ed 	beq.w	801a3bc <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801a1e2:	4b23      	ldr	r3, [pc, #140]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	699b      	ldr	r3, [r3, #24]
 801a1e8:	2001      	movs	r0, #1
 801a1ea:	4798      	blx	r3
        break;
 801a1ec:	e0e6      	b.n	801a3bc <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801a1ee:	4b25      	ldr	r3, [pc, #148]	; (801a284 <RadioIrqProcess+0x2cc>)
 801a1f0:	2201      	movs	r2, #1
 801a1f2:	2100      	movs	r1, #0
 801a1f4:	2002      	movs	r0, #2
 801a1f6:	f003 f91b 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801a1fa:	f000 fe25 	bl	801ae48 <SUBGRF_GetOperatingMode>
 801a1fe:	4603      	mov	r3, r0
 801a200:	2b04      	cmp	r3, #4
 801a202:	d115      	bne.n	801a230 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801a204:	4819      	ldr	r0, [pc, #100]	; (801a26c <RadioIrqProcess+0x2b4>)
 801a206:	f002 ff09 	bl	801d01c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a20a:	2000      	movs	r0, #0
 801a20c:	f000 ff66 	bl	801b0dc <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a210:	4b17      	ldr	r3, [pc, #92]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	2b00      	cmp	r3, #0
 801a216:	f000 80d3 	beq.w	801a3c0 <RadioIrqProcess+0x408>
 801a21a:	4b15      	ldr	r3, [pc, #84]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	685b      	ldr	r3, [r3, #4]
 801a220:	2b00      	cmp	r3, #0
 801a222:	f000 80cd 	beq.w	801a3c0 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801a226:	4b12      	ldr	r3, [pc, #72]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	685b      	ldr	r3, [r3, #4]
 801a22c:	4798      	blx	r3
        break;
 801a22e:	e0c7      	b.n	801a3c0 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801a230:	f000 fe0a 	bl	801ae48 <SUBGRF_GetOperatingMode>
 801a234:	4603      	mov	r3, r0
 801a236:	2b05      	cmp	r3, #5
 801a238:	f040 80c2 	bne.w	801a3c0 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801a23c:	480d      	ldr	r0, [pc, #52]	; (801a274 <RadioIrqProcess+0x2bc>)
 801a23e:	f002 feed 	bl	801d01c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a242:	2000      	movs	r0, #0
 801a244:	f000 ff4a 	bl	801b0dc <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a248:	4b09      	ldr	r3, [pc, #36]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	f000 80b7 	beq.w	801a3c0 <RadioIrqProcess+0x408>
 801a252:	4b07      	ldr	r3, [pc, #28]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	68db      	ldr	r3, [r3, #12]
 801a258:	2b00      	cmp	r3, #0
 801a25a:	f000 80b1 	beq.w	801a3c0 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801a25e:	4b04      	ldr	r3, [pc, #16]	; (801a270 <RadioIrqProcess+0x2b8>)
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	68db      	ldr	r3, [r3, #12]
 801a264:	4798      	blx	r3
        break;
 801a266:	e0ab      	b.n	801a3c0 <RadioIrqProcess+0x408>
 801a268:	2000180c 	.word	0x2000180c
 801a26c:	20001868 	.word	0x20001868
 801a270:	20001808 	.word	0x20001808
 801a274:	20001880 	.word	0x20001880
 801a278:	20001708 	.word	0x20001708
 801a27c:	20001830 	.word	0x20001830
 801a280:	10624dd3 	.word	0x10624dd3
 801a284:	0801e304 	.word	0x0801e304
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801a288:	4b54      	ldr	r3, [pc, #336]	; (801a3dc <RadioIrqProcess+0x424>)
 801a28a:	2201      	movs	r2, #1
 801a28c:	2100      	movs	r1, #0
 801a28e:	2002      	movs	r0, #2
 801a290:	f003 f8ce 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801a294:	4b52      	ldr	r3, [pc, #328]	; (801a3e0 <RadioIrqProcess+0x428>)
 801a296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a298:	2b00      	cmp	r3, #0
 801a29a:	f000 8093 	beq.w	801a3c4 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801a29e:	4a51      	ldr	r2, [pc, #324]	; (801a3e4 <RadioIrqProcess+0x42c>)
 801a2a0:	4b4f      	ldr	r3, [pc, #316]	; (801a3e0 <RadioIrqProcess+0x428>)
 801a2a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a2a4:	0c1b      	lsrs	r3, r3, #16
 801a2a6:	b2db      	uxtb	r3, r3
 801a2a8:	4619      	mov	r1, r3
 801a2aa:	f640 1003 	movw	r0, #2307	; 0x903
 801a2ae:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801a2b0:	4a4c      	ldr	r2, [pc, #304]	; (801a3e4 <RadioIrqProcess+0x42c>)
 801a2b2:	4b4b      	ldr	r3, [pc, #300]	; (801a3e0 <RadioIrqProcess+0x428>)
 801a2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a2b6:	0a1b      	lsrs	r3, r3, #8
 801a2b8:	b2db      	uxtb	r3, r3
 801a2ba:	4619      	mov	r1, r3
 801a2bc:	f640 1004 	movw	r0, #2308	; 0x904
 801a2c0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801a2c2:	4a48      	ldr	r2, [pc, #288]	; (801a3e4 <RadioIrqProcess+0x42c>)
 801a2c4:	4b46      	ldr	r3, [pc, #280]	; (801a3e0 <RadioIrqProcess+0x428>)
 801a2c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a2c8:	b2db      	uxtb	r3, r3
 801a2ca:	4619      	mov	r1, r3
 801a2cc:	f640 1005 	movw	r0, #2309	; 0x905
 801a2d0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801a2d2:	4c44      	ldr	r4, [pc, #272]	; (801a3e4 <RadioIrqProcess+0x42c>)
 801a2d4:	4b44      	ldr	r3, [pc, #272]	; (801a3e8 <RadioIrqProcess+0x430>)
 801a2d6:	f640 1002 	movw	r0, #2306	; 0x902
 801a2da:	4798      	blx	r3
 801a2dc:	4603      	mov	r3, r0
 801a2de:	f043 0301 	orr.w	r3, r3, #1
 801a2e2:	b2db      	uxtb	r3, r3
 801a2e4:	4619      	mov	r1, r3
 801a2e6:	f640 1002 	movw	r0, #2306	; 0x902
 801a2ea:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801a2ec:	4b3c      	ldr	r3, [pc, #240]	; (801a3e0 <RadioIrqProcess+0x428>)
 801a2ee:	2200      	movs	r2, #0
 801a2f0:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a2f2:	2300      	movs	r3, #0
 801a2f4:	2200      	movs	r2, #0
 801a2f6:	f240 2162 	movw	r1, #610	; 0x262
 801a2fa:	f240 2062 	movw	r0, #610	; 0x262
 801a2fe:	f001 f8c1 	bl	801b484 <SUBGRF_SetDioIrqParams>
        break;
 801a302:	e05f      	b.n	801a3c4 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801a304:	4b39      	ldr	r3, [pc, #228]	; (801a3ec <RadioIrqProcess+0x434>)
 801a306:	2201      	movs	r2, #1
 801a308:	2100      	movs	r1, #0
 801a30a:	2002      	movs	r0, #2
 801a30c:	f003 f890 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801a310:	f001 ff55 	bl	801c1be <RFW_Is_Init>
 801a314:	4603      	mov	r3, r0
 801a316:	2b01      	cmp	r3, #1
 801a318:	d156      	bne.n	801a3c8 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801a31a:	f001 ff86 	bl	801c22a <RFW_ReceivePayload>
        break;
 801a31e:	e053      	b.n	801a3c8 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801a320:	4b33      	ldr	r3, [pc, #204]	; (801a3f0 <RadioIrqProcess+0x438>)
 801a322:	2201      	movs	r2, #1
 801a324:	2100      	movs	r1, #0
 801a326:	2002      	movs	r0, #2
 801a328:	f003 f882 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a32c:	e051      	b.n	801a3d2 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801a32e:	4831      	ldr	r0, [pc, #196]	; (801a3f4 <RadioIrqProcess+0x43c>)
 801a330:	f002 fe74 	bl	801d01c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a334:	4b2a      	ldr	r3, [pc, #168]	; (801a3e0 <RadioIrqProcess+0x428>)
 801a336:	785b      	ldrb	r3, [r3, #1]
 801a338:	f083 0301 	eor.w	r3, r3, #1
 801a33c:	b2db      	uxtb	r3, r3
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d002      	beq.n	801a348 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801a342:	2000      	movs	r0, #0
 801a344:	f000 feca 	bl	801b0dc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a348:	4b2b      	ldr	r3, [pc, #172]	; (801a3f8 <RadioIrqProcess+0x440>)
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d03d      	beq.n	801a3cc <RadioIrqProcess+0x414>
 801a350:	4b29      	ldr	r3, [pc, #164]	; (801a3f8 <RadioIrqProcess+0x440>)
 801a352:	681b      	ldr	r3, [r3, #0]
 801a354:	68db      	ldr	r3, [r3, #12]
 801a356:	2b00      	cmp	r3, #0
 801a358:	d038      	beq.n	801a3cc <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801a35a:	4b27      	ldr	r3, [pc, #156]	; (801a3f8 <RadioIrqProcess+0x440>)
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	68db      	ldr	r3, [r3, #12]
 801a360:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801a362:	4b26      	ldr	r3, [pc, #152]	; (801a3fc <RadioIrqProcess+0x444>)
 801a364:	2201      	movs	r2, #1
 801a366:	2100      	movs	r1, #0
 801a368:	2002      	movs	r0, #2
 801a36a:	f003 f861 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a36e:	e02d      	b.n	801a3cc <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801a370:	4b23      	ldr	r3, [pc, #140]	; (801a400 <RadioIrqProcess+0x448>)
 801a372:	2201      	movs	r2, #1
 801a374:	2100      	movs	r1, #0
 801a376:	2002      	movs	r0, #2
 801a378:	f003 f85a 	bl	801d430 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801a37c:	4b18      	ldr	r3, [pc, #96]	; (801a3e0 <RadioIrqProcess+0x428>)
 801a37e:	785b      	ldrb	r3, [r3, #1]
 801a380:	f083 0301 	eor.w	r3, r3, #1
 801a384:	b2db      	uxtb	r3, r3
 801a386:	2b00      	cmp	r3, #0
 801a388:	d002      	beq.n	801a390 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801a38a:	2000      	movs	r0, #0
 801a38c:	f000 fea6 	bl	801b0dc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801a390:	4b19      	ldr	r3, [pc, #100]	; (801a3f8 <RadioIrqProcess+0x440>)
 801a392:	681b      	ldr	r3, [r3, #0]
 801a394:	2b00      	cmp	r3, #0
 801a396:	d01b      	beq.n	801a3d0 <RadioIrqProcess+0x418>
 801a398:	4b17      	ldr	r3, [pc, #92]	; (801a3f8 <RadioIrqProcess+0x440>)
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	691b      	ldr	r3, [r3, #16]
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d016      	beq.n	801a3d0 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801a3a2:	4b15      	ldr	r3, [pc, #84]	; (801a3f8 <RadioIrqProcess+0x440>)
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	691b      	ldr	r3, [r3, #16]
 801a3a8:	4798      	blx	r3
        break;
 801a3aa:	e011      	b.n	801a3d0 <RadioIrqProcess+0x418>
        break;
 801a3ac:	bf00      	nop
 801a3ae:	e010      	b.n	801a3d2 <RadioIrqProcess+0x41a>
        break;
 801a3b0:	bf00      	nop
 801a3b2:	e00e      	b.n	801a3d2 <RadioIrqProcess+0x41a>
        break;
 801a3b4:	bf00      	nop
 801a3b6:	e00c      	b.n	801a3d2 <RadioIrqProcess+0x41a>
        break;
 801a3b8:	bf00      	nop
 801a3ba:	e00a      	b.n	801a3d2 <RadioIrqProcess+0x41a>
        break;
 801a3bc:	bf00      	nop
 801a3be:	e008      	b.n	801a3d2 <RadioIrqProcess+0x41a>
        break;
 801a3c0:	bf00      	nop
 801a3c2:	e006      	b.n	801a3d2 <RadioIrqProcess+0x41a>
        break;
 801a3c4:	bf00      	nop
 801a3c6:	e004      	b.n	801a3d2 <RadioIrqProcess+0x41a>
        break;
 801a3c8:	bf00      	nop
 801a3ca:	e002      	b.n	801a3d2 <RadioIrqProcess+0x41a>
        break;
 801a3cc:	bf00      	nop
 801a3ce:	e000      	b.n	801a3d2 <RadioIrqProcess+0x41a>
        break;
 801a3d0:	bf00      	nop
    }
}
 801a3d2:	bf00      	nop
 801a3d4:	3708      	adds	r7, #8
 801a3d6:	46bd      	mov	sp, r7
 801a3d8:	bdb0      	pop	{r4, r5, r7, pc}
 801a3da:	bf00      	nop
 801a3dc:	0801e318 	.word	0x0801e318
 801a3e0:	2000180c 	.word	0x2000180c
 801a3e4:	08019dc7 	.word	0x08019dc7
 801a3e8:	08019deb 	.word	0x08019deb
 801a3ec:	0801e324 	.word	0x0801e324
 801a3f0:	0801e330 	.word	0x0801e330
 801a3f4:	20001880 	.word	0x20001880
 801a3f8:	20001808 	.word	0x20001808
 801a3fc:	0801e33c 	.word	0x0801e33c
 801a400:	0801e348 	.word	0x0801e348

0801a404 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801a404:	b580      	push	{r7, lr}
 801a406:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a408:	4b09      	ldr	r3, [pc, #36]	; (801a430 <RadioTxPrbs+0x2c>)
 801a40a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a40e:	2101      	movs	r1, #1
 801a410:	4618      	mov	r0, r3
 801a412:	f001 fcdb 	bl	801bdcc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801a416:	4b07      	ldr	r3, [pc, #28]	; (801a434 <RadioTxPrbs+0x30>)
 801a418:	212d      	movs	r1, #45	; 0x2d
 801a41a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a41e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801a420:	f000 ff1f 	bl	801b262 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801a424:	4804      	ldr	r0, [pc, #16]	; (801a438 <RadioTxPrbs+0x34>)
 801a426:	f000 fe75 	bl	801b114 <SUBGRF_SetTx>
}
 801a42a:	bf00      	nop
 801a42c:	bd80      	pop	{r7, pc}
 801a42e:	bf00      	nop
 801a430:	2000180c 	.word	0x2000180c
 801a434:	08019dc7 	.word	0x08019dc7
 801a438:	000fffff 	.word	0x000fffff

0801a43c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801a43c:	b580      	push	{r7, lr}
 801a43e:	b084      	sub	sp, #16
 801a440:	af00      	add	r7, sp, #0
 801a442:	4603      	mov	r3, r0
 801a444:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801a446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a44a:	4618      	mov	r0, r3
 801a44c:	f001 fce6 	bl	801be1c <SUBGRF_SetRfTxPower>
 801a450:	4603      	mov	r3, r0
 801a452:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a454:	210e      	movs	r1, #14
 801a456:	f640 101f 	movw	r0, #2335	; 0x91f
 801a45a:	f001 fbc3 	bl	801bbe4 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801a45e:	7bfb      	ldrb	r3, [r7, #15]
 801a460:	2101      	movs	r1, #1
 801a462:	4618      	mov	r0, r3
 801a464:	f001 fcb2 	bl	801bdcc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801a468:	f000 fef2 	bl	801b250 <SUBGRF_SetTxContinuousWave>
}
 801a46c:	bf00      	nop
 801a46e:	3710      	adds	r7, #16
 801a470:	46bd      	mov	sp, r7
 801a472:	bd80      	pop	{r7, pc}

0801a474 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801a474:	b480      	push	{r7}
 801a476:	b089      	sub	sp, #36	; 0x24
 801a478:	af00      	add	r7, sp, #0
 801a47a:	60f8      	str	r0, [r7, #12]
 801a47c:	60b9      	str	r1, [r7, #8]
 801a47e:	4613      	mov	r3, r2
 801a480:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801a482:	2300      	movs	r3, #0
 801a484:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801a486:	2300      	movs	r3, #0
 801a488:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801a48a:	2300      	movs	r3, #0
 801a48c:	61bb      	str	r3, [r7, #24]
 801a48e:	e011      	b.n	801a4b4 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801a490:	69bb      	ldr	r3, [r7, #24]
 801a492:	68ba      	ldr	r2, [r7, #8]
 801a494:	4413      	add	r3, r2
 801a496:	781a      	ldrb	r2, [r3, #0]
 801a498:	69bb      	ldr	r3, [r7, #24]
 801a49a:	68b9      	ldr	r1, [r7, #8]
 801a49c:	440b      	add	r3, r1
 801a49e:	43d2      	mvns	r2, r2
 801a4a0:	b2d2      	uxtb	r2, r2
 801a4a2:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801a4a4:	69bb      	ldr	r3, [r7, #24]
 801a4a6:	68fa      	ldr	r2, [r7, #12]
 801a4a8:	4413      	add	r3, r2
 801a4aa:	2200      	movs	r2, #0
 801a4ac:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801a4ae:	69bb      	ldr	r3, [r7, #24]
 801a4b0:	3301      	adds	r3, #1
 801a4b2:	61bb      	str	r3, [r7, #24]
 801a4b4:	79fb      	ldrb	r3, [r7, #7]
 801a4b6:	69ba      	ldr	r2, [r7, #24]
 801a4b8:	429a      	cmp	r2, r3
 801a4ba:	dbe9      	blt.n	801a490 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801a4bc:	2300      	movs	r3, #0
 801a4be:	61bb      	str	r3, [r7, #24]
 801a4c0:	e049      	b.n	801a556 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801a4c2:	69bb      	ldr	r3, [r7, #24]
 801a4c4:	425a      	negs	r2, r3
 801a4c6:	f003 0307 	and.w	r3, r3, #7
 801a4ca:	f002 0207 	and.w	r2, r2, #7
 801a4ce:	bf58      	it	pl
 801a4d0:	4253      	negpl	r3, r2
 801a4d2:	b2db      	uxtb	r3, r3
 801a4d4:	f1c3 0307 	rsb	r3, r3, #7
 801a4d8:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801a4da:	69bb      	ldr	r3, [r7, #24]
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	da00      	bge.n	801a4e2 <payload_integration+0x6e>
 801a4e0:	3307      	adds	r3, #7
 801a4e2:	10db      	asrs	r3, r3, #3
 801a4e4:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801a4e6:	69bb      	ldr	r3, [r7, #24]
 801a4e8:	3301      	adds	r3, #1
 801a4ea:	425a      	negs	r2, r3
 801a4ec:	f003 0307 	and.w	r3, r3, #7
 801a4f0:	f002 0207 	and.w	r2, r2, #7
 801a4f4:	bf58      	it	pl
 801a4f6:	4253      	negpl	r3, r2
 801a4f8:	b2db      	uxtb	r3, r3
 801a4fa:	f1c3 0307 	rsb	r3, r3, #7
 801a4fe:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801a500:	69bb      	ldr	r3, [r7, #24]
 801a502:	3301      	adds	r3, #1
 801a504:	2b00      	cmp	r3, #0
 801a506:	da00      	bge.n	801a50a <payload_integration+0x96>
 801a508:	3307      	adds	r3, #7
 801a50a:	10db      	asrs	r3, r3, #3
 801a50c:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801a50e:	7dbb      	ldrb	r3, [r7, #22]
 801a510:	68ba      	ldr	r2, [r7, #8]
 801a512:	4413      	add	r3, r2
 801a514:	781b      	ldrb	r3, [r3, #0]
 801a516:	461a      	mov	r2, r3
 801a518:	7dfb      	ldrb	r3, [r7, #23]
 801a51a:	fa42 f303 	asr.w	r3, r2, r3
 801a51e:	b2db      	uxtb	r3, r3
 801a520:	f003 0301 	and.w	r3, r3, #1
 801a524:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801a526:	7ffa      	ldrb	r2, [r7, #31]
 801a528:	7cfb      	ldrb	r3, [r7, #19]
 801a52a:	4053      	eors	r3, r2
 801a52c:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801a52e:	7d3b      	ldrb	r3, [r7, #20]
 801a530:	68fa      	ldr	r2, [r7, #12]
 801a532:	4413      	add	r3, r2
 801a534:	781b      	ldrb	r3, [r3, #0]
 801a536:	b25a      	sxtb	r2, r3
 801a538:	7ff9      	ldrb	r1, [r7, #31]
 801a53a:	7d7b      	ldrb	r3, [r7, #21]
 801a53c:	fa01 f303 	lsl.w	r3, r1, r3
 801a540:	b25b      	sxtb	r3, r3
 801a542:	4313      	orrs	r3, r2
 801a544:	b259      	sxtb	r1, r3
 801a546:	7d3b      	ldrb	r3, [r7, #20]
 801a548:	68fa      	ldr	r2, [r7, #12]
 801a54a:	4413      	add	r3, r2
 801a54c:	b2ca      	uxtb	r2, r1
 801a54e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801a550:	69bb      	ldr	r3, [r7, #24]
 801a552:	3301      	adds	r3, #1
 801a554:	61bb      	str	r3, [r7, #24]
 801a556:	79fb      	ldrb	r3, [r7, #7]
 801a558:	00db      	lsls	r3, r3, #3
 801a55a:	69ba      	ldr	r2, [r7, #24]
 801a55c:	429a      	cmp	r2, r3
 801a55e:	dbb0      	blt.n	801a4c2 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801a560:	7ffb      	ldrb	r3, [r7, #31]
 801a562:	01db      	lsls	r3, r3, #7
 801a564:	b25a      	sxtb	r2, r3
 801a566:	7ffb      	ldrb	r3, [r7, #31]
 801a568:	019b      	lsls	r3, r3, #6
 801a56a:	b25b      	sxtb	r3, r3
 801a56c:	4313      	orrs	r3, r2
 801a56e:	b25b      	sxtb	r3, r3
 801a570:	7ffa      	ldrb	r2, [r7, #31]
 801a572:	2a00      	cmp	r2, #0
 801a574:	d101      	bne.n	801a57a <payload_integration+0x106>
 801a576:	2220      	movs	r2, #32
 801a578:	e000      	b.n	801a57c <payload_integration+0x108>
 801a57a:	2200      	movs	r2, #0
 801a57c:	4313      	orrs	r3, r2
 801a57e:	b259      	sxtb	r1, r3
 801a580:	79fb      	ldrb	r3, [r7, #7]
 801a582:	68fa      	ldr	r2, [r7, #12]
 801a584:	4413      	add	r3, r2
 801a586:	b2ca      	uxtb	r2, r1
 801a588:	701a      	strb	r2, [r3, #0]
}
 801a58a:	bf00      	nop
 801a58c:	3724      	adds	r7, #36	; 0x24
 801a58e:	46bd      	mov	sp, r7
 801a590:	bc80      	pop	{r7}
 801a592:	4770      	bx	lr

0801a594 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801a594:	b580      	push	{r7, lr}
 801a596:	b08c      	sub	sp, #48	; 0x30
 801a598:	af00      	add	r7, sp, #0
 801a59a:	60b9      	str	r1, [r7, #8]
 801a59c:	607a      	str	r2, [r7, #4]
 801a59e:	603b      	str	r3, [r7, #0]
 801a5a0:	4603      	mov	r3, r0
 801a5a2:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801a5a8:	2300      	movs	r3, #0
 801a5aa:	623b      	str	r3, [r7, #32]
 801a5ac:	2300      	movs	r3, #0
 801a5ae:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a5b0:	f001 fdff 	bl	801c1b2 <RFW_DeInit>

    if( rxContinuous != 0 )
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d001      	beq.n	801a5be <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801a5ba:	2300      	movs	r3, #0
 801a5bc:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	bf14      	ite	ne
 801a5c4:	2301      	movne	r3, #1
 801a5c6:	2300      	moveq	r3, #0
 801a5c8:	b2da      	uxtb	r2, r3
 801a5ca:	4ba3      	ldr	r3, [pc, #652]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a5cc:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801a5ce:	7bfb      	ldrb	r3, [r7, #15]
 801a5d0:	2b00      	cmp	r3, #0
 801a5d2:	d003      	beq.n	801a5dc <RadioSetRxGenericConfig+0x48>
 801a5d4:	2b01      	cmp	r3, #1
 801a5d6:	f000 80dc 	beq.w	801a792 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801a5da:	e194      	b.n	801a906 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801a5dc:	68bb      	ldr	r3, [r7, #8]
 801a5de:	689b      	ldr	r3, [r3, #8]
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d003      	beq.n	801a5ec <RadioSetRxGenericConfig+0x58>
 801a5e4:	68bb      	ldr	r3, [r7, #8]
 801a5e6:	68db      	ldr	r3, [r3, #12]
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d102      	bne.n	801a5f2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801a5ec:	f04f 33ff 	mov.w	r3, #4294967295
 801a5f0:	e18a      	b.n	801a908 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801a5f2:	68bb      	ldr	r3, [r7, #8]
 801a5f4:	7f9b      	ldrb	r3, [r3, #30]
 801a5f6:	2b08      	cmp	r3, #8
 801a5f8:	d902      	bls.n	801a600 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801a5fa:	f04f 33ff 	mov.w	r3, #4294967295
 801a5fe:	e183      	b.n	801a908 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801a600:	68bb      	ldr	r3, [r7, #8]
 801a602:	6919      	ldr	r1, [r3, #16]
 801a604:	68bb      	ldr	r3, [r7, #8]
 801a606:	7f9b      	ldrb	r3, [r3, #30]
 801a608:	b29a      	uxth	r2, r3
 801a60a:	f107 0320 	add.w	r3, r7, #32
 801a60e:	4618      	mov	r0, r3
 801a610:	f001 fec2 	bl	801c398 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a614:	68bb      	ldr	r3, [r7, #8]
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	2b00      	cmp	r3, #0
 801a61a:	bf14      	ite	ne
 801a61c:	2301      	movne	r3, #1
 801a61e:	2300      	moveq	r3, #0
 801a620:	b2db      	uxtb	r3, r3
 801a622:	4618      	mov	r0, r3
 801a624:	f000 fe26 	bl	801b274 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a628:	4b8b      	ldr	r3, [pc, #556]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a62a:	2200      	movs	r2, #0
 801a62c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a630:	68bb      	ldr	r3, [r7, #8]
 801a632:	689b      	ldr	r3, [r3, #8]
 801a634:	4a88      	ldr	r2, [pc, #544]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a636:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a638:	68bb      	ldr	r3, [r7, #8]
 801a63a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801a63e:	4b86      	ldr	r3, [pc, #536]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801a644:	68bb      	ldr	r3, [r7, #8]
 801a646:	685b      	ldr	r3, [r3, #4]
 801a648:	4618      	mov	r0, r3
 801a64a:	f001 fce5 	bl	801c018 <SUBGRF_GetFskBandwidthRegValue>
 801a64e:	4603      	mov	r3, r0
 801a650:	461a      	mov	r2, r3
 801a652:	4b81      	ldr	r3, [pc, #516]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a658:	4b7f      	ldr	r3, [pc, #508]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a65a:	2200      	movs	r2, #0
 801a65c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801a65e:	68bb      	ldr	r3, [r7, #8]
 801a660:	68db      	ldr	r3, [r3, #12]
 801a662:	b29b      	uxth	r3, r3
 801a664:	00db      	lsls	r3, r3, #3
 801a666:	b29a      	uxth	r2, r3
 801a668:	4b7b      	ldr	r3, [pc, #492]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a66a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801a66c:	68bb      	ldr	r3, [r7, #8]
 801a66e:	7fda      	ldrb	r2, [r3, #31]
 801a670:	4b79      	ldr	r3, [pc, #484]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a672:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a674:	68bb      	ldr	r3, [r7, #8]
 801a676:	7f9b      	ldrb	r3, [r3, #30]
 801a678:	00db      	lsls	r3, r3, #3
 801a67a:	b2da      	uxtb	r2, r3
 801a67c:	4b76      	ldr	r3, [pc, #472]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a67e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801a680:	68bb      	ldr	r3, [r7, #8]
 801a682:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801a686:	4b74      	ldr	r3, [pc, #464]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a688:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801a68a:	68bb      	ldr	r3, [r7, #8]
 801a68c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a690:	2b00      	cmp	r3, #0
 801a692:	d105      	bne.n	801a6a0 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801a694:	68bb      	ldr	r3, [r7, #8]
 801a696:	695b      	ldr	r3, [r3, #20]
 801a698:	b2da      	uxtb	r2, r3
 801a69a:	4b6f      	ldr	r3, [pc, #444]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a69c:	759a      	strb	r2, [r3, #22]
 801a69e:	e00b      	b.n	801a6b8 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801a6a0:	68bb      	ldr	r3, [r7, #8]
 801a6a2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a6a6:	2b02      	cmp	r3, #2
 801a6a8:	d103      	bne.n	801a6b2 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a6aa:	4b6b      	ldr	r3, [pc, #428]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a6ac:	22ff      	movs	r2, #255	; 0xff
 801a6ae:	759a      	strb	r2, [r3, #22]
 801a6b0:	e002      	b.n	801a6b8 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a6b2:	4b69      	ldr	r3, [pc, #420]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a6b4:	22ff      	movs	r2, #255	; 0xff
 801a6b6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a6b8:	68bb      	ldr	r3, [r7, #8]
 801a6ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a6be:	2b02      	cmp	r3, #2
 801a6c0:	d004      	beq.n	801a6cc <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a6c2:	68bb      	ldr	r3, [r7, #8]
 801a6c4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a6c8:	2b02      	cmp	r3, #2
 801a6ca:	d12d      	bne.n	801a728 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a6cc:	68bb      	ldr	r3, [r7, #8]
 801a6ce:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a6d2:	2bf1      	cmp	r3, #241	; 0xf1
 801a6d4:	d00c      	beq.n	801a6f0 <RadioSetRxGenericConfig+0x15c>
 801a6d6:	68bb      	ldr	r3, [r7, #8]
 801a6d8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a6dc:	2bf2      	cmp	r3, #242	; 0xf2
 801a6de:	d007      	beq.n	801a6f0 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a6e0:	68bb      	ldr	r3, [r7, #8]
 801a6e2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a6e6:	2b01      	cmp	r3, #1
 801a6e8:	d002      	beq.n	801a6f0 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801a6ea:	f04f 33ff 	mov.w	r3, #4294967295
 801a6ee:	e10b      	b.n	801a908 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801a6f0:	2300      	movs	r3, #0
 801a6f2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801a6f4:	68bb      	ldr	r3, [r7, #8]
 801a6f6:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801a6f8:	4b58      	ldr	r3, [pc, #352]	; (801a85c <RadioSetRxGenericConfig+0x2c8>)
 801a6fa:	6819      	ldr	r1, [r3, #0]
 801a6fc:	f107 0314 	add.w	r3, r7, #20
 801a700:	4a57      	ldr	r2, [pc, #348]	; (801a860 <RadioSetRxGenericConfig+0x2cc>)
 801a702:	4618      	mov	r0, r3
 801a704:	f001 fd48 	bl	801c198 <RFW_Init>
 801a708:	4603      	mov	r3, r0
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d002      	beq.n	801a714 <RadioSetRxGenericConfig+0x180>
                return -1;
 801a70e:	f04f 33ff 	mov.w	r3, #4294967295
 801a712:	e0f9      	b.n	801a908 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a714:	4b50      	ldr	r3, [pc, #320]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a716:	2200      	movs	r2, #0
 801a718:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a71a:	4b4f      	ldr	r3, [pc, #316]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a71c:	2201      	movs	r2, #1
 801a71e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a720:	4b4d      	ldr	r3, [pc, #308]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a722:	2200      	movs	r2, #0
 801a724:	755a      	strb	r2, [r3, #21]
        {
 801a726:	e00e      	b.n	801a746 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a728:	68bb      	ldr	r3, [r7, #8]
 801a72a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801a72e:	4b4a      	ldr	r3, [pc, #296]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a730:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a732:	68bb      	ldr	r3, [r7, #8]
 801a734:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801a738:	4b47      	ldr	r3, [pc, #284]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a73a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801a73c:	68bb      	ldr	r3, [r7, #8]
 801a73e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801a742:	4b45      	ldr	r3, [pc, #276]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a744:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801a746:	f7ff fa3c 	bl	8019bc2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a74a:	2000      	movs	r0, #0
 801a74c:	f7fe fbd0 	bl	8018ef0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a750:	4844      	ldr	r0, [pc, #272]	; (801a864 <RadioSetRxGenericConfig+0x2d0>)
 801a752:	f001 f82d 	bl	801b7b0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a756:	4844      	ldr	r0, [pc, #272]	; (801a868 <RadioSetRxGenericConfig+0x2d4>)
 801a758:	f001 f8fc 	bl	801b954 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a75c:	f107 0320 	add.w	r3, r7, #32
 801a760:	4618      	mov	r0, r3
 801a762:	f000 fbc0 	bl	801aee6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a766:	68bb      	ldr	r3, [r7, #8]
 801a768:	8b9b      	ldrh	r3, [r3, #28]
 801a76a:	4618      	mov	r0, r3
 801a76c:	f000 fc0a 	bl	801af84 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801a770:	68bb      	ldr	r3, [r7, #8]
 801a772:	8b1b      	ldrh	r3, [r3, #24]
 801a774:	4618      	mov	r0, r3
 801a776:	f000 fbe5 	bl	801af44 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801a77a:	683b      	ldr	r3, [r7, #0]
 801a77c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a780:	fb03 f202 	mul.w	r2, r3, r2
 801a784:	68bb      	ldr	r3, [r7, #8]
 801a786:	689b      	ldr	r3, [r3, #8]
 801a788:	fbb2 f3f3 	udiv	r3, r2, r3
 801a78c:	4a32      	ldr	r2, [pc, #200]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a78e:	6093      	str	r3, [r2, #8]
        break;
 801a790:	e0b9      	b.n	801a906 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801a792:	68bb      	ldr	r3, [r7, #8]
 801a794:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801a796:	2b00      	cmp	r3, #0
 801a798:	d102      	bne.n	801a7a0 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801a79a:	f04f 33ff 	mov.w	r3, #4294967295
 801a79e:	e0b3      	b.n	801a908 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801a7a0:	68bb      	ldr	r3, [r7, #8]
 801a7a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801a7a6:	2b01      	cmp	r3, #1
 801a7a8:	d104      	bne.n	801a7b4 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801a7aa:	68bb      	ldr	r3, [r7, #8]
 801a7ac:	695b      	ldr	r3, [r3, #20]
 801a7ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801a7b2:	e002      	b.n	801a7ba <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801a7b4:	23ff      	movs	r3, #255	; 0xff
 801a7b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a7ba:	68bb      	ldr	r3, [r7, #8]
 801a7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	bf14      	ite	ne
 801a7c2:	2301      	movne	r3, #1
 801a7c4:	2300      	moveq	r3, #0
 801a7c6:	b2db      	uxtb	r3, r3
 801a7c8:	4618      	mov	r0, r3
 801a7ca:	f000 fd53 	bl	801b274 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a7ce:	683b      	ldr	r3, [r7, #0]
 801a7d0:	b2db      	uxtb	r3, r3
 801a7d2:	4618      	mov	r0, r3
 801a7d4:	f000 fd5d 	bl	801b292 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a7d8:	4b1f      	ldr	r3, [pc, #124]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a7da:	2201      	movs	r2, #1
 801a7dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a7e0:	68bb      	ldr	r3, [r7, #8]
 801a7e2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801a7e6:	4b1c      	ldr	r3, [pc, #112]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a7e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a7ec:	68bb      	ldr	r3, [r7, #8]
 801a7ee:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801a7f2:	4b19      	ldr	r3, [pc, #100]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a7f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a7f8:	68bb      	ldr	r3, [r7, #8]
 801a7fa:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801a7fe:	4b16      	ldr	r3, [pc, #88]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a800:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801a804:	68bb      	ldr	r3, [r7, #8]
 801a806:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801a80a:	2b02      	cmp	r3, #2
 801a80c:	d010      	beq.n	801a830 <RadioSetRxGenericConfig+0x29c>
 801a80e:	2b02      	cmp	r3, #2
 801a810:	dc2c      	bgt.n	801a86c <RadioSetRxGenericConfig+0x2d8>
 801a812:	2b00      	cmp	r3, #0
 801a814:	d002      	beq.n	801a81c <RadioSetRxGenericConfig+0x288>
 801a816:	2b01      	cmp	r3, #1
 801a818:	d005      	beq.n	801a826 <RadioSetRxGenericConfig+0x292>
            break;
 801a81a:	e027      	b.n	801a86c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a81c:	4b0e      	ldr	r3, [pc, #56]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a81e:	2200      	movs	r2, #0
 801a820:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a824:	e023      	b.n	801a86e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a826:	4b0c      	ldr	r3, [pc, #48]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a828:	2201      	movs	r2, #1
 801a82a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a82e:	e01e      	b.n	801a86e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a830:	68bb      	ldr	r3, [r7, #8]
 801a832:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a836:	2b0b      	cmp	r3, #11
 801a838:	d004      	beq.n	801a844 <RadioSetRxGenericConfig+0x2b0>
 801a83a:	68bb      	ldr	r3, [r7, #8]
 801a83c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a840:	2b0c      	cmp	r3, #12
 801a842:	d104      	bne.n	801a84e <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a844:	4b04      	ldr	r3, [pc, #16]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a846:	2201      	movs	r2, #1
 801a848:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a84c:	e00f      	b.n	801a86e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a84e:	4b02      	ldr	r3, [pc, #8]	; (801a858 <RadioSetRxGenericConfig+0x2c4>)
 801a850:	2200      	movs	r2, #0
 801a852:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a856:	e00a      	b.n	801a86e <RadioSetRxGenericConfig+0x2da>
 801a858:	2000180c 	.word	0x2000180c
 801a85c:	20001808 	.word	0x20001808
 801a860:	20001880 	.word	0x20001880
 801a864:	20001844 	.word	0x20001844
 801a868:	2000181a 	.word	0x2000181a
            break;
 801a86c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a86e:	4b28      	ldr	r3, [pc, #160]	; (801a910 <RadioSetRxGenericConfig+0x37c>)
 801a870:	2201      	movs	r2, #1
 801a872:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a874:	68bb      	ldr	r3, [r7, #8]
 801a876:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801a878:	4b25      	ldr	r3, [pc, #148]	; (801a910 <RadioSetRxGenericConfig+0x37c>)
 801a87a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a87c:	68bb      	ldr	r3, [r7, #8]
 801a87e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801a882:	4b23      	ldr	r3, [pc, #140]	; (801a910 <RadioSetRxGenericConfig+0x37c>)
 801a884:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a886:	4a22      	ldr	r2, [pc, #136]	; (801a910 <RadioSetRxGenericConfig+0x37c>)
 801a888:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a88c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a88e:	68bb      	ldr	r3, [r7, #8]
 801a890:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801a894:	4b1e      	ldr	r3, [pc, #120]	; (801a910 <RadioSetRxGenericConfig+0x37c>)
 801a896:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a89a:	68bb      	ldr	r3, [r7, #8]
 801a89c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801a8a0:	4b1b      	ldr	r3, [pc, #108]	; (801a910 <RadioSetRxGenericConfig+0x37c>)
 801a8a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801a8a6:	f7ff f98c 	bl	8019bc2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a8aa:	2001      	movs	r0, #1
 801a8ac:	f7fe fb20 	bl	8018ef0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a8b0:	4818      	ldr	r0, [pc, #96]	; (801a914 <RadioSetRxGenericConfig+0x380>)
 801a8b2:	f000 ff7d 	bl	801b7b0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a8b6:	4818      	ldr	r0, [pc, #96]	; (801a918 <RadioSetRxGenericConfig+0x384>)
 801a8b8:	f001 f84c 	bl	801b954 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a8bc:	4b14      	ldr	r3, [pc, #80]	; (801a910 <RadioSetRxGenericConfig+0x37c>)
 801a8be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801a8c2:	2b01      	cmp	r3, #1
 801a8c4:	d10d      	bne.n	801a8e2 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a8c6:	f240 7036 	movw	r0, #1846	; 0x736
 801a8ca:	f001 f99f 	bl	801bc0c <SUBGRF_ReadRegister>
 801a8ce:	4603      	mov	r3, r0
 801a8d0:	f023 0304 	bic.w	r3, r3, #4
 801a8d4:	b2db      	uxtb	r3, r3
 801a8d6:	4619      	mov	r1, r3
 801a8d8:	f240 7036 	movw	r0, #1846	; 0x736
 801a8dc:	f001 f982 	bl	801bbe4 <SUBGRF_WriteRegister>
 801a8e0:	e00c      	b.n	801a8fc <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a8e2:	f240 7036 	movw	r0, #1846	; 0x736
 801a8e6:	f001 f991 	bl	801bc0c <SUBGRF_ReadRegister>
 801a8ea:	4603      	mov	r3, r0
 801a8ec:	f043 0304 	orr.w	r3, r3, #4
 801a8f0:	b2db      	uxtb	r3, r3
 801a8f2:	4619      	mov	r1, r3
 801a8f4:	f240 7036 	movw	r0, #1846	; 0x736
 801a8f8:	f001 f974 	bl	801bbe4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801a8fc:	4b04      	ldr	r3, [pc, #16]	; (801a910 <RadioSetRxGenericConfig+0x37c>)
 801a8fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a902:	609a      	str	r2, [r3, #8]
        break;
 801a904:	bf00      	nop
    }
    return status;
 801a906:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a908:	4618      	mov	r0, r3
 801a90a:	3730      	adds	r7, #48	; 0x30
 801a90c:	46bd      	mov	sp, r7
 801a90e:	bd80      	pop	{r7, pc}
 801a910:	2000180c 	.word	0x2000180c
 801a914:	20001844 	.word	0x20001844
 801a918:	2000181a 	.word	0x2000181a

0801a91c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b08e      	sub	sp, #56	; 0x38
 801a920:	af00      	add	r7, sp, #0
 801a922:	60b9      	str	r1, [r7, #8]
 801a924:	607b      	str	r3, [r7, #4]
 801a926:	4603      	mov	r3, r0
 801a928:	73fb      	strb	r3, [r7, #15]
 801a92a:	4613      	mov	r3, r2
 801a92c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801a92e:	2300      	movs	r3, #0
 801a930:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a932:	2300      	movs	r3, #0
 801a934:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a936:	f001 fc3c 	bl	801c1b2 <RFW_DeInit>
    switch( modem )
 801a93a:	7bfb      	ldrb	r3, [r7, #15]
 801a93c:	2b03      	cmp	r3, #3
 801a93e:	f200 8204 	bhi.w	801ad4a <RadioSetTxGenericConfig+0x42e>
 801a942:	a201      	add	r2, pc, #4	; (adr r2, 801a948 <RadioSetTxGenericConfig+0x2c>)
 801a944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a948:	0801aacd 	.word	0x0801aacd
 801a94c:	0801ac15 	.word	0x0801ac15
 801a950:	0801ad0d 	.word	0x0801ad0d
 801a954:	0801a959 	.word	0x0801a959
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801a958:	68bb      	ldr	r3, [r7, #8]
 801a95a:	7c9b      	ldrb	r3, [r3, #18]
 801a95c:	2b08      	cmp	r3, #8
 801a95e:	d902      	bls.n	801a966 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801a960:	f04f 33ff 	mov.w	r3, #4294967295
 801a964:	e206      	b.n	801ad74 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801a966:	68bb      	ldr	r3, [r7, #8]
 801a968:	6899      	ldr	r1, [r3, #8]
 801a96a:	68bb      	ldr	r3, [r7, #8]
 801a96c:	7c9b      	ldrb	r3, [r3, #18]
 801a96e:	b29a      	uxth	r2, r3
 801a970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a974:	4618      	mov	r0, r3
 801a976:	f001 fd0f 	bl	801c398 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801a97a:	68bb      	ldr	r3, [r7, #8]
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d102      	bne.n	801a988 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801a982:	f04f 33ff 	mov.w	r3, #4294967295
 801a986:	e1f5      	b.n	801ad74 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801a988:	68bb      	ldr	r3, [r7, #8]
 801a98a:	681b      	ldr	r3, [r3, #0]
 801a98c:	f242 7210 	movw	r2, #10000	; 0x2710
 801a990:	4293      	cmp	r3, r2
 801a992:	d813      	bhi.n	801a9bc <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801a994:	2302      	movs	r3, #2
 801a996:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801a99a:	4b99      	ldr	r3, [pc, #612]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801a99c:	2203      	movs	r2, #3
 801a99e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801a9a0:	4b97      	ldr	r3, [pc, #604]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801a9a2:	2203      	movs	r2, #3
 801a9a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a9a8:	68bb      	ldr	r3, [r7, #8]
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	4a94      	ldr	r2, [pc, #592]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801a9ae:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a9b0:	68bb      	ldr	r3, [r7, #8]
 801a9b2:	7cda      	ldrb	r2, [r3, #19]
 801a9b4:	4b92      	ldr	r3, [pc, #584]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801a9b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a9ba:	e017      	b.n	801a9ec <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801a9bc:	2300      	movs	r3, #0
 801a9be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a9c2:	4b8f      	ldr	r3, [pc, #572]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801a9c4:	2200      	movs	r2, #0
 801a9c6:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a9c8:	4b8d      	ldr	r3, [pc, #564]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801a9ca:	2200      	movs	r2, #0
 801a9cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a9d0:	68bb      	ldr	r3, [r7, #8]
 801a9d2:	681b      	ldr	r3, [r3, #0]
 801a9d4:	4a8a      	ldr	r2, [pc, #552]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801a9d6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a9d8:	68bb      	ldr	r3, [r7, #8]
 801a9da:	7cda      	ldrb	r2, [r3, #19]
 801a9dc:	4b88      	ldr	r3, [pc, #544]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801a9de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801a9e2:	68bb      	ldr	r3, [r7, #8]
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	089b      	lsrs	r3, r3, #2
 801a9e8:	4a85      	ldr	r2, [pc, #532]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801a9ea:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801a9ec:	68bb      	ldr	r3, [r7, #8]
 801a9ee:	685b      	ldr	r3, [r3, #4]
 801a9f0:	b29b      	uxth	r3, r3
 801a9f2:	00db      	lsls	r3, r3, #3
 801a9f4:	b29a      	uxth	r2, r3
 801a9f6:	4b82      	ldr	r3, [pc, #520]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801a9f8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a9fa:	4b81      	ldr	r3, [pc, #516]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801a9fc:	2204      	movs	r2, #4
 801a9fe:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801aa00:	68bb      	ldr	r3, [r7, #8]
 801aa02:	7c9b      	ldrb	r3, [r3, #18]
 801aa04:	00db      	lsls	r3, r3, #3
 801aa06:	b2da      	uxtb	r2, r3
 801aa08:	4b7d      	ldr	r3, [pc, #500]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801aa0a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801aa0c:	4b7c      	ldr	r3, [pc, #496]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801aa0e:	2200      	movs	r2, #0
 801aa10:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801aa12:	68bb      	ldr	r3, [r7, #8]
 801aa14:	7d9b      	ldrb	r3, [r3, #22]
 801aa16:	2b02      	cmp	r3, #2
 801aa18:	d003      	beq.n	801aa22 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801aa1a:	68bb      	ldr	r3, [r7, #8]
 801aa1c:	7d1b      	ldrb	r3, [r3, #20]
 801aa1e:	2b02      	cmp	r3, #2
 801aa20:	d12b      	bne.n	801aa7a <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801aa22:	68bb      	ldr	r3, [r7, #8]
 801aa24:	7d5b      	ldrb	r3, [r3, #21]
 801aa26:	2bf1      	cmp	r3, #241	; 0xf1
 801aa28:	d00a      	beq.n	801aa40 <RadioSetTxGenericConfig+0x124>
 801aa2a:	68bb      	ldr	r3, [r7, #8]
 801aa2c:	7d5b      	ldrb	r3, [r3, #21]
 801aa2e:	2bf2      	cmp	r3, #242	; 0xf2
 801aa30:	d006      	beq.n	801aa40 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801aa32:	68bb      	ldr	r3, [r7, #8]
 801aa34:	7d5b      	ldrb	r3, [r3, #21]
 801aa36:	2b01      	cmp	r3, #1
 801aa38:	d002      	beq.n	801aa40 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801aa3a:	f04f 33ff 	mov.w	r3, #4294967295
 801aa3e:	e199      	b.n	801ad74 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801aa40:	68bb      	ldr	r3, [r7, #8]
 801aa42:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801aa44:	2301      	movs	r3, #1
 801aa46:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801aa4a:	4b6e      	ldr	r3, [pc, #440]	; (801ac04 <RadioSetTxGenericConfig+0x2e8>)
 801aa4c:	6819      	ldr	r1, [r3, #0]
 801aa4e:	f107 0320 	add.w	r3, r7, #32
 801aa52:	4a6d      	ldr	r2, [pc, #436]	; (801ac08 <RadioSetTxGenericConfig+0x2ec>)
 801aa54:	4618      	mov	r0, r3
 801aa56:	f001 fb9f 	bl	801c198 <RFW_Init>
 801aa5a:	4603      	mov	r3, r0
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	d002      	beq.n	801aa66 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801aa60:	f04f 33ff 	mov.w	r3, #4294967295
 801aa64:	e186      	b.n	801ad74 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801aa66:	4b66      	ldr	r3, [pc, #408]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801aa68:	2200      	movs	r2, #0
 801aa6a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801aa6c:	4b64      	ldr	r3, [pc, #400]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801aa6e:	2201      	movs	r2, #1
 801aa70:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801aa72:	4b63      	ldr	r3, [pc, #396]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801aa74:	2200      	movs	r2, #0
 801aa76:	755a      	strb	r2, [r3, #21]
        {
 801aa78:	e00b      	b.n	801aa92 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801aa7a:	68bb      	ldr	r3, [r7, #8]
 801aa7c:	7d5a      	ldrb	r2, [r3, #21]
 801aa7e:	4b60      	ldr	r3, [pc, #384]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801aa80:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801aa82:	68bb      	ldr	r3, [r7, #8]
 801aa84:	7d9a      	ldrb	r2, [r3, #22]
 801aa86:	4b5e      	ldr	r3, [pc, #376]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801aa88:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801aa8a:	68bb      	ldr	r3, [r7, #8]
 801aa8c:	7d1a      	ldrb	r2, [r3, #20]
 801aa8e:	4b5c      	ldr	r3, [pc, #368]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801aa90:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801aa92:	f7ff f896 	bl	8019bc2 <RadioStandby>
        RadioSetModem( radio_modem );
 801aa96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801aa9a:	4618      	mov	r0, r3
 801aa9c:	f7fe fa28 	bl	8018ef0 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aaa0:	485a      	ldr	r0, [pc, #360]	; (801ac0c <RadioSetTxGenericConfig+0x2f0>)
 801aaa2:	f000 fe85 	bl	801b7b0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aaa6:	485a      	ldr	r0, [pc, #360]	; (801ac10 <RadioSetTxGenericConfig+0x2f4>)
 801aaa8:	f000 ff54 	bl	801b954 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801aaac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801aab0:	4618      	mov	r0, r3
 801aab2:	f000 fa18 	bl	801aee6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801aab6:	68bb      	ldr	r3, [r7, #8]
 801aab8:	8a1b      	ldrh	r3, [r3, #16]
 801aaba:	4618      	mov	r0, r3
 801aabc:	f000 fa62 	bl	801af84 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801aac0:	68bb      	ldr	r3, [r7, #8]
 801aac2:	899b      	ldrh	r3, [r3, #12]
 801aac4:	4618      	mov	r0, r3
 801aac6:	f000 fa3d 	bl	801af44 <SUBGRF_SetCrcPolynomial>
        break;
 801aaca:	e13f      	b.n	801ad4c <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801aacc:	68bb      	ldr	r3, [r7, #8]
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	d102      	bne.n	801aada <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801aad4:	f04f 33ff 	mov.w	r3, #4294967295
 801aad8:	e14c      	b.n	801ad74 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801aada:	68bb      	ldr	r3, [r7, #8]
 801aadc:	7c9b      	ldrb	r3, [r3, #18]
 801aade:	2b08      	cmp	r3, #8
 801aae0:	d902      	bls.n	801aae8 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801aae2:	f04f 33ff 	mov.w	r3, #4294967295
 801aae6:	e145      	b.n	801ad74 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801aae8:	68bb      	ldr	r3, [r7, #8]
 801aaea:	6899      	ldr	r1, [r3, #8]
 801aaec:	68bb      	ldr	r3, [r7, #8]
 801aaee:	7c9b      	ldrb	r3, [r3, #18]
 801aaf0:	b29a      	uxth	r2, r3
 801aaf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801aaf6:	4618      	mov	r0, r3
 801aaf8:	f001 fc4e 	bl	801c398 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801aafc:	4b40      	ldr	r3, [pc, #256]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801aafe:	2200      	movs	r2, #0
 801ab00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801ab04:	68bb      	ldr	r3, [r7, #8]
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	4a3d      	ldr	r2, [pc, #244]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801ab0a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801ab0c:	68bb      	ldr	r3, [r7, #8]
 801ab0e:	7cda      	ldrb	r2, [r3, #19]
 801ab10:	4b3b      	ldr	r3, [pc, #236]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801ab12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801ab16:	68bb      	ldr	r3, [r7, #8]
 801ab18:	699b      	ldr	r3, [r3, #24]
 801ab1a:	4a39      	ldr	r2, [pc, #228]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801ab1c:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801ab1e:	4b38      	ldr	r3, [pc, #224]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801ab20:	2200      	movs	r2, #0
 801ab22:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801ab24:	68bb      	ldr	r3, [r7, #8]
 801ab26:	685b      	ldr	r3, [r3, #4]
 801ab28:	b29b      	uxth	r3, r3
 801ab2a:	00db      	lsls	r3, r3, #3
 801ab2c:	b29a      	uxth	r2, r3
 801ab2e:	4b34      	ldr	r3, [pc, #208]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801ab30:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801ab32:	4b33      	ldr	r3, [pc, #204]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801ab34:	2204      	movs	r2, #4
 801ab36:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801ab38:	68bb      	ldr	r3, [r7, #8]
 801ab3a:	7c9b      	ldrb	r3, [r3, #18]
 801ab3c:	00db      	lsls	r3, r3, #3
 801ab3e:	b2da      	uxtb	r2, r3
 801ab40:	4b2f      	ldr	r3, [pc, #188]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801ab42:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801ab44:	4b2e      	ldr	r3, [pc, #184]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801ab46:	2200      	movs	r2, #0
 801ab48:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801ab4a:	68bb      	ldr	r3, [r7, #8]
 801ab4c:	7d9b      	ldrb	r3, [r3, #22]
 801ab4e:	2b02      	cmp	r3, #2
 801ab50:	d003      	beq.n	801ab5a <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801ab52:	68bb      	ldr	r3, [r7, #8]
 801ab54:	7d1b      	ldrb	r3, [r3, #20]
 801ab56:	2b02      	cmp	r3, #2
 801ab58:	d12a      	bne.n	801abb0 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801ab5a:	68bb      	ldr	r3, [r7, #8]
 801ab5c:	7d5b      	ldrb	r3, [r3, #21]
 801ab5e:	2bf1      	cmp	r3, #241	; 0xf1
 801ab60:	d00a      	beq.n	801ab78 <RadioSetTxGenericConfig+0x25c>
 801ab62:	68bb      	ldr	r3, [r7, #8]
 801ab64:	7d5b      	ldrb	r3, [r3, #21]
 801ab66:	2bf2      	cmp	r3, #242	; 0xf2
 801ab68:	d006      	beq.n	801ab78 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801ab6a:	68bb      	ldr	r3, [r7, #8]
 801ab6c:	7d5b      	ldrb	r3, [r3, #21]
 801ab6e:	2b01      	cmp	r3, #1
 801ab70:	d002      	beq.n	801ab78 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801ab72:	f04f 33ff 	mov.w	r3, #4294967295
 801ab76:	e0fd      	b.n	801ad74 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801ab78:	2301      	movs	r3, #1
 801ab7a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801ab7c:	68bb      	ldr	r3, [r7, #8]
 801ab7e:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801ab80:	4b20      	ldr	r3, [pc, #128]	; (801ac04 <RadioSetTxGenericConfig+0x2e8>)
 801ab82:	6819      	ldr	r1, [r3, #0]
 801ab84:	f107 0314 	add.w	r3, r7, #20
 801ab88:	4a1f      	ldr	r2, [pc, #124]	; (801ac08 <RadioSetTxGenericConfig+0x2ec>)
 801ab8a:	4618      	mov	r0, r3
 801ab8c:	f001 fb04 	bl	801c198 <RFW_Init>
 801ab90:	4603      	mov	r3, r0
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	d002      	beq.n	801ab9c <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801ab96:	f04f 33ff 	mov.w	r3, #4294967295
 801ab9a:	e0eb      	b.n	801ad74 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801ab9c:	4b18      	ldr	r3, [pc, #96]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801ab9e:	2200      	movs	r2, #0
 801aba0:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801aba2:	4b17      	ldr	r3, [pc, #92]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801aba4:	2201      	movs	r2, #1
 801aba6:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801aba8:	4b15      	ldr	r3, [pc, #84]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801abaa:	2200      	movs	r2, #0
 801abac:	755a      	strb	r2, [r3, #21]
        {
 801abae:	e00b      	b.n	801abc8 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801abb0:	68bb      	ldr	r3, [r7, #8]
 801abb2:	7d5a      	ldrb	r2, [r3, #21]
 801abb4:	4b12      	ldr	r3, [pc, #72]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801abb6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801abb8:	68bb      	ldr	r3, [r7, #8]
 801abba:	7d9a      	ldrb	r2, [r3, #22]
 801abbc:	4b10      	ldr	r3, [pc, #64]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801abbe:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801abc0:	68bb      	ldr	r3, [r7, #8]
 801abc2:	7d1a      	ldrb	r2, [r3, #20]
 801abc4:	4b0e      	ldr	r3, [pc, #56]	; (801ac00 <RadioSetTxGenericConfig+0x2e4>)
 801abc6:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801abc8:	f7fe fffb 	bl	8019bc2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801abcc:	2000      	movs	r0, #0
 801abce:	f7fe f98f 	bl	8018ef0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801abd2:	480e      	ldr	r0, [pc, #56]	; (801ac0c <RadioSetTxGenericConfig+0x2f0>)
 801abd4:	f000 fdec 	bl	801b7b0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801abd8:	480d      	ldr	r0, [pc, #52]	; (801ac10 <RadioSetTxGenericConfig+0x2f4>)
 801abda:	f000 febb 	bl	801b954 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801abde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801abe2:	4618      	mov	r0, r3
 801abe4:	f000 f97f 	bl	801aee6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801abe8:	68bb      	ldr	r3, [r7, #8]
 801abea:	8a1b      	ldrh	r3, [r3, #16]
 801abec:	4618      	mov	r0, r3
 801abee:	f000 f9c9 	bl	801af84 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801abf2:	68bb      	ldr	r3, [r7, #8]
 801abf4:	899b      	ldrh	r3, [r3, #12]
 801abf6:	4618      	mov	r0, r3
 801abf8:	f000 f9a4 	bl	801af44 <SUBGRF_SetCrcPolynomial>
        break;
 801abfc:	e0a6      	b.n	801ad4c <RadioSetTxGenericConfig+0x430>
 801abfe:	bf00      	nop
 801ac00:	2000180c 	.word	0x2000180c
 801ac04:	20001808 	.word	0x20001808
 801ac08:	20001868 	.word	0x20001868
 801ac0c:	20001844 	.word	0x20001844
 801ac10:	2000181a 	.word	0x2000181a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801ac14:	4b59      	ldr	r3, [pc, #356]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801ac16:	2201      	movs	r2, #1
 801ac18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801ac1c:	68bb      	ldr	r3, [r7, #8]
 801ac1e:	781a      	ldrb	r2, [r3, #0]
 801ac20:	4b56      	ldr	r3, [pc, #344]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801ac22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801ac26:	68bb      	ldr	r3, [r7, #8]
 801ac28:	785a      	ldrb	r2, [r3, #1]
 801ac2a:	4b54      	ldr	r3, [pc, #336]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801ac2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801ac30:	68bb      	ldr	r3, [r7, #8]
 801ac32:	789a      	ldrb	r2, [r3, #2]
 801ac34:	4b51      	ldr	r3, [pc, #324]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801ac36:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801ac3a:	68bb      	ldr	r3, [r7, #8]
 801ac3c:	78db      	ldrb	r3, [r3, #3]
 801ac3e:	2b02      	cmp	r3, #2
 801ac40:	d010      	beq.n	801ac64 <RadioSetTxGenericConfig+0x348>
 801ac42:	2b02      	cmp	r3, #2
 801ac44:	dc20      	bgt.n	801ac88 <RadioSetTxGenericConfig+0x36c>
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d002      	beq.n	801ac50 <RadioSetTxGenericConfig+0x334>
 801ac4a:	2b01      	cmp	r3, #1
 801ac4c:	d005      	beq.n	801ac5a <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801ac4e:	e01b      	b.n	801ac88 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ac50:	4b4a      	ldr	r3, [pc, #296]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801ac52:	2200      	movs	r2, #0
 801ac54:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ac58:	e017      	b.n	801ac8a <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801ac5a:	4b48      	ldr	r3, [pc, #288]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801ac5c:	2201      	movs	r2, #1
 801ac5e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ac62:	e012      	b.n	801ac8a <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801ac64:	68bb      	ldr	r3, [r7, #8]
 801ac66:	781b      	ldrb	r3, [r3, #0]
 801ac68:	2b0b      	cmp	r3, #11
 801ac6a:	d003      	beq.n	801ac74 <RadioSetTxGenericConfig+0x358>
 801ac6c:	68bb      	ldr	r3, [r7, #8]
 801ac6e:	781b      	ldrb	r3, [r3, #0]
 801ac70:	2b0c      	cmp	r3, #12
 801ac72:	d104      	bne.n	801ac7e <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801ac74:	4b41      	ldr	r3, [pc, #260]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801ac76:	2201      	movs	r2, #1
 801ac78:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ac7c:	e005      	b.n	801ac8a <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ac7e:	4b3f      	ldr	r3, [pc, #252]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801ac80:	2200      	movs	r2, #0
 801ac82:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ac86:	e000      	b.n	801ac8a <RadioSetTxGenericConfig+0x36e>
            break;
 801ac88:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801ac8a:	4b3c      	ldr	r3, [pc, #240]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801ac8c:	2201      	movs	r2, #1
 801ac8e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801ac90:	68bb      	ldr	r3, [r7, #8]
 801ac92:	889a      	ldrh	r2, [r3, #4]
 801ac94:	4b39      	ldr	r3, [pc, #228]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801ac96:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801ac98:	68bb      	ldr	r3, [r7, #8]
 801ac9a:	799a      	ldrb	r2, [r3, #6]
 801ac9c:	4b37      	ldr	r3, [pc, #220]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801ac9e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801aca0:	68bb      	ldr	r3, [r7, #8]
 801aca2:	79da      	ldrb	r2, [r3, #7]
 801aca4:	4b35      	ldr	r3, [pc, #212]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801aca6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801acaa:	68bb      	ldr	r3, [r7, #8]
 801acac:	7a1a      	ldrb	r2, [r3, #8]
 801acae:	4b33      	ldr	r3, [pc, #204]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801acb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801acb4:	f7fe ff85 	bl	8019bc2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801acb8:	2001      	movs	r0, #1
 801acba:	f7fe f919 	bl	8018ef0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801acbe:	4830      	ldr	r0, [pc, #192]	; (801ad80 <RadioSetTxGenericConfig+0x464>)
 801acc0:	f000 fd76 	bl	801b7b0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801acc4:	482f      	ldr	r0, [pc, #188]	; (801ad84 <RadioSetTxGenericConfig+0x468>)
 801acc6:	f000 fe45 	bl	801b954 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801acca:	4b2c      	ldr	r3, [pc, #176]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801accc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801acd0:	2b06      	cmp	r3, #6
 801acd2:	d10d      	bne.n	801acf0 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801acd4:	f640 0089 	movw	r0, #2185	; 0x889
 801acd8:	f000 ff98 	bl	801bc0c <SUBGRF_ReadRegister>
 801acdc:	4603      	mov	r3, r0
 801acde:	f023 0304 	bic.w	r3, r3, #4
 801ace2:	b2db      	uxtb	r3, r3
 801ace4:	4619      	mov	r1, r3
 801ace6:	f640 0089 	movw	r0, #2185	; 0x889
 801acea:	f000 ff7b 	bl	801bbe4 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801acee:	e02d      	b.n	801ad4c <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801acf0:	f640 0089 	movw	r0, #2185	; 0x889
 801acf4:	f000 ff8a 	bl	801bc0c <SUBGRF_ReadRegister>
 801acf8:	4603      	mov	r3, r0
 801acfa:	f043 0304 	orr.w	r3, r3, #4
 801acfe:	b2db      	uxtb	r3, r3
 801ad00:	4619      	mov	r1, r3
 801ad02:	f640 0089 	movw	r0, #2185	; 0x889
 801ad06:	f000 ff6d 	bl	801bbe4 <SUBGRF_WriteRegister>
        break;
 801ad0a:	e01f      	b.n	801ad4c <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801ad0c:	68bb      	ldr	r3, [r7, #8]
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d004      	beq.n	801ad1e <RadioSetTxGenericConfig+0x402>
 801ad14:	68bb      	ldr	r3, [r7, #8]
 801ad16:	681b      	ldr	r3, [r3, #0]
 801ad18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801ad1c:	d902      	bls.n	801ad24 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801ad1e:	f04f 33ff 	mov.w	r3, #4294967295
 801ad22:	e027      	b.n	801ad74 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801ad24:	2003      	movs	r0, #3
 801ad26:	f7fe f8e3 	bl	8018ef0 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801ad2a:	4b14      	ldr	r3, [pc, #80]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801ad2c:	2202      	movs	r2, #2
 801ad2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801ad32:	68bb      	ldr	r3, [r7, #8]
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	4a11      	ldr	r2, [pc, #68]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801ad38:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801ad3a:	4b10      	ldr	r3, [pc, #64]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801ad3c:	2216      	movs	r2, #22
 801ad3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ad42:	480f      	ldr	r0, [pc, #60]	; (801ad80 <RadioSetTxGenericConfig+0x464>)
 801ad44:	f000 fd34 	bl	801b7b0 <SUBGRF_SetModulationParams>
        break;
 801ad48:	e000      	b.n	801ad4c <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801ad4a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801ad4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ad50:	4618      	mov	r0, r3
 801ad52:	f001 f863 	bl	801be1c <SUBGRF_SetRfTxPower>
 801ad56:	4603      	mov	r3, r0
 801ad58:	461a      	mov	r2, r3
 801ad5a:	4b08      	ldr	r3, [pc, #32]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801ad5c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801ad60:	4b06      	ldr	r3, [pc, #24]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801ad62:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ad66:	4618      	mov	r0, r3
 801ad68:	f001 fa37 	bl	801c1da <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801ad6c:	4a03      	ldr	r2, [pc, #12]	; (801ad7c <RadioSetTxGenericConfig+0x460>)
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	6053      	str	r3, [r2, #4]
    return 0;
 801ad72:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801ad74:	4618      	mov	r0, r3
 801ad76:	3738      	adds	r7, #56	; 0x38
 801ad78:	46bd      	mov	sp, r7
 801ad7a:	bd80      	pop	{r7, pc}
 801ad7c:	2000180c 	.word	0x2000180c
 801ad80:	20001844 	.word	0x20001844
 801ad84:	2000181a 	.word	0x2000181a

0801ad88 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801ad88:	b480      	push	{r7}
 801ad8a:	b085      	sub	sp, #20
 801ad8c:	af00      	add	r7, sp, #0
 801ad8e:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801ad90:	2301      	movs	r3, #1
 801ad92:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801ad94:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad96:	4618      	mov	r0, r3
 801ad98:	3714      	adds	r7, #20
 801ad9a:	46bd      	mov	sp, r7
 801ad9c:	bc80      	pop	{r7}
 801ad9e:	4770      	bx	lr

0801ada0 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801ada0:	b480      	push	{r7}
 801ada2:	b083      	sub	sp, #12
 801ada4:	af00      	add	r7, sp, #0
 801ada6:	6078      	str	r0, [r7, #4]
 801ada8:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801adaa:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801adac:	4618      	mov	r0, r3
 801adae:	370c      	adds	r7, #12
 801adb0:	46bd      	mov	sp, r7
 801adb2:	bc80      	pop	{r7}
 801adb4:	4770      	bx	lr
	...

0801adb8 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801adb8:	b580      	push	{r7, lr}
 801adba:	b084      	sub	sp, #16
 801adbc:	af00      	add	r7, sp, #0
 801adbe:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d002      	beq.n	801adcc <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801adc6:	4a1d      	ldr	r2, [pc, #116]	; (801ae3c <SUBGRF_Init+0x84>)
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801adcc:	f7e7 fb54 	bl	8002478 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801add0:	2002      	movs	r0, #2
 801add2:	f001 f8ff 	bl	801bfd4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801add6:	4b1a      	ldr	r3, [pc, #104]	; (801ae40 <SUBGRF_Init+0x88>)
 801add8:	2200      	movs	r2, #0
 801adda:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801addc:	2000      	movs	r0, #0
 801adde:	f000 f97d 	bl	801b0dc <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801ade2:	f7f1 ff1f 	bl	800cc24 <RBI_IsTCXO>
 801ade6:	4603      	mov	r3, r0
 801ade8:	2b01      	cmp	r3, #1
 801adea:	d10e      	bne.n	801ae0a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801adec:	2140      	movs	r1, #64	; 0x40
 801adee:	2001      	movs	r0, #1
 801adf0:	f000 fb82 	bl	801b4f8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801adf4:	2100      	movs	r1, #0
 801adf6:	f640 1011 	movw	r0, #2321	; 0x911
 801adfa:	f000 fef3 	bl	801bbe4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801adfe:	237f      	movs	r3, #127	; 0x7f
 801ae00:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801ae02:	7b38      	ldrb	r0, [r7, #12]
 801ae04:	f000 fa8b 	bl	801b31e <SUBGRF_Calibrate>
 801ae08:	e009      	b.n	801ae1e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801ae0a:	2120      	movs	r1, #32
 801ae0c:	f640 1011 	movw	r0, #2321	; 0x911
 801ae10:	f000 fee8 	bl	801bbe4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801ae14:	2120      	movs	r1, #32
 801ae16:	f640 1012 	movw	r0, #2322	; 0x912
 801ae1a:	f000 fee3 	bl	801bbe4 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801ae1e:	210e      	movs	r1, #14
 801ae20:	f640 101f 	movw	r0, #2335	; 0x91f
 801ae24:	f000 fede 	bl	801bbe4 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801ae28:	f7f1 fee0 	bl	800cbec <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801ae2c:	4b05      	ldr	r3, [pc, #20]	; (801ae44 <SUBGRF_Init+0x8c>)
 801ae2e:	2201      	movs	r2, #1
 801ae30:	701a      	strb	r2, [r3, #0]
}
 801ae32:	bf00      	nop
 801ae34:	3710      	adds	r7, #16
 801ae36:	46bd      	mov	sp, r7
 801ae38:	bd80      	pop	{r7, pc}
 801ae3a:	bf00      	nop
 801ae3c:	200018a4 	.word	0x200018a4
 801ae40:	200018a0 	.word	0x200018a0
 801ae44:	20001898 	.word	0x20001898

0801ae48 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801ae48:	b480      	push	{r7}
 801ae4a:	af00      	add	r7, sp, #0
    return OperatingMode;
 801ae4c:	4b02      	ldr	r3, [pc, #8]	; (801ae58 <SUBGRF_GetOperatingMode+0x10>)
 801ae4e:	781b      	ldrb	r3, [r3, #0]
}
 801ae50:	4618      	mov	r0, r3
 801ae52:	46bd      	mov	sp, r7
 801ae54:	bc80      	pop	{r7}
 801ae56:	4770      	bx	lr
 801ae58:	20001898 	.word	0x20001898

0801ae5c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b082      	sub	sp, #8
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	6078      	str	r0, [r7, #4]
 801ae64:	460b      	mov	r3, r1
 801ae66:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801ae68:	78fb      	ldrb	r3, [r7, #3]
 801ae6a:	461a      	mov	r2, r3
 801ae6c:	6879      	ldr	r1, [r7, #4]
 801ae6e:	2000      	movs	r0, #0
 801ae70:	f000 ff24 	bl	801bcbc <SUBGRF_WriteBuffer>
}
 801ae74:	bf00      	nop
 801ae76:	3708      	adds	r7, #8
 801ae78:	46bd      	mov	sp, r7
 801ae7a:	bd80      	pop	{r7, pc}

0801ae7c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801ae7c:	b580      	push	{r7, lr}
 801ae7e:	b086      	sub	sp, #24
 801ae80:	af00      	add	r7, sp, #0
 801ae82:	60f8      	str	r0, [r7, #12]
 801ae84:	60b9      	str	r1, [r7, #8]
 801ae86:	4613      	mov	r3, r2
 801ae88:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801ae8a:	2300      	movs	r3, #0
 801ae8c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801ae8e:	f107 0317 	add.w	r3, r7, #23
 801ae92:	4619      	mov	r1, r3
 801ae94:	68b8      	ldr	r0, [r7, #8]
 801ae96:	f000 fe27 	bl	801bae8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801ae9a:	68bb      	ldr	r3, [r7, #8]
 801ae9c:	781b      	ldrb	r3, [r3, #0]
 801ae9e:	79fa      	ldrb	r2, [r7, #7]
 801aea0:	429a      	cmp	r2, r3
 801aea2:	d201      	bcs.n	801aea8 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801aea4:	2301      	movs	r3, #1
 801aea6:	e007      	b.n	801aeb8 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801aea8:	7df8      	ldrb	r0, [r7, #23]
 801aeaa:	68bb      	ldr	r3, [r7, #8]
 801aeac:	781b      	ldrb	r3, [r3, #0]
 801aeae:	461a      	mov	r2, r3
 801aeb0:	68f9      	ldr	r1, [r7, #12]
 801aeb2:	f000 ff25 	bl	801bd00 <SUBGRF_ReadBuffer>

    return 0;
 801aeb6:	2300      	movs	r3, #0
}
 801aeb8:	4618      	mov	r0, r3
 801aeba:	3718      	adds	r7, #24
 801aebc:	46bd      	mov	sp, r7
 801aebe:	bd80      	pop	{r7, pc}

0801aec0 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801aec0:	b580      	push	{r7, lr}
 801aec2:	b084      	sub	sp, #16
 801aec4:	af00      	add	r7, sp, #0
 801aec6:	60f8      	str	r0, [r7, #12]
 801aec8:	460b      	mov	r3, r1
 801aeca:	607a      	str	r2, [r7, #4]
 801aecc:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801aece:	7afb      	ldrb	r3, [r7, #11]
 801aed0:	4619      	mov	r1, r3
 801aed2:	68f8      	ldr	r0, [r7, #12]
 801aed4:	f7ff ffc2 	bl	801ae5c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801aed8:	6878      	ldr	r0, [r7, #4]
 801aeda:	f000 f91b 	bl	801b114 <SUBGRF_SetTx>
}
 801aede:	bf00      	nop
 801aee0:	3710      	adds	r7, #16
 801aee2:	46bd      	mov	sp, r7
 801aee4:	bd80      	pop	{r7, pc}

0801aee6 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801aee6:	b580      	push	{r7, lr}
 801aee8:	b082      	sub	sp, #8
 801aeea:	af00      	add	r7, sp, #0
 801aeec:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801aeee:	2208      	movs	r2, #8
 801aef0:	6879      	ldr	r1, [r7, #4]
 801aef2:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801aef6:	f000 fe9d 	bl	801bc34 <SUBGRF_WriteRegisters>
    return 0;
 801aefa:	2300      	movs	r3, #0
}
 801aefc:	4618      	mov	r0, r3
 801aefe:	3708      	adds	r7, #8
 801af00:	46bd      	mov	sp, r7
 801af02:	bd80      	pop	{r7, pc}

0801af04 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801af04:	b580      	push	{r7, lr}
 801af06:	b084      	sub	sp, #16
 801af08:	af00      	add	r7, sp, #0
 801af0a:	4603      	mov	r3, r0
 801af0c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801af0e:	88fb      	ldrh	r3, [r7, #6]
 801af10:	0a1b      	lsrs	r3, r3, #8
 801af12:	b29b      	uxth	r3, r3
 801af14:	b2db      	uxtb	r3, r3
 801af16:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801af18:	88fb      	ldrh	r3, [r7, #6]
 801af1a:	b2db      	uxtb	r3, r3
 801af1c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801af1e:	f000 fb6f 	bl	801b600 <SUBGRF_GetPacketType>
 801af22:	4603      	mov	r3, r0
 801af24:	2b00      	cmp	r3, #0
 801af26:	d108      	bne.n	801af3a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801af28:	f107 030c 	add.w	r3, r7, #12
 801af2c:	2202      	movs	r2, #2
 801af2e:	4619      	mov	r1, r3
 801af30:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801af34:	f000 fe7e 	bl	801bc34 <SUBGRF_WriteRegisters>
            break;
 801af38:	e000      	b.n	801af3c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801af3a:	bf00      	nop
    }
}
 801af3c:	bf00      	nop
 801af3e:	3710      	adds	r7, #16
 801af40:	46bd      	mov	sp, r7
 801af42:	bd80      	pop	{r7, pc}

0801af44 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801af44:	b580      	push	{r7, lr}
 801af46:	b084      	sub	sp, #16
 801af48:	af00      	add	r7, sp, #0
 801af4a:	4603      	mov	r3, r0
 801af4c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801af4e:	88fb      	ldrh	r3, [r7, #6]
 801af50:	0a1b      	lsrs	r3, r3, #8
 801af52:	b29b      	uxth	r3, r3
 801af54:	b2db      	uxtb	r3, r3
 801af56:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801af58:	88fb      	ldrh	r3, [r7, #6]
 801af5a:	b2db      	uxtb	r3, r3
 801af5c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801af5e:	f000 fb4f 	bl	801b600 <SUBGRF_GetPacketType>
 801af62:	4603      	mov	r3, r0
 801af64:	2b00      	cmp	r3, #0
 801af66:	d108      	bne.n	801af7a <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801af68:	f107 030c 	add.w	r3, r7, #12
 801af6c:	2202      	movs	r2, #2
 801af6e:	4619      	mov	r1, r3
 801af70:	f240 60be 	movw	r0, #1726	; 0x6be
 801af74:	f000 fe5e 	bl	801bc34 <SUBGRF_WriteRegisters>
            break;
 801af78:	e000      	b.n	801af7c <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801af7a:	bf00      	nop
    }
}
 801af7c:	bf00      	nop
 801af7e:	3710      	adds	r7, #16
 801af80:	46bd      	mov	sp, r7
 801af82:	bd80      	pop	{r7, pc}

0801af84 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801af84:	b580      	push	{r7, lr}
 801af86:	b084      	sub	sp, #16
 801af88:	af00      	add	r7, sp, #0
 801af8a:	4603      	mov	r3, r0
 801af8c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801af8e:	2300      	movs	r3, #0
 801af90:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801af92:	f000 fb35 	bl	801b600 <SUBGRF_GetPacketType>
 801af96:	4603      	mov	r3, r0
 801af98:	2b00      	cmp	r3, #0
 801af9a:	d121      	bne.n	801afe0 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801af9c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801afa0:	f000 fe34 	bl	801bc0c <SUBGRF_ReadRegister>
 801afa4:	4603      	mov	r3, r0
 801afa6:	f023 0301 	bic.w	r3, r3, #1
 801afaa:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801afac:	88fb      	ldrh	r3, [r7, #6]
 801afae:	0a1b      	lsrs	r3, r3, #8
 801afb0:	b29b      	uxth	r3, r3
 801afb2:	b25b      	sxtb	r3, r3
 801afb4:	f003 0301 	and.w	r3, r3, #1
 801afb8:	b25a      	sxtb	r2, r3
 801afba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801afbe:	4313      	orrs	r3, r2
 801afc0:	b25b      	sxtb	r3, r3
 801afc2:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801afc4:	7bfb      	ldrb	r3, [r7, #15]
 801afc6:	4619      	mov	r1, r3
 801afc8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801afcc:	f000 fe0a 	bl	801bbe4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801afd0:	88fb      	ldrh	r3, [r7, #6]
 801afd2:	b2db      	uxtb	r3, r3
 801afd4:	4619      	mov	r1, r3
 801afd6:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801afda:	f000 fe03 	bl	801bbe4 <SUBGRF_WriteRegister>
            break;
 801afde:	e000      	b.n	801afe2 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801afe0:	bf00      	nop
    }
}
 801afe2:	bf00      	nop
 801afe4:	3710      	adds	r7, #16
 801afe6:	46bd      	mov	sp, r7
 801afe8:	bd80      	pop	{r7, pc}

0801afea <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801afea:	b580      	push	{r7, lr}
 801afec:	b082      	sub	sp, #8
 801afee:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801aff0:	2300      	movs	r3, #0
 801aff2:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801aff4:	2300      	movs	r3, #0
 801aff6:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801aff8:	2300      	movs	r3, #0
 801affa:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801affc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b000:	f000 fe04 	bl	801bc0c <SUBGRF_ReadRegister>
 801b004:	4603      	mov	r3, r0
 801b006:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801b008:	79fb      	ldrb	r3, [r7, #7]
 801b00a:	f023 0301 	bic.w	r3, r3, #1
 801b00e:	b2db      	uxtb	r3, r3
 801b010:	4619      	mov	r1, r3
 801b012:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b016:	f000 fde5 	bl	801bbe4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801b01a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b01e:	f000 fdf5 	bl	801bc0c <SUBGRF_ReadRegister>
 801b022:	4603      	mov	r3, r0
 801b024:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801b026:	79bb      	ldrb	r3, [r7, #6]
 801b028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b02c:	b2db      	uxtb	r3, r3
 801b02e:	4619      	mov	r1, r3
 801b030:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b034:	f000 fdd6 	bl	801bbe4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801b038:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801b03c:	f000 f88a 	bl	801b154 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801b040:	463b      	mov	r3, r7
 801b042:	2204      	movs	r2, #4
 801b044:	4619      	mov	r1, r3
 801b046:	f640 0019 	movw	r0, #2073	; 0x819
 801b04a:	f000 fe15 	bl	801bc78 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801b04e:	2000      	movs	r0, #0
 801b050:	f000 f844 	bl	801b0dc <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801b054:	79fb      	ldrb	r3, [r7, #7]
 801b056:	4619      	mov	r1, r3
 801b058:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b05c:	f000 fdc2 	bl	801bbe4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801b060:	79bb      	ldrb	r3, [r7, #6]
 801b062:	4619      	mov	r1, r3
 801b064:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b068:	f000 fdbc 	bl	801bbe4 <SUBGRF_WriteRegister>

    return number;
 801b06c:	683b      	ldr	r3, [r7, #0]
}
 801b06e:	4618      	mov	r0, r3
 801b070:	3708      	adds	r7, #8
 801b072:	46bd      	mov	sp, r7
 801b074:	bd80      	pop	{r7, pc}
	...

0801b078 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	b084      	sub	sp, #16
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801b080:	2000      	movs	r0, #0
 801b082:	f7f1 fdba 	bl	800cbfa <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b086:	2002      	movs	r0, #2
 801b088:	f000 ffa4 	bl	801bfd4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b08c:	793b      	ldrb	r3, [r7, #4]
 801b08e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b092:	b2db      	uxtb	r3, r3
 801b094:	009b      	lsls	r3, r3, #2
 801b096:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b098:	793b      	ldrb	r3, [r7, #4]
 801b09a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b09e:	b2db      	uxtb	r3, r3
 801b0a0:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b0a2:	b25b      	sxtb	r3, r3
 801b0a4:	4313      	orrs	r3, r2
 801b0a6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801b0a8:	793b      	ldrb	r3, [r7, #4]
 801b0aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b0ae:	b2db      	uxtb	r3, r3
 801b0b0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b0b2:	4313      	orrs	r3, r2
 801b0b4:	b25b      	sxtb	r3, r3
 801b0b6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b0b8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801b0ba:	f107 030f 	add.w	r3, r7, #15
 801b0be:	2201      	movs	r2, #1
 801b0c0:	4619      	mov	r1, r3
 801b0c2:	2084      	movs	r0, #132	; 0x84
 801b0c4:	f000 fe3e 	bl	801bd44 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801b0c8:	4b03      	ldr	r3, [pc, #12]	; (801b0d8 <SUBGRF_SetSleep+0x60>)
 801b0ca:	2200      	movs	r2, #0
 801b0cc:	701a      	strb	r2, [r3, #0]
}
 801b0ce:	bf00      	nop
 801b0d0:	3710      	adds	r7, #16
 801b0d2:	46bd      	mov	sp, r7
 801b0d4:	bd80      	pop	{r7, pc}
 801b0d6:	bf00      	nop
 801b0d8:	20001898 	.word	0x20001898

0801b0dc <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801b0dc:	b580      	push	{r7, lr}
 801b0de:	b082      	sub	sp, #8
 801b0e0:	af00      	add	r7, sp, #0
 801b0e2:	4603      	mov	r3, r0
 801b0e4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801b0e6:	1dfb      	adds	r3, r7, #7
 801b0e8:	2201      	movs	r2, #1
 801b0ea:	4619      	mov	r1, r3
 801b0ec:	2080      	movs	r0, #128	; 0x80
 801b0ee:	f000 fe29 	bl	801bd44 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801b0f2:	79fb      	ldrb	r3, [r7, #7]
 801b0f4:	2b00      	cmp	r3, #0
 801b0f6:	d103      	bne.n	801b100 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801b0f8:	4b05      	ldr	r3, [pc, #20]	; (801b110 <SUBGRF_SetStandby+0x34>)
 801b0fa:	2201      	movs	r2, #1
 801b0fc:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801b0fe:	e002      	b.n	801b106 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801b100:	4b03      	ldr	r3, [pc, #12]	; (801b110 <SUBGRF_SetStandby+0x34>)
 801b102:	2202      	movs	r2, #2
 801b104:	701a      	strb	r2, [r3, #0]
}
 801b106:	bf00      	nop
 801b108:	3708      	adds	r7, #8
 801b10a:	46bd      	mov	sp, r7
 801b10c:	bd80      	pop	{r7, pc}
 801b10e:	bf00      	nop
 801b110:	20001898 	.word	0x20001898

0801b114 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801b114:	b580      	push	{r7, lr}
 801b116:	b084      	sub	sp, #16
 801b118:	af00      	add	r7, sp, #0
 801b11a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801b11c:	4b0c      	ldr	r3, [pc, #48]	; (801b150 <SUBGRF_SetTx+0x3c>)
 801b11e:	2204      	movs	r2, #4
 801b120:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	0c1b      	lsrs	r3, r3, #16
 801b126:	b2db      	uxtb	r3, r3
 801b128:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	0a1b      	lsrs	r3, r3, #8
 801b12e:	b2db      	uxtb	r3, r3
 801b130:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	b2db      	uxtb	r3, r3
 801b136:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801b138:	f107 030c 	add.w	r3, r7, #12
 801b13c:	2203      	movs	r2, #3
 801b13e:	4619      	mov	r1, r3
 801b140:	2083      	movs	r0, #131	; 0x83
 801b142:	f000 fdff 	bl	801bd44 <SUBGRF_WriteCommand>
}
 801b146:	bf00      	nop
 801b148:	3710      	adds	r7, #16
 801b14a:	46bd      	mov	sp, r7
 801b14c:	bd80      	pop	{r7, pc}
 801b14e:	bf00      	nop
 801b150:	20001898 	.word	0x20001898

0801b154 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801b154:	b580      	push	{r7, lr}
 801b156:	b084      	sub	sp, #16
 801b158:	af00      	add	r7, sp, #0
 801b15a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b15c:	4b0c      	ldr	r3, [pc, #48]	; (801b190 <SUBGRF_SetRx+0x3c>)
 801b15e:	2205      	movs	r2, #5
 801b160:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	0c1b      	lsrs	r3, r3, #16
 801b166:	b2db      	uxtb	r3, r3
 801b168:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	0a1b      	lsrs	r3, r3, #8
 801b16e:	b2db      	uxtb	r3, r3
 801b170:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	b2db      	uxtb	r3, r3
 801b176:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b178:	f107 030c 	add.w	r3, r7, #12
 801b17c:	2203      	movs	r2, #3
 801b17e:	4619      	mov	r1, r3
 801b180:	2082      	movs	r0, #130	; 0x82
 801b182:	f000 fddf 	bl	801bd44 <SUBGRF_WriteCommand>
}
 801b186:	bf00      	nop
 801b188:	3710      	adds	r7, #16
 801b18a:	46bd      	mov	sp, r7
 801b18c:	bd80      	pop	{r7, pc}
 801b18e:	bf00      	nop
 801b190:	20001898 	.word	0x20001898

0801b194 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801b194:	b580      	push	{r7, lr}
 801b196:	b084      	sub	sp, #16
 801b198:	af00      	add	r7, sp, #0
 801b19a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b19c:	4b0e      	ldr	r3, [pc, #56]	; (801b1d8 <SUBGRF_SetRxBoosted+0x44>)
 801b19e:	2205      	movs	r2, #5
 801b1a0:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801b1a2:	2197      	movs	r1, #151	; 0x97
 801b1a4:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801b1a8:	f000 fd1c 	bl	801bbe4 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	0c1b      	lsrs	r3, r3, #16
 801b1b0:	b2db      	uxtb	r3, r3
 801b1b2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	0a1b      	lsrs	r3, r3, #8
 801b1b8:	b2db      	uxtb	r3, r3
 801b1ba:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	b2db      	uxtb	r3, r3
 801b1c0:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b1c2:	f107 030c 	add.w	r3, r7, #12
 801b1c6:	2203      	movs	r2, #3
 801b1c8:	4619      	mov	r1, r3
 801b1ca:	2082      	movs	r0, #130	; 0x82
 801b1cc:	f000 fdba 	bl	801bd44 <SUBGRF_WriteCommand>
}
 801b1d0:	bf00      	nop
 801b1d2:	3710      	adds	r7, #16
 801b1d4:	46bd      	mov	sp, r7
 801b1d6:	bd80      	pop	{r7, pc}
 801b1d8:	20001898 	.word	0x20001898

0801b1dc <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801b1dc:	b580      	push	{r7, lr}
 801b1de:	b084      	sub	sp, #16
 801b1e0:	af00      	add	r7, sp, #0
 801b1e2:	6078      	str	r0, [r7, #4]
 801b1e4:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	0c1b      	lsrs	r3, r3, #16
 801b1ea:	b2db      	uxtb	r3, r3
 801b1ec:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	0a1b      	lsrs	r3, r3, #8
 801b1f2:	b2db      	uxtb	r3, r3
 801b1f4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	b2db      	uxtb	r3, r3
 801b1fa:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801b1fc:	683b      	ldr	r3, [r7, #0]
 801b1fe:	0c1b      	lsrs	r3, r3, #16
 801b200:	b2db      	uxtb	r3, r3
 801b202:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801b204:	683b      	ldr	r3, [r7, #0]
 801b206:	0a1b      	lsrs	r3, r3, #8
 801b208:	b2db      	uxtb	r3, r3
 801b20a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801b20c:	683b      	ldr	r3, [r7, #0]
 801b20e:	b2db      	uxtb	r3, r3
 801b210:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801b212:	f107 0308 	add.w	r3, r7, #8
 801b216:	2206      	movs	r2, #6
 801b218:	4619      	mov	r1, r3
 801b21a:	2094      	movs	r0, #148	; 0x94
 801b21c:	f000 fd92 	bl	801bd44 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801b220:	4b03      	ldr	r3, [pc, #12]	; (801b230 <SUBGRF_SetRxDutyCycle+0x54>)
 801b222:	2206      	movs	r2, #6
 801b224:	701a      	strb	r2, [r3, #0]
}
 801b226:	bf00      	nop
 801b228:	3710      	adds	r7, #16
 801b22a:	46bd      	mov	sp, r7
 801b22c:	bd80      	pop	{r7, pc}
 801b22e:	bf00      	nop
 801b230:	20001898 	.word	0x20001898

0801b234 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801b234:	b580      	push	{r7, lr}
 801b236:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801b238:	2200      	movs	r2, #0
 801b23a:	2100      	movs	r1, #0
 801b23c:	20c5      	movs	r0, #197	; 0xc5
 801b23e:	f000 fd81 	bl	801bd44 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801b242:	4b02      	ldr	r3, [pc, #8]	; (801b24c <SUBGRF_SetCad+0x18>)
 801b244:	2207      	movs	r2, #7
 801b246:	701a      	strb	r2, [r3, #0]
}
 801b248:	bf00      	nop
 801b24a:	bd80      	pop	{r7, pc}
 801b24c:	20001898 	.word	0x20001898

0801b250 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801b250:	b580      	push	{r7, lr}
 801b252:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801b254:	2200      	movs	r2, #0
 801b256:	2100      	movs	r1, #0
 801b258:	20d1      	movs	r0, #209	; 0xd1
 801b25a:	f000 fd73 	bl	801bd44 <SUBGRF_WriteCommand>
}
 801b25e:	bf00      	nop
 801b260:	bd80      	pop	{r7, pc}

0801b262 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801b262:	b580      	push	{r7, lr}
 801b264:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801b266:	2200      	movs	r2, #0
 801b268:	2100      	movs	r1, #0
 801b26a:	20d2      	movs	r0, #210	; 0xd2
 801b26c:	f000 fd6a 	bl	801bd44 <SUBGRF_WriteCommand>
}
 801b270:	bf00      	nop
 801b272:	bd80      	pop	{r7, pc}

0801b274 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801b274:	b580      	push	{r7, lr}
 801b276:	b082      	sub	sp, #8
 801b278:	af00      	add	r7, sp, #0
 801b27a:	4603      	mov	r3, r0
 801b27c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801b27e:	1dfb      	adds	r3, r7, #7
 801b280:	2201      	movs	r2, #1
 801b282:	4619      	mov	r1, r3
 801b284:	209f      	movs	r0, #159	; 0x9f
 801b286:	f000 fd5d 	bl	801bd44 <SUBGRF_WriteCommand>
}
 801b28a:	bf00      	nop
 801b28c:	3708      	adds	r7, #8
 801b28e:	46bd      	mov	sp, r7
 801b290:	bd80      	pop	{r7, pc}

0801b292 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801b292:	b580      	push	{r7, lr}
 801b294:	b084      	sub	sp, #16
 801b296:	af00      	add	r7, sp, #0
 801b298:	4603      	mov	r3, r0
 801b29a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801b29c:	1dfb      	adds	r3, r7, #7
 801b29e:	2201      	movs	r2, #1
 801b2a0:	4619      	mov	r1, r3
 801b2a2:	20a0      	movs	r0, #160	; 0xa0
 801b2a4:	f000 fd4e 	bl	801bd44 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801b2a8:	79fb      	ldrb	r3, [r7, #7]
 801b2aa:	2b3f      	cmp	r3, #63	; 0x3f
 801b2ac:	d91c      	bls.n	801b2e8 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801b2ae:	79fb      	ldrb	r3, [r7, #7]
 801b2b0:	085b      	lsrs	r3, r3, #1
 801b2b2:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801b2b4:	2300      	movs	r3, #0
 801b2b6:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801b2b8:	2300      	movs	r3, #0
 801b2ba:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801b2bc:	e005      	b.n	801b2ca <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801b2be:	7bfb      	ldrb	r3, [r7, #15]
 801b2c0:	089b      	lsrs	r3, r3, #2
 801b2c2:	73fb      	strb	r3, [r7, #15]
            exp++;
 801b2c4:	7bbb      	ldrb	r3, [r7, #14]
 801b2c6:	3301      	adds	r3, #1
 801b2c8:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801b2ca:	7bfb      	ldrb	r3, [r7, #15]
 801b2cc:	2b1f      	cmp	r3, #31
 801b2ce:	d8f6      	bhi.n	801b2be <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801b2d0:	7bfb      	ldrb	r3, [r7, #15]
 801b2d2:	00db      	lsls	r3, r3, #3
 801b2d4:	b2da      	uxtb	r2, r3
 801b2d6:	7bbb      	ldrb	r3, [r7, #14]
 801b2d8:	4413      	add	r3, r2
 801b2da:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801b2dc:	7b7b      	ldrb	r3, [r7, #13]
 801b2de:	4619      	mov	r1, r3
 801b2e0:	f240 7006 	movw	r0, #1798	; 0x706
 801b2e4:	f000 fc7e 	bl	801bbe4 <SUBGRF_WriteRegister>
    }
}
 801b2e8:	bf00      	nop
 801b2ea:	3710      	adds	r7, #16
 801b2ec:	46bd      	mov	sp, r7
 801b2ee:	bd80      	pop	{r7, pc}

0801b2f0 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801b2f0:	b580      	push	{r7, lr}
 801b2f2:	b082      	sub	sp, #8
 801b2f4:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801b2f6:	f7f1 fc9c 	bl	800cc32 <RBI_IsDCDC>
 801b2fa:	4603      	mov	r3, r0
 801b2fc:	2b01      	cmp	r3, #1
 801b2fe:	d102      	bne.n	801b306 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801b300:	2301      	movs	r3, #1
 801b302:	71fb      	strb	r3, [r7, #7]
 801b304:	e001      	b.n	801b30a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801b306:	2300      	movs	r3, #0
 801b308:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801b30a:	1dfb      	adds	r3, r7, #7
 801b30c:	2201      	movs	r2, #1
 801b30e:	4619      	mov	r1, r3
 801b310:	2096      	movs	r0, #150	; 0x96
 801b312:	f000 fd17 	bl	801bd44 <SUBGRF_WriteCommand>
}
 801b316:	bf00      	nop
 801b318:	3708      	adds	r7, #8
 801b31a:	46bd      	mov	sp, r7
 801b31c:	bd80      	pop	{r7, pc}

0801b31e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801b31e:	b580      	push	{r7, lr}
 801b320:	b084      	sub	sp, #16
 801b322:	af00      	add	r7, sp, #0
 801b324:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b326:	793b      	ldrb	r3, [r7, #4]
 801b328:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801b32c:	b2db      	uxtb	r3, r3
 801b32e:	019b      	lsls	r3, r3, #6
 801b330:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b332:	793b      	ldrb	r3, [r7, #4]
 801b334:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801b338:	b2db      	uxtb	r3, r3
 801b33a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b33c:	b25b      	sxtb	r3, r3
 801b33e:	4313      	orrs	r3, r2
 801b340:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b342:	793b      	ldrb	r3, [r7, #4]
 801b344:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801b348:	b2db      	uxtb	r3, r3
 801b34a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b34c:	b25b      	sxtb	r3, r3
 801b34e:	4313      	orrs	r3, r2
 801b350:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b352:	793b      	ldrb	r3, [r7, #4]
 801b354:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801b358:	b2db      	uxtb	r3, r3
 801b35a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b35c:	b25b      	sxtb	r3, r3
 801b35e:	4313      	orrs	r3, r2
 801b360:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b362:	793b      	ldrb	r3, [r7, #4]
 801b364:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b368:	b2db      	uxtb	r3, r3
 801b36a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b36c:	b25b      	sxtb	r3, r3
 801b36e:	4313      	orrs	r3, r2
 801b370:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b372:	793b      	ldrb	r3, [r7, #4]
 801b374:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b378:	b2db      	uxtb	r3, r3
 801b37a:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b37c:	b25b      	sxtb	r3, r3
 801b37e:	4313      	orrs	r3, r2
 801b380:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801b382:	793b      	ldrb	r3, [r7, #4]
 801b384:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b388:	b2db      	uxtb	r3, r3
 801b38a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b38c:	4313      	orrs	r3, r2
 801b38e:	b25b      	sxtb	r3, r3
 801b390:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b392:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801b394:	f107 030f 	add.w	r3, r7, #15
 801b398:	2201      	movs	r2, #1
 801b39a:	4619      	mov	r1, r3
 801b39c:	2089      	movs	r0, #137	; 0x89
 801b39e:	f000 fcd1 	bl	801bd44 <SUBGRF_WriteCommand>
}
 801b3a2:	bf00      	nop
 801b3a4:	3710      	adds	r7, #16
 801b3a6:	46bd      	mov	sp, r7
 801b3a8:	bd80      	pop	{r7, pc}
	...

0801b3ac <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801b3ac:	b580      	push	{r7, lr}
 801b3ae:	b084      	sub	sp, #16
 801b3b0:	af00      	add	r7, sp, #0
 801b3b2:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	4a1d      	ldr	r2, [pc, #116]	; (801b42c <SUBGRF_CalibrateImage+0x80>)
 801b3b8:	4293      	cmp	r3, r2
 801b3ba:	d904      	bls.n	801b3c6 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801b3bc:	23e1      	movs	r3, #225	; 0xe1
 801b3be:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801b3c0:	23e9      	movs	r3, #233	; 0xe9
 801b3c2:	737b      	strb	r3, [r7, #13]
 801b3c4:	e027      	b.n	801b416 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	4a19      	ldr	r2, [pc, #100]	; (801b430 <SUBGRF_CalibrateImage+0x84>)
 801b3ca:	4293      	cmp	r3, r2
 801b3cc:	d904      	bls.n	801b3d8 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801b3ce:	23d7      	movs	r3, #215	; 0xd7
 801b3d0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801b3d2:	23db      	movs	r3, #219	; 0xdb
 801b3d4:	737b      	strb	r3, [r7, #13]
 801b3d6:	e01e      	b.n	801b416 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	4a16      	ldr	r2, [pc, #88]	; (801b434 <SUBGRF_CalibrateImage+0x88>)
 801b3dc:	4293      	cmp	r3, r2
 801b3de:	d904      	bls.n	801b3ea <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801b3e0:	23c1      	movs	r3, #193	; 0xc1
 801b3e2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801b3e4:	23c5      	movs	r3, #197	; 0xc5
 801b3e6:	737b      	strb	r3, [r7, #13]
 801b3e8:	e015      	b.n	801b416 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	4a12      	ldr	r2, [pc, #72]	; (801b438 <SUBGRF_CalibrateImage+0x8c>)
 801b3ee:	4293      	cmp	r3, r2
 801b3f0:	d904      	bls.n	801b3fc <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801b3f2:	2375      	movs	r3, #117	; 0x75
 801b3f4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801b3f6:	2381      	movs	r3, #129	; 0x81
 801b3f8:	737b      	strb	r3, [r7, #13]
 801b3fa:	e00c      	b.n	801b416 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	4a0f      	ldr	r2, [pc, #60]	; (801b43c <SUBGRF_CalibrateImage+0x90>)
 801b400:	4293      	cmp	r3, r2
 801b402:	d904      	bls.n	801b40e <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801b404:	236b      	movs	r3, #107	; 0x6b
 801b406:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801b408:	236f      	movs	r3, #111	; 0x6f
 801b40a:	737b      	strb	r3, [r7, #13]
 801b40c:	e003      	b.n	801b416 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801b40e:	2329      	movs	r3, #41	; 0x29
 801b410:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801b412:	232b      	movs	r3, #43	; 0x2b
 801b414:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801b416:	f107 030c 	add.w	r3, r7, #12
 801b41a:	2202      	movs	r2, #2
 801b41c:	4619      	mov	r1, r3
 801b41e:	2098      	movs	r0, #152	; 0x98
 801b420:	f000 fc90 	bl	801bd44 <SUBGRF_WriteCommand>
}
 801b424:	bf00      	nop
 801b426:	3710      	adds	r7, #16
 801b428:	46bd      	mov	sp, r7
 801b42a:	bd80      	pop	{r7, pc}
 801b42c:	35a4e900 	.word	0x35a4e900
 801b430:	32a9f880 	.word	0x32a9f880
 801b434:	2de54480 	.word	0x2de54480
 801b438:	1b6b0b00 	.word	0x1b6b0b00
 801b43c:	1954fc40 	.word	0x1954fc40

0801b440 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801b440:	b590      	push	{r4, r7, lr}
 801b442:	b085      	sub	sp, #20
 801b444:	af00      	add	r7, sp, #0
 801b446:	4604      	mov	r4, r0
 801b448:	4608      	mov	r0, r1
 801b44a:	4611      	mov	r1, r2
 801b44c:	461a      	mov	r2, r3
 801b44e:	4623      	mov	r3, r4
 801b450:	71fb      	strb	r3, [r7, #7]
 801b452:	4603      	mov	r3, r0
 801b454:	71bb      	strb	r3, [r7, #6]
 801b456:	460b      	mov	r3, r1
 801b458:	717b      	strb	r3, [r7, #5]
 801b45a:	4613      	mov	r3, r2
 801b45c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801b45e:	79fb      	ldrb	r3, [r7, #7]
 801b460:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801b462:	79bb      	ldrb	r3, [r7, #6]
 801b464:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801b466:	797b      	ldrb	r3, [r7, #5]
 801b468:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801b46a:	793b      	ldrb	r3, [r7, #4]
 801b46c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801b46e:	f107 030c 	add.w	r3, r7, #12
 801b472:	2204      	movs	r2, #4
 801b474:	4619      	mov	r1, r3
 801b476:	2095      	movs	r0, #149	; 0x95
 801b478:	f000 fc64 	bl	801bd44 <SUBGRF_WriteCommand>
}
 801b47c:	bf00      	nop
 801b47e:	3714      	adds	r7, #20
 801b480:	46bd      	mov	sp, r7
 801b482:	bd90      	pop	{r4, r7, pc}

0801b484 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801b484:	b590      	push	{r4, r7, lr}
 801b486:	b085      	sub	sp, #20
 801b488:	af00      	add	r7, sp, #0
 801b48a:	4604      	mov	r4, r0
 801b48c:	4608      	mov	r0, r1
 801b48e:	4611      	mov	r1, r2
 801b490:	461a      	mov	r2, r3
 801b492:	4623      	mov	r3, r4
 801b494:	80fb      	strh	r3, [r7, #6]
 801b496:	4603      	mov	r3, r0
 801b498:	80bb      	strh	r3, [r7, #4]
 801b49a:	460b      	mov	r3, r1
 801b49c:	807b      	strh	r3, [r7, #2]
 801b49e:	4613      	mov	r3, r2
 801b4a0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801b4a2:	88fb      	ldrh	r3, [r7, #6]
 801b4a4:	0a1b      	lsrs	r3, r3, #8
 801b4a6:	b29b      	uxth	r3, r3
 801b4a8:	b2db      	uxtb	r3, r3
 801b4aa:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801b4ac:	88fb      	ldrh	r3, [r7, #6]
 801b4ae:	b2db      	uxtb	r3, r3
 801b4b0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801b4b2:	88bb      	ldrh	r3, [r7, #4]
 801b4b4:	0a1b      	lsrs	r3, r3, #8
 801b4b6:	b29b      	uxth	r3, r3
 801b4b8:	b2db      	uxtb	r3, r3
 801b4ba:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801b4bc:	88bb      	ldrh	r3, [r7, #4]
 801b4be:	b2db      	uxtb	r3, r3
 801b4c0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801b4c2:	887b      	ldrh	r3, [r7, #2]
 801b4c4:	0a1b      	lsrs	r3, r3, #8
 801b4c6:	b29b      	uxth	r3, r3
 801b4c8:	b2db      	uxtb	r3, r3
 801b4ca:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801b4cc:	887b      	ldrh	r3, [r7, #2]
 801b4ce:	b2db      	uxtb	r3, r3
 801b4d0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801b4d2:	883b      	ldrh	r3, [r7, #0]
 801b4d4:	0a1b      	lsrs	r3, r3, #8
 801b4d6:	b29b      	uxth	r3, r3
 801b4d8:	b2db      	uxtb	r3, r3
 801b4da:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801b4dc:	883b      	ldrh	r3, [r7, #0]
 801b4de:	b2db      	uxtb	r3, r3
 801b4e0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801b4e2:	f107 0308 	add.w	r3, r7, #8
 801b4e6:	2208      	movs	r2, #8
 801b4e8:	4619      	mov	r1, r3
 801b4ea:	2008      	movs	r0, #8
 801b4ec:	f000 fc2a 	bl	801bd44 <SUBGRF_WriteCommand>
}
 801b4f0:	bf00      	nop
 801b4f2:	3714      	adds	r7, #20
 801b4f4:	46bd      	mov	sp, r7
 801b4f6:	bd90      	pop	{r4, r7, pc}

0801b4f8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801b4f8:	b580      	push	{r7, lr}
 801b4fa:	b084      	sub	sp, #16
 801b4fc:	af00      	add	r7, sp, #0
 801b4fe:	4603      	mov	r3, r0
 801b500:	6039      	str	r1, [r7, #0]
 801b502:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801b504:	79fb      	ldrb	r3, [r7, #7]
 801b506:	f003 0307 	and.w	r3, r3, #7
 801b50a:	b2db      	uxtb	r3, r3
 801b50c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b50e:	683b      	ldr	r3, [r7, #0]
 801b510:	0c1b      	lsrs	r3, r3, #16
 801b512:	b2db      	uxtb	r3, r3
 801b514:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b516:	683b      	ldr	r3, [r7, #0]
 801b518:	0a1b      	lsrs	r3, r3, #8
 801b51a:	b2db      	uxtb	r3, r3
 801b51c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801b51e:	683b      	ldr	r3, [r7, #0]
 801b520:	b2db      	uxtb	r3, r3
 801b522:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801b524:	f107 030c 	add.w	r3, r7, #12
 801b528:	2204      	movs	r2, #4
 801b52a:	4619      	mov	r1, r3
 801b52c:	2097      	movs	r0, #151	; 0x97
 801b52e:	f000 fc09 	bl	801bd44 <SUBGRF_WriteCommand>
}
 801b532:	bf00      	nop
 801b534:	3710      	adds	r7, #16
 801b536:	46bd      	mov	sp, r7
 801b538:	bd80      	pop	{r7, pc}
	...

0801b53c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801b53c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b540:	b084      	sub	sp, #16
 801b542:	af00      	add	r7, sp, #0
 801b544:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801b546:	2300      	movs	r3, #0
 801b548:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801b54a:	4b1d      	ldr	r3, [pc, #116]	; (801b5c0 <SUBGRF_SetRfFrequency+0x84>)
 801b54c:	781b      	ldrb	r3, [r3, #0]
 801b54e:	f083 0301 	eor.w	r3, r3, #1
 801b552:	b2db      	uxtb	r3, r3
 801b554:	2b00      	cmp	r3, #0
 801b556:	d005      	beq.n	801b564 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801b558:	6878      	ldr	r0, [r7, #4]
 801b55a:	f7ff ff27 	bl	801b3ac <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801b55e:	4b18      	ldr	r3, [pc, #96]	; (801b5c0 <SUBGRF_SetRfFrequency+0x84>)
 801b560:	2201      	movs	r2, #1
 801b562:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	2200      	movs	r2, #0
 801b568:	461c      	mov	r4, r3
 801b56a:	4615      	mov	r5, r2
 801b56c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b570:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b574:	4a13      	ldr	r2, [pc, #76]	; (801b5c4 <SUBGRF_SetRfFrequency+0x88>)
 801b576:	f04f 0300 	mov.w	r3, #0
 801b57a:	4640      	mov	r0, r8
 801b57c:	4649      	mov	r1, r9
 801b57e:	f7e5 fc05 	bl	8000d8c <__aeabi_uldivmod>
 801b582:	4602      	mov	r2, r0
 801b584:	460b      	mov	r3, r1
 801b586:	4613      	mov	r3, r2
 801b588:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801b58a:	68fb      	ldr	r3, [r7, #12]
 801b58c:	0e1b      	lsrs	r3, r3, #24
 801b58e:	b2db      	uxtb	r3, r3
 801b590:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801b592:	68fb      	ldr	r3, [r7, #12]
 801b594:	0c1b      	lsrs	r3, r3, #16
 801b596:	b2db      	uxtb	r3, r3
 801b598:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801b59a:	68fb      	ldr	r3, [r7, #12]
 801b59c:	0a1b      	lsrs	r3, r3, #8
 801b59e:	b2db      	uxtb	r3, r3
 801b5a0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801b5a2:	68fb      	ldr	r3, [r7, #12]
 801b5a4:	b2db      	uxtb	r3, r3
 801b5a6:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801b5a8:	f107 0308 	add.w	r3, r7, #8
 801b5ac:	2204      	movs	r2, #4
 801b5ae:	4619      	mov	r1, r3
 801b5b0:	2086      	movs	r0, #134	; 0x86
 801b5b2:	f000 fbc7 	bl	801bd44 <SUBGRF_WriteCommand>
}
 801b5b6:	bf00      	nop
 801b5b8:	3710      	adds	r7, #16
 801b5ba:	46bd      	mov	sp, r7
 801b5bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b5c0:	200018a0 	.word	0x200018a0
 801b5c4:	01e84800 	.word	0x01e84800

0801b5c8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801b5c8:	b580      	push	{r7, lr}
 801b5ca:	b082      	sub	sp, #8
 801b5cc:	af00      	add	r7, sp, #0
 801b5ce:	4603      	mov	r3, r0
 801b5d0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801b5d2:	79fa      	ldrb	r2, [r7, #7]
 801b5d4:	4b09      	ldr	r3, [pc, #36]	; (801b5fc <SUBGRF_SetPacketType+0x34>)
 801b5d6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801b5d8:	79fb      	ldrb	r3, [r7, #7]
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	d104      	bne.n	801b5e8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801b5de:	2100      	movs	r1, #0
 801b5e0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801b5e4:	f000 fafe 	bl	801bbe4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801b5e8:	1dfb      	adds	r3, r7, #7
 801b5ea:	2201      	movs	r2, #1
 801b5ec:	4619      	mov	r1, r3
 801b5ee:	208a      	movs	r0, #138	; 0x8a
 801b5f0:	f000 fba8 	bl	801bd44 <SUBGRF_WriteCommand>
}
 801b5f4:	bf00      	nop
 801b5f6:	3708      	adds	r7, #8
 801b5f8:	46bd      	mov	sp, r7
 801b5fa:	bd80      	pop	{r7, pc}
 801b5fc:	20001899 	.word	0x20001899

0801b600 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801b600:	b480      	push	{r7}
 801b602:	af00      	add	r7, sp, #0
    return PacketType;
 801b604:	4b02      	ldr	r3, [pc, #8]	; (801b610 <SUBGRF_GetPacketType+0x10>)
 801b606:	781b      	ldrb	r3, [r3, #0]
}
 801b608:	4618      	mov	r0, r3
 801b60a:	46bd      	mov	sp, r7
 801b60c:	bc80      	pop	{r7}
 801b60e:	4770      	bx	lr
 801b610:	20001899 	.word	0x20001899

0801b614 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801b614:	b580      	push	{r7, lr}
 801b616:	b084      	sub	sp, #16
 801b618:	af00      	add	r7, sp, #0
 801b61a:	4603      	mov	r3, r0
 801b61c:	71fb      	strb	r3, [r7, #7]
 801b61e:	460b      	mov	r3, r1
 801b620:	71bb      	strb	r3, [r7, #6]
 801b622:	4613      	mov	r3, r2
 801b624:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801b626:	79fb      	ldrb	r3, [r7, #7]
 801b628:	2b01      	cmp	r3, #1
 801b62a:	d149      	bne.n	801b6c0 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801b62c:	2000      	movs	r0, #0
 801b62e:	f7f1 fb07 	bl	800cc40 <RBI_GetRFOMaxPowerConfig>
 801b632:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801b634:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b638:	68fa      	ldr	r2, [r7, #12]
 801b63a:	429a      	cmp	r2, r3
 801b63c:	da01      	bge.n	801b642 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801b63e:	68fb      	ldr	r3, [r7, #12]
 801b640:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801b642:	68fb      	ldr	r3, [r7, #12]
 801b644:	2b0e      	cmp	r3, #14
 801b646:	d10e      	bne.n	801b666 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801b648:	2301      	movs	r3, #1
 801b64a:	2201      	movs	r2, #1
 801b64c:	2100      	movs	r1, #0
 801b64e:	2004      	movs	r0, #4
 801b650:	f7ff fef6 	bl	801b440 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b654:	79ba      	ldrb	r2, [r7, #6]
 801b656:	68fb      	ldr	r3, [r7, #12]
 801b658:	b2db      	uxtb	r3, r3
 801b65a:	1ad3      	subs	r3, r2, r3
 801b65c:	b2db      	uxtb	r3, r3
 801b65e:	330e      	adds	r3, #14
 801b660:	b2db      	uxtb	r3, r3
 801b662:	71bb      	strb	r3, [r7, #6]
 801b664:	e01f      	b.n	801b6a6 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801b666:	68fb      	ldr	r3, [r7, #12]
 801b668:	2b0a      	cmp	r3, #10
 801b66a:	d10e      	bne.n	801b68a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801b66c:	2301      	movs	r3, #1
 801b66e:	2201      	movs	r2, #1
 801b670:	2100      	movs	r1, #0
 801b672:	2001      	movs	r0, #1
 801b674:	f7ff fee4 	bl	801b440 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801b678:	79ba      	ldrb	r2, [r7, #6]
 801b67a:	68fb      	ldr	r3, [r7, #12]
 801b67c:	b2db      	uxtb	r3, r3
 801b67e:	1ad3      	subs	r3, r2, r3
 801b680:	b2db      	uxtb	r3, r3
 801b682:	330d      	adds	r3, #13
 801b684:	b2db      	uxtb	r3, r3
 801b686:	71bb      	strb	r3, [r7, #6]
 801b688:	e00d      	b.n	801b6a6 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801b68a:	2301      	movs	r3, #1
 801b68c:	2201      	movs	r2, #1
 801b68e:	2100      	movs	r1, #0
 801b690:	2007      	movs	r0, #7
 801b692:	f7ff fed5 	bl	801b440 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b696:	79ba      	ldrb	r2, [r7, #6]
 801b698:	68fb      	ldr	r3, [r7, #12]
 801b69a:	b2db      	uxtb	r3, r3
 801b69c:	1ad3      	subs	r3, r2, r3
 801b69e:	b2db      	uxtb	r3, r3
 801b6a0:	330e      	adds	r3, #14
 801b6a2:	b2db      	uxtb	r3, r3
 801b6a4:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801b6a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b6aa:	f113 0f11 	cmn.w	r3, #17
 801b6ae:	da01      	bge.n	801b6b4 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801b6b0:	23ef      	movs	r3, #239	; 0xef
 801b6b2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801b6b4:	2118      	movs	r1, #24
 801b6b6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b6ba:	f000 fa93 	bl	801bbe4 <SUBGRF_WriteRegister>
 801b6be:	e067      	b.n	801b790 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801b6c0:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b6c4:	f000 faa2 	bl	801bc0c <SUBGRF_ReadRegister>
 801b6c8:	4603      	mov	r3, r0
 801b6ca:	f043 031e 	orr.w	r3, r3, #30
 801b6ce:	b2db      	uxtb	r3, r3
 801b6d0:	4619      	mov	r1, r3
 801b6d2:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b6d6:	f000 fa85 	bl	801bbe4 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801b6da:	2001      	movs	r0, #1
 801b6dc:	f7f1 fab0 	bl	800cc40 <RBI_GetRFOMaxPowerConfig>
 801b6e0:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801b6e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b6e6:	68fa      	ldr	r2, [r7, #12]
 801b6e8:	429a      	cmp	r2, r3
 801b6ea:	da01      	bge.n	801b6f0 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801b6ec:	68fb      	ldr	r3, [r7, #12]
 801b6ee:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801b6f0:	68fb      	ldr	r3, [r7, #12]
 801b6f2:	2b14      	cmp	r3, #20
 801b6f4:	d10e      	bne.n	801b714 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801b6f6:	2301      	movs	r3, #1
 801b6f8:	2200      	movs	r2, #0
 801b6fa:	2105      	movs	r1, #5
 801b6fc:	2003      	movs	r0, #3
 801b6fe:	f7ff fe9f 	bl	801b440 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b702:	79ba      	ldrb	r2, [r7, #6]
 801b704:	68fb      	ldr	r3, [r7, #12]
 801b706:	b2db      	uxtb	r3, r3
 801b708:	1ad3      	subs	r3, r2, r3
 801b70a:	b2db      	uxtb	r3, r3
 801b70c:	3316      	adds	r3, #22
 801b70e:	b2db      	uxtb	r3, r3
 801b710:	71bb      	strb	r3, [r7, #6]
 801b712:	e031      	b.n	801b778 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801b714:	68fb      	ldr	r3, [r7, #12]
 801b716:	2b11      	cmp	r3, #17
 801b718:	d10e      	bne.n	801b738 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801b71a:	2301      	movs	r3, #1
 801b71c:	2200      	movs	r2, #0
 801b71e:	2103      	movs	r1, #3
 801b720:	2002      	movs	r0, #2
 801b722:	f7ff fe8d 	bl	801b440 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b726:	79ba      	ldrb	r2, [r7, #6]
 801b728:	68fb      	ldr	r3, [r7, #12]
 801b72a:	b2db      	uxtb	r3, r3
 801b72c:	1ad3      	subs	r3, r2, r3
 801b72e:	b2db      	uxtb	r3, r3
 801b730:	3316      	adds	r3, #22
 801b732:	b2db      	uxtb	r3, r3
 801b734:	71bb      	strb	r3, [r7, #6]
 801b736:	e01f      	b.n	801b778 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	2b0e      	cmp	r3, #14
 801b73c:	d10e      	bne.n	801b75c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801b73e:	2301      	movs	r3, #1
 801b740:	2200      	movs	r2, #0
 801b742:	2102      	movs	r1, #2
 801b744:	2002      	movs	r0, #2
 801b746:	f7ff fe7b 	bl	801b440 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b74a:	79ba      	ldrb	r2, [r7, #6]
 801b74c:	68fb      	ldr	r3, [r7, #12]
 801b74e:	b2db      	uxtb	r3, r3
 801b750:	1ad3      	subs	r3, r2, r3
 801b752:	b2db      	uxtb	r3, r3
 801b754:	330e      	adds	r3, #14
 801b756:	b2db      	uxtb	r3, r3
 801b758:	71bb      	strb	r3, [r7, #6]
 801b75a:	e00d      	b.n	801b778 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801b75c:	2301      	movs	r3, #1
 801b75e:	2200      	movs	r2, #0
 801b760:	2107      	movs	r1, #7
 801b762:	2004      	movs	r0, #4
 801b764:	f7ff fe6c 	bl	801b440 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b768:	79ba      	ldrb	r2, [r7, #6]
 801b76a:	68fb      	ldr	r3, [r7, #12]
 801b76c:	b2db      	uxtb	r3, r3
 801b76e:	1ad3      	subs	r3, r2, r3
 801b770:	b2db      	uxtb	r3, r3
 801b772:	3316      	adds	r3, #22
 801b774:	b2db      	uxtb	r3, r3
 801b776:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801b778:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b77c:	f113 0f09 	cmn.w	r3, #9
 801b780:	da01      	bge.n	801b786 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801b782:	23f7      	movs	r3, #247	; 0xf7
 801b784:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801b786:	2138      	movs	r1, #56	; 0x38
 801b788:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b78c:	f000 fa2a 	bl	801bbe4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801b790:	79bb      	ldrb	r3, [r7, #6]
 801b792:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801b794:	797b      	ldrb	r3, [r7, #5]
 801b796:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801b798:	f107 0308 	add.w	r3, r7, #8
 801b79c:	2202      	movs	r2, #2
 801b79e:	4619      	mov	r1, r3
 801b7a0:	208e      	movs	r0, #142	; 0x8e
 801b7a2:	f000 facf 	bl	801bd44 <SUBGRF_WriteCommand>
}
 801b7a6:	bf00      	nop
 801b7a8:	3710      	adds	r7, #16
 801b7aa:	46bd      	mov	sp, r7
 801b7ac:	bd80      	pop	{r7, pc}
	...

0801b7b0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801b7b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b7b4:	b086      	sub	sp, #24
 801b7b6:	af00      	add	r7, sp, #0
 801b7b8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801b7ba:	2300      	movs	r3, #0
 801b7bc:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b7be:	4a61      	ldr	r2, [pc, #388]	; (801b944 <SUBGRF_SetModulationParams+0x194>)
 801b7c0:	f107 0308 	add.w	r3, r7, #8
 801b7c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b7c8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	781a      	ldrb	r2, [r3, #0]
 801b7d0:	4b5d      	ldr	r3, [pc, #372]	; (801b948 <SUBGRF_SetModulationParams+0x198>)
 801b7d2:	781b      	ldrb	r3, [r3, #0]
 801b7d4:	429a      	cmp	r2, r3
 801b7d6:	d004      	beq.n	801b7e2 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	781b      	ldrb	r3, [r3, #0]
 801b7dc:	4618      	mov	r0, r3
 801b7de:	f7ff fef3 	bl	801b5c8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	781b      	ldrb	r3, [r3, #0]
 801b7e6:	2b03      	cmp	r3, #3
 801b7e8:	f200 80a5 	bhi.w	801b936 <SUBGRF_SetModulationParams+0x186>
 801b7ec:	a201      	add	r2, pc, #4	; (adr r2, 801b7f4 <SUBGRF_SetModulationParams+0x44>)
 801b7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b7f2:	bf00      	nop
 801b7f4:	0801b805 	.word	0x0801b805
 801b7f8:	0801b8c5 	.word	0x0801b8c5
 801b7fc:	0801b887 	.word	0x0801b887
 801b800:	0801b8f3 	.word	0x0801b8f3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801b804:	2308      	movs	r3, #8
 801b806:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	685b      	ldr	r3, [r3, #4]
 801b80c:	4a4f      	ldr	r2, [pc, #316]	; (801b94c <SUBGRF_SetModulationParams+0x19c>)
 801b80e:	fbb2 f3f3 	udiv	r3, r2, r3
 801b812:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b814:	697b      	ldr	r3, [r7, #20]
 801b816:	0c1b      	lsrs	r3, r3, #16
 801b818:	b2db      	uxtb	r3, r3
 801b81a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b81c:	697b      	ldr	r3, [r7, #20]
 801b81e:	0a1b      	lsrs	r3, r3, #8
 801b820:	b2db      	uxtb	r3, r3
 801b822:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b824:	697b      	ldr	r3, [r7, #20]
 801b826:	b2db      	uxtb	r3, r3
 801b828:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	7b1b      	ldrb	r3, [r3, #12]
 801b82e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	7b5b      	ldrb	r3, [r3, #13]
 801b834:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	689b      	ldr	r3, [r3, #8]
 801b83a:	2200      	movs	r2, #0
 801b83c:	461c      	mov	r4, r3
 801b83e:	4615      	mov	r5, r2
 801b840:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b844:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b848:	4a41      	ldr	r2, [pc, #260]	; (801b950 <SUBGRF_SetModulationParams+0x1a0>)
 801b84a:	f04f 0300 	mov.w	r3, #0
 801b84e:	4640      	mov	r0, r8
 801b850:	4649      	mov	r1, r9
 801b852:	f7e5 fa9b 	bl	8000d8c <__aeabi_uldivmod>
 801b856:	4602      	mov	r2, r0
 801b858:	460b      	mov	r3, r1
 801b85a:	4613      	mov	r3, r2
 801b85c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801b85e:	697b      	ldr	r3, [r7, #20]
 801b860:	0c1b      	lsrs	r3, r3, #16
 801b862:	b2db      	uxtb	r3, r3
 801b864:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801b866:	697b      	ldr	r3, [r7, #20]
 801b868:	0a1b      	lsrs	r3, r3, #8
 801b86a:	b2db      	uxtb	r3, r3
 801b86c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801b86e:	697b      	ldr	r3, [r7, #20]
 801b870:	b2db      	uxtb	r3, r3
 801b872:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b874:	7cfb      	ldrb	r3, [r7, #19]
 801b876:	b29a      	uxth	r2, r3
 801b878:	f107 0308 	add.w	r3, r7, #8
 801b87c:	4619      	mov	r1, r3
 801b87e:	208b      	movs	r0, #139	; 0x8b
 801b880:	f000 fa60 	bl	801bd44 <SUBGRF_WriteCommand>
        break;
 801b884:	e058      	b.n	801b938 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801b886:	2304      	movs	r3, #4
 801b888:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	691b      	ldr	r3, [r3, #16]
 801b88e:	4a2f      	ldr	r2, [pc, #188]	; (801b94c <SUBGRF_SetModulationParams+0x19c>)
 801b890:	fbb2 f3f3 	udiv	r3, r2, r3
 801b894:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b896:	697b      	ldr	r3, [r7, #20]
 801b898:	0c1b      	lsrs	r3, r3, #16
 801b89a:	b2db      	uxtb	r3, r3
 801b89c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b89e:	697b      	ldr	r3, [r7, #20]
 801b8a0:	0a1b      	lsrs	r3, r3, #8
 801b8a2:	b2db      	uxtb	r3, r3
 801b8a4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b8a6:	697b      	ldr	r3, [r7, #20]
 801b8a8:	b2db      	uxtb	r3, r3
 801b8aa:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	7d1b      	ldrb	r3, [r3, #20]
 801b8b0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b8b2:	7cfb      	ldrb	r3, [r7, #19]
 801b8b4:	b29a      	uxth	r2, r3
 801b8b6:	f107 0308 	add.w	r3, r7, #8
 801b8ba:	4619      	mov	r1, r3
 801b8bc:	208b      	movs	r0, #139	; 0x8b
 801b8be:	f000 fa41 	bl	801bd44 <SUBGRF_WriteCommand>
        break;
 801b8c2:	e039      	b.n	801b938 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801b8c4:	2304      	movs	r3, #4
 801b8c6:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	7e1b      	ldrb	r3, [r3, #24]
 801b8cc:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	7e5b      	ldrb	r3, [r3, #25]
 801b8d2:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	7e9b      	ldrb	r3, [r3, #26]
 801b8d8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	7edb      	ldrb	r3, [r3, #27]
 801b8de:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b8e0:	7cfb      	ldrb	r3, [r7, #19]
 801b8e2:	b29a      	uxth	r2, r3
 801b8e4:	f107 0308 	add.w	r3, r7, #8
 801b8e8:	4619      	mov	r1, r3
 801b8ea:	208b      	movs	r0, #139	; 0x8b
 801b8ec:	f000 fa2a 	bl	801bd44 <SUBGRF_WriteCommand>

        break;
 801b8f0:	e022      	b.n	801b938 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801b8f2:	2305      	movs	r3, #5
 801b8f4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	685b      	ldr	r3, [r3, #4]
 801b8fa:	4a14      	ldr	r2, [pc, #80]	; (801b94c <SUBGRF_SetModulationParams+0x19c>)
 801b8fc:	fbb2 f3f3 	udiv	r3, r2, r3
 801b900:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b902:	697b      	ldr	r3, [r7, #20]
 801b904:	0c1b      	lsrs	r3, r3, #16
 801b906:	b2db      	uxtb	r3, r3
 801b908:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b90a:	697b      	ldr	r3, [r7, #20]
 801b90c:	0a1b      	lsrs	r3, r3, #8
 801b90e:	b2db      	uxtb	r3, r3
 801b910:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b912:	697b      	ldr	r3, [r7, #20]
 801b914:	b2db      	uxtb	r3, r3
 801b916:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	7b1b      	ldrb	r3, [r3, #12]
 801b91c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	7b5b      	ldrb	r3, [r3, #13]
 801b922:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b924:	7cfb      	ldrb	r3, [r7, #19]
 801b926:	b29a      	uxth	r2, r3
 801b928:	f107 0308 	add.w	r3, r7, #8
 801b92c:	4619      	mov	r1, r3
 801b92e:	208b      	movs	r0, #139	; 0x8b
 801b930:	f000 fa08 	bl	801bd44 <SUBGRF_WriteCommand>
        break;
 801b934:	e000      	b.n	801b938 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801b936:	bf00      	nop
    }
}
 801b938:	bf00      	nop
 801b93a:	3718      	adds	r7, #24
 801b93c:	46bd      	mov	sp, r7
 801b93e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b942:	bf00      	nop
 801b944:	0801e358 	.word	0x0801e358
 801b948:	20001899 	.word	0x20001899
 801b94c:	3d090000 	.word	0x3d090000
 801b950:	01e84800 	.word	0x01e84800

0801b954 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801b954:	b580      	push	{r7, lr}
 801b956:	b086      	sub	sp, #24
 801b958:	af00      	add	r7, sp, #0
 801b95a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801b95c:	2300      	movs	r3, #0
 801b95e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b960:	4a48      	ldr	r2, [pc, #288]	; (801ba84 <SUBGRF_SetPacketParams+0x130>)
 801b962:	f107 030c 	add.w	r3, r7, #12
 801b966:	ca07      	ldmia	r2, {r0, r1, r2}
 801b968:	c303      	stmia	r3!, {r0, r1}
 801b96a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	781a      	ldrb	r2, [r3, #0]
 801b970:	4b45      	ldr	r3, [pc, #276]	; (801ba88 <SUBGRF_SetPacketParams+0x134>)
 801b972:	781b      	ldrb	r3, [r3, #0]
 801b974:	429a      	cmp	r2, r3
 801b976:	d004      	beq.n	801b982 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	781b      	ldrb	r3, [r3, #0]
 801b97c:	4618      	mov	r0, r3
 801b97e:	f7ff fe23 	bl	801b5c8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	781b      	ldrb	r3, [r3, #0]
 801b986:	2b03      	cmp	r3, #3
 801b988:	d878      	bhi.n	801ba7c <SUBGRF_SetPacketParams+0x128>
 801b98a:	a201      	add	r2, pc, #4	; (adr r2, 801b990 <SUBGRF_SetPacketParams+0x3c>)
 801b98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b990:	0801b9a1 	.word	0x0801b9a1
 801b994:	0801ba31 	.word	0x0801ba31
 801b998:	0801ba25 	.word	0x0801ba25
 801b99c:	0801b9a1 	.word	0x0801b9a1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	7a5b      	ldrb	r3, [r3, #9]
 801b9a4:	2bf1      	cmp	r3, #241	; 0xf1
 801b9a6:	d10a      	bne.n	801b9be <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801b9a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b9ac:	f7ff faaa 	bl	801af04 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801b9b0:	f248 0005 	movw	r0, #32773	; 0x8005
 801b9b4:	f7ff fac6 	bl	801af44 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801b9b8:	2302      	movs	r3, #2
 801b9ba:	75bb      	strb	r3, [r7, #22]
 801b9bc:	e011      	b.n	801b9e2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	7a5b      	ldrb	r3, [r3, #9]
 801b9c2:	2bf2      	cmp	r3, #242	; 0xf2
 801b9c4:	d10a      	bne.n	801b9dc <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801b9c6:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801b9ca:	f7ff fa9b 	bl	801af04 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801b9ce:	f241 0021 	movw	r0, #4129	; 0x1021
 801b9d2:	f7ff fab7 	bl	801af44 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801b9d6:	2306      	movs	r3, #6
 801b9d8:	75bb      	strb	r3, [r7, #22]
 801b9da:	e002      	b.n	801b9e2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	7a5b      	ldrb	r3, [r3, #9]
 801b9e0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801b9e2:	2309      	movs	r3, #9
 801b9e4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	885b      	ldrh	r3, [r3, #2]
 801b9ea:	0a1b      	lsrs	r3, r3, #8
 801b9ec:	b29b      	uxth	r3, r3
 801b9ee:	b2db      	uxtb	r3, r3
 801b9f0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	885b      	ldrh	r3, [r3, #2]
 801b9f6:	b2db      	uxtb	r3, r3
 801b9f8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	791b      	ldrb	r3, [r3, #4]
 801b9fe:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	795b      	ldrb	r3, [r3, #5]
 801ba04:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	799b      	ldrb	r3, [r3, #6]
 801ba0a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	79db      	ldrb	r3, [r3, #7]
 801ba10:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	7a1b      	ldrb	r3, [r3, #8]
 801ba16:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801ba18:	7dbb      	ldrb	r3, [r7, #22]
 801ba1a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	7a9b      	ldrb	r3, [r3, #10]
 801ba20:	753b      	strb	r3, [r7, #20]
        break;
 801ba22:	e022      	b.n	801ba6a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801ba24:	2301      	movs	r3, #1
 801ba26:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	7b1b      	ldrb	r3, [r3, #12]
 801ba2c:	733b      	strb	r3, [r7, #12]
        break;
 801ba2e:	e01c      	b.n	801ba6a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801ba30:	2306      	movs	r3, #6
 801ba32:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	89db      	ldrh	r3, [r3, #14]
 801ba38:	0a1b      	lsrs	r3, r3, #8
 801ba3a:	b29b      	uxth	r3, r3
 801ba3c:	b2db      	uxtb	r3, r3
 801ba3e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	89db      	ldrh	r3, [r3, #14]
 801ba44:	b2db      	uxtb	r3, r3
 801ba46:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	7c1a      	ldrb	r2, [r3, #16]
 801ba4c:	4b0f      	ldr	r3, [pc, #60]	; (801ba8c <SUBGRF_SetPacketParams+0x138>)
 801ba4e:	4611      	mov	r1, r2
 801ba50:	7019      	strb	r1, [r3, #0]
 801ba52:	4613      	mov	r3, r2
 801ba54:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	7c5b      	ldrb	r3, [r3, #17]
 801ba5a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	7c9b      	ldrb	r3, [r3, #18]
 801ba60:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	7cdb      	ldrb	r3, [r3, #19]
 801ba66:	747b      	strb	r3, [r7, #17]
        break;
 801ba68:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801ba6a:	7dfb      	ldrb	r3, [r7, #23]
 801ba6c:	b29a      	uxth	r2, r3
 801ba6e:	f107 030c 	add.w	r3, r7, #12
 801ba72:	4619      	mov	r1, r3
 801ba74:	208c      	movs	r0, #140	; 0x8c
 801ba76:	f000 f965 	bl	801bd44 <SUBGRF_WriteCommand>
 801ba7a:	e000      	b.n	801ba7e <SUBGRF_SetPacketParams+0x12a>
        return;
 801ba7c:	bf00      	nop
}
 801ba7e:	3718      	adds	r7, #24
 801ba80:	46bd      	mov	sp, r7
 801ba82:	bd80      	pop	{r7, pc}
 801ba84:	0801e360 	.word	0x0801e360
 801ba88:	20001899 	.word	0x20001899
 801ba8c:	2000189a 	.word	0x2000189a

0801ba90 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801ba90:	b580      	push	{r7, lr}
 801ba92:	b084      	sub	sp, #16
 801ba94:	af00      	add	r7, sp, #0
 801ba96:	4603      	mov	r3, r0
 801ba98:	460a      	mov	r2, r1
 801ba9a:	71fb      	strb	r3, [r7, #7]
 801ba9c:	4613      	mov	r3, r2
 801ba9e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801baa0:	79fb      	ldrb	r3, [r7, #7]
 801baa2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801baa4:	79bb      	ldrb	r3, [r7, #6]
 801baa6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801baa8:	f107 030c 	add.w	r3, r7, #12
 801baac:	2202      	movs	r2, #2
 801baae:	4619      	mov	r1, r3
 801bab0:	208f      	movs	r0, #143	; 0x8f
 801bab2:	f000 f947 	bl	801bd44 <SUBGRF_WriteCommand>
}
 801bab6:	bf00      	nop
 801bab8:	3710      	adds	r7, #16
 801baba:	46bd      	mov	sp, r7
 801babc:	bd80      	pop	{r7, pc}

0801babe <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801babe:	b580      	push	{r7, lr}
 801bac0:	b082      	sub	sp, #8
 801bac2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801bac4:	2300      	movs	r3, #0
 801bac6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801bac8:	1d3b      	adds	r3, r7, #4
 801baca:	2201      	movs	r2, #1
 801bacc:	4619      	mov	r1, r3
 801bace:	2015      	movs	r0, #21
 801bad0:	f000 f95a 	bl	801bd88 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801bad4:	793b      	ldrb	r3, [r7, #4]
 801bad6:	425b      	negs	r3, r3
 801bad8:	105b      	asrs	r3, r3, #1
 801bada:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801badc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801bae0:	4618      	mov	r0, r3
 801bae2:	3708      	adds	r7, #8
 801bae4:	46bd      	mov	sp, r7
 801bae6:	bd80      	pop	{r7, pc}

0801bae8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801bae8:	b580      	push	{r7, lr}
 801baea:	b084      	sub	sp, #16
 801baec:	af00      	add	r7, sp, #0
 801baee:	6078      	str	r0, [r7, #4]
 801baf0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801baf2:	f107 030c 	add.w	r3, r7, #12
 801baf6:	2202      	movs	r2, #2
 801baf8:	4619      	mov	r1, r3
 801bafa:	2013      	movs	r0, #19
 801bafc:	f000 f944 	bl	801bd88 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801bb00:	f7ff fd7e 	bl	801b600 <SUBGRF_GetPacketType>
 801bb04:	4603      	mov	r3, r0
 801bb06:	2b01      	cmp	r3, #1
 801bb08:	d10d      	bne.n	801bb26 <SUBGRF_GetRxBufferStatus+0x3e>
 801bb0a:	4b0c      	ldr	r3, [pc, #48]	; (801bb3c <SUBGRF_GetRxBufferStatus+0x54>)
 801bb0c:	781b      	ldrb	r3, [r3, #0]
 801bb0e:	b2db      	uxtb	r3, r3
 801bb10:	2b01      	cmp	r3, #1
 801bb12:	d108      	bne.n	801bb26 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801bb14:	f240 7002 	movw	r0, #1794	; 0x702
 801bb18:	f000 f878 	bl	801bc0c <SUBGRF_ReadRegister>
 801bb1c:	4603      	mov	r3, r0
 801bb1e:	461a      	mov	r2, r3
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	701a      	strb	r2, [r3, #0]
 801bb24:	e002      	b.n	801bb2c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801bb26:	7b3a      	ldrb	r2, [r7, #12]
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801bb2c:	7b7a      	ldrb	r2, [r7, #13]
 801bb2e:	683b      	ldr	r3, [r7, #0]
 801bb30:	701a      	strb	r2, [r3, #0]
}
 801bb32:	bf00      	nop
 801bb34:	3710      	adds	r7, #16
 801bb36:	46bd      	mov	sp, r7
 801bb38:	bd80      	pop	{r7, pc}
 801bb3a:	bf00      	nop
 801bb3c:	2000189a 	.word	0x2000189a

0801bb40 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801bb40:	b580      	push	{r7, lr}
 801bb42:	b084      	sub	sp, #16
 801bb44:	af00      	add	r7, sp, #0
 801bb46:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801bb48:	f107 030c 	add.w	r3, r7, #12
 801bb4c:	2203      	movs	r2, #3
 801bb4e:	4619      	mov	r1, r3
 801bb50:	2014      	movs	r0, #20
 801bb52:	f000 f919 	bl	801bd88 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801bb56:	f7ff fd53 	bl	801b600 <SUBGRF_GetPacketType>
 801bb5a:	4603      	mov	r3, r0
 801bb5c:	461a      	mov	r2, r3
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	781b      	ldrb	r3, [r3, #0]
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	d002      	beq.n	801bb70 <SUBGRF_GetPacketStatus+0x30>
 801bb6a:	2b01      	cmp	r3, #1
 801bb6c:	d013      	beq.n	801bb96 <SUBGRF_GetPacketStatus+0x56>
 801bb6e:	e02a      	b.n	801bbc6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801bb70:	7b3a      	ldrb	r2, [r7, #12]
 801bb72:	687b      	ldr	r3, [r7, #4]
 801bb74:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801bb76:	7b7b      	ldrb	r3, [r7, #13]
 801bb78:	425b      	negs	r3, r3
 801bb7a:	105b      	asrs	r3, r3, #1
 801bb7c:	b25a      	sxtb	r2, r3
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801bb82:	7bbb      	ldrb	r3, [r7, #14]
 801bb84:	425b      	negs	r3, r3
 801bb86:	105b      	asrs	r3, r3, #1
 801bb88:	b25a      	sxtb	r2, r3
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	2200      	movs	r2, #0
 801bb92:	609a      	str	r2, [r3, #8]
            break;
 801bb94:	e020      	b.n	801bbd8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801bb96:	7b3b      	ldrb	r3, [r7, #12]
 801bb98:	425b      	negs	r3, r3
 801bb9a:	105b      	asrs	r3, r3, #1
 801bb9c:	b25a      	sxtb	r2, r3
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801bba2:	7b7b      	ldrb	r3, [r7, #13]
 801bba4:	b25b      	sxtb	r3, r3
 801bba6:	3302      	adds	r3, #2
 801bba8:	109b      	asrs	r3, r3, #2
 801bbaa:	b25a      	sxtb	r2, r3
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801bbb0:	7bbb      	ldrb	r3, [r7, #14]
 801bbb2:	425b      	negs	r3, r3
 801bbb4:	105b      	asrs	r3, r3, #1
 801bbb6:	b25a      	sxtb	r2, r3
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801bbbc:	4b08      	ldr	r3, [pc, #32]	; (801bbe0 <SUBGRF_GetPacketStatus+0xa0>)
 801bbbe:	681a      	ldr	r2, [r3, #0]
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	611a      	str	r2, [r3, #16]
            break;
 801bbc4:	e008      	b.n	801bbd8 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801bbc6:	2214      	movs	r2, #20
 801bbc8:	2100      	movs	r1, #0
 801bbca:	6878      	ldr	r0, [r7, #4]
 801bbcc:	f000 fc03 	bl	801c3d6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	220f      	movs	r2, #15
 801bbd4:	701a      	strb	r2, [r3, #0]
            break;
 801bbd6:	bf00      	nop
    }
}
 801bbd8:	bf00      	nop
 801bbda:	3710      	adds	r7, #16
 801bbdc:	46bd      	mov	sp, r7
 801bbde:	bd80      	pop	{r7, pc}
 801bbe0:	2000189c 	.word	0x2000189c

0801bbe4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801bbe4:	b580      	push	{r7, lr}
 801bbe6:	b082      	sub	sp, #8
 801bbe8:	af00      	add	r7, sp, #0
 801bbea:	4603      	mov	r3, r0
 801bbec:	460a      	mov	r2, r1
 801bbee:	80fb      	strh	r3, [r7, #6]
 801bbf0:	4613      	mov	r3, r2
 801bbf2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801bbf4:	1d7a      	adds	r2, r7, #5
 801bbf6:	88f9      	ldrh	r1, [r7, #6]
 801bbf8:	2301      	movs	r3, #1
 801bbfa:	4803      	ldr	r0, [pc, #12]	; (801bc08 <SUBGRF_WriteRegister+0x24>)
 801bbfc:	f7ed f88a 	bl	8008d14 <HAL_SUBGHZ_WriteRegisters>
}
 801bc00:	bf00      	nop
 801bc02:	3708      	adds	r7, #8
 801bc04:	46bd      	mov	sp, r7
 801bc06:	bd80      	pop	{r7, pc}
 801bc08:	2000037c 	.word	0x2000037c

0801bc0c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801bc0c:	b580      	push	{r7, lr}
 801bc0e:	b084      	sub	sp, #16
 801bc10:	af00      	add	r7, sp, #0
 801bc12:	4603      	mov	r3, r0
 801bc14:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801bc16:	f107 020f 	add.w	r2, r7, #15
 801bc1a:	88f9      	ldrh	r1, [r7, #6]
 801bc1c:	2301      	movs	r3, #1
 801bc1e:	4804      	ldr	r0, [pc, #16]	; (801bc30 <SUBGRF_ReadRegister+0x24>)
 801bc20:	f7ed f8d7 	bl	8008dd2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801bc24:	7bfb      	ldrb	r3, [r7, #15]
}
 801bc26:	4618      	mov	r0, r3
 801bc28:	3710      	adds	r7, #16
 801bc2a:	46bd      	mov	sp, r7
 801bc2c:	bd80      	pop	{r7, pc}
 801bc2e:	bf00      	nop
 801bc30:	2000037c 	.word	0x2000037c

0801bc34 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801bc34:	b580      	push	{r7, lr}
 801bc36:	b086      	sub	sp, #24
 801bc38:	af00      	add	r7, sp, #0
 801bc3a:	4603      	mov	r3, r0
 801bc3c:	6039      	str	r1, [r7, #0]
 801bc3e:	80fb      	strh	r3, [r7, #6]
 801bc40:	4613      	mov	r3, r2
 801bc42:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc44:	f3ef 8310 	mrs	r3, PRIMASK
 801bc48:	60fb      	str	r3, [r7, #12]
  return(result);
 801bc4a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bc4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc4e:	b672      	cpsid	i
}
 801bc50:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801bc52:	88bb      	ldrh	r3, [r7, #4]
 801bc54:	88f9      	ldrh	r1, [r7, #6]
 801bc56:	683a      	ldr	r2, [r7, #0]
 801bc58:	4806      	ldr	r0, [pc, #24]	; (801bc74 <SUBGRF_WriteRegisters+0x40>)
 801bc5a:	f7ed f85b 	bl	8008d14 <HAL_SUBGHZ_WriteRegisters>
 801bc5e:	697b      	ldr	r3, [r7, #20]
 801bc60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc62:	693b      	ldr	r3, [r7, #16]
 801bc64:	f383 8810 	msr	PRIMASK, r3
}
 801bc68:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bc6a:	bf00      	nop
 801bc6c:	3718      	adds	r7, #24
 801bc6e:	46bd      	mov	sp, r7
 801bc70:	bd80      	pop	{r7, pc}
 801bc72:	bf00      	nop
 801bc74:	2000037c 	.word	0x2000037c

0801bc78 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801bc78:	b580      	push	{r7, lr}
 801bc7a:	b086      	sub	sp, #24
 801bc7c:	af00      	add	r7, sp, #0
 801bc7e:	4603      	mov	r3, r0
 801bc80:	6039      	str	r1, [r7, #0]
 801bc82:	80fb      	strh	r3, [r7, #6]
 801bc84:	4613      	mov	r3, r2
 801bc86:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc88:	f3ef 8310 	mrs	r3, PRIMASK
 801bc8c:	60fb      	str	r3, [r7, #12]
  return(result);
 801bc8e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bc90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc92:	b672      	cpsid	i
}
 801bc94:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801bc96:	88bb      	ldrh	r3, [r7, #4]
 801bc98:	88f9      	ldrh	r1, [r7, #6]
 801bc9a:	683a      	ldr	r2, [r7, #0]
 801bc9c:	4806      	ldr	r0, [pc, #24]	; (801bcb8 <SUBGRF_ReadRegisters+0x40>)
 801bc9e:	f7ed f898 	bl	8008dd2 <HAL_SUBGHZ_ReadRegisters>
 801bca2:	697b      	ldr	r3, [r7, #20]
 801bca4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bca6:	693b      	ldr	r3, [r7, #16]
 801bca8:	f383 8810 	msr	PRIMASK, r3
}
 801bcac:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bcae:	bf00      	nop
 801bcb0:	3718      	adds	r7, #24
 801bcb2:	46bd      	mov	sp, r7
 801bcb4:	bd80      	pop	{r7, pc}
 801bcb6:	bf00      	nop
 801bcb8:	2000037c 	.word	0x2000037c

0801bcbc <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bcbc:	b580      	push	{r7, lr}
 801bcbe:	b086      	sub	sp, #24
 801bcc0:	af00      	add	r7, sp, #0
 801bcc2:	4603      	mov	r3, r0
 801bcc4:	6039      	str	r1, [r7, #0]
 801bcc6:	71fb      	strb	r3, [r7, #7]
 801bcc8:	4613      	mov	r3, r2
 801bcca:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bccc:	f3ef 8310 	mrs	r3, PRIMASK
 801bcd0:	60fb      	str	r3, [r7, #12]
  return(result);
 801bcd2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bcd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bcd6:	b672      	cpsid	i
}
 801bcd8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801bcda:	79bb      	ldrb	r3, [r7, #6]
 801bcdc:	b29b      	uxth	r3, r3
 801bcde:	79f9      	ldrb	r1, [r7, #7]
 801bce0:	683a      	ldr	r2, [r7, #0]
 801bce2:	4806      	ldr	r0, [pc, #24]	; (801bcfc <SUBGRF_WriteBuffer+0x40>)
 801bce4:	f7ed f989 	bl	8008ffa <HAL_SUBGHZ_WriteBuffer>
 801bce8:	697b      	ldr	r3, [r7, #20]
 801bcea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bcec:	693b      	ldr	r3, [r7, #16]
 801bcee:	f383 8810 	msr	PRIMASK, r3
}
 801bcf2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bcf4:	bf00      	nop
 801bcf6:	3718      	adds	r7, #24
 801bcf8:	46bd      	mov	sp, r7
 801bcfa:	bd80      	pop	{r7, pc}
 801bcfc:	2000037c 	.word	0x2000037c

0801bd00 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bd00:	b580      	push	{r7, lr}
 801bd02:	b086      	sub	sp, #24
 801bd04:	af00      	add	r7, sp, #0
 801bd06:	4603      	mov	r3, r0
 801bd08:	6039      	str	r1, [r7, #0]
 801bd0a:	71fb      	strb	r3, [r7, #7]
 801bd0c:	4613      	mov	r3, r2
 801bd0e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd10:	f3ef 8310 	mrs	r3, PRIMASK
 801bd14:	60fb      	str	r3, [r7, #12]
  return(result);
 801bd16:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bd18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bd1a:	b672      	cpsid	i
}
 801bd1c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801bd1e:	79bb      	ldrb	r3, [r7, #6]
 801bd20:	b29b      	uxth	r3, r3
 801bd22:	79f9      	ldrb	r1, [r7, #7]
 801bd24:	683a      	ldr	r2, [r7, #0]
 801bd26:	4806      	ldr	r0, [pc, #24]	; (801bd40 <SUBGRF_ReadBuffer+0x40>)
 801bd28:	f7ed f9ba 	bl	80090a0 <HAL_SUBGHZ_ReadBuffer>
 801bd2c:	697b      	ldr	r3, [r7, #20]
 801bd2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bd30:	693b      	ldr	r3, [r7, #16]
 801bd32:	f383 8810 	msr	PRIMASK, r3
}
 801bd36:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bd38:	bf00      	nop
 801bd3a:	3718      	adds	r7, #24
 801bd3c:	46bd      	mov	sp, r7
 801bd3e:	bd80      	pop	{r7, pc}
 801bd40:	2000037c 	.word	0x2000037c

0801bd44 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bd44:	b580      	push	{r7, lr}
 801bd46:	b086      	sub	sp, #24
 801bd48:	af00      	add	r7, sp, #0
 801bd4a:	4603      	mov	r3, r0
 801bd4c:	6039      	str	r1, [r7, #0]
 801bd4e:	71fb      	strb	r3, [r7, #7]
 801bd50:	4613      	mov	r3, r2
 801bd52:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd54:	f3ef 8310 	mrs	r3, PRIMASK
 801bd58:	60fb      	str	r3, [r7, #12]
  return(result);
 801bd5a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bd5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bd5e:	b672      	cpsid	i
}
 801bd60:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801bd62:	88bb      	ldrh	r3, [r7, #4]
 801bd64:	79f9      	ldrb	r1, [r7, #7]
 801bd66:	683a      	ldr	r2, [r7, #0]
 801bd68:	4806      	ldr	r0, [pc, #24]	; (801bd84 <SUBGRF_WriteCommand+0x40>)
 801bd6a:	f7ed f893 	bl	8008e94 <HAL_SUBGHZ_ExecSetCmd>
 801bd6e:	697b      	ldr	r3, [r7, #20]
 801bd70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bd72:	693b      	ldr	r3, [r7, #16]
 801bd74:	f383 8810 	msr	PRIMASK, r3
}
 801bd78:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bd7a:	bf00      	nop
 801bd7c:	3718      	adds	r7, #24
 801bd7e:	46bd      	mov	sp, r7
 801bd80:	bd80      	pop	{r7, pc}
 801bd82:	bf00      	nop
 801bd84:	2000037c 	.word	0x2000037c

0801bd88 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bd88:	b580      	push	{r7, lr}
 801bd8a:	b086      	sub	sp, #24
 801bd8c:	af00      	add	r7, sp, #0
 801bd8e:	4603      	mov	r3, r0
 801bd90:	6039      	str	r1, [r7, #0]
 801bd92:	71fb      	strb	r3, [r7, #7]
 801bd94:	4613      	mov	r3, r2
 801bd96:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd98:	f3ef 8310 	mrs	r3, PRIMASK
 801bd9c:	60fb      	str	r3, [r7, #12]
  return(result);
 801bd9e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bda0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bda2:	b672      	cpsid	i
}
 801bda4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801bda6:	88bb      	ldrh	r3, [r7, #4]
 801bda8:	79f9      	ldrb	r1, [r7, #7]
 801bdaa:	683a      	ldr	r2, [r7, #0]
 801bdac:	4806      	ldr	r0, [pc, #24]	; (801bdc8 <SUBGRF_ReadCommand+0x40>)
 801bdae:	f7ed f8d0 	bl	8008f52 <HAL_SUBGHZ_ExecGetCmd>
 801bdb2:	697b      	ldr	r3, [r7, #20]
 801bdb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bdb6:	693b      	ldr	r3, [r7, #16]
 801bdb8:	f383 8810 	msr	PRIMASK, r3
}
 801bdbc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bdbe:	bf00      	nop
 801bdc0:	3718      	adds	r7, #24
 801bdc2:	46bd      	mov	sp, r7
 801bdc4:	bd80      	pop	{r7, pc}
 801bdc6:	bf00      	nop
 801bdc8:	2000037c 	.word	0x2000037c

0801bdcc <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801bdcc:	b580      	push	{r7, lr}
 801bdce:	b084      	sub	sp, #16
 801bdd0:	af00      	add	r7, sp, #0
 801bdd2:	4603      	mov	r3, r0
 801bdd4:	460a      	mov	r2, r1
 801bdd6:	71fb      	strb	r3, [r7, #7]
 801bdd8:	4613      	mov	r3, r2
 801bdda:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801bddc:	2301      	movs	r3, #1
 801bdde:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801bde0:	79bb      	ldrb	r3, [r7, #6]
 801bde2:	2b01      	cmp	r3, #1
 801bde4:	d10d      	bne.n	801be02 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801bde6:	79fb      	ldrb	r3, [r7, #7]
 801bde8:	2b01      	cmp	r3, #1
 801bdea:	d104      	bne.n	801bdf6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801bdec:	2302      	movs	r3, #2
 801bdee:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801bdf0:	2004      	movs	r0, #4
 801bdf2:	f000 f8ef 	bl	801bfd4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801bdf6:	79fb      	ldrb	r3, [r7, #7]
 801bdf8:	2b02      	cmp	r3, #2
 801bdfa:	d107      	bne.n	801be0c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801bdfc:	2303      	movs	r3, #3
 801bdfe:	73fb      	strb	r3, [r7, #15]
 801be00:	e004      	b.n	801be0c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801be02:	79bb      	ldrb	r3, [r7, #6]
 801be04:	2b00      	cmp	r3, #0
 801be06:	d101      	bne.n	801be0c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801be08:	2301      	movs	r3, #1
 801be0a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801be0c:	7bfb      	ldrb	r3, [r7, #15]
 801be0e:	4618      	mov	r0, r3
 801be10:	f7f0 fef3 	bl	800cbfa <RBI_ConfigRFSwitch>
}
 801be14:	bf00      	nop
 801be16:	3710      	adds	r7, #16
 801be18:	46bd      	mov	sp, r7
 801be1a:	bd80      	pop	{r7, pc}

0801be1c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801be1c:	b580      	push	{r7, lr}
 801be1e:	b084      	sub	sp, #16
 801be20:	af00      	add	r7, sp, #0
 801be22:	4603      	mov	r3, r0
 801be24:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801be26:	2301      	movs	r3, #1
 801be28:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801be2a:	f7f0 fef4 	bl	800cc16 <RBI_GetTxConfig>
 801be2e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801be30:	68bb      	ldr	r3, [r7, #8]
 801be32:	2b02      	cmp	r3, #2
 801be34:	d016      	beq.n	801be64 <SUBGRF_SetRfTxPower+0x48>
 801be36:	68bb      	ldr	r3, [r7, #8]
 801be38:	2b02      	cmp	r3, #2
 801be3a:	dc16      	bgt.n	801be6a <SUBGRF_SetRfTxPower+0x4e>
 801be3c:	68bb      	ldr	r3, [r7, #8]
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d003      	beq.n	801be4a <SUBGRF_SetRfTxPower+0x2e>
 801be42:	68bb      	ldr	r3, [r7, #8]
 801be44:	2b01      	cmp	r3, #1
 801be46:	d00a      	beq.n	801be5e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801be48:	e00f      	b.n	801be6a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801be4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801be4e:	2b0f      	cmp	r3, #15
 801be50:	dd02      	ble.n	801be58 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801be52:	2302      	movs	r3, #2
 801be54:	73fb      	strb	r3, [r7, #15]
            break;
 801be56:	e009      	b.n	801be6c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801be58:	2301      	movs	r3, #1
 801be5a:	73fb      	strb	r3, [r7, #15]
            break;
 801be5c:	e006      	b.n	801be6c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801be5e:	2301      	movs	r3, #1
 801be60:	73fb      	strb	r3, [r7, #15]
            break;
 801be62:	e003      	b.n	801be6c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801be64:	2302      	movs	r3, #2
 801be66:	73fb      	strb	r3, [r7, #15]
            break;
 801be68:	e000      	b.n	801be6c <SUBGRF_SetRfTxPower+0x50>
            break;
 801be6a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801be6c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801be70:	7bfb      	ldrb	r3, [r7, #15]
 801be72:	2202      	movs	r2, #2
 801be74:	4618      	mov	r0, r3
 801be76:	f7ff fbcd 	bl	801b614 <SUBGRF_SetTxParams>

    return paSelect;
 801be7a:	7bfb      	ldrb	r3, [r7, #15]
}
 801be7c:	4618      	mov	r0, r3
 801be7e:	3710      	adds	r7, #16
 801be80:	46bd      	mov	sp, r7
 801be82:	bd80      	pop	{r7, pc}

0801be84 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801be84:	b480      	push	{r7}
 801be86:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801be88:	2301      	movs	r3, #1
}
 801be8a:	4618      	mov	r0, r3
 801be8c:	46bd      	mov	sp, r7
 801be8e:	bc80      	pop	{r7}
 801be90:	4770      	bx	lr
	...

0801be94 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801be94:	b580      	push	{r7, lr}
 801be96:	b082      	sub	sp, #8
 801be98:	af00      	add	r7, sp, #0
 801be9a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801be9c:	4b03      	ldr	r3, [pc, #12]	; (801beac <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801be9e:	681b      	ldr	r3, [r3, #0]
 801bea0:	2001      	movs	r0, #1
 801bea2:	4798      	blx	r3
}
 801bea4:	bf00      	nop
 801bea6:	3708      	adds	r7, #8
 801bea8:	46bd      	mov	sp, r7
 801beaa:	bd80      	pop	{r7, pc}
 801beac:	200018a4 	.word	0x200018a4

0801beb0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801beb0:	b580      	push	{r7, lr}
 801beb2:	b082      	sub	sp, #8
 801beb4:	af00      	add	r7, sp, #0
 801beb6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801beb8:	4b03      	ldr	r3, [pc, #12]	; (801bec8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	2002      	movs	r0, #2
 801bebe:	4798      	blx	r3
}
 801bec0:	bf00      	nop
 801bec2:	3708      	adds	r7, #8
 801bec4:	46bd      	mov	sp, r7
 801bec6:	bd80      	pop	{r7, pc}
 801bec8:	200018a4 	.word	0x200018a4

0801becc <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801becc:	b580      	push	{r7, lr}
 801bece:	b082      	sub	sp, #8
 801bed0:	af00      	add	r7, sp, #0
 801bed2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801bed4:	4b03      	ldr	r3, [pc, #12]	; (801bee4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801bed6:	681b      	ldr	r3, [r3, #0]
 801bed8:	2040      	movs	r0, #64	; 0x40
 801beda:	4798      	blx	r3
}
 801bedc:	bf00      	nop
 801bede:	3708      	adds	r7, #8
 801bee0:	46bd      	mov	sp, r7
 801bee2:	bd80      	pop	{r7, pc}
 801bee4:	200018a4 	.word	0x200018a4

0801bee8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801bee8:	b580      	push	{r7, lr}
 801beea:	b082      	sub	sp, #8
 801beec:	af00      	add	r7, sp, #0
 801beee:	6078      	str	r0, [r7, #4]
 801bef0:	460b      	mov	r3, r1
 801bef2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801bef4:	78fb      	ldrb	r3, [r7, #3]
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	d002      	beq.n	801bf00 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801befa:	2b01      	cmp	r3, #1
 801befc:	d005      	beq.n	801bf0a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801befe:	e00a      	b.n	801bf16 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801bf00:	4b07      	ldr	r3, [pc, #28]	; (801bf20 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801bf02:	681b      	ldr	r3, [r3, #0]
 801bf04:	2080      	movs	r0, #128	; 0x80
 801bf06:	4798      	blx	r3
            break;
 801bf08:	e005      	b.n	801bf16 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801bf0a:	4b05      	ldr	r3, [pc, #20]	; (801bf20 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801bf0c:	681b      	ldr	r3, [r3, #0]
 801bf0e:	f44f 7080 	mov.w	r0, #256	; 0x100
 801bf12:	4798      	blx	r3
            break;
 801bf14:	bf00      	nop
    }
}
 801bf16:	bf00      	nop
 801bf18:	3708      	adds	r7, #8
 801bf1a:	46bd      	mov	sp, r7
 801bf1c:	bd80      	pop	{r7, pc}
 801bf1e:	bf00      	nop
 801bf20:	200018a4 	.word	0x200018a4

0801bf24 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bf24:	b580      	push	{r7, lr}
 801bf26:	b082      	sub	sp, #8
 801bf28:	af00      	add	r7, sp, #0
 801bf2a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801bf2c:	4b04      	ldr	r3, [pc, #16]	; (801bf40 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801bf2e:	681b      	ldr	r3, [r3, #0]
 801bf30:	f44f 7000 	mov.w	r0, #512	; 0x200
 801bf34:	4798      	blx	r3
}
 801bf36:	bf00      	nop
 801bf38:	3708      	adds	r7, #8
 801bf3a:	46bd      	mov	sp, r7
 801bf3c:	bd80      	pop	{r7, pc}
 801bf3e:	bf00      	nop
 801bf40:	200018a4 	.word	0x200018a4

0801bf44 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bf44:	b580      	push	{r7, lr}
 801bf46:	b082      	sub	sp, #8
 801bf48:	af00      	add	r7, sp, #0
 801bf4a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801bf4c:	4b03      	ldr	r3, [pc, #12]	; (801bf5c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801bf4e:	681b      	ldr	r3, [r3, #0]
 801bf50:	2020      	movs	r0, #32
 801bf52:	4798      	blx	r3
}
 801bf54:	bf00      	nop
 801bf56:	3708      	adds	r7, #8
 801bf58:	46bd      	mov	sp, r7
 801bf5a:	bd80      	pop	{r7, pc}
 801bf5c:	200018a4 	.word	0x200018a4

0801bf60 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bf60:	b580      	push	{r7, lr}
 801bf62:	b082      	sub	sp, #8
 801bf64:	af00      	add	r7, sp, #0
 801bf66:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801bf68:	4b03      	ldr	r3, [pc, #12]	; (801bf78 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	2004      	movs	r0, #4
 801bf6e:	4798      	blx	r3
}
 801bf70:	bf00      	nop
 801bf72:	3708      	adds	r7, #8
 801bf74:	46bd      	mov	sp, r7
 801bf76:	bd80      	pop	{r7, pc}
 801bf78:	200018a4 	.word	0x200018a4

0801bf7c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bf7c:	b580      	push	{r7, lr}
 801bf7e:	b082      	sub	sp, #8
 801bf80:	af00      	add	r7, sp, #0
 801bf82:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801bf84:	4b03      	ldr	r3, [pc, #12]	; (801bf94 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801bf86:	681b      	ldr	r3, [r3, #0]
 801bf88:	2008      	movs	r0, #8
 801bf8a:	4798      	blx	r3
}
 801bf8c:	bf00      	nop
 801bf8e:	3708      	adds	r7, #8
 801bf90:	46bd      	mov	sp, r7
 801bf92:	bd80      	pop	{r7, pc}
 801bf94:	200018a4 	.word	0x200018a4

0801bf98 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bf98:	b580      	push	{r7, lr}
 801bf9a:	b082      	sub	sp, #8
 801bf9c:	af00      	add	r7, sp, #0
 801bf9e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801bfa0:	4b03      	ldr	r3, [pc, #12]	; (801bfb0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	2010      	movs	r0, #16
 801bfa6:	4798      	blx	r3
}
 801bfa8:	bf00      	nop
 801bfaa:	3708      	adds	r7, #8
 801bfac:	46bd      	mov	sp, r7
 801bfae:	bd80      	pop	{r7, pc}
 801bfb0:	200018a4 	.word	0x200018a4

0801bfb4 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bfb4:	b580      	push	{r7, lr}
 801bfb6:	b082      	sub	sp, #8
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801bfbc:	4b04      	ldr	r3, [pc, #16]	; (801bfd0 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801bfbe:	681b      	ldr	r3, [r3, #0]
 801bfc0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801bfc4:	4798      	blx	r3
}
 801bfc6:	bf00      	nop
 801bfc8:	3708      	adds	r7, #8
 801bfca:	46bd      	mov	sp, r7
 801bfcc:	bd80      	pop	{r7, pc}
 801bfce:	bf00      	nop
 801bfd0:	200018a4 	.word	0x200018a4

0801bfd4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801bfd4:	b580      	push	{r7, lr}
 801bfd6:	b084      	sub	sp, #16
 801bfd8:	af00      	add	r7, sp, #0
 801bfda:	4603      	mov	r3, r0
 801bfdc:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801bfde:	f7f0 fe28 	bl	800cc32 <RBI_IsDCDC>
 801bfe2:	4603      	mov	r3, r0
 801bfe4:	2b01      	cmp	r3, #1
 801bfe6:	d112      	bne.n	801c00e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801bfe8:	f640 1023 	movw	r0, #2339	; 0x923
 801bfec:	f7ff fe0e 	bl	801bc0c <SUBGRF_ReadRegister>
 801bff0:	4603      	mov	r3, r0
 801bff2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801bff4:	7bfb      	ldrb	r3, [r7, #15]
 801bff6:	f023 0306 	bic.w	r3, r3, #6
 801bffa:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801bffc:	7bfa      	ldrb	r2, [r7, #15]
 801bffe:	79fb      	ldrb	r3, [r7, #7]
 801c000:	4313      	orrs	r3, r2
 801c002:	b2db      	uxtb	r3, r3
 801c004:	4619      	mov	r1, r3
 801c006:	f640 1023 	movw	r0, #2339	; 0x923
 801c00a:	f7ff fdeb 	bl	801bbe4 <SUBGRF_WriteRegister>
  }
}
 801c00e:	bf00      	nop
 801c010:	3710      	adds	r7, #16
 801c012:	46bd      	mov	sp, r7
 801c014:	bd80      	pop	{r7, pc}
	...

0801c018 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801c018:	b480      	push	{r7}
 801c01a:	b085      	sub	sp, #20
 801c01c:	af00      	add	r7, sp, #0
 801c01e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	2b00      	cmp	r3, #0
 801c024:	d101      	bne.n	801c02a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801c026:	231f      	movs	r3, #31
 801c028:	e016      	b.n	801c058 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c02a:	2300      	movs	r3, #0
 801c02c:	73fb      	strb	r3, [r7, #15]
 801c02e:	e00f      	b.n	801c050 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801c030:	7bfb      	ldrb	r3, [r7, #15]
 801c032:	4a0c      	ldr	r2, [pc, #48]	; (801c064 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c034:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c038:	687a      	ldr	r2, [r7, #4]
 801c03a:	429a      	cmp	r2, r3
 801c03c:	d205      	bcs.n	801c04a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801c03e:	7bfb      	ldrb	r3, [r7, #15]
 801c040:	4a08      	ldr	r2, [pc, #32]	; (801c064 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c042:	00db      	lsls	r3, r3, #3
 801c044:	4413      	add	r3, r2
 801c046:	791b      	ldrb	r3, [r3, #4]
 801c048:	e006      	b.n	801c058 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c04a:	7bfb      	ldrb	r3, [r7, #15]
 801c04c:	3301      	adds	r3, #1
 801c04e:	73fb      	strb	r3, [r7, #15]
 801c050:	7bfb      	ldrb	r3, [r7, #15]
 801c052:	2b15      	cmp	r3, #21
 801c054:	d9ec      	bls.n	801c030 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801c056:	e7fe      	b.n	801c056 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801c058:	4618      	mov	r0, r3
 801c05a:	3714      	adds	r7, #20
 801c05c:	46bd      	mov	sp, r7
 801c05e:	bc80      	pop	{r7}
 801c060:	4770      	bx	lr
 801c062:	bf00      	nop
 801c064:	0801e950 	.word	0x0801e950

0801c068 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801c068:	b580      	push	{r7, lr}
 801c06a:	b08a      	sub	sp, #40	; 0x28
 801c06c:	af00      	add	r7, sp, #0
 801c06e:	6078      	str	r0, [r7, #4]
 801c070:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801c072:	4b35      	ldr	r3, [pc, #212]	; (801c148 <SUBGRF_GetCFO+0xe0>)
 801c074:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801c076:	f640 0007 	movw	r0, #2055	; 0x807
 801c07a:	f7ff fdc7 	bl	801bc0c <SUBGRF_ReadRegister>
 801c07e:	4603      	mov	r3, r0
 801c080:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801c082:	7ffb      	ldrb	r3, [r7, #31]
 801c084:	08db      	lsrs	r3, r3, #3
 801c086:	b2db      	uxtb	r3, r3
 801c088:	f003 0303 	and.w	r3, r3, #3
 801c08c:	3328      	adds	r3, #40	; 0x28
 801c08e:	443b      	add	r3, r7
 801c090:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801c094:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801c096:	7ffb      	ldrb	r3, [r7, #31]
 801c098:	f003 0307 	and.w	r3, r3, #7
 801c09c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801c09e:	7fba      	ldrb	r2, [r7, #30]
 801c0a0:	7f7b      	ldrb	r3, [r7, #29]
 801c0a2:	3301      	adds	r3, #1
 801c0a4:	fa02 f303 	lsl.w	r3, r2, r3
 801c0a8:	461a      	mov	r2, r3
 801c0aa:	4b28      	ldr	r3, [pc, #160]	; (801c14c <SUBGRF_GetCFO+0xe4>)
 801c0ac:	fbb3 f3f2 	udiv	r3, r3, r2
 801c0b0:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801c0b2:	69ba      	ldr	r2, [r7, #24]
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	fbb2 f3f3 	udiv	r3, r2, r3
 801c0ba:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801c0bc:	2301      	movs	r3, #1
 801c0be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801c0c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c0c6:	697a      	ldr	r2, [r7, #20]
 801c0c8:	fb02 f303 	mul.w	r3, r2, r3
 801c0cc:	2b07      	cmp	r3, #7
 801c0ce:	d802      	bhi.n	801c0d6 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801c0d0:	2302      	movs	r3, #2
 801c0d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801c0d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c0da:	697a      	ldr	r2, [r7, #20]
 801c0dc:	fb02 f303 	mul.w	r3, r2, r3
 801c0e0:	2b03      	cmp	r3, #3
 801c0e2:	d802      	bhi.n	801c0ea <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801c0e4:	2304      	movs	r3, #4
 801c0e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801c0ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801c0ee:	69bb      	ldr	r3, [r7, #24]
 801c0f0:	fb02 f303 	mul.w	r3, r2, r3
 801c0f4:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801c0f6:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801c0fa:	f7ff fd87 	bl	801bc0c <SUBGRF_ReadRegister>
 801c0fe:	4603      	mov	r3, r0
 801c100:	021b      	lsls	r3, r3, #8
 801c102:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801c106:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801c108:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801c10c:	f7ff fd7e 	bl	801bc0c <SUBGRF_ReadRegister>
 801c110:	4603      	mov	r3, r0
 801c112:	461a      	mov	r2, r3
 801c114:	6a3b      	ldr	r3, [r7, #32]
 801c116:	4313      	orrs	r3, r2
 801c118:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801c11a:	6a3b      	ldr	r3, [r7, #32]
 801c11c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c120:	2b00      	cmp	r3, #0
 801c122:	d005      	beq.n	801c130 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801c124:	6a3b      	ldr	r3, [r7, #32]
 801c126:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801c12a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801c12e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801c130:	693b      	ldr	r3, [r7, #16]
 801c132:	095b      	lsrs	r3, r3, #5
 801c134:	6a3a      	ldr	r2, [r7, #32]
 801c136:	fb02 f303 	mul.w	r3, r2, r3
 801c13a:	11da      	asrs	r2, r3, #7
 801c13c:	683b      	ldr	r3, [r7, #0]
 801c13e:	601a      	str	r2, [r3, #0]
}
 801c140:	bf00      	nop
 801c142:	3728      	adds	r7, #40	; 0x28
 801c144:	46bd      	mov	sp, r7
 801c146:	bd80      	pop	{r7, pc}
 801c148:	0c0a0804 	.word	0x0c0a0804
 801c14c:	01e84800 	.word	0x01e84800

0801c150 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801c150:	b480      	push	{r7}
 801c152:	b087      	sub	sp, #28
 801c154:	af00      	add	r7, sp, #0
 801c156:	4603      	mov	r3, r0
 801c158:	60b9      	str	r1, [r7, #8]
 801c15a:	607a      	str	r2, [r7, #4]
 801c15c:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801c15e:	2300      	movs	r3, #0
 801c160:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801c162:	f04f 33ff 	mov.w	r3, #4294967295
 801c166:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801c168:	697b      	ldr	r3, [r7, #20]
}
 801c16a:	4618      	mov	r0, r3
 801c16c:	371c      	adds	r7, #28
 801c16e:	46bd      	mov	sp, r7
 801c170:	bc80      	pop	{r7}
 801c172:	4770      	bx	lr

0801c174 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801c174:	b480      	push	{r7}
 801c176:	b087      	sub	sp, #28
 801c178:	af00      	add	r7, sp, #0
 801c17a:	4603      	mov	r3, r0
 801c17c:	60b9      	str	r1, [r7, #8]
 801c17e:	607a      	str	r2, [r7, #4]
 801c180:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801c182:	2300      	movs	r3, #0
 801c184:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801c186:	f04f 33ff 	mov.w	r3, #4294967295
 801c18a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801c18c:	697b      	ldr	r3, [r7, #20]
}
 801c18e:	4618      	mov	r0, r3
 801c190:	371c      	adds	r7, #28
 801c192:	46bd      	mov	sp, r7
 801c194:	bc80      	pop	{r7}
 801c196:	4770      	bx	lr

0801c198 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801c198:	b480      	push	{r7}
 801c19a:	b085      	sub	sp, #20
 801c19c:	af00      	add	r7, sp, #0
 801c19e:	60f8      	str	r0, [r7, #12]
 801c1a0:	60b9      	str	r1, [r7, #8]
 801c1a2:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801c1a4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801c1a8:	4618      	mov	r0, r3
 801c1aa:	3714      	adds	r7, #20
 801c1ac:	46bd      	mov	sp, r7
 801c1ae:	bc80      	pop	{r7}
 801c1b0:	4770      	bx	lr

0801c1b2 <RFW_DeInit>:

void RFW_DeInit( void )
{
 801c1b2:	b480      	push	{r7}
 801c1b4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801c1b6:	bf00      	nop
 801c1b8:	46bd      	mov	sp, r7
 801c1ba:	bc80      	pop	{r7}
 801c1bc:	4770      	bx	lr

0801c1be <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801c1be:	b480      	push	{r7}
 801c1c0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801c1c2:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c1c4:	4618      	mov	r0, r3
 801c1c6:	46bd      	mov	sp, r7
 801c1c8:	bc80      	pop	{r7}
 801c1ca:	4770      	bx	lr

0801c1cc <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801c1cc:	b480      	push	{r7}
 801c1ce:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801c1d0:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c1d2:	4618      	mov	r0, r3
 801c1d4:	46bd      	mov	sp, r7
 801c1d6:	bc80      	pop	{r7}
 801c1d8:	4770      	bx	lr

0801c1da <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801c1da:	b480      	push	{r7}
 801c1dc:	b083      	sub	sp, #12
 801c1de:	af00      	add	r7, sp, #0
 801c1e0:	4603      	mov	r3, r0
 801c1e2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801c1e4:	bf00      	nop
 801c1e6:	370c      	adds	r7, #12
 801c1e8:	46bd      	mov	sp, r7
 801c1ea:	bc80      	pop	{r7}
 801c1ec:	4770      	bx	lr

0801c1ee <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801c1ee:	b480      	push	{r7}
 801c1f0:	b087      	sub	sp, #28
 801c1f2:	af00      	add	r7, sp, #0
 801c1f4:	60f8      	str	r0, [r7, #12]
 801c1f6:	460b      	mov	r3, r1
 801c1f8:	607a      	str	r2, [r7, #4]
 801c1fa:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801c1fc:	f04f 33ff 	mov.w	r3, #4294967295
 801c200:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801c202:	697b      	ldr	r3, [r7, #20]
}
 801c204:	4618      	mov	r0, r3
 801c206:	371c      	adds	r7, #28
 801c208:	46bd      	mov	sp, r7
 801c20a:	bc80      	pop	{r7}
 801c20c:	4770      	bx	lr

0801c20e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801c20e:	b480      	push	{r7}
 801c210:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801c212:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801c216:	4618      	mov	r0, r3
 801c218:	46bd      	mov	sp, r7
 801c21a:	bc80      	pop	{r7}
 801c21c:	4770      	bx	lr

0801c21e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801c21e:	b480      	push	{r7}
 801c220:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801c222:	bf00      	nop
 801c224:	46bd      	mov	sp, r7
 801c226:	bc80      	pop	{r7}
 801c228:	4770      	bx	lr

0801c22a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801c22a:	b480      	push	{r7}
 801c22c:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801c22e:	bf00      	nop
 801c230:	46bd      	mov	sp, r7
 801c232:	bc80      	pop	{r7}
 801c234:	4770      	bx	lr

0801c236 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801c236:	b480      	push	{r7}
 801c238:	b083      	sub	sp, #12
 801c23a:	af00      	add	r7, sp, #0
 801c23c:	4603      	mov	r3, r0
 801c23e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801c240:	bf00      	nop
 801c242:	370c      	adds	r7, #12
 801c244:	46bd      	mov	sp, r7
 801c246:	bc80      	pop	{r7}
 801c248:	4770      	bx	lr
	...

0801c24c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c24c:	b480      	push	{r7}
 801c24e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c250:	4b04      	ldr	r3, [pc, #16]	; (801c264 <UTIL_LPM_Init+0x18>)
 801c252:	2200      	movs	r2, #0
 801c254:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c256:	4b04      	ldr	r3, [pc, #16]	; (801c268 <UTIL_LPM_Init+0x1c>)
 801c258:	2200      	movs	r2, #0
 801c25a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c25c:	bf00      	nop
 801c25e:	46bd      	mov	sp, r7
 801c260:	bc80      	pop	{r7}
 801c262:	4770      	bx	lr
 801c264:	200018a8 	.word	0x200018a8
 801c268:	200018ac 	.word	0x200018ac

0801c26c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c26c:	b480      	push	{r7}
 801c26e:	b087      	sub	sp, #28
 801c270:	af00      	add	r7, sp, #0
 801c272:	6078      	str	r0, [r7, #4]
 801c274:	460b      	mov	r3, r1
 801c276:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c278:	f3ef 8310 	mrs	r3, PRIMASK
 801c27c:	613b      	str	r3, [r7, #16]
  return(result);
 801c27e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c280:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c282:	b672      	cpsid	i
}
 801c284:	bf00      	nop
  
  switch( state )
 801c286:	78fb      	ldrb	r3, [r7, #3]
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d008      	beq.n	801c29e <UTIL_LPM_SetStopMode+0x32>
 801c28c:	2b01      	cmp	r3, #1
 801c28e:	d10e      	bne.n	801c2ae <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c290:	4b0d      	ldr	r3, [pc, #52]	; (801c2c8 <UTIL_LPM_SetStopMode+0x5c>)
 801c292:	681a      	ldr	r2, [r3, #0]
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	4313      	orrs	r3, r2
 801c298:	4a0b      	ldr	r2, [pc, #44]	; (801c2c8 <UTIL_LPM_SetStopMode+0x5c>)
 801c29a:	6013      	str	r3, [r2, #0]
      break;
 801c29c:	e008      	b.n	801c2b0 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	43da      	mvns	r2, r3
 801c2a2:	4b09      	ldr	r3, [pc, #36]	; (801c2c8 <UTIL_LPM_SetStopMode+0x5c>)
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	4013      	ands	r3, r2
 801c2a8:	4a07      	ldr	r2, [pc, #28]	; (801c2c8 <UTIL_LPM_SetStopMode+0x5c>)
 801c2aa:	6013      	str	r3, [r2, #0]
      break;
 801c2ac:	e000      	b.n	801c2b0 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801c2ae:	bf00      	nop
 801c2b0:	697b      	ldr	r3, [r7, #20]
 801c2b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	f383 8810 	msr	PRIMASK, r3
}
 801c2ba:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c2bc:	bf00      	nop
 801c2be:	371c      	adds	r7, #28
 801c2c0:	46bd      	mov	sp, r7
 801c2c2:	bc80      	pop	{r7}
 801c2c4:	4770      	bx	lr
 801c2c6:	bf00      	nop
 801c2c8:	200018a8 	.word	0x200018a8

0801c2cc <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c2cc:	b480      	push	{r7}
 801c2ce:	b087      	sub	sp, #28
 801c2d0:	af00      	add	r7, sp, #0
 801c2d2:	6078      	str	r0, [r7, #4]
 801c2d4:	460b      	mov	r3, r1
 801c2d6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2d8:	f3ef 8310 	mrs	r3, PRIMASK
 801c2dc:	613b      	str	r3, [r7, #16]
  return(result);
 801c2de:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c2e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c2e2:	b672      	cpsid	i
}
 801c2e4:	bf00      	nop
  
  switch(state)
 801c2e6:	78fb      	ldrb	r3, [r7, #3]
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d008      	beq.n	801c2fe <UTIL_LPM_SetOffMode+0x32>
 801c2ec:	2b01      	cmp	r3, #1
 801c2ee:	d10e      	bne.n	801c30e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c2f0:	4b0d      	ldr	r3, [pc, #52]	; (801c328 <UTIL_LPM_SetOffMode+0x5c>)
 801c2f2:	681a      	ldr	r2, [r3, #0]
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	4313      	orrs	r3, r2
 801c2f8:	4a0b      	ldr	r2, [pc, #44]	; (801c328 <UTIL_LPM_SetOffMode+0x5c>)
 801c2fa:	6013      	str	r3, [r2, #0]
      break;
 801c2fc:	e008      	b.n	801c310 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	43da      	mvns	r2, r3
 801c302:	4b09      	ldr	r3, [pc, #36]	; (801c328 <UTIL_LPM_SetOffMode+0x5c>)
 801c304:	681b      	ldr	r3, [r3, #0]
 801c306:	4013      	ands	r3, r2
 801c308:	4a07      	ldr	r2, [pc, #28]	; (801c328 <UTIL_LPM_SetOffMode+0x5c>)
 801c30a:	6013      	str	r3, [r2, #0]
      break;
 801c30c:	e000      	b.n	801c310 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801c30e:	bf00      	nop
 801c310:	697b      	ldr	r3, [r7, #20]
 801c312:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c314:	68fb      	ldr	r3, [r7, #12]
 801c316:	f383 8810 	msr	PRIMASK, r3
}
 801c31a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c31c:	bf00      	nop
 801c31e:	371c      	adds	r7, #28
 801c320:	46bd      	mov	sp, r7
 801c322:	bc80      	pop	{r7}
 801c324:	4770      	bx	lr
 801c326:	bf00      	nop
 801c328:	200018ac 	.word	0x200018ac

0801c32c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801c32c:	b580      	push	{r7, lr}
 801c32e:	b084      	sub	sp, #16
 801c330:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c332:	f3ef 8310 	mrs	r3, PRIMASK
 801c336:	60bb      	str	r3, [r7, #8]
  return(result);
 801c338:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801c33a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c33c:	b672      	cpsid	i
}
 801c33e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c340:	4b12      	ldr	r3, [pc, #72]	; (801c38c <UTIL_LPM_EnterLowPower+0x60>)
 801c342:	681b      	ldr	r3, [r3, #0]
 801c344:	2b00      	cmp	r3, #0
 801c346:	d006      	beq.n	801c356 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801c348:	4b11      	ldr	r3, [pc, #68]	; (801c390 <UTIL_LPM_EnterLowPower+0x64>)
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801c34e:	4b10      	ldr	r3, [pc, #64]	; (801c390 <UTIL_LPM_EnterLowPower+0x64>)
 801c350:	685b      	ldr	r3, [r3, #4]
 801c352:	4798      	blx	r3
 801c354:	e010      	b.n	801c378 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c356:	4b0f      	ldr	r3, [pc, #60]	; (801c394 <UTIL_LPM_EnterLowPower+0x68>)
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d006      	beq.n	801c36c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801c35e:	4b0c      	ldr	r3, [pc, #48]	; (801c390 <UTIL_LPM_EnterLowPower+0x64>)
 801c360:	689b      	ldr	r3, [r3, #8]
 801c362:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801c364:	4b0a      	ldr	r3, [pc, #40]	; (801c390 <UTIL_LPM_EnterLowPower+0x64>)
 801c366:	68db      	ldr	r3, [r3, #12]
 801c368:	4798      	blx	r3
 801c36a:	e005      	b.n	801c378 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801c36c:	4b08      	ldr	r3, [pc, #32]	; (801c390 <UTIL_LPM_EnterLowPower+0x64>)
 801c36e:	691b      	ldr	r3, [r3, #16]
 801c370:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801c372:	4b07      	ldr	r3, [pc, #28]	; (801c390 <UTIL_LPM_EnterLowPower+0x64>)
 801c374:	695b      	ldr	r3, [r3, #20]
 801c376:	4798      	blx	r3
 801c378:	68fb      	ldr	r3, [r7, #12]
 801c37a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	f383 8810 	msr	PRIMASK, r3
}
 801c382:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801c384:	bf00      	nop
 801c386:	3710      	adds	r7, #16
 801c388:	46bd      	mov	sp, r7
 801c38a:	bd80      	pop	{r7, pc}
 801c38c:	200018a8 	.word	0x200018a8
 801c390:	0801e3c4 	.word	0x0801e3c4
 801c394:	200018ac 	.word	0x200018ac

0801c398 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c398:	b480      	push	{r7}
 801c39a:	b087      	sub	sp, #28
 801c39c:	af00      	add	r7, sp, #0
 801c39e:	60f8      	str	r0, [r7, #12]
 801c3a0:	60b9      	str	r1, [r7, #8]
 801c3a2:	4613      	mov	r3, r2
 801c3a4:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801c3a6:	68fb      	ldr	r3, [r7, #12]
 801c3a8:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c3aa:	68bb      	ldr	r3, [r7, #8]
 801c3ac:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c3ae:	e007      	b.n	801c3c0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c3b0:	693a      	ldr	r2, [r7, #16]
 801c3b2:	1c53      	adds	r3, r2, #1
 801c3b4:	613b      	str	r3, [r7, #16]
 801c3b6:	697b      	ldr	r3, [r7, #20]
 801c3b8:	1c59      	adds	r1, r3, #1
 801c3ba:	6179      	str	r1, [r7, #20]
 801c3bc:	7812      	ldrb	r2, [r2, #0]
 801c3be:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c3c0:	88fb      	ldrh	r3, [r7, #6]
 801c3c2:	1e5a      	subs	r2, r3, #1
 801c3c4:	80fa      	strh	r2, [r7, #6]
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d1f2      	bne.n	801c3b0 <UTIL_MEM_cpy_8+0x18>
    }
}
 801c3ca:	bf00      	nop
 801c3cc:	bf00      	nop
 801c3ce:	371c      	adds	r7, #28
 801c3d0:	46bd      	mov	sp, r7
 801c3d2:	bc80      	pop	{r7}
 801c3d4:	4770      	bx	lr

0801c3d6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c3d6:	b480      	push	{r7}
 801c3d8:	b085      	sub	sp, #20
 801c3da:	af00      	add	r7, sp, #0
 801c3dc:	6078      	str	r0, [r7, #4]
 801c3de:	460b      	mov	r3, r1
 801c3e0:	70fb      	strb	r3, [r7, #3]
 801c3e2:	4613      	mov	r3, r2
 801c3e4:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c3ea:	e004      	b.n	801c3f6 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801c3ec:	68fb      	ldr	r3, [r7, #12]
 801c3ee:	1c5a      	adds	r2, r3, #1
 801c3f0:	60fa      	str	r2, [r7, #12]
 801c3f2:	78fa      	ldrb	r2, [r7, #3]
 801c3f4:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c3f6:	883b      	ldrh	r3, [r7, #0]
 801c3f8:	1e5a      	subs	r2, r3, #1
 801c3fa:	803a      	strh	r2, [r7, #0]
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d1f5      	bne.n	801c3ec <UTIL_MEM_set_8+0x16>
  }
}
 801c400:	bf00      	nop
 801c402:	bf00      	nop
 801c404:	3714      	adds	r7, #20
 801c406:	46bd      	mov	sp, r7
 801c408:	bc80      	pop	{r7}
 801c40a:	4770      	bx	lr

0801c40c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c40c:	b082      	sub	sp, #8
 801c40e:	b480      	push	{r7}
 801c410:	b087      	sub	sp, #28
 801c412:	af00      	add	r7, sp, #0
 801c414:	60f8      	str	r0, [r7, #12]
 801c416:	1d38      	adds	r0, r7, #4
 801c418:	e880 0006 	stmia.w	r0, {r1, r2}
 801c41c:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c41e:	2300      	movs	r3, #0
 801c420:	613b      	str	r3, [r7, #16]
 801c422:	2300      	movs	r3, #0
 801c424:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801c426:	687a      	ldr	r2, [r7, #4]
 801c428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c42a:	4413      	add	r3, r2
 801c42c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c42e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c432:	b29a      	uxth	r2, r3
 801c434:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801c438:	b29b      	uxth	r3, r3
 801c43a:	4413      	add	r3, r2
 801c43c:	b29b      	uxth	r3, r3
 801c43e:	b21b      	sxth	r3, r3
 801c440:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801c442:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801c44a:	db0a      	blt.n	801c462 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801c44c:	693b      	ldr	r3, [r7, #16]
 801c44e:	3301      	adds	r3, #1
 801c450:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801c452:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c456:	b29b      	uxth	r3, r3
 801c458:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801c45c:	b29b      	uxth	r3, r3
 801c45e:	b21b      	sxth	r3, r3
 801c460:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c462:	68fb      	ldr	r3, [r7, #12]
 801c464:	461a      	mov	r2, r3
 801c466:	f107 0310 	add.w	r3, r7, #16
 801c46a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c46e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c472:	68f8      	ldr	r0, [r7, #12]
 801c474:	371c      	adds	r7, #28
 801c476:	46bd      	mov	sp, r7
 801c478:	bc80      	pop	{r7}
 801c47a:	b002      	add	sp, #8
 801c47c:	4770      	bx	lr

0801c47e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c47e:	b082      	sub	sp, #8
 801c480:	b480      	push	{r7}
 801c482:	b087      	sub	sp, #28
 801c484:	af00      	add	r7, sp, #0
 801c486:	60f8      	str	r0, [r7, #12]
 801c488:	1d38      	adds	r0, r7, #4
 801c48a:	e880 0006 	stmia.w	r0, {r1, r2}
 801c48e:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c490:	2300      	movs	r3, #0
 801c492:	613b      	str	r3, [r7, #16]
 801c494:	2300      	movs	r3, #0
 801c496:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801c498:	687a      	ldr	r2, [r7, #4]
 801c49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c49c:	1ad3      	subs	r3, r2, r3
 801c49e:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c4a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c4a4:	b29a      	uxth	r2, r3
 801c4a6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801c4aa:	b29b      	uxth	r3, r3
 801c4ac:	1ad3      	subs	r3, r2, r3
 801c4ae:	b29b      	uxth	r3, r3
 801c4b0:	b21b      	sxth	r3, r3
 801c4b2:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801c4b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	da0a      	bge.n	801c4d2 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801c4bc:	693b      	ldr	r3, [r7, #16]
 801c4be:	3b01      	subs	r3, #1
 801c4c0:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801c4c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c4c6:	b29b      	uxth	r3, r3
 801c4c8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801c4cc:	b29b      	uxth	r3, r3
 801c4ce:	b21b      	sxth	r3, r3
 801c4d0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	461a      	mov	r2, r3
 801c4d6:	f107 0310 	add.w	r3, r7, #16
 801c4da:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c4de:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c4e2:	68f8      	ldr	r0, [r7, #12]
 801c4e4:	371c      	adds	r7, #28
 801c4e6:	46bd      	mov	sp, r7
 801c4e8:	bc80      	pop	{r7}
 801c4ea:	b002      	add	sp, #8
 801c4ec:	4770      	bx	lr
	...

0801c4f0 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801c4f0:	b580      	push	{r7, lr}
 801c4f2:	b088      	sub	sp, #32
 801c4f4:	af02      	add	r7, sp, #8
 801c4f6:	463b      	mov	r3, r7
 801c4f8:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	60bb      	str	r3, [r7, #8]
 801c500:	2300      	movs	r3, #0
 801c502:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c504:	4b10      	ldr	r3, [pc, #64]	; (801c548 <SysTimeSet+0x58>)
 801c506:	691b      	ldr	r3, [r3, #16]
 801c508:	f107 0208 	add.w	r2, r7, #8
 801c50c:	3204      	adds	r2, #4
 801c50e:	4610      	mov	r0, r2
 801c510:	4798      	blx	r3
 801c512:	4603      	mov	r3, r0
 801c514:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801c516:	f107 0010 	add.w	r0, r7, #16
 801c51a:	68fb      	ldr	r3, [r7, #12]
 801c51c:	9300      	str	r3, [sp, #0]
 801c51e:	68bb      	ldr	r3, [r7, #8]
 801c520:	463a      	mov	r2, r7
 801c522:	ca06      	ldmia	r2, {r1, r2}
 801c524:	f7ff ffab 	bl	801c47e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801c528:	4b07      	ldr	r3, [pc, #28]	; (801c548 <SysTimeSet+0x58>)
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	693a      	ldr	r2, [r7, #16]
 801c52e:	4610      	mov	r0, r2
 801c530:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801c532:	4b05      	ldr	r3, [pc, #20]	; (801c548 <SysTimeSet+0x58>)
 801c534:	689b      	ldr	r3, [r3, #8]
 801c536:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801c53a:	4610      	mov	r0, r2
 801c53c:	4798      	blx	r3
}
 801c53e:	bf00      	nop
 801c540:	3718      	adds	r7, #24
 801c542:	46bd      	mov	sp, r7
 801c544:	bd80      	pop	{r7, pc}
 801c546:	bf00      	nop
 801c548:	0801e4a8 	.word	0x0801e4a8

0801c54c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801c54c:	b580      	push	{r7, lr}
 801c54e:	b08a      	sub	sp, #40	; 0x28
 801c550:	af02      	add	r7, sp, #8
 801c552:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c554:	2300      	movs	r3, #0
 801c556:	61bb      	str	r3, [r7, #24]
 801c558:	2300      	movs	r3, #0
 801c55a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801c55c:	2300      	movs	r3, #0
 801c55e:	613b      	str	r3, [r7, #16]
 801c560:	2300      	movs	r3, #0
 801c562:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c564:	4b14      	ldr	r3, [pc, #80]	; (801c5b8 <SysTimeGet+0x6c>)
 801c566:	691b      	ldr	r3, [r3, #16]
 801c568:	f107 0218 	add.w	r2, r7, #24
 801c56c:	3204      	adds	r2, #4
 801c56e:	4610      	mov	r0, r2
 801c570:	4798      	blx	r3
 801c572:	4603      	mov	r3, r0
 801c574:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c576:	4b10      	ldr	r3, [pc, #64]	; (801c5b8 <SysTimeGet+0x6c>)
 801c578:	68db      	ldr	r3, [r3, #12]
 801c57a:	4798      	blx	r3
 801c57c:	4603      	mov	r3, r0
 801c57e:	b21b      	sxth	r3, r3
 801c580:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c582:	4b0d      	ldr	r3, [pc, #52]	; (801c5b8 <SysTimeGet+0x6c>)
 801c584:	685b      	ldr	r3, [r3, #4]
 801c586:	4798      	blx	r3
 801c588:	4603      	mov	r3, r0
 801c58a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801c58c:	f107 0010 	add.w	r0, r7, #16
 801c590:	69fb      	ldr	r3, [r7, #28]
 801c592:	9300      	str	r3, [sp, #0]
 801c594:	69bb      	ldr	r3, [r7, #24]
 801c596:	f107 0208 	add.w	r2, r7, #8
 801c59a:	ca06      	ldmia	r2, {r1, r2}
 801c59c:	f7ff ff36 	bl	801c40c <SysTimeAdd>

  return sysTime;
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	461a      	mov	r2, r3
 801c5a4:	f107 0310 	add.w	r3, r7, #16
 801c5a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c5ac:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c5b0:	6878      	ldr	r0, [r7, #4]
 801c5b2:	3720      	adds	r7, #32
 801c5b4:	46bd      	mov	sp, r7
 801c5b6:	bd80      	pop	{r7, pc}
 801c5b8:	0801e4a8 	.word	0x0801e4a8

0801c5bc <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801c5bc:	b580      	push	{r7, lr}
 801c5be:	b084      	sub	sp, #16
 801c5c0:	af00      	add	r7, sp, #0
 801c5c2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c5c4:	2300      	movs	r3, #0
 801c5c6:	60bb      	str	r3, [r7, #8]
 801c5c8:	2300      	movs	r3, #0
 801c5ca:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c5cc:	4b0a      	ldr	r3, [pc, #40]	; (801c5f8 <SysTimeGetMcuTime+0x3c>)
 801c5ce:	691b      	ldr	r3, [r3, #16]
 801c5d0:	f107 0208 	add.w	r2, r7, #8
 801c5d4:	3204      	adds	r2, #4
 801c5d6:	4610      	mov	r0, r2
 801c5d8:	4798      	blx	r3
 801c5da:	4603      	mov	r3, r0
 801c5dc:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801c5de:	687b      	ldr	r3, [r7, #4]
 801c5e0:	461a      	mov	r2, r3
 801c5e2:	f107 0308 	add.w	r3, r7, #8
 801c5e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c5ea:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c5ee:	6878      	ldr	r0, [r7, #4]
 801c5f0:	3710      	adds	r7, #16
 801c5f2:	46bd      	mov	sp, r7
 801c5f4:	bd80      	pop	{r7, pc}
 801c5f6:	bf00      	nop
 801c5f8:	0801e4a8 	.word	0x0801e4a8

0801c5fc <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801c5fc:	b580      	push	{r7, lr}
 801c5fe:	b088      	sub	sp, #32
 801c600:	af02      	add	r7, sp, #8
 801c602:	463b      	mov	r3, r7
 801c604:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c608:	4b0f      	ldr	r3, [pc, #60]	; (801c648 <SysTimeToMs+0x4c>)
 801c60a:	68db      	ldr	r3, [r3, #12]
 801c60c:	4798      	blx	r3
 801c60e:	4603      	mov	r3, r0
 801c610:	b21b      	sxth	r3, r3
 801c612:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c614:	4b0c      	ldr	r3, [pc, #48]	; (801c648 <SysTimeToMs+0x4c>)
 801c616:	685b      	ldr	r3, [r3, #4]
 801c618:	4798      	blx	r3
 801c61a:	4603      	mov	r3, r0
 801c61c:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801c61e:	f107 0008 	add.w	r0, r7, #8
 801c622:	697b      	ldr	r3, [r7, #20]
 801c624:	9300      	str	r3, [sp, #0]
 801c626:	693b      	ldr	r3, [r7, #16]
 801c628:	463a      	mov	r2, r7
 801c62a:	ca06      	ldmia	r2, {r1, r2}
 801c62c:	f7ff ff27 	bl	801c47e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801c630:	68bb      	ldr	r3, [r7, #8]
 801c632:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c636:	fb02 f303 	mul.w	r3, r2, r3
 801c63a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801c63e:	4413      	add	r3, r2
}
 801c640:	4618      	mov	r0, r3
 801c642:	3718      	adds	r7, #24
 801c644:	46bd      	mov	sp, r7
 801c646:	bd80      	pop	{r7, pc}
 801c648:	0801e4a8 	.word	0x0801e4a8

0801c64c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801c64c:	b580      	push	{r7, lr}
 801c64e:	b08a      	sub	sp, #40	; 0x28
 801c650:	af02      	add	r7, sp, #8
 801c652:	6078      	str	r0, [r7, #4]
 801c654:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801c656:	683b      	ldr	r3, [r7, #0]
 801c658:	4a19      	ldr	r2, [pc, #100]	; (801c6c0 <SysTimeFromMs+0x74>)
 801c65a:	fba2 2303 	umull	r2, r3, r2, r3
 801c65e:	099b      	lsrs	r3, r3, #6
 801c660:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801c662:	69fb      	ldr	r3, [r7, #28]
 801c664:	617b      	str	r3, [r7, #20]
 801c666:	683b      	ldr	r3, [r7, #0]
 801c668:	b29a      	uxth	r2, r3
 801c66a:	69fb      	ldr	r3, [r7, #28]
 801c66c:	b29b      	uxth	r3, r3
 801c66e:	4619      	mov	r1, r3
 801c670:	0149      	lsls	r1, r1, #5
 801c672:	1ac9      	subs	r1, r1, r3
 801c674:	0089      	lsls	r1, r1, #2
 801c676:	440b      	add	r3, r1
 801c678:	00db      	lsls	r3, r3, #3
 801c67a:	b29b      	uxth	r3, r3
 801c67c:	1ad3      	subs	r3, r2, r3
 801c67e:	b29b      	uxth	r3, r3
 801c680:	b21b      	sxth	r3, r3
 801c682:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801c684:	f107 030c 	add.w	r3, r7, #12
 801c688:	2200      	movs	r2, #0
 801c68a:	601a      	str	r2, [r3, #0]
 801c68c:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c68e:	4b0d      	ldr	r3, [pc, #52]	; (801c6c4 <SysTimeFromMs+0x78>)
 801c690:	68db      	ldr	r3, [r3, #12]
 801c692:	4798      	blx	r3
 801c694:	4603      	mov	r3, r0
 801c696:	b21b      	sxth	r3, r3
 801c698:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c69a:	4b0a      	ldr	r3, [pc, #40]	; (801c6c4 <SysTimeFromMs+0x78>)
 801c69c:	685b      	ldr	r3, [r3, #4]
 801c69e:	4798      	blx	r3
 801c6a0:	4603      	mov	r3, r0
 801c6a2:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801c6a4:	6878      	ldr	r0, [r7, #4]
 801c6a6:	693b      	ldr	r3, [r7, #16]
 801c6a8:	9300      	str	r3, [sp, #0]
 801c6aa:	68fb      	ldr	r3, [r7, #12]
 801c6ac:	f107 0214 	add.w	r2, r7, #20
 801c6b0:	ca06      	ldmia	r2, {r1, r2}
 801c6b2:	f7ff feab 	bl	801c40c <SysTimeAdd>
}
 801c6b6:	6878      	ldr	r0, [r7, #4]
 801c6b8:	3720      	adds	r7, #32
 801c6ba:	46bd      	mov	sp, r7
 801c6bc:	bd80      	pop	{r7, pc}
 801c6be:	bf00      	nop
 801c6c0:	10624dd3 	.word	0x10624dd3
 801c6c4:	0801e4a8 	.word	0x0801e4a8

0801c6c8 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801c6c8:	b480      	push	{r7}
 801c6ca:	b085      	sub	sp, #20
 801c6cc:	af00      	add	r7, sp, #0
 801c6ce:	6078      	str	r0, [r7, #4]
  int i = 0;
 801c6d0:	2300      	movs	r3, #0
 801c6d2:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801c6d4:	e00e      	b.n	801c6f4 <ee_skip_atoi+0x2c>
 801c6d6:	68fa      	ldr	r2, [r7, #12]
 801c6d8:	4613      	mov	r3, r2
 801c6da:	009b      	lsls	r3, r3, #2
 801c6dc:	4413      	add	r3, r2
 801c6de:	005b      	lsls	r3, r3, #1
 801c6e0:	4618      	mov	r0, r3
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	1c59      	adds	r1, r3, #1
 801c6e8:	687a      	ldr	r2, [r7, #4]
 801c6ea:	6011      	str	r1, [r2, #0]
 801c6ec:	781b      	ldrb	r3, [r3, #0]
 801c6ee:	4403      	add	r3, r0
 801c6f0:	3b30      	subs	r3, #48	; 0x30
 801c6f2:	60fb      	str	r3, [r7, #12]
 801c6f4:	687b      	ldr	r3, [r7, #4]
 801c6f6:	681b      	ldr	r3, [r3, #0]
 801c6f8:	781b      	ldrb	r3, [r3, #0]
 801c6fa:	2b2f      	cmp	r3, #47	; 0x2f
 801c6fc:	d904      	bls.n	801c708 <ee_skip_atoi+0x40>
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	681b      	ldr	r3, [r3, #0]
 801c702:	781b      	ldrb	r3, [r3, #0]
 801c704:	2b39      	cmp	r3, #57	; 0x39
 801c706:	d9e6      	bls.n	801c6d6 <ee_skip_atoi+0xe>
  return i;
 801c708:	68fb      	ldr	r3, [r7, #12]
}
 801c70a:	4618      	mov	r0, r3
 801c70c:	3714      	adds	r7, #20
 801c70e:	46bd      	mov	sp, r7
 801c710:	bc80      	pop	{r7}
 801c712:	4770      	bx	lr

0801c714 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801c714:	b480      	push	{r7}
 801c716:	b099      	sub	sp, #100	; 0x64
 801c718:	af00      	add	r7, sp, #0
 801c71a:	60f8      	str	r0, [r7, #12]
 801c71c:	60b9      	str	r1, [r7, #8]
 801c71e:	607a      	str	r2, [r7, #4]
 801c720:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801c722:	4b71      	ldr	r3, [pc, #452]	; (801c8e8 <ee_number+0x1d4>)
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801c728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c72e:	2b00      	cmp	r3, #0
 801c730:	d002      	beq.n	801c738 <ee_number+0x24>
 801c732:	4b6e      	ldr	r3, [pc, #440]	; (801c8ec <ee_number+0x1d8>)
 801c734:	681b      	ldr	r3, [r3, #0]
 801c736:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801c738:	683b      	ldr	r3, [r7, #0]
 801c73a:	2b01      	cmp	r3, #1
 801c73c:	dd02      	ble.n	801c744 <ee_number+0x30>
 801c73e:	683b      	ldr	r3, [r7, #0]
 801c740:	2b24      	cmp	r3, #36	; 0x24
 801c742:	dd01      	ble.n	801c748 <ee_number+0x34>
 801c744:	2300      	movs	r3, #0
 801c746:	e0ca      	b.n	801c8de <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801c748:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c74a:	f003 0301 	and.w	r3, r3, #1
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d001      	beq.n	801c756 <ee_number+0x42>
 801c752:	2330      	movs	r3, #48	; 0x30
 801c754:	e000      	b.n	801c758 <ee_number+0x44>
 801c756:	2320      	movs	r3, #32
 801c758:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801c75c:	2300      	movs	r3, #0
 801c75e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801c762:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c764:	f003 0302 	and.w	r3, r3, #2
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d00b      	beq.n	801c784 <ee_number+0x70>
  {
    if (num < 0)
 801c76c:	687b      	ldr	r3, [r7, #4]
 801c76e:	2b00      	cmp	r3, #0
 801c770:	da08      	bge.n	801c784 <ee_number+0x70>
    {
      sign = '-';
 801c772:	232d      	movs	r3, #45	; 0x2d
 801c774:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801c778:	687b      	ldr	r3, [r7, #4]
 801c77a:	425b      	negs	r3, r3
 801c77c:	607b      	str	r3, [r7, #4]
      size--;
 801c77e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c780:	3b01      	subs	r3, #1
 801c782:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801c784:	2300      	movs	r3, #0
 801c786:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d11e      	bne.n	801c7cc <ee_number+0xb8>
    tmp[i++] = '0';
 801c78e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c790:	1c5a      	adds	r2, r3, #1
 801c792:	657a      	str	r2, [r7, #84]	; 0x54
 801c794:	3360      	adds	r3, #96	; 0x60
 801c796:	443b      	add	r3, r7
 801c798:	2230      	movs	r2, #48	; 0x30
 801c79a:	f803 2c50 	strb.w	r2, [r3, #-80]
 801c79e:	e018      	b.n	801c7d2 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	683a      	ldr	r2, [r7, #0]
 801c7a4:	fbb3 f1f2 	udiv	r1, r3, r2
 801c7a8:	fb01 f202 	mul.w	r2, r1, r2
 801c7ac:	1a9b      	subs	r3, r3, r2
 801c7ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c7b0:	441a      	add	r2, r3
 801c7b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c7b4:	1c59      	adds	r1, r3, #1
 801c7b6:	6579      	str	r1, [r7, #84]	; 0x54
 801c7b8:	7812      	ldrb	r2, [r2, #0]
 801c7ba:	3360      	adds	r3, #96	; 0x60
 801c7bc:	443b      	add	r3, r7
 801c7be:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801c7c2:	687a      	ldr	r2, [r7, #4]
 801c7c4:	683b      	ldr	r3, [r7, #0]
 801c7c6:	fbb2 f3f3 	udiv	r3, r2, r3
 801c7ca:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	d1e6      	bne.n	801c7a0 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801c7d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c7d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c7d6:	429a      	cmp	r2, r3
 801c7d8:	dd01      	ble.n	801c7de <ee_number+0xca>
 801c7da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c7dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801c7de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c7e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c7e2:	1ad3      	subs	r3, r2, r3
 801c7e4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801c7e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c7e8:	f003 0301 	and.w	r3, r3, #1
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d112      	bne.n	801c816 <ee_number+0x102>
 801c7f0:	e00c      	b.n	801c80c <ee_number+0xf8>
 801c7f2:	68fb      	ldr	r3, [r7, #12]
 801c7f4:	1c5a      	adds	r2, r3, #1
 801c7f6:	60fa      	str	r2, [r7, #12]
 801c7f8:	2220      	movs	r2, #32
 801c7fa:	701a      	strb	r2, [r3, #0]
 801c7fc:	68bb      	ldr	r3, [r7, #8]
 801c7fe:	3b01      	subs	r3, #1
 801c800:	60bb      	str	r3, [r7, #8]
 801c802:	68bb      	ldr	r3, [r7, #8]
 801c804:	2b00      	cmp	r3, #0
 801c806:	d101      	bne.n	801c80c <ee_number+0xf8>
 801c808:	68fb      	ldr	r3, [r7, #12]
 801c80a:	e068      	b.n	801c8de <ee_number+0x1ca>
 801c80c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c80e:	1e5a      	subs	r2, r3, #1
 801c810:	66ba      	str	r2, [r7, #104]	; 0x68
 801c812:	2b00      	cmp	r3, #0
 801c814:	dced      	bgt.n	801c7f2 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801c816:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d01b      	beq.n	801c856 <ee_number+0x142>
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	1c5a      	adds	r2, r3, #1
 801c822:	60fa      	str	r2, [r7, #12]
 801c824:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801c828:	701a      	strb	r2, [r3, #0]
 801c82a:	68bb      	ldr	r3, [r7, #8]
 801c82c:	3b01      	subs	r3, #1
 801c82e:	60bb      	str	r3, [r7, #8]
 801c830:	68bb      	ldr	r3, [r7, #8]
 801c832:	2b00      	cmp	r3, #0
 801c834:	d10f      	bne.n	801c856 <ee_number+0x142>
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	e051      	b.n	801c8de <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801c83a:	68fb      	ldr	r3, [r7, #12]
 801c83c:	1c5a      	adds	r2, r3, #1
 801c83e:	60fa      	str	r2, [r7, #12]
 801c840:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801c844:	701a      	strb	r2, [r3, #0]
 801c846:	68bb      	ldr	r3, [r7, #8]
 801c848:	3b01      	subs	r3, #1
 801c84a:	60bb      	str	r3, [r7, #8]
 801c84c:	68bb      	ldr	r3, [r7, #8]
 801c84e:	2b00      	cmp	r3, #0
 801c850:	d101      	bne.n	801c856 <ee_number+0x142>
 801c852:	68fb      	ldr	r3, [r7, #12]
 801c854:	e043      	b.n	801c8de <ee_number+0x1ca>
 801c856:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c858:	1e5a      	subs	r2, r3, #1
 801c85a:	66ba      	str	r2, [r7, #104]	; 0x68
 801c85c:	2b00      	cmp	r3, #0
 801c85e:	dcec      	bgt.n	801c83a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801c860:	e00c      	b.n	801c87c <ee_number+0x168>
 801c862:	68fb      	ldr	r3, [r7, #12]
 801c864:	1c5a      	adds	r2, r3, #1
 801c866:	60fa      	str	r2, [r7, #12]
 801c868:	2230      	movs	r2, #48	; 0x30
 801c86a:	701a      	strb	r2, [r3, #0]
 801c86c:	68bb      	ldr	r3, [r7, #8]
 801c86e:	3b01      	subs	r3, #1
 801c870:	60bb      	str	r3, [r7, #8]
 801c872:	68bb      	ldr	r3, [r7, #8]
 801c874:	2b00      	cmp	r3, #0
 801c876:	d101      	bne.n	801c87c <ee_number+0x168>
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	e030      	b.n	801c8de <ee_number+0x1ca>
 801c87c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c87e:	1e5a      	subs	r2, r3, #1
 801c880:	66fa      	str	r2, [r7, #108]	; 0x6c
 801c882:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c884:	429a      	cmp	r2, r3
 801c886:	dbec      	blt.n	801c862 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801c888:	e010      	b.n	801c8ac <ee_number+0x198>
 801c88a:	68fb      	ldr	r3, [r7, #12]
 801c88c:	1c5a      	adds	r2, r3, #1
 801c88e:	60fa      	str	r2, [r7, #12]
 801c890:	f107 0110 	add.w	r1, r7, #16
 801c894:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c896:	440a      	add	r2, r1
 801c898:	7812      	ldrb	r2, [r2, #0]
 801c89a:	701a      	strb	r2, [r3, #0]
 801c89c:	68bb      	ldr	r3, [r7, #8]
 801c89e:	3b01      	subs	r3, #1
 801c8a0:	60bb      	str	r3, [r7, #8]
 801c8a2:	68bb      	ldr	r3, [r7, #8]
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	d101      	bne.n	801c8ac <ee_number+0x198>
 801c8a8:	68fb      	ldr	r3, [r7, #12]
 801c8aa:	e018      	b.n	801c8de <ee_number+0x1ca>
 801c8ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c8ae:	1e5a      	subs	r2, r3, #1
 801c8b0:	657a      	str	r2, [r7, #84]	; 0x54
 801c8b2:	2b00      	cmp	r3, #0
 801c8b4:	dce9      	bgt.n	801c88a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801c8b6:	e00c      	b.n	801c8d2 <ee_number+0x1be>
 801c8b8:	68fb      	ldr	r3, [r7, #12]
 801c8ba:	1c5a      	adds	r2, r3, #1
 801c8bc:	60fa      	str	r2, [r7, #12]
 801c8be:	2220      	movs	r2, #32
 801c8c0:	701a      	strb	r2, [r3, #0]
 801c8c2:	68bb      	ldr	r3, [r7, #8]
 801c8c4:	3b01      	subs	r3, #1
 801c8c6:	60bb      	str	r3, [r7, #8]
 801c8c8:	68bb      	ldr	r3, [r7, #8]
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	d101      	bne.n	801c8d2 <ee_number+0x1be>
 801c8ce:	68fb      	ldr	r3, [r7, #12]
 801c8d0:	e005      	b.n	801c8de <ee_number+0x1ca>
 801c8d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c8d4:	1e5a      	subs	r2, r3, #1
 801c8d6:	66ba      	str	r2, [r7, #104]	; 0x68
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	dced      	bgt.n	801c8b8 <ee_number+0x1a4>

  return str;
 801c8dc:	68fb      	ldr	r3, [r7, #12]
}
 801c8de:	4618      	mov	r0, r3
 801c8e0:	3764      	adds	r7, #100	; 0x64
 801c8e2:	46bd      	mov	sp, r7
 801c8e4:	bc80      	pop	{r7}
 801c8e6:	4770      	bx	lr
 801c8e8:	20000150 	.word	0x20000150
 801c8ec:	20000154 	.word	0x20000154

0801c8f0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801c8f0:	b580      	push	{r7, lr}
 801c8f2:	b092      	sub	sp, #72	; 0x48
 801c8f4:	af04      	add	r7, sp, #16
 801c8f6:	60f8      	str	r0, [r7, #12]
 801c8f8:	60b9      	str	r1, [r7, #8]
 801c8fa:	607a      	str	r2, [r7, #4]
 801c8fc:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801c8fe:	68bb      	ldr	r3, [r7, #8]
 801c900:	2b00      	cmp	r3, #0
 801c902:	dc01      	bgt.n	801c908 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801c904:	2300      	movs	r3, #0
 801c906:	e13e      	b.n	801cb86 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c908:	68fb      	ldr	r3, [r7, #12]
 801c90a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c90c:	e128      	b.n	801cb60 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801c90e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c910:	68fb      	ldr	r3, [r7, #12]
 801c912:	1ad2      	subs	r2, r2, r3
 801c914:	68bb      	ldr	r3, [r7, #8]
 801c916:	3b01      	subs	r3, #1
 801c918:	429a      	cmp	r2, r3
 801c91a:	f280 812e 	bge.w	801cb7a <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	781b      	ldrb	r3, [r3, #0]
 801c922:	2b25      	cmp	r3, #37	; 0x25
 801c924:	d006      	beq.n	801c934 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801c926:	687a      	ldr	r2, [r7, #4]
 801c928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c92a:	1c59      	adds	r1, r3, #1
 801c92c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c92e:	7812      	ldrb	r2, [r2, #0]
 801c930:	701a      	strb	r2, [r3, #0]
      continue;
 801c932:	e112      	b.n	801cb5a <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801c934:	2300      	movs	r3, #0
 801c936:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	3301      	adds	r3, #1
 801c93c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	781b      	ldrb	r3, [r3, #0]
 801c942:	2b30      	cmp	r3, #48	; 0x30
 801c944:	d103      	bne.n	801c94e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801c946:	6a3b      	ldr	r3, [r7, #32]
 801c948:	f043 0301 	orr.w	r3, r3, #1
 801c94c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801c94e:	f04f 33ff 	mov.w	r3, #4294967295
 801c952:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801c954:	687b      	ldr	r3, [r7, #4]
 801c956:	781b      	ldrb	r3, [r3, #0]
 801c958:	2b2f      	cmp	r3, #47	; 0x2f
 801c95a:	d908      	bls.n	801c96e <tiny_vsnprintf_like+0x7e>
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	781b      	ldrb	r3, [r3, #0]
 801c960:	2b39      	cmp	r3, #57	; 0x39
 801c962:	d804      	bhi.n	801c96e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801c964:	1d3b      	adds	r3, r7, #4
 801c966:	4618      	mov	r0, r3
 801c968:	f7ff feae 	bl	801c6c8 <ee_skip_atoi>
 801c96c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801c96e:	f04f 33ff 	mov.w	r3, #4294967295
 801c972:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801c974:	f04f 33ff 	mov.w	r3, #4294967295
 801c978:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801c97a:	230a      	movs	r3, #10
 801c97c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	781b      	ldrb	r3, [r3, #0]
 801c982:	3b58      	subs	r3, #88	; 0x58
 801c984:	2b20      	cmp	r3, #32
 801c986:	f200 8094 	bhi.w	801cab2 <tiny_vsnprintf_like+0x1c2>
 801c98a:	a201      	add	r2, pc, #4	; (adr r2, 801c990 <tiny_vsnprintf_like+0xa0>)
 801c98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c990:	0801ca9b 	.word	0x0801ca9b
 801c994:	0801cab3 	.word	0x0801cab3
 801c998:	0801cab3 	.word	0x0801cab3
 801c99c:	0801cab3 	.word	0x0801cab3
 801c9a0:	0801cab3 	.word	0x0801cab3
 801c9a4:	0801cab3 	.word	0x0801cab3
 801c9a8:	0801cab3 	.word	0x0801cab3
 801c9ac:	0801cab3 	.word	0x0801cab3
 801c9b0:	0801cab3 	.word	0x0801cab3
 801c9b4:	0801cab3 	.word	0x0801cab3
 801c9b8:	0801cab3 	.word	0x0801cab3
 801c9bc:	0801ca1f 	.word	0x0801ca1f
 801c9c0:	0801caa9 	.word	0x0801caa9
 801c9c4:	0801cab3 	.word	0x0801cab3
 801c9c8:	0801cab3 	.word	0x0801cab3
 801c9cc:	0801cab3 	.word	0x0801cab3
 801c9d0:	0801cab3 	.word	0x0801cab3
 801c9d4:	0801caa9 	.word	0x0801caa9
 801c9d8:	0801cab3 	.word	0x0801cab3
 801c9dc:	0801cab3 	.word	0x0801cab3
 801c9e0:	0801cab3 	.word	0x0801cab3
 801c9e4:	0801cab3 	.word	0x0801cab3
 801c9e8:	0801cab3 	.word	0x0801cab3
 801c9ec:	0801cab3 	.word	0x0801cab3
 801c9f0:	0801cab3 	.word	0x0801cab3
 801c9f4:	0801cab3 	.word	0x0801cab3
 801c9f8:	0801cab3 	.word	0x0801cab3
 801c9fc:	0801ca3f 	.word	0x0801ca3f
 801ca00:	0801cab3 	.word	0x0801cab3
 801ca04:	0801caff 	.word	0x0801caff
 801ca08:	0801cab3 	.word	0x0801cab3
 801ca0c:	0801cab3 	.word	0x0801cab3
 801ca10:	0801caa3 	.word	0x0801caa3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801ca14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca16:	1c5a      	adds	r2, r3, #1
 801ca18:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ca1a:	2220      	movs	r2, #32
 801ca1c:	701a      	strb	r2, [r3, #0]
 801ca1e:	69fb      	ldr	r3, [r7, #28]
 801ca20:	3b01      	subs	r3, #1
 801ca22:	61fb      	str	r3, [r7, #28]
 801ca24:	69fb      	ldr	r3, [r7, #28]
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	dcf4      	bgt.n	801ca14 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801ca2a:	683b      	ldr	r3, [r7, #0]
 801ca2c:	1d1a      	adds	r2, r3, #4
 801ca2e:	603a      	str	r2, [r7, #0]
 801ca30:	6819      	ldr	r1, [r3, #0]
 801ca32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca34:	1c5a      	adds	r2, r3, #1
 801ca36:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ca38:	b2ca      	uxtb	r2, r1
 801ca3a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801ca3c:	e08d      	b.n	801cb5a <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801ca3e:	683b      	ldr	r3, [r7, #0]
 801ca40:	1d1a      	adds	r2, r3, #4
 801ca42:	603a      	str	r2, [r7, #0]
 801ca44:	681b      	ldr	r3, [r3, #0]
 801ca46:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801ca48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca4a:	2b00      	cmp	r3, #0
 801ca4c:	d101      	bne.n	801ca52 <tiny_vsnprintf_like+0x162>
 801ca4e:	4b50      	ldr	r3, [pc, #320]	; (801cb90 <tiny_vsnprintf_like+0x2a0>)
 801ca50:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801ca52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ca54:	f7e3 fb90 	bl	8000178 <strlen>
 801ca58:	4603      	mov	r3, r0
 801ca5a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801ca5c:	e004      	b.n	801ca68 <tiny_vsnprintf_like+0x178>
 801ca5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca60:	1c5a      	adds	r2, r3, #1
 801ca62:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ca64:	2220      	movs	r2, #32
 801ca66:	701a      	strb	r2, [r3, #0]
 801ca68:	69fb      	ldr	r3, [r7, #28]
 801ca6a:	1e5a      	subs	r2, r3, #1
 801ca6c:	61fa      	str	r2, [r7, #28]
 801ca6e:	693a      	ldr	r2, [r7, #16]
 801ca70:	429a      	cmp	r2, r3
 801ca72:	dbf4      	blt.n	801ca5e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801ca74:	2300      	movs	r3, #0
 801ca76:	62bb      	str	r3, [r7, #40]	; 0x28
 801ca78:	e00a      	b.n	801ca90 <tiny_vsnprintf_like+0x1a0>
 801ca7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ca7c:	1c53      	adds	r3, r2, #1
 801ca7e:	627b      	str	r3, [r7, #36]	; 0x24
 801ca80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca82:	1c59      	adds	r1, r3, #1
 801ca84:	62f9      	str	r1, [r7, #44]	; 0x2c
 801ca86:	7812      	ldrb	r2, [r2, #0]
 801ca88:	701a      	strb	r2, [r3, #0]
 801ca8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca8c:	3301      	adds	r3, #1
 801ca8e:	62bb      	str	r3, [r7, #40]	; 0x28
 801ca90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ca92:	693b      	ldr	r3, [r7, #16]
 801ca94:	429a      	cmp	r2, r3
 801ca96:	dbf0      	blt.n	801ca7a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801ca98:	e05f      	b.n	801cb5a <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801ca9a:	6a3b      	ldr	r3, [r7, #32]
 801ca9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801caa0:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801caa2:	2310      	movs	r3, #16
 801caa4:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801caa6:	e02b      	b.n	801cb00 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801caa8:	6a3b      	ldr	r3, [r7, #32]
 801caaa:	f043 0302 	orr.w	r3, r3, #2
 801caae:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801cab0:	e025      	b.n	801cafe <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	781b      	ldrb	r3, [r3, #0]
 801cab6:	2b25      	cmp	r3, #37	; 0x25
 801cab8:	d004      	beq.n	801cac4 <tiny_vsnprintf_like+0x1d4>
 801caba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cabc:	1c5a      	adds	r2, r3, #1
 801cabe:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cac0:	2225      	movs	r2, #37	; 0x25
 801cac2:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801cac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cac6:	68fb      	ldr	r3, [r7, #12]
 801cac8:	1ad2      	subs	r2, r2, r3
 801caca:	68bb      	ldr	r3, [r7, #8]
 801cacc:	3b01      	subs	r3, #1
 801cace:	429a      	cmp	r2, r3
 801cad0:	da16      	bge.n	801cb00 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	781b      	ldrb	r3, [r3, #0]
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d006      	beq.n	801cae8 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801cada:	687a      	ldr	r2, [r7, #4]
 801cadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cade:	1c59      	adds	r1, r3, #1
 801cae0:	62f9      	str	r1, [r7, #44]	; 0x2c
 801cae2:	7812      	ldrb	r2, [r2, #0]
 801cae4:	701a      	strb	r2, [r3, #0]
 801cae6:	e002      	b.n	801caee <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	3b01      	subs	r3, #1
 801caec:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801caee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801caf0:	68fb      	ldr	r3, [r7, #12]
 801caf2:	1ad2      	subs	r2, r2, r3
 801caf4:	68bb      	ldr	r3, [r7, #8]
 801caf6:	3b01      	subs	r3, #1
 801caf8:	429a      	cmp	r2, r3
 801cafa:	db2d      	blt.n	801cb58 <tiny_vsnprintf_like+0x268>
 801cafc:	e000      	b.n	801cb00 <tiny_vsnprintf_like+0x210>
        break;
 801cafe:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801cb00:	697b      	ldr	r3, [r7, #20]
 801cb02:	2b6c      	cmp	r3, #108	; 0x6c
 801cb04:	d105      	bne.n	801cb12 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801cb06:	683b      	ldr	r3, [r7, #0]
 801cb08:	1d1a      	adds	r2, r3, #4
 801cb0a:	603a      	str	r2, [r7, #0]
 801cb0c:	681b      	ldr	r3, [r3, #0]
 801cb0e:	637b      	str	r3, [r7, #52]	; 0x34
 801cb10:	e00f      	b.n	801cb32 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801cb12:	6a3b      	ldr	r3, [r7, #32]
 801cb14:	f003 0302 	and.w	r3, r3, #2
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	d005      	beq.n	801cb28 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801cb1c:	683b      	ldr	r3, [r7, #0]
 801cb1e:	1d1a      	adds	r2, r3, #4
 801cb20:	603a      	str	r2, [r7, #0]
 801cb22:	681b      	ldr	r3, [r3, #0]
 801cb24:	637b      	str	r3, [r7, #52]	; 0x34
 801cb26:	e004      	b.n	801cb32 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801cb28:	683b      	ldr	r3, [r7, #0]
 801cb2a:	1d1a      	adds	r2, r3, #4
 801cb2c:	603a      	str	r2, [r7, #0]
 801cb2e:	681b      	ldr	r3, [r3, #0]
 801cb30:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801cb32:	68bb      	ldr	r3, [r7, #8]
 801cb34:	1e5a      	subs	r2, r3, #1
 801cb36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801cb38:	68fb      	ldr	r3, [r7, #12]
 801cb3a:	1acb      	subs	r3, r1, r3
 801cb3c:	1ad1      	subs	r1, r2, r3
 801cb3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cb40:	6a3b      	ldr	r3, [r7, #32]
 801cb42:	9302      	str	r3, [sp, #8]
 801cb44:	69bb      	ldr	r3, [r7, #24]
 801cb46:	9301      	str	r3, [sp, #4]
 801cb48:	69fb      	ldr	r3, [r7, #28]
 801cb4a:	9300      	str	r3, [sp, #0]
 801cb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cb50:	f7ff fde0 	bl	801c714 <ee_number>
 801cb54:	62f8      	str	r0, [r7, #44]	; 0x2c
 801cb56:	e000      	b.n	801cb5a <tiny_vsnprintf_like+0x26a>
        continue;
 801cb58:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	3301      	adds	r3, #1
 801cb5e:	607b      	str	r3, [r7, #4]
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	781b      	ldrb	r3, [r3, #0]
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	f47f aed2 	bne.w	801c90e <tiny_vsnprintf_like+0x1e>
 801cb6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cb6c:	68fb      	ldr	r3, [r7, #12]
 801cb6e:	1ad2      	subs	r2, r2, r3
 801cb70:	68bb      	ldr	r3, [r7, #8]
 801cb72:	3b01      	subs	r3, #1
 801cb74:	429a      	cmp	r2, r3
 801cb76:	f6bf aeca 	bge.w	801c90e <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801cb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb7c:	2200      	movs	r2, #0
 801cb7e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801cb80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cb82:	68fb      	ldr	r3, [r7, #12]
 801cb84:	1ad3      	subs	r3, r2, r3
}
 801cb86:	4618      	mov	r0, r3
 801cb88:	3738      	adds	r7, #56	; 0x38
 801cb8a:	46bd      	mov	sp, r7
 801cb8c:	bd80      	pop	{r7, pc}
 801cb8e:	bf00      	nop
 801cb90:	0801e3bc 	.word	0x0801e3bc

0801cb94 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801cb94:	b580      	push	{r7, lr}
 801cb96:	b090      	sub	sp, #64	; 0x40
 801cb98:	af00      	add	r7, sp, #0
 801cb9a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801cb9c:	4b73      	ldr	r3, [pc, #460]	; (801cd6c <UTIL_SEQ_Run+0x1d8>)
 801cb9e:	681b      	ldr	r3, [r3, #0]
 801cba0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801cba2:	4b72      	ldr	r3, [pc, #456]	; (801cd6c <UTIL_SEQ_Run+0x1d8>)
 801cba4:	681a      	ldr	r2, [r3, #0]
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	4013      	ands	r3, r2
 801cbaa:	4a70      	ldr	r2, [pc, #448]	; (801cd6c <UTIL_SEQ_Run+0x1d8>)
 801cbac:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801cbae:	4b70      	ldr	r3, [pc, #448]	; (801cd70 <UTIL_SEQ_Run+0x1dc>)
 801cbb0:	681b      	ldr	r3, [r3, #0]
 801cbb2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801cbb4:	4b6f      	ldr	r3, [pc, #444]	; (801cd74 <UTIL_SEQ_Run+0x1e0>)
 801cbb6:	681b      	ldr	r3, [r3, #0]
 801cbb8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801cbba:	4b6f      	ldr	r3, [pc, #444]	; (801cd78 <UTIL_SEQ_Run+0x1e4>)
 801cbbc:	681b      	ldr	r3, [r3, #0]
 801cbbe:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801cbc0:	4b6e      	ldr	r3, [pc, #440]	; (801cd7c <UTIL_SEQ_Run+0x1e8>)
 801cbc2:	681b      	ldr	r3, [r3, #0]
 801cbc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801cbc6:	e08d      	b.n	801cce4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801cbc8:	2300      	movs	r3, #0
 801cbca:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801cbcc:	e002      	b.n	801cbd4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801cbce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cbd0:	3301      	adds	r3, #1
 801cbd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801cbd4:	4a6a      	ldr	r2, [pc, #424]	; (801cd80 <UTIL_SEQ_Run+0x1ec>)
 801cbd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cbd8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801cbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cbde:	401a      	ands	r2, r3
 801cbe0:	4b62      	ldr	r3, [pc, #392]	; (801cd6c <UTIL_SEQ_Run+0x1d8>)
 801cbe2:	681b      	ldr	r3, [r3, #0]
 801cbe4:	4013      	ands	r3, r2
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	d0f1      	beq.n	801cbce <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801cbea:	4a65      	ldr	r2, [pc, #404]	; (801cd80 <UTIL_SEQ_Run+0x1ec>)
 801cbec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cbee:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801cbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cbf4:	401a      	ands	r2, r3
 801cbf6:	4b5d      	ldr	r3, [pc, #372]	; (801cd6c <UTIL_SEQ_Run+0x1d8>)
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	4013      	ands	r3, r2
 801cbfc:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801cbfe:	4a60      	ldr	r2, [pc, #384]	; (801cd80 <UTIL_SEQ_Run+0x1ec>)
 801cc00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc02:	00db      	lsls	r3, r3, #3
 801cc04:	4413      	add	r3, r2
 801cc06:	685a      	ldr	r2, [r3, #4]
 801cc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc0a:	4013      	ands	r3, r2
 801cc0c:	2b00      	cmp	r3, #0
 801cc0e:	d106      	bne.n	801cc1e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801cc10:	4a5b      	ldr	r2, [pc, #364]	; (801cd80 <UTIL_SEQ_Run+0x1ec>)
 801cc12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc14:	00db      	lsls	r3, r3, #3
 801cc16:	4413      	add	r3, r2
 801cc18:	f04f 32ff 	mov.w	r2, #4294967295
 801cc1c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801cc1e:	4a58      	ldr	r2, [pc, #352]	; (801cd80 <UTIL_SEQ_Run+0x1ec>)
 801cc20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc22:	00db      	lsls	r3, r3, #3
 801cc24:	4413      	add	r3, r2
 801cc26:	685a      	ldr	r2, [r3, #4]
 801cc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc2a:	4013      	ands	r3, r2
 801cc2c:	4618      	mov	r0, r3
 801cc2e:	f000 f907 	bl	801ce40 <SEQ_BitPosition>
 801cc32:	4603      	mov	r3, r0
 801cc34:	461a      	mov	r2, r3
 801cc36:	4b53      	ldr	r3, [pc, #332]	; (801cd84 <UTIL_SEQ_Run+0x1f0>)
 801cc38:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801cc3a:	4a51      	ldr	r2, [pc, #324]	; (801cd80 <UTIL_SEQ_Run+0x1ec>)
 801cc3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc3e:	00db      	lsls	r3, r3, #3
 801cc40:	4413      	add	r3, r2
 801cc42:	685a      	ldr	r2, [r3, #4]
 801cc44:	4b4f      	ldr	r3, [pc, #316]	; (801cd84 <UTIL_SEQ_Run+0x1f0>)
 801cc46:	681b      	ldr	r3, [r3, #0]
 801cc48:	2101      	movs	r1, #1
 801cc4a:	fa01 f303 	lsl.w	r3, r1, r3
 801cc4e:	43db      	mvns	r3, r3
 801cc50:	401a      	ands	r2, r3
 801cc52:	494b      	ldr	r1, [pc, #300]	; (801cd80 <UTIL_SEQ_Run+0x1ec>)
 801cc54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc56:	00db      	lsls	r3, r3, #3
 801cc58:	440b      	add	r3, r1
 801cc5a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cc5c:	f3ef 8310 	mrs	r3, PRIMASK
 801cc60:	61bb      	str	r3, [r7, #24]
  return(result);
 801cc62:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801cc64:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801cc66:	b672      	cpsid	i
}
 801cc68:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801cc6a:	4b46      	ldr	r3, [pc, #280]	; (801cd84 <UTIL_SEQ_Run+0x1f0>)
 801cc6c:	681b      	ldr	r3, [r3, #0]
 801cc6e:	2201      	movs	r2, #1
 801cc70:	fa02 f303 	lsl.w	r3, r2, r3
 801cc74:	43da      	mvns	r2, r3
 801cc76:	4b3e      	ldr	r3, [pc, #248]	; (801cd70 <UTIL_SEQ_Run+0x1dc>)
 801cc78:	681b      	ldr	r3, [r3, #0]
 801cc7a:	4013      	ands	r3, r2
 801cc7c:	4a3c      	ldr	r2, [pc, #240]	; (801cd70 <UTIL_SEQ_Run+0x1dc>)
 801cc7e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801cc80:	2301      	movs	r3, #1
 801cc82:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cc84:	e013      	b.n	801ccae <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801cc86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc88:	3b01      	subs	r3, #1
 801cc8a:	4a3d      	ldr	r2, [pc, #244]	; (801cd80 <UTIL_SEQ_Run+0x1ec>)
 801cc8c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801cc90:	4b3c      	ldr	r3, [pc, #240]	; (801cd84 <UTIL_SEQ_Run+0x1f0>)
 801cc92:	681b      	ldr	r3, [r3, #0]
 801cc94:	2201      	movs	r2, #1
 801cc96:	fa02 f303 	lsl.w	r3, r2, r3
 801cc9a:	43da      	mvns	r2, r3
 801cc9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc9e:	3b01      	subs	r3, #1
 801cca0:	400a      	ands	r2, r1
 801cca2:	4937      	ldr	r1, [pc, #220]	; (801cd80 <UTIL_SEQ_Run+0x1ec>)
 801cca4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801cca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ccaa:	3b01      	subs	r3, #1
 801ccac:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ccae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ccb0:	2b00      	cmp	r3, #0
 801ccb2:	d1e8      	bne.n	801cc86 <UTIL_SEQ_Run+0xf2>
 801ccb4:	6a3b      	ldr	r3, [r7, #32]
 801ccb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ccb8:	697b      	ldr	r3, [r7, #20]
 801ccba:	f383 8810 	msr	PRIMASK, r3
}
 801ccbe:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801ccc0:	4b30      	ldr	r3, [pc, #192]	; (801cd84 <UTIL_SEQ_Run+0x1f0>)
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	4a30      	ldr	r2, [pc, #192]	; (801cd88 <UTIL_SEQ_Run+0x1f4>)
 801ccc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ccca:	4798      	blx	r3

    local_taskset = TaskSet;
 801cccc:	4b28      	ldr	r3, [pc, #160]	; (801cd70 <UTIL_SEQ_Run+0x1dc>)
 801ccce:	681b      	ldr	r3, [r3, #0]
 801ccd0:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801ccd2:	4b28      	ldr	r3, [pc, #160]	; (801cd74 <UTIL_SEQ_Run+0x1e0>)
 801ccd4:	681b      	ldr	r3, [r3, #0]
 801ccd6:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801ccd8:	4b27      	ldr	r3, [pc, #156]	; (801cd78 <UTIL_SEQ_Run+0x1e4>)
 801ccda:	681b      	ldr	r3, [r3, #0]
 801ccdc:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801ccde:	4b27      	ldr	r3, [pc, #156]	; (801cd7c <UTIL_SEQ_Run+0x1e8>)
 801cce0:	681b      	ldr	r3, [r3, #0]
 801cce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801cce4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cce8:	401a      	ands	r2, r3
 801ccea:	4b20      	ldr	r3, [pc, #128]	; (801cd6c <UTIL_SEQ_Run+0x1d8>)
 801ccec:	681b      	ldr	r3, [r3, #0]
 801ccee:	4013      	ands	r3, r2
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	d005      	beq.n	801cd00 <UTIL_SEQ_Run+0x16c>
 801ccf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ccf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccf8:	4013      	ands	r3, r2
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	f43f af64 	beq.w	801cbc8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801cd00:	4b20      	ldr	r3, [pc, #128]	; (801cd84 <UTIL_SEQ_Run+0x1f0>)
 801cd02:	f04f 32ff 	mov.w	r2, #4294967295
 801cd06:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801cd08:	f000 f88e 	bl	801ce28 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd0c:	f3ef 8310 	mrs	r3, PRIMASK
 801cd10:	613b      	str	r3, [r7, #16]
  return(result);
 801cd12:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801cd14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd16:	b672      	cpsid	i
}
 801cd18:	bf00      	nop
  local_taskset = TaskSet;
 801cd1a:	4b15      	ldr	r3, [pc, #84]	; (801cd70 <UTIL_SEQ_Run+0x1dc>)
 801cd1c:	681b      	ldr	r3, [r3, #0]
 801cd1e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801cd20:	4b14      	ldr	r3, [pc, #80]	; (801cd74 <UTIL_SEQ_Run+0x1e0>)
 801cd22:	681b      	ldr	r3, [r3, #0]
 801cd24:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801cd26:	4b14      	ldr	r3, [pc, #80]	; (801cd78 <UTIL_SEQ_Run+0x1e4>)
 801cd28:	681b      	ldr	r3, [r3, #0]
 801cd2a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801cd2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd30:	401a      	ands	r2, r3
 801cd32:	4b0e      	ldr	r3, [pc, #56]	; (801cd6c <UTIL_SEQ_Run+0x1d8>)
 801cd34:	681b      	ldr	r3, [r3, #0]
 801cd36:	4013      	ands	r3, r2
 801cd38:	2b00      	cmp	r3, #0
 801cd3a:	d107      	bne.n	801cd4c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801cd3c:	4b0f      	ldr	r3, [pc, #60]	; (801cd7c <UTIL_SEQ_Run+0x1e8>)
 801cd3e:	681a      	ldr	r2, [r3, #0]
 801cd40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd42:	4013      	ands	r3, r2
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	d101      	bne.n	801cd4c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801cd48:	f7e5 fc1e 	bl	8002588 <UTIL_SEQ_Idle>
 801cd4c:	69fb      	ldr	r3, [r7, #28]
 801cd4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd50:	68fb      	ldr	r3, [r7, #12]
 801cd52:	f383 8810 	msr	PRIMASK, r3
}
 801cd56:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801cd58:	f000 f86c 	bl	801ce34 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801cd5c:	4a03      	ldr	r2, [pc, #12]	; (801cd6c <UTIL_SEQ_Run+0x1d8>)
 801cd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd60:	6013      	str	r3, [r2, #0]

  return;
 801cd62:	bf00      	nop
}
 801cd64:	3740      	adds	r7, #64	; 0x40
 801cd66:	46bd      	mov	sp, r7
 801cd68:	bd80      	pop	{r7, pc}
 801cd6a:	bf00      	nop
 801cd6c:	2000015c 	.word	0x2000015c
 801cd70:	200018b0 	.word	0x200018b0
 801cd74:	200018b4 	.word	0x200018b4
 801cd78:	20000158 	.word	0x20000158
 801cd7c:	200018b8 	.word	0x200018b8
 801cd80:	200018d0 	.word	0x200018d0
 801cd84:	200018bc 	.word	0x200018bc
 801cd88:	200018c0 	.word	0x200018c0

0801cd8c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801cd8c:	b580      	push	{r7, lr}
 801cd8e:	b088      	sub	sp, #32
 801cd90:	af00      	add	r7, sp, #0
 801cd92:	60f8      	str	r0, [r7, #12]
 801cd94:	60b9      	str	r1, [r7, #8]
 801cd96:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd98:	f3ef 8310 	mrs	r3, PRIMASK
 801cd9c:	617b      	str	r3, [r7, #20]
  return(result);
 801cd9e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801cda0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cda2:	b672      	cpsid	i
}
 801cda4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801cda6:	68f8      	ldr	r0, [r7, #12]
 801cda8:	f000 f84a 	bl	801ce40 <SEQ_BitPosition>
 801cdac:	4603      	mov	r3, r0
 801cdae:	4619      	mov	r1, r3
 801cdb0:	4a06      	ldr	r2, [pc, #24]	; (801cdcc <UTIL_SEQ_RegTask+0x40>)
 801cdb2:	687b      	ldr	r3, [r7, #4]
 801cdb4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801cdb8:	69fb      	ldr	r3, [r7, #28]
 801cdba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdbc:	69bb      	ldr	r3, [r7, #24]
 801cdbe:	f383 8810 	msr	PRIMASK, r3
}
 801cdc2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801cdc4:	bf00      	nop
}
 801cdc6:	3720      	adds	r7, #32
 801cdc8:	46bd      	mov	sp, r7
 801cdca:	bd80      	pop	{r7, pc}
 801cdcc:	200018c0 	.word	0x200018c0

0801cdd0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801cdd0:	b480      	push	{r7}
 801cdd2:	b087      	sub	sp, #28
 801cdd4:	af00      	add	r7, sp, #0
 801cdd6:	6078      	str	r0, [r7, #4]
 801cdd8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdda:	f3ef 8310 	mrs	r3, PRIMASK
 801cdde:	60fb      	str	r3, [r7, #12]
  return(result);
 801cde0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801cde2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cde4:	b672      	cpsid	i
}
 801cde6:	bf00      	nop

  TaskSet |= TaskId_bm;
 801cde8:	4b0d      	ldr	r3, [pc, #52]	; (801ce20 <UTIL_SEQ_SetTask+0x50>)
 801cdea:	681a      	ldr	r2, [r3, #0]
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	4313      	orrs	r3, r2
 801cdf0:	4a0b      	ldr	r2, [pc, #44]	; (801ce20 <UTIL_SEQ_SetTask+0x50>)
 801cdf2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801cdf4:	4a0b      	ldr	r2, [pc, #44]	; (801ce24 <UTIL_SEQ_SetTask+0x54>)
 801cdf6:	683b      	ldr	r3, [r7, #0]
 801cdf8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	431a      	orrs	r2, r3
 801ce00:	4908      	ldr	r1, [pc, #32]	; (801ce24 <UTIL_SEQ_SetTask+0x54>)
 801ce02:	683b      	ldr	r3, [r7, #0]
 801ce04:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801ce08:	697b      	ldr	r3, [r7, #20]
 801ce0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce0c:	693b      	ldr	r3, [r7, #16]
 801ce0e:	f383 8810 	msr	PRIMASK, r3
}
 801ce12:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801ce14:	bf00      	nop
}
 801ce16:	371c      	adds	r7, #28
 801ce18:	46bd      	mov	sp, r7
 801ce1a:	bc80      	pop	{r7}
 801ce1c:	4770      	bx	lr
 801ce1e:	bf00      	nop
 801ce20:	200018b0 	.word	0x200018b0
 801ce24:	200018d0 	.word	0x200018d0

0801ce28 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801ce28:	b480      	push	{r7}
 801ce2a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ce2c:	bf00      	nop
}
 801ce2e:	46bd      	mov	sp, r7
 801ce30:	bc80      	pop	{r7}
 801ce32:	4770      	bx	lr

0801ce34 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801ce34:	b480      	push	{r7}
 801ce36:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ce38:	bf00      	nop
}
 801ce3a:	46bd      	mov	sp, r7
 801ce3c:	bc80      	pop	{r7}
 801ce3e:	4770      	bx	lr

0801ce40 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801ce40:	b480      	push	{r7}
 801ce42:	b085      	sub	sp, #20
 801ce44:	af00      	add	r7, sp, #0
 801ce46:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801ce48:	2300      	movs	r3, #0
 801ce4a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801ce50:	68bb      	ldr	r3, [r7, #8]
 801ce52:	0c1b      	lsrs	r3, r3, #16
 801ce54:	041b      	lsls	r3, r3, #16
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d104      	bne.n	801ce64 <SEQ_BitPosition+0x24>
 801ce5a:	2310      	movs	r3, #16
 801ce5c:	73fb      	strb	r3, [r7, #15]
 801ce5e:	68bb      	ldr	r3, [r7, #8]
 801ce60:	041b      	lsls	r3, r3, #16
 801ce62:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801ce64:	68bb      	ldr	r3, [r7, #8]
 801ce66:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	d105      	bne.n	801ce7a <SEQ_BitPosition+0x3a>
 801ce6e:	7bfb      	ldrb	r3, [r7, #15]
 801ce70:	3308      	adds	r3, #8
 801ce72:	73fb      	strb	r3, [r7, #15]
 801ce74:	68bb      	ldr	r3, [r7, #8]
 801ce76:	021b      	lsls	r3, r3, #8
 801ce78:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801ce7a:	68bb      	ldr	r3, [r7, #8]
 801ce7c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801ce80:	2b00      	cmp	r3, #0
 801ce82:	d105      	bne.n	801ce90 <SEQ_BitPosition+0x50>
 801ce84:	7bfb      	ldrb	r3, [r7, #15]
 801ce86:	3304      	adds	r3, #4
 801ce88:	73fb      	strb	r3, [r7, #15]
 801ce8a:	68bb      	ldr	r3, [r7, #8]
 801ce8c:	011b      	lsls	r3, r3, #4
 801ce8e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801ce90:	68bb      	ldr	r3, [r7, #8]
 801ce92:	0f1b      	lsrs	r3, r3, #28
 801ce94:	4a06      	ldr	r2, [pc, #24]	; (801ceb0 <SEQ_BitPosition+0x70>)
 801ce96:	5cd2      	ldrb	r2, [r2, r3]
 801ce98:	7bfb      	ldrb	r3, [r7, #15]
 801ce9a:	4413      	add	r3, r2
 801ce9c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801ce9e:	7bfb      	ldrb	r3, [r7, #15]
 801cea0:	f1c3 031f 	rsb	r3, r3, #31
 801cea4:	b2db      	uxtb	r3, r3
}
 801cea6:	4618      	mov	r0, r3
 801cea8:	3714      	adds	r7, #20
 801ceaa:	46bd      	mov	sp, r7
 801ceac:	bc80      	pop	{r7}
 801ceae:	4770      	bx	lr
 801ceb0:	0801ea00 	.word	0x0801ea00

0801ceb4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801ceb4:	b580      	push	{r7, lr}
 801ceb6:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801ceb8:	4b04      	ldr	r3, [pc, #16]	; (801cecc <UTIL_TIMER_Init+0x18>)
 801ceba:	2200      	movs	r2, #0
 801cebc:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801cebe:	4b04      	ldr	r3, [pc, #16]	; (801ced0 <UTIL_TIMER_Init+0x1c>)
 801cec0:	681b      	ldr	r3, [r3, #0]
 801cec2:	4798      	blx	r3
 801cec4:	4603      	mov	r3, r0
}
 801cec6:	4618      	mov	r0, r3
 801cec8:	bd80      	pop	{r7, pc}
 801ceca:	bf00      	nop
 801cecc:	200018d8 	.word	0x200018d8
 801ced0:	0801e47c 	.word	0x0801e47c

0801ced4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801ced4:	b580      	push	{r7, lr}
 801ced6:	b084      	sub	sp, #16
 801ced8:	af00      	add	r7, sp, #0
 801ceda:	60f8      	str	r0, [r7, #12]
 801cedc:	60b9      	str	r1, [r7, #8]
 801cede:	603b      	str	r3, [r7, #0]
 801cee0:	4613      	mov	r3, r2
 801cee2:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801cee4:	68fb      	ldr	r3, [r7, #12]
 801cee6:	2b00      	cmp	r3, #0
 801cee8:	d023      	beq.n	801cf32 <UTIL_TIMER_Create+0x5e>
 801ceea:	683b      	ldr	r3, [r7, #0]
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d020      	beq.n	801cf32 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801cef0:	68fb      	ldr	r3, [r7, #12]
 801cef2:	2200      	movs	r2, #0
 801cef4:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801cef6:	4b11      	ldr	r3, [pc, #68]	; (801cf3c <UTIL_TIMER_Create+0x68>)
 801cef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cefa:	68b8      	ldr	r0, [r7, #8]
 801cefc:	4798      	blx	r3
 801cefe:	4602      	mov	r2, r0
 801cf00:	68fb      	ldr	r3, [r7, #12]
 801cf02:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801cf04:	68fb      	ldr	r3, [r7, #12]
 801cf06:	2200      	movs	r2, #0
 801cf08:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801cf0a:	68fb      	ldr	r3, [r7, #12]
 801cf0c:	2200      	movs	r2, #0
 801cf0e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cf10:	68fb      	ldr	r3, [r7, #12]
 801cf12:	2200      	movs	r2, #0
 801cf14:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801cf16:	68fb      	ldr	r3, [r7, #12]
 801cf18:	683a      	ldr	r2, [r7, #0]
 801cf1a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801cf1c:	68fb      	ldr	r3, [r7, #12]
 801cf1e:	69ba      	ldr	r2, [r7, #24]
 801cf20:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801cf22:	68fb      	ldr	r3, [r7, #12]
 801cf24:	79fa      	ldrb	r2, [r7, #7]
 801cf26:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801cf28:	68fb      	ldr	r3, [r7, #12]
 801cf2a:	2200      	movs	r2, #0
 801cf2c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801cf2e:	2300      	movs	r3, #0
 801cf30:	e000      	b.n	801cf34 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801cf32:	2301      	movs	r3, #1
  }
}
 801cf34:	4618      	mov	r0, r3
 801cf36:	3710      	adds	r7, #16
 801cf38:	46bd      	mov	sp, r7
 801cf3a:	bd80      	pop	{r7, pc}
 801cf3c:	0801e47c 	.word	0x0801e47c

0801cf40 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801cf40:	b580      	push	{r7, lr}
 801cf42:	b08a      	sub	sp, #40	; 0x28
 801cf44:	af00      	add	r7, sp, #0
 801cf46:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cf48:	2300      	movs	r3, #0
 801cf4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d056      	beq.n	801d002 <UTIL_TIMER_Start+0xc2>
 801cf54:	6878      	ldr	r0, [r7, #4]
 801cf56:	f000 f9a9 	bl	801d2ac <TimerExists>
 801cf5a:	4603      	mov	r3, r0
 801cf5c:	f083 0301 	eor.w	r3, r3, #1
 801cf60:	b2db      	uxtb	r3, r3
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	d04d      	beq.n	801d002 <UTIL_TIMER_Start+0xc2>
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	7a5b      	ldrb	r3, [r3, #9]
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	d149      	bne.n	801d002 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf6e:	f3ef 8310 	mrs	r3, PRIMASK
 801cf72:	613b      	str	r3, [r7, #16]
  return(result);
 801cf74:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cf76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cf78:	b672      	cpsid	i
}
 801cf7a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801cf7c:	687b      	ldr	r3, [r7, #4]
 801cf7e:	685b      	ldr	r3, [r3, #4]
 801cf80:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801cf82:	4b24      	ldr	r3, [pc, #144]	; (801d014 <UTIL_TIMER_Start+0xd4>)
 801cf84:	6a1b      	ldr	r3, [r3, #32]
 801cf86:	4798      	blx	r3
 801cf88:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801cf8a:	6a3a      	ldr	r2, [r7, #32]
 801cf8c:	69bb      	ldr	r3, [r7, #24]
 801cf8e:	429a      	cmp	r2, r3
 801cf90:	d201      	bcs.n	801cf96 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801cf92:	69bb      	ldr	r3, [r7, #24]
 801cf94:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	6a3a      	ldr	r2, [r7, #32]
 801cf9a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801cf9c:	687b      	ldr	r3, [r7, #4]
 801cf9e:	2200      	movs	r2, #0
 801cfa0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801cfa2:	687b      	ldr	r3, [r7, #4]
 801cfa4:	2201      	movs	r2, #1
 801cfa6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cfa8:	687b      	ldr	r3, [r7, #4]
 801cfaa:	2200      	movs	r2, #0
 801cfac:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801cfae:	4b1a      	ldr	r3, [pc, #104]	; (801d018 <UTIL_TIMER_Start+0xd8>)
 801cfb0:	681b      	ldr	r3, [r3, #0]
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	d106      	bne.n	801cfc4 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801cfb6:	4b17      	ldr	r3, [pc, #92]	; (801d014 <UTIL_TIMER_Start+0xd4>)
 801cfb8:	691b      	ldr	r3, [r3, #16]
 801cfba:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801cfbc:	6878      	ldr	r0, [r7, #4]
 801cfbe:	f000 f9eb 	bl	801d398 <TimerInsertNewHeadTimer>
 801cfc2:	e017      	b.n	801cff4 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801cfc4:	4b13      	ldr	r3, [pc, #76]	; (801d014 <UTIL_TIMER_Start+0xd4>)
 801cfc6:	699b      	ldr	r3, [r3, #24]
 801cfc8:	4798      	blx	r3
 801cfca:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	681a      	ldr	r2, [r3, #0]
 801cfd0:	697b      	ldr	r3, [r7, #20]
 801cfd2:	441a      	add	r2, r3
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	681a      	ldr	r2, [r3, #0]
 801cfdc:	4b0e      	ldr	r3, [pc, #56]	; (801d018 <UTIL_TIMER_Start+0xd8>)
 801cfde:	681b      	ldr	r3, [r3, #0]
 801cfe0:	681b      	ldr	r3, [r3, #0]
 801cfe2:	429a      	cmp	r2, r3
 801cfe4:	d203      	bcs.n	801cfee <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801cfe6:	6878      	ldr	r0, [r7, #4]
 801cfe8:	f000 f9d6 	bl	801d398 <TimerInsertNewHeadTimer>
 801cfec:	e002      	b.n	801cff4 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801cfee:	6878      	ldr	r0, [r7, #4]
 801cff0:	f000 f9a2 	bl	801d338 <TimerInsertTimer>
 801cff4:	69fb      	ldr	r3, [r7, #28]
 801cff6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	f383 8810 	msr	PRIMASK, r3
}
 801cffe:	bf00      	nop
  {
 801d000:	e002      	b.n	801d008 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801d002:	2301      	movs	r3, #1
 801d004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801d008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801d00c:	4618      	mov	r0, r3
 801d00e:	3728      	adds	r7, #40	; 0x28
 801d010:	46bd      	mov	sp, r7
 801d012:	bd80      	pop	{r7, pc}
 801d014:	0801e47c 	.word	0x0801e47c
 801d018:	200018d8 	.word	0x200018d8

0801d01c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801d01c:	b580      	push	{r7, lr}
 801d01e:	b088      	sub	sp, #32
 801d020:	af00      	add	r7, sp, #0
 801d022:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d024:	2300      	movs	r3, #0
 801d026:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	2b00      	cmp	r3, #0
 801d02c:	d05b      	beq.n	801d0e6 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d02e:	f3ef 8310 	mrs	r3, PRIMASK
 801d032:	60fb      	str	r3, [r7, #12]
  return(result);
 801d034:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d036:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801d038:	b672      	cpsid	i
}
 801d03a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801d03c:	4b2d      	ldr	r3, [pc, #180]	; (801d0f4 <UTIL_TIMER_Stop+0xd8>)
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801d042:	4b2c      	ldr	r3, [pc, #176]	; (801d0f4 <UTIL_TIMER_Stop+0xd8>)
 801d044:	681b      	ldr	r3, [r3, #0]
 801d046:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	2201      	movs	r2, #1
 801d04c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801d04e:	4b29      	ldr	r3, [pc, #164]	; (801d0f4 <UTIL_TIMER_Stop+0xd8>)
 801d050:	681b      	ldr	r3, [r3, #0]
 801d052:	2b00      	cmp	r3, #0
 801d054:	d041      	beq.n	801d0da <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801d056:	687b      	ldr	r3, [r7, #4]
 801d058:	2200      	movs	r2, #0
 801d05a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801d05c:	4b25      	ldr	r3, [pc, #148]	; (801d0f4 <UTIL_TIMER_Stop+0xd8>)
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	687a      	ldr	r2, [r7, #4]
 801d062:	429a      	cmp	r2, r3
 801d064:	d134      	bne.n	801d0d0 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801d066:	4b23      	ldr	r3, [pc, #140]	; (801d0f4 <UTIL_TIMER_Stop+0xd8>)
 801d068:	681b      	ldr	r3, [r3, #0]
 801d06a:	2200      	movs	r2, #0
 801d06c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801d06e:	4b21      	ldr	r3, [pc, #132]	; (801d0f4 <UTIL_TIMER_Stop+0xd8>)
 801d070:	681b      	ldr	r3, [r3, #0]
 801d072:	695b      	ldr	r3, [r3, #20]
 801d074:	2b00      	cmp	r3, #0
 801d076:	d00a      	beq.n	801d08e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801d078:	4b1e      	ldr	r3, [pc, #120]	; (801d0f4 <UTIL_TIMER_Stop+0xd8>)
 801d07a:	681b      	ldr	r3, [r3, #0]
 801d07c:	695b      	ldr	r3, [r3, #20]
 801d07e:	4a1d      	ldr	r2, [pc, #116]	; (801d0f4 <UTIL_TIMER_Stop+0xd8>)
 801d080:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801d082:	4b1c      	ldr	r3, [pc, #112]	; (801d0f4 <UTIL_TIMER_Stop+0xd8>)
 801d084:	681b      	ldr	r3, [r3, #0]
 801d086:	4618      	mov	r0, r3
 801d088:	f000 f92c 	bl	801d2e4 <TimerSetTimeout>
 801d08c:	e023      	b.n	801d0d6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801d08e:	4b1a      	ldr	r3, [pc, #104]	; (801d0f8 <UTIL_TIMER_Stop+0xdc>)
 801d090:	68db      	ldr	r3, [r3, #12]
 801d092:	4798      	blx	r3
            TimerListHead = NULL;
 801d094:	4b17      	ldr	r3, [pc, #92]	; (801d0f4 <UTIL_TIMER_Stop+0xd8>)
 801d096:	2200      	movs	r2, #0
 801d098:	601a      	str	r2, [r3, #0]
 801d09a:	e01c      	b.n	801d0d6 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801d09c:	697a      	ldr	r2, [r7, #20]
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	429a      	cmp	r2, r3
 801d0a2:	d110      	bne.n	801d0c6 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801d0a4:	697b      	ldr	r3, [r7, #20]
 801d0a6:	695b      	ldr	r3, [r3, #20]
 801d0a8:	2b00      	cmp	r3, #0
 801d0aa:	d006      	beq.n	801d0ba <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801d0ac:	697b      	ldr	r3, [r7, #20]
 801d0ae:	695b      	ldr	r3, [r3, #20]
 801d0b0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801d0b2:	69bb      	ldr	r3, [r7, #24]
 801d0b4:	697a      	ldr	r2, [r7, #20]
 801d0b6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801d0b8:	e00d      	b.n	801d0d6 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801d0ba:	2300      	movs	r3, #0
 801d0bc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801d0be:	69bb      	ldr	r3, [r7, #24]
 801d0c0:	697a      	ldr	r2, [r7, #20]
 801d0c2:	615a      	str	r2, [r3, #20]
            break;
 801d0c4:	e007      	b.n	801d0d6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801d0c6:	697b      	ldr	r3, [r7, #20]
 801d0c8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801d0ca:	697b      	ldr	r3, [r7, #20]
 801d0cc:	695b      	ldr	r3, [r3, #20]
 801d0ce:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801d0d0:	697b      	ldr	r3, [r7, #20]
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	d1e2      	bne.n	801d09c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801d0d6:	2300      	movs	r3, #0
 801d0d8:	77fb      	strb	r3, [r7, #31]
 801d0da:	693b      	ldr	r3, [r7, #16]
 801d0dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0de:	68bb      	ldr	r3, [r7, #8]
 801d0e0:	f383 8810 	msr	PRIMASK, r3
}
 801d0e4:	e001      	b.n	801d0ea <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801d0e6:	2301      	movs	r3, #1
 801d0e8:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801d0ea:	7ffb      	ldrb	r3, [r7, #31]
}
 801d0ec:	4618      	mov	r0, r3
 801d0ee:	3720      	adds	r7, #32
 801d0f0:	46bd      	mov	sp, r7
 801d0f2:	bd80      	pop	{r7, pc}
 801d0f4:	200018d8 	.word	0x200018d8
 801d0f8:	0801e47c 	.word	0x0801e47c

0801d0fc <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801d0fc:	b580      	push	{r7, lr}
 801d0fe:	b084      	sub	sp, #16
 801d100:	af00      	add	r7, sp, #0
 801d102:	6078      	str	r0, [r7, #4]
 801d104:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d106:	2300      	movs	r3, #0
 801d108:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801d10a:	687b      	ldr	r3, [r7, #4]
 801d10c:	2b00      	cmp	r3, #0
 801d10e:	d102      	bne.n	801d116 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801d110:	2301      	movs	r3, #1
 801d112:	73fb      	strb	r3, [r7, #15]
 801d114:	e014      	b.n	801d140 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801d116:	4b0d      	ldr	r3, [pc, #52]	; (801d14c <UTIL_TIMER_SetPeriod+0x50>)
 801d118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d11a:	6838      	ldr	r0, [r7, #0]
 801d11c:	4798      	blx	r3
 801d11e:	4602      	mov	r2, r0
 801d120:	687b      	ldr	r3, [r7, #4]
 801d122:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801d124:	6878      	ldr	r0, [r7, #4]
 801d126:	f000 f8c1 	bl	801d2ac <TimerExists>
 801d12a:	4603      	mov	r3, r0
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	d007      	beq.n	801d140 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801d130:	6878      	ldr	r0, [r7, #4]
 801d132:	f7ff ff73 	bl	801d01c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801d136:	6878      	ldr	r0, [r7, #4]
 801d138:	f7ff ff02 	bl	801cf40 <UTIL_TIMER_Start>
 801d13c:	4603      	mov	r3, r0
 801d13e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801d140:	7bfb      	ldrb	r3, [r7, #15]
}
 801d142:	4618      	mov	r0, r3
 801d144:	3710      	adds	r7, #16
 801d146:	46bd      	mov	sp, r7
 801d148:	bd80      	pop	{r7, pc}
 801d14a:	bf00      	nop
 801d14c:	0801e47c 	.word	0x0801e47c

0801d150 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801d150:	b590      	push	{r4, r7, lr}
 801d152:	b089      	sub	sp, #36	; 0x24
 801d154:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d156:	f3ef 8310 	mrs	r3, PRIMASK
 801d15a:	60bb      	str	r3, [r7, #8]
  return(result);
 801d15c:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d15e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d160:	b672      	cpsid	i
}
 801d162:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801d164:	4b38      	ldr	r3, [pc, #224]	; (801d248 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d166:	695b      	ldr	r3, [r3, #20]
 801d168:	4798      	blx	r3
 801d16a:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801d16c:	4b36      	ldr	r3, [pc, #216]	; (801d248 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d16e:	691b      	ldr	r3, [r3, #16]
 801d170:	4798      	blx	r3
 801d172:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801d174:	693a      	ldr	r2, [r7, #16]
 801d176:	697b      	ldr	r3, [r7, #20]
 801d178:	1ad3      	subs	r3, r2, r3
 801d17a:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801d17c:	4b33      	ldr	r3, [pc, #204]	; (801d24c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d17e:	681b      	ldr	r3, [r3, #0]
 801d180:	2b00      	cmp	r3, #0
 801d182:	d037      	beq.n	801d1f4 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801d184:	4b31      	ldr	r3, [pc, #196]	; (801d24c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d186:	681b      	ldr	r3, [r3, #0]
 801d188:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801d18a:	69fb      	ldr	r3, [r7, #28]
 801d18c:	681b      	ldr	r3, [r3, #0]
 801d18e:	68fa      	ldr	r2, [r7, #12]
 801d190:	429a      	cmp	r2, r3
 801d192:	d206      	bcs.n	801d1a2 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801d194:	69fb      	ldr	r3, [r7, #28]
 801d196:	681a      	ldr	r2, [r3, #0]
 801d198:	68fb      	ldr	r3, [r7, #12]
 801d19a:	1ad2      	subs	r2, r2, r3
 801d19c:	69fb      	ldr	r3, [r7, #28]
 801d19e:	601a      	str	r2, [r3, #0]
 801d1a0:	e002      	b.n	801d1a8 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801d1a2:	69fb      	ldr	r3, [r7, #28]
 801d1a4:	2200      	movs	r2, #0
 801d1a6:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801d1a8:	69fb      	ldr	r3, [r7, #28]
 801d1aa:	695b      	ldr	r3, [r3, #20]
 801d1ac:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801d1ae:	69fb      	ldr	r3, [r7, #28]
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	d1ea      	bne.n	801d18a <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d1b4:	e01e      	b.n	801d1f4 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801d1b6:	4b25      	ldr	r3, [pc, #148]	; (801d24c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d1b8:	681b      	ldr	r3, [r3, #0]
 801d1ba:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801d1bc:	4b23      	ldr	r3, [pc, #140]	; (801d24c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d1be:	681b      	ldr	r3, [r3, #0]
 801d1c0:	695b      	ldr	r3, [r3, #20]
 801d1c2:	4a22      	ldr	r2, [pc, #136]	; (801d24c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d1c4:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801d1c6:	69fb      	ldr	r3, [r7, #28]
 801d1c8:	2200      	movs	r2, #0
 801d1ca:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801d1cc:	69fb      	ldr	r3, [r7, #28]
 801d1ce:	2200      	movs	r2, #0
 801d1d0:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801d1d2:	69fb      	ldr	r3, [r7, #28]
 801d1d4:	68db      	ldr	r3, [r3, #12]
 801d1d6:	69fa      	ldr	r2, [r7, #28]
 801d1d8:	6912      	ldr	r2, [r2, #16]
 801d1da:	4610      	mov	r0, r2
 801d1dc:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801d1de:	69fb      	ldr	r3, [r7, #28]
 801d1e0:	7adb      	ldrb	r3, [r3, #11]
 801d1e2:	2b01      	cmp	r3, #1
 801d1e4:	d106      	bne.n	801d1f4 <UTIL_TIMER_IRQ_Handler+0xa4>
 801d1e6:	69fb      	ldr	r3, [r7, #28]
 801d1e8:	7a9b      	ldrb	r3, [r3, #10]
 801d1ea:	2b00      	cmp	r3, #0
 801d1ec:	d102      	bne.n	801d1f4 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801d1ee:	69f8      	ldr	r0, [r7, #28]
 801d1f0:	f7ff fea6 	bl	801cf40 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d1f4:	4b15      	ldr	r3, [pc, #84]	; (801d24c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	d00d      	beq.n	801d218 <UTIL_TIMER_IRQ_Handler+0xc8>
 801d1fc:	4b13      	ldr	r3, [pc, #76]	; (801d24c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d1fe:	681b      	ldr	r3, [r3, #0]
 801d200:	681b      	ldr	r3, [r3, #0]
 801d202:	2b00      	cmp	r3, #0
 801d204:	d0d7      	beq.n	801d1b6 <UTIL_TIMER_IRQ_Handler+0x66>
 801d206:	4b11      	ldr	r3, [pc, #68]	; (801d24c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d208:	681b      	ldr	r3, [r3, #0]
 801d20a:	681c      	ldr	r4, [r3, #0]
 801d20c:	4b0e      	ldr	r3, [pc, #56]	; (801d248 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d20e:	699b      	ldr	r3, [r3, #24]
 801d210:	4798      	blx	r3
 801d212:	4603      	mov	r3, r0
 801d214:	429c      	cmp	r4, r3
 801d216:	d3ce      	bcc.n	801d1b6 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801d218:	4b0c      	ldr	r3, [pc, #48]	; (801d24c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	2b00      	cmp	r3, #0
 801d21e:	d009      	beq.n	801d234 <UTIL_TIMER_IRQ_Handler+0xe4>
 801d220:	4b0a      	ldr	r3, [pc, #40]	; (801d24c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d222:	681b      	ldr	r3, [r3, #0]
 801d224:	7a1b      	ldrb	r3, [r3, #8]
 801d226:	2b00      	cmp	r3, #0
 801d228:	d104      	bne.n	801d234 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801d22a:	4b08      	ldr	r3, [pc, #32]	; (801d24c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d22c:	681b      	ldr	r3, [r3, #0]
 801d22e:	4618      	mov	r0, r3
 801d230:	f000 f858 	bl	801d2e4 <TimerSetTimeout>
 801d234:	69bb      	ldr	r3, [r7, #24]
 801d236:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	f383 8810 	msr	PRIMASK, r3
}
 801d23e:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801d240:	bf00      	nop
 801d242:	3724      	adds	r7, #36	; 0x24
 801d244:	46bd      	mov	sp, r7
 801d246:	bd90      	pop	{r4, r7, pc}
 801d248:	0801e47c 	.word	0x0801e47c
 801d24c:	200018d8 	.word	0x200018d8

0801d250 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801d250:	b580      	push	{r7, lr}
 801d252:	b082      	sub	sp, #8
 801d254:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801d256:	4b06      	ldr	r3, [pc, #24]	; (801d270 <UTIL_TIMER_GetCurrentTime+0x20>)
 801d258:	69db      	ldr	r3, [r3, #28]
 801d25a:	4798      	blx	r3
 801d25c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801d25e:	4b04      	ldr	r3, [pc, #16]	; (801d270 <UTIL_TIMER_GetCurrentTime+0x20>)
 801d260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d262:	6878      	ldr	r0, [r7, #4]
 801d264:	4798      	blx	r3
 801d266:	4603      	mov	r3, r0
}
 801d268:	4618      	mov	r0, r3
 801d26a:	3708      	adds	r7, #8
 801d26c:	46bd      	mov	sp, r7
 801d26e:	bd80      	pop	{r7, pc}
 801d270:	0801e47c 	.word	0x0801e47c

0801d274 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801d274:	b580      	push	{r7, lr}
 801d276:	b084      	sub	sp, #16
 801d278:	af00      	add	r7, sp, #0
 801d27a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801d27c:	4b0a      	ldr	r3, [pc, #40]	; (801d2a8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d27e:	69db      	ldr	r3, [r3, #28]
 801d280:	4798      	blx	r3
 801d282:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801d284:	4b08      	ldr	r3, [pc, #32]	; (801d2a8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d288:	6878      	ldr	r0, [r7, #4]
 801d28a:	4798      	blx	r3
 801d28c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801d28e:	4b06      	ldr	r3, [pc, #24]	; (801d2a8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d292:	68f9      	ldr	r1, [r7, #12]
 801d294:	68ba      	ldr	r2, [r7, #8]
 801d296:	1a8a      	subs	r2, r1, r2
 801d298:	4610      	mov	r0, r2
 801d29a:	4798      	blx	r3
 801d29c:	4603      	mov	r3, r0
}
 801d29e:	4618      	mov	r0, r3
 801d2a0:	3710      	adds	r7, #16
 801d2a2:	46bd      	mov	sp, r7
 801d2a4:	bd80      	pop	{r7, pc}
 801d2a6:	bf00      	nop
 801d2a8:	0801e47c 	.word	0x0801e47c

0801d2ac <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801d2ac:	b480      	push	{r7}
 801d2ae:	b085      	sub	sp, #20
 801d2b0:	af00      	add	r7, sp, #0
 801d2b2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d2b4:	4b0a      	ldr	r3, [pc, #40]	; (801d2e0 <TimerExists+0x34>)
 801d2b6:	681b      	ldr	r3, [r3, #0]
 801d2b8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801d2ba:	e008      	b.n	801d2ce <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801d2bc:	68fa      	ldr	r2, [r7, #12]
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	429a      	cmp	r2, r3
 801d2c2:	d101      	bne.n	801d2c8 <TimerExists+0x1c>
    {
      return true;
 801d2c4:	2301      	movs	r3, #1
 801d2c6:	e006      	b.n	801d2d6 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801d2c8:	68fb      	ldr	r3, [r7, #12]
 801d2ca:	695b      	ldr	r3, [r3, #20]
 801d2cc:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801d2ce:	68fb      	ldr	r3, [r7, #12]
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	d1f3      	bne.n	801d2bc <TimerExists+0x10>
  }
  return false;
 801d2d4:	2300      	movs	r3, #0
}
 801d2d6:	4618      	mov	r0, r3
 801d2d8:	3714      	adds	r7, #20
 801d2da:	46bd      	mov	sp, r7
 801d2dc:	bc80      	pop	{r7}
 801d2de:	4770      	bx	lr
 801d2e0:	200018d8 	.word	0x200018d8

0801d2e4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801d2e4:	b590      	push	{r4, r7, lr}
 801d2e6:	b085      	sub	sp, #20
 801d2e8:	af00      	add	r7, sp, #0
 801d2ea:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801d2ec:	4b11      	ldr	r3, [pc, #68]	; (801d334 <TimerSetTimeout+0x50>)
 801d2ee:	6a1b      	ldr	r3, [r3, #32]
 801d2f0:	4798      	blx	r3
 801d2f2:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	2201      	movs	r2, #1
 801d2f8:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801d2fa:	687b      	ldr	r3, [r7, #4]
 801d2fc:	681c      	ldr	r4, [r3, #0]
 801d2fe:	4b0d      	ldr	r3, [pc, #52]	; (801d334 <TimerSetTimeout+0x50>)
 801d300:	699b      	ldr	r3, [r3, #24]
 801d302:	4798      	blx	r3
 801d304:	4602      	mov	r2, r0
 801d306:	68fb      	ldr	r3, [r7, #12]
 801d308:	4413      	add	r3, r2
 801d30a:	429c      	cmp	r4, r3
 801d30c:	d207      	bcs.n	801d31e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801d30e:	4b09      	ldr	r3, [pc, #36]	; (801d334 <TimerSetTimeout+0x50>)
 801d310:	699b      	ldr	r3, [r3, #24]
 801d312:	4798      	blx	r3
 801d314:	4602      	mov	r2, r0
 801d316:	68fb      	ldr	r3, [r7, #12]
 801d318:	441a      	add	r2, r3
 801d31a:	687b      	ldr	r3, [r7, #4]
 801d31c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801d31e:	4b05      	ldr	r3, [pc, #20]	; (801d334 <TimerSetTimeout+0x50>)
 801d320:	689b      	ldr	r3, [r3, #8]
 801d322:	687a      	ldr	r2, [r7, #4]
 801d324:	6812      	ldr	r2, [r2, #0]
 801d326:	4610      	mov	r0, r2
 801d328:	4798      	blx	r3
}
 801d32a:	bf00      	nop
 801d32c:	3714      	adds	r7, #20
 801d32e:	46bd      	mov	sp, r7
 801d330:	bd90      	pop	{r4, r7, pc}
 801d332:	bf00      	nop
 801d334:	0801e47c 	.word	0x0801e47c

0801d338 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801d338:	b480      	push	{r7}
 801d33a:	b085      	sub	sp, #20
 801d33c:	af00      	add	r7, sp, #0
 801d33e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d340:	4b14      	ldr	r3, [pc, #80]	; (801d394 <TimerInsertTimer+0x5c>)
 801d342:	681b      	ldr	r3, [r3, #0]
 801d344:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801d346:	4b13      	ldr	r3, [pc, #76]	; (801d394 <TimerInsertTimer+0x5c>)
 801d348:	681b      	ldr	r3, [r3, #0]
 801d34a:	695b      	ldr	r3, [r3, #20]
 801d34c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801d34e:	e012      	b.n	801d376 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801d350:	687b      	ldr	r3, [r7, #4]
 801d352:	681a      	ldr	r2, [r3, #0]
 801d354:	68bb      	ldr	r3, [r7, #8]
 801d356:	681b      	ldr	r3, [r3, #0]
 801d358:	429a      	cmp	r2, r3
 801d35a:	d905      	bls.n	801d368 <TimerInsertTimer+0x30>
    {
        cur = next;
 801d35c:	68bb      	ldr	r3, [r7, #8]
 801d35e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801d360:	68bb      	ldr	r3, [r7, #8]
 801d362:	695b      	ldr	r3, [r3, #20]
 801d364:	60bb      	str	r3, [r7, #8]
 801d366:	e006      	b.n	801d376 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801d368:	68fb      	ldr	r3, [r7, #12]
 801d36a:	687a      	ldr	r2, [r7, #4]
 801d36c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	68ba      	ldr	r2, [r7, #8]
 801d372:	615a      	str	r2, [r3, #20]
        return;
 801d374:	e009      	b.n	801d38a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801d376:	68fb      	ldr	r3, [r7, #12]
 801d378:	695b      	ldr	r3, [r3, #20]
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d1e8      	bne.n	801d350 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801d37e:	68fb      	ldr	r3, [r7, #12]
 801d380:	687a      	ldr	r2, [r7, #4]
 801d382:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	2200      	movs	r2, #0
 801d388:	615a      	str	r2, [r3, #20]
}
 801d38a:	3714      	adds	r7, #20
 801d38c:	46bd      	mov	sp, r7
 801d38e:	bc80      	pop	{r7}
 801d390:	4770      	bx	lr
 801d392:	bf00      	nop
 801d394:	200018d8 	.word	0x200018d8

0801d398 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801d398:	b580      	push	{r7, lr}
 801d39a:	b084      	sub	sp, #16
 801d39c:	af00      	add	r7, sp, #0
 801d39e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d3a0:	4b0b      	ldr	r3, [pc, #44]	; (801d3d0 <TimerInsertNewHeadTimer+0x38>)
 801d3a2:	681b      	ldr	r3, [r3, #0]
 801d3a4:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801d3a6:	68fb      	ldr	r3, [r7, #12]
 801d3a8:	2b00      	cmp	r3, #0
 801d3aa:	d002      	beq.n	801d3b2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801d3ac:	68fb      	ldr	r3, [r7, #12]
 801d3ae:	2200      	movs	r2, #0
 801d3b0:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	68fa      	ldr	r2, [r7, #12]
 801d3b6:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801d3b8:	4a05      	ldr	r2, [pc, #20]	; (801d3d0 <TimerInsertNewHeadTimer+0x38>)
 801d3ba:	687b      	ldr	r3, [r7, #4]
 801d3bc:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801d3be:	4b04      	ldr	r3, [pc, #16]	; (801d3d0 <TimerInsertNewHeadTimer+0x38>)
 801d3c0:	681b      	ldr	r3, [r3, #0]
 801d3c2:	4618      	mov	r0, r3
 801d3c4:	f7ff ff8e 	bl	801d2e4 <TimerSetTimeout>
}
 801d3c8:	bf00      	nop
 801d3ca:	3710      	adds	r7, #16
 801d3cc:	46bd      	mov	sp, r7
 801d3ce:	bd80      	pop	{r7, pc}
 801d3d0:	200018d8 	.word	0x200018d8

0801d3d4 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801d3d4:	b580      	push	{r7, lr}
 801d3d6:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801d3d8:	2218      	movs	r2, #24
 801d3da:	2100      	movs	r1, #0
 801d3dc:	4807      	ldr	r0, [pc, #28]	; (801d3fc <UTIL_ADV_TRACE_Init+0x28>)
 801d3de:	f7fe fffa 	bl	801c3d6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801d3e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d3e6:	2100      	movs	r1, #0
 801d3e8:	4805      	ldr	r0, [pc, #20]	; (801d400 <UTIL_ADV_TRACE_Init+0x2c>)
 801d3ea:	f7fe fff4 	bl	801c3d6 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801d3ee:	4b05      	ldr	r3, [pc, #20]	; (801d404 <UTIL_ADV_TRACE_Init+0x30>)
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	4805      	ldr	r0, [pc, #20]	; (801d408 <UTIL_ADV_TRACE_Init+0x34>)
 801d3f4:	4798      	blx	r3
 801d3f6:	4603      	mov	r3, r0
}
 801d3f8:	4618      	mov	r0, r3
 801d3fa:	bd80      	pop	{r7, pc}
 801d3fc:	200018dc 	.word	0x200018dc
 801d400:	200018f4 	.word	0x200018f4
 801d404:	0801e4bc 	.word	0x0801e4bc
 801d408:	0801d675 	.word	0x0801d675

0801d40c <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801d40c:	b480      	push	{r7}
 801d40e:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d410:	4b06      	ldr	r3, [pc, #24]	; (801d42c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d412:	8a5a      	ldrh	r2, [r3, #18]
 801d414:	4b05      	ldr	r3, [pc, #20]	; (801d42c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d416:	8a1b      	ldrh	r3, [r3, #16]
 801d418:	429a      	cmp	r2, r3
 801d41a:	d101      	bne.n	801d420 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801d41c:	2301      	movs	r3, #1
 801d41e:	e000      	b.n	801d422 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801d420:	2300      	movs	r3, #0
}
 801d422:	4618      	mov	r0, r3
 801d424:	46bd      	mov	sp, r7
 801d426:	bc80      	pop	{r7}
 801d428:	4770      	bx	lr
 801d42a:	bf00      	nop
 801d42c:	200018dc 	.word	0x200018dc

0801d430 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801d430:	b408      	push	{r3}
 801d432:	b580      	push	{r7, lr}
 801d434:	b08d      	sub	sp, #52	; 0x34
 801d436:	af00      	add	r7, sp, #0
 801d438:	60f8      	str	r0, [r7, #12]
 801d43a:	60b9      	str	r1, [r7, #8]
 801d43c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801d43e:	2300      	movs	r3, #0
 801d440:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801d442:	2300      	movs	r3, #0
 801d444:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801d446:	4b37      	ldr	r3, [pc, #220]	; (801d524 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d448:	7a1b      	ldrb	r3, [r3, #8]
 801d44a:	461a      	mov	r2, r3
 801d44c:	68fb      	ldr	r3, [r7, #12]
 801d44e:	4293      	cmp	r3, r2
 801d450:	d902      	bls.n	801d458 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801d452:	f06f 0304 	mvn.w	r3, #4
 801d456:	e05e      	b.n	801d516 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801d458:	4b32      	ldr	r3, [pc, #200]	; (801d524 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d45a:	68da      	ldr	r2, [r3, #12]
 801d45c:	68bb      	ldr	r3, [r7, #8]
 801d45e:	4013      	ands	r3, r2
 801d460:	68ba      	ldr	r2, [r7, #8]
 801d462:	429a      	cmp	r2, r3
 801d464:	d002      	beq.n	801d46c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801d466:	f06f 0305 	mvn.w	r3, #5
 801d46a:	e054      	b.n	801d516 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801d46c:	4b2d      	ldr	r3, [pc, #180]	; (801d524 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d46e:	685b      	ldr	r3, [r3, #4]
 801d470:	2b00      	cmp	r3, #0
 801d472:	d00a      	beq.n	801d48a <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	2b00      	cmp	r3, #0
 801d478:	d007      	beq.n	801d48a <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801d47a:	4b2a      	ldr	r3, [pc, #168]	; (801d524 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d47c:	685b      	ldr	r3, [r3, #4]
 801d47e:	f107 0116 	add.w	r1, r7, #22
 801d482:	f107 0218 	add.w	r2, r7, #24
 801d486:	4610      	mov	r0, r2
 801d488:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801d48a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d48e:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d492:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d494:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d498:	4823      	ldr	r0, [pc, #140]	; (801d528 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801d49a:	f7ff fa29 	bl	801c8f0 <tiny_vsnprintf_like>
 801d49e:	4603      	mov	r3, r0
 801d4a0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801d4a2:	f000 f9f1 	bl	801d888 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801d4a6:	8afa      	ldrh	r2, [r7, #22]
 801d4a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801d4aa:	4413      	add	r3, r2
 801d4ac:	b29b      	uxth	r3, r3
 801d4ae:	f107 0214 	add.w	r2, r7, #20
 801d4b2:	4611      	mov	r1, r2
 801d4b4:	4618      	mov	r0, r3
 801d4b6:	f000 f969 	bl	801d78c <TRACE_AllocateBufer>
 801d4ba:	4603      	mov	r3, r0
 801d4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d4c0:	d025      	beq.n	801d50e <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801d4c2:	2300      	movs	r3, #0
 801d4c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801d4c6:	e00e      	b.n	801d4e6 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801d4c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d4ca:	8aba      	ldrh	r2, [r7, #20]
 801d4cc:	3330      	adds	r3, #48	; 0x30
 801d4ce:	443b      	add	r3, r7
 801d4d0:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801d4d4:	4b15      	ldr	r3, [pc, #84]	; (801d52c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d4d6:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801d4d8:	8abb      	ldrh	r3, [r7, #20]
 801d4da:	3301      	adds	r3, #1
 801d4dc:	b29b      	uxth	r3, r3
 801d4de:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801d4e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d4e2:	3301      	adds	r3, #1
 801d4e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801d4e6:	8afb      	ldrh	r3, [r7, #22]
 801d4e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801d4ea:	429a      	cmp	r2, r3
 801d4ec:	d3ec      	bcc.n	801d4c8 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d4ee:	8abb      	ldrh	r3, [r7, #20]
 801d4f0:	461a      	mov	r2, r3
 801d4f2:	4b0e      	ldr	r3, [pc, #56]	; (801d52c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d4f4:	18d0      	adds	r0, r2, r3
 801d4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d4fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d4fe:	f7ff f9f7 	bl	801c8f0 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801d502:	f000 f9df 	bl	801d8c4 <TRACE_UnLock>

    return TRACE_Send();
 801d506:	f000 f831 	bl	801d56c <TRACE_Send>
 801d50a:	4603      	mov	r3, r0
 801d50c:	e003      	b.n	801d516 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801d50e:	f000 f9d9 	bl	801d8c4 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801d512:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801d516:	4618      	mov	r0, r3
 801d518:	3734      	adds	r7, #52	; 0x34
 801d51a:	46bd      	mov	sp, r7
 801d51c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d520:	b001      	add	sp, #4
 801d522:	4770      	bx	lr
 801d524:	200018dc 	.word	0x200018dc
 801d528:	20001cf4 	.word	0x20001cf4
 801d52c:	200018f4 	.word	0x200018f4

0801d530 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801d530:	b480      	push	{r7}
 801d532:	b083      	sub	sp, #12
 801d534:	af00      	add	r7, sp, #0
 801d536:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801d538:	4a03      	ldr	r2, [pc, #12]	; (801d548 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	6053      	str	r3, [r2, #4]
}
 801d53e:	bf00      	nop
 801d540:	370c      	adds	r7, #12
 801d542:	46bd      	mov	sp, r7
 801d544:	bc80      	pop	{r7}
 801d546:	4770      	bx	lr
 801d548:	200018dc 	.word	0x200018dc

0801d54c <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801d54c:	b480      	push	{r7}
 801d54e:	b083      	sub	sp, #12
 801d550:	af00      	add	r7, sp, #0
 801d552:	4603      	mov	r3, r0
 801d554:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801d556:	4a04      	ldr	r2, [pc, #16]	; (801d568 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801d558:	79fb      	ldrb	r3, [r7, #7]
 801d55a:	7213      	strb	r3, [r2, #8]
}
 801d55c:	bf00      	nop
 801d55e:	370c      	adds	r7, #12
 801d560:	46bd      	mov	sp, r7
 801d562:	bc80      	pop	{r7}
 801d564:	4770      	bx	lr
 801d566:	bf00      	nop
 801d568:	200018dc 	.word	0x200018dc

0801d56c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801d56c:	b580      	push	{r7, lr}
 801d56e:	b088      	sub	sp, #32
 801d570:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801d572:	2300      	movs	r3, #0
 801d574:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801d576:	2300      	movs	r3, #0
 801d578:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d57a:	f3ef 8310 	mrs	r3, PRIMASK
 801d57e:	613b      	str	r3, [r7, #16]
  return(result);
 801d580:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d582:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d584:	b672      	cpsid	i
}
 801d586:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801d588:	f000 f9ba 	bl	801d900 <TRACE_IsLocked>
 801d58c:	4603      	mov	r3, r0
 801d58e:	2b00      	cmp	r3, #0
 801d590:	d15d      	bne.n	801d64e <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801d592:	f000 f979 	bl	801d888 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801d596:	4b34      	ldr	r3, [pc, #208]	; (801d668 <TRACE_Send+0xfc>)
 801d598:	8a1a      	ldrh	r2, [r3, #16]
 801d59a:	4b33      	ldr	r3, [pc, #204]	; (801d668 <TRACE_Send+0xfc>)
 801d59c:	8a5b      	ldrh	r3, [r3, #18]
 801d59e:	429a      	cmp	r2, r3
 801d5a0:	d04d      	beq.n	801d63e <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d5a2:	4b31      	ldr	r3, [pc, #196]	; (801d668 <TRACE_Send+0xfc>)
 801d5a4:	789b      	ldrb	r3, [r3, #2]
 801d5a6:	2b01      	cmp	r3, #1
 801d5a8:	d117      	bne.n	801d5da <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801d5aa:	4b2f      	ldr	r3, [pc, #188]	; (801d668 <TRACE_Send+0xfc>)
 801d5ac:	881a      	ldrh	r2, [r3, #0]
 801d5ae:	4b2e      	ldr	r3, [pc, #184]	; (801d668 <TRACE_Send+0xfc>)
 801d5b0:	8a1b      	ldrh	r3, [r3, #16]
 801d5b2:	1ad3      	subs	r3, r2, r3
 801d5b4:	b29a      	uxth	r2, r3
 801d5b6:	4b2c      	ldr	r3, [pc, #176]	; (801d668 <TRACE_Send+0xfc>)
 801d5b8:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d5ba:	4b2b      	ldr	r3, [pc, #172]	; (801d668 <TRACE_Send+0xfc>)
 801d5bc:	2202      	movs	r2, #2
 801d5be:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d5c0:	4b29      	ldr	r3, [pc, #164]	; (801d668 <TRACE_Send+0xfc>)
 801d5c2:	2200      	movs	r2, #0
 801d5c4:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d5c6:	4b28      	ldr	r3, [pc, #160]	; (801d668 <TRACE_Send+0xfc>)
 801d5c8:	8a9b      	ldrh	r3, [r3, #20]
 801d5ca:	2b00      	cmp	r3, #0
 801d5cc:	d105      	bne.n	801d5da <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d5ce:	4b26      	ldr	r3, [pc, #152]	; (801d668 <TRACE_Send+0xfc>)
 801d5d0:	2200      	movs	r2, #0
 801d5d2:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d5d4:	4b24      	ldr	r3, [pc, #144]	; (801d668 <TRACE_Send+0xfc>)
 801d5d6:	2200      	movs	r2, #0
 801d5d8:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d5da:	4b23      	ldr	r3, [pc, #140]	; (801d668 <TRACE_Send+0xfc>)
 801d5dc:	789b      	ldrb	r3, [r3, #2]
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	d115      	bne.n	801d60e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d5e2:	4b21      	ldr	r3, [pc, #132]	; (801d668 <TRACE_Send+0xfc>)
 801d5e4:	8a5a      	ldrh	r2, [r3, #18]
 801d5e6:	4b20      	ldr	r3, [pc, #128]	; (801d668 <TRACE_Send+0xfc>)
 801d5e8:	8a1b      	ldrh	r3, [r3, #16]
 801d5ea:	429a      	cmp	r2, r3
 801d5ec:	d908      	bls.n	801d600 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801d5ee:	4b1e      	ldr	r3, [pc, #120]	; (801d668 <TRACE_Send+0xfc>)
 801d5f0:	8a5a      	ldrh	r2, [r3, #18]
 801d5f2:	4b1d      	ldr	r3, [pc, #116]	; (801d668 <TRACE_Send+0xfc>)
 801d5f4:	8a1b      	ldrh	r3, [r3, #16]
 801d5f6:	1ad3      	subs	r3, r2, r3
 801d5f8:	b29a      	uxth	r2, r3
 801d5fa:	4b1b      	ldr	r3, [pc, #108]	; (801d668 <TRACE_Send+0xfc>)
 801d5fc:	829a      	strh	r2, [r3, #20]
 801d5fe:	e006      	b.n	801d60e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801d600:	4b19      	ldr	r3, [pc, #100]	; (801d668 <TRACE_Send+0xfc>)
 801d602:	8a1b      	ldrh	r3, [r3, #16]
 801d604:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d608:	b29a      	uxth	r2, r3
 801d60a:	4b17      	ldr	r3, [pc, #92]	; (801d668 <TRACE_Send+0xfc>)
 801d60c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801d60e:	4b16      	ldr	r3, [pc, #88]	; (801d668 <TRACE_Send+0xfc>)
 801d610:	8a1b      	ldrh	r3, [r3, #16]
 801d612:	461a      	mov	r2, r3
 801d614:	4b15      	ldr	r3, [pc, #84]	; (801d66c <TRACE_Send+0x100>)
 801d616:	4413      	add	r3, r2
 801d618:	61bb      	str	r3, [r7, #24]
 801d61a:	697b      	ldr	r3, [r7, #20]
 801d61c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d61e:	68fb      	ldr	r3, [r7, #12]
 801d620:	f383 8810 	msr	PRIMASK, r3
}
 801d624:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801d626:	f7e5 f8b5 	bl	8002794 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d62a:	4b11      	ldr	r3, [pc, #68]	; (801d670 <TRACE_Send+0x104>)
 801d62c:	68db      	ldr	r3, [r3, #12]
 801d62e:	4a0e      	ldr	r2, [pc, #56]	; (801d668 <TRACE_Send+0xfc>)
 801d630:	8a92      	ldrh	r2, [r2, #20]
 801d632:	4611      	mov	r1, r2
 801d634:	69b8      	ldr	r0, [r7, #24]
 801d636:	4798      	blx	r3
 801d638:	4603      	mov	r3, r0
 801d63a:	77fb      	strb	r3, [r7, #31]
 801d63c:	e00d      	b.n	801d65a <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801d63e:	f000 f941 	bl	801d8c4 <TRACE_UnLock>
 801d642:	697b      	ldr	r3, [r7, #20]
 801d644:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d646:	68bb      	ldr	r3, [r7, #8]
 801d648:	f383 8810 	msr	PRIMASK, r3
}
 801d64c:	e005      	b.n	801d65a <TRACE_Send+0xee>
 801d64e:	697b      	ldr	r3, [r7, #20]
 801d650:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	f383 8810 	msr	PRIMASK, r3
}
 801d658:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801d65a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d65e:	4618      	mov	r0, r3
 801d660:	3720      	adds	r7, #32
 801d662:	46bd      	mov	sp, r7
 801d664:	bd80      	pop	{r7, pc}
 801d666:	bf00      	nop
 801d668:	200018dc 	.word	0x200018dc
 801d66c:	200018f4 	.word	0x200018f4
 801d670:	0801e4bc 	.word	0x0801e4bc

0801d674 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801d674:	b580      	push	{r7, lr}
 801d676:	b088      	sub	sp, #32
 801d678:	af00      	add	r7, sp, #0
 801d67a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801d67c:	2300      	movs	r3, #0
 801d67e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d680:	f3ef 8310 	mrs	r3, PRIMASK
 801d684:	617b      	str	r3, [r7, #20]
  return(result);
 801d686:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d688:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d68a:	b672      	cpsid	i
}
 801d68c:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801d68e:	4b3c      	ldr	r3, [pc, #240]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d690:	789b      	ldrb	r3, [r3, #2]
 801d692:	2b02      	cmp	r3, #2
 801d694:	d106      	bne.n	801d6a4 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d696:	4b3a      	ldr	r3, [pc, #232]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d698:	2200      	movs	r2, #0
 801d69a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d69c:	4b38      	ldr	r3, [pc, #224]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d69e:	2200      	movs	r2, #0
 801d6a0:	821a      	strh	r2, [r3, #16]
 801d6a2:	e00a      	b.n	801d6ba <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d6a4:	4b36      	ldr	r3, [pc, #216]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d6a6:	8a1a      	ldrh	r2, [r3, #16]
 801d6a8:	4b35      	ldr	r3, [pc, #212]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d6aa:	8a9b      	ldrh	r3, [r3, #20]
 801d6ac:	4413      	add	r3, r2
 801d6ae:	b29b      	uxth	r3, r3
 801d6b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d6b4:	b29a      	uxth	r2, r3
 801d6b6:	4b32      	ldr	r3, [pc, #200]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d6b8:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801d6ba:	4b31      	ldr	r3, [pc, #196]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d6bc:	8a1a      	ldrh	r2, [r3, #16]
 801d6be:	4b30      	ldr	r3, [pc, #192]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d6c0:	8a5b      	ldrh	r3, [r3, #18]
 801d6c2:	429a      	cmp	r2, r3
 801d6c4:	d04d      	beq.n	801d762 <TRACE_TxCpltCallback+0xee>
 801d6c6:	4b2e      	ldr	r3, [pc, #184]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d6c8:	8adb      	ldrh	r3, [r3, #22]
 801d6ca:	2b01      	cmp	r3, #1
 801d6cc:	d149      	bne.n	801d762 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d6ce:	4b2c      	ldr	r3, [pc, #176]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d6d0:	789b      	ldrb	r3, [r3, #2]
 801d6d2:	2b01      	cmp	r3, #1
 801d6d4:	d117      	bne.n	801d706 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801d6d6:	4b2a      	ldr	r3, [pc, #168]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d6d8:	881a      	ldrh	r2, [r3, #0]
 801d6da:	4b29      	ldr	r3, [pc, #164]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d6dc:	8a1b      	ldrh	r3, [r3, #16]
 801d6de:	1ad3      	subs	r3, r2, r3
 801d6e0:	b29a      	uxth	r2, r3
 801d6e2:	4b27      	ldr	r3, [pc, #156]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d6e4:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d6e6:	4b26      	ldr	r3, [pc, #152]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d6e8:	2202      	movs	r2, #2
 801d6ea:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d6ec:	4b24      	ldr	r3, [pc, #144]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d6ee:	2200      	movs	r2, #0
 801d6f0:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d6f2:	4b23      	ldr	r3, [pc, #140]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d6f4:	8a9b      	ldrh	r3, [r3, #20]
 801d6f6:	2b00      	cmp	r3, #0
 801d6f8:	d105      	bne.n	801d706 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d6fa:	4b21      	ldr	r3, [pc, #132]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d6fc:	2200      	movs	r2, #0
 801d6fe:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d700:	4b1f      	ldr	r3, [pc, #124]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d702:	2200      	movs	r2, #0
 801d704:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d706:	4b1e      	ldr	r3, [pc, #120]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d708:	789b      	ldrb	r3, [r3, #2]
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	d115      	bne.n	801d73a <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d70e:	4b1c      	ldr	r3, [pc, #112]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d710:	8a5a      	ldrh	r2, [r3, #18]
 801d712:	4b1b      	ldr	r3, [pc, #108]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d714:	8a1b      	ldrh	r3, [r3, #16]
 801d716:	429a      	cmp	r2, r3
 801d718:	d908      	bls.n	801d72c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801d71a:	4b19      	ldr	r3, [pc, #100]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d71c:	8a5a      	ldrh	r2, [r3, #18]
 801d71e:	4b18      	ldr	r3, [pc, #96]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d720:	8a1b      	ldrh	r3, [r3, #16]
 801d722:	1ad3      	subs	r3, r2, r3
 801d724:	b29a      	uxth	r2, r3
 801d726:	4b16      	ldr	r3, [pc, #88]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d728:	829a      	strh	r2, [r3, #20]
 801d72a:	e006      	b.n	801d73a <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801d72c:	4b14      	ldr	r3, [pc, #80]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d72e:	8a1b      	ldrh	r3, [r3, #16]
 801d730:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d734:	b29a      	uxth	r2, r3
 801d736:	4b12      	ldr	r3, [pc, #72]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d738:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801d73a:	4b11      	ldr	r3, [pc, #68]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d73c:	8a1b      	ldrh	r3, [r3, #16]
 801d73e:	461a      	mov	r2, r3
 801d740:	4b10      	ldr	r3, [pc, #64]	; (801d784 <TRACE_TxCpltCallback+0x110>)
 801d742:	4413      	add	r3, r2
 801d744:	61fb      	str	r3, [r7, #28]
 801d746:	69bb      	ldr	r3, [r7, #24]
 801d748:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d74a:	693b      	ldr	r3, [r7, #16]
 801d74c:	f383 8810 	msr	PRIMASK, r3
}
 801d750:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d752:	4b0d      	ldr	r3, [pc, #52]	; (801d788 <TRACE_TxCpltCallback+0x114>)
 801d754:	68db      	ldr	r3, [r3, #12]
 801d756:	4a0a      	ldr	r2, [pc, #40]	; (801d780 <TRACE_TxCpltCallback+0x10c>)
 801d758:	8a92      	ldrh	r2, [r2, #20]
 801d75a:	4611      	mov	r1, r2
 801d75c:	69f8      	ldr	r0, [r7, #28]
 801d75e:	4798      	blx	r3
 801d760:	e00a      	b.n	801d778 <TRACE_TxCpltCallback+0x104>
 801d762:	69bb      	ldr	r3, [r7, #24]
 801d764:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d766:	68fb      	ldr	r3, [r7, #12]
 801d768:	f383 8810 	msr	PRIMASK, r3
}
 801d76c:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801d76e:	f7e5 f819 	bl	80027a4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801d772:	f000 f8a7 	bl	801d8c4 <TRACE_UnLock>
  }
}
 801d776:	bf00      	nop
 801d778:	bf00      	nop
 801d77a:	3720      	adds	r7, #32
 801d77c:	46bd      	mov	sp, r7
 801d77e:	bd80      	pop	{r7, pc}
 801d780:	200018dc 	.word	0x200018dc
 801d784:	200018f4 	.word	0x200018f4
 801d788:	0801e4bc 	.word	0x0801e4bc

0801d78c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801d78c:	b480      	push	{r7}
 801d78e:	b087      	sub	sp, #28
 801d790:	af00      	add	r7, sp, #0
 801d792:	4603      	mov	r3, r0
 801d794:	6039      	str	r1, [r7, #0]
 801d796:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801d798:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d79c:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d79e:	f3ef 8310 	mrs	r3, PRIMASK
 801d7a2:	60fb      	str	r3, [r7, #12]
  return(result);
 801d7a4:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d7a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801d7a8:	b672      	cpsid	i
}
 801d7aa:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d7ac:	4b35      	ldr	r3, [pc, #212]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d7ae:	8a5a      	ldrh	r2, [r3, #18]
 801d7b0:	4b34      	ldr	r3, [pc, #208]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d7b2:	8a1b      	ldrh	r3, [r3, #16]
 801d7b4:	429a      	cmp	r2, r3
 801d7b6:	d11b      	bne.n	801d7f0 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d7b8:	4b32      	ldr	r3, [pc, #200]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d7ba:	8a5b      	ldrh	r3, [r3, #18]
 801d7bc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d7c0:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801d7c2:	88fa      	ldrh	r2, [r7, #6]
 801d7c4:	8afb      	ldrh	r3, [r7, #22]
 801d7c6:	429a      	cmp	r2, r3
 801d7c8:	d33a      	bcc.n	801d840 <TRACE_AllocateBufer+0xb4>
 801d7ca:	4b2e      	ldr	r3, [pc, #184]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d7cc:	8a1b      	ldrh	r3, [r3, #16]
 801d7ce:	88fa      	ldrh	r2, [r7, #6]
 801d7d0:	429a      	cmp	r2, r3
 801d7d2:	d235      	bcs.n	801d840 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d7d4:	4b2b      	ldr	r3, [pc, #172]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d7d6:	2201      	movs	r2, #1
 801d7d8:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d7da:	4b2a      	ldr	r3, [pc, #168]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d7dc:	8a5a      	ldrh	r2, [r3, #18]
 801d7de:	4b29      	ldr	r3, [pc, #164]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d7e0:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d7e2:	4b28      	ldr	r3, [pc, #160]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d7e4:	8a1b      	ldrh	r3, [r3, #16]
 801d7e6:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d7e8:	4b26      	ldr	r3, [pc, #152]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d7ea:	2200      	movs	r2, #0
 801d7ec:	825a      	strh	r2, [r3, #18]
 801d7ee:	e027      	b.n	801d840 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d7f0:	4b24      	ldr	r3, [pc, #144]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d7f2:	8a5a      	ldrh	r2, [r3, #18]
 801d7f4:	4b23      	ldr	r3, [pc, #140]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d7f6:	8a1b      	ldrh	r3, [r3, #16]
 801d7f8:	429a      	cmp	r2, r3
 801d7fa:	d91b      	bls.n	801d834 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d7fc:	4b21      	ldr	r3, [pc, #132]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d7fe:	8a5b      	ldrh	r3, [r3, #18]
 801d800:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d804:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801d806:	88fa      	ldrh	r2, [r7, #6]
 801d808:	8afb      	ldrh	r3, [r7, #22]
 801d80a:	429a      	cmp	r2, r3
 801d80c:	d318      	bcc.n	801d840 <TRACE_AllocateBufer+0xb4>
 801d80e:	4b1d      	ldr	r3, [pc, #116]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d810:	8a1b      	ldrh	r3, [r3, #16]
 801d812:	88fa      	ldrh	r2, [r7, #6]
 801d814:	429a      	cmp	r2, r3
 801d816:	d213      	bcs.n	801d840 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d818:	4b1a      	ldr	r3, [pc, #104]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d81a:	2201      	movs	r2, #1
 801d81c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d81e:	4b19      	ldr	r3, [pc, #100]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d820:	8a5a      	ldrh	r2, [r3, #18]
 801d822:	4b18      	ldr	r3, [pc, #96]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d824:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d826:	4b17      	ldr	r3, [pc, #92]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d828:	8a1b      	ldrh	r3, [r3, #16]
 801d82a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d82c:	4b15      	ldr	r3, [pc, #84]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d82e:	2200      	movs	r2, #0
 801d830:	825a      	strh	r2, [r3, #18]
 801d832:	e005      	b.n	801d840 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801d834:	4b13      	ldr	r3, [pc, #76]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d836:	8a1a      	ldrh	r2, [r3, #16]
 801d838:	4b12      	ldr	r3, [pc, #72]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d83a:	8a5b      	ldrh	r3, [r3, #18]
 801d83c:	1ad3      	subs	r3, r2, r3
 801d83e:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801d840:	8afa      	ldrh	r2, [r7, #22]
 801d842:	88fb      	ldrh	r3, [r7, #6]
 801d844:	429a      	cmp	r2, r3
 801d846:	d90f      	bls.n	801d868 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801d848:	4b0e      	ldr	r3, [pc, #56]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d84a:	8a5a      	ldrh	r2, [r3, #18]
 801d84c:	683b      	ldr	r3, [r7, #0]
 801d84e:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d850:	4b0c      	ldr	r3, [pc, #48]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d852:	8a5a      	ldrh	r2, [r3, #18]
 801d854:	88fb      	ldrh	r3, [r7, #6]
 801d856:	4413      	add	r3, r2
 801d858:	b29b      	uxth	r3, r3
 801d85a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d85e:	b29a      	uxth	r2, r3
 801d860:	4b08      	ldr	r3, [pc, #32]	; (801d884 <TRACE_AllocateBufer+0xf8>)
 801d862:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801d864:	2300      	movs	r3, #0
 801d866:	82bb      	strh	r3, [r7, #20]
 801d868:	693b      	ldr	r3, [r7, #16]
 801d86a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d86c:	68bb      	ldr	r3, [r7, #8]
 801d86e:	f383 8810 	msr	PRIMASK, r3
}
 801d872:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801d874:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801d878:	4618      	mov	r0, r3
 801d87a:	371c      	adds	r7, #28
 801d87c:	46bd      	mov	sp, r7
 801d87e:	bc80      	pop	{r7}
 801d880:	4770      	bx	lr
 801d882:	bf00      	nop
 801d884:	200018dc 	.word	0x200018dc

0801d888 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801d888:	b480      	push	{r7}
 801d88a:	b085      	sub	sp, #20
 801d88c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d88e:	f3ef 8310 	mrs	r3, PRIMASK
 801d892:	607b      	str	r3, [r7, #4]
  return(result);
 801d894:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d896:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d898:	b672      	cpsid	i
}
 801d89a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801d89c:	4b08      	ldr	r3, [pc, #32]	; (801d8c0 <TRACE_Lock+0x38>)
 801d89e:	8adb      	ldrh	r3, [r3, #22]
 801d8a0:	3301      	adds	r3, #1
 801d8a2:	b29a      	uxth	r2, r3
 801d8a4:	4b06      	ldr	r3, [pc, #24]	; (801d8c0 <TRACE_Lock+0x38>)
 801d8a6:	82da      	strh	r2, [r3, #22]
 801d8a8:	68fb      	ldr	r3, [r7, #12]
 801d8aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8ac:	68bb      	ldr	r3, [r7, #8]
 801d8ae:	f383 8810 	msr	PRIMASK, r3
}
 801d8b2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d8b4:	bf00      	nop
 801d8b6:	3714      	adds	r7, #20
 801d8b8:	46bd      	mov	sp, r7
 801d8ba:	bc80      	pop	{r7}
 801d8bc:	4770      	bx	lr
 801d8be:	bf00      	nop
 801d8c0:	200018dc 	.word	0x200018dc

0801d8c4 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801d8c4:	b480      	push	{r7}
 801d8c6:	b085      	sub	sp, #20
 801d8c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d8ca:	f3ef 8310 	mrs	r3, PRIMASK
 801d8ce:	607b      	str	r3, [r7, #4]
  return(result);
 801d8d0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d8d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d8d4:	b672      	cpsid	i
}
 801d8d6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801d8d8:	4b08      	ldr	r3, [pc, #32]	; (801d8fc <TRACE_UnLock+0x38>)
 801d8da:	8adb      	ldrh	r3, [r3, #22]
 801d8dc:	3b01      	subs	r3, #1
 801d8de:	b29a      	uxth	r2, r3
 801d8e0:	4b06      	ldr	r3, [pc, #24]	; (801d8fc <TRACE_UnLock+0x38>)
 801d8e2:	82da      	strh	r2, [r3, #22]
 801d8e4:	68fb      	ldr	r3, [r7, #12]
 801d8e6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8e8:	68bb      	ldr	r3, [r7, #8]
 801d8ea:	f383 8810 	msr	PRIMASK, r3
}
 801d8ee:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d8f0:	bf00      	nop
 801d8f2:	3714      	adds	r7, #20
 801d8f4:	46bd      	mov	sp, r7
 801d8f6:	bc80      	pop	{r7}
 801d8f8:	4770      	bx	lr
 801d8fa:	bf00      	nop
 801d8fc:	200018dc 	.word	0x200018dc

0801d900 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801d900:	b480      	push	{r7}
 801d902:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801d904:	4b05      	ldr	r3, [pc, #20]	; (801d91c <TRACE_IsLocked+0x1c>)
 801d906:	8adb      	ldrh	r3, [r3, #22]
 801d908:	2b00      	cmp	r3, #0
 801d90a:	bf14      	ite	ne
 801d90c:	2301      	movne	r3, #1
 801d90e:	2300      	moveq	r3, #0
 801d910:	b2db      	uxtb	r3, r3
}
 801d912:	4618      	mov	r0, r3
 801d914:	46bd      	mov	sp, r7
 801d916:	bc80      	pop	{r7}
 801d918:	4770      	bx	lr
 801d91a:	bf00      	nop
 801d91c:	200018dc 	.word	0x200018dc

0801d920 <memset>:
 801d920:	4402      	add	r2, r0
 801d922:	4603      	mov	r3, r0
 801d924:	4293      	cmp	r3, r2
 801d926:	d100      	bne.n	801d92a <memset+0xa>
 801d928:	4770      	bx	lr
 801d92a:	f803 1b01 	strb.w	r1, [r3], #1
 801d92e:	e7f9      	b.n	801d924 <memset+0x4>

0801d930 <__libc_init_array>:
 801d930:	b570      	push	{r4, r5, r6, lr}
 801d932:	4d0d      	ldr	r5, [pc, #52]	; (801d968 <__libc_init_array+0x38>)
 801d934:	4c0d      	ldr	r4, [pc, #52]	; (801d96c <__libc_init_array+0x3c>)
 801d936:	1b64      	subs	r4, r4, r5
 801d938:	10a4      	asrs	r4, r4, #2
 801d93a:	2600      	movs	r6, #0
 801d93c:	42a6      	cmp	r6, r4
 801d93e:	d109      	bne.n	801d954 <__libc_init_array+0x24>
 801d940:	4d0b      	ldr	r5, [pc, #44]	; (801d970 <__libc_init_array+0x40>)
 801d942:	4c0c      	ldr	r4, [pc, #48]	; (801d974 <__libc_init_array+0x44>)
 801d944:	f000 f900 	bl	801db48 <_init>
 801d948:	1b64      	subs	r4, r4, r5
 801d94a:	10a4      	asrs	r4, r4, #2
 801d94c:	2600      	movs	r6, #0
 801d94e:	42a6      	cmp	r6, r4
 801d950:	d105      	bne.n	801d95e <__libc_init_array+0x2e>
 801d952:	bd70      	pop	{r4, r5, r6, pc}
 801d954:	f855 3b04 	ldr.w	r3, [r5], #4
 801d958:	4798      	blx	r3
 801d95a:	3601      	adds	r6, #1
 801d95c:	e7ee      	b.n	801d93c <__libc_init_array+0xc>
 801d95e:	f855 3b04 	ldr.w	r3, [r5], #4
 801d962:	4798      	blx	r3
 801d964:	3601      	adds	r6, #1
 801d966:	e7f2      	b.n	801d94e <__libc_init_array+0x1e>
 801d968:	0801eaf0 	.word	0x0801eaf0
 801d96c:	0801eaf0 	.word	0x0801eaf0
 801d970:	0801eaf0 	.word	0x0801eaf0
 801d974:	0801eaf8 	.word	0x0801eaf8

0801d978 <__retarget_lock_acquire_recursive>:
 801d978:	4770      	bx	lr

0801d97a <__retarget_lock_release_recursive>:
 801d97a:	4770      	bx	lr

0801d97c <register_fini>:
 801d97c:	4b02      	ldr	r3, [pc, #8]	; (801d988 <register_fini+0xc>)
 801d97e:	b113      	cbz	r3, 801d986 <register_fini+0xa>
 801d980:	4802      	ldr	r0, [pc, #8]	; (801d98c <register_fini+0x10>)
 801d982:	f000 b805 	b.w	801d990 <atexit>
 801d986:	4770      	bx	lr
 801d988:	00000000 	.word	0x00000000
 801d98c:	0801d99d 	.word	0x0801d99d

0801d990 <atexit>:
 801d990:	2300      	movs	r3, #0
 801d992:	4601      	mov	r1, r0
 801d994:	461a      	mov	r2, r3
 801d996:	4618      	mov	r0, r3
 801d998:	f000 b814 	b.w	801d9c4 <__register_exitproc>

0801d99c <__libc_fini_array>:
 801d99c:	b538      	push	{r3, r4, r5, lr}
 801d99e:	4d07      	ldr	r5, [pc, #28]	; (801d9bc <__libc_fini_array+0x20>)
 801d9a0:	4c07      	ldr	r4, [pc, #28]	; (801d9c0 <__libc_fini_array+0x24>)
 801d9a2:	1b64      	subs	r4, r4, r5
 801d9a4:	10a4      	asrs	r4, r4, #2
 801d9a6:	b91c      	cbnz	r4, 801d9b0 <__libc_fini_array+0x14>
 801d9a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d9ac:	f000 b8d2 	b.w	801db54 <_fini>
 801d9b0:	3c01      	subs	r4, #1
 801d9b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801d9b6:	4798      	blx	r3
 801d9b8:	e7f5      	b.n	801d9a6 <__libc_fini_array+0xa>
 801d9ba:	bf00      	nop
 801d9bc:	0801eaf8 	.word	0x0801eaf8
 801d9c0:	0801eafc 	.word	0x0801eafc

0801d9c4 <__register_exitproc>:
 801d9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d9c8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801da38 <__register_exitproc+0x74>
 801d9cc:	4606      	mov	r6, r0
 801d9ce:	f8da 0000 	ldr.w	r0, [sl]
 801d9d2:	4698      	mov	r8, r3
 801d9d4:	460f      	mov	r7, r1
 801d9d6:	4691      	mov	r9, r2
 801d9d8:	f7ff ffce 	bl	801d978 <__retarget_lock_acquire_recursive>
 801d9dc:	4b17      	ldr	r3, [pc, #92]	; (801da3c <__register_exitproc+0x78>)
 801d9de:	681c      	ldr	r4, [r3, #0]
 801d9e0:	b90c      	cbnz	r4, 801d9e6 <__register_exitproc+0x22>
 801d9e2:	4c17      	ldr	r4, [pc, #92]	; (801da40 <__register_exitproc+0x7c>)
 801d9e4:	601c      	str	r4, [r3, #0]
 801d9e6:	6865      	ldr	r5, [r4, #4]
 801d9e8:	f8da 0000 	ldr.w	r0, [sl]
 801d9ec:	2d1f      	cmp	r5, #31
 801d9ee:	dd05      	ble.n	801d9fc <__register_exitproc+0x38>
 801d9f0:	f7ff ffc3 	bl	801d97a <__retarget_lock_release_recursive>
 801d9f4:	f04f 30ff 	mov.w	r0, #4294967295
 801d9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d9fc:	b19e      	cbz	r6, 801da26 <__register_exitproc+0x62>
 801d9fe:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801da02:	2201      	movs	r2, #1
 801da04:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801da08:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801da0c:	40aa      	lsls	r2, r5
 801da0e:	4313      	orrs	r3, r2
 801da10:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801da14:	2e02      	cmp	r6, #2
 801da16:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801da1a:	bf02      	ittt	eq
 801da1c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801da20:	4313      	orreq	r3, r2
 801da22:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801da26:	1c6b      	adds	r3, r5, #1
 801da28:	3502      	adds	r5, #2
 801da2a:	6063      	str	r3, [r4, #4]
 801da2c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801da30:	f7ff ffa3 	bl	801d97a <__retarget_lock_release_recursive>
 801da34:	2000      	movs	r0, #0
 801da36:	e7df      	b.n	801d9f8 <__register_exitproc+0x34>
 801da38:	20000160 	.word	0x20000160
 801da3c:	20001ef8 	.word	0x20001ef8
 801da40:	20001efc 	.word	0x20001efc
 801da44:	00000000 	.word	0x00000000

0801da48 <floor>:
 801da48:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801da4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801da50:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801da54:	2e13      	cmp	r6, #19
 801da56:	460b      	mov	r3, r1
 801da58:	4607      	mov	r7, r0
 801da5a:	460c      	mov	r4, r1
 801da5c:	4605      	mov	r5, r0
 801da5e:	dc32      	bgt.n	801dac6 <floor+0x7e>
 801da60:	2e00      	cmp	r6, #0
 801da62:	da14      	bge.n	801da8e <floor+0x46>
 801da64:	a334      	add	r3, pc, #208	; (adr r3, 801db38 <floor+0xf0>)
 801da66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da6a:	f7e2 fb93 	bl	8000194 <__adddf3>
 801da6e:	2200      	movs	r2, #0
 801da70:	2300      	movs	r3, #0
 801da72:	f7e2 ffd5 	bl	8000a20 <__aeabi_dcmpgt>
 801da76:	b138      	cbz	r0, 801da88 <floor+0x40>
 801da78:	2c00      	cmp	r4, #0
 801da7a:	da56      	bge.n	801db2a <floor+0xe2>
 801da7c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801da80:	4325      	orrs	r5, r4
 801da82:	d055      	beq.n	801db30 <floor+0xe8>
 801da84:	4c2e      	ldr	r4, [pc, #184]	; (801db40 <floor+0xf8>)
 801da86:	2500      	movs	r5, #0
 801da88:	4623      	mov	r3, r4
 801da8a:	462f      	mov	r7, r5
 801da8c:	e025      	b.n	801dada <floor+0x92>
 801da8e:	4a2d      	ldr	r2, [pc, #180]	; (801db44 <floor+0xfc>)
 801da90:	fa42 f806 	asr.w	r8, r2, r6
 801da94:	ea01 0208 	and.w	r2, r1, r8
 801da98:	4302      	orrs	r2, r0
 801da9a:	d01e      	beq.n	801dada <floor+0x92>
 801da9c:	a326      	add	r3, pc, #152	; (adr r3, 801db38 <floor+0xf0>)
 801da9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801daa2:	f7e2 fb77 	bl	8000194 <__adddf3>
 801daa6:	2200      	movs	r2, #0
 801daa8:	2300      	movs	r3, #0
 801daaa:	f7e2 ffb9 	bl	8000a20 <__aeabi_dcmpgt>
 801daae:	2800      	cmp	r0, #0
 801dab0:	d0ea      	beq.n	801da88 <floor+0x40>
 801dab2:	2c00      	cmp	r4, #0
 801dab4:	bfbe      	ittt	lt
 801dab6:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801daba:	4133      	asrlt	r3, r6
 801dabc:	18e4      	addlt	r4, r4, r3
 801dabe:	ea24 0408 	bic.w	r4, r4, r8
 801dac2:	2500      	movs	r5, #0
 801dac4:	e7e0      	b.n	801da88 <floor+0x40>
 801dac6:	2e33      	cmp	r6, #51	; 0x33
 801dac8:	dd0b      	ble.n	801dae2 <floor+0x9a>
 801daca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801dace:	d104      	bne.n	801dada <floor+0x92>
 801dad0:	4602      	mov	r2, r0
 801dad2:	f7e2 fb5f 	bl	8000194 <__adddf3>
 801dad6:	4607      	mov	r7, r0
 801dad8:	460b      	mov	r3, r1
 801dada:	4638      	mov	r0, r7
 801dadc:	4619      	mov	r1, r3
 801dade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dae2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801dae6:	f04f 38ff 	mov.w	r8, #4294967295
 801daea:	fa28 f802 	lsr.w	r8, r8, r2
 801daee:	ea10 0f08 	tst.w	r0, r8
 801daf2:	d0f2      	beq.n	801dada <floor+0x92>
 801daf4:	a310      	add	r3, pc, #64	; (adr r3, 801db38 <floor+0xf0>)
 801daf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dafa:	f7e2 fb4b 	bl	8000194 <__adddf3>
 801dafe:	2200      	movs	r2, #0
 801db00:	2300      	movs	r3, #0
 801db02:	f7e2 ff8d 	bl	8000a20 <__aeabi_dcmpgt>
 801db06:	2800      	cmp	r0, #0
 801db08:	d0be      	beq.n	801da88 <floor+0x40>
 801db0a:	2c00      	cmp	r4, #0
 801db0c:	da0a      	bge.n	801db24 <floor+0xdc>
 801db0e:	2e14      	cmp	r6, #20
 801db10:	d101      	bne.n	801db16 <floor+0xce>
 801db12:	3401      	adds	r4, #1
 801db14:	e006      	b.n	801db24 <floor+0xdc>
 801db16:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801db1a:	2301      	movs	r3, #1
 801db1c:	40b3      	lsls	r3, r6
 801db1e:	441d      	add	r5, r3
 801db20:	42af      	cmp	r7, r5
 801db22:	d8f6      	bhi.n	801db12 <floor+0xca>
 801db24:	ea25 0508 	bic.w	r5, r5, r8
 801db28:	e7ae      	b.n	801da88 <floor+0x40>
 801db2a:	2500      	movs	r5, #0
 801db2c:	462c      	mov	r4, r5
 801db2e:	e7ab      	b.n	801da88 <floor+0x40>
 801db30:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801db34:	e7a8      	b.n	801da88 <floor+0x40>
 801db36:	bf00      	nop
 801db38:	8800759c 	.word	0x8800759c
 801db3c:	7e37e43c 	.word	0x7e37e43c
 801db40:	bff00000 	.word	0xbff00000
 801db44:	000fffff 	.word	0x000fffff

0801db48 <_init>:
 801db48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db4a:	bf00      	nop
 801db4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801db4e:	bc08      	pop	{r3}
 801db50:	469e      	mov	lr, r3
 801db52:	4770      	bx	lr

0801db54 <_fini>:
 801db54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db56:	bf00      	nop
 801db58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801db5a:	bc08      	pop	{r3}
 801db5c:	469e      	mov	lr, r3
 801db5e:	4770      	bx	lr
