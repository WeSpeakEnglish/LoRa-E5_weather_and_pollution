
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000144f0  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e4c  08014628  08014628  00024628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  08015474  08015474  00025474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801554c  0801554c  00030120  2**0
                  CONTENTS
  5 .ARM          00000008  0801554c  0801554c  0002554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08015554  08015554  00030120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  08015554  08015554  00025554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801555c  0801555c  0002555c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000120  20000000  08015560  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001f54  20000120  08015680  00030120  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002074  08015680  00032074  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003014a  2**0
                  CONTENTS, READONLY
 14 .debug_info   000634c9  00000000  00000000  0003018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000d995  00000000  00000000  00093656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 000217ea  00000000  00000000  000a0feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003350  00000000  00000000  000c27d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000030aa  00000000  00000000  000c5b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002bac7  00000000  00000000  000c8bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005d335  00000000  00000000  000f4699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000db097  00000000  00000000  001519ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009180  00000000  00000000  0022ca68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000053  00000000  00000000  00235be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000120 	.word	0x20000120
 8000154:	00000000 	.word	0x00000000
 8000158:	08014610 	.word	0x08014610

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000124 	.word	0x20000124
 8000174:	08014610 	.word	0x08014610

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2iz>:
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30f      	bcc.n	8000d6a <__aeabi_f2iz+0x2a>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d90d      	bls.n	8000d70 <__aeabi_f2iz+0x30>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	bf18      	it	ne
 8000d66:	4240      	negne	r0, r0
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr
 8000d70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d74:	d101      	bne.n	8000d7a <__aeabi_f2iz+0x3a>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	d105      	bne.n	8000d86 <__aeabi_f2iz+0x46>
 8000d7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	bf08      	it	eq
 8000d80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_uldivmod>:
 8000d8c:	b953      	cbnz	r3, 8000da4 <__aeabi_uldivmod+0x18>
 8000d8e:	b94a      	cbnz	r2, 8000da4 <__aeabi_uldivmod+0x18>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	bf08      	it	eq
 8000d94:	2800      	cmpeq	r0, #0
 8000d96:	bf1c      	itt	ne
 8000d98:	f04f 31ff 	movne.w	r1, #4294967295
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000da0:	f000 b970 	b.w	8001084 <__aeabi_idiv0>
 8000da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dac:	f000 f806 	bl	8000dbc <__udivmoddi4>
 8000db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <__udivmoddi4>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	9e08      	ldr	r6, [sp, #32]
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	460f      	mov	r7, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14a      	bne.n	8000e62 <__udivmoddi4+0xa6>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	4694      	mov	ip, r2
 8000dd0:	d965      	bls.n	8000e9e <__udivmoddi4+0xe2>
 8000dd2:	fab2 f382 	clz	r3, r2
 8000dd6:	b143      	cbz	r3, 8000dea <__udivmoddi4+0x2e>
 8000dd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ddc:	f1c3 0220 	rsb	r2, r3, #32
 8000de0:	409f      	lsls	r7, r3
 8000de2:	fa20 f202 	lsr.w	r2, r0, r2
 8000de6:	4317      	orrs	r7, r2
 8000de8:	409c      	lsls	r4, r3
 8000dea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dee:	fa1f f58c 	uxth.w	r5, ip
 8000df2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000df6:	0c22      	lsrs	r2, r4, #16
 8000df8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e00:	fb01 f005 	mul.w	r0, r1, r5
 8000e04:	4290      	cmp	r0, r2
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x62>
 8000e08:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e10:	f080 811b 	bcs.w	800104a <__udivmoddi4+0x28e>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f240 8118 	bls.w	800104a <__udivmoddi4+0x28e>
 8000e1a:	3902      	subs	r1, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a12      	subs	r2, r2, r0
 8000e20:	b2a4      	uxth	r4, r4
 8000e22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2e:	fb00 f505 	mul.w	r5, r0, r5
 8000e32:	42a5      	cmp	r5, r4
 8000e34:	d90a      	bls.n	8000e4c <__udivmoddi4+0x90>
 8000e36:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3e:	f080 8106 	bcs.w	800104e <__udivmoddi4+0x292>
 8000e42:	42a5      	cmp	r5, r4
 8000e44:	f240 8103 	bls.w	800104e <__udivmoddi4+0x292>
 8000e48:	4464      	add	r4, ip
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	2100      	movs	r1, #0
 8000e54:	b11e      	cbz	r6, 8000e5e <__udivmoddi4+0xa2>
 8000e56:	40dc      	lsrs	r4, r3
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0xbc>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	f000 80ec 	beq.w	8001044 <__udivmoddi4+0x288>
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000e72:	4608      	mov	r0, r1
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	fab3 f183 	clz	r1, r3
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	d149      	bne.n	8000f14 <__udivmoddi4+0x158>
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	d302      	bcc.n	8000e8a <__udivmoddi4+0xce>
 8000e84:	4282      	cmp	r2, r0
 8000e86:	f200 80f7 	bhi.w	8001078 <__udivmoddi4+0x2bc>
 8000e8a:	1a84      	subs	r4, r0, r2
 8000e8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	4617      	mov	r7, r2
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d0e2      	beq.n	8000e5e <__udivmoddi4+0xa2>
 8000e98:	e9c6 4700 	strd	r4, r7, [r6]
 8000e9c:	e7df      	b.n	8000e5e <__udivmoddi4+0xa2>
 8000e9e:	b902      	cbnz	r2, 8000ea2 <__udivmoddi4+0xe6>
 8000ea0:	deff      	udf	#255	; 0xff
 8000ea2:	fab2 f382 	clz	r3, r2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 808f 	bne.w	8000fca <__udivmoddi4+0x20e>
 8000eac:	1a8a      	subs	r2, r1, r2
 8000eae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ebc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ec0:	0c22      	lsrs	r2, r4, #16
 8000ec2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ec6:	fb0e f005 	mul.w	r0, lr, r5
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x124>
 8000ece:	eb1c 0202 	adds.w	r2, ip, r2
 8000ed2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed6:	d202      	bcs.n	8000ede <__udivmoddi4+0x122>
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	f200 80ca 	bhi.w	8001072 <__udivmoddi4+0x2b6>
 8000ede:	4645      	mov	r5, r8
 8000ee0:	1a12      	subs	r2, r2, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ee8:	fb07 2210 	mls	r2, r7, r0, r2
 8000eec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ef0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ef4:	45a6      	cmp	lr, r4
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x14e>
 8000ef8:	eb1c 0404 	adds.w	r4, ip, r4
 8000efc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f00:	d202      	bcs.n	8000f08 <__udivmoddi4+0x14c>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f200 80ba 	bhi.w	800107c <__udivmoddi4+0x2c0>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f12:	e79f      	b.n	8000e54 <__udivmoddi4+0x98>
 8000f14:	f1c1 0720 	rsb	r7, r1, #32
 8000f18:	408b      	lsls	r3, r1
 8000f1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f22:	fa05 f401 	lsl.w	r4, r5, r1
 8000f26:	fa20 f307 	lsr.w	r3, r0, r7
 8000f2a:	40fd      	lsrs	r5, r7
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	fa00 f901 	lsl.w	r9, r0, r1
 8000f32:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000f36:	fa1f fe8c 	uxth.w	lr, ip
 8000f3a:	fbb5 f8f0 	udiv	r8, r5, r0
 8000f3e:	0c1c      	lsrs	r4, r3, #16
 8000f40:	fb00 5518 	mls	r5, r0, r8, r5
 8000f44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f48:	fb08 f50e 	mul.w	r5, r8, lr
 8000f4c:	42a5      	cmp	r5, r4
 8000f4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f52:	d90b      	bls.n	8000f6c <__udivmoddi4+0x1b0>
 8000f54:	eb1c 0404 	adds.w	r4, ip, r4
 8000f58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f5c:	f080 8087 	bcs.w	800106e <__udivmoddi4+0x2b2>
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	f240 8084 	bls.w	800106e <__udivmoddi4+0x2b2>
 8000f66:	f1a8 0802 	sub.w	r8, r8, #2
 8000f6a:	4464      	add	r4, ip
 8000f6c:	1b64      	subs	r4, r4, r5
 8000f6e:	b29d      	uxth	r5, r3
 8000f70:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f74:	fb00 4413 	mls	r4, r0, r3, r4
 8000f78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f80:	45a6      	cmp	lr, r4
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x1da>
 8000f84:	eb1c 0404 	adds.w	r4, ip, r4
 8000f88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f8c:	d26b      	bcs.n	8001066 <__udivmoddi4+0x2aa>
 8000f8e:	45a6      	cmp	lr, r4
 8000f90:	d969      	bls.n	8001066 <__udivmoddi4+0x2aa>
 8000f92:	3b02      	subs	r3, #2
 8000f94:	4464      	add	r4, ip
 8000f96:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000f9a:	fba0 8302 	umull	r8, r3, r0, r2
 8000f9e:	eba4 040e 	sub.w	r4, r4, lr
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	46c6      	mov	lr, r8
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	d355      	bcc.n	8001056 <__udivmoddi4+0x29a>
 8000faa:	d052      	beq.n	8001052 <__udivmoddi4+0x296>
 8000fac:	b156      	cbz	r6, 8000fc4 <__udivmoddi4+0x208>
 8000fae:	ebb9 030e 	subs.w	r3, r9, lr
 8000fb2:	eb64 0405 	sbc.w	r4, r4, r5
 8000fb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000fba:	40cb      	lsrs	r3, r1
 8000fbc:	40cc      	lsrs	r4, r1
 8000fbe:	431f      	orrs	r7, r3
 8000fc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	f1c3 0120 	rsb	r1, r3, #32
 8000fce:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fd2:	fa20 f201 	lsr.w	r2, r0, r1
 8000fd6:	fa25 f101 	lsr.w	r1, r5, r1
 8000fda:	409d      	lsls	r5, r3
 8000fdc:	432a      	orrs	r2, r5
 8000fde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe2:	fa1f fe8c 	uxth.w	lr, ip
 8000fe6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fea:	fb07 1510 	mls	r5, r7, r0, r1
 8000fee:	0c11      	lsrs	r1, r2, #16
 8000ff0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ff4:	fb00 f50e 	mul.w	r5, r0, lr
 8000ff8:	428d      	cmp	r5, r1
 8000ffa:	fa04 f403 	lsl.w	r4, r4, r3
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x256>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f100 38ff 	add.w	r8, r0, #4294967295
 8001008:	d22f      	bcs.n	800106a <__udivmoddi4+0x2ae>
 800100a:	428d      	cmp	r5, r1
 800100c:	d92d      	bls.n	800106a <__udivmoddi4+0x2ae>
 800100e:	3802      	subs	r0, #2
 8001010:	4461      	add	r1, ip
 8001012:	1b49      	subs	r1, r1, r5
 8001014:	b292      	uxth	r2, r2
 8001016:	fbb1 f5f7 	udiv	r5, r1, r7
 800101a:	fb07 1115 	mls	r1, r7, r5, r1
 800101e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001022:	fb05 f10e 	mul.w	r1, r5, lr
 8001026:	4291      	cmp	r1, r2
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x280>
 800102a:	eb1c 0202 	adds.w	r2, ip, r2
 800102e:	f105 38ff 	add.w	r8, r5, #4294967295
 8001032:	d216      	bcs.n	8001062 <__udivmoddi4+0x2a6>
 8001034:	4291      	cmp	r1, r2
 8001036:	d914      	bls.n	8001062 <__udivmoddi4+0x2a6>
 8001038:	3d02      	subs	r5, #2
 800103a:	4462      	add	r2, ip
 800103c:	1a52      	subs	r2, r2, r1
 800103e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001042:	e739      	b.n	8000eb8 <__udivmoddi4+0xfc>
 8001044:	4631      	mov	r1, r6
 8001046:	4630      	mov	r0, r6
 8001048:	e709      	b.n	8000e5e <__udivmoddi4+0xa2>
 800104a:	4639      	mov	r1, r7
 800104c:	e6e7      	b.n	8000e1e <__udivmoddi4+0x62>
 800104e:	4610      	mov	r0, r2
 8001050:	e6fc      	b.n	8000e4c <__udivmoddi4+0x90>
 8001052:	45c1      	cmp	r9, r8
 8001054:	d2aa      	bcs.n	8000fac <__udivmoddi4+0x1f0>
 8001056:	ebb8 0e02 	subs.w	lr, r8, r2
 800105a:	eb63 050c 	sbc.w	r5, r3, ip
 800105e:	3801      	subs	r0, #1
 8001060:	e7a4      	b.n	8000fac <__udivmoddi4+0x1f0>
 8001062:	4645      	mov	r5, r8
 8001064:	e7ea      	b.n	800103c <__udivmoddi4+0x280>
 8001066:	4603      	mov	r3, r0
 8001068:	e795      	b.n	8000f96 <__udivmoddi4+0x1da>
 800106a:	4640      	mov	r0, r8
 800106c:	e7d1      	b.n	8001012 <__udivmoddi4+0x256>
 800106e:	46d0      	mov	r8, sl
 8001070:	e77c      	b.n	8000f6c <__udivmoddi4+0x1b0>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	e733      	b.n	8000ee0 <__udivmoddi4+0x124>
 8001078:	4608      	mov	r0, r1
 800107a:	e70b      	b.n	8000e94 <__udivmoddi4+0xd8>
 800107c:	4464      	add	r4, ip
 800107e:	3802      	subs	r0, #2
 8001080:	e743      	b.n	8000f0a <__udivmoddi4+0x14e>
 8001082:	bf00      	nop

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <ZE27_Checksum>:

uint8_t ZE27_Checksum(uint8_t *msg, unsigned char ln){
    uint8_t sum = 0;

  //Checksum = (NOT(Byte1+Byte2+Byte3+Byte4+Byte5+Byte6+Byte7)) +1
    for (uint8_t i = 1; i <= ln - 2; i++) {
 8001088:	3901      	subs	r1, #1
 800108a:	2901      	cmp	r1, #1
 800108c:	dd0c      	ble.n	80010a8 <ZE27_Checksum+0x20>
 800108e:	2301      	movs	r3, #1
    uint8_t sum = 0;
 8001090:	2200      	movs	r2, #0
        sum += msg[i];
 8001092:	f810 c003 	ldrb.w	ip, [r0, r3]
 8001096:	4462      	add	r2, ip
 8001098:	b2d2      	uxtb	r2, r2
    for (uint8_t i = 1; i <= ln - 2; i++) {
 800109a:	3301      	adds	r3, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	428b      	cmp	r3, r1
 80010a0:	dbf7      	blt.n	8001092 <ZE27_Checksum+0xa>
    }

    uint8_t checksum = (~sum)+1;
 80010a2:	4250      	negs	r0, r2
    return checksum;
}
 80010a4:	b2c0      	uxtb	r0, r0
 80010a6:	4770      	bx	lr
    uint8_t sum = 0;
 80010a8:	2200      	movs	r2, #0
 80010aa:	e7fa      	b.n	80010a2 <ZE27_Checksum+0x1a>

080010ac <ZE27_parsePPB>:

uint16_t ZE27_parsePPB(uint8_t *msg){
 80010ac:	b510      	push	{r4, lr}
 80010ae:	4604      	mov	r4, r0
	if(msg[ZE27_RX_BUFFER_SIZE -1] == ZE27_Checksum(msg, ZE27_RX_BUFFER_SIZE)){
 80010b0:	2109      	movs	r1, #9
 80010b2:	f7ff ffe9 	bl	8001088 <ZE27_Checksum>
 80010b6:	7a23      	ldrb	r3, [r4, #8]
 80010b8:	4283      	cmp	r3, r0
 80010ba:	d001      	beq.n	80010c0 <ZE27_parsePPB+0x14>
		return msg[4]*256 + msg[5];
	}
 return 0;
 80010bc:	2000      	movs	r0, #0
}
 80010be:	bd10      	pop	{r4, pc}
		return msg[4]*256 + msg[5];
 80010c0:	7923      	ldrb	r3, [r4, #4]
 80010c2:	7960      	ldrb	r0, [r4, #5]
 80010c4:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80010c8:	b280      	uxth	r0, r0
 80010ca:	e7f8      	b.n	80010be <ZE27_parsePPB+0x12>

080010cc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80010cc:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80010ce:	f240 103c 	movw	r0, #316	; 0x13c
 80010d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80010d6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80010da:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80010de:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80010e4:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010e6:	2300      	movs	r3, #0
 80010e8:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ea:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ec:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ee:	2204      	movs	r2, #4
 80010f0:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80010f2:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80010f4:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80010f6:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 80010f8:	2201      	movs	r2, #1
 80010fa:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80010fc:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001100:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001102:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001104:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001108:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800110c:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800110e:	2207      	movs	r2, #7
 8001110:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001112:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001114:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001118:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800111a:	f001 fe49 	bl	8002db0 <HAL_ADC_Init>
 800111e:	b900      	cbnz	r0, 8001122 <MX_ADC_Init+0x56>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001120:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001122:	f000 fd2f 	bl	8001b84 <Error_Handler>
}
 8001126:	e7fb      	b.n	8001120 <MX_ADC_Init+0x54>

08001128 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001128:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800112c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001130:	6802      	ldr	r2, [r0, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d000      	beq.n	8001138 <HAL_ADC_MspInit+0x10>
 8001136:	4770      	bx	lr
{
 8001138:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800113a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800113e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001144:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800114c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800114e:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001150:	b002      	add	sp, #8
 8001152:	4770      	bx	lr

08001154 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001154:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001158:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800115c:	6802      	ldr	r2, [r0, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d000      	beq.n	8001164 <HAL_ADC_MspDeInit+0x10>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001162:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001168:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800116a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800116e:	6613      	str	r3, [r2, #96]	; 0x60
 8001170:	e7f7      	b.n	8001162 <HAL_ADC_MspDeInit+0xe>

08001172 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001172:	b530      	push	{r4, r5, lr}
 8001174:	b085      	sub	sp, #20
 8001176:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8001178:	2300      	movs	r3, #0
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	9302      	str	r3, [sp, #8]
 800117e:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8001180:	f7ff ffa4 	bl	80010cc <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001184:	f240 103c 	movw	r0, #316	; 0x13c
 8001188:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800118c:	f002 fa83 	bl	8003696 <HAL_ADCEx_Calibration_Start>
 8001190:	bb40      	cbnz	r0, 80011e4 <ADC_ReadChannels+0x72>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001192:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001194:	2300      	movs	r3, #0
 8001196:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001198:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800119a:	a901      	add	r1, sp, #4
 800119c:	f240 103c 	movw	r0, #316	; 0x13c
 80011a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80011a4:	f001 ff81 	bl	80030aa <HAL_ADC_ConfigChannel>
 80011a8:	b9f8      	cbnz	r0, 80011ea <ADC_ReadChannels+0x78>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80011aa:	f240 103c 	movw	r0, #316	; 0x13c
 80011ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80011b2:	f002 f96d 	bl	8003490 <HAL_ADC_Start>
 80011b6:	b9d8      	cbnz	r0, 80011f0 <ADC_ReadChannels+0x7e>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80011b8:	f240 143c 	movw	r4, #316	; 0x13c
 80011bc:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	4620      	mov	r0, r4
 80011c6:	f001 ff0e 	bl	8002fe6 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80011ca:	4620      	mov	r0, r4
 80011cc:	f002 fa43 	bl	8003656 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80011d0:	4620      	mov	r0, r4
 80011d2:	f001 ff67 	bl	80030a4 <HAL_ADC_GetValue>
 80011d6:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 80011d8:	4620      	mov	r0, r4
 80011da:	f002 f9da 	bl	8003592 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80011de:	4628      	mov	r0, r5
 80011e0:	b005      	add	sp, #20
 80011e2:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80011e4:	f000 fcce 	bl	8001b84 <Error_Handler>
 80011e8:	e7d3      	b.n	8001192 <ADC_ReadChannels+0x20>
    Error_Handler();
 80011ea:	f000 fccb 	bl	8001b84 <Error_Handler>
 80011ee:	e7dc      	b.n	80011aa <ADC_ReadChannels+0x38>
    Error_Handler();
 80011f0:	f000 fcc8 	bl	8001b84 <Error_Handler>
 80011f4:	e7e0      	b.n	80011b8 <ADC_ReadChannels+0x46>

080011f6 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 80011f6:	f240 133c 	movw	r3, #316	; 0x13c
 80011fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011fe:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8001202:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001206:	601a      	str	r2, [r3, #0]
}
 8001208:	4770      	bx	lr

0800120a <SYS_GetBatteryLevel>:
{
 800120a:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800120c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001210:	f2cb 4000 	movt	r0, #46080	; 0xb400
 8001214:	f7ff ffad 	bl	8001172 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8001218:	b1a8      	cbz	r0, 8001246 <SYS_GetBatteryLevel+0x3c>
 800121a:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800121c:	f44f 42ea 	mov.w	r2, #29952	; 0x7500
 8001220:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
 8001224:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	; 0xaa
 8001228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800122c:	4290      	cmp	r0, r2
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800122e:	bf19      	ittee	ne
 8001230:	f640 42e4 	movwne	r2, #3300	; 0xce4
 8001234:	4350      	mulne	r0, r2
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001236:	f640 00d8 	movweq	r0, #2264	; 0x8d8
 800123a:	f2c0 004c 	movteq	r0, #76	; 0x4c
 800123e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001242:	b280      	uxth	r0, r0
}
 8001244:	bd08      	pop	{r3, pc}
    batteryLevelmV = 0;
 8001246:	2000      	movs	r0, #0
 8001248:	e7fc      	b.n	8001244 <SYS_GetBatteryLevel+0x3a>

0800124a <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800124a:	b500      	push	{lr}
 800124c:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001252:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001254:	f042 0204 	orr.w	r2, r2, #4
 8001258:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800125a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800125c:	f002 0204 	and.w	r2, r2, #4
 8001260:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001262:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001264:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001266:	f042 0201 	orr.w	r2, r2, #1
 800126a:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800126c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001274:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2102      	movs	r1, #2
 800127a:	200b      	movs	r0, #11
 800127c:	f002 fac3 	bl	8003806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001280:	200b      	movs	r0, #11
 8001282:	f002 faf9 	bl	8003878 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	4611      	mov	r1, r2
 800128a:	200c      	movs	r0, #12
 800128c:	f002 fabb 	bl	8003806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001290:	200c      	movs	r0, #12
 8001292:	f002 faf1 	bl	8003878 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	4611      	mov	r1, r2
 800129a:	203d      	movs	r0, #61	; 0x3d
 800129c:	f002 fab3 	bl	8003806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 80012a0:	203d      	movs	r0, #61	; 0x3d
 80012a2:	f002 fae9 	bl	8003878 <HAL_NVIC_EnableIRQ>

}
 80012a6:	b003      	add	sp, #12
 80012a8:	f85d fb04 	ldr.w	pc, [sp], #4

080012ac <FLASH_IF_INT_Clear_Error>:
  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 80012ac:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80012ae:	f002 fe03 	bl	8003eb8 <HAL_FLASH_Unlock>
 80012b2:	b990      	cbnz	r0, 80012da <FLASH_IF_INT_Clear_Error+0x2e>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80012b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b8:	f6c5 0300 	movt	r3, #22528	; 0x5800
 80012bc:	699a      	ldr	r2, [r3, #24]
 80012be:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80012c2:	619a      	str	r2, [r3, #24]
 80012c4:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80012c8:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 80012ca:	f002 fe0f 	bl	8003eec <HAL_FLASH_Lock>
    {
      ret_status = FLASH_IF_OK;
 80012ce:	2800      	cmp	r0, #0
 80012d0:	bf14      	ite	ne
 80012d2:	f06f 0004 	mvnne.w	r0, #4
 80012d6:	2000      	moveq	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 80012d8:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 80012da:	f06f 0004 	mvn.w	r0, #4
 80012de:	e7fb      	b.n	80012d8 <FLASH_IF_INT_Clear_Error+0x2c>

080012e0 <FLASH_IF_INT_Erase>:
{
 80012e0:	b570      	push	{r4, r5, r6, lr}
 80012e2:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 80012e8:	2800      	cmp	r0, #0
 80012ea:	d03e      	beq.n	800136a <FLASH_IF_INT_Erase+0x8a>
 80012ec:	460c      	mov	r4, r1
 80012ee:	4606      	mov	r6, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 80012f0:	f7ff ffdc 	bl	80012ac <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 80012f4:	4605      	mov	r5, r0
 80012f6:	b110      	cbz	r0, 80012fe <FLASH_IF_INT_Erase+0x1e>
}
 80012f8:	4628      	mov	r0, r5
 80012fa:	b004      	add	sp, #16
 80012fc:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 80012fe:	f002 fddb 	bl	8003eb8 <HAL_FLASH_Unlock>
 8001302:	bba8      	cbnz	r0, 8001370 <FLASH_IF_INT_Erase+0x90>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001304:	2302      	movs	r3, #2
 8001306:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 8001308:	f106 4378 	add.w	r3, r6, #4160749568	; 0xf8000000
 800130c:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8001310:	f6c1 70ff 	movt	r0, #8191	; 0x1fff
 8001314:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 8001318:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 800131c:	f2c0 32ff 	movt	r2, #1023	; 0x3ff
 8001320:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 8001324:	fbb3 fcf1 	udiv	ip, r3, r1
 8001328:	fb01 331c 	mls	r3, r1, ip, r3
 800132c:	0adb      	lsrs	r3, r3, #11
 800132e:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001330:	f104 4478 	add.w	r4, r4, #4160749568	; 0xf8000000
 8001334:	3c01      	subs	r4, #1
 8001336:	4434      	add	r4, r6
 8001338:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 800133c:	ea02 2281 	and.w	r2, r2, r1, lsl #10
 8001340:	fbb4 f1f2 	udiv	r1, r4, r2
 8001344:	fb02 4411 	mls	r4, r2, r1, r4
 8001348:	ebc3 23d4 	rsb	r3, r3, r4, lsr #11
 800134c:	3301      	adds	r3, #1
 800134e:	9302      	str	r3, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001350:	a903      	add	r1, sp, #12
 8001352:	4668      	mov	r0, sp
 8001354:	f002 fe6c 	bl	8004030 <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 8001358:	b120      	cbz	r0, 8001364 <FLASH_IF_INT_Erase+0x84>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 800135a:	2802      	cmp	r0, #2
 800135c:	bf0c      	ite	eq
 800135e:	2501      	moveq	r5, #1
 8001360:	f06f 0501 	mvnne.w	r5, #1
      HAL_FLASH_Lock();
 8001364:	f002 fdc2 	bl	8003eec <HAL_FLASH_Lock>
 8001368:	e7c6      	b.n	80012f8 <FLASH_IF_INT_Erase+0x18>
    return FLASH_IF_PARAM_ERROR;
 800136a:	f06f 0505 	mvn.w	r5, #5
 800136e:	e7c3      	b.n	80012f8 <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 8001370:	f06f 0504 	mvn.w	r5, #4
 8001374:	e7c0      	b.n	80012f8 <FLASH_IF_INT_Erase+0x18>

08001376 <FLASH_IF_Write>:
{
 8001376:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	9203      	str	r2, [sp, #12]
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800137e:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001382:	d373      	bcc.n	800146c <FLASH_IF_Write+0xf6>
 8001384:	4681      	mov	r9, r0
 8001386:	460c      	mov	r4, r1
 8001388:	4611      	mov	r1, r2
 800138a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800138e:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8001392:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8001396:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800139a:	f2c0 33ff 	movt	r3, #1023	; 0x3ff
 800139e:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 80013a2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80013a6:	3b01      	subs	r3, #1
 80013a8:	4298      	cmp	r0, r3
 80013aa:	d863      	bhi.n	8001474 <FLASH_IF_Write+0xfe>
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80013ac:	2800      	cmp	r0, #0
 80013ae:	d065      	beq.n	800147c <FLASH_IF_Write+0x106>
 80013b0:	2c00      	cmp	r4, #0
 80013b2:	d067      	beq.n	8001484 <FLASH_IF_Write+0x10e>
 80013b4:	ea40 0301 	orr.w	r3, r0, r1
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80013b8:	f013 0307 	ands.w	r3, r3, #7
 80013bc:	9305      	str	r3, [sp, #20]
 80013be:	d165      	bne.n	800148c <FLASH_IF_Write+0x116>
  ret_status = FLASH_IF_INT_Clear_Error();
 80013c0:	f7ff ff74 	bl	80012ac <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 80013c4:	9004      	str	r0, [sp, #16]
 80013c6:	b118      	cbz	r0, 80013d0 <FLASH_IF_Write+0x5a>
}
 80013c8:	9804      	ldr	r0, [sp, #16]
 80013ca:	b009      	add	sp, #36	; 0x24
 80013cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 80013d0:	f002 fd72 	bl	8003eb8 <HAL_FLASH_Unlock>
 80013d4:	2800      	cmp	r0, #0
 80013d6:	d15d      	bne.n	8001494 <FLASH_IF_Write+0x11e>
      start_page_index = PAGE_INDEX(uDest);
 80013d8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80013dc:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 80013e0:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80013e4:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80013e8:	f2c0 31ff 	movt	r1, #1023	; 0x3ff
 80013ec:	ea01 2183 	and.w	r1, r1, r3, lsl #10
 80013f0:	f109 4278 	add.w	r2, r9, #4160749568	; 0xf8000000
 80013f4:	fbb2 f3f1 	udiv	r3, r2, r1
 80013f8:	fb01 2213 	mls	r2, r1, r3, r2
 80013fc:	0ad3      	lsrs	r3, r2, #11
 80013fe:	9302      	str	r3, [sp, #8]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001400:	9b03      	ldr	r3, [sp, #12]
 8001402:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001406:	3b01      	subs	r3, #1
 8001408:	444b      	add	r3, r9
 800140a:	fbb3 f0f1 	udiv	r0, r3, r1
 800140e:	fb01 3310 	mls	r3, r1, r0, r3
 8001412:	0adb      	lsrs	r3, r3, #11
 8001414:	9307      	str	r3, [sp, #28]
 8001416:	3301      	adds	r3, #1
 8001418:	eba3 22d2 	sub.w	r2, r3, r2, lsr #11
      if (number_pages > 1)
 800141c:	2a01      	cmp	r2, #1
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800141e:	bf86      	itte	hi
 8001420:	f3c9 080a 	ubfxhi	r8, r9, #0, #11
 8001424:	f5c8 6800 	rsbhi	r8, r8, #2048	; 0x800
  uint32_t length = uLength;
 8001428:	f8dd 800c 	ldrls.w	r8, [sp, #12]
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800142c:	9a02      	ldr	r2, [sp, #8]
 800142e:	429a      	cmp	r2, r3
 8001430:	d211      	bcs.n	8001456 <FLASH_IF_Write+0xe0>
  uint32_t uSource = (uint32_t)pSource;
 8001432:	9401      	str	r4, [sp, #4]
 8001434:	f8cd 9000 	str.w	r9, [sp]
          if (pAllocatedBuffer == NULL)
 8001438:	f240 13a0 	movw	r3, #416	; 0x1a0
 800143c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001440:	9306      	str	r3, [sp, #24]
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001442:	f04f 0b01 	mov.w	fp, #1
 8001446:	e077      	b.n	8001538 <FLASH_IF_Write+0x1c2>
            ret_status = FLASH_IF_ERASE_ERROR;
 8001448:	f06f 0301 	mvn.w	r3, #1
 800144c:	9304      	str	r3, [sp, #16]
 800144e:	e002      	b.n	8001456 <FLASH_IF_Write+0xe0>
 8001450:	f06f 0303 	mvn.w	r3, #3
 8001454:	9304      	str	r3, [sp, #16]
      HAL_FLASH_Lock();
 8001456:	f002 fd49 	bl	8003eec <HAL_FLASH_Lock>
 800145a:	e7b5      	b.n	80013c8 <FLASH_IF_Write+0x52>
 800145c:	f06f 0303 	mvn.w	r3, #3
 8001460:	9304      	str	r3, [sp, #16]
 8001462:	e7f8      	b.n	8001456 <FLASH_IF_Write+0xe0>
            ret_status = FLASH_IF_PARAM_ERROR;
 8001464:	f06f 0305 	mvn.w	r3, #5
 8001468:	9304      	str	r3, [sp, #16]
 800146a:	e7f4      	b.n	8001456 <FLASH_IF_Write+0xe0>
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	9304      	str	r3, [sp, #16]
 8001472:	e7a9      	b.n	80013c8 <FLASH_IF_Write+0x52>
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	9304      	str	r3, [sp, #16]
 800147a:	e7a5      	b.n	80013c8 <FLASH_IF_Write+0x52>
    return FLASH_IF_PARAM_ERROR;
 800147c:	f06f 0305 	mvn.w	r3, #5
 8001480:	9304      	str	r3, [sp, #16]
 8001482:	e7a1      	b.n	80013c8 <FLASH_IF_Write+0x52>
 8001484:	f06f 0305 	mvn.w	r3, #5
 8001488:	9304      	str	r3, [sp, #16]
 800148a:	e79d      	b.n	80013c8 <FLASH_IF_Write+0x52>
 800148c:	f06f 0305 	mvn.w	r3, #5
 8001490:	9304      	str	r3, [sp, #16]
 8001492:	e799      	b.n	80013c8 <FLASH_IF_Write+0x52>
      ret_status = FLASH_IF_LOCK_ERROR;
 8001494:	f06f 0304 	mvn.w	r3, #4
 8001498:	9304      	str	r3, [sp, #16]
  return ret_status;
 800149a:	e795      	b.n	80013c8 <FLASH_IF_Write+0x52>
          if (pAllocatedBuffer == NULL)
 800149c:	9b06      	ldr	r3, [sp, #24]
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	2800      	cmp	r0, #0
 80014a2:	d0df      	beq.n	8001464 <FLASH_IF_Write+0xee>
 80014a4:	9b02      	ldr	r3, [sp, #8]
 80014a6:	02dc      	lsls	r4, r3, #11
 80014a8:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80014ac:	4625      	mov	r5, r4
  if ((pDestination == NULL) || (pSource == NULL))
 80014ae:	b124      	cbz	r4, 80014ba <FLASH_IF_Write+0x144>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80014b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014b4:	4621      	mov	r1, r4
 80014b6:	f012 f858 	bl	801356a <UTIL_MEM_cpy_8>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80014ba:	9b00      	ldr	r3, [sp, #0]
 80014bc:	f3c3 000a 	ubfx	r0, r3, #0, #11
 80014c0:	9e06      	ldr	r6, [sp, #24]
 80014c2:	6833      	ldr	r3, [r6, #0]
 80014c4:	fa1f f288 	uxth.w	r2, r8
 80014c8:	9901      	ldr	r1, [sp, #4]
 80014ca:	4418      	add	r0, r3
 80014cc:	f012 f84d 	bl	801356a <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80014d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d4:	4628      	mov	r0, r5
 80014d6:	f7ff ff03 	bl	80012e0 <FLASH_IF_INT_Erase>
 80014da:	2800      	cmp	r0, #0
 80014dc:	d1b4      	bne.n	8001448 <FLASH_IF_Write+0xd2>
          current_source = (uint32_t)pAllocatedBuffer;
 80014de:	6837      	ldr	r7, [r6, #0]
          current_length = FLASH_PAGE_SIZE;
 80014e0:	f44f 6a00 	mov.w	sl, #2048	; 0x800
 80014e4:	9d05      	ldr	r5, [sp, #20]
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80014e6:	197e      	adds	r6, r7, r5
 80014e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80014ec:	4621      	mov	r1, r4
 80014ee:	4658      	mov	r0, fp
 80014f0:	f002 fd4b 	bl	8003f8a <HAL_FLASH_Program>
 80014f4:	2800      	cmp	r0, #0
 80014f6:	d1ab      	bne.n	8001450 <FLASH_IF_Write+0xda>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80014f8:	6820      	ldr	r0, [r4, #0]
 80014fa:	6862      	ldr	r2, [r4, #4]
 80014fc:	5979      	ldr	r1, [r7, r5]
 80014fe:	6873      	ldr	r3, [r6, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	bf08      	it	eq
 8001504:	4288      	cmpeq	r0, r1
 8001506:	d1a9      	bne.n	800145c <FLASH_IF_Write+0xe6>
            current_dest = current_dest + 8U;
 8001508:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800150a:	3508      	adds	r5, #8
 800150c:	4555      	cmp	r5, sl
 800150e:	d3ea      	bcc.n	80014e6 <FLASH_IF_Write+0x170>
        uDest += length;
 8001510:	9b00      	ldr	r3, [sp, #0]
 8001512:	4443      	add	r3, r8
 8001514:	9300      	str	r3, [sp, #0]
        uSource += length;
 8001516:	9b01      	ldr	r3, [sp, #4]
 8001518:	4443      	add	r3, r8
 800151a:	9301      	str	r3, [sp, #4]
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 800151c:	9b03      	ldr	r3, [sp, #12]
 800151e:	eba3 0808 	sub.w	r8, r3, r8
 8001522:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
 8001526:	bf28      	it	cs
 8001528:	f44f 6800 	movcs.w	r8, #2048	; 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800152c:	9a02      	ldr	r2, [sp, #8]
 800152e:	1c53      	adds	r3, r2, #1
 8001530:	9907      	ldr	r1, [sp, #28]
 8001532:	4291      	cmp	r1, r2
 8001534:	d08f      	beq.n	8001456 <FLASH_IF_Write+0xe0>
 8001536:	9302      	str	r3, [sp, #8]
  for (index = 0; index < uLength; index += 8)
 8001538:	f1b8 0f00 	cmp.w	r8, #0
 800153c:	d0e8      	beq.n	8001510 <FLASH_IF_Write+0x19a>
 800153e:	f1a9 0208 	sub.w	r2, r9, #8
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001542:	4613      	mov	r3, r2
 8001544:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8001548:	6851      	ldr	r1, [r2, #4]
 800154a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800154e:	bf08      	it	eq
 8001550:	f1b0 3fff 	cmpeq.w	r0, #4294967295
 8001554:	d1a2      	bne.n	800149c <FLASH_IF_Write+0x126>
  for (index = 0; index < uLength; index += 8)
 8001556:	3310      	adds	r3, #16
 8001558:	eba3 0309 	sub.w	r3, r3, r9
 800155c:	4543      	cmp	r3, r8
 800155e:	d3f0      	bcc.n	8001542 <FLASH_IF_Write+0x1cc>
 8001560:	46c2      	mov	sl, r8
 8001562:	9f01      	ldr	r7, [sp, #4]
 8001564:	9c00      	ldr	r4, [sp, #0]
 8001566:	e7bd      	b.n	80014e4 <FLASH_IF_Write+0x16e>

08001568 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001568:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 800156c:	d318      	bcc.n	80015a0 <FLASH_IF_Read+0x38>
{
 800156e:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001570:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001574:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8001578:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 800157c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001580:	f2c0 33ff 	movt	r3, #1023	; 0x3ff
 8001584:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8001588:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800158c:	3b01      	subs	r3, #1
 800158e:	4299      	cmp	r1, r3
 8001590:	d809      	bhi.n	80015a6 <FLASH_IF_Read+0x3e>
  if ((pDestination == NULL) || (pSource == NULL))
 8001592:	b158      	cbz	r0, 80015ac <FLASH_IF_Read+0x44>
 8001594:	b169      	cbz	r1, 80015b2 <FLASH_IF_Read+0x4a>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001596:	b292      	uxth	r2, r2
 8001598:	f011 ffe7 	bl	801356a <UTIL_MEM_cpy_8>
  return ret_status;
 800159c:	2000      	movs	r0, #0
}
 800159e:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80015a4:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80015a6:	f04f 30ff 	mov.w	r0, #4294967295
 80015aa:	e7f8      	b.n	800159e <FLASH_IF_Read+0x36>
    return FLASH_IF_PARAM_ERROR;
 80015ac:	f06f 0005 	mvn.w	r0, #5
 80015b0:	e7f5      	b.n	800159e <FLASH_IF_Read+0x36>
 80015b2:	f06f 0005 	mvn.w	r0, #5
 80015b6:	e7f2      	b.n	800159e <FLASH_IF_Read+0x36>

080015b8 <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80015b8:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 80015bc:	d314      	bcc.n	80015e8 <FLASH_IF_Erase+0x30>
{
 80015be:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80015c0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80015c4:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 80015c8:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 80015cc:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80015d0:	f2c0 33ff 	movt	r3, #1023	; 0x3ff
 80015d4:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 80015d8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80015dc:	3b01      	subs	r3, #1
 80015de:	4298      	cmp	r0, r3
 80015e0:	d805      	bhi.n	80015ee <FLASH_IF_Erase+0x36>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80015e2:	f7ff fe7d 	bl	80012e0 <FLASH_IF_INT_Erase>
}
 80015e6:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80015ec:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80015ee:	f04f 30ff 	mov.w	r0, #4294967295
 80015f2:	e7f8      	b.n	80015e6 <FLASH_IF_Erase+0x2e>

080015f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	2400      	movs	r4, #0
 80015fa:	9403      	str	r4, [sp, #12]
 80015fc:	9404      	str	r4, [sp, #16]
 80015fe:	9405      	str	r4, [sp, #20]
 8001600:	9406      	str	r4, [sp, #24]
 8001602:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800160a:	f042 0201 	orr.w	r2, r2, #1
 800160e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001610:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001612:	f002 0201 	and.w	r2, r2, #1
 8001616:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001618:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800161a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800161c:	f042 0202 	orr.w	r2, r2, #2
 8001620:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001622:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001624:	f002 0202 	and.w	r2, r2, #2
 8001628:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800162a:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800162c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800162e:	f042 0204 	orr.w	r2, r2, #4
 8001632:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800163c:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|SPI_CSN_Pin|SPI_CEN_Pin, GPIO_PIN_RESET);
 800163e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001642:	f6c4 0500 	movt	r5, #18432	; 0x4800
 8001646:	4622      	mov	r2, r4
 8001648:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 800164c:	4628      	mov	r0, r5
 800164e:	f002 feac 	bl	80043aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001652:	2201      	movs	r2, #1
 8001654:	2120      	movs	r1, #32
 8001656:	4628      	mov	r0, r5
 8001658:	f002 fea7 	bl	80043aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 800165c:	4622      	mov	r2, r4
 800165e:	f240 2131 	movw	r1, #561	; 0x231
 8001662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001666:	f002 fea0 	bl	80043aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin;
 800166a:	2338      	movs	r3, #56	; 0x38
 800166c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2601      	movs	r6, #1
 8001670:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	2703      	movs	r7, #3
 8001676:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001678:	a903      	add	r1, sp, #12
 800167a:	4628      	mov	r0, r5
 800167c:	f002 fd38 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CEN_Pin;
 8001680:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001684:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	a903      	add	r1, sp, #12
 800168e:	4628      	mov	r0, r5
 8001690:	f002 fd2e 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001694:	2331      	movs	r3, #49	; 0x31
 8001696:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169e:	a903      	add	r1, sp, #12
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a4:	f002 fd24 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 80016a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ac:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ae:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80016b4:	a903      	add	r1, sp, #12
 80016b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ba:	f002 fd19 	bl	80040f0 <HAL_GPIO_Init>

}
 80016be:	b009      	add	sp, #36	; 0x24
 80016c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016c2 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80016c2:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016c4:	f240 10a4 	movw	r0, #420	; 0x1a4
 80016c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80016cc:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 80016d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80016d4:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 80016d6:	f647 43bb 	movw	r3, #31931	; 0x7cbb
 80016da:	f2c0 0370 	movt	r3, #112	; 0x70
 80016de:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e4:	2201      	movs	r2, #1
 80016e6:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e8:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80016ea:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016ec:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ee:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016f0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016f2:	f003 f824 	bl	800473e <HAL_I2C_Init>
 80016f6:	b980      	cbnz	r0, 800171a <MX_I2C2_Init+0x58>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016f8:	2100      	movs	r1, #0
 80016fa:	f240 10a4 	movw	r0, #420	; 0x1a4
 80016fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001702:	f003 fe12 	bl	800532a <HAL_I2CEx_ConfigAnalogFilter>
 8001706:	b958      	cbnz	r0, 8001720 <MX_I2C2_Init+0x5e>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001708:	2100      	movs	r1, #0
 800170a:	f240 10a4 	movw	r0, #420	; 0x1a4
 800170e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001712:	f003 fe38 	bl	8005386 <HAL_I2CEx_ConfigDigitalFilter>
 8001716:	b930      	cbnz	r0, 8001726 <MX_I2C2_Init+0x64>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001718:	bd08      	pop	{r3, pc}
    Error_Handler();
 800171a:	f000 fa33 	bl	8001b84 <Error_Handler>
 800171e:	e7eb      	b.n	80016f8 <MX_I2C2_Init+0x36>
    Error_Handler();
 8001720:	f000 fa30 	bl	8001b84 <Error_Handler>
 8001724:	e7f0      	b.n	8001708 <MX_I2C2_Init+0x46>
    Error_Handler();
 8001726:	f000 fa2d 	bl	8001b84 <Error_Handler>
}
 800172a:	e7f5      	b.n	8001718 <MX_I2C2_Init+0x56>

0800172c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800172c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001730:	b096      	sub	sp, #88	; 0x58
 8001732:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	2100      	movs	r1, #0
 8001736:	9111      	str	r1, [sp, #68]	; 0x44
 8001738:	9112      	str	r1, [sp, #72]	; 0x48
 800173a:	9113      	str	r1, [sp, #76]	; 0x4c
 800173c:	9114      	str	r1, [sp, #80]	; 0x50
 800173e:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001740:	2238      	movs	r2, #56	; 0x38
 8001742:	a803      	add	r0, sp, #12
 8001744:	f012 fe50 	bl	80143e8 <memset>
  if(i2cHandle->Instance==I2C2)
 8001748:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 800174c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001750:	6822      	ldr	r2, [r4, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d002      	beq.n	800175c <HAL_I2C_MspInit+0x30>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001756:	b016      	add	sp, #88	; 0x58
 8001758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001760:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001764:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001766:	a803      	add	r0, sp, #12
 8001768:	f004 fc80 	bl	800606c <HAL_RCCEx_PeriphCLKConfig>
 800176c:	2800      	cmp	r0, #0
 800176e:	d14a      	bne.n	8001806 <HAL_I2C_MspInit+0xda>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001770:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001774:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800177c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001784:	9b02      	ldr	r3, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001786:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800178e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001796:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001798:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 800179c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a0:	2712      	movs	r7, #18
 80017a2:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a4:	2501      	movs	r5, #1
 80017a6:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80017a8:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017aa:	2604      	movs	r6, #4
 80017ac:	9615      	str	r6, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	a911      	add	r1, sp, #68	; 0x44
 80017b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b4:	f002 fc9c 	bl	80040f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017b8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017bc:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017be:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80017c0:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017c2:	9615      	str	r6, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c4:	a911      	add	r1, sp, #68	; 0x44
 80017c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017ca:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80017ce:	f002 fc8f 	bl	80040f0 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017d8:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80017e2:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	4611      	mov	r1, r2
 80017e8:	2020      	movs	r0, #32
 80017ea:	f002 f80c 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80017ee:	2020      	movs	r0, #32
 80017f0:	f002 f842 	bl	8003878 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	4611      	mov	r1, r2
 80017f8:	2021      	movs	r0, #33	; 0x21
 80017fa:	f002 f804 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80017fe:	2021      	movs	r0, #33	; 0x21
 8001800:	f002 f83a 	bl	8003878 <HAL_NVIC_EnableIRQ>
}
 8001804:	e7a7      	b.n	8001756 <HAL_I2C_MspInit+0x2a>
      Error_Handler();
 8001806:	f000 f9bd 	bl	8001b84 <Error_Handler>
 800180a:	e7b1      	b.n	8001770 <HAL_I2C_MspInit+0x44>

0800180c <EnablePM_sens>:
  }
}

/* USER CODE BEGIN 4 */

void EnablePM_sens(void){
 800180c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800180e:	2201      	movs	r2, #1
 8001810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001818:	f002 fdc7 	bl	80043aa <HAL_GPIO_WritePin>
}
 800181c:	bd08      	pop	{r3, pc}

0800181e <DisablePM_sens>:

void DisablePM_sens(void){
 800181e:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182a:	f002 fdbe 	bl	80043aa <HAL_GPIO_WritePin>
}
 800182e:	bd08      	pop	{r3, pc}

08001830 <MeasurePM_sens>:

void MeasurePM_sens(void){
 8001830:	b510      	push	{r4, lr}
 8001832:	b084      	sub	sp, #16
	HAL_I2C_Mem_Read(&hi2c2, J5_SSP_addr << 1, 0x00, 1, J5_SSP_dataRX, 12, 1000);
 8001834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001838:	9302      	str	r3, [sp, #8]
 800183a:	230c      	movs	r3, #12
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	f240 14f8 	movw	r4, #504	; 0x1f8
 8001842:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001846:	9400      	str	r4, [sp, #0]
 8001848:	2301      	movs	r3, #1
 800184a:	2200      	movs	r2, #0
 800184c:	2166      	movs	r1, #102	; 0x66
 800184e:	f240 10a4 	movw	r0, #420	; 0x1a4
 8001852:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001856:	f003 f95a 	bl	8004b0e <HAL_I2C_Mem_Read>
	PM1 = J5_SSP_dataRX[0] + (J5_SSP_dataRX[1] << 8) + (J5_SSP_dataRX[2] << 16) +  (J5_SSP_dataRX[3] << 24);
 800185a:	7823      	ldrb	r3, [r4, #0]
 800185c:	f894 c001 	ldrb.w	ip, [r4, #1]
 8001860:	78a0      	ldrb	r0, [r4, #2]
 8001862:	78e1      	ldrb	r1, [r4, #3]
 8001864:	f240 2208 	movw	r2, #520	; 0x208
 8001868:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800186c:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8001870:	eb03 4300 	add.w	r3, r3, r0, lsl #16
 8001874:	eb03 6301 	add.w	r3, r3, r1, lsl #24
 8001878:	6013      	str	r3, [r2, #0]
	PM2_5 = J5_SSP_dataRX[4] + (J5_SSP_dataRX[5] << 8) + (J5_SSP_dataRX[6] << 16) +  (J5_SSP_dataRX[7] << 24);
 800187a:	7923      	ldrb	r3, [r4, #4]
 800187c:	f894 c005 	ldrb.w	ip, [r4, #5]
 8001880:	79a0      	ldrb	r0, [r4, #6]
 8001882:	79e1      	ldrb	r1, [r4, #7]
 8001884:	f240 2210 	movw	r2, #528	; 0x210
 8001888:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800188c:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8001890:	eb03 4300 	add.w	r3, r3, r0, lsl #16
 8001894:	eb03 6301 	add.w	r3, r3, r1, lsl #24
 8001898:	6013      	str	r3, [r2, #0]
	PM10 = J5_SSP_dataRX[8] + (J5_SSP_dataRX[9] << 8) + (J5_SSP_dataRX[10] << 16) +  (J5_SSP_dataRX[11] << 24);
 800189a:	7a23      	ldrb	r3, [r4, #8]
 800189c:	f894 c009 	ldrb.w	ip, [r4, #9]
 80018a0:	7aa0      	ldrb	r0, [r4, #10]
 80018a2:	7ae1      	ldrb	r1, [r4, #11]
 80018a4:	f240 220c 	movw	r2, #524	; 0x20c
 80018a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80018ac:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 80018b0:	eb03 4300 	add.w	r3, r3, r0, lsl #16
 80018b4:	eb03 6301 	add.w	r3, r3, r1, lsl #24
 80018b8:	6013      	str	r3, [r2, #0]
}
 80018ba:	b004      	add	sp, #16
 80018bc:	bd10      	pop	{r4, pc}

080018be <MeasureOzone>:
void MeasureOzone(void){
 80018be:	b530      	push	{r4, r5, lr}
 80018c0:	b085      	sub	sp, #20
	uint16_t RxLen;
	HAL_UART_Receive_IT(&huart2, (uint8_t *) aRXBufferUser, ZE27_RX_BUFFER_SIZE);
 80018c2:	f240 241c 	movw	r4, #540	; 0x21c
 80018c6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80018ca:	f240 5570 	movw	r5, #1392	; 0x570
 80018ce:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80018d2:	2209      	movs	r2, #9
 80018d4:	4621      	mov	r1, r4
 80018d6:	4628      	mov	r0, r5
 80018d8:	f006 fe75 	bl	80085c6 <HAL_UART_Receive_IT>
	HAL_UARTEx_ReceiveToIdle(&huart2, (uint8_t *) aRXBufferUser, ZE27_RX_BUFFER_SIZE, &RxLen, 1000);
 80018dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	f10d 030e 	add.w	r3, sp, #14
 80018e6:	2209      	movs	r2, #9
 80018e8:	4621      	mov	r1, r4
 80018ea:	4628      	mov	r0, r5
 80018ec:	f006 ffb0 	bl	8008850 <HAL_UARTEx_ReceiveToIdle>
	OzonePPB = ZE27_parsePPB(aRXBufferUser);
 80018f0:	4620      	mov	r0, r4
 80018f2:	f7ff fbdb 	bl	80010ac <ZE27_parsePPB>
 80018f6:	f240 2304 	movw	r3, #516	; 0x204
 80018fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018fe:	8018      	strh	r0, [r3, #0]
}
 8001900:	b005      	add	sp, #20
 8001902:	bd30      	pop	{r4, r5, pc}

08001904 <MeasureTempHum>:

void MeasureTempHum(void){
 8001904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001906:	b083      	sub	sp, #12

    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(SHT40_addr << 1),SHT40_dataRX, 6, 100);
 8001908:	f240 2414 	movw	r4, #532	; 0x214
 800190c:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001910:	f240 15a4 	movw	r5, #420	; 0x1a4
 8001914:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8001918:	2664      	movs	r6, #100	; 0x64
 800191a:	9600      	str	r6, [sp, #0]
 800191c:	2306      	movs	r3, #6
 800191e:	4622      	mov	r2, r4
 8001920:	2188      	movs	r1, #136	; 0x88
 8001922:	4628      	mov	r0, r5
 8001924:	f003 f82c 	bl	8004980 <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 8001928:	7823      	ldrb	r3, [r4, #0]
 800192a:	7860      	ldrb	r0, [r4, #1]
 800192c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8001930:	b280      	uxth	r0, r0
 8001932:	f240 2334 	movw	r3, #564	; 0x234
 8001936:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800193a:	8018      	strh	r0, [r3, #0]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 800193c:	78e3      	ldrb	r3, [r4, #3]
 800193e:	7924      	ldrb	r4, [r4, #4]
 8001940:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 8001944:	b2a4      	uxth	r4, r4
 8001946:	f240 2336 	movw	r3, #566	; 0x236
 800194a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800194e:	801c      	strh	r4, [r3, #0]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 8001950:	f240 2730 	movw	r7, #560	; 0x230
 8001954:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8001958:	f7ff f99a 	bl	8000c90 <__aeabi_ui2f>
 800195c:	f7fe fd78 	bl	8000450 <__aeabi_f2d>
 8001960:	2200      	movs	r2, #0
 8001962:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001966:	f2c4 0365 	movt	r3, #16485	; 0x4065
 800196a:	f7fe fdc9 	bl	8000500 <__aeabi_dmul>
 800196e:	2200      	movs	r2, #0
 8001970:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001974:	f2c4 03ef 	movt	r3, #16623	; 0x40ef
 8001978:	f7fe feec 	bl	8000754 <__aeabi_ddiv>
 800197c:	2200      	movs	r2, #0
 800197e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001982:	f2c4 0346 	movt	r3, #16454	; 0x4046
 8001986:	f7fe fc03 	bl	8000190 <__aeabi_dsub>
 800198a:	f7ff f87b 	bl	8000a84 <__aeabi_d2f>
 800198e:	6038      	str	r0, [r7, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 8001990:	f240 272c 	movw	r7, #556	; 0x22c
 8001994:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8001998:	4620      	mov	r0, r4
 800199a:	f7ff f979 	bl	8000c90 <__aeabi_ui2f>
 800199e:	f7fe fd57 	bl	8000450 <__aeabi_f2d>
 80019a2:	2200      	movs	r2, #0
 80019a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019a8:	f2c4 035f 	movt	r3, #16479	; 0x405f
 80019ac:	f7fe fda8 	bl	8000500 <__aeabi_dmul>
 80019b0:	2200      	movs	r2, #0
 80019b2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80019b6:	f2c4 03ef 	movt	r3, #16623	; 0x40ef
 80019ba:	f7fe fecb 	bl	8000754 <__aeabi_ddiv>
 80019be:	2200      	movs	r2, #0
 80019c0:	2300      	movs	r3, #0
 80019c2:	f2c4 0318 	movt	r3, #16408	; 0x4018
 80019c6:	f7fe fbe3 	bl	8000190 <__aeabi_dsub>
 80019ca:	f7ff f85b 	bl	8000a84 <__aeabi_d2f>
 80019ce:	6038      	str	r0, [r7, #0]
    HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(SHT40_addr << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 80019d0:	9600      	str	r6, [sp, #0]
 80019d2:	2301      	movs	r3, #1
 80019d4:	f244 6279 	movw	r2, #18041	; 0x4679
 80019d8:	f6c0 0201 	movt	r2, #2049	; 0x801
 80019dc:	2188      	movs	r1, #136	; 0x88
 80019de:	4628      	mov	r0, r5
 80019e0:	f002 ff07 	bl	80047f2 <HAL_I2C_Master_Transmit>
}
 80019e4:	b003      	add	sp, #12
 80019e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019e8 <SystemClock_Config>:
{
 80019e8:	b510      	push	{r4, lr}
 80019ea:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ec:	2248      	movs	r2, #72	; 0x48
 80019ee:	2100      	movs	r1, #0
 80019f0:	a808      	add	r0, sp, #32
 80019f2:	f012 fcf9 	bl	80143e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f6:	2400      	movs	r4, #0
 80019f8:	9402      	str	r4, [sp, #8]
 80019fa:	9403      	str	r4, [sp, #12]
 80019fc:	9404      	str	r4, [sp, #16]
 80019fe:	9405      	str	r4, [sp, #20]
 8001a00:	9406      	str	r4, [sp, #24]
 8001a02:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001a04:	f003 fceb 	bl	80053de <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a0c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a10:	f023 0318 	bic.w	r3, r3, #24
 8001a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a1c:	f6c5 0200 	movt	r2, #22528	; 0x5800
 8001a20:	6813      	ldr	r3, [r2, #0]
 8001a22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	6813      	ldr	r3, [r2, #0]
 8001a2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001a36:	2307      	movs	r3, #7
 8001a38:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8001a3a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a3e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a40:	2381      	movs	r3, #129	; 0x81
 8001a42:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a48:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a4a:	2340      	movs	r3, #64	; 0x40
 8001a4c:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001a4e:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a50:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a52:	a808      	add	r0, sp, #32
 8001a54:	f003 fe92 	bl	800577c <HAL_RCC_OscConfig>
 8001a58:	b978      	cbnz	r0, 8001a7a <SystemClock_Config+0x92>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001a5a:	234f      	movs	r3, #79	; 0x4f
 8001a5c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a66:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a68:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001a6a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	a802      	add	r0, sp, #8
 8001a70:	f004 f9b7 	bl	8005de2 <HAL_RCC_ClockConfig>
 8001a74:	b918      	cbnz	r0, 8001a7e <SystemClock_Config+0x96>
}
 8001a76:	b01a      	add	sp, #104	; 0x68
 8001a78:	bd10      	pop	{r4, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <SystemClock_Config+0x94>
 8001a7e:	b672      	cpsid	i
 8001a80:	e7fe      	b.n	8001a80 <SystemClock_Config+0x98>

08001a82 <main>:
{
 8001a82:	b508      	push	{r3, lr}
  HAL_Init();
 8001a84:	f001 f940 	bl	8002d08 <HAL_Init>
  SystemClock_Config();
 8001a88:	f7ff ffae 	bl	80019e8 <SystemClock_Config>
  MX_GPIO_Init();
 8001a8c:	f7ff fdb2 	bl	80015f4 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001a90:	f006 ff89 	bl	80089a6 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001a94:	f000 fe73 	bl	800277e <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001a98:	f7ff fe13 	bl	80016c2 <MX_I2C2_Init>
  MX_TIM16_Init();
 8001a9c:	f000 fc26 	bl	80022ec <MX_TIM16_Init>
  MX_TIM17_Init();
 8001aa0:	f000 fc57 	bl	8002352 <MX_TIM17_Init>
  MX_SPI2_Init();
 8001aa4:	f000 f9b5 	bl	8001e12 <MX_SPI2_Init>
  F1_QueueIni(); // init Function queue
 8001aa8:	f000 f870 	bl	8001b8c <F1_QueueIni>
  F2_QueueIni();
 8001aac:	f000 f8cd 	bl	8001c4a <F2_QueueIni>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aba:	f002 fc76 	bl	80043aa <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim16);
 8001abe:	f240 307c 	movw	r0, #892	; 0x37c
 8001ac2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001ac6:	f005 fb04 	bl	80070d2 <HAL_TIM_Base_Start_IT>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);///DBG
 8001aca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001ace:	f6c4 0400 	movt	r4, #18432	; 0x4800
 8001ad2:	2520      	movs	r5, #32
    MX_LoRaWAN_Process();
 8001ad4:	f006 ff6d 	bl	80089b2 <MX_LoRaWAN_Process>
    F1_pull()();
 8001ad8:	f000 f892 	bl	8001c00 <F1_pull>
 8001adc:	4780      	blx	r0
    F2_pull()();
 8001ade:	f000 f8ee 	bl	8001cbe <F2_pull>
 8001ae2:	4780      	blx	r0
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);///DBG
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f002 fc64 	bl	80043b4 <HAL_GPIO_TogglePin>
  while (1)
 8001aec:	e7f2      	b.n	8001ad4 <main+0x52>

08001aee <HAL_TIM_PeriodElapsedCallback>:
{
 8001aee:	b508      	push	{r3, lr}
   if (htim == &htim16)
 8001af0:	f240 337c 	movw	r3, #892	; 0x37c
 8001af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001af8:	4283      	cmp	r3, r0
 8001afa:	d000      	beq.n	8001afe <HAL_TIM_PeriodElapsedCallback+0x10>
}
 8001afc:	bd08      	pop	{r3, pc}
      switch(counter){
 8001afe:	f240 2328 	movw	r3, #552	; 0x228
 8001b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8001b0c:	d01a      	beq.n	8001b44 <HAL_TIM_PeriodElapsedCallback+0x56>
 8001b0e:	f240 224e 	movw	r2, #590	; 0x24e
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d01d      	beq.n	8001b52 <HAL_TIM_PeriodElapsedCallback+0x64>
      counter++;
 8001b16:	f240 2328 	movw	r3, #552	; 0x228
 8001b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	3201      	adds	r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
      counter %= 600;
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	f248 12b5 	movw	r2, #33205	; 0x81b5
 8001b2a:	f6c1 324e 	movt	r2, #6990	; 0x1b4e
 8001b2e:	fb82 2100 	smull	r2, r1, r2, r0
 8001b32:	17c2      	asrs	r2, r0, #31
 8001b34:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
 8001b38:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001b3c:	fb01 0212 	mls	r2, r1, r2, r0
 8001b40:	601a      	str	r2, [r3, #0]
}
 8001b42:	e7db      	b.n	8001afc <HAL_TIM_PeriodElapsedCallback+0xe>
    	  F2_push(EnablePM_sens);
 8001b44:	f641 000d 	movw	r0, #6157	; 0x180d
 8001b48:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001b4c:	f000 f889 	bl	8001c62 <F2_push>
    	  break;
 8001b50:	e7e1      	b.n	8001b16 <HAL_TIM_PeriodElapsedCallback+0x28>
    	  F2_push(MeasureTempHum);
 8001b52:	f641 1005 	movw	r0, #6405	; 0x1905
 8001b56:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001b5a:	f000 f882 	bl	8001c62 <F2_push>
    	  F1_push(MeasurePM_sens);
 8001b5e:	f641 0031 	movw	r0, #6193	; 0x1831
 8001b62:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001b66:	f000 f81d 	bl	8001ba4 <F1_push>
    	  F1_push(MeasureOzone);
 8001b6a:	f641 00bf 	movw	r0, #6335	; 0x18bf
 8001b6e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001b72:	f000 f817 	bl	8001ba4 <F1_push>
    	  F2_push(DisablePM_sens);
 8001b76:	f641 001f 	movw	r0, #6175	; 0x181f
 8001b7a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001b7e:	f000 f870 	bl	8001c62 <F2_push>
 8001b82:	e7c8      	b.n	8001b16 <HAL_TIM_PeriodElapsedCallback+0x28>

08001b84 <Error_Handler>:
 8001b84:	b672      	cpsid	i
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <Error_Handler+0x2>

08001b88 <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 8001b88:	4770      	bx	lr

08001b8a <SimpleF2>:
 // ------ 8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----

 volatile int F2_last; // number of last element of fast-speed queue
 int F2_first; // number of first element of fast-speed queue

 void SimpleF2(){;};
 8001b8a:	4770      	bx	lr

08001b8c <F1_QueueIni>:
  F1_last = 0;
 8001b8c:	f240 237c 	movw	r3, #636	; 0x27c
 8001b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 8001b98:	f240 2378 	movw	r3, #632	; 0x278
 8001b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ba0:	601a      	str	r2, [r3, #0]
}
 8001ba2:	4770      	bx	lr

08001ba4 <F1_push>:
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 8001ba4:	f240 237c 	movw	r3, #636	; 0x27c
 8001ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	425a      	negs	r2, r3
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	f002 020f 	and.w	r2, r2, #15
 8001bba:	bf58      	it	pl
 8001bbc:	4253      	negpl	r3, r2
 8001bbe:	f240 2278 	movw	r2, #632	; 0x278
 8001bc2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d017      	beq.n	8001bfc <F1_push+0x58>
  F1_Queue[F1_last++] = pointerQ;
 8001bcc:	f240 227c 	movw	r2, #636	; 0x27c
 8001bd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001bd4:	6811      	ldr	r1, [r2, #0]
 8001bd6:	1c4b      	adds	r3, r1, #1
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	f240 2338 	movw	r3, #568	; 0x238
 8001bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001be2:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  F1_last%=Q_SIZE_FAST;
 8001be6:	6813      	ldr	r3, [r2, #0]
 8001be8:	4259      	negs	r1, r3
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	f001 010f 	and.w	r1, r1, #15
 8001bf2:	bf58      	it	pl
 8001bf4:	424b      	negpl	r3, r1
 8001bf6:	6013      	str	r3, [r2, #0]
  return 0;
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	4770      	bx	lr
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 8001bfc:	2001      	movs	r0, #1
}
 8001bfe:	4770      	bx	lr

08001c00 <F1_pull>:
  if (F1_last == F1_first)return SimpleF1;
 8001c00:	f240 237c 	movw	r3, #636	; 0x27c
 8001c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	f240 2378 	movw	r3, #632	; 0x278
 8001c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d013      	beq.n	8001c40 <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 8001c18:	f240 2238 	movw	r2, #568	; 0x238
 8001c1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001c20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  F1_first%=Q_SIZE_FAST;
 8001c24:	f240 2278 	movw	r2, #632	; 0x278
 8001c28:	f2c2 0200 	movt	r2, #8192	; 0x2000
  pullVar = F1_Queue[F1_first++];
 8001c2c:	3301      	adds	r3, #1
  F1_first%=Q_SIZE_FAST;
 8001c2e:	4259      	negs	r1, r3
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	f001 010f 	and.w	r1, r1, #15
 8001c38:	bf58      	it	pl
 8001c3a:	424b      	negpl	r3, r1
 8001c3c:	6013      	str	r3, [r2, #0]
  return pullVar;
 8001c3e:	4770      	bx	lr
  if (F1_last == F1_first)return SimpleF1;
 8001c40:	f641 3089 	movw	r0, #7049	; 0x1b89
 8001c44:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 8001c48:	4770      	bx	lr

08001c4a <F2_QueueIni>:

 void (*F2_Queue[Q_SIZE_FAST])();

 void F2_QueueIni(void){ // initialization of Queue
   F2_last = 0;
 8001c4a:	f240 23c4 	movw	r3, #708	; 0x2c4
 8001c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
   F2_first = 0;
 8001c56:	f240 23c0 	movw	r3, #704	; 0x2c0
 8001c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c5e:	601a      	str	r2, [r3, #0]
 }
 8001c60:	4770      	bx	lr

08001c62 <F2_push>:

 int F2_push(void (*pointerQ)(void) ){ // push element from the queue
   if ((F2_last+1)%Q_SIZE_FAST == F2_first)return 1;
 8001c62:	f240 23c4 	movw	r3, #708	; 0x2c4
 8001c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	425a      	negs	r2, r3
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	f002 020f 	and.w	r2, r2, #15
 8001c78:	bf58      	it	pl
 8001c7a:	4253      	negpl	r3, r2
 8001c7c:	f240 22c0 	movw	r2, #704	; 0x2c0
 8001c80:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d017      	beq.n	8001cba <F2_push+0x58>
   F2_Queue[F2_last++] = pointerQ;
 8001c8a:	f240 22c4 	movw	r2, #708	; 0x2c4
 8001c8e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001c92:	6811      	ldr	r1, [r2, #0]
 8001c94:	1c4b      	adds	r3, r1, #1
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	f240 2380 	movw	r3, #640	; 0x280
 8001c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ca0:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
   F2_last%=Q_SIZE_FAST;
 8001ca4:	6813      	ldr	r3, [r2, #0]
 8001ca6:	4259      	negs	r1, r3
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	f001 010f 	and.w	r1, r1, #15
 8001cb0:	bf58      	it	pl
 8001cb2:	424b      	negpl	r3, r1
 8001cb4:	6013      	str	r3, [r2, #0]
   return 0;
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	4770      	bx	lr
   if ((F2_last+1)%Q_SIZE_FAST == F2_first)return 1;
 8001cba:	2001      	movs	r0, #1
 }
 8001cbc:	4770      	bx	lr

08001cbe <F2_pull>:

 void (*F2_pull(void))(void){ // pull element from the queue
   void (*pullVar)(void);
   if (F2_last == F2_first)return SimpleF2;
 8001cbe:	f240 23c4 	movw	r3, #708	; 0x2c4
 8001cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	f240 23c0 	movw	r3, #704	; 0x2c0
 8001ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d013      	beq.n	8001cfe <F2_pull+0x40>
   pullVar = F2_Queue[F2_first++];
 8001cd6:	f240 2280 	movw	r2, #640	; 0x280
 8001cda:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001cde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   F2_first%=Q_SIZE_FAST;
 8001ce2:	f240 22c0 	movw	r2, #704	; 0x2c0
 8001ce6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   pullVar = F2_Queue[F2_first++];
 8001cea:	3301      	adds	r3, #1
   F2_first%=Q_SIZE_FAST;
 8001cec:	4259      	negs	r1, r3
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	f001 010f 	and.w	r1, r1, #15
 8001cf6:	bf58      	it	pl
 8001cf8:	424b      	negpl	r3, r1
 8001cfa:	6013      	str	r3, [r2, #0]
   return pullVar;
 8001cfc:	4770      	bx	lr
   if (F2_last == F2_first)return SimpleF2;
 8001cfe:	f641 308b 	movw	r0, #7051	; 0x1b8b
 8001d02:	f6c0 0000 	movt	r0, #2048	; 0x800
 }
 8001d06:	4770      	bx	lr

08001d08 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001d08:	b500      	push	{lr}
 8001d0a:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001d0c:	222c      	movs	r2, #44	; 0x2c
 8001d0e:	2100      	movs	r1, #0
 8001d10:	a801      	add	r0, sp, #4
 8001d12:	f012 fb69 	bl	80143e8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d16:	f240 20c8 	movw	r0, #712	; 0x2c8
 8001d1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001d1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001d22:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001d26:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001d28:	231f      	movs	r3, #31
 8001d2a:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001d30:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d32:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d38:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001d3a:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001d3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d40:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d42:	f004 fbbb 	bl	80064bc <HAL_RTC_Init>
 8001d46:	b9d8      	cbnz	r0, 8001d80 <MX_RTC_Init+0x78>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001d48:	f240 20c8 	movw	r0, #712	; 0x2c8
 8001d4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001d50:	f004 fd37 	bl	80067c2 <HAL_RTCEx_SetSSRU_IT>
 8001d54:	b9b8      	cbnz	r0, 8001d86 <MX_RTC_Init+0x7e>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001d56:	2200      	movs	r2, #0
 8001d58:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d5a:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d5c:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001d5e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001d62:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d68:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001d6a:	a901      	add	r1, sp, #4
 8001d6c:	f240 20c8 	movw	r0, #712	; 0x2c8
 8001d70:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001d74:	f004 fc16 	bl	80065a4 <HAL_RTC_SetAlarm_IT>
 8001d78:	b940      	cbnz	r0, 8001d8c <MX_RTC_Init+0x84>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d7a:	b00d      	add	sp, #52	; 0x34
 8001d7c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001d80:	f7ff ff00 	bl	8001b84 <Error_Handler>
 8001d84:	e7e0      	b.n	8001d48 <MX_RTC_Init+0x40>
    Error_Handler();
 8001d86:	f7ff fefd 	bl	8001b84 <Error_Handler>
 8001d8a:	e7e4      	b.n	8001d56 <MX_RTC_Init+0x4e>
    Error_Handler();
 8001d8c:	f7ff fefa 	bl	8001b84 <Error_Handler>
}
 8001d90:	e7f3      	b.n	8001d7a <MX_RTC_Init+0x72>

08001d92 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001d92:	b510      	push	{r4, lr}
 8001d94:	b090      	sub	sp, #64	; 0x40
 8001d96:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d98:	2238      	movs	r2, #56	; 0x38
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	a802      	add	r0, sp, #8
 8001d9e:	f012 fb23 	bl	80143e8 <memset>
  if(rtcHandle->Instance==RTC)
 8001da2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001da6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001daa:	6822      	ldr	r2, [r4, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RTC_MspInit+0x22>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001db0:	b010      	add	sp, #64	; 0x40
 8001db2:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001db4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001db8:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dbe:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dc0:	a802      	add	r0, sp, #8
 8001dc2:	f004 f953 	bl	800606c <HAL_RCCEx_PeriphCLKConfig>
 8001dc6:	bb08      	cbnz	r0, 8001e0c <HAL_RTC_MspInit+0x7a>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dcc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001dd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001dd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dde:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001de8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	4611      	mov	r1, r2
 8001dee:	2002      	movs	r0, #2
 8001df0:	f001 fd09 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001df4:	2002      	movs	r0, #2
 8001df6:	f001 fd3f 	bl	8003878 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	202a      	movs	r0, #42	; 0x2a
 8001e00:	f001 fd01 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001e04:	202a      	movs	r0, #42	; 0x2a
 8001e06:	f001 fd37 	bl	8003878 <HAL_NVIC_EnableIRQ>
}
 8001e0a:	e7d1      	b.n	8001db0 <HAL_RTC_MspInit+0x1e>
      Error_Handler();
 8001e0c:	f7ff feba 	bl	8001b84 <Error_Handler>
 8001e10:	e7da      	b.n	8001dc8 <HAL_RTC_MspInit+0x36>

08001e12 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e12:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e14:	f240 3000 	movw	r0, #768	; 0x300
 8001e18:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001e1c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e20:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001e24:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e26:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001e2a:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e30:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e34:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e36:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e38:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e3e:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e40:	2218      	movs	r2, #24
 8001e42:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e44:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e46:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e48:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e4e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e50:	2308      	movs	r3, #8
 8001e52:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e54:	f004 fd07 	bl	8006866 <HAL_SPI_Init>
 8001e58:	b900      	cbnz	r0, 8001e5c <MX_SPI2_Init+0x4a>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e5a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001e5c:	f7ff fe92 	bl	8001b84 <Error_Handler>
}
 8001e60:	e7fb      	b.n	8001e5a <MX_SPI2_Init+0x48>

08001e62 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e62:	b570      	push	{r4, r5, r6, lr}
 8001e64:	b096      	sub	sp, #88	; 0x58
 8001e66:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	2100      	movs	r1, #0
 8001e6a:	9111      	str	r1, [sp, #68]	; 0x44
 8001e6c:	9112      	str	r1, [sp, #72]	; 0x48
 8001e6e:	9113      	str	r1, [sp, #76]	; 0x4c
 8001e70:	9114      	str	r1, [sp, #80]	; 0x50
 8001e72:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e74:	2238      	movs	r2, #56	; 0x38
 8001e76:	a803      	add	r0, sp, #12
 8001e78:	f012 fab6 	bl	80143e8 <memset>
  if(spiHandle->Instance==SPI2)
 8001e7c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e80:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001e84:	6822      	ldr	r2, [r4, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d001      	beq.n	8001e8e <HAL_SPI_MspInit+0x2c>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001e8a:	b016      	add	sp, #88	; 0x58
 8001e8c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8001e8e:	2310      	movs	r3, #16
 8001e90:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8001e92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e96:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e98:	a803      	add	r0, sp, #12
 8001e9a:	f004 f8e7 	bl	800606c <HAL_RCCEx_PeriphCLKConfig>
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	d13a      	bne.n	8001f18 <HAL_SPI_MspInit+0xb6>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ea8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eac:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001eae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001eb0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001eb4:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001eb6:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eba:	f042 0202 	orr.w	r2, r2, #2
 8001ebe:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ec2:	f002 0202 	and.w	r2, r2, #2
 8001ec6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001ec8:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ecc:	f042 0201 	orr.w	r2, r2, #1
 8001ed0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001eda:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8001edc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001ee0:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2602      	movs	r6, #2
 8001ee4:	9612      	str	r6, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2400      	movs	r4, #0
 8001ee8:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	9414      	str	r4, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001eec:	2505      	movs	r5, #5
 8001eee:	9515      	str	r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef0:	a911      	add	r1, sp, #68	; 0x44
 8001ef2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ef6:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001efa:	f002 f8f9 	bl	80040f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f02:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	9612      	str	r6, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	9414      	str	r4, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f0a:	9515      	str	r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0c:	a911      	add	r1, sp, #68	; 0x44
 8001f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f12:	f002 f8ed 	bl	80040f0 <HAL_GPIO_Init>
}
 8001f16:	e7b8      	b.n	8001e8a <HAL_SPI_MspInit+0x28>
      Error_Handler();
 8001f18:	f7ff fe34 	bl	8001b84 <Error_Handler>
 8001f1c:	e7c1      	b.n	8001ea2 <HAL_SPI_MspInit+0x40>

08001f1e <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001f1e:	4770      	bx	lr

08001f20 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001f20:	4770      	bx	lr

08001f22 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001f22:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001f24:	f000 ff06 	bl	8002d34 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f2c:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8001f30:	2001      	movs	r0, #1
 8001f32:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001f36:	f003 face 	bl	80054d6 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001f3a:	bd08      	pop	{r3, pc}

08001f3c <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001f3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001f3e:	f000 ff00 	bl	8002d42 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001f42:	bd08      	pop	{r3, pc}

08001f44 <PWR_ExitStopMode>:
{
 8001f44:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001f46:	f000 fefc 	bl	8002d42 <HAL_ResumeTick>
  vcom_Resume();
 8001f4a:	f000 fdf0 	bl	8002b2e <vcom_Resume>
}
 8001f4e:	bd08      	pop	{r3, pc}

08001f50 <PWR_EnterSleepMode>:
{
 8001f50:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8001f52:	f000 feef 	bl	8002d34 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001f56:	2101      	movs	r1, #1
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f003 fa49 	bl	80053f0 <HAL_PWR_EnterSLEEPMode>
}
 8001f5e:	bd08      	pop	{r3, pc}

08001f60 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f60:	4770      	bx	lr

08001f62 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <NMI_Handler>

08001f64 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <HardFault_Handler>

08001f66 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f66:	e7fe      	b.n	8001f66 <MemManage_Handler>

08001f68 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <BusFault_Handler>

08001f6a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <UsageFault_Handler>

08001f6c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f6c:	4770      	bx	lr

08001f6e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6e:	4770      	bx	lr

08001f70 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f70:	4770      	bx	lr

08001f72 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f72:	4770      	bx	lr

08001f74 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001f74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001f76:	f240 20c8 	movw	r0, #712	; 0x2c8
 8001f7a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001f7e:	f004 fc4c 	bl	800681a <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001f82:	bd08      	pop	{r3, pc}

08001f84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001f86:	f240 407c 	movw	r0, #1148	; 0x47c
 8001f8a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001f8e:	f001 fea7 	bl	8003ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f92:	bd08      	pop	{r3, pc}

08001f94 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001f94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f96:	f240 401c 	movw	r0, #1052	; 0x41c
 8001f9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001f9e:	f001 fe9f 	bl	8003ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001fa2:	bd08      	pop	{r3, pc}

08001fa4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001fa4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */
	static int counter = 0;
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001fa6:	f240 307c 	movw	r0, #892	; 0x37c
 8001faa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001fae:	f005 f8c7 	bl	8007140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  counter++;
 8001fb2:	f240 3368 	movw	r3, #872	; 0x368
 8001fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	3201      	adds	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM16_IRQn 1 */
}
 8001fc0:	bd08      	pop	{r3, pc}

08001fc2 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001fc2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */
static int counter = 0;
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001fc4:	f240 30c8 	movw	r0, #968	; 0x3c8
 8001fc8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001fcc:	f005 f8b8 	bl	8007140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  counter++;
 8001fd0:	f240 3364 	movw	r3, #868	; 0x364
 8001fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	3201      	adds	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM17_IRQn 1 */
}
 8001fde:	bd08      	pop	{r3, pc}

08001fe0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event Interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001fe0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001fe2:	f240 10a4 	movw	r0, #420	; 0x1a4
 8001fe6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001fea:	f002 fe93 	bl	8004d14 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001fee:	bd08      	pop	{r3, pc}

08001ff0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error Interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001ff0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001ff2:	f240 10a4 	movw	r0, #420	; 0x1a4
 8001ff6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001ffa:	f003 f946 	bl	800528a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001ffe:	bd08      	pop	{r3, pc}

08002000 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002000:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002002:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8002006:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800200a:	f005 faf5 	bl	80075f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800200e:	bd08      	pop	{r3, pc}

08002010 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002010:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002012:	f240 5070 	movw	r0, #1392	; 0x570
 8002016:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800201a:	f005 faed 	bl	80075f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800201e:	bd08      	pop	{r3, pc}

08002020 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002020:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002022:	f240 20c8 	movw	r0, #712	; 0x2c8
 8002026:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800202a:	f004 f9a5 	bl	8006378 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800202e:	bd08      	pop	{r3, pc}

08002030 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002030:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002032:	f240 306c 	movw	r0, #876	; 0x36c
 8002036:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800203a:	f004 ff55 	bl	8006ee8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800203e:	bd08      	pop	{r3, pc}

08002040 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8002040:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8002042:	f240 401c 	movw	r0, #1052	; 0x41c
 8002046:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800204a:	f001 fee8 	bl	8003e1e <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800204e:	bd08      	pop	{r3, pc}

08002050 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002050:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002052:	f240 306c 	movw	r0, #876	; 0x36c
 8002056:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800205a:	2308      	movs	r3, #8
 800205c:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800205e:	f004 fca5 	bl	80069ac <HAL_SUBGHZ_Init>
 8002062:	b900      	cbnz	r0, 8002066 <MX_SUBGHZ_Init+0x16>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002064:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002066:	f7ff fd8d 	bl	8001b84 <Error_Handler>
}
 800206a:	e7fb      	b.n	8002064 <MX_SUBGHZ_Init+0x14>

0800206c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 800206c:	b500      	push	{lr}
 800206e:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002074:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800207c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002084:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	4611      	mov	r1, r2
 800208a:	2032      	movs	r0, #50	; 0x32
 800208c:	f001 fbbb 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002090:	2032      	movs	r0, #50	; 0x32
 8002092:	f001 fbf1 	bl	8003878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002096:	b003      	add	sp, #12
 8002098:	f85d fb04 	ldr.w	pc, [sp], #4

0800209c <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 800209c:	b40c      	push	{r2, r3}
 800209e:	b500      	push	{lr}
 80020a0:	b083      	sub	sp, #12
 80020a2:	ab04      	add	r3, sp, #16
 80020a4:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80020a8:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80020aa:	f011 fb62 	bl	8013772 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80020ae:	b003      	add	sp, #12
 80020b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80020b4:	b002      	add	sp, #8
 80020b6:	4770      	bx	lr

080020b8 <TimestampNow>:
{
 80020b8:	b530      	push	{r4, r5, lr}
 80020ba:	b085      	sub	sp, #20
 80020bc:	4604      	mov	r4, r0
 80020be:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 80020c0:	a802      	add	r0, sp, #8
 80020c2:	f011 facb 	bl	801365c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80020c6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	9b02      	ldr	r3, [sp, #8]
 80020ce:	f244 6294 	movw	r2, #18068	; 0x4694
 80020d2:	f6c0 0201 	movt	r2, #2049	; 0x801
 80020d6:	2110      	movs	r1, #16
 80020d8:	4620      	mov	r0, r4
 80020da:	f7ff ffdf 	bl	800209c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80020de:	4620      	mov	r0, r4
 80020e0:	f7fe f84a 	bl	8000178 <strlen>
 80020e4:	8028      	strh	r0, [r5, #0]
}
 80020e6:	b005      	add	sp, #20
 80020e8:	bd30      	pop	{r4, r5, pc}

080020ea <SystemApp_Init>:
{
 80020ea:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80020ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f0:	6893      	ldr	r3, [r2, #8]
 80020f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80020f6:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 80020f8:	f011 fe02 	bl	8013d00 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80020fc:	f240 3378 	movw	r3, #888	; 0x378
 8002100:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002104:	2401      	movs	r4, #1
 8002106:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8002108:	f000 f8c3 	bl	8002292 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 800210c:	f012 f801 	bl	8014112 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002110:	f242 00b9 	movw	r0, #8377	; 0x20b9
 8002114:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002118:	f012 f818 	bl	801414c <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800211c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002120:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8002124:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002128:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800212a:	2002      	movs	r0, #2
 800212c:	f012 f814 	bl	8014158 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8002130:	f7ff f861 	bl	80011f6 <SYS_InitMeasurement>
  EnvSensors_Init();
 8002134:	f000 f8d7 	bl	80022e6 <EnvSensors_Init>
  UTIL_LPM_Init();
 8002138:	f011 f9ac 	bl	8013494 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800213c:	4621      	mov	r1, r4
 800213e:	4620      	mov	r0, r4
 8002140:	f011 f9cd 	bl	80134de <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002144:	4621      	mov	r1, r4
 8002146:	4620      	mov	r0, r4
 8002148:	f011 f9b0 	bl	80134ac <UTIL_LPM_SetStopMode>
}
 800214c:	bd10      	pop	{r4, pc}

0800214e <UTIL_SEQ_Idle>:
{
 800214e:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8002150:	f011 f9de 	bl	8013510 <UTIL_LPM_EnterLowPower>
}
 8002154:	bd08      	pop	{r3, pc}

08002156 <GetBatteryLevel>:
{
 8002156:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002158:	f7ff f857 	bl	800120a <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 800215c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002160:	4298      	cmp	r0, r3
 8002162:	d810      	bhi.n	8002186 <GetBatteryLevel+0x30>
  else if (batteryLevelmV < VDD_MIN)
 8002164:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8002168:	d30f      	bcc.n	800218a <GetBatteryLevel+0x34>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 800216a:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 800216e:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8002172:	0040      	lsls	r0, r0, #1
 8002174:	f248 13b5 	movw	r3, #33205	; 0x81b5
 8002178:	f6c1 334e 	movt	r3, #6990	; 0x1b4e
 800217c:	fba3 3000 	umull	r3, r0, r3, r0
 8002180:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8002184:	e000      	b.n	8002188 <GetBatteryLevel+0x32>
    batteryLevel = LORAWAN_MAX_BAT;
 8002186:	20fe      	movs	r0, #254	; 0xfe
}
 8002188:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 800218a:	2000      	movs	r0, #0
 800218c:	e7fc      	b.n	8002188 <GetBatteryLevel+0x32>

0800218e <GetTemperatureLevel>:
{
 800218e:	b500      	push	{lr}
 8002190:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 8002192:	4668      	mov	r0, sp
 8002194:	f000 f88f 	bl	80022b6 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002198:	9801      	ldr	r0, [sp, #4]
 800219a:	f7fe fdd1 	bl	8000d40 <__aeabi_f2iz>
}
 800219e:	b200      	sxth	r0, r0
 80021a0:	b007      	add	sp, #28
 80021a2:	f85d fb04 	ldr.w	pc, [sp], #4

080021a6 <GetUniqueId>:
{
 80021a6:	b538      	push	{r3, r4, r5, lr}
 80021a8:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80021aa:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80021ae:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 80021b2:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80021b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ba:	d018      	beq.n	80021ee <GetUniqueId+0x48>
    id[7] = val & 0xFF;
 80021bc:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 80021be:	0a1a      	lsrs	r2, r3, #8
 80021c0:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 80021c2:	0c1a      	lsrs	r2, r3, #16
 80021c4:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 80021c6:	0e1b      	lsrs	r3, r3, #24
 80021c8:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80021ca:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80021ce:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
    id[3] = val & 0xFF;
 80021d2:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
 80021d6:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80021d8:	f8d3 0584 	ldr.w	r0, [r3, #1412]	; 0x584
    id[2] = val & 0xFF;
 80021dc:	f3c0 2207 	ubfx	r2, r0, #8, #8
    id[1] = (val >> 8) & 0xFF;
 80021e0:	f3c0 4307 	ubfx	r3, r0, #16, #8
    id[0] = (val >> 16) & 0xFF;
 80021e4:	0e00      	lsrs	r0, r0, #24
    id[2] = (ID_2_val) >> 16;
 80021e6:	70a2      	strb	r2, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 80021e8:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 80021ea:	7020      	strb	r0, [r4, #0]
}
 80021ec:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80021ee:	f000 fdaf 	bl	8002d50 <HAL_GetUIDw0>
 80021f2:	4605      	mov	r5, r0
 80021f4:	f000 fdba 	bl	8002d6c <HAL_GetUIDw2>
 80021f8:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 80021fa:	f000 fdb0 	bl	8002d5e <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 80021fe:	0e2b      	lsrs	r3, r5, #24
 8002200:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8002202:	0c2b      	lsrs	r3, r5, #16
 8002204:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8002206:	0a2b      	lsrs	r3, r5, #8
 8002208:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 800220a:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 800220c:	0e03      	lsrs	r3, r0, #24
 800220e:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8002210:	f3c0 4207 	ubfx	r2, r0, #16, #8
    id[1] = (ID_2_val) >> 8;
 8002214:	f3c0 2307 	ubfx	r3, r0, #8, #8
    id[0] = (ID_2_val);
 8002218:	b2c0      	uxtb	r0, r0
 800221a:	e7e4      	b.n	80021e6 <GetUniqueId+0x40>

0800221c <GetDevAddr>:
{
 800221c:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 800221e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002222:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8002226:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  *devAddr = LL_FLASH_GetUDN();
 800222a:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d000      	beq.n	8002234 <GetDevAddr+0x18>
}
 8002232:	bd38      	pop	{r3, r4, r5, pc}
 8002234:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002236:	f000 fd8b 	bl	8002d50 <HAL_GetUIDw0>
 800223a:	4605      	mov	r5, r0
 800223c:	f000 fd8f 	bl	8002d5e <HAL_GetUIDw1>
 8002240:	4045      	eors	r5, r0
 8002242:	f000 fd93 	bl	8002d6c <HAL_GetUIDw2>
 8002246:	4045      	eors	r5, r0
 8002248:	6025      	str	r5, [r4, #0]
}
 800224a:	e7f2      	b.n	8002232 <GetDevAddr+0x16>

0800224c <UTIL_ADV_TRACE_PreSendHook>:
{
 800224c:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800224e:	2101      	movs	r1, #1
 8002250:	2002      	movs	r0, #2
 8002252:	f011 f92b 	bl	80134ac <UTIL_LPM_SetStopMode>
}
 8002256:	bd08      	pop	{r3, pc}

08002258 <UTIL_ADV_TRACE_PostSendHook>:
{
 8002258:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800225a:	2100      	movs	r1, #0
 800225c:	2002      	movs	r0, #2
 800225e:	f011 f925 	bl	80134ac <UTIL_LPM_SetStopMode>
}
 8002262:	bd08      	pop	{r3, pc}

08002264 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002264:	2000      	movs	r0, #0
 8002266:	4770      	bx	lr

08002268 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002268:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800226a:	f240 3378 	movw	r3, #888	; 0x378
 800226e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	b90b      	cbnz	r3, 800227a <HAL_GetTick+0x12>
  uint32_t ret = 0;
 8002276:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8002278:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 800227a:	f000 f909 	bl	8002490 <TIMER_IF_GetTimerValue>
 800227e:	e7fb      	b.n	8002278 <HAL_GetTick+0x10>

08002280 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002280:	b500      	push	{lr}
 8002282:	b083      	sub	sp, #12
 8002284:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002286:	9801      	ldr	r0, [sp, #4]
 8002288:	f000 f9f3 	bl	8002672 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800228c:	b003      	add	sp, #12
 800228e:	f85d fb04 	ldr.w	pc, [sp], #4

08002292 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002292:	b508      	push	{r3, lr}
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002294:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002298:	f6c5 0300 	movt	r3, #22528	; 0x5800
 800229c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80022a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 80022a8:	f000 fd67 	bl	8002d7a <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80022ac:	f000 fd6e 	bl	8002d8c <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80022b0:	f000 fd75 	bl	8002d9e <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80022b4:	bd08      	pop	{r3, pc}

080022b6 <EnvSensors_Read>:
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f2c4 2348 	movt	r3, #16968	; 0x4248
 80022bc:	6083      	str	r3, [r0, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80022be:	2300      	movs	r3, #0
 80022c0:	f2c4 1390 	movt	r3, #16784	; 0x4190
 80022c4:	6043      	str	r3, [r0, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f2c4 437a 	movt	r3, #17530	; 0x447a
 80022cc:	6003      	str	r3, [r0, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80022ce:	f640 130d 	movw	r3, #2317	; 0x90d
 80022d2:	f2c0 033e 	movt	r3, #62	; 0x3e
 80022d6:	60c3      	str	r3, [r0, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80022d8:	f240 33ab 	movw	r3, #939	; 0x3ab
 80022dc:	f2c0 0305 	movt	r3, #5
 80022e0:	6103      	str	r3, [r0, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 80022e2:	2000      	movs	r0, #0
 80022e4:	4770      	bx	lr

080022e6 <EnvSensors_Init>:
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80022e6:	2000      	movs	r0, #0
 80022e8:	4770      	bx	lr

080022ea <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80022ea:	4770      	bx	lr

080022ec <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80022ec:	b500      	push	{lr}
 80022ee:	b083      	sub	sp, #12
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80022f0:	f240 307c 	movw	r0, #892	; 0x37c
 80022f4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80022f8:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80022fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002300:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 999;
 8002302:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002306:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002308:	2300      	movs	r3, #0
 800230a:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 32000;
 800230c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002310:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002312:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8002314:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800231a:	f005 f842 	bl	80073a2 <HAL_TIM_Base_Init>
 800231e:	b9a8      	cbnz	r0, 800234c <MX_TIM16_Init+0x60>
  SET_BIT(RCC->APB2ENR, Periphs);
 8002320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002324:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002326:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800232a:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800232c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002334:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM16_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM16_CLK_ENABLE();

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	4611      	mov	r1, r2
 800233a:	201c      	movs	r0, #28
 800233c:	f001 fa63 	bl	8003806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002340:	201c      	movs	r0, #28
 8002342:	f001 fa99 	bl	8003878 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM16_Init 2 */

}
 8002346:	b003      	add	sp, #12
 8002348:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800234c:	f7ff fc1a 	bl	8001b84 <Error_Handler>
 8002350:	e7e6      	b.n	8002320 <MX_TIM16_Init+0x34>

08002352 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002352:	b500      	push	{lr}
 8002354:	b083      	sub	sp, #12
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002356:	f240 30c8 	movw	r0, #968	; 0x3c8
 800235a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800235e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002362:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002366:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236c:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 65535;
 800236e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002372:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002374:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8002376:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002378:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800237a:	f005 f812 	bl	80073a2 <HAL_TIM_Base_Init>
 800237e:	b9a8      	cbnz	r0, 80023ac <MX_TIM17_Init+0x5a>
  SET_BIT(RCC->APB2ENR, Periphs);
 8002380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002384:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002386:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800238a:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800238c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002392:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002394:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM17_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM17_CLK_ENABLE();

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	4611      	mov	r1, r2
 800239a:	201d      	movs	r0, #29
 800239c:	f001 fa33 	bl	8003806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80023a0:	201d      	movs	r0, #29
 80023a2:	f001 fa69 	bl	8003878 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM17_Init 2 */

}
 80023a6:	b003      	add	sp, #12
 80023a8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80023ac:	f7ff fbea 	bl	8001b84 <Error_Handler>
 80023b0:	e7e6      	b.n	8002380 <MX_TIM17_Init+0x2e>

080023b2 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023b2:	b500      	push	{lr}
 80023b4:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM16)
 80023b6:	6802      	ldr	r2, [r0, #0]
 80023b8:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80023bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d008      	beq.n	80023d6 <HAL_TIM_Base_MspInit+0x24>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM17)
 80023c4:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80023c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d016      	beq.n	80023fe <HAL_TIM_Base_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80023d0:	b003      	add	sp, #12
 80023d2:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->APB2ENR, Periphs);
 80023d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80023e0:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80023e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80023ea:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80023ec:	2200      	movs	r2, #0
 80023ee:	4611      	mov	r1, r2
 80023f0:	201c      	movs	r0, #28
 80023f2:	f001 fa08 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80023f6:	201c      	movs	r0, #28
 80023f8:	f001 fa3e 	bl	8003878 <HAL_NVIC_EnableIRQ>
 80023fc:	e7e8      	b.n	80023d0 <HAL_TIM_Base_MspInit+0x1e>
  SET_BIT(RCC->APB2ENR, Periphs);
 80023fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002402:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002404:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002408:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800240a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002410:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002412:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002414:	2200      	movs	r2, #0
 8002416:	4611      	mov	r1, r2
 8002418:	201d      	movs	r0, #29
 800241a:	f001 f9f4 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800241e:	201d      	movs	r0, #29
 8002420:	f001 fa2a 	bl	8003878 <HAL_NVIC_EnableIRQ>
}
 8002424:	e7d4      	b.n	80023d0 <HAL_TIM_Base_MspInit+0x1e>

08002426 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002426:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800242a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002432:	4282      	cmp	r2, r0
 8002434:	d007      	beq.n	8002446 <TIMER_IF_SetTimerContext+0x20>
 8002436:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800243a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	6898      	ldr	r0, [r3, #8]
 8002442:	4282      	cmp	r2, r0
 8002444:	d1fb      	bne.n	800243e <TIMER_IF_SetTimerContext+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8002446:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8002448:	f240 4318 	movw	r3, #1048	; 0x418
 800244c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002450:	6018      	str	r0, [r3, #0]
}
 8002452:	4770      	bx	lr

08002454 <TIMER_IF_GetTimerContext>:
  return RtcTimerContext;
 8002454:	f240 4318 	movw	r3, #1048	; 0x418
 8002458:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	4770      	bx	lr

08002460 <TIMER_IF_GetTimerElapsedTime>:
 8002460:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002464:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800246c:	4282      	cmp	r2, r0
 800246e:	d007      	beq.n	8002480 <TIMER_IF_GetTimerElapsedTime+0x20>
 8002470:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002474:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	6898      	ldr	r0, [r3, #8]
 800247c:	4282      	cmp	r2, r0
 800247e:	d1fb      	bne.n	8002478 <TIMER_IF_GetTimerElapsedTime+0x18>
  return UINT32_MAX - ssr;
 8002480:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002482:	f240 4318 	movw	r3, #1048	; 0x418
 8002486:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	1ac0      	subs	r0, r0, r3
 800248e:	4770      	bx	lr

08002490 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8002490:	f240 4314 	movw	r3, #1044	; 0x414
 8002494:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	b18b      	cbz	r3, 80024c0 <TIMER_IF_GetTimerValue+0x30>
 800249c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80024a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80024a8:	4282      	cmp	r2, r0
 80024aa:	d007      	beq.n	80024bc <TIMER_IF_GetTimerValue+0x2c>
 80024ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80024b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	6898      	ldr	r0, [r3, #8]
 80024b8:	4282      	cmp	r2, r0
 80024ba:	d1fb      	bne.n	80024b4 <TIMER_IF_GetTimerValue+0x24>
  return UINT32_MAX - ssr;
 80024bc:	43c0      	mvns	r0, r0
 80024be:	4770      	bx	lr
  uint32_t ret = 0;
 80024c0:	2000      	movs	r0, #0
}
 80024c2:	4770      	bx	lr

080024c4 <TIMER_IF_GetMinimumTimeout>:
}
 80024c4:	2003      	movs	r0, #3
 80024c6:	4770      	bx	lr

080024c8 <TIMER_IF_Convert_ms2Tick>:
{
 80024c8:	b508      	push	{r3, lr}
 80024ca:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80024cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024d0:	2300      	movs	r3, #0
 80024d2:	0280      	lsls	r0, r0, #10
 80024d4:	0d89      	lsrs	r1, r1, #22
 80024d6:	f7fe fc59 	bl	8000d8c <__aeabi_uldivmod>
}
 80024da:	bd08      	pop	{r3, pc}

080024dc <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80024dc:	0ec2      	lsrs	r2, r0, #27
 80024de:	0143      	lsls	r3, r0, #5
 80024e0:	1a1b      	subs	r3, r3, r0
 80024e2:	f162 0200 	sbc.w	r2, r2, #0
 80024e6:	0092      	lsls	r2, r2, #2
 80024e8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	181b      	adds	r3, r3, r0
 80024f0:	f142 0000 	adc.w	r0, r2, #0
 80024f4:	00c0      	lsls	r0, r0, #3
 80024f6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80024fa:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 80024fe:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8002502:	4770      	bx	lr

08002504 <TIMER_IF_StopTimer>:
{
 8002504:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002506:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800250a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800250e:	2201      	movs	r2, #1
 8002510:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002512:	f240 24c8 	movw	r4, #712	; 0x2c8
 8002516:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800251a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800251e:	4620      	mov	r0, r4
 8002520:	f003 fee0 	bl	80062e4 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002524:	f04f 33ff 	mov.w	r3, #4294967295
 8002528:	6323      	str	r3, [r4, #48]	; 0x30
}
 800252a:	2000      	movs	r0, #0
 800252c:	bd10      	pop	{r4, pc}

0800252e <TIMER_IF_Init>:
{
 800252e:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8002530:	f240 4314 	movw	r3, #1044	; 0x414
 8002534:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	b10b      	cbz	r3, 8002540 <TIMER_IF_Init+0x12>
}
 800253c:	2000      	movs	r0, #0
 800253e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002540:	f240 24c8 	movw	r4, #712	; 0x2c8
 8002544:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002548:	f04f 35ff 	mov.w	r5, #4294967295
 800254c:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 800254e:	f7ff fbdb 	bl	8001d08 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8002552:	f7ff ffd7 	bl	8002504 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800255a:	4620      	mov	r0, r4
 800255c:	f003 fec2 	bl	80062e4 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002560:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002562:	4620      	mov	r0, r4
 8002564:	f004 f90c 	bl	8006780 <HAL_RTCEx_EnableBypassShadow>
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002568:	2200      	movs	r2, #0
 800256a:	2102      	movs	r1, #2
 800256c:	4620      	mov	r0, r4
 800256e:	f004 f96c 	bl	800684a <HAL_RTCEx_BKUPWrite>
    TIMER_IF_SetTimerContext();
 8002572:	f7ff ff58 	bl	8002426 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8002576:	f240 4314 	movw	r3, #1044	; 0x414
 800257a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]
 8002582:	e7db      	b.n	800253c <TIMER_IF_Init+0xe>

08002584 <TIMER_IF_BkUp_Write_Seconds>:
{
 8002584:	b508      	push	{r3, lr}
 8002586:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002588:	2100      	movs	r1, #0
 800258a:	f240 20c8 	movw	r0, #712	; 0x2c8
 800258e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002592:	f004 f95a 	bl	800684a <HAL_RTCEx_BKUPWrite>
}
 8002596:	bd08      	pop	{r3, pc}

08002598 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8002598:	b508      	push	{r3, lr}
 800259a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800259c:	2101      	movs	r1, #1
 800259e:	f240 20c8 	movw	r0, #712	; 0x2c8
 80025a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80025a6:	f004 f950 	bl	800684a <HAL_RTCEx_BKUPWrite>
}
 80025aa:	bd08      	pop	{r3, pc}

080025ac <TIMER_IF_StartTimer>:
{
 80025ac:	b510      	push	{r4, lr}
 80025ae:	b08c      	sub	sp, #48	; 0x30
 80025b0:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 80025b2:	222c      	movs	r2, #44	; 0x2c
 80025b4:	2100      	movs	r1, #0
 80025b6:	a801      	add	r0, sp, #4
 80025b8:	f011 ff16 	bl	80143e8 <memset>
  TIMER_IF_StopTimer();
 80025bc:	f7ff ffa2 	bl	8002504 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80025c0:	f240 4318 	movw	r3, #1048	; 0x418
 80025c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80025cc:	2300      	movs	r3, #0
 80025ce:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80025d0:	43e4      	mvns	r4, r4
 80025d2:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80025d4:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80025d6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80025da:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80025dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025e0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80025e2:	2201      	movs	r2, #1
 80025e4:	a901      	add	r1, sp, #4
 80025e6:	f240 20c8 	movw	r0, #712	; 0x2c8
 80025ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80025ee:	f003 ffd9 	bl	80065a4 <HAL_RTC_SetAlarm_IT>
 80025f2:	b910      	cbnz	r0, 80025fa <TIMER_IF_StartTimer+0x4e>
}
 80025f4:	2000      	movs	r0, #0
 80025f6:	b00c      	add	sp, #48	; 0x30
 80025f8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80025fa:	f7ff fac3 	bl	8001b84 <Error_Handler>
 80025fe:	e7f9      	b.n	80025f4 <TIMER_IF_StartTimer+0x48>

08002600 <TIMER_IF_BkUp_Read_Seconds>:
{
 8002600:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002602:	2100      	movs	r1, #0
 8002604:	f240 20c8 	movw	r0, #712	; 0x2c8
 8002608:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800260c:	f004 f924 	bl	8006858 <HAL_RTCEx_BKUPRead>
}
 8002610:	bd08      	pop	{r3, pc}

08002612 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8002612:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002614:	2101      	movs	r1, #1
 8002616:	f240 20c8 	movw	r0, #712	; 0x2c8
 800261a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800261e:	f004 f91b 	bl	8006858 <HAL_RTCEx_BKUPRead>
}
 8002622:	bd08      	pop	{r3, pc}

08002624 <TIMER_IF_GetTime>:
{
 8002624:	b538      	push	{r3, r4, r5, lr}
 8002626:	4605      	mov	r5, r0
 8002628:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800262c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002634:	42a2      	cmp	r2, r4
 8002636:	d007      	beq.n	8002648 <TIMER_IF_GetTime+0x24>
 8002638:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800263c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	689c      	ldr	r4, [r3, #8]
 8002644:	42a2      	cmp	r2, r4
 8002646:	d1fb      	bne.n	8002640 <TIMER_IF_GetTime+0x1c>
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002648:	2102      	movs	r1, #2
 800264a:	f240 20c8 	movw	r0, #712	; 0x2c8
 800264e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002652:	f004 f901 	bl	8006858 <HAL_RTCEx_BKUPRead>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002656:	43e4      	mvns	r4, r4
  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002658:	f3c4 0209 	ubfx	r2, r4, #0, #10
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800265c:	0153      	lsls	r3, r2, #5
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	189b      	adds	r3, r3, r2
 8002664:	f3c3 13d5 	ubfx	r3, r3, #7, #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002668:	802b      	strh	r3, [r5, #0]
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800266a:	0aa4      	lsrs	r4, r4, #10
}
 800266c:	ea44 5080 	orr.w	r0, r4, r0, lsl #22
 8002670:	bd38      	pop	{r3, r4, r5, pc}

08002672 <TIMER_IF_DelayMs>:
{
 8002672:	b508      	push	{r3, lr}
 8002674:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800267a:	2300      	movs	r3, #0
 800267c:	0280      	lsls	r0, r0, #10
 800267e:	0d89      	lsrs	r1, r1, #22
 8002680:	f7fe fb84 	bl	8000d8c <__aeabi_uldivmod>
 8002684:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002688:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002690:	429a      	cmp	r2, r3
 8002692:	d007      	beq.n	80026a4 <TIMER_IF_DelayMs+0x32>
 8002694:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8002698:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800269c:	6891      	ldr	r1, [r2, #8]
 800269e:	6893      	ldr	r3, [r2, #8]
 80026a0:	4299      	cmp	r1, r3
 80026a2:	d1fb      	bne.n	800269c <TIMER_IF_DelayMs+0x2a>
  return UINT32_MAX - ssr;
 80026a4:	ea6f 0c03 	mvn.w	ip, r3
 80026a8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80026ac:	f2c4 0200 	movt	r2, #16384	; 0x4000
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80026b0:	e000      	b.n	80026b4 <TIMER_IF_DelayMs+0x42>
    __NOP();
 80026b2:	bf00      	nop
 80026b4:	6893      	ldr	r3, [r2, #8]
 80026b6:	6891      	ldr	r1, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80026b8:	4299      	cmp	r1, r3
 80026ba:	d003      	beq.n	80026c4 <TIMER_IF_DelayMs+0x52>
 80026bc:	6891      	ldr	r1, [r2, #8]
 80026be:	6893      	ldr	r3, [r2, #8]
 80026c0:	4299      	cmp	r1, r3
 80026c2:	d1fb      	bne.n	80026bc <TIMER_IF_DelayMs+0x4a>
  return UINT32_MAX - ssr;
 80026c4:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80026c6:	eba3 030c 	sub.w	r3, r3, ip
 80026ca:	4283      	cmp	r3, r0
 80026cc:	d3f1      	bcc.n	80026b2 <TIMER_IF_DelayMs+0x40>
}
 80026ce:	bd08      	pop	{r3, pc}

080026d0 <HAL_RTC_AlarmAEventCallback>:
{
 80026d0:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80026d2:	f011 fc60 	bl	8013f96 <UTIL_TIMER_IRQ_Handler>
}
 80026d6:	bd08      	pop	{r3, pc}

080026d8 <HAL_RTCEx_SSRUEventCallback>:
{
 80026d8:	b510      	push	{r4, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80026da:	f240 24c8 	movw	r4, #712	; 0x2c8
 80026de:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80026e2:	2102      	movs	r1, #2
 80026e4:	4620      	mov	r0, r4
 80026e6:	f004 f8b7 	bl	8006858 <HAL_RTCEx_BKUPRead>
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80026ea:	1c42      	adds	r2, r0, #1
 80026ec:	2102      	movs	r1, #2
 80026ee:	4620      	mov	r0, r4
 80026f0:	f004 f8ab 	bl	800684a <HAL_RTCEx_BKUPWrite>
}
 80026f4:	bd10      	pop	{r4, pc}

080026f6 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026f6:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026f8:	f240 40dc 	movw	r0, #1244	; 0x4dc
 80026fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002700:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002704:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002708:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800270a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800270e:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002710:	2300      	movs	r3, #0
 8002712:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002714:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002716:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002718:	220c      	movs	r2, #12
 800271a:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800271c:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800271e:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002720:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002722:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8002724:	2240      	movs	r2, #64	; 0x40
 8002726:	6282      	str	r2, [r0, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8002728:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800272c:	6442      	str	r2, [r0, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 800272e:	6483      	str	r3, [r0, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002730:	f005 fe77 	bl	8008422 <HAL_UART_Init>
 8002734:	b9b8      	cbnz	r0, 8002766 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002736:	2100      	movs	r1, #0
 8002738:	f240 40dc 	movw	r0, #1244	; 0x4dc
 800273c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002740:	f006 f83c 	bl	80087bc <HAL_UARTEx_SetTxFifoThreshold>
 8002744:	b990      	cbnz	r0, 800276c <MX_USART1_UART_Init+0x76>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002746:	2100      	movs	r1, #0
 8002748:	f240 40dc 	movw	r0, #1244	; 0x4dc
 800274c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002750:	f006 f859 	bl	8008806 <HAL_UARTEx_SetRxFifoThreshold>
 8002754:	b968      	cbnz	r0, 8002772 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002756:	f240 40dc 	movw	r0, #1244	; 0x4dc
 800275a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800275e:	f005 ffea 	bl	8008736 <HAL_UARTEx_EnableFifoMode>
 8002762:	b948      	cbnz	r0, 8002778 <MX_USART1_UART_Init+0x82>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002764:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002766:	f7ff fa0d 	bl	8001b84 <Error_Handler>
 800276a:	e7e4      	b.n	8002736 <MX_USART1_UART_Init+0x40>
    Error_Handler();
 800276c:	f7ff fa0a 	bl	8001b84 <Error_Handler>
 8002770:	e7e9      	b.n	8002746 <MX_USART1_UART_Init+0x50>
    Error_Handler();
 8002772:	f7ff fa07 	bl	8001b84 <Error_Handler>
 8002776:	e7ee      	b.n	8002756 <MX_USART1_UART_Init+0x60>
    Error_Handler();
 8002778:	f7ff fa04 	bl	8001b84 <Error_Handler>
}
 800277c:	e7f2      	b.n	8002764 <MX_USART1_UART_Init+0x6e>

0800277e <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800277e:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002780:	f240 5070 	movw	r0, #1392	; 0x570
 8002784:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002788:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800278c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002790:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8002792:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002796:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002798:	2300      	movs	r3, #0
 800279a:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800279c:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800279e:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027a0:	220c      	movs	r2, #12
 80027a2:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027a4:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80027a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027aa:	61c2      	str	r2, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027ac:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027ae:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027b0:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027b2:	f005 fe36 	bl	8008422 <HAL_UART_Init>
 80027b6:	b9b8      	cbnz	r0, 80027e8 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027b8:	2100      	movs	r1, #0
 80027ba:	f240 5070 	movw	r0, #1392	; 0x570
 80027be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80027c2:	f005 fffb 	bl	80087bc <HAL_UARTEx_SetTxFifoThreshold>
 80027c6:	b990      	cbnz	r0, 80027ee <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027c8:	2100      	movs	r1, #0
 80027ca:	f240 5070 	movw	r0, #1392	; 0x570
 80027ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80027d2:	f006 f818 	bl	8008806 <HAL_UARTEx_SetRxFifoThreshold>
 80027d6:	b968      	cbnz	r0, 80027f4 <MX_USART2_UART_Init+0x76>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80027d8:	f240 5070 	movw	r0, #1392	; 0x570
 80027dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80027e0:	f005 ffcd 	bl	800877e <HAL_UARTEx_DisableFifoMode>
 80027e4:	b948      	cbnz	r0, 80027fa <MX_USART2_UART_Init+0x7c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027e6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80027e8:	f7ff f9cc 	bl	8001b84 <Error_Handler>
 80027ec:	e7e4      	b.n	80027b8 <MX_USART2_UART_Init+0x3a>
    Error_Handler();
 80027ee:	f7ff f9c9 	bl	8001b84 <Error_Handler>
 80027f2:	e7e9      	b.n	80027c8 <MX_USART2_UART_Init+0x4a>
    Error_Handler();
 80027f4:	f7ff f9c6 	bl	8001b84 <Error_Handler>
 80027f8:	e7ee      	b.n	80027d8 <MX_USART2_UART_Init+0x5a>
    Error_Handler();
 80027fa:	f7ff f9c3 	bl	8001b84 <Error_Handler>
}
 80027fe:	e7f2      	b.n	80027e6 <MX_USART2_UART_Init+0x68>

08002800 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002800:	b510      	push	{r4, lr}
 8002802:	b09c      	sub	sp, #112	; 0x70
 8002804:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002806:	2100      	movs	r1, #0
 8002808:	9117      	str	r1, [sp, #92]	; 0x5c
 800280a:	9118      	str	r1, [sp, #96]	; 0x60
 800280c:	9119      	str	r1, [sp, #100]	; 0x64
 800280e:	911a      	str	r1, [sp, #104]	; 0x68
 8002810:	911b      	str	r1, [sp, #108]	; 0x6c
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8002812:	9113      	str	r1, [sp, #76]	; 0x4c
 8002814:	9114      	str	r1, [sp, #80]	; 0x50
 8002816:	9115      	str	r1, [sp, #84]	; 0x54
 8002818:	9116      	str	r1, [sp, #88]	; 0x58
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800281a:	2238      	movs	r2, #56	; 0x38
 800281c:	a805      	add	r0, sp, #20
 800281e:	f011 fde3 	bl	80143e8 <memset>
  if(uartHandle->Instance==USART1)
 8002822:	6822      	ldr	r2, [r4, #0]
 8002824:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002828:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800282c:	429a      	cmp	r2, r3
 800282e:	d008      	beq.n	8002842 <HAL_UART_MspInit+0x42>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002830:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002834:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002838:	429a      	cmp	r2, r3
 800283a:	f000 80a0 	beq.w	800297e <HAL_UART_MspInit+0x17e>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800283e:	b01c      	add	sp, #112	; 0x70
 8002840:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002842:	2301      	movs	r3, #1
 8002844:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002846:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800284a:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800284c:	a805      	add	r0, sp, #20
 800284e:	f003 fc0d 	bl	800606c <HAL_RCCEx_PeriphCLKConfig>
 8002852:	2800      	cmp	r0, #0
 8002854:	f040 8087 	bne.w	8002966 <HAL_UART_MspInit+0x166>
  SET_BIT(RCC->APB2ENR, Periphs);
 8002858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800285e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002862:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002864:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002866:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800286a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800286c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800286e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002870:	f042 0202 	orr.w	r2, r2, #2
 8002874:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800287e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002880:	23c0      	movs	r3, #192	; 0xc0
 8002882:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002884:	2302      	movs	r3, #2
 8002886:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002888:	2301      	movs	r3, #1
 800288a:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800288c:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800288e:	2307      	movs	r3, #7
 8002890:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002892:	a917      	add	r1, sp, #92	; 0x5c
 8002894:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002898:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800289c:	f001 fc28 	bl	80040f0 <HAL_GPIO_Init>
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 80028a0:	2300      	movs	r3, #0
 80028a2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80028b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80028b6:	f240 407c 	movw	r0, #1148	; 0x47c
 80028ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80028be:	2308      	movs	r3, #8
 80028c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028c4:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80028c6:	2312      	movs	r3, #18
 80028c8:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ca:	2310      	movs	r3, #16
 80028cc:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028d2:	2280      	movs	r2, #128	; 0x80
 80028d4:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d6:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028d8:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80028da:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028dc:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028de:	f001 f84a 	bl	8003976 <HAL_DMA_Init>
 80028e2:	2800      	cmp	r0, #0
 80028e4:	d142      	bne.n	800296c <HAL_UART_MspInit+0x16c>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80028e6:	f240 437c 	movw	r3, #1148	; 0x47c
 80028ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028ee:	67e3      	str	r3, [r4, #124]	; 0x7c
 80028f0:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80028f2:	f240 401c 	movw	r0, #1052	; 0x41c
 80028f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80028fa:	231c      	movs	r3, #28
 80028fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002900:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002902:	2311      	movs	r3, #17
 8002904:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002906:	2300      	movs	r3, #0
 8002908:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800290a:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800290c:	2280      	movs	r2, #128	; 0x80
 800290e:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002910:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002912:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002914:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002916:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002918:	f001 f82d 	bl	8003976 <HAL_DMA_Init>
 800291c:	bb48      	cbnz	r0, 8002972 <HAL_UART_MspInit+0x172>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800291e:	2300      	movs	r3, #0
 8002920:	9313      	str	r3, [sp, #76]	; 0x4c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002922:	9314      	str	r3, [sp, #80]	; 0x50
    pSyncConfig.SyncEnable = DISABLE;
 8002924:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    pSyncConfig.EventEnable = ENABLE;
 8002928:	2301      	movs	r3, #1
 800292a:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
    pSyncConfig.RequestNumber = 1;
 800292e:	9316      	str	r3, [sp, #88]	; 0x58
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 8002930:	a913      	add	r1, sp, #76	; 0x4c
 8002932:	f240 401c 	movw	r0, #1052	; 0x41c
 8002936:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800293a:	f001 fa42 	bl	8003dc2 <HAL_DMAEx_ConfigMuxSync>
 800293e:	b9d8      	cbnz	r0, 8002978 <HAL_UART_MspInit+0x178>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002940:	f240 431c 	movw	r3, #1052	; 0x41c
 8002944:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002948:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800294c:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800294e:	2200      	movs	r2, #0
 8002950:	2102      	movs	r1, #2
 8002952:	2024      	movs	r0, #36	; 0x24
 8002954:	f000 ff57 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002958:	2024      	movs	r0, #36	; 0x24
 800295a:	f000 ff8d 	bl	8003878 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800295e:	200c      	movs	r0, #12
 8002960:	f000 ff8a 	bl	8003878 <HAL_NVIC_EnableIRQ>
 8002964:	e76b      	b.n	800283e <HAL_UART_MspInit+0x3e>
      Error_Handler();
 8002966:	f7ff f90d 	bl	8001b84 <Error_Handler>
 800296a:	e775      	b.n	8002858 <HAL_UART_MspInit+0x58>
      Error_Handler();
 800296c:	f7ff f90a 	bl	8001b84 <Error_Handler>
 8002970:	e7b9      	b.n	80028e6 <HAL_UART_MspInit+0xe6>
      Error_Handler();
 8002972:	f7ff f907 	bl	8001b84 <Error_Handler>
 8002976:	e7d2      	b.n	800291e <HAL_UART_MspInit+0x11e>
      Error_Handler();
 8002978:	f7ff f904 	bl	8001b84 <Error_Handler>
 800297c:	e7e0      	b.n	8002940 <HAL_UART_MspInit+0x140>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800297e:	2302      	movs	r3, #2
 8002980:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002982:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8002986:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002988:	a805      	add	r0, sp, #20
 800298a:	f003 fb6f 	bl	800606c <HAL_RCCEx_PeriphCLKConfig>
 800298e:	bb50      	cbnz	r0, 80029e6 <HAL_UART_MspInit+0x1e6>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002994:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002996:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800299a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800299c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800299e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80029a2:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80029a4:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029a8:	f042 0201 	orr.w	r2, r2, #1
 80029ac:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80029b6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80029b8:	230c      	movs	r3, #12
 80029ba:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c0:	2301      	movs	r3, #1
 80029c2:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80029c4:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029c6:	2307      	movs	r3, #7
 80029c8:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ca:	a917      	add	r1, sp, #92	; 0x5c
 80029cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d0:	f001 fb8e 	bl	80040f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029d4:	2200      	movs	r2, #0
 80029d6:	4611      	mov	r1, r2
 80029d8:	2025      	movs	r0, #37	; 0x25
 80029da:	f000 ff14 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029de:	2025      	movs	r0, #37	; 0x25
 80029e0:	f000 ff4a 	bl	8003878 <HAL_NVIC_EnableIRQ>
}
 80029e4:	e72b      	b.n	800283e <HAL_UART_MspInit+0x3e>
      Error_Handler();
 80029e6:	f7ff f8cd 	bl	8001b84 <Error_Handler>
 80029ea:	e7d1      	b.n	8002990 <HAL_UART_MspInit+0x190>

080029ec <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80029ec:	b510      	push	{r4, lr}

  if(uartHandle->Instance==USART1)
 80029ee:	6802      	ldr	r2, [r0, #0]
 80029f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80029f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d006      	beq.n	8002a0a <HAL_UART_MspDeInit+0x1e>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 80029fc:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002a00:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d019      	beq.n	8002a3c <HAL_UART_MspDeInit+0x50>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002a08:	bd10      	pop	{r4, pc}
 8002a0a:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002a0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a10:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002a12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a16:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002a18:	21c0      	movs	r1, #192	; 0xc0
 8002a1a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002a1e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8002a22:	f001 fc42 	bl	80042aa <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002a26:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002a28:	f001 f82b 	bl	8003a82 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002a2c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002a30:	f001 f827 	bl	8003a82 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002a34:	2024      	movs	r0, #36	; 0x24
 8002a36:	f000 ff2d 	bl	8003894 <HAL_NVIC_DisableIRQ>
 8002a3a:	e7e5      	b.n	8002a08 <HAL_UART_MspDeInit+0x1c>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a40:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002a42:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002a46:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8002a48:	210c      	movs	r1, #12
 8002a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4e:	f001 fc2c 	bl	80042aa <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002a52:	2025      	movs	r0, #37	; 0x25
 8002a54:	f000 ff1e 	bl	8003894 <HAL_NVIC_DisableIRQ>
}
 8002a58:	e7d6      	b.n	8002a08 <HAL_UART_MspDeInit+0x1c>

08002a5a <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002a5a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002a5c:	f240 6308 	movw	r3, #1544	; 0x608
 8002a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a64:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8002a66:	f7fe fbf0 	bl	800124a <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002a6a:	f7ff fe44 	bl	80026f6 <MX_USART1_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002a6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a72:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8002a76:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002a7a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002a82:	2000      	movs	r0, #0
 8002a84:	bd08      	pop	{r3, pc}

08002a86 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002a86:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
  __HAL_RCC_USART1_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002a9c:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8002aa0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002aa4:	f7ff ffa2 	bl	80029ec <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002aa8:	200f      	movs	r0, #15
 8002aaa:	f000 fef3 	bl	8003894 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002aae:	2000      	movs	r0, #0
 8002ab0:	bd08      	pop	{r3, pc}

08002ab2 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002ab2:	b508      	push	{r3, lr}
 8002ab4:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002ab6:	4601      	mov	r1, r0
 8002ab8:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8002abc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002ac0:	f004 fce6 	bl	8007490 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	bd08      	pop	{r3, pc}

08002ac8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002ac8:	b510      	push	{r4, lr}
 8002aca:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002acc:	f240 6304 	movw	r3, #1540	; 0x604
 8002ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ad4:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002ad6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ada:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002adc:	f240 44dc 	movw	r4, #1244	; 0x4dc
 8002ae0:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002ae4:	ab02      	add	r3, sp, #8
 8002ae6:	e913 0006 	ldmdb	r3, {r1, r2}
 8002aea:	4620      	mov	r0, r4
 8002aec:	f005 fdbf 	bl	800866e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002af8:	d1fb      	bne.n	8002af2 <vcom_ReceiveInit+0x2a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002afa:	69da      	ldr	r2, [r3, #28]
 8002afc:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8002b00:	d0fb      	beq.n	8002afa <vcom_ReceiveInit+0x32>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002b08:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002b0a:	f240 44dc 	movw	r4, #1244	; 0x4dc
 8002b0e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002b12:	4620      	mov	r0, r4
 8002b14:	f005 fdf8 	bl	8008708 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f240 610c 	movw	r1, #1548	; 0x60c
 8002b1e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002b22:	4620      	mov	r0, r4
 8002b24:	f005 fd4f 	bl	80085c6 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002b28:	2000      	movs	r0, #0
 8002b2a:	b002      	add	sp, #8
 8002b2c:	bd10      	pop	{r4, pc}

08002b2e <vcom_Resume>:

void vcom_Resume(void)
{
 8002b2e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b30:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8002b34:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002b38:	f005 fc73 	bl	8008422 <HAL_UART_Init>
 8002b3c:	b938      	cbnz	r0, 8002b4e <vcom_Resume+0x20>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b3e:	f240 407c 	movw	r0, #1148	; 0x47c
 8002b42:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002b46:	f000 ff16 	bl	8003976 <HAL_DMA_Init>
 8002b4a:	b918      	cbnz	r0, 8002b54 <vcom_Resume+0x26>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002b4c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002b4e:	f7ff f819 	bl	8001b84 <Error_Handler>
 8002b52:	e7f4      	b.n	8002b3e <vcom_Resume+0x10>
    Error_Handler();
 8002b54:	f7ff f816 	bl	8001b84 <Error_Handler>
}
 8002b58:	e7f8      	b.n	8002b4c <vcom_Resume+0x1e>

08002b5a <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b5a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002b5c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b60:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002b64:	6802      	ldr	r2, [r0, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d000      	beq.n	8002b6c <HAL_UART_TxCpltCallback+0x12>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002b6a:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8002b6c:	f240 6308 	movw	r3, #1544	; 0x608
 8002b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2000      	movs	r0, #0
 8002b78:	4798      	blx	r3
}
 8002b7a:	e7f6      	b.n	8002b6a <HAL_UART_TxCpltCallback+0x10>

08002b7c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b7c:	b510      	push	{r4, lr}
 8002b7e:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002b80:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b84:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002b88:	6802      	ldr	r2, [r0, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d007      	beq.n	8002b9e <HAL_UART_RxCpltCallback+0x22>
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 8002b8e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002b92:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002b96:	6822      	ldr	r2, [r4, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d018      	beq.n	8002bce <HAL_UART_RxCpltCallback+0x52>




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002b9c:	bd10      	pop	{r4, pc}
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002b9e:	f240 6304 	movw	r3, #1540	; 0x604
 8002ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	b143      	cbz	r3, 8002bbc <HAL_UART_RxCpltCallback+0x40>
 8002baa:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8002bae:	b92a      	cbnz	r2, 8002bbc <HAL_UART_RxCpltCallback+0x40>
      RxCpltCallback(&charRx, 1, 0);
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	f240 600c 	movw	r0, #1548	; 0x60c
 8002bb6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002bba:	4798      	blx	r3
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f240 610c 	movw	r1, #1548	; 0x60c
 8002bc2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f005 fcfd 	bl	80085c6 <HAL_UART_Receive_IT>
 8002bcc:	e7df      	b.n	8002b8e <HAL_UART_RxCpltCallback+0x12>
    	  UART2_SET = 1;
 8002bce:	f240 0304 	movw	r3, #4
 8002bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
}
 8002bda:	e7df      	b.n	8002b9c <HAL_UART_RxCpltCallback+0x20>

08002bdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bdc:	480d      	ldr	r0, [pc, #52]	; (8002c14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002be0:	f7ff fb83 	bl	80022ea <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002be4:	480c      	ldr	r0, [pc, #48]	; (8002c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8002be6:	490d      	ldr	r1, [pc, #52]	; (8002c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002be8:	4a0d      	ldr	r2, [pc, #52]	; (8002c20 <LoopForever+0xe>)
  movs r3, #0
 8002bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bec:	e002      	b.n	8002bf4 <LoopCopyDataInit>

08002bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bf2:	3304      	adds	r3, #4

08002bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bf8:	d3f9      	bcc.n	8002bee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bfc:	4c0a      	ldr	r4, [pc, #40]	; (8002c28 <LoopForever+0x16>)
  movs r3, #0
 8002bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c00:	e001      	b.n	8002c06 <LoopFillZerobss>

08002c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c04:	3204      	adds	r2, #4

08002c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c08:	d3fb      	bcc.n	8002c02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c0a:	f011 fbf5 	bl	80143f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c0e:	f7fe ff38 	bl	8001a82 <main>

08002c12 <LoopForever>:

LoopForever:
    b LoopForever
 8002c12:	e7fe      	b.n	8002c12 <LoopForever>
  ldr   r0, =_estack
 8002c14:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c1c:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8002c20:	08015560 	.word	0x08015560
  ldr r2, =_sbss
 8002c24:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8002c28:	20002074 	.word	0x20002074

08002c2c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c2c:	e7fe      	b.n	8002c2c <ADC_IRQHandler>

08002c2e <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002c2e:	b570      	push	{r4, r5, r6, lr}
 8002c30:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002c32:	2400      	movs	r4, #0
 8002c34:	9403      	str	r4, [sp, #12]
 8002c36:	9405      	str	r4, [sp, #20]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002c38:	2510      	movs	r5, #16
 8002c3a:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c40:	2303      	movs	r3, #3
 8002c42:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002c44:	a901      	add	r1, sp, #4
 8002c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c4a:	f001 fa51 	bl	80040f0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002c4e:	2620      	movs	r6, #32
 8002c50:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002c52:	a901      	add	r1, sp, #4
 8002c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c58:	f001 fa4a 	bl	80040f0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002c5c:	4622      	mov	r2, r4
 8002c5e:	4631      	mov	r1, r6
 8002c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c64:	f001 fba1 	bl	80043aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002c68:	4622      	mov	r2, r4
 8002c6a:	4629      	mov	r1, r5
 8002c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c70:	f001 fb9b 	bl	80043aa <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002c74:	4620      	mov	r0, r4
 8002c76:	b006      	add	sp, #24
 8002c78:	bd70      	pop	{r4, r5, r6, pc}

08002c7a <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002c7a:	b508      	push	{r3, lr}
  switch (Config)
 8002c7c:	2803      	cmp	r0, #3
 8002c7e:	d80f      	bhi.n	8002ca0 <BSP_RADIO_ConfigRFSwitch+0x26>
 8002c80:	e8df f000 	tbb	[pc, r0]
 8002c84:	2a1d1002 	.word	0x2a1d1002
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2110      	movs	r1, #16
 8002c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c90:	f001 fb8b 	bl	80043aa <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002c94:	2200      	movs	r2, #0
 8002c96:	2120      	movs	r1, #32
 8002c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c9c:	f001 fb85 	bl	80043aa <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	bd08      	pop	{r3, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	2110      	movs	r1, #16
 8002ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cac:	f001 fb7d 	bl	80043aa <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2120      	movs	r1, #32
 8002cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb8:	f001 fb77 	bl	80043aa <HAL_GPIO_WritePin>
      break;
 8002cbc:	e7f0      	b.n	8002ca0 <BSP_RADIO_ConfigRFSwitch+0x26>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	2110      	movs	r1, #16
 8002cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cc6:	f001 fb70 	bl	80043aa <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002cca:	2201      	movs	r2, #1
 8002ccc:	2120      	movs	r1, #32
 8002cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cd2:	f001 fb6a 	bl	80043aa <HAL_GPIO_WritePin>
      break;
 8002cd6:	e7e3      	b.n	8002ca0 <BSP_RADIO_ConfigRFSwitch+0x26>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2110      	movs	r1, #16
 8002cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ce0:	f001 fb63 	bl	80043aa <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	2120      	movs	r1, #32
 8002ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cec:	f001 fb5d 	bl	80043aa <HAL_GPIO_WritePin>
      break;
 8002cf0:	e7d6      	b.n	8002ca0 <BSP_RADIO_ConfigRFSwitch+0x26>

08002cf2 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_HP;
}
 8002cf2:	2002      	movs	r0, #2
 8002cf4:	4770      	bx	lr

08002cf6 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8002cf6:	2001      	movs	r0, #1
 8002cf8:	4770      	bx	lr

08002cfa <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	4770      	bx	lr

08002cfe <BSP_RADIO_GetRFOMaxPowerConfig>:
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002cfe:	2800      	cmp	r0, #0
  }

  return ret;
}
 8002d00:	bf0c      	ite	eq
 8002d02:	200f      	moveq	r0, #15
 8002d04:	2016      	movne	r0, #22
 8002d06:	4770      	bx	lr

08002d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d08:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d0a:	2003      	movs	r0, #3
 8002d0c:	f000 fd68 	bl	80037e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002d10:	f002 fd23 	bl	800575a <HAL_RCC_GetHCLKFreq>
 8002d14:	f240 0300 	movw	r3, #0
 8002d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d1c:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d1e:	200f      	movs	r0, #15
 8002d20:	f7ff faa0 	bl	8002264 <HAL_InitTick>
 8002d24:	b110      	cbz	r0, 8002d2c <HAL_Init+0x24>
  {
    status = HAL_ERROR;
 8002d26:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002d28:	4620      	mov	r0, r4
 8002d2a:	bd10      	pop	{r4, pc}
 8002d2c:	4604      	mov	r4, r0
    HAL_MspInit();
 8002d2e:	f7ff f917 	bl	8001f60 <HAL_MspInit>
 8002d32:	e7f9      	b.n	8002d28 <HAL_Init+0x20>

08002d34 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002d34:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002d38:	6913      	ldr	r3, [r2, #16]
 8002d3a:	f023 0302 	bic.w	r3, r3, #2
 8002d3e:	6113      	str	r3, [r2, #16]
}
 8002d40:	4770      	bx	lr

08002d42 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002d42:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002d46:	6913      	ldr	r3, [r2, #16]
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	6113      	str	r3, [r2, #16]
}
 8002d4e:	4770      	bx	lr

08002d50 <HAL_GetUIDw0>:
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002d50:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002d54:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
}
 8002d58:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8002d5c:	4770      	bx	lr

08002d5e <HAL_GetUIDw1>:
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002d5e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002d62:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
}
 8002d66:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8002d6a:	4770      	bx	lr

08002d6c <HAL_GetUIDw2>:
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002d6c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002d70:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
}
 8002d74:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8002d78:	4770      	bx	lr

08002d7a <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d7e:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	f042 0201 	orr.w	r2, r2, #1
 8002d88:	605a      	str	r2, [r3, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8002d8a:	4770      	bx	lr

08002d8c <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d90:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	f042 0202 	orr.w	r2, r2, #2
 8002d9a:	605a      	str	r2, [r3, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8002d9c:	4770      	bx	lr

08002d9e <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002da2:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	f042 0204 	orr.w	r2, r2, #4
 8002dac:	605a      	str	r2, [r3, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8002dae:	4770      	bx	lr

08002db0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002db0:	b570      	push	{r4, r5, r6, lr}
 8002db2:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002db8:	2800      	cmp	r0, #0
 8002dba:	f000 8112 	beq.w	8002fe2 <HAL_ADC_Init+0x232>
 8002dbe:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dc0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80cb 	beq.w	8002f5e <HAL_ADC_Init+0x1ae>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dc8:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dca:	6893      	ldr	r3, [r2, #8]
 8002dcc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002dd0:	d11f      	bne.n	8002e12 <HAL_ADC_Init+0x62>
  MODIFY_REG(ADCx->CR,
 8002dd2:	6893      	ldr	r3, [r2, #8]
 8002dd4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002dd8:	f023 0317 	bic.w	r3, r3, #23
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de0:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002de2:	f240 0300 	movw	r3, #0
 8002de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	f642 5263 	movw	r2, #11619	; 0x2d63
 8002df2:	f2c0 523e 	movt	r2, #1342	; 0x53e
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	099b      	lsrs	r3, r3, #6
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002e02:	9b01      	ldr	r3, [sp, #4]
 8002e04:	b12b      	cbz	r3, 8002e12 <HAL_ADC_Init+0x62>
    {
      wait_loop_index--;
 8002e06:	9b01      	ldr	r3, [sp, #4]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002e0c:	9b01      	ldr	r3, [sp, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f9      	bne.n	8002e06 <HAL_ADC_Init+0x56>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e12:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e14:	688b      	ldr	r3, [r1, #8]
 8002e16:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002e1a:	f040 80a7 	bne.w	8002f6c <HAL_ADC_Init+0x1bc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e20:	f043 0310 	orr.w	r3, r3, #16
 8002e24:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e26:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e2e:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e30:	688a      	ldr	r2, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	f002 0204 	and.w	r2, r2, #4
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f040 80c9 	bne.w	8002fd4 <HAL_ADC_Init+0x224>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e48:	f043 0302 	orr.w	r3, r3, #2
 8002e4c:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e4e:	688b      	ldr	r3, [r1, #8]
 8002e50:	f013 0f01 	tst.w	r3, #1
 8002e54:	d159      	bne.n	8002f0a <HAL_ADC_Init+0x15a>
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e56:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e5a:	3b00      	subs	r3, #0
 8002e5c:	bf18      	it	ne
 8002e5e:	2301      	movne	r3, #1
 8002e60:	ea4f 3e03 	mov.w	lr, r3, lsl #12
 8002e64:	68a3      	ldr	r3, [r4, #8]
 8002e66:	68e2      	ldr	r2, [r4, #12]
 8002e68:	4313      	orrs	r3, r2
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e6a:	7e22      	ldrb	r2, [r4, #24]
 8002e6c:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e70:	7e62      	ldrb	r2, [r4, #25]
 8002e72:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
 8002e76:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e7a:	6922      	ldr	r2, [r4, #16]
 8002e7c:	2a00      	cmp	r2, #0
 8002e7e:	bfb4      	ite	lt
 8002e80:	f022 4200 	biclt.w	r2, r2, #2147483648	; 0x80000000
 8002e84:	f44f 1200 	movge.w	r2, #2097152	; 0x200000
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e88:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e8c:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8002e90:	ea43 030e 	orr.w	r3, r3, lr
 8002e94:	4313      	orrs	r3, r2

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e96:	f894 2020 	ldrb.w	r2, [r4, #32]
 8002e9a:	2a01      	cmp	r2, #1
 8002e9c:	d068      	beq.n	8002f70 <HAL_ADC_Init+0x1c0>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ea0:	b122      	cbz	r2, 8002eac <HAL_ADC_Init+0xfc>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ea2:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
 8002ea6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002ea8:	432a      	orrs	r2, r5
 8002eaa:	4313      	orrs	r3, r2
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002eac:	68ca      	ldr	r2, [r1, #12]
 8002eae:	f422 32fe 	bic.w	r2, r2, #130048	; 0x1fc00
 8002eb2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	60ca      	str	r2, [r1, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002eba:	6863      	ldr	r3, [r4, #4]
 8002ebc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002ec0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002ec2:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ec4:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8002ec8:	2901      	cmp	r1, #1
 8002eca:	d05e      	beq.n	8002f8a <HAL_ADC_Init+0x1da>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002ecc:	6821      	ldr	r1, [r4, #0]
 8002ece:	690d      	ldr	r5, [r1, #16]
 8002ed0:	f64f 4302 	movw	r3, #64514	; 0xfc02
 8002ed4:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8002ed8:	402b      	ands	r3, r5
 8002eda:	4313      	orrs	r3, r2
 8002edc:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002ede:	6863      	ldr	r3, [r4, #4]
 8002ee0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ee4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002ee8:	d00f      	beq.n	8002f0a <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eee:	d00c      	beq.n	8002f0a <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002ef0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ef4:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8002ef8:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8002efc:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8002f00:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002f0a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8002f0c:	6953      	ldr	r3, [r2, #20]
 8002f0e:	f023 0307 	bic.w	r3, r3, #7
 8002f12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f14:	430b      	orrs	r3, r1
 8002f16:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002f18:	6822      	ldr	r2, [r4, #0]
 8002f1a:	6953      	ldr	r3, [r2, #20]
 8002f1c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f22:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002f26:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002f28:	6923      	ldr	r3, [r4, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d137      	bne.n	8002f9e <HAL_ADC_Init+0x1ee>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002f2e:	6822      	ldr	r2, [r4, #0]
 8002f30:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002f32:	f063 030f 	orn	r3, r3, #15
 8002f36:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002f38:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d03d      	beq.n	8002fc2 <HAL_ADC_Init+0x212>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f48:	f023 0312 	bic.w	r3, r3, #18
 8002f4c:	f043 0310 	orr.w	r3, r3, #16
 8002f50:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f52:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	e03f      	b.n	8002fde <HAL_ADC_Init+0x22e>
    HAL_ADC_MspInit(hadc);
 8002f5e:	f7fe f8e3 	bl	8001128 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002f62:	2300      	movs	r3, #0
 8002f64:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002f66:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8002f6a:	e72d      	b.n	8002dc8 <HAL_ADC_Init+0x18>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	e75f      	b.n	8002e30 <HAL_ADC_Init+0x80>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f70:	b916      	cbnz	r6, 8002f78 <HAL_ADC_Init+0x1c8>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f76:	e792      	b.n	8002e9e <HAL_ADC_Init+0xee>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f78:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002f7a:	f042 0220 	orr.w	r2, r2, #32
 8002f7e:	65a2      	str	r2, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f80:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	65e2      	str	r2, [r4, #92]	; 0x5c
 8002f88:	e789      	b.n	8002e9e <HAL_ADC_Init+0xee>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002f8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002f8c:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002f8e:	4329      	orrs	r1, r5
 8002f90:	430a      	orrs	r2, r1
 8002f92:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002f94:	430a      	orrs	r2, r1
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f043 0201 	orr.w	r2, r3, #1
 8002f9c:	e796      	b.n	8002ecc <HAL_ADC_Init+0x11c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fa2:	d1c9      	bne.n	8002f38 <HAL_ADC_Init+0x188>
      MODIFY_REG(hadc->Instance->CHSELR,
 8002fa4:	6821      	ldr	r1, [r4, #0]
 8002fa6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002fa8:	69e3      	ldr	r3, [r4, #28]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	f003 031c 	and.w	r3, r3, #28
 8002fb2:	f06f 020f 	mvn.w	r2, #15
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	628b      	str	r3, [r1, #40]	; 0x28
 8002fc0:	e7ba      	b.n	8002f38 <HAL_ADC_Init+0x188>
      ADC_CLEAR_ERRORCODE(hadc);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002fc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fc8:	f023 0303 	bic.w	r3, r3, #3
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	65a3      	str	r3, [r4, #88]	; 0x58
 8002fd2:	e004      	b.n	8002fde <HAL_ADC_Init+0x22e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fd6:	f043 0310 	orr.w	r3, r3, #16
 8002fda:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002fdc:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002fde:	b002      	add	sp, #8
 8002fe0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	e7fb      	b.n	8002fde <HAL_ADC_Init+0x22e>

08002fe6 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe8:	4606      	mov	r6, r0
 8002fea:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002fec:	6945      	ldr	r5, [r0, #20]
 8002fee:	2d08      	cmp	r5, #8
 8002ff0:	d005      	beq.n	8002ffe <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002ff2:	6803      	ldr	r3, [r0, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f013 0f01 	tst.w	r3, #1
 8002ffa:	d11e      	bne.n	800303a <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002ffc:	2504      	movs	r5, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002ffe:	f7ff f933 	bl	8002268 <HAL_GetTick>
 8003002:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003004:	6832      	ldr	r2, [r6, #0]
 8003006:	6813      	ldr	r3, [r2, #0]
 8003008:	422b      	tst	r3, r5
 800300a:	d11c      	bne.n	8003046 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800300c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003010:	d0f9      	beq.n	8003006 <HAL_ADC_PollForConversion+0x20>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003012:	f7ff f929 	bl	8002268 <HAL_GetTick>
 8003016:	1bc3      	subs	r3, r0, r7
 8003018:	42a3      	cmp	r3, r4
 800301a:	d801      	bhi.n	8003020 <HAL_ADC_PollForConversion+0x3a>
 800301c:	2c00      	cmp	r4, #0
 800301e:	d1f1      	bne.n	8003004 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003020:	6833      	ldr	r3, [r6, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	422b      	tst	r3, r5
 8003026:	d1ed      	bne.n	8003004 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003028:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800302a:	f043 0304 	orr.w	r3, r3, #4
 800302e:	65b3      	str	r3, [r6, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003030:	2300      	movs	r3, #0
 8003032:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54

          return HAL_TIMEOUT;
 8003036:	2003      	movs	r0, #3
 8003038:	e028      	b.n	800308c <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800303a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800303c:	f043 0320 	orr.w	r3, r3, #32
 8003040:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8003042:	2001      	movs	r0, #1
 8003044:	e022      	b.n	800308c <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003046:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8003048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800304c:	65b3      	str	r3, [r6, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800304e:	68d3      	ldr	r3, [r2, #12]
 8003050:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8003054:	d115      	bne.n	8003082 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003056:	7eb3      	ldrb	r3, [r6, #26]
 8003058:	b99b      	cbnz	r3, 8003082 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800305a:	6813      	ldr	r3, [r2, #0]
 800305c:	f013 0f08 	tst.w	r3, #8
 8003060:	d00f      	beq.n	8003082 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003062:	6893      	ldr	r3, [r2, #8]
 8003064:	f013 0f04 	tst.w	r3, #4
 8003068:	d111      	bne.n	800308e <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800306a:	6853      	ldr	r3, [r2, #4]
 800306c:	f023 030c 	bic.w	r3, r3, #12
 8003070:	6053      	str	r3, [r2, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003072:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8003074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	65b3      	str	r3, [r6, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003082:	7e30      	ldrb	r0, [r6, #24]
 8003084:	b960      	cbnz	r0, 80030a0 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003086:	6833      	ldr	r3, [r6, #0]
 8003088:	220c      	movs	r2, #12
 800308a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800308c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800308e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8003090:	f043 0320 	orr.w	r3, r3, #32
 8003094:	65b3      	str	r3, [r6, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003096:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	65f3      	str	r3, [r6, #92]	; 0x5c
 800309e:	e7f0      	b.n	8003082 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 80030a0:	2000      	movs	r0, #0
 80030a2:	e7f3      	b.n	800308c <HAL_ADC_PollForConversion+0xa6>

080030a4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80030a4:	6803      	ldr	r3, [r0, #0]
 80030a6:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80030a8:	4770      	bx	lr

080030aa <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80030aa:	b470      	push	{r4, r5, r6}
 80030ac:	b083      	sub	sp, #12
 80030ae:	4603      	mov	r3, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030b0:	2200      	movs	r2, #0
 80030b2:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80030b4:	6900      	ldr	r0, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80030b6:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80030ba:	2a01      	cmp	r2, #1
 80030bc:	f000 8131 	beq.w	8003322 <HAL_ADC_ConfigChannel+0x278>
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	6894      	ldr	r4, [r2, #8]
 80030ca:	f014 0f04 	tst.w	r4, #4
 80030ce:	d00a      	beq.n	80030e6 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030d2:	f042 0220 	orr.w	r2, r2, #32
 80030d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80030d8:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 80030e0:	b003      	add	sp, #12
 80030e2:	bc70      	pop	{r4, r5, r6}
 80030e4:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 80030e6:	684c      	ldr	r4, [r1, #4]
 80030e8:	2c02      	cmp	r4, #2
 80030ea:	f000 80b7 	beq.w	800325c <HAL_ADC_ConfigChannel+0x1b2>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80030ee:	f020 0004 	bic.w	r0, r0, #4
 80030f2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80030f6:	d025      	beq.n	8003144 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80030f8:	f004 041f 	and.w	r4, r4, #31
 80030fc:	250f      	movs	r5, #15
 80030fe:	40a5      	lsls	r5, r4
 8003100:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8003102:	ea20 0505 	bic.w	r5, r0, r5
 8003106:	6808      	ldr	r0, [r1, #0]
 8003108:	f3c0 0611 	ubfx	r6, r0, #0, #18
 800310c:	2e00      	cmp	r6, #0
 800310e:	d132      	bne.n	8003176 <HAL_ADC_ConfigChannel+0xcc>
 8003110:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8003114:	40a0      	lsls	r0, r4
 8003116:	4328      	orrs	r0, r5
 8003118:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800311a:	684c      	ldr	r4, [r1, #4]
 800311c:	08a0      	lsrs	r0, r4, #2
 800311e:	3001      	adds	r0, #1
 8003120:	69dd      	ldr	r5, [r3, #28]
 8003122:	42a8      	cmp	r0, r5
 8003124:	d814      	bhi.n	8003150 <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCx->CHSELR,
 8003126:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8003128:	f004 041f 	and.w	r4, r4, #31
 800312c:	6808      	ldr	r0, [r1, #0]
 800312e:	f3c0 6083 	ubfx	r0, r0, #26, #4
 8003132:	40a0      	lsls	r0, r4
 8003134:	260f      	movs	r6, #15
 8003136:	fa06 f404 	lsl.w	r4, r6, r4
 800313a:	ea25 0404 	bic.w	r4, r5, r4
 800313e:	4320      	orrs	r0, r4
 8003140:	6290      	str	r0, [r2, #40]	; 0x28
}
 8003142:	e005      	b.n	8003150 <HAL_ADC_ConfigChannel+0xa6>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003144:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8003146:	6808      	ldr	r0, [r1, #0]
 8003148:	f3c0 0011 	ubfx	r0, r0, #0, #18
 800314c:	4320      	orrs	r0, r4
 800314e:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003150:	681c      	ldr	r4, [r3, #0]
  MODIFY_REG(ADCx->SMPR,
 8003152:	6960      	ldr	r0, [r4, #20]
 8003154:	680d      	ldr	r5, [r1, #0]
 8003156:	688a      	ldr	r2, [r1, #8]
 8003158:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 800315c:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8003160:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003164:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8003168:	4302      	orrs	r2, r0
 800316a:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800316c:	680a      	ldr	r2, [r1, #0]
 800316e:	2a00      	cmp	r2, #0
 8003170:	db06      	blt.n	8003180 <HAL_ADC_ConfigChannel+0xd6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003172:	2000      	movs	r0, #0
 8003174:	e7b1      	b.n	80030da <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	fa90 f0a0 	rbit	r0, r0
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 800317a:	fab0 f080 	clz	r0, r0
 800317e:	e7c9      	b.n	8003114 <HAL_ADC_ConfigChannel+0x6a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003184:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8003188:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 800318c:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003190:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003194:	f2cb 0100 	movt	r1, #45056	; 0xb000
 8003198:	428a      	cmp	r2, r1
 800319a:	d01f      	beq.n	80031dc <HAL_ADC_ConfigChannel+0x132>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800319c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031a0:	f6cb 0100 	movt	r1, #47104	; 0xb800
 80031a4:	428a      	cmp	r2, r1
 80031a6:	d047      	beq.n	8003238 <HAL_ADC_ConfigChannel+0x18e>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80031a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031ac:	f2cb 4100 	movt	r1, #46080	; 0xb400
 80031b0:	428a      	cmp	r2, r1
 80031b2:	f040 80b2 	bne.w	800331a <HAL_ADC_ConfigChannel+0x270>
 80031b6:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80031ba:	f040 80b0 	bne.w	800331e <HAL_ADC_ConfigChannel+0x274>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031c2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80031c6:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 80031ca:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80031ce:	4322      	orrs	r2, r4
 80031d0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80031d4:	f8c1 2708 	str.w	r2, [r1, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d8:	2000      	movs	r0, #0
}
 80031da:	e77e      	b.n	80030da <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031dc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80031e0:	f040 8095 	bne.w	800330e <HAL_ADC_ConfigChannel+0x264>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031e8:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80031ec:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 80031f0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80031f4:	4322      	orrs	r2, r4
 80031f6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80031fa:	f8c1 2708 	str.w	r2, [r1, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031fe:	f240 0200 	movw	r2, #0
 8003202:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	0992      	lsrs	r2, r2, #6
 800320a:	f642 5163 	movw	r1, #11619	; 0x2d63
 800320e:	f2c0 513e 	movt	r1, #1342	; 0x53e
 8003212:	fba1 1202 	umull	r1, r2, r1, r2
 8003216:	0992      	lsrs	r2, r2, #6
 8003218:	3201      	adds	r2, #1
 800321a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800321e:	0092      	lsls	r2, r2, #2
 8003220:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003222:	9a01      	ldr	r2, [sp, #4]
 8003224:	2a00      	cmp	r2, #0
 8003226:	d074      	beq.n	8003312 <HAL_ADC_ConfigChannel+0x268>
            wait_loop_index--;
 8003228:	9a01      	ldr	r2, [sp, #4]
 800322a:	3a01      	subs	r2, #1
 800322c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800322e:	9a01      	ldr	r2, [sp, #4]
 8003230:	2a00      	cmp	r2, #0
 8003232:	d1f9      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003234:	2000      	movs	r0, #0
 8003236:	e750      	b.n	80030da <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003238:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 800323c:	d16b      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x26c>
 800323e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003242:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8003246:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 800324a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800324e:	4322      	orrs	r2, r4
 8003250:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003254:	f8c1 2708 	str.w	r2, [r1, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003258:	2000      	movs	r0, #0
}
 800325a:	e73e      	b.n	80030da <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800325c:	f020 0004 	bic.w	r0, r0, #4
 8003260:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8003264:	d004      	beq.n	8003270 <HAL_ADC_ConfigChannel+0x1c6>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003266:	680a      	ldr	r2, [r1, #0]
 8003268:	2a00      	cmp	r2, #0
 800326a:	db09      	blt.n	8003280 <HAL_ADC_ConfigChannel+0x1d6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800326c:	2000      	movs	r0, #0
 800326e:	e734      	b.n	80030da <HAL_ADC_ConfigChannel+0x30>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003270:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003272:	680c      	ldr	r4, [r1, #0]
 8003274:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003278:	ea20 0004 	bic.w	r0, r0, r4
 800327c:	6290      	str	r0, [r2, #40]	; 0x28
}
 800327e:	e7f2      	b.n	8003266 <HAL_ADC_ConfigChannel+0x1bc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003284:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8003288:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800328c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003290:	f2cb 0000 	movt	r0, #45056	; 0xb000
 8003294:	4282      	cmp	r2, r0
 8003296:	d00d      	beq.n	80032b4 <HAL_ADC_ConfigChannel+0x20a>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003298:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800329c:	f6cb 0000 	movt	r0, #47104	; 0xb800
 80032a0:	4282      	cmp	r2, r0
 80032a2:	d016      	beq.n	80032d2 <HAL_ADC_ConfigChannel+0x228>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80032a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80032a8:	f2cb 4000 	movt	r0, #46080	; 0xb400
 80032ac:	4282      	cmp	r2, r0
 80032ae:	d01f      	beq.n	80032f0 <HAL_ADC_ConfigChannel+0x246>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b0:	2000      	movs	r0, #0
 80032b2:	e712      	b.n	80030da <HAL_ADC_ConfigChannel+0x30>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80032b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032b8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80032bc:	f8d2 0708 	ldr.w	r0, [r2, #1800]	; 0x708
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032c0:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
 80032c4:	f020 70e0 	bic.w	r0, r0, #29360128	; 0x1c00000
 80032c8:	4301      	orrs	r1, r0
 80032ca:	f8c2 1708 	str.w	r1, [r2, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ce:	2000      	movs	r0, #0
}
 80032d0:	e703      	b.n	80030da <HAL_ADC_ConfigChannel+0x30>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80032d2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80032d6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80032da:	f8d0 4708 	ldr.w	r4, [r0, #1800]	; 0x708
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032de:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
 80032e2:	f024 71e0 	bic.w	r1, r4, #29360128	; 0x1c00000
 80032e6:	430a      	orrs	r2, r1
 80032e8:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ec:	2000      	movs	r0, #0
}
 80032ee:	e6f4      	b.n	80030da <HAL_ADC_ConfigChannel+0x30>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80032f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80032f4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80032f8:	f8d0 4708 	ldr.w	r4, [r0, #1800]	; 0x708
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032fc:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
 8003300:	f024 71e0 	bic.w	r1, r4, #29360128	; 0x1c00000
 8003304:	430a      	orrs	r2, r1
 8003306:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800330a:	2000      	movs	r0, #0
}
 800330c:	e6e5      	b.n	80030da <HAL_ADC_ConfigChannel+0x30>
 800330e:	2000      	movs	r0, #0
 8003310:	e6e3      	b.n	80030da <HAL_ADC_ConfigChannel+0x30>
 8003312:	2000      	movs	r0, #0
 8003314:	e6e1      	b.n	80030da <HAL_ADC_ConfigChannel+0x30>
 8003316:	2000      	movs	r0, #0
 8003318:	e6df      	b.n	80030da <HAL_ADC_ConfigChannel+0x30>
 800331a:	2000      	movs	r0, #0
 800331c:	e6dd      	b.n	80030da <HAL_ADC_ConfigChannel+0x30>
 800331e:	2000      	movs	r0, #0
 8003320:	e6db      	b.n	80030da <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8003322:	2002      	movs	r0, #2
 8003324:	e6dc      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x36>

08003326 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003326:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003328:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	f012 0f04 	tst.w	r2, #4
 8003330:	d031      	beq.n	8003396 <ADC_ConversionStop+0x70>
 8003332:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	f012 0f02 	tst.w	r2, #2
 800333a:	d107      	bne.n	800334c <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003342:	f022 0217 	bic.w	r2, r2, #23
 8003346:	f042 0210 	orr.w	r2, r2, #16
 800334a:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800334c:	f7fe ff8c 	bl	8002268 <HAL_GetTick>
 8003350:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f013 0f04 	tst.w	r3, #4
 800335a:	d106      	bne.n	800336a <ADC_ConversionStop+0x44>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800335c:	2000      	movs	r0, #0
 800335e:	e01b      	b.n	8003398 <ADC_ConversionStop+0x72>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f013 0f04 	tst.w	r3, #4
 8003368:	d013      	beq.n	8003392 <ADC_ConversionStop+0x6c>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800336a:	f7fe ff7d 	bl	8002268 <HAL_GetTick>
 800336e:	1b43      	subs	r3, r0, r5
 8003370:	2b02      	cmp	r3, #2
 8003372:	d9f5      	bls.n	8003360 <ADC_ConversionStop+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f013 0f04 	tst.w	r3, #4
 800337c:	d0f0      	beq.n	8003360 <ADC_ConversionStop+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800337e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003380:	f043 0310 	orr.w	r3, r3, #16
 8003384:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003386:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 800338e:	2001      	movs	r0, #1
 8003390:	e002      	b.n	8003398 <ADC_ConversionStop+0x72>
  return HAL_OK;
 8003392:	2000      	movs	r0, #0
 8003394:	e000      	b.n	8003398 <ADC_ConversionStop+0x72>
 8003396:	2000      	movs	r0, #0
}
 8003398:	bd38      	pop	{r3, r4, r5, pc}

0800339a <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800339a:	b530      	push	{r4, r5, lr}
 800339c:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800339e:	2300      	movs	r3, #0
 80033a0:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033a2:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	f012 0f01 	tst.w	r2, #1
 80033aa:	d16e      	bne.n	800348a <ADC_Enable+0xf0>
 80033ac:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80033ae:	6899      	ldr	r1, [r3, #8]
 80033b0:	2217      	movs	r2, #23
 80033b2:	f2c8 0200 	movt	r2, #32768	; 0x8000
 80033b6:	4211      	tst	r1, r2
 80033b8:	d12c      	bne.n	8003414 <ADC_Enable+0x7a>
  MODIFY_REG(ADCx->CR,
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033c0:	f022 0217 	bic.w	r2, r2, #23
 80033c4:	f042 0201 	orr.w	r2, r2, #1
 80033c8:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80033ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80033d2:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80033d6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80033da:	d016      	beq.n	800340a <ADC_Enable+0x70>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033dc:	f240 0300 	movw	r3, #0
 80033e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	099b      	lsrs	r3, r3, #6
 80033e8:	f642 5263 	movw	r2, #11619	; 0x2d63
 80033ec:	f2c0 523e 	movt	r2, #1342	; 0x53e
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	099b      	lsrs	r3, r3, #6
 80033f6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80033f8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80033fa:	9b01      	ldr	r3, [sp, #4]
 80033fc:	b12b      	cbz	r3, 800340a <ADC_Enable+0x70>
      {
        wait_loop_index--;
 80033fe:	9b01      	ldr	r3, [sp, #4]
 8003400:	3b01      	subs	r3, #1
 8003402:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003404:	9b01      	ldr	r3, [sp, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f9      	bne.n	80033fe <ADC_Enable+0x64>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800340a:	7e63      	ldrb	r3, [r4, #25]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d10b      	bne.n	8003428 <ADC_Enable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003410:	2000      	movs	r0, #0
 8003412:	e03b      	b.n	800348c <ADC_Enable+0xf2>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003414:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003416:	f043 0310 	orr.w	r3, r3, #16
 800341a:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800341c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8003424:	2001      	movs	r0, #1
 8003426:	e031      	b.n	800348c <ADC_Enable+0xf2>
      tickstart = HAL_GetTick();
 8003428:	f7fe ff1e 	bl	8002268 <HAL_GetTick>
 800342c:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	f012 0f01 	tst.w	r2, #1
 8003436:	d006      	beq.n	8003446 <ADC_Enable+0xac>
  return HAL_OK;
 8003438:	2000      	movs	r0, #0
 800343a:	e027      	b.n	800348c <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	f012 0f01 	tst.w	r2, #1
 8003444:	d11f      	bne.n	8003486 <ADC_Enable+0xec>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	f012 0f01 	tst.w	r2, #1
 800344c:	d107      	bne.n	800345e <ADC_Enable+0xc4>
  MODIFY_REG(ADCx->CR,
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003454:	f022 0217 	bic.w	r2, r2, #23
 8003458:	f042 0201 	orr.w	r2, r2, #1
 800345c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800345e:	f7fe ff03 	bl	8002268 <HAL_GetTick>
 8003462:	1b40      	subs	r0, r0, r5
 8003464:	2802      	cmp	r0, #2
 8003466:	d9e9      	bls.n	800343c <ADC_Enable+0xa2>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f013 0f01 	tst.w	r3, #1
 8003470:	d1e4      	bne.n	800343c <ADC_Enable+0xa2>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003472:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003474:	f043 0310 	orr.w	r3, r3, #16
 8003478:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8003482:	2001      	movs	r0, #1
 8003484:	e002      	b.n	800348c <ADC_Enable+0xf2>
  return HAL_OK;
 8003486:	2000      	movs	r0, #0
 8003488:	e000      	b.n	800348c <ADC_Enable+0xf2>
 800348a:	2000      	movs	r0, #0
}
 800348c:	b003      	add	sp, #12
 800348e:	bd30      	pop	{r4, r5, pc}

08003490 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003490:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f013 0f04 	tst.w	r3, #4
 8003498:	d128      	bne.n	80034ec <HAL_ADC_Start+0x5c>
{
 800349a:	b510      	push	{r4, lr}
 800349c:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800349e:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d024      	beq.n	80034f0 <HAL_ADC_Start+0x60>
 80034a6:	2301      	movs	r3, #1
 80034a8:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 80034ac:	f7ff ff75 	bl	800339a <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80034b0:	b9c0      	cbnz	r0, 80034e4 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 80034b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034b8:	f023 0301 	bic.w	r3, r3, #1
 80034bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c0:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 80034c2:	2300      	movs	r3, #0
 80034c4:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034c6:	6822      	ldr	r2, [r4, #0]
 80034c8:	211c      	movs	r1, #28
 80034ca:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 80034cc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 80034d0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80034d2:	6893      	ldr	r3, [r2, #8]
 80034d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034d8:	f023 0317 	bic.w	r3, r3, #23
 80034dc:	f043 0304 	orr.w	r3, r3, #4
 80034e0:	6093      	str	r3, [r2, #8]
}
 80034e2:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 80034e4:	2300      	movs	r3, #0
 80034e6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80034ea:	e7fa      	b.n	80034e2 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 80034ec:	2002      	movs	r0, #2
}
 80034ee:	4770      	bx	lr
    __HAL_LOCK(hadc);
 80034f0:	2002      	movs	r0, #2
 80034f2:	e7f6      	b.n	80034e2 <HAL_ADC_Start+0x52>

080034f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80034f4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80034f6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80034f8:	6899      	ldr	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	f012 0f01 	tst.w	r2, #1
 8003500:	d043      	beq.n	800358a <ADC_Disable+0x96>
 8003502:	4604      	mov	r4, r0

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8003504:	f011 0f02 	tst.w	r1, #2
 8003508:	d141      	bne.n	800358e <ADC_Disable+0x9a>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	f002 0205 	and.w	r2, r2, #5
 8003510:	2a01      	cmp	r2, #1
 8003512:	d009      	beq.n	8003528 <ADC_Disable+0x34>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003514:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003516:	f043 0310 	orr.w	r3, r3, #16
 800351a:	6583      	str	r3, [r0, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800351c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	65c3      	str	r3, [r0, #92]	; 0x5c

      return HAL_ERROR;
 8003524:	2001      	movs	r0, #1
 8003526:	e031      	b.n	800358c <ADC_Disable+0x98>
  MODIFY_REG(ADCx->CR,
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800352e:	f022 0217 	bic.w	r2, r2, #23
 8003532:	f042 0202 	orr.w	r2, r2, #2
 8003536:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003538:	6803      	ldr	r3, [r0, #0]
 800353a:	2203      	movs	r2, #3
 800353c:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800353e:	f7fe fe93 	bl	8002268 <HAL_GetTick>
 8003542:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003544:	6823      	ldr	r3, [r4, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f013 0f01 	tst.w	r3, #1
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800354c:	bf08      	it	eq
 800354e:	2000      	moveq	r0, #0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003550:	d105      	bne.n	800355e <ADC_Disable+0x6a>
 8003552:	e01b      	b.n	800358c <ADC_Disable+0x98>
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f013 0f01 	tst.w	r3, #1
 800355c:	d013      	beq.n	8003586 <ADC_Disable+0x92>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800355e:	f7fe fe83 	bl	8002268 <HAL_GetTick>
 8003562:	1b40      	subs	r0, r0, r5
 8003564:	2802      	cmp	r0, #2
 8003566:	d9f5      	bls.n	8003554 <ADC_Disable+0x60>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f013 0f01 	tst.w	r3, #1
 8003570:	d0f0      	beq.n	8003554 <ADC_Disable+0x60>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003572:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003574:	f043 0310 	orr.w	r3, r3, #16
 8003578:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800357a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8003582:	2001      	movs	r0, #1
 8003584:	e002      	b.n	800358c <ADC_Disable+0x98>
  return HAL_OK;
 8003586:	2000      	movs	r0, #0
 8003588:	e000      	b.n	800358c <ADC_Disable+0x98>
 800358a:	2000      	movs	r0, #0
}
 800358c:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800358e:	2000      	movs	r0, #0
 8003590:	e7fc      	b.n	800358c <ADC_Disable+0x98>

08003592 <HAL_ADC_DeInit>:
{
 8003592:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8003594:	2800      	cmp	r0, #0
 8003596:	d05c      	beq.n	8003652 <HAL_ADC_DeInit+0xc0>
 8003598:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800359a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800359c:	f043 0302 	orr.w	r3, r3, #2
 80035a0:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 80035a2:	f7ff fec0 	bl	8003326 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80035a6:	4606      	mov	r6, r0
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d043      	beq.n	8003634 <HAL_ADC_DeInit+0xa2>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80035ac:	6822      	ldr	r2, [r4, #0]
 80035ae:	6853      	ldr	r3, [r2, #4]
 80035b0:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80035b4:	f023 0303 	bic.w	r3, r3, #3
 80035b8:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	f240 329f 	movw	r2, #927	; 0x39f
 80035c0:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80035c2:	6822      	ldr	r2, [r4, #0]
 80035c4:	68d1      	ldr	r1, [r2, #12]
 80035c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035ca:	f2c8 333e 	movt	r3, #33598	; 0x833e
 80035ce:	400b      	ands	r3, r1
 80035d0:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80035d2:	6822      	ldr	r2, [r4, #0]
 80035d4:	6913      	ldr	r3, [r2, #16]
 80035d6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80035da:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80035dc:	6822      	ldr	r2, [r4, #0]
 80035de:	6953      	ldr	r3, [r2, #20]
 80035e0:	f023 0307 	bic.w	r3, r3, #7
 80035e4:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80035e6:	6822      	ldr	r2, [r4, #0]
 80035e8:	6a13      	ldr	r3, [r2, #32]
 80035ea:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80035ee:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80035f0:	6822      	ldr	r2, [r4, #0]
 80035f2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80035f4:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80035f8:	6253      	str	r3, [r2, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80035fa:	6822      	ldr	r2, [r4, #0]
 80035fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80035fe:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003602:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003608:	2500      	movs	r5, #0
 800360a:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800360c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003610:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003614:	f8d3 2708 	ldr.w	r2, [r3, #1800]	; 0x708
 8003618:	f022 72fe 	bic.w	r2, r2, #33292288	; 0x1fc0000
 800361c:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 8003620:	4620      	mov	r0, r4
 8003622:	f7fd fd97 	bl	8001154 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003626:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8003628:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 800362a:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 800362c:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8003630:	4630      	mov	r0, r6
 8003632:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003634:	4620      	mov	r0, r4
 8003636:	f7ff ff5d 	bl	80034f4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800363a:	4606      	mov	r6, r0
 800363c:	b908      	cbnz	r0, 8003642 <HAL_ADC_DeInit+0xb0>
      hadc->State = HAL_ADC_STATE_READY;
 800363e:	2301      	movs	r3, #1
 8003640:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003642:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003644:	6893      	ldr	r3, [r2, #8]
 8003646:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800364a:	f023 0317 	bic.w	r3, r3, #23
 800364e:	6093      	str	r3, [r2, #8]
}
 8003650:	e7ac      	b.n	80035ac <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8003652:	2601      	movs	r6, #1
 8003654:	e7ec      	b.n	8003630 <HAL_ADC_DeInit+0x9e>

08003656 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003656:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800365a:	2b01      	cmp	r3, #1
 800365c:	d019      	beq.n	8003692 <HAL_ADC_Stop+0x3c>
{
 800365e:	b510      	push	{r4, lr}
 8003660:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003662:	2301      	movs	r3, #1
 8003664:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003668:	f7ff fe5d 	bl	8003326 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800366c:	b118      	cbz	r0, 8003676 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800366e:	2300      	movs	r3, #0
 8003670:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8003674:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003676:	4620      	mov	r0, r4
 8003678:	f7ff ff3c 	bl	80034f4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800367c:	2800      	cmp	r0, #0
 800367e:	d1f6      	bne.n	800366e <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8003680:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003690:	e7ed      	b.n	800366e <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8003692:	2002      	movs	r0, #2
}
 8003694:	4770      	bx	lr

08003696 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003696:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003698:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800369a:	2300      	movs	r3, #0
 800369c:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800369e:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	f000 809a 	beq.w	80037dc <HAL_ADCEx_Calibration_Start+0x146>
 80036a8:	4604      	mov	r4, r0
 80036aa:	2301      	movs	r3, #1
 80036ac:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80036b0:	f7ff ff20 	bl	80034f4 <ADC_Disable>
 80036b4:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036b6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	f012 0201 	ands.w	r2, r2, #1
 80036be:	d009      	beq.n	80036d4 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036c2:	f043 0310 	orr.w	r3, r3, #16
 80036c6:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80036c8:	2300      	movs	r3, #0
 80036ca:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 80036ce:	4628      	mov	r0, r5
 80036d0:	b003      	add	sp, #12
 80036d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80036d4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80036d6:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80036da:	f041 0102 	orr.w	r1, r1, #2
 80036de:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80036e0:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80036e2:	68d9      	ldr	r1, [r3, #12]
 80036e4:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80036e8:	f021 0103 	bic.w	r1, r1, #3
 80036ec:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 80036ee:	4610      	mov	r0, r2
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80036f0:	f24b 7cff 	movw	ip, #47103	; 0xb7ff
 80036f4:	f2c0 0c02 	movt	ip, #2
      LL_ADC_StartCalibration(hadc->Instance);
 80036f8:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80036fa:	688b      	ldr	r3, [r1, #8]
 80036fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003700:	f023 0317 	bic.w	r3, r3, #23
 8003704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003708:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800370a:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800370c:	688b      	ldr	r3, [r1, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	db39      	blt.n	8003786 <HAL_ADCEx_Calibration_Start+0xf0>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003712:	f8d1 30b4 	ldr.w	r3, [r1, #180]	; 0xb4
 8003716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800371a:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800371c:	3201      	adds	r2, #1
 800371e:	2a08      	cmp	r2, #8
 8003720:	d1ea      	bne.n	80036f8 <HAL_ADCEx_Calibration_Start+0x62>
  MODIFY_REG(ADCx->CR,
 8003722:	688b      	ldr	r3, [r1, #8]
 8003724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003728:	f023 0317 	bic.w	r3, r3, #23
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003732:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003734:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8003738:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800373c:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8003740:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8003744:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003746:	6893      	ldr	r3, [r2, #8]
 8003748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800374c:	f023 0317 	bic.w	r3, r3, #23
 8003750:	f043 0302 	orr.w	r3, r3, #2
 8003754:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003756:	f7fe fd87 	bl	8002268 <HAL_GetTick>
 800375a:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800375c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	f012 0f01 	tst.w	r2, #1
 8003764:	d12f      	bne.n	80037c6 <HAL_ADCEx_Calibration_Start+0x130>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003766:	68da      	ldr	r2, [r3, #12]
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003768:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 800376c:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 8003770:	0436      	lsls	r6, r6, #16
 8003772:	0c36      	lsrs	r6, r6, #16
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003774:	4316      	orrs	r6, r2
 8003776:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8003778:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800377a:	f023 0303 	bic.w	r3, r3, #3
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	65a3      	str	r3, [r4, #88]	; 0x58
 8003784:	e7a0      	b.n	80036c8 <HAL_ADCEx_Calibration_Start+0x32>
        wait_loop_index++;
 8003786:	9b01      	ldr	r3, [sp, #4]
 8003788:	3301      	adds	r3, #1
 800378a:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800378c:	9b01      	ldr	r3, [sp, #4]
 800378e:	4563      	cmp	r3, ip
 8003790:	d9bc      	bls.n	800370c <HAL_ADCEx_Calibration_Start+0x76>
          ADC_STATE_CLR_SET(hadc->State,
 8003792:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003794:	f023 0312 	bic.w	r3, r3, #18
 8003798:	f043 0310 	orr.w	r3, r3, #16
 800379c:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 800379e:	2300      	movs	r3, #0
 80037a0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 80037a4:	2501      	movs	r5, #1
 80037a6:	e792      	b.n	80036ce <HAL_ADCEx_Calibration_Start+0x38>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f013 0f01 	tst.w	r3, #1
 80037b0:	d00e      	beq.n	80037d0 <HAL_ADCEx_Calibration_Start+0x13a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80037b4:	f043 0310 	orr.w	r3, r3, #16
 80037b8:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 80037c2:	2501      	movs	r5, #1
 80037c4:	e783      	b.n	80036ce <HAL_ADCEx_Calibration_Start+0x38>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037c6:	f7fe fd4f 	bl	8002268 <HAL_GetTick>
 80037ca:	1bc3      	subs	r3, r0, r7
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d8eb      	bhi.n	80037a8 <HAL_ADCEx_Calibration_Start+0x112>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	f012 0f01 	tst.w	r2, #1
 80037d8:	d1f5      	bne.n	80037c6 <HAL_ADCEx_Calibration_Start+0x130>
 80037da:	e7c4      	b.n	8003766 <HAL_ADCEx_Calibration_Start+0xd0>
  __HAL_LOCK(hadc);
 80037dc:	2502      	movs	r5, #2
 80037de:	e776      	b.n	80036ce <HAL_ADCEx_Calibration_Start+0x38>

080037e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e0:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80037e4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80037e8:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037ea:	0203      	lsls	r3, r0, #8
 80037ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037f0:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80037f4:	0409      	lsls	r1, r1, #16
 80037f6:	0c09      	lsrs	r1, r1, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f8:	430b      	orrs	r3, r1
  reg_value  =  (reg_value                                   |
 80037fa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003802:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003804:	4770      	bx	lr

08003806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003806:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003808:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800380c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003816:	f1c3 0c07 	rsb	ip, r3, #7
 800381a:	f1bc 0f04 	cmp.w	ip, #4
 800381e:	bf28      	it	cs
 8003820:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003824:	f103 0e04 	add.w	lr, r3, #4
 8003828:	f1be 0f06 	cmp.w	lr, #6
 800382c:	bf8c      	ite	hi
 800382e:	3b03      	subhi	r3, #3
 8003830:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003832:	f04f 3eff 	mov.w	lr, #4294967295
 8003836:	fa0e fc0c 	lsl.w	ip, lr, ip
 800383a:	ea21 010c 	bic.w	r1, r1, ip
 800383e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003840:	fa0e fe03 	lsl.w	lr, lr, r3
 8003844:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003848:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800384a:	2800      	cmp	r0, #0
 800384c:	db09      	blt.n	8003862 <HAL_NVIC_SetPriority+0x5c>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384e:	0109      	lsls	r1, r1, #4
 8003850:	b2c9      	uxtb	r1, r1
 8003852:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003856:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800385a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800385e:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003862:	f000 000f 	and.w	r0, r0, #15
 8003866:	0109      	lsls	r1, r1, #4
 8003868:	b2c9      	uxtb	r1, r1
 800386a:	f64e 43fc 	movw	r3, #60668	; 0xecfc
 800386e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003872:	4403      	add	r3, r0
 8003874:	7619      	strb	r1, [r3, #24]
 8003876:	e7f2      	b.n	800385e <HAL_NVIC_SetPriority+0x58>

08003878 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003878:	2800      	cmp	r0, #0
 800387a:	db0a      	blt.n	8003892 <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800387c:	0941      	lsrs	r1, r0, #5
 800387e:	f000 001f 	and.w	r0, r0, #31
 8003882:	2301      	movs	r3, #1
 8003884:	4083      	lsls	r3, r0
 8003886:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800388a:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800388e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003892:	4770      	bx	lr

08003894 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003894:	2800      	cmp	r0, #0
 8003896:	db0f      	blt.n	80038b8 <HAL_NVIC_DisableIRQ+0x24>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003898:	0943      	lsrs	r3, r0, #5
 800389a:	f000 001f 	and.w	r0, r0, #31
 800389e:	2201      	movs	r2, #1
 80038a0:	4082      	lsls	r2, r0
 80038a2:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80038a6:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80038aa:	3320      	adds	r3, #32
 80038ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80038b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80038b4:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80038b8:	4770      	bx	lr

080038ba <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038ba:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038bc:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80038be:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 80038c2:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80038c6:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80038c8:	b124      	cbz	r4, 80038d4 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038ca:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80038cc:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 80038d0:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038d4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80038d6:	f004 0c1c 	and.w	ip, r4, #28
 80038da:	2401      	movs	r4, #1
 80038dc:	fa04 f40c 	lsl.w	r4, r4, ip
 80038e0:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 80038e4:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038e8:	6804      	ldr	r4, [r0, #0]
 80038ea:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038ec:	6883      	ldr	r3, [r0, #8]
 80038ee:	2b10      	cmp	r3, #16
 80038f0:	d005      	beq.n	80038fe <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80038f2:	6803      	ldr	r3, [r0, #0]
 80038f4:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80038f6:	6803      	ldr	r3, [r0, #0]
 80038f8:	60da      	str	r2, [r3, #12]
  }
}
 80038fa:	bc10      	pop	{r4}
 80038fc:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80038fe:	6803      	ldr	r3, [r0, #0]
 8003900:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003902:	6803      	ldr	r3, [r0, #0]
 8003904:	60d9      	str	r1, [r3, #12]
 8003906:	e7f8      	b.n	80038fa <DMA_SetConfig+0x40>

08003908 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003908:	6803      	ldr	r3, [r0, #0]
 800390a:	f240 4207 	movw	r2, #1031	; 0x407
 800390e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003912:	4293      	cmp	r3, r2
 8003914:	d81c      	bhi.n	8003950 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003916:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003918:	f022 0203 	bic.w	r2, r2, #3
 800391c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003920:	f502 3202 	add.w	r2, r2, #133120	; 0x20800

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003924:	b2db      	uxtb	r3, r3
 8003926:	3b08      	subs	r3, #8
 8003928:	f64c 41cd 	movw	r1, #52429	; 0xcccd
 800392c:	f6cc 41cc 	movt	r1, #52428	; 0xcccc
 8003930:	fba1 1303 	umull	r1, r3, r1, r3
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	6482      	str	r2, [r0, #72]	; 0x48
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003938:	f44f 6208 	mov.w	r2, #2176	; 0x880
 800393c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003940:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003942:	f003 031f 	and.w	r3, r3, #31
 8003946:	2201      	movs	r2, #1
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	6503      	str	r3, [r0, #80]	; 0x50
}
 800394e:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003950:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003952:	f022 0103 	bic.w	r1, r2, #3
 8003956:	f640 021c 	movw	r2, #2076	; 0x81c
 800395a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800395e:	440a      	add	r2, r1
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003960:	b2db      	uxtb	r3, r3
 8003962:	3b08      	subs	r3, #8
 8003964:	f64c 41cd 	movw	r1, #52429	; 0xcccd
 8003968:	f6cc 41cc 	movt	r1, #52428	; 0xcccc
 800396c:	fba1 1303 	umull	r1, r3, r1, r3
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	3307      	adds	r3, #7
 8003974:	e7df      	b.n	8003936 <DMA_CalcDMAMUXChannelBaseAndMask+0x2e>

08003976 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003976:	2800      	cmp	r0, #0
 8003978:	f000 8081 	beq.w	8003a7e <HAL_DMA_Init+0x108>
{
 800397c:	b510      	push	{r4, lr}
 800397e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003980:	6802      	ldr	r2, [r0, #0]
 8003982:	f240 4307 	movw	r3, #1031	; 0x407
 8003986:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800398a:	429a      	cmp	r2, r3
 800398c:	d84c      	bhi.n	8003a28 <HAL_DMA_Init+0xb2>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800398e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8003992:	f6cb 73fd 	movt	r3, #49149	; 0xbffd
 8003996:	4413      	add	r3, r2
 8003998:	f64c 41cd 	movw	r1, #52429	; 0xcccd
 800399c:	f6cc 41cc 	movt	r1, #52428	; 0xcccc
 80039a0:	fba1 1303 	umull	r1, r3, r1, r3
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 80039a8:	2100      	movs	r1, #0
 80039aa:	f2c4 0102 	movt	r1, #16386	; 0x4002
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80039ae:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80039b0:	6421      	str	r1, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80039b2:	2302      	movs	r3, #2
 80039b4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80039b8:	6813      	ldr	r3, [r2, #0]
 80039ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80039be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c2:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80039c4:	6822      	ldr	r2, [r4, #0]
 80039c6:	6811      	ldr	r1, [r2, #0]
 80039c8:	68a3      	ldr	r3, [r4, #8]
 80039ca:	68e0      	ldr	r0, [r4, #12]
 80039cc:	4303      	orrs	r3, r0
 80039ce:	6920      	ldr	r0, [r4, #16]
 80039d0:	4303      	orrs	r3, r0
 80039d2:	6960      	ldr	r0, [r4, #20]
 80039d4:	4303      	orrs	r3, r0
 80039d6:	69a0      	ldr	r0, [r4, #24]
 80039d8:	4303      	orrs	r3, r0
 80039da:	69e0      	ldr	r0, [r4, #28]
 80039dc:	4303      	orrs	r3, r0
 80039de:	6a20      	ldr	r0, [r4, #32]
 80039e0:	4303      	orrs	r3, r0
 80039e2:	430b      	orrs	r3, r1
 80039e4:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039e6:	4620      	mov	r0, r4
 80039e8:	f7ff ff8e 	bl	8003908 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039ec:	68a3      	ldr	r3, [r4, #8]
 80039ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039f2:	bf04      	itt	eq
 80039f4:	2300      	moveq	r3, #0
 80039f6:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039f8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80039fa:	6863      	ldr	r3, [r4, #4]
 80039fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a00:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003a04:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003a06:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a08:	6863      	ldr	r3, [r4, #4]
 8003a0a:	1e5a      	subs	r2, r3, #1
 8003a0c:	2a03      	cmp	r2, #3
 8003a0e:	d91d      	bls.n	8003a4c <HAL_DMA_Init+0xd6>
    hdma->DMAmuxRequestGen = NULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003a14:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a16:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a18:	2000      	movs	r0, #0
 8003a1a:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003a22:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003a26:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003a28:	f64f 33f8 	movw	r3, #64504	; 0xfbf8
 8003a2c:	f6cb 73fd 	movt	r3, #49149	; 0xbffd
 8003a30:	4413      	add	r3, r2
 8003a32:	f64c 41cd 	movw	r1, #52429	; 0xcccd
 8003a36:	f6cc 41cc 	movt	r1, #52428	; 0xcccc
 8003a3a:	fba1 1303 	umull	r1, r3, r1, r3
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a46:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8003a4a:	e7b0      	b.n	80039ae <HAL_DMA_Init+0x38>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a50:	f248 223f 	movw	r2, #33343	; 0x823f
 8003a54:	f2c1 0200 	movt	r2, #4096	; 0x1000
 8003a58:	441a      	add	r2, r3
 8003a5a:	0092      	lsls	r2, r2, #2
 8003a5c:	6562      	str	r2, [r4, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a5e:	f44f 6114 	mov.w	r1, #2368	; 0x940
 8003a62:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8003a66:	65a1      	str	r1, [r4, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a70:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a78:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003a7a:	605a      	str	r2, [r3, #4]
 8003a7c:	e7cc      	b.n	8003a18 <HAL_DMA_Init+0xa2>
    return HAL_ERROR;
 8003a7e:	2001      	movs	r0, #1
}
 8003a80:	4770      	bx	lr

08003a82 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8003a82:	2800      	cmp	r0, #0
 8003a84:	d06b      	beq.n	8003b5e <HAL_DMA_DeInit+0xdc>
{
 8003a86:	b538      	push	{r3, r4, r5, lr}
 8003a88:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8003a8a:	6802      	ldr	r2, [r0, #0]
 8003a8c:	6813      	ldr	r3, [r2, #0]
 8003a8e:	f023 0301 	bic.w	r3, r3, #1
 8003a92:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a94:	6802      	ldr	r2, [r0, #0]
 8003a96:	f240 4307 	movw	r3, #1031	; 0x407
 8003a9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d834      	bhi.n	8003b0c <HAL_DMA_DeInit+0x8a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003aa2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8003aa6:	f6cb 73fd 	movt	r3, #49149	; 0xbffd
 8003aaa:	4413      	add	r3, r2
 8003aac:	f64c 41cd 	movw	r1, #52429	; 0xcccd
 8003ab0:	f6cc 41cc 	movt	r1, #52428	; 0xcccc
 8003ab4:	fba1 1303 	umull	r1, r3, r1, r3
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8003abc:	2100      	movs	r1, #0
 8003abe:	f2c4 0102 	movt	r1, #16386	; 0x4002
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ac2:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ac4:	6421      	str	r1, [r4, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8003ac6:	2500      	movs	r5, #0
 8003ac8:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003aca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003acc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003ace:	f003 021c 	and.w	r2, r3, #28
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	4093      	lsls	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f7ff ff15 	bl	8003908 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8003ade:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003ae0:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ae2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003ae4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003ae6:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ae8:	6863      	ldr	r3, [r4, #4]
 8003aea:	1e5a      	subs	r2, r3, #1
 8003aec:	2a03      	cmp	r2, #3
 8003aee:	d91f      	bls.n	8003b30 <HAL_DMA_DeInit+0xae>
  hdma->DMAmuxRequestGen = NULL;
 8003af0:	2000      	movs	r0, #0
 8003af2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8003af4:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003af6:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8003af8:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003afa:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003afc:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003afe:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b00:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8003b02:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003b06:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b0c:	f64f 33f8 	movw	r3, #64504	; 0xfbf8
 8003b10:	f6cb 73fd 	movt	r3, #49149	; 0xbffd
 8003b14:	4413      	add	r3, r2
 8003b16:	f64c 41cd 	movw	r1, #52429	; 0xcccd
 8003b1a:	f6cc 41cc 	movt	r1, #52428	; 0xcccc
 8003b1e:	fba1 1303 	umull	r1, r3, r1, r3
 8003b22:	091b      	lsrs	r3, r3, #4
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b2a:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8003b2e:	e7c8      	b.n	8003ac2 <HAL_DMA_DeInit+0x40>
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b34:	f248 223f 	movw	r2, #33343	; 0x823f
 8003b38:	f2c1 0200 	movt	r2, #4096	; 0x1000
 8003b3c:	441a      	add	r2, r3
 8003b3e:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b40:	f44f 6114 	mov.w	r1, #2368	; 0x940
 8003b44:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8003b48:	65a1      	str	r1, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b52:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b54:	6015      	str	r5, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b58:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003b5a:	605a      	str	r2, [r3, #4]
 8003b5c:	e7c8      	b.n	8003af0 <HAL_DMA_DeInit+0x6e>
    return HAL_ERROR;
 8003b5e:	2001      	movs	r0, #1
}
 8003b60:	4770      	bx	lr

08003b62 <HAL_DMA_Start_IT>:
{
 8003b62:	b538      	push	{r3, r4, r5, lr}
 8003b64:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003b66:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8003b6a:	2801      	cmp	r0, #1
 8003b6c:	d043      	beq.n	8003bf6 <HAL_DMA_Start_IT+0x94>
 8003b6e:	2001      	movs	r0, #1
 8003b70:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8003b74:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8003b78:	b2c0      	uxtb	r0, r0
 8003b7a:	2801      	cmp	r0, #1
 8003b7c:	d006      	beq.n	8003b8c <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003b7e:	2380      	movs	r3, #128	; 0x80
 8003b80:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003b82:	2300      	movs	r3, #0
 8003b84:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8003b88:	2001      	movs	r0, #1
}
 8003b8a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b8c:	2002      	movs	r0, #2
 8003b8e:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b92:	2000      	movs	r0, #0
 8003b94:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003b96:	6825      	ldr	r5, [r4, #0]
 8003b98:	6828      	ldr	r0, [r5, #0]
 8003b9a:	f020 0001 	bic.w	r0, r0, #1
 8003b9e:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f7ff fe8a 	bl	80038ba <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003ba6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ba8:	b1d3      	cbz	r3, 8003be0 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003baa:	6822      	ldr	r2, [r4, #0]
 8003bac:	6813      	ldr	r3, [r2, #0]
 8003bae:	f043 030e 	orr.w	r3, r3, #14
 8003bb2:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bb4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003bbc:	d003      	beq.n	8003bc6 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bc4:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8003bc6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003bc8:	b11b      	cbz	r3, 8003bd2 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bd0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003bd2:	6822      	ldr	r2, [r4, #0]
 8003bd4:	6813      	ldr	r3, [r2, #0]
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bdc:	2000      	movs	r0, #0
 8003bde:	e7d4      	b.n	8003b8a <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003be0:	6822      	ldr	r2, [r4, #0]
 8003be2:	6813      	ldr	r3, [r2, #0]
 8003be4:	f023 0304 	bic.w	r3, r3, #4
 8003be8:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bea:	6822      	ldr	r2, [r4, #0]
 8003bec:	6813      	ldr	r3, [r2, #0]
 8003bee:	f043 030a 	orr.w	r3, r3, #10
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	e7de      	b.n	8003bb4 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8003bf6:	2002      	movs	r0, #2
 8003bf8:	e7c7      	b.n	8003b8a <HAL_DMA_Start_IT+0x28>

08003bfa <HAL_DMA_Abort>:
  if (NULL == hdma)
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	d034      	beq.n	8003c6a <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c00:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	2a02      	cmp	r2, #2
 8003c08:	d006      	beq.n	8003c18 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8003c14:	2001      	movs	r0, #1
 8003c16:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c18:	6801      	ldr	r1, [r0, #0]
 8003c1a:	680a      	ldr	r2, [r1, #0]
 8003c1c:	f022 020e 	bic.w	r2, r2, #14
 8003c20:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c22:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003c24:	680a      	ldr	r2, [r1, #0]
 8003c26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c2a:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003c2c:	6801      	ldr	r1, [r0, #0]
 8003c2e:	680a      	ldr	r2, [r1, #0]
 8003c30:	f022 0201 	bic.w	r2, r2, #1
 8003c34:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c36:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c3a:	f002 011c 	and.w	r1, r2, #28
 8003c3e:	2201      	movs	r2, #1
 8003c40:	408a      	lsls	r2, r1
 8003c42:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c46:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003c48:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8003c4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c4c:	b132      	cbz	r2, 8003c5c <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c4e:	6811      	ldr	r1, [r2, #0]
 8003c50:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003c54:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c58:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003c5a:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003c62:	2000      	movs	r0, #0
 8003c64:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8003c68:	4770      	bx	lr
    return HAL_ERROR;
 8003c6a:	2001      	movs	r0, #1
}
 8003c6c:	4770      	bx	lr

08003c6e <HAL_DMA_Abort_IT>:
{
 8003c6e:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c70:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d003      	beq.n	8003c82 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c7a:	2304      	movs	r3, #4
 8003c7c:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003c7e:	2001      	movs	r0, #1
}
 8003c80:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c82:	6802      	ldr	r2, [r0, #0]
 8003c84:	6813      	ldr	r3, [r2, #0]
 8003c86:	f023 030e 	bic.w	r3, r3, #14
 8003c8a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003c8c:	6802      	ldr	r2, [r0, #0]
 8003c8e:	6813      	ldr	r3, [r2, #0]
 8003c90:	f023 0301 	bic.w	r3, r3, #1
 8003c94:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c96:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003c98:	6813      	ldr	r3, [r2, #0]
 8003c9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c9e:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ca0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003ca2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003ca4:	f003 021c 	and.w	r2, r3, #28
 8003ca8:	2301      	movs	r3, #1
 8003caa:	4093      	lsls	r3, r2
 8003cac:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003cb0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003cb2:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8003cb4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003cb6:	b133      	cbz	r3, 8003cc6 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cbe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cc0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003cc2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003cc4:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8003cd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003cd4:	b113      	cbz	r3, 8003cdc <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8003cd6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003cd8:	2000      	movs	r0, #0
 8003cda:	e7d1      	b.n	8003c80 <HAL_DMA_Abort_IT+0x12>
 8003cdc:	2000      	movs	r0, #0
 8003cde:	e7cf      	b.n	8003c80 <HAL_DMA_Abort_IT+0x12>

08003ce0 <HAL_DMA_IRQHandler>:
{
 8003ce0:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ce2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003ce4:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003ce6:	6804      	ldr	r4, [r0, #0]
 8003ce8:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003cea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003cec:	f003 031c 	and.w	r3, r3, #28
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	420a      	tst	r2, r1
 8003cf6:	d015      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x44>
 8003cf8:	f015 0f04 	tst.w	r5, #4
 8003cfc:	d012      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	f013 0f20 	tst.w	r3, #32
 8003d04:	d103      	bne.n	8003d0e <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	f023 0304 	bic.w	r3, r3, #4
 8003d0c:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003d0e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003d10:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003d12:	f003 021c 	and.w	r2, r3, #28
 8003d16:	2304      	movs	r3, #4
 8003d18:	4093      	lsls	r3, r2
 8003d1a:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003d1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003d1e:	b103      	cbz	r3, 8003d22 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003d20:	4798      	blx	r3
}
 8003d22:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003d24:	2202      	movs	r2, #2
 8003d26:	409a      	lsls	r2, r3
 8003d28:	420a      	tst	r2, r1
 8003d2a:	d028      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x9e>
 8003d2c:	f015 0f02 	tst.w	r5, #2
 8003d30:	d025      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	f013 0f20 	tst.w	r3, #32
 8003d38:	d106      	bne.n	8003d48 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	f023 030a 	bic.w	r3, r3, #10
 8003d40:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003d42:	2301      	movs	r3, #1
 8003d44:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003d48:	2380      	movs	r3, #128	; 0x80
 8003d4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d4e:	6802      	ldr	r2, [r0, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003d54:	f003 021c 	and.w	r2, r3, #28
 8003d58:	f04f 0302 	mov.w	r3, #2
 8003d5c:	fa03 f302 	lsl.w	r3, r3, r2
 8003d60:	bf8c      	ite	hi
 8003d62:	f44f 6280 	movhi.w	r2, #1024	; 0x400
 8003d66:	2200      	movls	r2, #0
 8003d68:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003d6c:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8003d74:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0d3      	beq.n	8003d22 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8003d7a:	4798      	blx	r3
 8003d7c:	e7d1      	b.n	8003d22 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003d7e:	2208      	movs	r2, #8
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	420b      	tst	r3, r1
 8003d86:	d0cc      	beq.n	8003d22 <HAL_DMA_IRQHandler+0x42>
 8003d88:	f015 0f08 	tst.w	r5, #8
 8003d8c:	d0c9      	beq.n	8003d22 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	f023 030e 	bic.w	r3, r3, #14
 8003d94:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d96:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003d98:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003d9a:	f003 031c 	and.w	r3, r3, #28
 8003d9e:	2201      	movs	r2, #1
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003da6:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003da8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003dac:	2300      	movs	r3, #0
 8003dae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003db2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0b4      	beq.n	8003d22 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003db8:	4798      	blx	r3
  return;
 8003dba:	e7b2      	b.n	8003d22 <HAL_DMA_IRQHandler+0x42>

08003dbc <HAL_DMA_GetState>:
  return hdma->State;
 8003dbc:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_DMAEx_ConfigMuxSync>:
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8003dc2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d122      	bne.n	8003e12 <HAL_DMAEx_ConfigMuxSync+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8003dcc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d022      	beq.n	8003e1a <HAL_DMAEx_ConfigMuxSync+0x58>
{
 8003dd4:	b430      	push	{r4, r5}
    __HAL_LOCK(hdma);
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8003ddc:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003dde:	6822      	ldr	r2, [r4, #0]
 8003de0:	68cb      	ldr	r3, [r1, #12]
 8003de2:	f103 3cff 	add.w	ip, r3, #4294967295
 8003de6:	680b      	ldr	r3, [r1, #0]
 8003de8:	684d      	ldr	r5, [r1, #4]
 8003dea:	432b      	orrs	r3, r5
 8003dec:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
 8003df0:	f891 c008 	ldrb.w	ip, [r1, #8]
 8003df4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8003df8:	7a49      	ldrb	r1, [r1, #9]
 8003dfa:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8003dfe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e02:	4313      	orrs	r3, r2
 8003e04:	6023      	str	r3, [r4, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8003e06:	2300      	movs	r3, #0
 8003e08:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    return HAL_OK;
 8003e0c:	4618      	mov	r0, r3
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;

    /* Return error status */
    return HAL_ERROR;
  }
}
 8003e0e:	bc30      	pop	{r4, r5}
 8003e10:	4770      	bx	lr
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e12:	2380      	movs	r3, #128	; 0x80
 8003e14:	63c3      	str	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8003e16:	2001      	movs	r0, #1
 8003e18:	4770      	bx	lr
    __HAL_LOCK(hdma);
 8003e1a:	2002      	movs	r0, #2
}
 8003e1c:	4770      	bx	lr

08003e1e <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e1e:	b510      	push	{r4, lr}
 8003e20:	4604      	mov	r4, r0
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8003e22:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003e28:	421a      	tst	r2, r3
 8003e2a:	d00e      	beq.n	8003e4a <HAL_DMAEx_MUX_IRQHandler+0x2c>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e2c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003e2e:	6813      	ldr	r3, [r2, #0]
 8003e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e34:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e36:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003e38:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003e3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8003e3c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e42:	63c3      	str	r3, [r0, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8003e44:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e46:	b103      	cbz	r3, 8003e4a <HAL_DMAEx_MUX_IRQHandler+0x2c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e48:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8003e4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e4c:	b19b      	cbz	r3, 8003e76 <HAL_DMAEx_MUX_IRQHandler+0x58>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8003e4e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003e50:	6811      	ldr	r1, [r2, #0]
 8003e52:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003e54:	4211      	tst	r1, r2
 8003e56:	d00e      	beq.n	8003e76 <HAL_DMAEx_MUX_IRQHandler+0x58>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e62:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003e64:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8003e66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003e68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e6c:	63e3      	str	r3, [r4, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8003e6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e70:	b10b      	cbz	r3, 8003e76 <HAL_DMAEx_MUX_IRQHandler+0x58>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e72:	4620      	mov	r0, r4
 8003e74:	4798      	blx	r3
      }
    }
  }
}
 8003e76:	bd10      	pop	{r4, pc}

08003e78 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8003e78:	b510      	push	{r4, lr}
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8003e7a:	460b      	mov	r3, r1

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003e7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e80:	f6c5 0200 	movt	r2, #22528	; 0x5800
 8003e84:	6954      	ldr	r4, [r2, #20]
 8003e86:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 8003e8a:	6154      	str	r4, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8c:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003e90:	b672      	cpsid	i
 8003e92:	f501 7c80 	add.w	ip, r1, #256	; 0x100
 8003e96:	1a41      	subs	r1, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	505a      	str	r2, [r3, r1]
    dest_addr++;
    src_addr++;
 8003e9c:	3304      	adds	r3, #4
    row_index--;
  }
  while (row_index != 0U);
 8003e9e:	4563      	cmp	r3, ip
 8003ea0:	d1fa      	bne.n	8003e98 <FLASH_Program_Fast+0x20>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8003ea2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ea6:	f6c5 0200 	movt	r2, #22528	; 0x5800
 8003eaa:	6913      	ldr	r3, [r2, #16]
 8003eac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003eb0:	d1fb      	bne.n	8003eaa <FLASH_Program_Fast+0x32>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb2:	f38e 8810 	msr	PRIMASK, lr
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003eb6:	bd10      	pop	{r4, pc}

08003eb8 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003eb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ebc:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	db01      	blt.n	8003eca <HAL_FLASH_Unlock+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	2000      	movs	r0, #0
}
 8003ec8:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003eca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ece:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8003ed2:	f240 1223 	movw	r2, #291	; 0x123
 8003ed6:	f2c4 5267 	movt	r2, #17767	; 0x4567
 8003eda:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003edc:	f648 12ab 	movw	r2, #35243	; 0x89ab
 8003ee0:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 8003ee4:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003ee6:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee8:	0fc0      	lsrs	r0, r0, #31
 8003eea:	4770      	bx	lr

08003eec <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003eec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ef0:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003efa:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003efc:	6958      	ldr	r0, [r3, #20]
}
 8003efe:	43c0      	mvns	r0, r0
 8003f00:	0fc0      	lsrs	r0, r0, #31
 8003f02:	4770      	bx	lr

08003f04 <FLASH_WaitForLastOperation>:
{
 8003f04:	b570      	push	{r4, r5, r6, lr}
 8003f06:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003f08:	f7fe f9ae 	bl	8002268 <HAL_GetTick>
 8003f0c:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003f0e:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 8003f12:	f6c5 0600 	movt	r6, #22528	; 0x5800
 8003f16:	6933      	ldr	r3, [r6, #16]
 8003f18:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003f1c:	d006      	beq.n	8003f2c <FLASH_WaitForLastOperation+0x28>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003f1e:	f7fe f9a3 	bl	8002268 <HAL_GetTick>
 8003f22:	1b00      	subs	r0, r0, r4
 8003f24:	42a8      	cmp	r0, r5
 8003f26:	d3f6      	bcc.n	8003f16 <FLASH_WaitForLastOperation+0x12>
      return HAL_TIMEOUT;
 8003f28:	2003      	movs	r0, #3
}
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}
  error = FLASH->SR;
 8003f2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f30:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8003f34:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8003f36:	f013 0f01 	tst.w	r3, #1
 8003f3a:	d005      	beq.n	8003f48 <FLASH_WaitForLastOperation+0x44>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003f3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f40:	f6c5 0200 	movt	r2, #22528	; 0x5800
 8003f44:	2101      	movs	r1, #1
 8003f46:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8003f48:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d10e      	bne.n	8003f6e <FLASH_WaitForLastOperation+0x6a>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003f50:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 8003f54:	f6c5 0600 	movt	r6, #22528	; 0x5800
 8003f58:	6933      	ldr	r3, [r6, #16]
 8003f5a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003f5e:	d012      	beq.n	8003f86 <FLASH_WaitForLastOperation+0x82>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003f60:	f7fe f982 	bl	8002268 <HAL_GetTick>
 8003f64:	1b00      	subs	r0, r0, r4
 8003f66:	42a8      	cmp	r0, r5
 8003f68:	d3f6      	bcc.n	8003f58 <FLASH_WaitForLastOperation+0x54>
      return HAL_TIMEOUT;
 8003f6a:	2003      	movs	r0, #3
 8003f6c:	e7dd      	b.n	8003f2a <FLASH_WaitForLastOperation+0x26>
  __HAL_FLASH_CLEAR_FLAG(error);
 8003f6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f72:	f6c5 0200 	movt	r2, #22528	; 0x5800
 8003f76:	6113      	str	r3, [r2, #16]
    pFlash.ErrorCode = error;
 8003f78:	f240 6210 	movw	r2, #1552	; 0x610
 8003f7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003f80:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8003f82:	2001      	movs	r0, #1
 8003f84:	e7d1      	b.n	8003f2a <FLASH_WaitForLastOperation+0x26>
  return HAL_OK;
 8003f86:	2000      	movs	r0, #0
 8003f88:	e7cf      	b.n	8003f2a <FLASH_WaitForLastOperation+0x26>

08003f8a <HAL_FLASH_Program>:
{
 8003f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8c:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8003f8e:	f240 6c10 	movw	ip, #1552	; 0x610
 8003f92:	f2c2 0c00 	movt	ip, #8192	; 0x2000
 8003f96:	f89c 3000 	ldrb.w	r3, [ip]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d037      	beq.n	800400e <HAL_FLASH_Program+0x84>
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	460d      	mov	r5, r1
 8003fa2:	4616      	mov	r6, r2
 8003fa4:	f240 6c10 	movw	ip, #1552	; 0x610
 8003fa8:	f2c2 0c00 	movt	ip, #8192	; 0x2000
 8003fac:	2301      	movs	r3, #1
 8003fae:	f88c 3000 	strb.w	r3, [ip]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f8cc 3004 	str.w	r3, [ip, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fbc:	f7ff ffa2 	bl	8003f04 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003fc0:	b988      	cbnz	r0, 8003fe6 <HAL_FLASH_Program+0x5c>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003fc2:	2c01      	cmp	r4, #1
 8003fc4:	d016      	beq.n	8003ff4 <HAL_FLASH_Program+0x6a>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003fc6:	4631      	mov	r1, r6
 8003fc8:	4628      	mov	r0, r5
 8003fca:	f7ff ff55 	bl	8003e78 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003fce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fd2:	f7ff ff97 	bl	8003f04 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8003fd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fda:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	ea22 0204 	bic.w	r2, r2, r4
 8003fe4:	615a      	str	r2, [r3, #20]
  __HAL_UNLOCK(&pFlash);
 8003fe6:	f240 6310 	movw	r3, #1552	; 0x610
 8003fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
}
 8003ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003ff4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ff8:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	615a      	str	r2, [r3, #20]
  *(uint32_t *)Address = (uint32_t)Data;
 8004004:	602e      	str	r6, [r5, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004006:	f3bf 8f6f 	isb	sy
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800400a:	606f      	str	r7, [r5, #4]
}
 800400c:	e7df      	b.n	8003fce <HAL_FLASH_Program+0x44>
  __HAL_LOCK(&pFlash);
 800400e:	2002      	movs	r0, #2
 8004010:	e7ef      	b.n	8003ff2 <HAL_FLASH_Program+0x68>

08004012 <FLASH_PageErase>:

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004012:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004016:	f6c5 0200 	movt	r2, #22528	; 0x5800
 800401a:	6953      	ldr	r3, [r2, #20]
 800401c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004020:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8004024:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004028:	f040 0002 	orr.w	r0, r0, #2
 800402c:	6150      	str	r0, [r2, #20]
#endif
}
 800402e:	4770      	bx	lr

08004030 <HAL_FLASHEx_Erase>:
{
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8004032:	f240 6310 	movw	r3, #1552	; 0x610
 8004036:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d055      	beq.n	80040ec <HAL_FLASHEx_Erase+0xbc>
 8004040:	4605      	mov	r5, r0
 8004042:	460e      	mov	r6, r1
 8004044:	f240 6310 	movw	r3, #1552	; 0x610
 8004048:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800404c:	2201      	movs	r2, #1
 800404e:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004050:	2200      	movs	r2, #0
 8004052:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004054:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004058:	f7ff ff54 	bl	8003f04 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800405c:	4601      	mov	r1, r0
 800405e:	2800      	cmp	r0, #0
 8004060:	d13c      	bne.n	80040dc <HAL_FLASHEx_Erase+0xac>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004062:	682b      	ldr	r3, [r5, #0]
 8004064:	2b04      	cmp	r3, #4
 8004066:	d018      	beq.n	800409a <HAL_FLASHEx_Erase+0x6a>
      *PageError = 0xFFFFFFFFU;
 8004068:	f04f 33ff 	mov.w	r3, #4294967295
 800406c:	6033      	str	r3, [r6, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800406e:	686c      	ldr	r4, [r5, #4]
 8004070:	68ab      	ldr	r3, [r5, #8]
 8004072:	4423      	add	r3, r4
 8004074:	429c      	cmp	r4, r3
 8004076:	d221      	bcs.n	80040bc <HAL_FLASHEx_Erase+0x8c>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004078:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
        FLASH_PageErase(index);
 800407c:	4620      	mov	r0, r4
 800407e:	f7ff ffc8 	bl	8004012 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004082:	4638      	mov	r0, r7
 8004084:	f7ff ff3e 	bl	8003f04 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8004088:	4601      	mov	r1, r0
 800408a:	b9b0      	cbnz	r0, 80040ba <HAL_FLASHEx_Erase+0x8a>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800408c:	3401      	adds	r4, #1
 800408e:	686b      	ldr	r3, [r5, #4]
 8004090:	68aa      	ldr	r2, [r5, #8]
 8004092:	4413      	add	r3, r2
 8004094:	42a3      	cmp	r3, r4
 8004096:	d8f1      	bhi.n	800407c <HAL_FLASHEx_Erase+0x4c>
 8004098:	e010      	b.n	80040bc <HAL_FLASHEx_Erase+0x8c>
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 800409a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800409e:	f6c5 0200 	movt	r2, #22528	; 0x5800
 80040a2:	6953      	ldr	r3, [r2, #20]
 80040a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a8:	f043 0304 	orr.w	r3, r3, #4
 80040ac:	6153      	str	r3, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040b2:	f7ff ff27 	bl	8003f04 <FLASH_WaitForLastOperation>
 80040b6:	4601      	mov	r1, r0
 80040b8:	e00a      	b.n	80040d0 <HAL_FLASHEx_Erase+0xa0>
          *PageError = index;
 80040ba:	6034      	str	r4, [r6, #0]
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80040bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040c0:	f6c5 0200 	movt	r2, #22528	; 0x5800
 80040c4:	6953      	ldr	r3, [r2, #20]
 80040c6:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80040ca:	f023 0302 	bic.w	r3, r3, #2
 80040ce:	6153      	str	r3, [r2, #20]
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80040d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040d4:	f6c5 0300 	movt	r3, #22528	; 0x5800
 80040d8:	681a      	ldr	r2, [r3, #0]
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80040da:	681b      	ldr	r3, [r3, #0]
  __HAL_UNLOCK(&pFlash);
 80040dc:	f240 6310 	movw	r3, #1552	; 0x610
 80040e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]
}
 80040e8:	4608      	mov	r0, r1
 80040ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80040ec:	2102      	movs	r1, #2
 80040ee:	e7fb      	b.n	80040e8 <HAL_FLASHEx_Erase+0xb8>

080040f0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040f0:	680b      	ldr	r3, [r1, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 80d8 	beq.w	80042a8 <HAL_GPIO_Init+0x1b8>
{
 80040f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040fc:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00u;
 8004100:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004102:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004104:	2403      	movs	r4, #3
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004106:	f44f 6e00 	mov.w	lr, #2048	; 0x800
 800410a:	f6c5 0e00 	movt	lr, #22528	; 0x5800
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800410e:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004112:	f6c4 0600 	movt	r6, #18432	; 0x4800
 8004116:	f44f 6800 	mov.w	r8, #2048	; 0x800
 800411a:	f6c4 0800 	movt	r8, #18432	; 0x4800
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800411e:	4637      	mov	r7, r6
 8004120:	46c1      	mov	r9, r8
 8004122:	e056      	b.n	80041d2 <HAL_GPIO_Init+0xe2>
        temp = GPIOx->OSPEEDR;
 8004124:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004126:	fa04 fa0c 	lsl.w	sl, r4, ip
 800412a:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 800412e:	68ce      	ldr	r6, [r1, #12]
 8004130:	fa06 f60c 	lsl.w	r6, r6, ip
 8004134:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8004138:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800413a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800413c:	ea26 0808 	bic.w	r8, r6, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004140:	684e      	ldr	r6, [r1, #4]
 8004142:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8004146:	4096      	lsls	r6, r2
 8004148:	ea46 0608 	orr.w	r6, r6, r8
        GPIOx->OTYPER = temp;
 800414c:	6046      	str	r6, [r0, #4]
 800414e:	e04b      	b.n	80041e8 <HAL_GPIO_Init+0xf8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004150:	f04f 0800 	mov.w	r8, #0
 8004154:	fa08 f80b 	lsl.w	r8, r8, fp
 8004158:	ea48 080a 	orr.w	r8, r8, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 800415c:	f8c6 8008 	str.w	r8, [r6, #8]
        temp = EXTI->RTSR1;
 8004160:	f8de 6000 	ldr.w	r6, [lr]
        temp &= ~(iocurrent);
 8004164:	ea6f 0803 	mvn.w	r8, r3
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004168:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800416c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8004170:	bf0c      	ite	eq
 8004172:	ea08 0606 	andeq.w	r6, r8, r6
        {
          temp |= iocurrent;
 8004176:	431e      	orrne	r6, r3
        }
        EXTI->RTSR1 = temp;
 8004178:	f8ce 6000 	str.w	r6, [lr]

        temp = EXTI->FTSR1;
 800417c:	f8de 6004 	ldr.w	r6, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004180:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8004184:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8004188:	bf0c      	ite	eq
 800418a:	ea08 0606 	andeq.w	r6, r8, r6
        {
          temp |= iocurrent;
 800418e:	431e      	orrne	r6, r3
        }
        EXTI->FTSR1 = temp;
 8004190:	f8ce 6004 	str.w	r6, [lr, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004194:	f8de 6080 	ldr.w	r6, [lr, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004198:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800419c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
        temp &= ~(iocurrent);
 80041a0:	bf0c      	ite	eq
 80041a2:	ea08 0606 	andeq.w	r6, r8, r6
        {
          temp |= iocurrent;
 80041a6:	431e      	orrne	r6, r3
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80041a8:	f8ce 6080 	str.w	r6, [lr, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80041ac:	f8de 6084 	ldr.w	r6, [lr, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041b0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80041b4:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
        temp &= ~(iocurrent);
 80041b8:	bf0c      	ite	eq
 80041ba:	ea08 0306 	andeq.w	r3, r8, r6
        {
          temp |= iocurrent;
 80041be:	4333      	orrne	r3, r6
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80041c0:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80041c4:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041c6:	680b      	ldr	r3, [r1, #0]
 80041c8:	f10c 0c02 	add.w	ip, ip, #2
 80041cc:	fa33 f602 	lsrs.w	r6, r3, r2
 80041d0:	d068      	beq.n	80042a4 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041d2:	fa05 f802 	lsl.w	r8, r5, r2
    if (iocurrent != 0x00u)
 80041d6:	ea18 0303 	ands.w	r3, r8, r3
 80041da:	d0f3      	beq.n	80041c4 <HAL_GPIO_Init+0xd4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041dc:	684e      	ldr	r6, [r1, #4]
 80041de:	f006 0603 	and.w	r6, r6, #3
 80041e2:	3e01      	subs	r6, #1
 80041e4:	2e01      	cmp	r6, #1
 80041e6:	d99d      	bls.n	8004124 <HAL_GPIO_Init+0x34>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041e8:	684e      	ldr	r6, [r1, #4]
 80041ea:	f006 0603 	and.w	r6, r6, #3
 80041ee:	2e03      	cmp	r6, #3
 80041f0:	d026      	beq.n	8004240 <HAL_GPIO_Init+0x150>
        temp = GPIOx->PUPDR;
 80041f2:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041f4:	fa04 f80c 	lsl.w	r8, r4, ip
 80041f8:	ea26 0808 	bic.w	r8, r6, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041fc:	688e      	ldr	r6, [r1, #8]
 80041fe:	fa06 f60c 	lsl.w	r6, r6, ip
 8004202:	ea46 0608 	orr.w	r6, r6, r8
        GPIOx->PUPDR = temp;
 8004206:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004208:	684e      	ldr	r6, [r1, #4]
 800420a:	f006 0603 	and.w	r6, r6, #3
 800420e:	2e02      	cmp	r6, #2
 8004210:	d116      	bne.n	8004240 <HAL_GPIO_Init+0x150>
        temp = GPIOx->AFR[position >> 3U];
 8004212:	ea4f 08d2 	mov.w	r8, r2, lsr #3
 8004216:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800421a:	f8d8 6020 	ldr.w	r6, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800421e:	f002 0b07 	and.w	fp, r2, #7
 8004222:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004226:	f04f 0a0f 	mov.w	sl, #15
 800422a:	fa0a fa0b 	lsl.w	sl, sl, fp
 800422e:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004232:	690e      	ldr	r6, [r1, #16]
 8004234:	fa06 f60b 	lsl.w	r6, r6, fp
 8004238:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3u] = temp;
 800423c:	f8c8 6020 	str.w	r6, [r8, #32]
      temp = GPIOx->MODER;
 8004240:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004242:	fa04 f80c 	lsl.w	r8, r4, ip
 8004246:	ea26 0808 	bic.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800424a:	684e      	ldr	r6, [r1, #4]
 800424c:	f006 0603 	and.w	r6, r6, #3
 8004250:	fa06 f60c 	lsl.w	r6, r6, ip
 8004254:	ea46 0608 	orr.w	r6, r6, r8
      GPIOx->MODER = temp;
 8004258:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800425a:	684e      	ldr	r6, [r1, #4]
 800425c:	f416 3f40 	tst.w	r6, #196608	; 0x30000
 8004260:	d0b0      	beq.n	80041c4 <HAL_GPIO_Init+0xd4>
        temp = SYSCFG->EXTICR[position >> 2u];
 8004262:	f022 0603 	bic.w	r6, r2, #3
 8004266:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800426a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800426e:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004272:	f002 0b03 	and.w	fp, r2, #3
 8004276:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800427a:	f04f 0807 	mov.w	r8, #7
 800427e:	fa08 f80b 	lsl.w	r8, r8, fp
 8004282:	ea2a 0a08 	bic.w	sl, sl, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004286:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800428a:	f43f af61 	beq.w	8004150 <HAL_GPIO_Init+0x60>
 800428e:	42b8      	cmp	r0, r7
 8004290:	d006      	beq.n	80042a0 <HAL_GPIO_Init+0x1b0>
 8004292:	4548      	cmp	r0, r9
 8004294:	bf0c      	ite	eq
 8004296:	f04f 0802 	moveq.w	r8, #2
 800429a:	f04f 0807 	movne.w	r8, #7
 800429e:	e759      	b.n	8004154 <HAL_GPIO_Init+0x64>
 80042a0:	46a8      	mov	r8, r5
 80042a2:	e757      	b.n	8004154 <HAL_GPIO_Init+0x64>
  }
}
 80042a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a8:	4770      	bx	lr

080042aa <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80042aa:	2900      	cmp	r1, #0
 80042ac:	d07c      	beq.n	80043a8 <HAL_GPIO_DeInit+0xfe>
{
 80042ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b2:	468c      	mov	ip, r1
  uint32_t position = 0x00u;
 80042b4:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80042b6:	f04f 0801 	mov.w	r8, #1
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80042ba:	f44f 6700 	mov.w	r7, #2048	; 0x800
 80042be:	f6c5 0700 	movt	r7, #22528	; 0x5800
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80042c2:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80042c6:	f6c4 0a00 	movt	sl, #18432	; 0x4800
 80042ca:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 80042ce:	f6c4 0b00 	movt	fp, #18432	; 0x4800
 80042d2:	e02b      	b.n	800432c <HAL_GPIO_DeInit+0x82>
 80042d4:	f04f 0900 	mov.w	r9, #0
 80042d8:	fa09 f404 	lsl.w	r4, r9, r4
 80042dc:	42ac      	cmp	r4, r5
 80042de:	d048      	beq.n	8004372 <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80042e0:	6804      	ldr	r4, [r0, #0]
 80042e2:	0059      	lsls	r1, r3, #1
 80042e4:	2503      	movs	r5, #3
 80042e6:	fa05 f101 	lsl.w	r1, r5, r1
 80042ea:	430c      	orrs	r4, r1
 80042ec:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80042ee:	fa23 f505 	lsr.w	r5, r3, r5
 80042f2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80042f6:	6a2e      	ldr	r6, [r5, #32]
 80042f8:	f003 0407 	and.w	r4, r3, #7
 80042fc:	00a4      	lsls	r4, r4, #2
 80042fe:	f04f 0e0f 	mov.w	lr, #15
 8004302:	fa0e f404 	lsl.w	r4, lr, r4
 8004306:	ea26 0404 	bic.w	r4, r6, r4
 800430a:	622c      	str	r4, [r5, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800430c:	6884      	ldr	r4, [r0, #8]
 800430e:	ea24 0401 	bic.w	r4, r4, r1
 8004312:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004314:	6844      	ldr	r4, [r0, #4]
 8004316:	ea24 0202 	bic.w	r2, r4, r2
 800431a:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800431c:	68c2      	ldr	r2, [r0, #12]
 800431e:	ea22 0201 	bic.w	r2, r2, r1
 8004322:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8004324:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004326:	fa3c f203 	lsrs.w	r2, ip, r3
 800432a:	d03b      	beq.n	80043a4 <HAL_GPIO_DeInit+0xfa>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800432c:	fa08 f203 	lsl.w	r2, r8, r3
    if (iocurrent != 0x00u)
 8004330:	ea12 060c 	ands.w	r6, r2, ip
 8004334:	d0f6      	beq.n	8004324 <HAL_GPIO_DeInit+0x7a>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004336:	f023 0103 	bic.w	r1, r3, #3
 800433a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800433e:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8004342:	688d      	ldr	r5, [r1, #8]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004344:	f003 0403 	and.w	r4, r3, #3
 8004348:	00a4      	lsls	r4, r4, #2
 800434a:	f04f 0e07 	mov.w	lr, #7
 800434e:	fa0e fe04 	lsl.w	lr, lr, r4
 8004352:	ea0e 0505 	and.w	r5, lr, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004356:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800435a:	d0bb      	beq.n	80042d4 <HAL_GPIO_DeInit+0x2a>
 800435c:	4550      	cmp	r0, sl
 800435e:	d006      	beq.n	800436e <HAL_GPIO_DeInit+0xc4>
 8004360:	4558      	cmp	r0, fp
 8004362:	bf0c      	ite	eq
 8004364:	f04f 0902 	moveq.w	r9, #2
 8004368:	f04f 0907 	movne.w	r9, #7
 800436c:	e7b4      	b.n	80042d8 <HAL_GPIO_DeInit+0x2e>
 800436e:	46c1      	mov	r9, r8
 8004370:	e7b2      	b.n	80042d8 <HAL_GPIO_DeInit+0x2e>
        EXTI->IMR1 &= ~(iocurrent);
 8004372:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8004376:	ea24 0406 	bic.w	r4, r4, r6
 800437a:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800437e:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8004382:	ea24 0406 	bic.w	r4, r4, r6
 8004386:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 800438a:	683c      	ldr	r4, [r7, #0]
 800438c:	ea24 0406 	bic.w	r4, r4, r6
 8004390:	603c      	str	r4, [r7, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004392:	687c      	ldr	r4, [r7, #4]
 8004394:	ea24 0406 	bic.w	r4, r4, r6
 8004398:	607c      	str	r4, [r7, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800439a:	688c      	ldr	r4, [r1, #8]
 800439c:	ea24 040e 	bic.w	r4, r4, lr
 80043a0:	608c      	str	r4, [r1, #8]
 80043a2:	e79d      	b.n	80042e0 <HAL_GPIO_DeInit+0x36>
  }
}
 80043a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a8:	4770      	bx	lr

080043aa <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043aa:	b10a      	cbz	r2, 80043b0 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043ac:	6181      	str	r1, [r0, #24]
 80043ae:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043b0:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80043b2:	4770      	bx	lr

080043b4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043b4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043b6:	ea01 0203 	and.w	r2, r1, r3
 80043ba:	ea21 0103 	bic.w	r1, r1, r3
 80043be:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80043c2:	6181      	str	r1, [r0, #24]
}
 80043c4:	4770      	bx	lr

080043c6 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043c6:	6803      	ldr	r3, [r0, #0]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	f012 0f02 	tst.w	r2, #2
  {
    hi2c->Instance->TXDR = 0x00U;
 80043ce:	bf1c      	itt	ne
 80043d0:	2200      	movne	r2, #0
 80043d2:	629a      	strne	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043d4:	6803      	ldr	r3, [r0, #0]
 80043d6:	699a      	ldr	r2, [r3, #24]
 80043d8:	f012 0f01 	tst.w	r2, #1
 80043dc:	d103      	bne.n	80043e6 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043de:	699a      	ldr	r2, [r3, #24]
 80043e0:	f042 0201 	orr.w	r2, r2, #1
 80043e4:	619a      	str	r2, [r3, #24]
  }
}
 80043e6:	4770      	bx	lr

080043e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043e8:	b430      	push	{r4, r5}
 80043ea:	9c02      	ldr	r4, [sp, #8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80043ec:	6805      	ldr	r5, [r0, #0]
 80043ee:	6868      	ldr	r0, [r5, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043f0:	4323      	orrs	r3, r4
 80043f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80043f6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80043fa:	430b      	orrs	r3, r1
 80043fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8004400:	0d64      	lsrs	r4, r4, #21
 8004402:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8004406:	f246 32ff 	movw	r2, #25599	; 0x63ff
 800440a:	f2c0 32ff 	movt	r2, #1023	; 0x3ff
 800440e:	4314      	orrs	r4, r2
 8004410:	ea20 0004 	bic.w	r0, r0, r4
 8004414:	4303      	orrs	r3, r0
 8004416:	606b      	str	r3, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004418:	bc30      	pop	{r4, r5}
 800441a:	4770      	bx	lr

0800441c <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800441c:	f011 0f01 	tst.w	r1, #1
 8004420:	d021      	beq.n	8004466 <I2C_Disable_IRQ+0x4a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004422:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004426:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800442a:	2b28      	cmp	r3, #40	; 0x28
 800442c:	bf0c      	ite	eq
 800442e:	2342      	moveq	r3, #66	; 0x42
 8004430:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004432:	f011 0f02 	tst.w	r1, #2
 8004436:	d009      	beq.n	800444c <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004438:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800443c:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004440:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004442:	bf0c      	ite	eq
 8004444:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004448:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800444c:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8004450:	d10b      	bne.n	800446a <I2C_Disable_IRQ+0x4e>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004452:	2910      	cmp	r1, #16
 8004454:	d110      	bne.n	8004478 <I2C_Disable_IRQ+0x5c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004456:	f043 0390 	orr.w	r3, r3, #144	; 0x90
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800445a:	6801      	ldr	r1, [r0, #0]
 800445c:	680a      	ldr	r2, [r1, #0]
 800445e:	ea22 0303 	bic.w	r3, r2, r3
 8004462:	600b      	str	r3, [r1, #0]
}
 8004464:	4770      	bx	lr
  uint32_t tmpisr = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	e7e3      	b.n	8004432 <I2C_Disable_IRQ+0x16>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800446a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800446e:	2940      	cmp	r1, #64	; 0x40
    tmpisr |= I2C_IT_TCI;
 8004470:	bf08      	it	eq
 8004472:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8004476:	e7f0      	b.n	800445a <I2C_Disable_IRQ+0x3e>
  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004478:	2920      	cmp	r1, #32
 800447a:	d1f8      	bne.n	800446e <I2C_Disable_IRQ+0x52>
    tmpisr |= I2C_IT_STOPI;
 800447c:	f043 0320 	orr.w	r3, r3, #32
  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004480:	e7eb      	b.n	800445a <I2C_Disable_IRQ+0x3e>

08004482 <I2C_IsErrorOccurred>:
{
 8004482:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004486:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8004488:	6803      	ldr	r3, [r0, #0]
 800448a:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800448c:	f016 0610 	ands.w	r6, r6, #16
 8004490:	d07a      	beq.n	8004588 <I2C_IsErrorOccurred+0x106>
 8004492:	460d      	mov	r5, r1
 8004494:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004496:	2210      	movs	r2, #16
 8004498:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 800449a:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 800449c:	4637      	mov	r7, r6
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800449e:	f04f 0a20 	mov.w	sl, #32
              status = HAL_ERROR;
 80044a2:	f04f 0901 	mov.w	r9, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044a6:	6822      	ldr	r2, [r4, #0]
 80044a8:	6993      	ldr	r3, [r2, #24]
 80044aa:	f013 0f20 	tst.w	r3, #32
 80044ae:	d12f      	bne.n	8004510 <I2C_IsErrorOccurred+0x8e>
 80044b0:	bb8f      	cbnz	r7, 8004516 <I2C_IsErrorOccurred+0x94>
      if (Timeout != HAL_MAX_DELAY)
 80044b2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80044b6:	d0f7      	beq.n	80044a8 <I2C_IsErrorOccurred+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044b8:	f7fd fed6 	bl	8002268 <HAL_GetTick>
 80044bc:	eba0 0008 	sub.w	r0, r0, r8
 80044c0:	42a8      	cmp	r0, r5
 80044c2:	d801      	bhi.n	80044c8 <I2C_IsErrorOccurred+0x46>
 80044c4:	2d00      	cmp	r5, #0
 80044c6:	d1ee      	bne.n	80044a6 <I2C_IsErrorOccurred+0x24>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80044c8:	6822      	ldr	r2, [r4, #0]
 80044ca:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 80044cc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80044d0:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80044d2:	6991      	ldr	r1, [r2, #24]
 80044d4:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80044d8:	d004      	beq.n	80044e4 <I2C_IsErrorOccurred+0x62>
 80044da:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80044de:	d101      	bne.n	80044e4 <I2C_IsErrorOccurred+0x62>
              (tmp1 != I2C_CR2_STOP) && \
 80044e0:	2b20      	cmp	r3, #32
 80044e2:	d10d      	bne.n	8004500 <I2C_IsErrorOccurred+0x7e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f013 0f20 	tst.w	r3, #32
 80044ec:	d1db      	bne.n	80044a6 <I2C_IsErrorOccurred+0x24>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80044ee:	f7fd febb 	bl	8002268 <HAL_GetTick>
 80044f2:	eba0 0008 	sub.w	r0, r0, r8
 80044f6:	2819      	cmp	r0, #25
 80044f8:	d9f4      	bls.n	80044e4 <I2C_IsErrorOccurred+0x62>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80044fa:	4656      	mov	r6, sl
              status = HAL_ERROR;
 80044fc:	464f      	mov	r7, r9
 80044fe:	e7d2      	b.n	80044a6 <I2C_IsErrorOccurred+0x24>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004500:	6853      	ldr	r3, [r2, #4]
 8004502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004506:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 8004508:	f7fd feae 	bl	8002268 <HAL_GetTick>
 800450c:	4680      	mov	r8, r0
 800450e:	e7e9      	b.n	80044e4 <I2C_IsErrorOccurred+0x62>
    if (status == HAL_OK)
 8004510:	b90f      	cbnz	r7, 8004516 <I2C_IsErrorOccurred+0x94>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004512:	2320      	movs	r3, #32
 8004514:	61d3      	str	r3, [r2, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8004516:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 800451a:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800451c:	6822      	ldr	r2, [r4, #0]
 800451e:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004520:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004524:	d005      	beq.n	8004532 <I2C_IsErrorOccurred+0xb0>
    error_code |= HAL_I2C_ERROR_BERR;
 8004526:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800452a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800452e:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8004530:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004532:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004536:	d029      	beq.n	800458c <I2C_IsErrorOccurred+0x10a>
    error_code |= HAL_I2C_ERROR_OVR;
 8004538:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800453c:	6822      	ldr	r2, [r4, #0]
 800453e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004542:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004544:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004548:	d005      	beq.n	8004556 <I2C_IsErrorOccurred+0xd4>
    error_code |= HAL_I2C_ERROR_ARLO;
 800454a:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004554:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8004556:	4620      	mov	r0, r4
 8004558:	f7ff ff35 	bl	80043c6 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800455c:	6822      	ldr	r2, [r4, #0]
 800455e:	6853      	ldr	r3, [r2, #4]
 8004560:	f44f 4168 	mov.w	r1, #59392	; 0xe800
 8004564:	f6cf 6100 	movt	r1, #65024	; 0xfe00
 8004568:	400b      	ands	r3, r1
 800456a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800456c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800456e:	4333      	orrs	r3, r6
 8004570:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004572:	2320      	movs	r3, #32
 8004574:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004578:	2300      	movs	r3, #0
 800457a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800457e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004582:	2001      	movs	r0, #1
}
 8004584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8004588:	2000      	movs	r0, #0
 800458a:	e7c7      	b.n	800451c <I2C_IsErrorOccurred+0x9a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800458c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004590:	d1db      	bne.n	800454a <I2C_IsErrorOccurred+0xc8>
  if (status != HAL_OK)
 8004592:	2800      	cmp	r0, #0
 8004594:	d0f6      	beq.n	8004584 <I2C_IsErrorOccurred+0x102>
 8004596:	e7de      	b.n	8004556 <I2C_IsErrorOccurred+0xd4>

08004598 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	4604      	mov	r4, r0
 800459c:	460d      	mov	r5, r1
 800459e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	f013 0f02 	tst.w	r3, #2
 80045a8:	d11d      	bne.n	80045e6 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045aa:	4632      	mov	r2, r6
 80045ac:	4629      	mov	r1, r5
 80045ae:	4620      	mov	r0, r4
 80045b0:	f7ff ff67 	bl	8004482 <I2C_IsErrorOccurred>
 80045b4:	b9c8      	cbnz	r0, 80045ea <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80045b6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80045ba:	d0f1      	beq.n	80045a0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045bc:	f7fd fe54 	bl	8002268 <HAL_GetTick>
 80045c0:	1b80      	subs	r0, r0, r6
 80045c2:	42a8      	cmp	r0, r5
 80045c4:	d801      	bhi.n	80045ca <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80045c6:	2d00      	cmp	r5, #0
 80045c8:	d1ea      	bne.n	80045a0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80045cc:	f043 0320 	orr.w	r3, r3, #32
 80045d0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045d2:	2320      	movs	r3, #32
 80045d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d8:	2300      	movs	r3, #0
 80045da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80045de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80045e2:	2001      	movs	r0, #1
 80045e4:	e000      	b.n	80045e8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80045e6:	2000      	movs	r0, #0
}
 80045e8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80045ea:	2001      	movs	r0, #1
 80045ec:	e7fc      	b.n	80045e8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080045ee <I2C_WaitOnFlagUntilTimeout>:
{
 80045ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f2:	4680      	mov	r8, r0
 80045f4:	460f      	mov	r7, r1
 80045f6:	4616      	mov	r6, r2
 80045f8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045fa:	f8d8 3000 	ldr.w	r3, [r8]
 80045fe:	699c      	ldr	r4, [r3, #24]
 8004600:	ea37 0404 	bics.w	r4, r7, r4
 8004604:	bf0c      	ite	eq
 8004606:	2401      	moveq	r4, #1
 8004608:	2400      	movne	r4, #0
 800460a:	42b4      	cmp	r4, r6
 800460c:	d11a      	bne.n	8004644 <I2C_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800460e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004612:	d0f4      	beq.n	80045fe <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004614:	f7fd fe28 	bl	8002268 <HAL_GetTick>
 8004618:	9b06      	ldr	r3, [sp, #24]
 800461a:	1ac0      	subs	r0, r0, r3
 800461c:	42a8      	cmp	r0, r5
 800461e:	d801      	bhi.n	8004624 <I2C_WaitOnFlagUntilTimeout+0x36>
 8004620:	2d00      	cmp	r5, #0
 8004622:	d1ea      	bne.n	80045fa <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004624:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8004628:	f043 0320 	orr.w	r3, r3, #32
 800462c:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004630:	2320      	movs	r3, #32
 8004632:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004636:	2300      	movs	r3, #0
 8004638:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800463c:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 8004640:	2001      	movs	r0, #1
 8004642:	e000      	b.n	8004646 <I2C_WaitOnFlagUntilTimeout+0x58>
  return HAL_OK;
 8004644:	2000      	movs	r0, #0
}
 8004646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800464a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800464a:	b570      	push	{r4, r5, r6, lr}
 800464c:	4605      	mov	r5, r0
 800464e:	460c      	mov	r4, r1
 8004650:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004652:	682b      	ldr	r3, [r5, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	f013 0f20 	tst.w	r3, #32
 800465a:	d11a      	bne.n	8004692 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800465c:	4632      	mov	r2, r6
 800465e:	4621      	mov	r1, r4
 8004660:	4628      	mov	r0, r5
 8004662:	f7ff ff0e 	bl	8004482 <I2C_IsErrorOccurred>
 8004666:	b9b0      	cbnz	r0, 8004696 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004668:	f7fd fdfe 	bl	8002268 <HAL_GetTick>
 800466c:	1b80      	subs	r0, r0, r6
 800466e:	42a0      	cmp	r0, r4
 8004670:	d801      	bhi.n	8004676 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8004672:	2c00      	cmp	r4, #0
 8004674:	d1ed      	bne.n	8004652 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004676:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004678:	f043 0320 	orr.w	r3, r3, #32
 800467c:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800467e:	2320      	movs	r3, #32
 8004680:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004684:	2300      	movs	r3, #0
 8004686:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800468a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800468e:	2001      	movs	r0, #1
}
 8004690:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8004692:	2000      	movs	r0, #0
 8004694:	e7fc      	b.n	8004690 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8004696:	2001      	movs	r0, #1
 8004698:	e7fa      	b.n	8004690 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800469a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800469a:	b570      	push	{r4, r5, r6, lr}
 800469c:	4604      	mov	r4, r0
 800469e:	460d      	mov	r5, r1
 80046a0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f013 0f04 	tst.w	r3, #4
 80046aa:	d144      	bne.n	8004736 <I2C_WaitOnRXNEFlagUntilTimeout+0x9c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ac:	4632      	mov	r2, r6
 80046ae:	4629      	mov	r1, r5
 80046b0:	4620      	mov	r0, r4
 80046b2:	f7ff fee6 	bl	8004482 <I2C_IsErrorOccurred>
 80046b6:	4601      	mov	r1, r0
 80046b8:	2800      	cmp	r0, #0
 80046ba:	d13e      	bne.n	800473a <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046bc:	6823      	ldr	r3, [r4, #0]
 80046be:	699a      	ldr	r2, [r3, #24]
 80046c0:	f012 0f20 	tst.w	r2, #32
 80046c4:	d113      	bne.n	80046ee <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c6:	f7fd fdcf 	bl	8002268 <HAL_GetTick>
 80046ca:	1b80      	subs	r0, r0, r6
 80046cc:	42a8      	cmp	r0, r5
 80046ce:	d801      	bhi.n	80046d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80046d0:	2d00      	cmp	r5, #0
 80046d2:	d1e6      	bne.n	80046a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80046d6:	f043 0320 	orr.w	r3, r3, #32
 80046da:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80046dc:	2320      	movs	r3, #32
 80046de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 80046e2:	2300      	movs	r3, #0
 80046e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80046e8:	2101      	movs	r1, #1
}
 80046ea:	4608      	mov	r0, r1
 80046ec:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80046ee:	699a      	ldr	r2, [r3, #24]
 80046f0:	f012 0f04 	tst.w	r2, #4
 80046f4:	d002      	beq.n	80046fc <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80046f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80046f8:	2a00      	cmp	r2, #0
 80046fa:	d1f6      	bne.n	80046ea <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	f012 0f10 	tst.w	r2, #16
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004702:	bf1d      	ittte	ne
 8004704:	2210      	movne	r2, #16
 8004706:	61da      	strne	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004708:	2304      	movne	r3, #4
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800470a:	2300      	moveq	r3, #0
 800470c:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	2220      	movs	r2, #32
 8004712:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8004714:	6821      	ldr	r1, [r4, #0]
 8004716:	684b      	ldr	r3, [r1, #4]
 8004718:	f44f 4068 	mov.w	r0, #59392	; 0xe800
 800471c:	f6cf 6000 	movt	r0, #65024	; 0xfe00
 8004720:	4003      	ands	r3, r0
 8004722:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8004724:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004728:	2300      	movs	r3, #0
 800472a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800472e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004732:	2101      	movs	r1, #1
 8004734:	e7d9      	b.n	80046ea <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 8004736:	2100      	movs	r1, #0
 8004738:	e7d7      	b.n	80046ea <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 800473a:	2101      	movs	r1, #1
 800473c:	e7d5      	b.n	80046ea <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

0800473e <HAL_I2C_Init>:
  if (hi2c == NULL)
 800473e:	2800      	cmp	r0, #0
 8004740:	d055      	beq.n	80047ee <HAL_I2C_Init+0xb0>
{
 8004742:	b510      	push	{r4, lr}
 8004744:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004746:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800474a:	2b00      	cmp	r3, #0
 800474c:	d045      	beq.n	80047da <HAL_I2C_Init+0x9c>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800474e:	2324      	movs	r3, #36	; 0x24
 8004750:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004754:	6822      	ldr	r2, [r4, #0]
 8004756:	6813      	ldr	r3, [r2, #0]
 8004758:	f023 0301 	bic.w	r3, r3, #1
 800475c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800475e:	6822      	ldr	r2, [r4, #0]
 8004760:	6863      	ldr	r3, [r4, #4]
 8004762:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004766:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004768:	6822      	ldr	r2, [r4, #0]
 800476a:	6893      	ldr	r3, [r2, #8]
 800476c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004770:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004772:	68e3      	ldr	r3, [r4, #12]
 8004774:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004776:	6822      	ldr	r2, [r4, #0]
 8004778:	68a3      	ldr	r3, [r4, #8]
 800477a:	bf0c      	ite	eq
 800477c:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004780:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 8004784:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004786:	68e3      	ldr	r3, [r4, #12]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d02b      	beq.n	80047e4 <HAL_I2C_Init+0xa6>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800478c:	6822      	ldr	r2, [r4, #0]
 800478e:	6853      	ldr	r3, [r2, #4]
 8004790:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004798:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800479a:	6822      	ldr	r2, [r4, #0]
 800479c:	68d3      	ldr	r3, [r2, #12]
 800479e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047a2:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047a4:	6822      	ldr	r2, [r4, #0]
 80047a6:	6923      	ldr	r3, [r4, #16]
 80047a8:	6961      	ldr	r1, [r4, #20]
 80047aa:	430b      	orrs	r3, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80047ac:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80047b2:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047b4:	6822      	ldr	r2, [r4, #0]
 80047b6:	69e3      	ldr	r3, [r4, #28]
 80047b8:	6a21      	ldr	r1, [r4, #32]
 80047ba:	430b      	orrs	r3, r1
 80047bc:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80047be:	6822      	ldr	r2, [r4, #0]
 80047c0:	6813      	ldr	r3, [r2, #0]
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047c8:	2000      	movs	r0, #0
 80047ca:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047cc:	2320      	movs	r3, #32
 80047ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047d2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80047d8:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80047da:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80047de:	f7fc ffa5 	bl	800172c <HAL_I2C_MspInit>
 80047e2:	e7b4      	b.n	800474e <HAL_I2C_Init+0x10>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047ea:	605a      	str	r2, [r3, #4]
 80047ec:	e7ce      	b.n	800478c <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 80047ee:	2001      	movs	r0, #1
}
 80047f0:	4770      	bx	lr

080047f2 <HAL_I2C_Master_Transmit>:
{
 80047f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	460f      	mov	r7, r1
 80047fa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80047fc:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004800:	b2c9      	uxtb	r1, r1
 8004802:	2920      	cmp	r1, #32
 8004804:	f040 80ae 	bne.w	8004964 <HAL_I2C_Master_Transmit+0x172>
 8004808:	4604      	mov	r4, r0
 800480a:	4690      	mov	r8, r2
 800480c:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 800480e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004812:	2b01      	cmp	r3, #1
 8004814:	f000 80aa 	beq.w	800496c <HAL_I2C_Master_Transmit+0x17a>
 8004818:	f04f 0a01 	mov.w	sl, #1
 800481c:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004820:	f7fd fd22 	bl	8002268 <HAL_GetTick>
 8004824:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004826:	9000      	str	r0, [sp, #0]
 8004828:	2319      	movs	r3, #25
 800482a:	4652      	mov	r2, sl
 800482c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004830:	4620      	mov	r0, r4
 8004832:	f7ff fedc 	bl	80045ee <I2C_WaitOnFlagUntilTimeout>
 8004836:	2800      	cmp	r0, #0
 8004838:	f040 809a 	bne.w	8004970 <HAL_I2C_Master_Transmit+0x17e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800483c:	2321      	movs	r3, #33	; 0x21
 800483e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004842:	2310      	movs	r3, #16
 8004844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004848:	2300      	movs	r3, #0
 800484a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800484c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004850:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004854:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004856:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004858:	b29b      	uxth	r3, r3
 800485a:	2bff      	cmp	r3, #255	; 0xff
 800485c:	d917      	bls.n	800488e <HAL_I2C_Master_Transmit+0x9c>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800485e:	22ff      	movs	r2, #255	; 0xff
 8004860:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004866:	f2c8 0300 	movt	r3, #32768	; 0x8000
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004870:	4639      	mov	r1, r7
 8004872:	4620      	mov	r0, r4
 8004874:	f7ff fdb8 	bl	80043e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004878:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d058      	beq.n	8004932 <HAL_I2C_Master_Transmit+0x140>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004880:	f04f 0800 	mov.w	r8, #0
 8004884:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004888:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
 800488c:	e01e      	b.n	80048cc <HAL_I2C_Master_Transmit+0xda>
      hi2c->XferSize = hi2c->XferCount;
 800488e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004890:	b292      	uxth	r2, r2
 8004892:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004898:	f2c8 0300 	movt	r3, #32768	; 0x8000
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	4639      	mov	r1, r7
 80048a6:	4620      	mov	r0, r4
 80048a8:	f7ff fd9e 	bl	80043e8 <I2C_TransferConfig>
 80048ac:	e7e4      	b.n	8004878 <HAL_I2C_Master_Transmit+0x86>
          hi2c->XferSize = hi2c->XferCount;
 80048ae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80048b0:	b292      	uxth	r2, r2
 80048b2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048b4:	f8cd 8000 	str.w	r8, [sp]
 80048b8:	4653      	mov	r3, sl
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	4639      	mov	r1, r7
 80048be:	4620      	mov	r0, r4
 80048c0:	f7ff fd92 	bl	80043e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80048c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d032      	beq.n	8004932 <HAL_I2C_Master_Transmit+0x140>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048cc:	462a      	mov	r2, r5
 80048ce:	4631      	mov	r1, r6
 80048d0:	4620      	mov	r0, r4
 80048d2:	f7ff fe61 	bl	8004598 <I2C_WaitOnTXISFlagUntilTimeout>
 80048d6:	2800      	cmp	r0, #0
 80048d8:	d14c      	bne.n	8004974 <HAL_I2C_Master_Transmit+0x182>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80048de:	7812      	ldrb	r2, [r2, #0]
 80048e0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80048e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048e4:	3301      	adds	r3, #1
 80048e6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80048e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80048f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048f8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80048fa:	b292      	uxth	r2, r2
 80048fc:	2a00      	cmp	r2, #0
 80048fe:	d0e1      	beq.n	80048c4 <HAL_I2C_Master_Transmit+0xd2>
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1df      	bne.n	80048c4 <HAL_I2C_Master_Transmit+0xd2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004904:	9500      	str	r5, [sp, #0]
 8004906:	4633      	mov	r3, r6
 8004908:	4642      	mov	r2, r8
 800490a:	4649      	mov	r1, r9
 800490c:	4620      	mov	r0, r4
 800490e:	f7ff fe6e 	bl	80045ee <I2C_WaitOnFlagUntilTimeout>
 8004912:	bb88      	cbnz	r0, 8004978 <HAL_I2C_Master_Transmit+0x186>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004914:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004916:	b29b      	uxth	r3, r3
 8004918:	2bff      	cmp	r3, #255	; 0xff
 800491a:	d9c8      	bls.n	80048ae <HAL_I2C_Master_Transmit+0xbc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800491c:	22ff      	movs	r2, #255	; 0xff
 800491e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004920:	f8cd 8000 	str.w	r8, [sp]
 8004924:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004928:	4639      	mov	r1, r7
 800492a:	4620      	mov	r0, r4
 800492c:	f7ff fd5c 	bl	80043e8 <I2C_TransferConfig>
 8004930:	e7c8      	b.n	80048c4 <HAL_I2C_Master_Transmit+0xd2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004932:	462a      	mov	r2, r5
 8004934:	4631      	mov	r1, r6
 8004936:	4620      	mov	r0, r4
 8004938:	f7ff fe87 	bl	800464a <I2C_WaitOnSTOPFlagUntilTimeout>
 800493c:	b9f0      	cbnz	r0, 800497c <HAL_I2C_Master_Transmit+0x18a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	2220      	movs	r2, #32
 8004942:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004944:	6821      	ldr	r1, [r4, #0]
 8004946:	684b      	ldr	r3, [r1, #4]
 8004948:	f44f 4568 	mov.w	r5, #59392	; 0xe800
 800494c:	f6cf 6500 	movt	r5, #65024	; 0xfe00
 8004950:	402b      	ands	r3, r5
 8004952:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004954:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004958:	2300      	movs	r3, #0
 800495a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800495e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004962:	e000      	b.n	8004966 <HAL_I2C_Master_Transmit+0x174>
    return HAL_BUSY;
 8004964:	2002      	movs	r0, #2
}
 8004966:	b002      	add	sp, #8
 8004968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800496c:	2002      	movs	r0, #2
 800496e:	e7fa      	b.n	8004966 <HAL_I2C_Master_Transmit+0x174>
      return HAL_ERROR;
 8004970:	2001      	movs	r0, #1
 8004972:	e7f8      	b.n	8004966 <HAL_I2C_Master_Transmit+0x174>
        return HAL_ERROR;
 8004974:	2001      	movs	r0, #1
 8004976:	e7f6      	b.n	8004966 <HAL_I2C_Master_Transmit+0x174>
          return HAL_ERROR;
 8004978:	2001      	movs	r0, #1
 800497a:	e7f4      	b.n	8004966 <HAL_I2C_Master_Transmit+0x174>
      return HAL_ERROR;
 800497c:	2001      	movs	r0, #1
 800497e:	e7f2      	b.n	8004966 <HAL_I2C_Master_Transmit+0x174>

08004980 <HAL_I2C_Master_Receive>:
{
 8004980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	460f      	mov	r7, r1
 8004988:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800498a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800498e:	b2c9      	uxtb	r1, r1
 8004990:	2920      	cmp	r1, #32
 8004992:	f040 80ae 	bne.w	8004af2 <HAL_I2C_Master_Receive+0x172>
 8004996:	4604      	mov	r4, r0
 8004998:	4690      	mov	r8, r2
 800499a:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 800499c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	f000 80aa 	beq.w	8004afa <HAL_I2C_Master_Receive+0x17a>
 80049a6:	f04f 0a01 	mov.w	sl, #1
 80049aa:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80049ae:	f7fd fc5b 	bl	8002268 <HAL_GetTick>
 80049b2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049b4:	9000      	str	r0, [sp, #0]
 80049b6:	2319      	movs	r3, #25
 80049b8:	4652      	mov	r2, sl
 80049ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049be:	4620      	mov	r0, r4
 80049c0:	f7ff fe15 	bl	80045ee <I2C_WaitOnFlagUntilTimeout>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	f040 809a 	bne.w	8004afe <HAL_I2C_Master_Receive+0x17e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049ca:	2322      	movs	r3, #34	; 0x22
 80049cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049d0:	2310      	movs	r3, #16
 80049d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049d6:	2300      	movs	r3, #0
 80049d8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80049da:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80049de:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049e2:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2bff      	cmp	r3, #255	; 0xff
 80049ea:	d917      	bls.n	8004a1c <HAL_I2C_Master_Receive+0x9c>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049ec:	22ff      	movs	r2, #255	; 0xff
 80049ee:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049f0:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80049f4:	f2c8 0300 	movt	r3, #32768	; 0x8000
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049fe:	4639      	mov	r1, r7
 8004a00:	4620      	mov	r0, r4
 8004a02:	f7ff fcf1 	bl	80043e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d058      	beq.n	8004ac0 <HAL_I2C_Master_Receive+0x140>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a0e:	f04f 0800 	mov.w	r8, #0
 8004a12:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a16:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
 8004a1a:	e01e      	b.n	8004a5a <HAL_I2C_Master_Receive+0xda>
      hi2c->XferSize = hi2c->XferCount;
 8004a1c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004a1e:	b292      	uxth	r2, r2
 8004a20:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a22:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8004a26:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	4639      	mov	r1, r7
 8004a34:	4620      	mov	r0, r4
 8004a36:	f7ff fcd7 	bl	80043e8 <I2C_TransferConfig>
 8004a3a:	e7e4      	b.n	8004a06 <HAL_I2C_Master_Receive+0x86>
          hi2c->XferSize = hi2c->XferCount;
 8004a3c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004a3e:	b292      	uxth	r2, r2
 8004a40:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a42:	f8cd 8000 	str.w	r8, [sp]
 8004a46:	4653      	mov	r3, sl
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	4639      	mov	r1, r7
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	f7ff fccb 	bl	80043e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d032      	beq.n	8004ac0 <HAL_I2C_Master_Receive+0x140>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a5a:	462a      	mov	r2, r5
 8004a5c:	4631      	mov	r1, r6
 8004a5e:	4620      	mov	r0, r4
 8004a60:	f7ff fe1b 	bl	800469a <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	d14c      	bne.n	8004b02 <HAL_I2C_Master_Receive+0x182>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a6e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004a70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a72:	3301      	adds	r3, #1
 8004a74:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004a76:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004a7e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004a80:	3a01      	subs	r2, #1
 8004a82:	b292      	uxth	r2, r2
 8004a84:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a86:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004a88:	b292      	uxth	r2, r2
 8004a8a:	2a00      	cmp	r2, #0
 8004a8c:	d0e1      	beq.n	8004a52 <HAL_I2C_Master_Receive+0xd2>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1df      	bne.n	8004a52 <HAL_I2C_Master_Receive+0xd2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a92:	9500      	str	r5, [sp, #0]
 8004a94:	4633      	mov	r3, r6
 8004a96:	4642      	mov	r2, r8
 8004a98:	4649      	mov	r1, r9
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	f7ff fda7 	bl	80045ee <I2C_WaitOnFlagUntilTimeout>
 8004aa0:	bb88      	cbnz	r0, 8004b06 <HAL_I2C_Master_Receive+0x186>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aa2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2bff      	cmp	r3, #255	; 0xff
 8004aa8:	d9c8      	bls.n	8004a3c <HAL_I2C_Master_Receive+0xbc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aaa:	22ff      	movs	r2, #255	; 0xff
 8004aac:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004aae:	f8cd 8000 	str.w	r8, [sp]
 8004ab2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ab6:	4639      	mov	r1, r7
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f7ff fc95 	bl	80043e8 <I2C_TransferConfig>
 8004abe:	e7c8      	b.n	8004a52 <HAL_I2C_Master_Receive+0xd2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ac0:	462a      	mov	r2, r5
 8004ac2:	4631      	mov	r1, r6
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	f7ff fdc0 	bl	800464a <I2C_WaitOnSTOPFlagUntilTimeout>
 8004aca:	b9f0      	cbnz	r0, 8004b0a <HAL_I2C_Master_Receive+0x18a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004ad2:	6821      	ldr	r1, [r4, #0]
 8004ad4:	684b      	ldr	r3, [r1, #4]
 8004ad6:	f44f 4568 	mov.w	r5, #59392	; 0xe800
 8004ada:	f6cf 6500 	movt	r5, #65024	; 0xfe00
 8004ade:	402b      	ands	r3, r5
 8004ae0:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ae2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004aec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004af0:	e000      	b.n	8004af4 <HAL_I2C_Master_Receive+0x174>
    return HAL_BUSY;
 8004af2:	2002      	movs	r0, #2
}
 8004af4:	b002      	add	sp, #8
 8004af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8004afa:	2002      	movs	r0, #2
 8004afc:	e7fa      	b.n	8004af4 <HAL_I2C_Master_Receive+0x174>
      return HAL_ERROR;
 8004afe:	2001      	movs	r0, #1
 8004b00:	e7f8      	b.n	8004af4 <HAL_I2C_Master_Receive+0x174>
        return HAL_ERROR;
 8004b02:	2001      	movs	r0, #1
 8004b04:	e7f6      	b.n	8004af4 <HAL_I2C_Master_Receive+0x174>
          return HAL_ERROR;
 8004b06:	2001      	movs	r0, #1
 8004b08:	e7f4      	b.n	8004af4 <HAL_I2C_Master_Receive+0x174>
      return HAL_ERROR;
 8004b0a:	2001      	movs	r0, #1
 8004b0c:	e7f2      	b.n	8004af4 <HAL_I2C_Master_Receive+0x174>

08004b0e <HAL_I2C_Mem_Read>:
{
 8004b0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b12:	b083      	sub	sp, #12
 8004b14:	460d      	mov	r5, r1
 8004b16:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004b1a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b1c:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004b20:	b2c9      	uxtb	r1, r1
 8004b22:	2920      	cmp	r1, #32
 8004b24:	f040 80ea 	bne.w	8004cfc <HAL_I2C_Mem_Read+0x1ee>
 8004b28:	4604      	mov	r4, r0
 8004b2a:	4690      	mov	r8, r2
 8004b2c:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8004b2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b30:	b1cb      	cbz	r3, 8004b66 <HAL_I2C_Mem_Read+0x58>
 8004b32:	f1ba 0f00 	cmp.w	sl, #0
 8004b36:	d016      	beq.n	8004b66 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 8004b38:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	f000 80e1 	beq.w	8004d04 <HAL_I2C_Mem_Read+0x1f6>
 8004b42:	f04f 0b01 	mov.w	fp, #1
 8004b46:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004b4a:	f7fd fb8d 	bl	8002268 <HAL_GetTick>
 8004b4e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b50:	9000      	str	r0, [sp, #0]
 8004b52:	2319      	movs	r3, #25
 8004b54:	465a      	mov	r2, fp
 8004b56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f7ff fd47 	bl	80045ee <I2C_WaitOnFlagUntilTimeout>
 8004b60:	b130      	cbz	r0, 8004b70 <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 8004b62:	2001      	movs	r0, #1
 8004b64:	e0cb      	b.n	8004cfe <HAL_I2C_Mem_Read+0x1f0>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b6a:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8004b6c:	2001      	movs	r0, #1
 8004b6e:	e0c6      	b.n	8004cfe <HAL_I2C_Mem_Read+0x1f0>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b70:	2322      	movs	r3, #34	; 0x22
 8004b72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b76:	2340      	movs	r3, #64	; 0x40
 8004b78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b82:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b84:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b88:	6363      	str	r3, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b8e:	f2c8 0200 	movt	r2, #32768	; 0x8000
 8004b92:	9200      	str	r2, [sp, #0]
 8004b94:	fa5f f289 	uxtb.w	r2, r9
 8004b98:	4629      	mov	r1, r5
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f7ff fc24 	bl	80043e8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba0:	4632      	mov	r2, r6
 8004ba2:	4639      	mov	r1, r7
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f7ff fcf7 	bl	8004598 <I2C_WaitOnTXISFlagUntilTimeout>
 8004baa:	bba0      	cbnz	r0, 8004c16 <HAL_I2C_Mem_Read+0x108>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bac:	45d9      	cmp	r9, fp
 8004bae:	d123      	bne.n	8004bf8 <HAL_I2C_Mem_Read+0xea>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	fa5f f288 	uxtb.w	r2, r8
 8004bb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004bb8:	9600      	str	r6, [sp, #0]
 8004bba:	463b      	mov	r3, r7
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2140      	movs	r1, #64	; 0x40
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	f7ff fd14 	bl	80045ee <I2C_WaitOnFlagUntilTimeout>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bc6:	bb30      	cbnz	r0, 8004c16 <HAL_I2C_Mem_Read+0x108>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bc8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2bff      	cmp	r3, #255	; 0xff
 8004bce:	d927      	bls.n	8004c20 <HAL_I2C_Mem_Read+0x112>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bd0:	22ff      	movs	r2, #255	; 0xff
 8004bd2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bd4:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8004bd8:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004be2:	4629      	mov	r1, r5
 8004be4:	4620      	mov	r0, r4
 8004be6:	f7ff fbff 	bl	80043e8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004bea:	f04f 0800 	mov.w	r8, #0
 8004bee:	f04f 0904 	mov.w	r9, #4
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bf2:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8004bf6:	e033      	b.n	8004c60 <HAL_I2C_Mem_Read+0x152>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8004bfe:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c00:	4632      	mov	r2, r6
 8004c02:	4639      	mov	r1, r7
 8004c04:	4620      	mov	r0, r4
 8004c06:	f7ff fcc7 	bl	8004598 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c0a:	b920      	cbnz	r0, 8004c16 <HAL_I2C_Mem_Read+0x108>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c0c:	6822      	ldr	r2, [r4, #0]
 8004c0e:	fa5f f388 	uxtb.w	r3, r8
 8004c12:	6293      	str	r3, [r2, #40]	; 0x28
 8004c14:	e7d0      	b.n	8004bb8 <HAL_I2C_Mem_Read+0xaa>
      __HAL_UNLOCK(hi2c);
 8004c16:	2300      	movs	r3, #0
 8004c18:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004c1c:	2001      	movs	r0, #1
 8004c1e:	e06e      	b.n	8004cfe <HAL_I2C_Mem_Read+0x1f0>
      hi2c->XferSize = hi2c->XferCount;
 8004c20:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004c22:	b292      	uxth	r2, r2
 8004c24:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c26:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8004c2a:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	4629      	mov	r1, r5
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f7ff fbd5 	bl	80043e8 <I2C_TransferConfig>
 8004c3e:	e7d4      	b.n	8004bea <HAL_I2C_Mem_Read+0xdc>
          hi2c->XferSize = hi2c->XferCount;
 8004c40:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004c42:	b292      	uxth	r2, r2
 8004c44:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c46:	f8cd 8000 	str.w	r8, [sp]
 8004c4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	4629      	mov	r1, r5
 8004c52:	4620      	mov	r0, r4
 8004c54:	f7ff fbc8 	bl	80043e8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004c58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d034      	beq.n	8004cca <HAL_I2C_Mem_Read+0x1bc>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004c60:	9600      	str	r6, [sp, #0]
 8004c62:	463b      	mov	r3, r7
 8004c64:	4642      	mov	r2, r8
 8004c66:	4649      	mov	r1, r9
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f7ff fcc0 	bl	80045ee <I2C_WaitOnFlagUntilTimeout>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d14a      	bne.n	8004d08 <HAL_I2C_Mem_Read+0x1fa>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c78:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004c80:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004c88:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004c8a:	3a01      	subs	r2, #1
 8004c8c:	b292      	uxth	r2, r2
 8004c8e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c90:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004c92:	b292      	uxth	r2, r2
 8004c94:	2a00      	cmp	r2, #0
 8004c96:	d0df      	beq.n	8004c58 <HAL_I2C_Mem_Read+0x14a>
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1dd      	bne.n	8004c58 <HAL_I2C_Mem_Read+0x14a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c9c:	9600      	str	r6, [sp, #0]
 8004c9e:	463b      	mov	r3, r7
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	4651      	mov	r1, sl
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f7ff fca2 	bl	80045ee <I2C_WaitOnFlagUntilTimeout>
 8004caa:	bb78      	cbnz	r0, 8004d0c <HAL_I2C_Mem_Read+0x1fe>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	2bff      	cmp	r3, #255	; 0xff
 8004cb2:	d9c5      	bls.n	8004c40 <HAL_I2C_Mem_Read+0x132>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cb4:	22ff      	movs	r2, #255	; 0xff
 8004cb6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004cb8:	f8cd 8000 	str.w	r8, [sp]
 8004cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f7ff fb90 	bl	80043e8 <I2C_TransferConfig>
 8004cc8:	e7c6      	b.n	8004c58 <HAL_I2C_Mem_Read+0x14a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cca:	4632      	mov	r2, r6
 8004ccc:	4639      	mov	r1, r7
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f7ff fcbb 	bl	800464a <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cd4:	b9e0      	cbnz	r0, 8004d10 <HAL_I2C_Mem_Read+0x202>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004cdc:	6821      	ldr	r1, [r4, #0]
 8004cde:	684b      	ldr	r3, [r1, #4]
 8004ce0:	f44f 4568 	mov.w	r5, #59392	; 0xe800
 8004ce4:	f6cf 6500 	movt	r5, #65024	; 0xfe00
 8004ce8:	402b      	ands	r3, r5
 8004cea:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004cec:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004cf6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004cfa:	e000      	b.n	8004cfe <HAL_I2C_Mem_Read+0x1f0>
    return HAL_BUSY;
 8004cfc:	2002      	movs	r0, #2
}
 8004cfe:	b003      	add	sp, #12
 8004d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004d04:	2002      	movs	r0, #2
 8004d06:	e7fa      	b.n	8004cfe <HAL_I2C_Mem_Read+0x1f0>
        return HAL_ERROR;
 8004d08:	2001      	movs	r0, #1
 8004d0a:	e7f8      	b.n	8004cfe <HAL_I2C_Mem_Read+0x1f0>
          return HAL_ERROR;
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	e7f6      	b.n	8004cfe <HAL_I2C_Mem_Read+0x1f0>
      return HAL_ERROR;
 8004d10:	2001      	movs	r0, #1
 8004d12:	e7f4      	b.n	8004cfe <HAL_I2C_Mem_Read+0x1f0>

08004d14 <HAL_I2C_EV_IRQHandler>:
{
 8004d14:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004d16:	6803      	ldr	r3, [r0, #0]
 8004d18:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004d1a:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8004d1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d1e:	b103      	cbz	r3, 8004d22 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8004d20:	4798      	blx	r3
}
 8004d22:	bd08      	pop	{r3, pc}

08004d24 <HAL_I2C_SlaveTxCpltCallback>:
}
 8004d24:	4770      	bx	lr

08004d26 <HAL_I2C_SlaveRxCpltCallback>:
}
 8004d26:	4770      	bx	lr

08004d28 <I2C_ITSlaveSeqCplt>:
{
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004d2c:	6803      	ldr	r3, [r0, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d30:	2100      	movs	r1, #0
 8004d32:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004d36:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004d3a:	d00e      	beq.n	8004d5a <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d42:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004d44:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b29      	cmp	r3, #41	; 0x29
 8004d4c:	d00d      	beq.n	8004d6a <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d4e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b2a      	cmp	r3, #42	; 0x2a
 8004d56:	d018      	beq.n	8004d8a <I2C_ITSlaveSeqCplt+0x62>
}
 8004d58:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004d5a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004d5e:	d0f1      	beq.n	8004d44 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	e7ec      	b.n	8004d44 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d6a:	2328      	movs	r3, #40	; 0x28
 8004d6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d70:	2321      	movs	r3, #33	; 0x21
 8004d72:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004d74:	2101      	movs	r1, #1
 8004d76:	4620      	mov	r0, r4
 8004d78:	f7ff fb50 	bl	800441c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d82:	4620      	mov	r0, r4
 8004d84:	f7ff ffce 	bl	8004d24 <HAL_I2C_SlaveTxCpltCallback>
 8004d88:	e7e6      	b.n	8004d58 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d8a:	2328      	movs	r3, #40	; 0x28
 8004d8c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d90:	2322      	movs	r3, #34	; 0x22
 8004d92:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004d94:	2102      	movs	r1, #2
 8004d96:	4620      	mov	r0, r4
 8004d98:	f7ff fb40 	bl	800441c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004da2:	4620      	mov	r0, r4
 8004da4:	f7ff ffbf 	bl	8004d26 <HAL_I2C_SlaveRxCpltCallback>
}
 8004da8:	e7d6      	b.n	8004d58 <I2C_ITSlaveSeqCplt+0x30>

08004daa <HAL_I2C_AddrCallback>:
}
 8004daa:	4770      	bx	lr

08004dac <I2C_ITAddrCplt>:
{
 8004dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dae:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004db0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004db4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004db8:	2b28      	cmp	r3, #40	; 0x28
 8004dba:	d006      	beq.n	8004dca <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004dbc:	6803      	ldr	r3, [r0, #0]
 8004dbe:	2208      	movs	r2, #8
 8004dc0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8004dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8004dca:	6803      	ldr	r3, [r0, #0]
 8004dcc:	699e      	ldr	r6, [r3, #24]
 8004dce:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004dd2:	699a      	ldr	r2, [r3, #24]
 8004dd4:	0c12      	lsrs	r2, r2, #16
 8004dd6:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004dda:	6899      	ldr	r1, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004ddc:	68df      	ldr	r7, [r3, #12]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004dde:	68c2      	ldr	r2, [r0, #12]
 8004de0:	2a02      	cmp	r2, #2
 8004de2:	d125      	bne.n	8004e30 <I2C_ITAddrCplt+0x84>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004de4:	f3c1 0209 	ubfx	r2, r1, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004de8:	ea85 11d1 	eor.w	r1, r5, r1, lsr #7
 8004dec:	f011 0f06 	tst.w	r1, #6
 8004df0:	d110      	bne.n	8004e14 <I2C_ITAddrCplt+0x68>
        hi2c->AddrEventCount++;
 8004df2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004df4:	3101      	adds	r1, #1
 8004df6:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004df8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004dfa:	2902      	cmp	r1, #2
 8004dfc:	d1e4      	bne.n	8004dc8 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8004dfe:	2100      	movs	r1, #0
 8004e00:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e02:	2008      	movs	r0, #8
 8004e04:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8004e06:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e0a:	4631      	mov	r1, r6
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	f7ff ffcc 	bl	8004daa <HAL_I2C_AddrCallback>
 8004e12:	e7d9      	b.n	8004dc8 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004e14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e18:	f7ff fb00 	bl	800441c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e22:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8004e26:	4631      	mov	r1, r6
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f7ff ffbe 	bl	8004daa <HAL_I2C_AddrCallback>
 8004e2e:	e7cb      	b.n	8004dc8 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004e30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e34:	f7ff faf2 	bl	800441c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e3e:	462a      	mov	r2, r5
 8004e40:	4631      	mov	r1, r6
 8004e42:	4620      	mov	r0, r4
 8004e44:	f7ff ffb1 	bl	8004daa <HAL_I2C_AddrCallback>
 8004e48:	e7be      	b.n	8004dc8 <I2C_ITAddrCplt+0x1c>

08004e4a <HAL_I2C_ListenCpltCallback>:
}
 8004e4a:	4770      	bx	lr

08004e4c <I2C_ITListenCplt>:
{
 8004e4c:	b510      	push	{r4, lr}
 8004e4e:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e50:	2300      	movs	r3, #0
 8004e52:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8004e56:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e62:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004e66:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004e68:	f011 0f04 	tst.w	r1, #4
 8004e6c:	d012      	beq.n	8004e94 <I2C_ITListenCplt+0x48>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e6e:	6803      	ldr	r3, [r0, #0]
 8004e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e72:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004e74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e76:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004e78:	3301      	adds	r3, #1
 8004e7a:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8004e7c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8004e7e:	b14b      	cbz	r3, 8004e94 <I2C_ITListenCplt+0x48>
      hi2c->XferSize--;
 8004e80:	3b01      	subs	r3, #1
 8004e82:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8004e84:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e8c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004e8e:	f043 0304 	orr.w	r3, r3, #4
 8004e92:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e94:	f248 0103 	movw	r1, #32771	; 0x8003
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f7ff fabf 	bl	800441c <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	2210      	movs	r2, #16
 8004ea2:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f7ff ffcd 	bl	8004e4a <HAL_I2C_ListenCpltCallback>
}
 8004eb0:	bd10      	pop	{r4, pc}

08004eb2 <HAL_I2C_ErrorCallback>:
}
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_I2C_AbortCpltCallback>:
}
 8004eb4:	4770      	bx	lr

08004eb6 <I2C_TreatErrorCallback>:
{
 8004eb6:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004eb8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b60      	cmp	r3, #96	; 0x60
 8004ec0:	d006      	beq.n	8004ed0 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ec6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004eca:	f7ff fff2 	bl	8004eb2 <HAL_I2C_ErrorCallback>
}
 8004ece:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004ed0:	2320      	movs	r3, #32
 8004ed2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004eda:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ede:	f7ff ffe9 	bl	8004eb4 <HAL_I2C_AbortCpltCallback>
 8004ee2:	e7f4      	b.n	8004ece <I2C_TreatErrorCallback+0x18>

08004ee4 <I2C_ITError>:
{
 8004ee4:	b510      	push	{r4, lr}
 8004ee6:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004ee8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004eec:	2200      	movs	r2, #0
 8004eee:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8004ef8:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004efa:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8004efc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004efe:	430a      	orrs	r2, r1
 8004f00:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004f02:	3b28      	subs	r3, #40	; 0x28
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d81c      	bhi.n	8004f44 <I2C_ITError+0x60>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f0a:	2103      	movs	r1, #3
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f7ff fa85 	bl	800441c <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f12:	2328      	movs	r3, #40	; 0x28
 8004f14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004f18:	f245 1347 	movw	r3, #20807	; 0x5147
 8004f1c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004f20:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8004f22:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004f24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f26:	b11a      	cbz	r2, 8004f30 <I2C_ITError+0x4c>
 8004f28:	2b11      	cmp	r3, #17
 8004f2a:	d01a      	beq.n	8004f62 <I2C_ITError+0x7e>
 8004f2c:	2b21      	cmp	r3, #33	; 0x21
 8004f2e:	d018      	beq.n	8004f62 <I2C_ITError+0x7e>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004f30:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004f32:	b11a      	cbz	r2, 8004f3c <I2C_ITError+0x58>
 8004f34:	2b12      	cmp	r3, #18
 8004f36:	d038      	beq.n	8004faa <I2C_ITError+0xc6>
 8004f38:	2b22      	cmp	r3, #34	; 0x22
 8004f3a:	d036      	beq.n	8004faa <I2C_ITError+0xc6>
    I2C_TreatErrorCallback(hi2c);
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f7ff ffba 	bl	8004eb6 <I2C_TreatErrorCallback>
}
 8004f42:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f44:	f248 0103 	movw	r1, #32771	; 0x8003
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f7ff fa67 	bl	800441c <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004f4e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8004f56:	bf1c      	itt	ne
 8004f58:	2320      	movne	r3, #32
 8004f5a:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e7de      	b.n	8004f20 <I2C_ITError+0x3c>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004f6a:	d003      	beq.n	8004f74 <I2C_ITError+0x90>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f72:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f74:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004f76:	f7fe ff21 	bl	8003dbc <HAL_DMA_GetState>
 8004f7a:	2801      	cmp	r0, #1
 8004f7c:	d011      	beq.n	8004fa2 <I2C_ITError+0xbe>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f80:	f245 3311 	movw	r3, #21265	; 0x5311
 8004f84:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004f88:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f90:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004f92:	f7fe fe6c 	bl	8003c6e <HAL_DMA_Abort_IT>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d0d3      	beq.n	8004f42 <I2C_ITError+0x5e>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f9a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004f9c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004f9e:	4798      	blx	r3
 8004fa0:	e7cf      	b.n	8004f42 <I2C_ITError+0x5e>
      I2C_TreatErrorCallback(hi2c);
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f7ff ff87 	bl	8004eb6 <I2C_TreatErrorCallback>
 8004fa8:	e7cb      	b.n	8004f42 <I2C_ITError+0x5e>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004fb2:	d003      	beq.n	8004fbc <I2C_ITError+0xd8>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fba:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fbc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004fbe:	f7fe fefd 	bl	8003dbc <HAL_DMA_GetState>
 8004fc2:	2801      	cmp	r0, #1
 8004fc4:	d011      	beq.n	8004fea <I2C_ITError+0x106>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004fc6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004fc8:	f245 3311 	movw	r3, #21265	; 0x5311
 8004fcc:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004fd0:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fd8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004fda:	f7fe fe48 	bl	8003c6e <HAL_DMA_Abort_IT>
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	d0af      	beq.n	8004f42 <I2C_ITError+0x5e>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004fe2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004fe4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004fe6:	4798      	blx	r3
 8004fe8:	e7ab      	b.n	8004f42 <I2C_ITError+0x5e>
      I2C_TreatErrorCallback(hi2c);
 8004fea:	4620      	mov	r0, r4
 8004fec:	f7ff ff63 	bl	8004eb6 <I2C_TreatErrorCallback>
 8004ff0:	e7a7      	b.n	8004f42 <I2C_ITError+0x5e>

08004ff2 <I2C_ITSlaveCplt>:
{
 8004ff2:	b570      	push	{r4, r5, r6, lr}
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004ff8:	6802      	ldr	r2, [r0, #0]
 8004ffa:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004ffc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005000:	2120      	movs	r1, #32
 8005002:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005004:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8005008:	2b21      	cmp	r3, #33	; 0x21
 800500a:	d008      	beq.n	800501e <I2C_ITSlaveCplt+0x2c>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800500c:	2b22      	cmp	r3, #34	; 0x22
 800500e:	d10c      	bne.n	800502a <I2C_ITSlaveCplt+0x38>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005010:	f248 0102 	movw	r1, #32770	; 0x8002
 8005014:	f7ff fa02 	bl	800441c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005018:	2322      	movs	r3, #34	; 0x22
 800501a:	6323      	str	r3, [r4, #48]	; 0x30
 800501c:	e005      	b.n	800502a <I2C_ITSlaveCplt+0x38>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800501e:	f248 0101 	movw	r1, #32769	; 0x8001
 8005022:	f7ff f9fb 	bl	800441c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005026:	2321      	movs	r3, #33	; 0x21
 8005028:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800502a:	6822      	ldr	r2, [r4, #0]
 800502c:	6853      	ldr	r3, [r2, #4]
 800502e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005032:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8005034:	6822      	ldr	r2, [r4, #0]
 8005036:	6853      	ldr	r3, [r2, #4]
 8005038:	f44f 4168 	mov.w	r1, #59392	; 0xe800
 800503c:	f6cf 6100 	movt	r1, #65024	; 0xfe00
 8005040:	400b      	ands	r3, r1
 8005042:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8005044:	4620      	mov	r0, r4
 8005046:	f7ff f9be 	bl	80043c6 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800504a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800504e:	d03f      	beq.n	80050d0 <I2C_ITSlaveCplt+0xde>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005050:	6822      	ldr	r2, [r4, #0]
 8005052:	6813      	ldr	r3, [r2, #0]
 8005054:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005058:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 800505a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800505c:	b11b      	cbz	r3, 8005066 <I2C_ITSlaveCplt+0x74>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	b29b      	uxth	r3, r3
 8005064:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005066:	f015 0f04 	tst.w	r5, #4
 800506a:	d010      	beq.n	800508e <I2C_ITSlaveCplt+0x9c>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800506c:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005074:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005076:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800507a:	3301      	adds	r3, #1
 800507c:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800507e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005080:	b12b      	cbz	r3, 800508e <I2C_ITSlaveCplt+0x9c>
      hi2c->XferSize--;
 8005082:	3b01      	subs	r3, #1
 8005084:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005086:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005088:	3b01      	subs	r3, #1
 800508a:	b29b      	uxth	r3, r3
 800508c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800508e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005090:	b29b      	uxth	r3, r3
 8005092:	b11b      	cbz	r3, 800509c <I2C_ITSlaveCplt+0xaa>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005094:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005096:	f043 0304 	orr.w	r3, r3, #4
 800509a:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800509c:	2300      	movs	r3, #0
 800509e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 80050a2:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80050a6:	bb1b      	cbnz	r3, 80050f0 <I2C_ITSlaveCplt+0xfe>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80050a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80050aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050ae:	d12d      	bne.n	800510c <I2C_ITSlaveCplt+0x11a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050b0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b22      	cmp	r3, #34	; 0x22
 80050b8:	d03a      	beq.n	8005130 <I2C_ITSlaveCplt+0x13e>
    hi2c->State = HAL_I2C_STATE_READY;
 80050ba:	2320      	movs	r3, #32
 80050bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80050c0:	2300      	movs	r3, #0
 80050c2:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80050c4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80050c8:	4620      	mov	r0, r4
 80050ca:	f7ff fe2b 	bl	8004d24 <HAL_I2C_SlaveTxCpltCallback>
}
 80050ce:	e02e      	b.n	800512e <I2C_ITSlaveCplt+0x13c>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80050d0:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80050d4:	d0c7      	beq.n	8005066 <I2C_ITSlaveCplt+0x74>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80050d6:	6822      	ldr	r2, [r4, #0]
 80050d8:	6813      	ldr	r3, [r2, #0]
 80050da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050de:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 80050e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0bf      	beq.n	8005066 <I2C_ITSlaveCplt+0x74>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	8563      	strh	r3, [r4, #42]	; 0x2a
 80050ee:	e7ba      	b.n	8005066 <I2C_ITSlaveCplt+0x74>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80050f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80050f2:	4620      	mov	r0, r4
 80050f4:	f7ff fef6 	bl	8004ee4 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80050f8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b28      	cmp	r3, #40	; 0x28
 8005100:	d115      	bne.n	800512e <I2C_ITSlaveCplt+0x13c>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005102:	4629      	mov	r1, r5
 8005104:	4620      	mov	r0, r4
 8005106:	f7ff fea1 	bl	8004e4c <I2C_ITListenCplt>
 800510a:	e010      	b.n	800512e <I2C_ITSlaveCplt+0x13c>
    I2C_ITSlaveSeqCplt(hi2c);
 800510c:	4620      	mov	r0, r4
 800510e:	f7ff fe0b 	bl	8004d28 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005112:	2300      	movs	r3, #0
 8005114:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8005118:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800511a:	2320      	movs	r3, #32
 800511c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005120:	2300      	movs	r3, #0
 8005122:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005124:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005128:	4620      	mov	r0, r4
 800512a:	f7ff fe8e 	bl	8004e4a <HAL_I2C_ListenCpltCallback>
}
 800512e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8005130:	2320      	movs	r3, #32
 8005132:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005136:	2300      	movs	r3, #0
 8005138:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800513a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800513e:	4620      	mov	r0, r4
 8005140:	f7ff fdf1 	bl	8004d26 <HAL_I2C_SlaveRxCpltCallback>
 8005144:	e7f3      	b.n	800512e <I2C_ITSlaveCplt+0x13c>

08005146 <I2C_Slave_ISR_IT>:
{
 8005146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8005148:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800514a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800514e:	2b01      	cmp	r3, #1
 8005150:	f000 8099 	beq.w	8005286 <I2C_Slave_ISR_IT+0x140>
 8005154:	4604      	mov	r4, r0
 8005156:	460d      	mov	r5, r1
 8005158:	4616      	mov	r6, r2
 800515a:	2301      	movs	r3, #1
 800515c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005160:	f011 0f20 	tst.w	r1, #32
 8005164:	d002      	beq.n	800516c <I2C_Slave_ISR_IT+0x26>
 8005166:	f012 0f20 	tst.w	r2, #32
 800516a:	d119      	bne.n	80051a0 <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800516c:	f015 0f10 	tst.w	r5, #16
 8005170:	d03d      	beq.n	80051ee <I2C_Slave_ISR_IT+0xa8>
 8005172:	f016 0f10 	tst.w	r6, #16
 8005176:	d03a      	beq.n	80051ee <I2C_Slave_ISR_IT+0xa8>
    if (hi2c->XferCount == 0U)
 8005178:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800517a:	b29b      	uxth	r3, r3
 800517c:	bb43      	cbnz	r3, 80051d0 <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800517e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b28      	cmp	r3, #40	; 0x28
 8005186:	d00e      	beq.n	80051a6 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005188:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b29      	cmp	r3, #41	; 0x29
 8005190:	d011      	beq.n	80051b6 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	2210      	movs	r2, #16
 8005196:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8005198:	2000      	movs	r0, #0
 800519a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800519e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80051a0:	f7ff ff27 	bl	8004ff2 <I2C_ITSlaveCplt>
 80051a4:	e7e2      	b.n	800516c <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80051a6:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80051aa:	d1ed      	bne.n	8005188 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80051ac:	4629      	mov	r1, r5
 80051ae:	4620      	mov	r0, r4
 80051b0:	f7ff fe4c 	bl	8004e4c <I2C_ITListenCplt>
 80051b4:	e7f0      	b.n	8005198 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80051b6:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80051ba:	d0ea      	beq.n	8005192 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	2210      	movs	r2, #16
 80051c0:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 80051c2:	4620      	mov	r0, r4
 80051c4:	f7ff f8ff 	bl	80043c6 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 80051c8:	4620      	mov	r0, r4
 80051ca:	f7ff fdad 	bl	8004d28 <I2C_ITSlaveSeqCplt>
 80051ce:	e7e3      	b.n	8005198 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	2210      	movs	r2, #16
 80051d4:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80051d8:	f043 0304 	orr.w	r3, r3, #4
 80051dc:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80051de:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 80051e2:	d1d9      	bne.n	8005198 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80051e4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80051e6:	4620      	mov	r0, r4
 80051e8:	f7ff fe7c 	bl	8004ee4 <I2C_ITError>
 80051ec:	e7d4      	b.n	8005198 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80051ee:	f015 0f04 	tst.w	r5, #4
 80051f2:	d01e      	beq.n	8005232 <I2C_Slave_ISR_IT+0xec>
 80051f4:	f016 0f04 	tst.w	r6, #4
 80051f8:	d01b      	beq.n	8005232 <I2C_Slave_ISR_IT+0xec>
    if (hi2c->XferCount > 0U)
 80051fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	b16b      	cbz	r3, 800521c <I2C_Slave_ISR_IT+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005204:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005206:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800520a:	3301      	adds	r3, #1
 800520c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800520e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005210:	3b01      	subs	r3, #1
 8005212:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005214:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005216:	3b01      	subs	r3, #1
 8005218:	b29b      	uxth	r3, r3
 800521a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800521c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800521e:	b29b      	uxth	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1b9      	bne.n	8005198 <I2C_Slave_ISR_IT+0x52>
 8005224:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8005228:	d0b6      	beq.n	8005198 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 800522a:	4620      	mov	r0, r4
 800522c:	f7ff fd7c 	bl	8004d28 <I2C_ITSlaveSeqCplt>
 8005230:	e7b2      	b.n	8005198 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005232:	f015 0f08 	tst.w	r5, #8
 8005236:	d002      	beq.n	800523e <I2C_Slave_ISR_IT+0xf8>
 8005238:	f016 0f08 	tst.w	r6, #8
 800523c:	d117      	bne.n	800526e <I2C_Slave_ISR_IT+0x128>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800523e:	f015 0f02 	tst.w	r5, #2
 8005242:	d0a9      	beq.n	8005198 <I2C_Slave_ISR_IT+0x52>
 8005244:	f016 0f02 	tst.w	r6, #2
 8005248:	d0a6      	beq.n	8005198 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 800524a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	b19b      	cbz	r3, 8005278 <I2C_Slave_ISR_IT+0x132>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005250:	6823      	ldr	r3, [r4, #0]
 8005252:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005254:	7812      	ldrb	r2, [r2, #0]
 8005256:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800525a:	3301      	adds	r3, #1
 800525c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800525e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005260:	3b01      	subs	r3, #1
 8005262:	b29b      	uxth	r3, r3
 8005264:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005266:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005268:	3b01      	subs	r3, #1
 800526a:	8523      	strh	r3, [r4, #40]	; 0x28
 800526c:	e794      	b.n	8005198 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800526e:	4629      	mov	r1, r5
 8005270:	4620      	mov	r0, r4
 8005272:	f7ff fd9b 	bl	8004dac <I2C_ITAddrCplt>
 8005276:	e78f      	b.n	8005198 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005278:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 800527c:	d18c      	bne.n	8005198 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 800527e:	4620      	mov	r0, r4
 8005280:	f7ff fd52 	bl	8004d28 <I2C_ITSlaveSeqCplt>
 8005284:	e788      	b.n	8005198 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8005286:	2002      	movs	r0, #2
 8005288:	e789      	b.n	800519e <I2C_Slave_ISR_IT+0x58>

0800528a <HAL_I2C_ER_IRQHandler>:
{
 800528a:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800528c:	6802      	ldr	r2, [r0, #0]
 800528e:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005290:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005292:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005296:	d010      	beq.n	80052ba <HAL_I2C_ER_IRQHandler+0x30>
 8005298:	f011 0f80 	tst.w	r1, #128	; 0x80
 800529c:	d02e      	beq.n	80052fc <HAL_I2C_ER_IRQHandler+0x72>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800529e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80052a0:	f041 0101 	orr.w	r1, r1, #1
 80052a4:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052aa:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80052ac:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80052b0:	d109      	bne.n	80052c6 <HAL_I2C_ER_IRQHandler+0x3c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80052b2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80052b6:	d111      	bne.n	80052dc <HAL_I2C_ER_IRQHandler+0x52>
 80052b8:	e018      	b.n	80052ec <HAL_I2C_ER_IRQHandler+0x62>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80052ba:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80052be:	d020      	beq.n	8005302 <HAL_I2C_ER_IRQHandler+0x78>
 80052c0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80052c4:	d012      	beq.n	80052ec <HAL_I2C_ER_IRQHandler+0x62>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80052c6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80052c8:	f042 0208 	orr.w	r2, r2, #8
 80052cc:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052ce:	6802      	ldr	r2, [r0, #0]
 80052d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052d4:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80052d6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80052da:	d007      	beq.n	80052ec <HAL_I2C_ER_IRQHandler+0x62>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80052dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80052de:	f043 0302 	orr.w	r3, r3, #2
 80052e2:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052e4:	6803      	ldr	r3, [r0, #0]
 80052e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ea:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 80052ec:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80052ee:	f011 0f0b 	tst.w	r1, #11
 80052f2:	d100      	bne.n	80052f6 <HAL_I2C_ER_IRQHandler+0x6c>
}
 80052f4:	bd08      	pop	{r3, pc}
    I2C_ITError(hi2c, tmperror);
 80052f6:	f7ff fdf5 	bl	8004ee4 <I2C_ITError>
}
 80052fa:	e7fb      	b.n	80052f4 <HAL_I2C_ER_IRQHandler+0x6a>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80052fc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005300:	d1f4      	bne.n	80052ec <HAL_I2C_ER_IRQHandler+0x62>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005302:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005306:	d0f1      	beq.n	80052ec <HAL_I2C_ER_IRQHandler+0x62>
 8005308:	f011 0f80 	tst.w	r1, #128	; 0x80
 800530c:	d0ee      	beq.n	80052ec <HAL_I2C_ER_IRQHandler+0x62>
 800530e:	e7e5      	b.n	80052dc <HAL_I2C_ER_IRQHandler+0x52>

08005310 <I2C_DMAAbort>:
{
 8005310:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005312:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 8005314:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005316:	b10b      	cbz	r3, 800531c <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005318:	2200      	movs	r2, #0
 800531a:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 800531c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800531e:	b10b      	cbz	r3, 8005324 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005320:	2200      	movs	r2, #0
 8005322:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 8005324:	f7ff fdc7 	bl	8004eb6 <I2C_TreatErrorCallback>
}
 8005328:	bd08      	pop	{r3, pc}

0800532a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800532a:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800532c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	2a20      	cmp	r2, #32
 8005334:	d123      	bne.n	800537e <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005336:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800533a:	2a01      	cmp	r2, #1
 800533c:	d021      	beq.n	8005382 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800533e:	2201      	movs	r2, #1
 8005340:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005344:	2224      	movs	r2, #36	; 0x24
 8005346:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800534a:	6800      	ldr	r0, [r0, #0]
 800534c:	6802      	ldr	r2, [r0, #0]
 800534e:	f022 0201 	bic.w	r2, r2, #1
 8005352:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005354:	6818      	ldr	r0, [r3, #0]
 8005356:	6802      	ldr	r2, [r0, #0]
 8005358:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800535c:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	6802      	ldr	r2, [r0, #0]
 8005362:	4311      	orrs	r1, r2
 8005364:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005366:	6819      	ldr	r1, [r3, #0]
 8005368:	680a      	ldr	r2, [r1, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005370:	2220      	movs	r2, #32
 8005372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005376:	2000      	movs	r0, #0
 8005378:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 800537c:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800537e:	2002      	movs	r0, #2
 8005380:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005382:	2002      	movs	r0, #2
  }
}
 8005384:	4770      	bx	lr

08005386 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005386:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005388:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	2a20      	cmp	r2, #32
 8005390:	d121      	bne.n	80053d6 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005392:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005396:	2a01      	cmp	r2, #1
 8005398:	d01f      	beq.n	80053da <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800539a:	2201      	movs	r2, #1
 800539c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053a0:	2224      	movs	r2, #36	; 0x24
 80053a2:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053a6:	6800      	ldr	r0, [r0, #0]
 80053a8:	6802      	ldr	r2, [r0, #0]
 80053aa:	f022 0201 	bic.w	r2, r2, #1
 80053ae:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053b0:	6818      	ldr	r0, [r3, #0]
 80053b2:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053b4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053bc:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053be:	6819      	ldr	r1, [r3, #0]
 80053c0:	680a      	ldr	r2, [r1, #0]
 80053c2:	f042 0201 	orr.w	r2, r2, #1
 80053c6:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ce:	2000      	movs	r0, #0
 80053d0:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 80053d4:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80053d6:	2002      	movs	r0, #2
 80053d8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80053da:	2002      	movs	r0, #2
  }
}
 80053dc:	4770      	bx	lr

080053de <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053e2:	f6c5 0300 	movt	r3, #22528	; 0x5800
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ec:	601a      	str	r2, [r3, #0]
}
 80053ee:	4770      	bx	lr

080053f0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80053f0:	b510      	push	{r4, lr}
 80053f2:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80053f4:	b9d0      	cbnz	r0, 800542c <HAL_PWR_EnterSLEEPMode+0x3c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80053f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053fa:	f6c5 0300 	movt	r3, #22528	; 0x5800
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005404:	d10d      	bne.n	8005422 <HAL_PWR_EnterSLEEPMode+0x32>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005406:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800540a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	f022 0204 	bic.w	r2, r2, #4
 8005414:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005416:	2c01      	cmp	r4, #1
 8005418:	d013      	beq.n	8005442 <HAL_PWR_EnterSLEEPMode+0x52>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800541a:	bf40      	sev
    __WFE();
 800541c:	bf20      	wfe
    __WFE();
 800541e:	bf20      	wfe
  }
}
 8005420:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005422:	f000 f821 	bl	8005468 <HAL_PWREx_DisableLowPowerRunMode>
 8005426:	2800      	cmp	r0, #0
 8005428:	d0ed      	beq.n	8005406 <HAL_PWR_EnterSLEEPMode+0x16>
 800542a:	e7f9      	b.n	8005420 <HAL_PWR_EnterSLEEPMode+0x30>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800542c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005430:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	f413 7f00 	tst.w	r3, #512	; 0x200
 800543a:	d1e4      	bne.n	8005406 <HAL_PWR_EnterSLEEPMode+0x16>
      HAL_PWREx_EnableLowPowerRunMode();
 800543c:	f000 f80b 	bl	8005456 <HAL_PWREx_EnableLowPowerRunMode>
 8005440:	e7e1      	b.n	8005406 <HAL_PWR_EnterSLEEPMode+0x16>
    __WFI();
 8005442:	bf30      	wfi
 8005444:	e7ec      	b.n	8005420 <HAL_PWR_EnterSLEEPMode+0x30>

08005446 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8005446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800544a:	f6c5 0300 	movt	r3, #22528	; 0x5800
 800544e:	6818      	ldr	r0, [r3, #0]
}
 8005450:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005454:	4770      	bx	lr

08005456 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800545a:	f6c5 0300 	movt	r3, #22528	; 0x5800
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005464:	601a      	str	r2, [r3, #0]
}
 8005466:	4770      	bx	lr

08005468 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800546c:	f6c5 0200 	movt	r2, #22528	; 0x5800
 8005470:	6813      	ldr	r3, [r2, #0]
 8005472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005476:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005478:	f240 0300 	movw	r3, #0
 800547c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005480:	6819      	ldr	r1, [r3, #0]
 8005482:	2332      	movs	r3, #50	; 0x32
 8005484:	fb03 f101 	mul.w	r1, r3, r1
 8005488:	f64d 6383 	movw	r3, #56963	; 0xde83
 800548c:	f2c4 331b 	movt	r3, #17179	; 0x431b
 8005490:	fba3 0301 	umull	r0, r3, r3, r1
 8005494:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005496:	6952      	ldr	r2, [r2, #20]
 8005498:	f412 7f00 	tst.w	r2, #512	; 0x200
 800549c:	d010      	beq.n	80054c0 <HAL_PWREx_DisableLowPowerRunMode+0x58>
 800549e:	f244 223f 	movw	r2, #16959	; 0x423f
 80054a2:	f2c0 020f 	movt	r2, #15
 80054a6:	4291      	cmp	r1, r2
 80054a8:	d90a      	bls.n	80054c0 <HAL_PWREx_DisableLowPowerRunMode+0x58>
 80054aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80054ae:	f6c5 0100 	movt	r1, #22528	; 0x5800
  {
    wait_loop_index--;
 80054b2:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80054b4:	694a      	ldr	r2, [r1, #20]
 80054b6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80054ba:	d001      	beq.n	80054c0 <HAL_PWREx_DisableLowPowerRunMode+0x58>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1f8      	bne.n	80054b2 <HAL_PWREx_DisableLowPowerRunMode+0x4a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80054c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054c4:	f6c5 0300 	movt	r3, #22528	; 0x5800
 80054c8:	695b      	ldr	r3, [r3, #20]
  {
    return HAL_TIMEOUT;
 80054ca:	f413 7f00 	tst.w	r3, #512	; 0x200
  }

  return HAL_OK;
}
 80054ce:	bf0c      	ite	eq
 80054d0:	2000      	moveq	r0, #0
 80054d2:	2003      	movne	r0, #3
 80054d4:	4770      	bx	lr

080054d6 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80054d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054da:	f6c5 0200 	movt	r2, #22528	; 0x5800
 80054de:	6813      	ldr	r3, [r2, #0]
 80054e0:	f023 0307 	bic.w	r3, r3, #7
 80054e4:	f043 0302 	orr.w	r3, r3, #2
 80054e8:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80054ea:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80054ee:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80054f2:	691a      	ldr	r2, [r3, #16]
 80054f4:	f042 0204 	orr.w	r2, r2, #4
 80054f8:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80054fa:	2801      	cmp	r0, #1
 80054fc:	d00b      	beq.n	8005516 <HAL_PWREx_EnterSTOP2Mode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80054fe:	bf40      	sev
    __WFE();
 8005500:	bf20      	wfe
    __WFE();
 8005502:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005504:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005508:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800550c:	691a      	ldr	r2, [r3, #16]
 800550e:	f022 0204 	bic.w	r2, r2, #4
 8005512:	611a      	str	r2, [r3, #16]
}
 8005514:	4770      	bx	lr
    __WFI();
 8005516:	bf30      	wfi
 8005518:	e7f4      	b.n	8005504 <HAL_PWREx_EnterSTOP2Mode+0x2e>

0800551a <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800551a:	b570      	push	{r4, r5, r6, lr}
 800551c:	b084      	sub	sp, #16
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800551e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005522:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005526:	f244 7100 	movw	r1, #18176	; 0x4700
 800552a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800552e:	f3c0 1003 	ubfx	r0, r0, #4, #4
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005532:	f244 63a0 	movw	r3, #18080	; 0x46a0
 8005536:	f6c0 0301 	movt	r3, #2049	; 0x801
 800553a:	f002 020f 	and.w	r2, r2, #15
 800553e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8005542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005546:	fbb4 f4f3 	udiv	r4, r4, r3

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800554a:	f7ff ff7c 	bl	8005446 <HAL_PWREx_GetVoltageRange>
 800554e:	4605      	mov	r5, r0

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005550:	f244 6328 	movw	r3, #17960	; 0x4628
 8005554:	f6c0 0301 	movt	r3, #2049	; 0x801
 8005558:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800555c:	ab04      	add	r3, sp, #16
 800555e:	e903 0007 	stmdb	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005562:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8005566:	d030      	beq.n	80055ca <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005568:	f64c 73bf 	movw	r3, #53183	; 0xcfbf
 800556c:	f2c0 036a 	movt	r3, #106	; 0x6a
 8005570:	429c      	cmp	r4, r3
 8005572:	d949      	bls.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0xee>
 8005574:	f645 533f 	movw	r3, #23871	; 0x5d3f
 8005578:	f2c0 03c6 	movt	r3, #198	; 0xc6
 800557c:	429c      	cmp	r4, r3
 800557e:	d94a      	bls.n	8005616 <RCC_SetFlashLatencyFromMSIRange+0xfc>
 8005580:	f246 633f 	movw	r3, #26175	; 0x663f
 8005584:	f2c0 1303 	movt	r3, #259	; 0x103
 8005588:	429c      	cmp	r4, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800558a:	bf98      	it	ls
 800558c:	2302      	movls	r3, #2
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800558e:	d93c      	bls.n	800560a <RCC_SetFlashLatencyFromMSIRange+0xf0>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005590:	2600      	movs	r6, #0
        break;
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005596:	f6c5 0200 	movt	r2, #22528	; 0x5800
 800559a:	6813      	ldr	r3, [r2, #0]
 800559c:	f023 0307 	bic.w	r3, r3, #7
 80055a0:	4333      	orrs	r3, r6
 80055a2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055a4:	f7fc fe60 	bl	8002268 <HAL_GetTick>
 80055a8:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80055aa:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 80055ae:	f6c5 0500 	movt	r5, #22528	; 0x5800
 80055b2:	682b      	ldr	r3, [r5, #0]
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	429e      	cmp	r6, r3
 80055ba:	d02e      	beq.n	800561a <RCC_SetFlashLatencyFromMSIRange+0x100>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80055bc:	f7fc fe54 	bl	8002268 <HAL_GetTick>
 80055c0:	1b00      	subs	r0, r0, r4
 80055c2:	2802      	cmp	r0, #2
 80055c4:	d9f5      	bls.n	80055b2 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      return HAL_TIMEOUT;
 80055c6:	2003      	movs	r0, #3
 80055c8:	e028      	b.n	800561c <RCC_SetFlashLatencyFromMSIRange+0x102>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80055ca:	f64e 23bf 	movw	r3, #60095	; 0xeabf
 80055ce:	f2c0 1321 	movt	r3, #289	; 0x121
 80055d2:	429c      	cmp	r4, r3
 80055d4:	d90f      	bls.n	80055f6 <RCC_SetFlashLatencyFromMSIRange+0xdc>
 80055d6:	f249 333f 	movw	r3, #37695	; 0x933f
 80055da:	f2c0 2334 	movt	r3, #564	; 0x234
 80055de:	429c      	cmp	r4, r3
 80055e0:	d910      	bls.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0xea>
 80055e2:	f64a 633f 	movw	r3, #44607	; 0xae3f
 80055e6:	f2c0 23eb 	movt	r3, #747	; 0x2eb
 80055ea:	429c      	cmp	r4, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80055ec:	bf98      	it	ls
 80055ee:	2302      	movls	r3, #2
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80055f0:	d902      	bls.n	80055f8 <RCC_SetFlashLatencyFromMSIRange+0xde>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80055f2:	2600      	movs	r6, #0
 80055f4:	e7cd      	b.n	8005592 <RCC_SetFlashLatencyFromMSIRange+0x78>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80055f6:	2300      	movs	r3, #0
        latency = FLASH_LATENCY_RANGE[index];
 80055f8:	aa04      	add	r2, sp, #16
 80055fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80055fe:	f853 6c0c 	ldr.w	r6, [r3, #-12]
        break;
 8005602:	e7c6      	b.n	8005592 <RCC_SetFlashLatencyFromMSIRange+0x78>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005604:	2301      	movs	r3, #1
 8005606:	e7f7      	b.n	80055f8 <RCC_SetFlashLatencyFromMSIRange+0xde>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005608:	2300      	movs	r3, #0
        latency = FLASH_LATENCY_RANGE[index];
 800560a:	aa04      	add	r2, sp, #16
 800560c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005610:	f853 6c0c 	ldr.w	r6, [r3, #-12]
        break;
 8005614:	e7bd      	b.n	8005592 <RCC_SetFlashLatencyFromMSIRange+0x78>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005616:	2301      	movs	r3, #1
 8005618:	e7f7      	b.n	800560a <RCC_SetFlashLatencyFromMSIRange+0xf0>
    }
  }
  return HAL_OK;
 800561a:	2000      	movs	r0, #0
}
 800561c:	b004      	add	sp, #16
 800561e:	bd70      	pop	{r4, r5, r6, pc}

08005620 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005620:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005624:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005626:	68d2      	ldr	r2, [r2, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005628:	f013 030c 	ands.w	r3, r3, #12
 800562c:	d018      	beq.n	8005660 <HAL_RCC_GetSysClockFreq+0x40>
 800562e:	2b0c      	cmp	r3, #12
 8005630:	d00f      	beq.n	8005652 <HAL_RCC_GetSysClockFreq+0x32>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005632:	2b04      	cmp	r3, #4
 8005634:	d053      	beq.n	80056de <HAL_RCC_GetSysClockFreq+0xbe>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005636:	2b08      	cmp	r3, #8
 8005638:	d157      	bne.n	80056ea <HAL_RCC_GetSysClockFreq+0xca>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800563a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8005644:	d054      	beq.n	80056f0 <HAL_RCC_GetSysClockFreq+0xd0>
  uint32_t msifreq = 0U;
 8005646:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8005648:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 800564c:	f2c0 00f4 	movt	r0, #244	; 0xf4
 8005650:	e033      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x9a>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005652:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005656:	2a01      	cmp	r2, #1
 8005658:	d002      	beq.n	8005660 <HAL_RCC_GetSysClockFreq+0x40>
  uint32_t msifreq = 0U;
 800565a:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 800565c:	4610      	mov	r0, r2
 800565e:	e02c      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x9a>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005664:	6812      	ldr	r2, [r2, #0]
 8005666:	f012 0208 	ands.w	r2, r2, #8
 800566a:	d010      	beq.n	800568e <HAL_RCC_GetSysClockFreq+0x6e>
 800566c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005670:	6812      	ldr	r2, [r2, #0]
 8005672:	f012 0208 	ands.w	r2, r2, #8
 8005676:	d12c      	bne.n	80056d2 <HAL_RCC_GetSysClockFreq+0xb2>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005678:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800567c:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005680:	f244 7100 	movw	r1, #18176	; 0x4700
 8005684:	f6c0 0101 	movt	r1, #2049	; 0x801
 8005688:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800568c:	e011      	b.n	80056b2 <HAL_RCC_GetSysClockFreq+0x92>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800568e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005692:	6809      	ldr	r1, [r1, #0]
 8005694:	f011 0f08 	tst.w	r1, #8
 8005698:	d117      	bne.n	80056ca <HAL_RCC_GetSysClockFreq+0xaa>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800569a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800569e:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 80056a2:	f3c2 2203 	ubfx	r2, r2, #8, #4
 80056a6:	f244 7100 	movw	r1, #18176	; 0x4700
 80056aa:	f6c0 0101 	movt	r1, #2049	; 0x801
 80056ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      sysclockfreq = msifreq;
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	bf0c      	ite	eq
 80056b6:	4610      	moveq	r0, r2
 80056b8:	2000      	movne	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80056ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056c4:	2b0c      	cmp	r3, #12
 80056c6:	d018      	beq.n	80056fa <HAL_RCC_GetSysClockFreq+0xda>
}
 80056c8:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80056ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056ce:	6809      	ldr	r1, [r1, #0]
 80056d0:	e7e9      	b.n	80056a6 <HAL_RCC_GetSysClockFreq+0x86>
 80056d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056d6:	6812      	ldr	r2, [r2, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80056d8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80056dc:	e7d0      	b.n	8005680 <HAL_RCC_GetSysClockFreq+0x60>
  uint32_t msifreq = 0U;
 80056de:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 80056e0:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 80056e4:	f2c0 00f4 	movt	r0, #244	; 0xf4
 80056e8:	e7e7      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x9a>
  uint32_t msifreq = 0U;
 80056ea:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 80056ec:	4610      	mov	r0, r2
 80056ee:	e7e4      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x9a>
      sysclockfreq = HSE_VALUE;
 80056f0:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80056f4:	f2c0 10e8 	movt	r0, #488	; 0x1e8
 80056f8:	e7df      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x9a>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80056fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8005704:	2b02      	cmp	r3, #2
 8005706:	d023      	beq.n	8005750 <HAL_RCC_GetSysClockFreq+0x130>
 8005708:	2b03      	cmp	r3, #3
 800570a:	d10e      	bne.n	800572a <HAL_RCC_GetSysClockFreq+0x10a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800570c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005710:	6819      	ldr	r1, [r3, #0]
          pllinputfreq = HSE_VALUE / 2U;
 8005712:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8005716:	f2c0 12e8 	movt	r2, #488	; 0x1e8
 800571a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800571e:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8005722:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005726:	bf18      	it	ne
 8005728:	461a      	movne	r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800572a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572e:	68d8      	ldr	r0, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005730:	68d9      	ldr	r1, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005732:	68db      	ldr	r3, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005734:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005738:	fb02 f000 	mul.w	r0, r2, r0
 800573c:	f3c1 1202 	ubfx	r2, r1, #4, #3
 8005740:	3201      	adds	r2, #1
 8005742:	fbb0 f0f2 	udiv	r0, r0, r2
 8005746:	0f5b      	lsrs	r3, r3, #29
 8005748:	3301      	adds	r3, #1
 800574a:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800574e:	e7bb      	b.n	80056c8 <HAL_RCC_GetSysClockFreq+0xa8>
        pllinputfreq = HSI_VALUE;
 8005750:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8005754:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8005758:	e7e7      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x10a>

0800575a <HAL_RCC_GetHCLKFreq>:
{
 800575a:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800575c:	f7ff ff60 	bl	8005620 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	f244 63a0 	movw	r3, #18080	; 0x46a0
 800576a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800576e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8005776:	fbb0 f0f3 	udiv	r0, r0, r3
 800577a:	bd08      	pop	{r3, pc}

0800577c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800577c:	2800      	cmp	r0, #0
 800577e:	f000 8317 	beq.w	8005db0 <HAL_RCC_OscConfig+0x634>
{
 8005782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005786:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800578c:	689d      	ldr	r5, [r3, #8]
 800578e:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005792:	68de      	ldr	r6, [r3, #12]
 8005794:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005798:	6803      	ldr	r3, [r0, #0]
 800579a:	f013 0f20 	tst.w	r3, #32
 800579e:	d02b      	beq.n	80057f8 <HAL_RCC_OscConfig+0x7c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80057a0:	2d00      	cmp	r5, #0
 80057a2:	d067      	beq.n	8005874 <HAL_RCC_OscConfig+0xf8>
 80057a4:	2d0c      	cmp	r5, #12
 80057a6:	d063      	beq.n	8005870 <HAL_RCC_OscConfig+0xf4>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80057a8:	6a23      	ldr	r3, [r4, #32]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 80c2 	beq.w	8005934 <HAL_RCC_OscConfig+0x1b8>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80057b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057b4:	6813      	ldr	r3, [r2, #0]
 80057b6:	f043 0301 	orr.w	r3, r3, #1
 80057ba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80057bc:	f7fc fd54 	bl	8002268 <HAL_GetTick>
 80057c0:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80057c2:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 80057c6:	f8d8 3000 	ldr.w	r3, [r8]
 80057ca:	f013 0f02 	tst.w	r3, #2
 80057ce:	f000 80a9 	beq.w	8005924 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	f042 0208 	orr.w	r2, r2, #8
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80057e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80057e6:	430a      	orrs	r2, r1
 80057e8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80057ee:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80057f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80057f6:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	f013 0f01 	tst.w	r3, #1
 80057fe:	f000 80b8 	beq.w	8005972 <HAL_RCC_OscConfig+0x1f6>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005802:	2d08      	cmp	r5, #8
 8005804:	f000 80b1 	beq.w	800596a <HAL_RCC_OscConfig+0x1ee>
 8005808:	2d0c      	cmp	r5, #12
 800580a:	f000 80ab 	beq.w	8005964 <HAL_RCC_OscConfig+0x1e8>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800580e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005812:	6813      	ldr	r3, [r2, #0]
 8005814:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005818:	68a1      	ldr	r1, [r4, #8]
 800581a:	430b      	orrs	r3, r1
 800581c:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800581e:	6863      	ldr	r3, [r4, #4]
 8005820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005824:	f000 80c7 	beq.w	80059b6 <HAL_RCC_OscConfig+0x23a>
 8005828:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800582c:	f000 80c8 	beq.w	80059c0 <HAL_RCC_OscConfig+0x244>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800583a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005842:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005844:	6863      	ldr	r3, [r4, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 80c5 	beq.w	80059d6 <HAL_RCC_OscConfig+0x25a>
        tickstart = HAL_GetTick();
 800584c:	f7fc fd0c 	bl	8002268 <HAL_GetTick>
 8005850:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005852:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 8005856:	f8d8 3000 	ldr.w	r3, [r8]
 800585a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800585e:	f040 8088 	bne.w	8005972 <HAL_RCC_OscConfig+0x1f6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005862:	f7fc fd01 	bl	8002268 <HAL_GetTick>
 8005866:	1bc0      	subs	r0, r0, r7
 8005868:	2864      	cmp	r0, #100	; 0x64
 800586a:	d9f4      	bls.n	8005856 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 800586c:	2003      	movs	r0, #3
 800586e:	e2ac      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005870:	2e01      	cmp	r6, #1
 8005872:	d199      	bne.n	80057a8 <HAL_RCC_OscConfig+0x2c>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005874:	6a23      	ldr	r3, [r4, #32]
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 829c 	beq.w	8005db4 <HAL_RCC_OscConfig+0x638>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800587c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800587e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f013 0f08 	tst.w	r3, #8
 8005888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800588c:	bf12      	itee	ne
 800588e:	681b      	ldrne	r3, [r3, #0]
 8005890:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 8005894:	091b      	lsreq	r3, r3, #4
 8005896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800589a:	4298      	cmp	r0, r3
 800589c:	d928      	bls.n	80058f0 <HAL_RCC_OscConfig+0x174>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800589e:	f7ff fe3c 	bl	800551a <RCC_SetFlashLatencyFromMSIRange>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	f040 8288 	bne.w	8005db8 <HAL_RCC_OscConfig+0x63c>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	f042 0208 	orr.w	r2, r2, #8
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80058ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80058bc:	430a      	orrs	r2, r1
 80058be:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80058c4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80058c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80058cc:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80058ce:	f7ff ff44 	bl	800575a <HAL_RCC_GetHCLKFreq>
 80058d2:	f240 0300 	movw	r3, #0
 80058d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80058da:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80058dc:	f240 0308 	movw	r3, #8
 80058e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	f7fc fcbd 	bl	8002264 <HAL_InitTick>
        if (status != HAL_OK)
 80058ea:	2800      	cmp	r0, #0
 80058ec:	d084      	beq.n	80057f8 <HAL_RCC_OscConfig+0x7c>
 80058ee:	e26c      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	f042 0208 	orr.w	r2, r2, #8
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005902:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005904:	430a      	orrs	r2, r1
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800590c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005910:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005914:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005916:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005918:	f7ff fdff 	bl	800551a <RCC_SetFlashLatencyFromMSIRange>
 800591c:	2800      	cmp	r0, #0
 800591e:	d0d6      	beq.n	80058ce <HAL_RCC_OscConfig+0x152>
            return HAL_ERROR;
 8005920:	2001      	movs	r0, #1
 8005922:	e252      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005924:	f7fc fca0 	bl	8002268 <HAL_GetTick>
 8005928:	1bc0      	subs	r0, r0, r7
 800592a:	2802      	cmp	r0, #2
 800592c:	f67f af4b 	bls.w	80057c6 <HAL_RCC_OscConfig+0x4a>
            return HAL_TIMEOUT;
 8005930:	2003      	movs	r0, #3
 8005932:	e24a      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005934:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005938:	6813      	ldr	r3, [r2, #0]
 800593a:	f023 0301 	bic.w	r3, r3, #1
 800593e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005940:	f7fc fc92 	bl	8002268 <HAL_GetTick>
 8005944:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005946:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 800594a:	f8d8 3000 	ldr.w	r3, [r8]
 800594e:	f013 0f02 	tst.w	r3, #2
 8005952:	f43f af51 	beq.w	80057f8 <HAL_RCC_OscConfig+0x7c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005956:	f7fc fc87 	bl	8002268 <HAL_GetTick>
 800595a:	1bc0      	subs	r0, r0, r7
 800595c:	2802      	cmp	r0, #2
 800595e:	d9f4      	bls.n	800594a <HAL_RCC_OscConfig+0x1ce>
            return HAL_TIMEOUT;
 8005960:	2003      	movs	r0, #3
 8005962:	e232      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005964:	2e03      	cmp	r6, #3
 8005966:	f47f af52 	bne.w	800580e <HAL_RCC_OscConfig+0x92>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800596a:	6863      	ldr	r3, [r4, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 8225 	beq.w	8005dbc <HAL_RCC_OscConfig+0x640>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	f013 0f02 	tst.w	r3, #2
 8005978:	d057      	beq.n	8005a2a <HAL_RCC_OscConfig+0x2ae>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800597a:	2d04      	cmp	r5, #4
 800597c:	d03e      	beq.n	80059fc <HAL_RCC_OscConfig+0x280>
 800597e:	2d0c      	cmp	r5, #12
 8005980:	d03a      	beq.n	80059f8 <HAL_RCC_OscConfig+0x27c>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005982:	6923      	ldr	r3, [r4, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 808b 	beq.w	8005aa0 <HAL_RCC_OscConfig+0x324>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800598a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800598e:	6813      	ldr	r3, [r2, #0]
 8005990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005994:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005996:	f7fc fc67 	bl	8002268 <HAL_GetTick>
 800599a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800599c:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80059a6:	d137      	bne.n	8005a18 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059a8:	f7fc fc5e 	bl	8002268 <HAL_GetTick>
 80059ac:	1b80      	subs	r0, r0, r6
 80059ae:	2802      	cmp	r0, #2
 80059b0:	d9f6      	bls.n	80059a0 <HAL_RCC_OscConfig+0x224>
            return HAL_TIMEOUT;
 80059b2:	2003      	movs	r0, #3
 80059b4:	e209      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80059b6:	6813      	ldr	r3, [r2, #0]
 80059b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059bc:	6013      	str	r3, [r2, #0]
}
 80059be:	e741      	b.n	8005844 <HAL_RCC_OscConfig+0xc8>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80059c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80059ca:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80059d2:	601a      	str	r2, [r3, #0]
}
 80059d4:	e736      	b.n	8005844 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 80059d6:	f7fc fc47 	bl	8002268 <HAL_GetTick>
 80059da:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80059dc:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 80059e0:	f8d8 3000 	ldr.w	r3, [r8]
 80059e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80059e8:	d0c3      	beq.n	8005972 <HAL_RCC_OscConfig+0x1f6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059ea:	f7fc fc3d 	bl	8002268 <HAL_GetTick>
 80059ee:	1bc0      	subs	r0, r0, r7
 80059f0:	2864      	cmp	r0, #100	; 0x64
 80059f2:	d9f5      	bls.n	80059e0 <HAL_RCC_OscConfig+0x264>
            return HAL_TIMEOUT;
 80059f4:	2003      	movs	r0, #3
 80059f6:	e1e8      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80059f8:	2e02      	cmp	r6, #2
 80059fa:	d1c2      	bne.n	8005982 <HAL_RCC_OscConfig+0x206>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80059fc:	6923      	ldr	r3, [r4, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 81de 	beq.w	8005dc0 <HAL_RCC_OscConfig+0x644>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005a04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a08:	6853      	ldr	r3, [r2, #4]
 8005a0a:	6961      	ldr	r1, [r4, #20]
 8005a0c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005a10:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005a14:	6053      	str	r3, [r2, #4]
}
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x2ae>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005a18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a1c:	6853      	ldr	r3, [r2, #4]
 8005a1e:	6961      	ldr	r1, [r4, #20]
 8005a20:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005a24:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005a28:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	f013 0f08 	tst.w	r3, #8
 8005a30:	d07e      	beq.n	8005b30 <HAL_RCC_OscConfig+0x3b4>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a32:	69a3      	ldr	r3, [r4, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d062      	beq.n	8005afe <HAL_RCC_OscConfig+0x382>
      uint32_t csr_temp = RCC->CSR;
 8005a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005a40:	f003 0210 	and.w	r2, r3, #16
 8005a44:	69e1      	ldr	r1, [r4, #28]
 8005a46:	4291      	cmp	r1, r2
 8005a48:	d011      	beq.n	8005a6e <HAL_RCC_OscConfig+0x2f2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005a4a:	f003 0203 	and.w	r2, r3, #3
 8005a4e:	2a02      	cmp	r2, #2
 8005a50:	f000 81b8 	beq.w	8005dc4 <HAL_RCC_OscConfig+0x648>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005a54:	f013 0f01 	tst.w	r3, #1
 8005a58:	d138      	bne.n	8005acc <HAL_RCC_OscConfig+0x350>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005a5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a5e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005a62:	f023 0310 	bic.w	r3, r3, #16
 8005a66:	69e1      	ldr	r1, [r4, #28]
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a72:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005a76:	f043 0301 	orr.w	r3, r3, #1
 8005a7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005a7e:	f7fc fbf3 	bl	8002268 <HAL_GetTick>
 8005a82:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005a84:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8005a88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a8c:	f013 0f02 	tst.w	r3, #2
 8005a90:	d14e      	bne.n	8005b30 <HAL_RCC_OscConfig+0x3b4>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a92:	f7fc fbe9 	bl	8002268 <HAL_GetTick>
 8005a96:	1b80      	subs	r0, r0, r6
 8005a98:	2811      	cmp	r0, #17
 8005a9a:	d9f5      	bls.n	8005a88 <HAL_RCC_OscConfig+0x30c>
          return HAL_TIMEOUT;
 8005a9c:	2003      	movs	r0, #3
 8005a9e:	e194      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005aa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aa4:	6813      	ldr	r3, [r2, #0]
 8005aa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aaa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005aac:	f7fc fbdc 	bl	8002268 <HAL_GetTick>
 8005ab0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005ab2:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005abc:	d0b5      	beq.n	8005a2a <HAL_RCC_OscConfig+0x2ae>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005abe:	f7fc fbd3 	bl	8002268 <HAL_GetTick>
 8005ac2:	1b80      	subs	r0, r0, r6
 8005ac4:	2802      	cmp	r0, #2
 8005ac6:	d9f6      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8005ac8:	2003      	movs	r0, #3
 8005aca:	e17e      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ad0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005ad4:	f023 0301 	bic.w	r3, r3, #1
 8005ad8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8005adc:	f7fc fbc4 	bl	8002268 <HAL_GetTick>
 8005ae0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005ae2:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8005ae6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005aea:	f013 0f02 	tst.w	r3, #2
 8005aee:	d0b4      	beq.n	8005a5a <HAL_RCC_OscConfig+0x2de>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005af0:	f7fc fbba 	bl	8002268 <HAL_GetTick>
 8005af4:	1b80      	subs	r0, r0, r6
 8005af6:	2811      	cmp	r0, #17
 8005af8:	d9f5      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8005afa:	2003      	movs	r0, #3
 8005afc:	e165      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b02:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005b06:	f023 0301 	bic.w	r3, r3, #1
 8005b0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005b0e:	f7fc fbab 	bl	8002268 <HAL_GetTick>
 8005b12:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005b14:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8005b18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b1c:	f013 0f02 	tst.w	r3, #2
 8005b20:	d006      	beq.n	8005b30 <HAL_RCC_OscConfig+0x3b4>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b22:	f7fc fba1 	bl	8002268 <HAL_GetTick>
 8005b26:	1b80      	subs	r0, r0, r6
 8005b28:	2811      	cmp	r0, #17
 8005b2a:	d9f5      	bls.n	8005b18 <HAL_RCC_OscConfig+0x39c>
          return HAL_TIMEOUT;
 8005b2c:	2003      	movs	r0, #3
 8005b2e:	e14c      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	f013 0f04 	tst.w	r3, #4
 8005b36:	f000 80b2 	beq.w	8005c9e <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b3e:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005b48:	d113      	bne.n	8005b72 <HAL_RCC_OscConfig+0x3f6>
      HAL_PWR_EnableBkUpAccess();
 8005b4a:	f7ff fc48 	bl	80053de <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8005b4e:	f7fc fb8b 	bl	8002268 <HAL_GetTick>
 8005b52:	4606      	mov	r6, r0
 8005b54:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8005b58:	f6c5 0700 	movt	r7, #22528	; 0x5800
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005b62:	d106      	bne.n	8005b72 <HAL_RCC_OscConfig+0x3f6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b64:	f7fc fb80 	bl	8002268 <HAL_GetTick>
 8005b68:	1b80      	subs	r0, r0, r6
 8005b6a:	2802      	cmp	r0, #2
 8005b6c:	d9f6      	bls.n	8005b5c <HAL_RCC_OscConfig+0x3e0>
          return HAL_TIMEOUT;
 8005b6e:	2003      	movs	r0, #3
 8005b70:	e12b      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b72:	68e3      	ldr	r3, [r4, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d05e      	beq.n	8005c36 <HAL_RCC_OscConfig+0x4ba>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005b78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b7c:	2b05      	cmp	r3, #5
 8005b7e:	d107      	bne.n	8005b90 <HAL_RCC_OscConfig+0x414>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005b80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b84:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005b88:	f043 0304 	orr.w	r3, r3, #4
 8005b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005b90:	f7fc fb6a 	bl	8002268 <HAL_GetTick>
 8005b94:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b9a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005b9e:	f043 0301 	orr.w	r3, r3, #1
 8005ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005ba6:	4617      	mov	r7, r2
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba8:	f241 3888 	movw	r8, #5000	; 0x1388
 8005bac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bb0:	f013 0f02 	tst.w	r3, #2
 8005bb4:	d106      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x448>
 8005bb6:	f7fc fb57 	bl	8002268 <HAL_GetTick>
 8005bba:	1b80      	subs	r0, r0, r6
 8005bbc:	4540      	cmp	r0, r8
 8005bbe:	d9f5      	bls.n	8005bac <HAL_RCC_OscConfig+0x430>
          return HAL_TIMEOUT;
 8005bc0:	2003      	movs	r0, #3
 8005bc2:	e102      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005bc4:	68e3      	ldr	r3, [r4, #12]
 8005bc6:	f023 0304 	bic.w	r3, r3, #4
 8005bca:	2b81      	cmp	r3, #129	; 0x81
 8005bcc:	d019      	beq.n	8005c02 <HAL_RCC_OscConfig+0x486>
        tickstart = HAL_GetTick();
 8005bce:	f7fc fb4b 	bl	8002268 <HAL_GetTick>
 8005bd2:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bd8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005bdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005be4:	4617      	mov	r7, r2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005be6:	f241 3888 	movw	r8, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bee:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005bf2:	d054      	beq.n	8005c9e <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bf4:	f7fc fb38 	bl	8002268 <HAL_GetTick>
 8005bf8:	1b80      	subs	r0, r0, r6
 8005bfa:	4540      	cmp	r0, r8
 8005bfc:	d9f5      	bls.n	8005bea <HAL_RCC_OscConfig+0x46e>
            return HAL_TIMEOUT;
 8005bfe:	2003      	movs	r0, #3
 8005c00:	e0e3      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
        tickstart = HAL_GetTick();
 8005c02:	f7fc fb31 	bl	8002268 <HAL_GetTick>
 8005c06:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005c08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c0c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005c18:	4617      	mov	r7, r2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c1a:	f241 3888 	movw	r8, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005c1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c22:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005c26:	d13a      	bne.n	8005c9e <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c28:	f7fc fb1e 	bl	8002268 <HAL_GetTick>
 8005c2c:	1b80      	subs	r0, r0, r6
 8005c2e:	4540      	cmp	r0, r8
 8005c30:	d9f5      	bls.n	8005c1e <HAL_RCC_OscConfig+0x4a2>
            return HAL_TIMEOUT;
 8005c32:	2003      	movs	r0, #3
 8005c34:	e0c9      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
      tickstart = HAL_GetTick();
 8005c36:	f7fc fb17 	bl	8002268 <HAL_GetTick>
 8005c3a:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005c3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c40:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005c44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005c4c:	4617      	mov	r7, r2
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c4e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005c52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c56:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005c5a:	d006      	beq.n	8005c6a <HAL_RCC_OscConfig+0x4ee>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5c:	f7fc fb04 	bl	8002268 <HAL_GetTick>
 8005c60:	1b80      	subs	r0, r0, r6
 8005c62:	4540      	cmp	r0, r8
 8005c64:	d9f5      	bls.n	8005c52 <HAL_RCC_OscConfig+0x4d6>
          return HAL_TIMEOUT;
 8005c66:	2003      	movs	r0, #3
 8005c68:	e0af      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
      tickstart = HAL_GetTick();
 8005c6a:	f7fc fafd 	bl	8002268 <HAL_GetTick>
 8005c6e:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c74:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005c78:	f023 0301 	bic.w	r3, r3, #1
 8005c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c80:	4617      	mov	r7, r2
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c82:	f241 3888 	movw	r8, #5000	; 0x1388
 8005c86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c8a:	f013 0f02 	tst.w	r3, #2
 8005c8e:	d006      	beq.n	8005c9e <HAL_RCC_OscConfig+0x522>
 8005c90:	f7fc faea 	bl	8002268 <HAL_GetTick>
 8005c94:	1b80      	subs	r0, r0, r6
 8005c96:	4540      	cmp	r0, r8
 8005c98:	d9f5      	bls.n	8005c86 <HAL_RCC_OscConfig+0x50a>
          return HAL_TIMEOUT;
 8005c9a:	2003      	movs	r0, #3
 8005c9c:	e095      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8091 	beq.w	8005dc8 <HAL_RCC_OscConfig+0x64c>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ca6:	2d0c      	cmp	r5, #12
 8005ca8:	d066      	beq.n	8005d78 <HAL_RCC_OscConfig+0x5fc>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d019      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x566>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cb2:	6813      	ldr	r3, [r2, #0]
 8005cb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cb8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005cba:	f7fc fad5 	bl	8002268 <HAL_GetTick>
 8005cbe:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005cc0:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005cca:	d14e      	bne.n	8005d6a <HAL_RCC_OscConfig+0x5ee>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cd0:	68d1      	ldr	r1, [r2, #12]
 8005cd2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005cd6:	f6ce 63fe 	movt	r3, #61182	; 0xeefe
 8005cda:	400b      	ands	r3, r1
 8005cdc:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8005cde:	2000      	movs	r0, #0
 8005ce0:	e073      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ce6:	6813      	ldr	r3, [r2, #0]
 8005ce8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cec:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005cee:	f7fc fabb 	bl	8002268 <HAL_GetTick>
 8005cf2:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005cf4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8005cf8:	6833      	ldr	r3, [r6, #0]
 8005cfa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005cfe:	d12d      	bne.n	8005d5c <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d04:	68d0      	ldr	r0, [r2, #12]
 8005d06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d0a:	430b      	orrs	r3, r1
 8005d0c:	f248 018c 	movw	r1, #32908	; 0x808c
 8005d10:	f2c1 11c1 	movt	r1, #4545	; 0x11c1
 8005d14:	4001      	ands	r1, r0
 8005d16:	430b      	orrs	r3, r1
 8005d18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005d1a:	430b      	orrs	r3, r1
 8005d1c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005d22:	430b      	orrs	r3, r1
 8005d24:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005d26:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005d2a:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005d2c:	6813      	ldr	r3, [r2, #0]
 8005d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d32:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d34:	68d3      	ldr	r3, [r2, #12]
 8005d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d3a:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8005d3c:	f7fc fa94 	bl	8002268 <HAL_GetTick>
 8005d40:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005d42:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8005d46:	682b      	ldr	r3, [r5, #0]
 8005d48:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005d4c:	d13f      	bne.n	8005dce <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d4e:	f7fc fa8b 	bl	8002268 <HAL_GetTick>
 8005d52:	1b00      	subs	r0, r0, r4
 8005d54:	280a      	cmp	r0, #10
 8005d56:	d9f6      	bls.n	8005d46 <HAL_RCC_OscConfig+0x5ca>
            return HAL_TIMEOUT;
 8005d58:	2003      	movs	r0, #3
 8005d5a:	e036      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d5c:	f7fc fa84 	bl	8002268 <HAL_GetTick>
 8005d60:	1b40      	subs	r0, r0, r5
 8005d62:	280a      	cmp	r0, #10
 8005d64:	d9c8      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x57c>
            return HAL_TIMEOUT;
 8005d66:	2003      	movs	r0, #3
 8005d68:	e02f      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d6a:	f7fc fa7d 	bl	8002268 <HAL_GetTick>
 8005d6e:	1b00      	subs	r0, r0, r4
 8005d70:	280a      	cmp	r0, #10
 8005d72:	d9a7      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x548>
            return HAL_TIMEOUT;
 8005d74:	2003      	movs	r0, #3
 8005d76:	e028      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d02a      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x656>
        pll_config = RCC->PLLCFGR;
 8005d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d80:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005d82:	f003 0103 	and.w	r1, r3, #3
 8005d86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005d88:	4291      	cmp	r1, r2
 8005d8a:	d124      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x65a>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005d8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005d90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d92:	428a      	cmp	r2, r1
 8005d94:	d121      	bne.n	8005dda <HAL_RCC_OscConfig+0x65e>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005d96:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005d9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005d9c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005da0:	d11d      	bne.n	8005dde <HAL_RCC_OscConfig+0x662>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005da2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8005da6:	6c60      	ldr	r0, [r4, #68]	; 0x44
    return HAL_ERROR;
 8005da8:	1a18      	subs	r0, r3, r0
 8005daa:	bf18      	it	ne
 8005dac:	2001      	movne	r0, #1
 8005dae:	e00c      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
 8005db0:	2001      	movs	r0, #1
}
 8005db2:	4770      	bx	lr
        return HAL_ERROR;
 8005db4:	2001      	movs	r0, #1
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
            return HAL_ERROR;
 8005db8:	2001      	movs	r0, #1
 8005dba:	e006      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
        return HAL_ERROR;
 8005dbc:	2001      	movs	r0, #1
 8005dbe:	e004      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
        return HAL_ERROR;
 8005dc0:	2001      	movs	r0, #1
 8005dc2:	e002      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
          return HAL_ERROR;
 8005dc4:	2001      	movs	r0, #1
 8005dc6:	e000      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
  return HAL_OK;
 8005dc8:	2000      	movs	r0, #0
}
 8005dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8005dce:	2000      	movs	r0, #0
 8005dd0:	e7fb      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
        return HAL_ERROR;
 8005dd2:	2001      	movs	r0, #1
 8005dd4:	e7f9      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
          return HAL_ERROR;
 8005dd6:	2001      	movs	r0, #1
 8005dd8:	e7f7      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
 8005dda:	2001      	movs	r0, #1
 8005ddc:	e7f5      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>
 8005dde:	2001      	movs	r0, #1
 8005de0:	e7f3      	b.n	8005dca <HAL_RCC_OscConfig+0x64e>

08005de2 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005de2:	2800      	cmp	r0, #0
 8005de4:	f000 811e 	beq.w	8006024 <HAL_RCC_ClockConfig+0x242>
{
 8005de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dec:	460c      	mov	r4, r1
 8005dee:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005df0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005df4:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	428b      	cmp	r3, r1
 8005e00:	d327      	bcc.n	8005e52 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e02:	682b      	ldr	r3, [r5, #0]
 8005e04:	f013 0f02 	tst.w	r3, #2
 8005e08:	d13f      	bne.n	8005e8a <HAL_RCC_ClockConfig+0xa8>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005e0a:	682b      	ldr	r3, [r5, #0]
 8005e0c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e10:	d153      	bne.n	8005eba <HAL_RCC_ClockConfig+0xd8>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e12:	682b      	ldr	r3, [r5, #0]
 8005e14:	f013 0f04 	tst.w	r3, #4
 8005e18:	d16b      	bne.n	8005ef2 <HAL_RCC_ClockConfig+0x110>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e1a:	682b      	ldr	r3, [r5, #0]
 8005e1c:	f013 0f08 	tst.w	r3, #8
 8005e20:	d17f      	bne.n	8005f22 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e22:	682b      	ldr	r3, [r5, #0]
 8005e24:	f013 0f01 	tst.w	r3, #1
 8005e28:	f000 80c7 	beq.w	8005fba <HAL_RCC_ClockConfig+0x1d8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e2c:	686b      	ldr	r3, [r5, #4]
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	f000 8091 	beq.w	8005f56 <HAL_RCC_ClockConfig+0x174>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	f000 8096 	beq.w	8005f66 <HAL_RCC_ClockConfig+0x184>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f040 809b 	bne.w	8005f76 <HAL_RCC_ClockConfig+0x194>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005e40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e44:	6812      	ldr	r2, [r2, #0]
 8005e46:	f012 0f02 	tst.w	r2, #2
 8005e4a:	f040 809a 	bne.w	8005f82 <HAL_RCC_ClockConfig+0x1a0>
        return HAL_ERROR;
 8005e4e:	2001      	movs	r0, #1
 8005e50:	e0e6      	b.n	8006020 <HAL_RCC_ClockConfig+0x23e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e56:	f6c5 0200 	movt	r2, #22528	; 0x5800
 8005e5a:	6813      	ldr	r3, [r2, #0]
 8005e5c:	f023 0307 	bic.w	r3, r3, #7
 8005e60:	430b      	orrs	r3, r1
 8005e62:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005e64:	f7fc fa00 	bl	8002268 <HAL_GetTick>
 8005e68:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e6a:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 8005e6e:	f6c5 0700 	movt	r7, #22528	; 0x5800
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	42a3      	cmp	r3, r4
 8005e7a:	d0c2      	beq.n	8005e02 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e7c:	f7fc f9f4 	bl	8002268 <HAL_GetTick>
 8005e80:	1b80      	subs	r0, r0, r6
 8005e82:	2802      	cmp	r0, #2
 8005e84:	d9f5      	bls.n	8005e72 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8005e86:	2003      	movs	r0, #3
 8005e88:	e0ca      	b.n	8006020 <HAL_RCC_ClockConfig+0x23e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e8e:	6893      	ldr	r3, [r2, #8]
 8005e90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e94:	68a9      	ldr	r1, [r5, #8]
 8005e96:	430b      	orrs	r3, r1
 8005e98:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005e9a:	f7fc f9e5 	bl	8002268 <HAL_GetTick>
 8005e9e:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005ea0:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005eaa:	d1ae      	bne.n	8005e0a <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005eac:	f7fc f9dc 	bl	8002268 <HAL_GetTick>
 8005eb0:	1b80      	subs	r0, r0, r6
 8005eb2:	2802      	cmp	r0, #2
 8005eb4:	d9f6      	bls.n	8005ea4 <HAL_RCC_ClockConfig+0xc2>
        return HAL_TIMEOUT;
 8005eb6:	2003      	movs	r0, #3
 8005eb8:	e0b2      	b.n	8006020 <HAL_RCC_ClockConfig+0x23e>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ebe:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8005ec2:	6969      	ldr	r1, [r5, #20]
 8005ec4:	f023 030f 	bic.w	r3, r3, #15
 8005ec8:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8005ecc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8005ed0:	f7fc f9ca 	bl	8002268 <HAL_GetTick>
 8005ed4:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005ed6:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8005eda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ede:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005ee2:	d196      	bne.n	8005e12 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ee4:	f7fc f9c0 	bl	8002268 <HAL_GetTick>
 8005ee8:	1b80      	subs	r0, r0, r6
 8005eea:	2802      	cmp	r0, #2
 8005eec:	d9f5      	bls.n	8005eda <HAL_RCC_ClockConfig+0xf8>
        return HAL_TIMEOUT;
 8005eee:	2003      	movs	r0, #3
 8005ef0:	e096      	b.n	8006020 <HAL_RCC_ClockConfig+0x23e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005ef2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ef6:	6893      	ldr	r3, [r2, #8]
 8005ef8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005efc:	68e9      	ldr	r1, [r5, #12]
 8005efe:	430b      	orrs	r3, r1
 8005f00:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005f02:	f7fc f9b1 	bl	8002268 <HAL_GetTick>
 8005f06:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005f08:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005f12:	d182      	bne.n	8005e1a <HAL_RCC_ClockConfig+0x38>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f14:	f7fc f9a8 	bl	8002268 <HAL_GetTick>
 8005f18:	1b80      	subs	r0, r0, r6
 8005f1a:	2802      	cmp	r0, #2
 8005f1c:	d9f6      	bls.n	8005f0c <HAL_RCC_ClockConfig+0x12a>
        return HAL_TIMEOUT;
 8005f1e:	2003      	movs	r0, #3
 8005f20:	e07e      	b.n	8006020 <HAL_RCC_ClockConfig+0x23e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f26:	6893      	ldr	r3, [r2, #8]
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005f28:	6929      	ldr	r1, [r5, #16]
 8005f2a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005f2e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005f32:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005f34:	f7fc f998 	bl	8002268 <HAL_GetTick>
 8005f38:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005f3a:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005f44:	f47f af6d 	bne.w	8005e22 <HAL_RCC_ClockConfig+0x40>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f48:	f7fc f98e 	bl	8002268 <HAL_GetTick>
 8005f4c:	1b80      	subs	r0, r0, r6
 8005f4e:	2802      	cmp	r0, #2
 8005f50:	d9f5      	bls.n	8005f3e <HAL_RCC_ClockConfig+0x15c>
        return HAL_TIMEOUT;
 8005f52:	2003      	movs	r0, #3
 8005f54:	e064      	b.n	8006020 <HAL_RCC_ClockConfig+0x23e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f5a:	6812      	ldr	r2, [r2, #0]
 8005f5c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005f60:	d10f      	bne.n	8005f82 <HAL_RCC_ClockConfig+0x1a0>
        return HAL_ERROR;
 8005f62:	2001      	movs	r0, #1
 8005f64:	e05c      	b.n	8006020 <HAL_RCC_ClockConfig+0x23e>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f6a:	6812      	ldr	r2, [r2, #0]
 8005f6c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005f70:	d107      	bne.n	8005f82 <HAL_RCC_ClockConfig+0x1a0>
        return HAL_ERROR;
 8005f72:	2001      	movs	r0, #1
 8005f74:	e054      	b.n	8006020 <HAL_RCC_ClockConfig+0x23e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005f76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f7a:	6812      	ldr	r2, [r2, #0]
 8005f7c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005f80:	d052      	beq.n	8006028 <HAL_RCC_ClockConfig+0x246>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005f82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f86:	688a      	ldr	r2, [r1, #8]
 8005f88:	f022 0203 	bic.w	r2, r2, #3
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005f90:	f7fc f96a 	bl	8002268 <HAL_GetTick>
 8005f94:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005f96:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f9a:	f241 3888 	movw	r8, #5000	; 0x1388
 8005f9e:	68bb      	ldr	r3, [r7, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fa0:	686a      	ldr	r2, [r5, #4]
 8005fa2:	f003 030c 	and.w	r3, r3, #12
 8005fa6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005faa:	d006      	beq.n	8005fba <HAL_RCC_ClockConfig+0x1d8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fac:	f7fc f95c 	bl	8002268 <HAL_GetTick>
 8005fb0:	1b80      	subs	r0, r0, r6
 8005fb2:	4540      	cmp	r0, r8
 8005fb4:	d9f3      	bls.n	8005f9e <HAL_RCC_ClockConfig+0x1bc>
        return HAL_TIMEOUT;
 8005fb6:	2003      	movs	r0, #3
 8005fb8:	e032      	b.n	8006020 <HAL_RCC_ClockConfig+0x23e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005fbe:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	42a3      	cmp	r3, r4
 8005fca:	d91b      	bls.n	8006004 <HAL_RCC_ClockConfig+0x222>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fcc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005fd0:	f6c5 0200 	movt	r2, #22528	; 0x5800
 8005fd4:	6813      	ldr	r3, [r2, #0]
 8005fd6:	f023 0307 	bic.w	r3, r3, #7
 8005fda:	4323      	orrs	r3, r4
 8005fdc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005fde:	f7fc f943 	bl	8002268 <HAL_GetTick>
 8005fe2:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe4:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 8005fe8:	f6c5 0600 	movt	r6, #22528	; 0x5800
 8005fec:	6833      	ldr	r3, [r6, #0]
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	42a3      	cmp	r3, r4
 8005ff4:	d006      	beq.n	8006004 <HAL_RCC_ClockConfig+0x222>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ff6:	f7fc f937 	bl	8002268 <HAL_GetTick>
 8005ffa:	1b40      	subs	r0, r0, r5
 8005ffc:	2802      	cmp	r0, #2
 8005ffe:	d9f5      	bls.n	8005fec <HAL_RCC_ClockConfig+0x20a>
        return HAL_TIMEOUT;
 8006000:	2003      	movs	r0, #3
 8006002:	e00d      	b.n	8006020 <HAL_RCC_ClockConfig+0x23e>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006004:	f7ff fba9 	bl	800575a <HAL_RCC_GetHCLKFreq>
 8006008:	f240 0300 	movw	r3, #0
 800600c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006010:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8006012:	f240 0308 	movw	r3, #8
 8006016:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800601a:	6818      	ldr	r0, [r3, #0]
 800601c:	f7fc f922 	bl	8002264 <HAL_InitTick>
}
 8006020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8006024:	2001      	movs	r0, #1
}
 8006026:	4770      	bx	lr
        return HAL_ERROR;
 8006028:	2001      	movs	r0, #1
 800602a:	e7f9      	b.n	8006020 <HAL_RCC_ClockConfig+0x23e>

0800602c <HAL_RCC_GetPCLK1Freq>:
{
 800602c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800602e:	f7ff fb94 	bl	800575a <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	f244 63e0 	movw	r3, #18144	; 0x46e0
 800603c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8006040:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8006044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8006048:	40d8      	lsrs	r0, r3
 800604a:	bd08      	pop	{r3, pc}

0800604c <HAL_RCC_GetPCLK2Freq>:
{
 800604c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800604e:	f7ff fb84 	bl	800575a <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	f244 63e0 	movw	r3, #18144	; 0x46e0
 800605c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8006060:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8006064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8006068:	40d8      	lsrs	r0, r3
 800606a:	bd08      	pop	{r3, pc}

0800606c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006070:	6803      	ldr	r3, [r0, #0]
 8006072:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006076:	f040 80a5 	bne.w	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800607a:	2000      	movs	r0, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	f013 0f01 	tst.w	r3, #1
 8006082:	d00a      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006084:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800608a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800608e:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8006092:	b292      	uxth	r2, r2
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	f013 0f02 	tst.w	r3, #2
 80060a0:	d00a      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060a2:	68a2      	ldr	r2, [r4, #8]
 80060a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060a8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80060ac:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80060b0:	b292      	uxth	r2, r2
 80060b2:	4313      	orrs	r3, r2
 80060b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	f013 0f20 	tst.w	r3, #32
 80060be:	d009      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80060c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060c4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80060c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80060cc:	6921      	ldr	r1, [r4, #16]
 80060ce:	430b      	orrs	r3, r1
 80060d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80060da:	d00c      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060dc:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80060de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060e2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80060e6:	0c2a      	lsrs	r2, r5, #16
 80060e8:	0412      	lsls	r2, r2, #16
 80060ea:	ea23 0302 	bic.w	r3, r3, r2
 80060ee:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80060f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80060fc:	d00c      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006100:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006104:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006108:	0c2a      	lsrs	r2, r5, #16
 800610a:	0412      	lsls	r2, r2, #16
 800610c:	ea23 0302 	bic.w	r3, r3, r2
 8006110:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8006114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800611e:	d00c      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006120:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006126:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800612a:	0c2a      	lsrs	r2, r5, #16
 800612c:	0412      	lsls	r2, r2, #16
 800612e:	ea23 0302 	bic.w	r3, r3, r2
 8006132:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8006136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006140:	d154      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x180>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006148:	d161      	bne.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006150:	d16e      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	f013 0f10 	tst.w	r3, #16
 8006158:	d00d      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800615a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800615e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006166:	68e1      	ldr	r1, [r4, #12]
 8006168:	430b      	orrs	r3, r1
 800616a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800616e:	68e3      	ldr	r3, [r4, #12]
 8006170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006174:	d06d      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800617c:	d00f      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x132>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800617e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006182:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006186:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800618a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800618c:	430b      	orrs	r3, r1
 800618e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006192:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006194:	b91b      	cbnz	r3, 800619e <HAL_RCCEx_PeriphCLKConfig+0x132>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006196:	68d3      	ldr	r3, [r2, #12]
 8006198:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800619c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80061a4:	d00d      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80061a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80061ae:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80061b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80061b4:	430b      	orrs	r3, r1
 80061b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80061ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80061bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061c0:	d04c      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 80061c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_PWR_EnableBkUpAccess();
 80061c4:	f7ff f90b 	bl	80053de <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 80061c8:	f7fc f84e 	bl	8002268 <HAL_GetTick>
 80061cc:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80061ce:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80061d2:	f6c5 0600 	movt	r6, #22528	; 0x5800
 80061d6:	6833      	ldr	r3, [r6, #0]
 80061d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80061dc:	d14f      	bne.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x212>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061de:	f7fc f843 	bl	8002268 <HAL_GetTick>
 80061e2:	1b40      	subs	r0, r0, r5
 80061e4:	2802      	cmp	r0, #2
 80061e6:	d9f6      	bls.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
        ret = HAL_TIMEOUT;
 80061e8:	2003      	movs	r0, #3
 80061ea:	e747      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x10>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061ec:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80061ee:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80061f2:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 80061f6:	0919      	lsrs	r1, r3, #4
 80061f8:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80061fc:	ea22 0201 	bic.w	r2, r2, r1
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 800620c:	e799      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800620e:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006210:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8006214:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8006218:	0919      	lsrs	r1, r3, #4
 800621a:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800621e:	ea22 0201 	bic.w	r2, r2, r1
 8006222:	011b      	lsls	r3, r3, #4
 8006224:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 800622e:	e78c      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006230:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006232:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8006236:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 800623a:	0919      	lsrs	r1, r3, #4
 800623c:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006240:	ea22 0201 	bic.w	r2, r2, r1
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8006250:	e77f      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006252:	68d3      	ldr	r3, [r2, #12]
 8006254:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006258:	60d3      	str	r3, [r2, #12]
 800625a:	e78c      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800625c:	68d3      	ldr	r3, [r2, #12]
 800625e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006262:	60d3      	str	r3, [r2, #12]
  return status;
 8006264:	e7ad      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006266:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800626a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800626e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006272:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006274:	430b      	orrs	r3, r1
 8006276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800627a:	2000      	movs	r0, #0
}
 800627c:	e6fe      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800627e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006286:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800628a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800628c:	429a      	cmp	r2, r3
 800628e:	d0ea      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006294:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006298:	f421 7040 	bic.w	r0, r1, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800629c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80062a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80062a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80062a8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80062ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80062b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80062b4:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80062b8:	f011 0f02 	tst.w	r1, #2
 80062bc:	d0d3      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        tickstart = HAL_GetTick();
 80062be:	f7fb ffd3 	bl	8002268 <HAL_GetTick>
 80062c2:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80062c4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c8:	f241 3788 	movw	r7, #5000	; 0x1388
 80062cc:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80062d0:	f013 0f02 	tst.w	r3, #2
 80062d4:	d1c7      	bne.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80062d6:	f7fb ffc7 	bl	8002268 <HAL_GetTick>
 80062da:	1b40      	subs	r0, r0, r5
 80062dc:	42b8      	cmp	r0, r7
 80062de:	d9f5      	bls.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x260>
            ret = HAL_TIMEOUT;
 80062e0:	2003      	movs	r0, #3
 80062e2:	e6cb      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x10>

080062e4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80062e4:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062e6:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80062ea:	2a01      	cmp	r2, #1
 80062ec:	d042      	beq.n	8006374 <HAL_RTC_DeactivateAlarm+0x90>
 80062ee:	2201      	movs	r2, #1
 80062f0:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062f4:	2202      	movs	r2, #2
 80062f6:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062fa:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80062fe:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006302:	20ca      	movs	r0, #202	; 0xca
 8006304:	6250      	str	r0, [r2, #36]	; 0x24
 8006306:	2053      	movs	r0, #83	; 0x53
 8006308:	6250      	str	r0, [r2, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800630a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800630e:	d01e      	beq.n	800634e <HAL_RTC_DeactivateAlarm+0x6a>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006310:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006314:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006318:	6991      	ldr	r1, [r2, #24]
 800631a:	f421 5108 	bic.w	r1, r1, #8704	; 0x2200
 800631e:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006320:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8006322:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006326:	64d1      	str	r1, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006328:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800632a:	f021 0102 	bic.w	r1, r1, #2
 800632e:	6319      	str	r1, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006330:	2102      	movs	r1, #2
 8006332:	65d1      	str	r1, [r2, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006334:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006338:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800633c:	21ff      	movs	r1, #255	; 0xff
 800633e:	6251      	str	r1, [r2, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006340:	2201      	movs	r2, #1
 8006342:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006346:	2000      	movs	r0, #0
 8006348:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

  return HAL_OK;
 800634c:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800634e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006352:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006356:	6991      	ldr	r1, [r2, #24]
 8006358:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 800635c:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800635e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006360:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006364:	6451      	str	r1, [r2, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006366:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006368:	f021 0101 	bic.w	r1, r1, #1
 800636c:	6319      	str	r1, [r3, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800636e:	2101      	movs	r1, #1
 8006370:	65d1      	str	r1, [r2, #92]	; 0x5c
 8006372:	e7df      	b.n	8006334 <HAL_RTC_DeactivateAlarm+0x50>
  __HAL_LOCK(hrtc);
 8006374:	2002      	movs	r0, #2
}
 8006376:	4770      	bx	lr

08006378 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800637c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006380:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006384:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8006386:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006388:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800638a:	f015 0f01 	tst.w	r5, #1
 800638e:	d106      	bne.n	800639e <HAL_RTC_AlarmIRQHandler+0x26>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006390:	f015 0f02 	tst.w	r5, #2
 8006394:	d10c      	bne.n	80063b0 <HAL_RTC_AlarmIRQHandler+0x38>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006396:	2301      	movs	r3, #1
 8006398:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800639c:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800639e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80063a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80063a6:	2201      	movs	r2, #1
 80063a8:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 80063aa:	f7fc f991 	bl	80026d0 <HAL_RTC_AlarmAEventCallback>
 80063ae:	e7ef      	b.n	8006390 <HAL_RTC_AlarmIRQHandler+0x18>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80063b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80063b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80063b8:	2202      	movs	r2, #2
 80063ba:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80063bc:	4620      	mov	r0, r4
 80063be:	f000 fa43 	bl	8006848 <HAL_RTCEx_AlarmBEventCallback>
 80063c2:	e7e8      	b.n	8006396 <HAL_RTC_AlarmIRQHandler+0x1e>

080063c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80063c4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80063c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80063ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80063ce:	68da      	ldr	r2, [r3, #12]
 80063d0:	f022 0220 	bic.w	r2, r2, #32
 80063d4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80063d6:	f7fb ff47 	bl	8002268 <HAL_GetTick>
 80063da:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80063dc:	f44f 5520 	mov.w	r5, #10240	; 0x2800
 80063e0:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80063e4:	68eb      	ldr	r3, [r5, #12]
 80063e6:	f013 0f20 	tst.w	r3, #32
 80063ea:	d107      	bne.n	80063fc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063ec:	f7fb ff3c 	bl	8002268 <HAL_GetTick>
 80063f0:	1b00      	subs	r0, r0, r4
 80063f2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80063f6:	d9f5      	bls.n	80063e4 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
 80063f8:	2003      	movs	r0, #3
 80063fa:	e000      	b.n	80063fe <HAL_RTC_WaitForSynchro+0x3a>
    }
  }

  return HAL_OK;
 80063fc:	2000      	movs	r0, #0
}
 80063fe:	bd38      	pop	{r3, r4, r5, pc}

08006400 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006404:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006408:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006412:	d003      	beq.n	800641c <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8006414:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8006416:	4620      	mov	r0, r4
 8006418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800641c:	4607      	mov	r7, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800641e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006422:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800642c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800642e:	f7fb ff1b 	bl	8002268 <HAL_GetTick>
 8006432:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 8006434:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006436:	f44f 5520 	mov.w	r5, #10240	; 0x2800
 800643a:	f2c4 0500 	movt	r5, #16384	; 0x4000
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800643e:	f04f 0803 	mov.w	r8, #3
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006442:	e008      	b.n	8006456 <RTC_EnterInitMode+0x56>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006444:	f7fb ff10 	bl	8002268 <HAL_GetTick>
 8006448:	1b83      	subs	r3, r0, r6
 800644a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800644e:	bf84      	itt	hi
 8006450:	f887 802d 	strbhi.w	r8, [r7, #45]	; 0x2d
        status = HAL_TIMEOUT;
 8006454:	4644      	movhi	r4, r8
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006456:	68eb      	ldr	r3, [r5, #12]
 8006458:	f013 0f40 	tst.w	r3, #64	; 0x40
 800645c:	d1db      	bne.n	8006416 <RTC_EnterInitMode+0x16>
 800645e:	2c03      	cmp	r4, #3
 8006460:	d1f0      	bne.n	8006444 <RTC_EnterInitMode+0x44>
 8006462:	e7d8      	b.n	8006416 <RTC_EnterInitMode+0x16>

08006464 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006464:	b510      	push	{r4, lr}
 8006466:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006468:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800646c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006476:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	f013 0f20 	tst.w	r3, #32
 800647e:	d106      	bne.n	800648e <RTC_ExitInitMode+0x2a>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006480:	f7ff ffa0 	bl	80063c4 <HAL_RTC_WaitForSynchro>
 8006484:	b1c8      	cbz	r0, 80064ba <RTC_ExitInitMode+0x56>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006486:	2003      	movs	r0, #3
 8006488:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800648c:	e015      	b.n	80064ba <RTC_ExitInitMode+0x56>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800648e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006492:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006496:	699a      	ldr	r2, [r3, #24]
 8006498:	f022 0220 	bic.w	r2, r2, #32
 800649c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800649e:	f7ff ff91 	bl	80063c4 <HAL_RTC_WaitForSynchro>
 80064a2:	b110      	cbz	r0, 80064aa <RTC_ExitInitMode+0x46>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064a4:	2003      	movs	r0, #3
 80064a6:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80064aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80064ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80064b2:	699a      	ldr	r2, [r3, #24]
 80064b4:	f042 0220 	orr.w	r2, r2, #32
 80064b8:	619a      	str	r2, [r3, #24]
  }

  return status;
}
 80064ba:	bd10      	pop	{r4, pc}

080064bc <HAL_RTC_Init>:
  if (hrtc != NULL)
 80064bc:	2800      	cmp	r0, #0
 80064be:	d061      	beq.n	8006584 <HAL_RTC_Init+0xc8>
{
 80064c0:	b510      	push	{r4, lr}
 80064c2:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80064c4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80064c8:	b17b      	cbz	r3, 80064ea <HAL_RTC_Init+0x2e>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80064ca:	2302      	movs	r3, #2
 80064cc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80064d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80064d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f013 0f10 	tst.w	r3, #16
 80064de:	d009      	beq.n	80064f4 <HAL_RTC_Init+0x38>
      hrtc->State = HAL_RTC_STATE_READY;
 80064e0:	2301      	movs	r3, #1
 80064e2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80064e6:	2000      	movs	r0, #0
}
 80064e8:	bd10      	pop	{r4, pc}
      hrtc->Lock = HAL_UNLOCKED;
 80064ea:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 80064ee:	f7fb fc50 	bl	8001d92 <HAL_RTC_MspInit>
 80064f2:	e7ea      	b.n	80064ca <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80064f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80064fc:	22ca      	movs	r2, #202	; 0xca
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24
 8006500:	2253      	movs	r2, #83	; 0x53
 8006502:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8006504:	4620      	mov	r0, r4
 8006506:	f7ff ff7b 	bl	8006400 <RTC_EnterInitMode>
      if (status == HAL_OK)
 800650a:	b130      	cbz	r0, 800651a <HAL_RTC_Init+0x5e>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800650c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006510:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006514:	22ff      	movs	r2, #255	; 0xff
 8006516:	625a      	str	r2, [r3, #36]	; 0x24
  return status;
 8006518:	e7e6      	b.n	80064e8 <HAL_RTC_Init+0x2c>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800651a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800651e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006522:	699a      	ldr	r2, [r3, #24]
 8006524:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8006528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800652c:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800652e:	6999      	ldr	r1, [r3, #24]
 8006530:	6862      	ldr	r2, [r4, #4]
 8006532:	6920      	ldr	r0, [r4, #16]
 8006534:	4302      	orrs	r2, r0
 8006536:	430a      	orrs	r2, r1
 8006538:	69a1      	ldr	r1, [r4, #24]
 800653a:	430a      	orrs	r2, r1
 800653c:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800653e:	68a1      	ldr	r1, [r4, #8]
 8006540:	68e2      	ldr	r2, [r4, #12]
 8006542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006546:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006548:	68d9      	ldr	r1, [r3, #12]
 800654a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800654c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800654e:	4302      	orrs	r2, r0
 8006550:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
 8006554:	430a      	orrs	r2, r1
 8006556:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8006558:	4620      	mov	r0, r4
 800655a:	f7ff ff83 	bl	8006464 <RTC_ExitInitMode>
        if (status == HAL_OK)
 800655e:	2800      	cmp	r0, #0
 8006560:	d1d4      	bne.n	800650c <HAL_RTC_Init+0x50>
          MODIFY_REG(RTC->CR, \
 8006562:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006566:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800656a:	6991      	ldr	r1, [r2, #24]
 800656c:	6a23      	ldr	r3, [r4, #32]
 800656e:	69e0      	ldr	r0, [r4, #28]
 8006570:	4303      	orrs	r3, r0
 8006572:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8006576:	430b      	orrs	r3, r1
 8006578:	6961      	ldr	r1, [r4, #20]
 800657a:	430b      	orrs	r3, r1
 800657c:	6193      	str	r3, [r2, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800657e:	23ff      	movs	r3, #255	; 0xff
 8006580:	6253      	str	r3, [r2, #36]	; 0x24
    if (status == HAL_OK)
 8006582:	e7ad      	b.n	80064e0 <HAL_RTC_Init+0x24>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006584:	2001      	movs	r0, #1
}
 8006586:	4770      	bx	lr

08006588 <RTC_ByteToBcd2>:
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8006588:	2809      	cmp	r0, #9
 800658a:	d909      	bls.n	80065a0 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0U;
 800658c:	2300      	movs	r3, #0
  {
    bcdhigh++;
 800658e:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8006590:	380a      	subs	r0, #10
 8006592:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8006594:	2809      	cmp	r0, #9
 8006596:	d8fa      	bhi.n	800658e <RTC_ByteToBcd2+0x6>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006598:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800659c:	b2c0      	uxtb	r0, r0
 800659e:	4770      	bx	lr
  uint32_t bcdhigh = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e7f9      	b.n	8006598 <RTC_ByteToBcd2+0x10>

080065a4 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80065a4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	f000 80b0 	beq.w	800670e <HAL_RTC_SetAlarm_IT+0x16a>
{
 80065ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b2:	4605      	mov	r5, r0
 80065b4:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 80065b6:	2301      	movs	r3, #1
 80065b8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80065bc:	2302      	movs	r3, #2
 80065be:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80065c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80065c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 80065d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d4:	f000 80b9 	beq.w	800674a <HAL_RTC_SetAlarm_IT+0x1a6>
    if (Format == RTC_FORMAT_BIN)
 80065d8:	2a00      	cmp	r2, #0
 80065da:	d166      	bne.n	80066aa <HAL_RTC_SetAlarm_IT+0x106>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80065dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80065e0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	f013 0f40 	tst.w	r3, #64	; 0x40
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80065ea:	bf04      	itt	eq
 80065ec:	2300      	moveq	r3, #0
 80065ee:	70cb      	strbeq	r3, [r1, #3]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80065f0:	7808      	ldrb	r0, [r1, #0]
 80065f2:	f7ff ffc9 	bl	8006588 <RTC_ByteToBcd2>
 80065f6:	4607      	mov	r7, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80065f8:	7860      	ldrb	r0, [r4, #1]
 80065fa:	f7ff ffc5 	bl	8006588 <RTC_ByteToBcd2>
 80065fe:	4606      	mov	r6, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006600:	78a0      	ldrb	r0, [r4, #2]
 8006602:	f7ff ffc1 	bl	8006588 <RTC_ByteToBcd2>
 8006606:	4680      	mov	r8, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006608:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800660c:	f7ff ffbc 	bl	8006588 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006610:	6963      	ldr	r3, [r4, #20]
 8006612:	6a22      	ldr	r2, [r4, #32]
 8006614:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006616:	78e2      	ldrb	r2, [r4, #3]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006618:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 800661c:	ea43 0308 	orr.w	r3, r3, r8
 8006620:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006624:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8006628:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800662c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006630:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006634:	22ca      	movs	r2, #202	; 0xca
 8006636:	625a      	str	r2, [r3, #36]	; 0x24
 8006638:	2253      	movs	r2, #83	; 0x53
 800663a:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800663c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800663e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006642:	d066      	beq.n	8006712 <HAL_RTC_SetAlarm_IT+0x16e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006644:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006648:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800664c:	699a      	ldr	r2, [r3, #24]
 800664e:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8006652:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006654:	2202      	movs	r2, #2
 8006656:	65da      	str	r2, [r3, #92]	; 0x5c
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006658:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800665a:	69a2      	ldr	r2, [r4, #24]
 800665c:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800665e:	6862      	ldr	r2, [r4, #4]
 8006660:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006664:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006668:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800666a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800666c:	f042 0202 	orr.w	r2, r2, #2
 8006670:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006672:	699a      	ldr	r2, [r3, #24]
 8006674:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8006678:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800667a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800667e:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8006682:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006686:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800668a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800668e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006692:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006696:	22ff      	movs	r2, #255	; 0xff
 8006698:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800669a:	2301      	movs	r3, #1
 800669c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 80066a0:	2000      	movs	r0, #0
 80066a2:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 80066a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80066aa:	6948      	ldr	r0, [r1, #20]
 80066ac:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 80066b0:	d00c      	beq.n	80066cc <HAL_RTC_SetAlarm_IT+0x128>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80066b2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80066b6:	d009      	beq.n	80066cc <HAL_RTC_SetAlarm_IT+0x128>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80066b8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80066bc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80066c0:	6992      	ldr	r2, [r2, #24]
 80066c2:	f012 0f40 	tst.w	r2, #64	; 0x40
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80066c6:	bf04      	itt	eq
 80066c8:	2200      	moveq	r2, #0
 80066ca:	70ca      	strbeq	r2, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80066cc:	6a22      	ldr	r2, [r4, #32]
 80066ce:	4310      	orrs	r0, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80066d0:	78a3      	ldrb	r3, [r4, #2]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80066d2:	4318      	orrs	r0, r3
 80066d4:	7823      	ldrb	r3, [r4, #0]
 80066d6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80066da:	7863      	ldrb	r3, [r4, #1]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80066dc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80066e0:	78e3      	ldrb	r3, [r4, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80066e2:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80066e6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80066ea:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80066ee:	e79d      	b.n	800662c <HAL_RTC_SetAlarm_IT+0x88>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80066f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80066f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80066f8:	699a      	ldr	r2, [r3, #24]
 80066fa:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80066fe:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006700:	2201      	movs	r2, #1
 8006702:	65da      	str	r2, [r3, #92]	; 0x5c
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006704:	69a2      	ldr	r2, [r4, #24]
 8006706:	69e1      	ldr	r1, [r4, #28]
 8006708:	430a      	orrs	r2, r1
 800670a:	645a      	str	r2, [r3, #68]	; 0x44
 800670c:	e00e      	b.n	800672c <HAL_RTC_SetAlarm_IT+0x188>
  __HAL_LOCK(hrtc);
 800670e:	2002      	movs	r0, #2
}
 8006710:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006712:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006716:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800671a:	699a      	ldr	r2, [r3, #24]
 800671c:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8006720:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006722:	2201      	movs	r2, #1
 8006724:	65da      	str	r2, [r3, #92]	; 0x5c
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006726:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006728:	69a2      	ldr	r2, [r4, #24]
 800672a:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800672c:	6862      	ldr	r2, [r4, #4]
 800672e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006732:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006736:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006738:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800673a:	f042 0201 	orr.w	r2, r2, #1
 800673e:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006740:	699a      	ldr	r2, [r3, #24]
 8006742:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8006746:	619a      	str	r2, [r3, #24]
 8006748:	e797      	b.n	800667a <HAL_RTC_SetAlarm_IT+0xd6>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800674a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800674e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006752:	22ca      	movs	r2, #202	; 0xca
 8006754:	625a      	str	r2, [r3, #36]	; 0x24
 8006756:	2253      	movs	r2, #83	; 0x53
 8006758:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800675a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800675c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006760:	d0c6      	beq.n	80066f0 <HAL_RTC_SetAlarm_IT+0x14c>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006762:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006766:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800676a:	699a      	ldr	r2, [r3, #24]
 800676c:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8006770:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006772:	2202      	movs	r2, #2
 8006774:	65da      	str	r2, [r3, #92]	; 0x5c
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006776:	69a2      	ldr	r2, [r4, #24]
 8006778:	69e1      	ldr	r1, [r4, #28]
 800677a:	430a      	orrs	r2, r1
 800677c:	64da      	str	r2, [r3, #76]	; 0x4c
 800677e:	e76e      	b.n	800665e <HAL_RTC_SetAlarm_IT+0xba>

08006780 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006780:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006784:	2b01      	cmp	r3, #1
 8006786:	d01a      	beq.n	80067be <HAL_RTCEx_EnableBypassShadow+0x3e>
 8006788:	2101      	movs	r1, #1
 800678a:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800678e:	2302      	movs	r3, #2
 8006790:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006794:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006798:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800679c:	22ca      	movs	r2, #202	; 0xca
 800679e:	625a      	str	r2, [r3, #36]	; 0x24
 80067a0:	2253      	movs	r2, #83	; 0x53
 80067a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80067a4:	699a      	ldr	r2, [r3, #24]
 80067a6:	f042 0220 	orr.w	r2, r2, #32
 80067aa:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067ac:	22ff      	movs	r2, #255	; 0xff
 80067ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80067b0:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80067b4:	2300      	movs	r3, #0
 80067b6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80067ba:	4618      	mov	r0, r3
 80067bc:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80067be:	2002      	movs	r0, #2
}
 80067c0:	4770      	bx	lr

080067c2 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067c2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d025      	beq.n	8006816 <HAL_RTCEx_SetSSRU_IT+0x54>
 80067ca:	f04f 0c01 	mov.w	ip, #1
 80067ce:	f880 c02c 	strb.w	ip, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067d2:	2302      	movs	r3, #2
 80067d4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80067dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80067e0:	22ca      	movs	r2, #202	; 0xca
 80067e2:	625a      	str	r2, [r3, #36]	; 0x24
 80067e4:	2253      	movs	r2, #83	; 0x53
 80067e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80067e8:	699a      	ldr	r2, [r3, #24]
 80067ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067ee:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80067f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067f4:	f6c5 0200 	movt	r2, #22528	; 0x5800
 80067f8:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 80067fc:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8006800:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006804:	22ff      	movs	r2, #255	; 0xff
 8006806:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006808:	f880 c02d 	strb.w	ip, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800680c:	2300      	movs	r3, #0
 800680e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006812:	4618      	mov	r0, r3
 8006814:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8006816:	2002      	movs	r0, #2
}
 8006818:	4770      	bx	lr

0800681a <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800681a:	b510      	push	{r4, lr}
 800681c:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800681e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006822:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006828:	f013 0f40 	tst.w	r3, #64	; 0x40
 800682c:	d103      	bne.n	8006836 <HAL_RTCEx_SSRUIRQHandler+0x1c>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800682e:	2301      	movs	r3, #1
 8006830:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006834:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8006836:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800683a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800683e:	2240      	movs	r2, #64	; 0x40
 8006840:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006842:	f7fb ff49 	bl	80026d8 <HAL_RTCEx_SSRUEventCallback>
 8006846:	e7f2      	b.n	800682e <HAL_RTCEx_SSRUIRQHandler+0x14>

08006848 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006848:	4770      	bx	lr

0800684a <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800684a:	0089      	lsls	r1, r1, #2
 800684c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006850:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006854:	600a      	str	r2, [r1, #0]
}
 8006856:	4770      	bx	lr

08006858 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006858:	0089      	lsls	r1, r1, #2
 800685a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800685e:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006862:	6808      	ldr	r0, [r1, #0]
}
 8006864:	4770      	bx	lr

08006866 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006866:	2800      	cmp	r0, #0
 8006868:	f000 808c 	beq.w	8006984 <HAL_SPI_Init+0x11e>
{
 800686c:	b510      	push	{r4, lr}
 800686e:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006870:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006872:	b933      	cbnz	r3, 8006882 <HAL_SPI_Init+0x1c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006874:	6843      	ldr	r3, [r0, #4]
 8006876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800687a:	d005      	beq.n	8006888 <HAL_SPI_Init+0x22>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800687c:	2300      	movs	r3, #0
 800687e:	61c3      	str	r3, [r0, #28]
 8006880:	e002      	b.n	8006888 <HAL_SPI_Init+0x22>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006882:	2300      	movs	r3, #0
 8006884:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006886:	6143      	str	r3, [r0, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006888:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800688c:	2b00      	cmp	r3, #0
 800688e:	d05b      	beq.n	8006948 <HAL_SPI_Init+0xe2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006890:	2302      	movs	r3, #2
 8006892:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006896:	6822      	ldr	r2, [r4, #0]
 8006898:	6813      	ldr	r3, [r2, #0]
 800689a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800689e:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068a0:	68e3      	ldr	r3, [r4, #12]
 80068a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068a6:	bf8c      	ite	hi
 80068a8:	2100      	movhi	r1, #0
 80068aa:	2101      	movls	r1, #1
 80068ac:	0309      	lsls	r1, r1, #12
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80068ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068b6:	bf1c      	itt	ne
 80068b8:	2300      	movne	r3, #0
 80068ba:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068bc:	6822      	ldr	r2, [r4, #0]
 80068be:	6863      	ldr	r3, [r4, #4]
 80068c0:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80068c4:	68a0      	ldr	r0, [r4, #8]
 80068c6:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80068ca:	4303      	orrs	r3, r0
 80068cc:	6920      	ldr	r0, [r4, #16]
 80068ce:	f000 0002 	and.w	r0, r0, #2
 80068d2:	4303      	orrs	r3, r0
 80068d4:	6960      	ldr	r0, [r4, #20]
 80068d6:	f000 0001 	and.w	r0, r0, #1
 80068da:	4303      	orrs	r3, r0
 80068dc:	69a0      	ldr	r0, [r4, #24]
 80068de:	f400 7000 	and.w	r0, r0, #512	; 0x200
 80068e2:	4303      	orrs	r3, r0
 80068e4:	69e0      	ldr	r0, [r4, #28]
 80068e6:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80068ea:	4303      	orrs	r3, r0
 80068ec:	6a20      	ldr	r0, [r4, #32]
 80068ee:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80068f2:	4303      	orrs	r3, r0
 80068f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80068f6:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 80068fa:	4303      	orrs	r3, r0
 80068fc:	6013      	str	r3, [r2, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006904:	d026      	beq.n	8006954 <HAL_SPI_Init+0xee>
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006906:	6822      	ldr	r2, [r4, #0]
 8006908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800690a:	f003 0310 	and.w	r3, r3, #16
 800690e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006910:	f000 0008 	and.w	r0, r0, #8
 8006914:	4303      	orrs	r3, r0
 8006916:	68e0      	ldr	r0, [r4, #12]
 8006918:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 800691c:	4303      	orrs	r3, r0
 800691e:	8b60      	ldrh	r0, [r4, #26]
 8006920:	f000 0004 	and.w	r0, r0, #4
 8006924:	4303      	orrs	r3, r0
 8006926:	430b      	orrs	r3, r1
 8006928:	6053      	str	r3, [r2, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800692a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800692c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006930:	d024      	beq.n	800697c <HAL_SPI_Init+0x116>
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006932:	6822      	ldr	r2, [r4, #0]
 8006934:	69d3      	ldr	r3, [r2, #28]
 8006936:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800693a:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800693c:	2000      	movs	r0, #0
 800693e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006940:	2301      	movs	r3, #1
 8006942:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8006946:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8006948:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800694c:	4620      	mov	r0, r4
 800694e:	f7fb fa88 	bl	8001e62 <HAL_SPI_MspInit>
 8006952:	e79d      	b.n	8006890 <HAL_SPI_Init+0x2a>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006954:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006956:	b973      	cbnz	r3, 8006976 <HAL_SPI_Init+0x110>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006958:	68e3      	ldr	r3, [r4, #12]
 800695a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800695e:	d907      	bls.n	8006970 <HAL_SPI_Init+0x10a>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006960:	2302      	movs	r3, #2
 8006962:	6323      	str	r3, [r4, #48]	; 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8006964:	6822      	ldr	r2, [r4, #0]
 8006966:	6813      	ldr	r3, [r2, #0]
 8006968:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	e7ca      	b.n	8006906 <HAL_SPI_Init+0xa0>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006970:	2301      	movs	r3, #1
 8006972:	6323      	str	r3, [r4, #48]	; 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006974:	e7c7      	b.n	8006906 <HAL_SPI_Init+0xa0>
 8006976:	2b02      	cmp	r3, #2
 8006978:	d1c5      	bne.n	8006906 <HAL_SPI_Init+0xa0>
 800697a:	e7f3      	b.n	8006964 <HAL_SPI_Init+0xfe>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8006980:	611a      	str	r2, [r3, #16]
 8006982:	e7d6      	b.n	8006932 <HAL_SPI_Init+0xcc>
    return HAL_ERROR;
 8006984:	2001      	movs	r0, #1
}
 8006986:	4770      	bx	lr

08006988 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006988:	2300      	movs	r3, #0
 800698a:	f6c5 0301 	movt	r3, #22529	; 0x5801
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006994:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006996:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 800699a:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800699c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80069a0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069a8:	601a      	str	r2, [r3, #0]
}
 80069aa:	4770      	bx	lr

080069ac <HAL_SUBGHZ_Init>:
  if (hsubghz == NULL)
 80069ac:	b370      	cbz	r0, 8006a0c <HAL_SUBGHZ_Init+0x60>
{
 80069ae:	b510      	push	{r4, lr}
 80069b0:	b082      	sub	sp, #8
 80069b2:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 80069b4:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80069b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80069ba:	b34b      	cbz	r3, 8006a10 <HAL_SUBGHZ_Init+0x64>
 80069bc:	2a03      	cmp	r2, #3
 80069be:	d06b      	beq.n	8006a98 <HAL_SUBGHZ_Init+0xec>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80069c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069c4:	f6c5 0300 	movt	r3, #22528	; 0x5800
 80069c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069cc:	619a      	str	r2, [r3, #24]
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80069ce:	6820      	ldr	r0, [r4, #0]
 80069d0:	f7ff ffda 	bl	8006988 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80069d4:	2301      	movs	r3, #1
 80069d6:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80069d8:	2000      	movs	r0, #0
 80069da:	60a0      	str	r0, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80069dc:	2301      	movs	r3, #1
 80069de:	71a3      	strb	r3, [r4, #6]
}
 80069e0:	b002      	add	sp, #8
 80069e2:	bd10      	pop	{r4, pc}
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80069e4:	2001      	movs	r0, #1
 80069e6:	60a0      	str	r0, [r4, #8]
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80069e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069ec:	f6c5 0300 	movt	r3, #22528	; 0x5800
 80069f0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80069f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80069fc:	689a      	ldr	r2, [r3, #8]
 80069fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a02:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a08:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8006a0a:	e7e7      	b.n	80069dc <HAL_SUBGHZ_Init+0x30>
    return status;
 8006a0c:	2001      	movs	r0, #1
}
 8006a0e:	4770      	bx	lr
    hsubghz->Lock = HAL_UNLOCKED;
 8006a10:	2300      	movs	r3, #0
 8006a12:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8006a14:	f7fb fb2a 	bl	800206c <HAL_SUBGHZ_MspInit>
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006a18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a1c:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8006a20:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006a24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006a30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a34:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006a38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006a40:	f240 0300 	movw	r3, #0
 8006a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006a4e:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006a52:	2264      	movs	r2, #100	; 0x64
 8006a54:	fb02 f303 	mul.w	r3, r2, r3
 8006a58:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006a5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
      if (count == 0U)
 8006a5e:	9b01      	ldr	r3, [sp, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0bf      	beq.n	80069e4 <HAL_SUBGHZ_Init+0x38>
      count--;
 8006a64:	9b01      	ldr	r3, [sp, #4]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006a6e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006a72:	d1f4      	bne.n	8006a5e <HAL_SUBGHZ_Init+0xb2>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a78:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8006a7c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006a80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a8e:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006a90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a94:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8006a96:	e79a      	b.n	80069ce <HAL_SUBGHZ_Init+0x22>
    hsubghz->Lock = HAL_UNLOCKED;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8006a9c:	f7fb fae6 	bl	800206c <HAL_SUBGHZ_MspInit>
 8006aa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006aa4:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8006aa8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006aac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ab0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006ab4:	e784      	b.n	80069c0 <HAL_SUBGHZ_Init+0x14>

08006ab6 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	4684      	mov	ip, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006aba:	f240 0300 	movw	r3, #0
 8006abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006ac8:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006acc:	2264      	movs	r2, #100	; 0x64
 8006ace:	fb02 f303 	mul.w	r3, r2, r3
 8006ad2:	9301      	str	r3, [sp, #4]
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f6c5 0201 	movt	r2, #22529	; 0x5801
    if (count == 0U)
 8006ada:	9b01      	ldr	r3, [sp, #4]
 8006adc:	b143      	cbz	r3, 8006af0 <SUBGHZSPI_Transmit+0x3a>
    count--;
 8006ade:	9b01      	ldr	r3, [sp, #4]
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006ae4:	6893      	ldr	r3, [r2, #8]
 8006ae6:	f013 0f02 	tst.w	r3, #2
 8006aea:	d0f6      	beq.n	8006ada <SUBGHZSPI_Transmit+0x24>
  HAL_StatusTypeDef status = HAL_OK;
 8006aec:	2000      	movs	r0, #0
 8006aee:	e002      	b.n	8006af6 <SUBGHZSPI_Transmit+0x40>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006af0:	2001      	movs	r0, #1
 8006af2:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8006af6:	2300      	movs	r3, #0
 8006af8:	f6c5 0301 	movt	r3, #22529	; 0x5801
 8006afc:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006afe:	f240 0300 	movw	r3, #0
 8006b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006b0c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006b10:	2264      	movs	r2, #100	; 0x64
 8006b12:	fb02 f303 	mul.w	r3, r2, r3
 8006b16:	9301      	str	r3, [sp, #4]
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f6c5 0201 	movt	r2, #22529	; 0x5801
    if (count == 0U)
 8006b1e:	9b01      	ldr	r3, [sp, #4]
 8006b20:	b13b      	cbz	r3, 8006b32 <SUBGHZSPI_Transmit+0x7c>
    count--;
 8006b22:	9b01      	ldr	r3, [sp, #4]
 8006b24:	3b01      	subs	r3, #1
 8006b26:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006b28:	6893      	ldr	r3, [r2, #8]
 8006b2a:	f013 0f01 	tst.w	r3, #1
 8006b2e:	d0f6      	beq.n	8006b1e <SUBGHZSPI_Transmit+0x68>
 8006b30:	e002      	b.n	8006b38 <SUBGHZSPI_Transmit+0x82>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006b32:	2001      	movs	r0, #1
 8006b34:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f6c5 0301 	movt	r3, #22529	; 0x5801
 8006b3e:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8006b40:	b002      	add	sp, #8
 8006b42:	4770      	bx	lr

08006b44 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006b44:	b082      	sub	sp, #8
 8006b46:	4684      	mov	ip, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006b48:	f240 0300 	movw	r3, #0
 8006b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006b56:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006b5a:	2264      	movs	r2, #100	; 0x64
 8006b5c:	fb02 f303 	mul.w	r3, r2, r3
 8006b60:	9301      	str	r3, [sp, #4]
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006b62:	2200      	movs	r2, #0
 8006b64:	f6c5 0201 	movt	r2, #22529	; 0x5801
    if (count == 0U)
 8006b68:	9b01      	ldr	r3, [sp, #4]
 8006b6a:	b143      	cbz	r3, 8006b7e <SUBGHZSPI_Receive+0x3a>
    count--;
 8006b6c:	9b01      	ldr	r3, [sp, #4]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006b72:	6893      	ldr	r3, [r2, #8]
 8006b74:	f013 0f02 	tst.w	r3, #2
 8006b78:	d0f6      	beq.n	8006b68 <SUBGHZSPI_Receive+0x24>
  HAL_StatusTypeDef status = HAL_OK;
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	e002      	b.n	8006b84 <SUBGHZSPI_Receive+0x40>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006b7e:	2001      	movs	r0, #1
 8006b80:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8006b84:	2300      	movs	r3, #0
 8006b86:	f6c5 0301 	movt	r3, #22529	; 0x5801
 8006b8a:	22ff      	movs	r2, #255	; 0xff
 8006b8c:	731a      	strb	r2, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006b8e:	f240 0300 	movw	r3, #0
 8006b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006b9c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006ba0:	2264      	movs	r2, #100	; 0x64
 8006ba2:	fb02 f303 	mul.w	r3, r2, r3
 8006ba6:	9301      	str	r3, [sp, #4]
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f6c5 0201 	movt	r2, #22529	; 0x5801
    if (count == 0U)
 8006bae:	9b01      	ldr	r3, [sp, #4]
 8006bb0:	b13b      	cbz	r3, 8006bc2 <SUBGHZSPI_Receive+0x7e>
    count--;
 8006bb2:	9b01      	ldr	r3, [sp, #4]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006bb8:	6893      	ldr	r3, [r2, #8]
 8006bba:	f013 0f01 	tst.w	r3, #1
 8006bbe:	d0f6      	beq.n	8006bae <SUBGHZSPI_Receive+0x6a>
 8006bc0:	e002      	b.n	8006bc8 <SUBGHZSPI_Receive+0x84>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006bc2:	2001      	movs	r0, #1
 8006bc4:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f6c5 0301 	movt	r3, #22529	; 0x5801
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	700b      	strb	r3, [r1, #0]

  return status;
}
 8006bd2:	b002      	add	sp, #8
 8006bd4:	4770      	bx	lr

08006bd6 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006bd6:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006bd8:	f240 0300 	movw	r3, #0
 8006bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006be6:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8006bea:	2264      	movs	r2, #100	; 0x64
 8006bec:	fb02 f303 	mul.w	r3, r2, r3
 8006bf0:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006bf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006bf6:	f6c5 0100 	movt	r1, #22528	; 0x5800
 8006bfa:	694b      	ldr	r3, [r1, #20]
 8006bfc:	f3c3 0380 	ubfx	r3, r3, #2, #1
  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
 8006c00:	9a01      	ldr	r2, [sp, #4]
 8006c02:	b152      	cbz	r2, 8006c1a <SUBGHZ_WaitOnBusy+0x44>
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
      break;
    }
    count--;
 8006c04:	9a01      	ldr	r2, [sp, #4]
 8006c06:	3a01      	subs	r2, #1
 8006c08:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006c0a:	694a      	ldr	r2, [r1, #20]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006c0c:	f012 0f02 	tst.w	r2, #2
 8006c10:	d001      	beq.n	8006c16 <SUBGHZ_WaitOnBusy+0x40>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1f1      	bne.n	8006bfa <SUBGHZ_WaitOnBusy+0x24>
  status = HAL_OK;
 8006c16:	2000      	movs	r0, #0
 8006c18:	e002      	b.n	8006c20 <SUBGHZ_WaitOnBusy+0x4a>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8006c1e:	2001      	movs	r0, #1

  return status;
}
 8006c20:	b002      	add	sp, #8
 8006c22:	4770      	bx	lr

08006c24 <SUBGHZ_CheckDeviceReady>:
{
 8006c24:	b500      	push	{lr}
 8006c26:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006c28:	7903      	ldrb	r3, [r0, #4]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d004      	beq.n	8006c38 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006c2e:	f7ff ffd2 	bl	8006bd6 <SUBGHZ_WaitOnBusy>
}
 8006c32:	b003      	add	sp, #12
 8006c34:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006c38:	f240 0300 	movw	r3, #0
 8006c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006c46:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8006c4a:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c50:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8006c54:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      count--;
 8006c60:	9b01      	ldr	r3, [sp, #4]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8006c66:	9b01      	ldr	r3, [sp, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1f9      	bne.n	8006c60 <SUBGHZ_CheckDeviceReady+0x3c>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c70:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8006c74:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8006c80:	e7d5      	b.n	8006c2e <SUBGHZ_CheckDeviceReady+0xa>

08006c82 <HAL_SUBGHZ_WriteRegisters>:
{
 8006c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c84:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006c86:	7980      	ldrb	r0, [r0, #6]
 8006c88:	b2c0      	uxtb	r0, r0
 8006c8a:	2801      	cmp	r0, #1
 8006c8c:	d144      	bne.n	8006d18 <HAL_SUBGHZ_WriteRegisters+0x96>
 8006c8e:	460d      	mov	r5, r1
 8006c90:	4617      	mov	r7, r2
 8006c92:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006c94:	7963      	ldrb	r3, [r4, #5]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d040      	beq.n	8006d1c <HAL_SUBGHZ_WriteRegisters+0x9a>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	7163      	strb	r3, [r4, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	71a3      	strb	r3, [r4, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f7ff ffbe 	bl	8006c24 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cac:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8006cb0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006cb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006cbc:	210d      	movs	r1, #13
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f7ff fef9 	bl	8006ab6 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006cc4:	0a29      	lsrs	r1, r5, #8
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f7ff fef5 	bl	8006ab6 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006ccc:	b2e9      	uxtb	r1, r5
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f7ff fef1 	bl	8006ab6 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006cd4:	b156      	cbz	r6, 8006cec <HAL_SUBGHZ_WriteRegisters+0x6a>
 8006cd6:	1e7d      	subs	r5, r7, #1
 8006cd8:	3e01      	subs	r6, #1
 8006cda:	fa17 f686 	uxtah	r6, r7, r6
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006cde:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f7ff fee7 	bl	8006ab6 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006ce8:	42b5      	cmp	r5, r6
 8006cea:	d1f8      	bne.n	8006cde <HAL_SUBGHZ_WriteRegisters+0x5c>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cf0:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8006cf4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006cf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006d00:	4620      	mov	r0, r4
 8006d02:	f7ff ff68 	bl	8006bd6 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006d06:	68a0      	ldr	r0, [r4, #8]
      status = HAL_ERROR;
 8006d08:	3800      	subs	r0, #0
 8006d0a:	bf18      	it	ne
 8006d0c:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	71a3      	strb	r3, [r4, #6]
    __HAL_UNLOCK(hsubghz);
 8006d12:	2300      	movs	r3, #0
 8006d14:	7163      	strb	r3, [r4, #5]
}
 8006d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8006d18:	2002      	movs	r0, #2
 8006d1a:	e7fc      	b.n	8006d16 <HAL_SUBGHZ_WriteRegisters+0x94>
    __HAL_LOCK(hsubghz);
 8006d1c:	2002      	movs	r0, #2
 8006d1e:	e7fa      	b.n	8006d16 <HAL_SUBGHZ_WriteRegisters+0x94>

08006d20 <HAL_SUBGHZ_ReadRegisters>:
{
 8006d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d22:	4614      	mov	r4, r2
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006d24:	7982      	ldrb	r2, [r0, #6]
 8006d26:	b2d2      	uxtb	r2, r2
 8006d28:	2a01      	cmp	r2, #1
 8006d2a:	d142      	bne.n	8006db2 <HAL_SUBGHZ_ReadRegisters+0x92>
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	460f      	mov	r7, r1
 8006d30:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006d32:	7943      	ldrb	r3, [r0, #5]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d03e      	beq.n	8006db6 <HAL_SUBGHZ_ReadRegisters+0x96>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	7143      	strb	r3, [r0, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006d3c:	f7ff ff72 	bl	8006c24 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d44:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8006d48:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006d4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006d54:	211d      	movs	r1, #29
 8006d56:	4628      	mov	r0, r5
 8006d58:	f7ff fead 	bl	8006ab6 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006d5c:	0a39      	lsrs	r1, r7, #8
 8006d5e:	4628      	mov	r0, r5
 8006d60:	f7ff fea9 	bl	8006ab6 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006d64:	b2f9      	uxtb	r1, r7
 8006d66:	4628      	mov	r0, r5
 8006d68:	f7ff fea5 	bl	8006ab6 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	4628      	mov	r0, r5
 8006d70:	f7ff fea1 	bl	8006ab6 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006d74:	b13e      	cbz	r6, 8006d86 <HAL_SUBGHZ_ReadRegisters+0x66>
 8006d76:	4426      	add	r6, r4
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006d78:	4621      	mov	r1, r4
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f7ff fee2 	bl	8006b44 <SUBGHZSPI_Receive>
      pData++;
 8006d80:	3401      	adds	r4, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006d82:	42b4      	cmp	r4, r6
 8006d84:	d1f8      	bne.n	8006d78 <HAL_SUBGHZ_ReadRegisters+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d8a:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8006d8e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	f7ff ff1b 	bl	8006bd6 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006da0:	68a8      	ldr	r0, [r5, #8]
      status = HAL_ERROR;
 8006da2:	3800      	subs	r0, #0
 8006da4:	bf18      	it	ne
 8006da6:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006da8:	2301      	movs	r3, #1
 8006daa:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006dac:	2300      	movs	r3, #0
 8006dae:	716b      	strb	r3, [r5, #5]
}
 8006db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8006db2:	2002      	movs	r0, #2
 8006db4:	e7fc      	b.n	8006db0 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8006db6:	2002      	movs	r0, #2
 8006db8:	e7fa      	b.n	8006db0 <HAL_SUBGHZ_ReadRegisters+0x90>

08006dba <HAL_SUBGHZ_ExecSetCmd>:
{
 8006dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dbe:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006dc0:	7980      	ldrb	r0, [r0, #6]
 8006dc2:	b2c0      	uxtb	r0, r0
 8006dc4:	2801      	cmp	r0, #1
 8006dc6:	d146      	bne.n	8006e56 <HAL_SUBGHZ_ExecSetCmd+0x9c>
 8006dc8:	460f      	mov	r7, r1
 8006dca:	4690      	mov	r8, r2
 8006dcc:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006dce:	7963      	ldrb	r3, [r4, #5]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d042      	beq.n	8006e5a <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	7163      	strb	r3, [r4, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f7ff ff23 	bl	8006c24 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006dde:	f007 03ef 	and.w	r3, r7, #239	; 0xef
 8006de2:	2b84      	cmp	r3, #132	; 0x84
 8006de4:	bf14      	ite	ne
 8006de6:	2300      	movne	r3, #0
 8006de8:	2301      	moveq	r3, #1
 8006dea:	7123      	strb	r3, [r4, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006df0:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8006df4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006df8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006dfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006e00:	4639      	mov	r1, r7
 8006e02:	4620      	mov	r0, r4
 8006e04:	f7ff fe57 	bl	8006ab6 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006e08:	b15e      	cbz	r6, 8006e22 <HAL_SUBGHZ_ExecSetCmd+0x68>
 8006e0a:	f108 35ff 	add.w	r5, r8, #4294967295
 8006e0e:	3e01      	subs	r6, #1
 8006e10:	fa18 f686 	uxtah	r6, r8, r6
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006e14:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f7ff fe4c 	bl	8006ab6 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006e1e:	42b5      	cmp	r5, r6
 8006e20:	d1f8      	bne.n	8006e14 <HAL_SUBGHZ_ExecSetCmd+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e26:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8006e2a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8006e36:	2f84      	cmp	r7, #132	; 0x84
 8006e38:	d109      	bne.n	8006e4e <HAL_SUBGHZ_ExecSetCmd+0x94>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006e3a:	68a0      	ldr	r0, [r4, #8]
      status = HAL_ERROR;
 8006e3c:	3800      	subs	r0, #0
 8006e3e:	bf18      	it	ne
 8006e40:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e42:	2301      	movs	r3, #1
 8006e44:	71a3      	strb	r3, [r4, #6]
    __HAL_UNLOCK(hsubghz);
 8006e46:	2300      	movs	r3, #0
 8006e48:	7163      	strb	r3, [r4, #5]
}
 8006e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f7ff fec1 	bl	8006bd6 <SUBGHZ_WaitOnBusy>
 8006e54:	e7f1      	b.n	8006e3a <HAL_SUBGHZ_ExecSetCmd+0x80>
    return HAL_BUSY;
 8006e56:	2002      	movs	r0, #2
 8006e58:	e7f7      	b.n	8006e4a <HAL_SUBGHZ_ExecSetCmd+0x90>
    __HAL_LOCK(hsubghz);
 8006e5a:	2002      	movs	r0, #2
 8006e5c:	e7f5      	b.n	8006e4a <HAL_SUBGHZ_ExecSetCmd+0x90>

08006e5e <HAL_SUBGHZ_ExecGetCmd>:
{
 8006e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e60:	4614      	mov	r4, r2
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e62:	7982      	ldrb	r2, [r0, #6]
 8006e64:	b2d2      	uxtb	r2, r2
 8006e66:	2a01      	cmp	r2, #1
 8006e68:	d13a      	bne.n	8006ee0 <HAL_SUBGHZ_ExecGetCmd+0x82>
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	460f      	mov	r7, r1
 8006e6e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006e70:	7943      	ldrb	r3, [r0, #5]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d036      	beq.n	8006ee4 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8006e76:	2301      	movs	r3, #1
 8006e78:	7143      	strb	r3, [r0, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006e7a:	f7ff fed3 	bl	8006c24 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e82:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8006e86:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006e8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006e92:	4639      	mov	r1, r7
 8006e94:	4628      	mov	r0, r5
 8006e96:	f7ff fe0e 	bl	8006ab6 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	f7ff fe0a 	bl	8006ab6 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006ea2:	b13e      	cbz	r6, 8006eb4 <HAL_SUBGHZ_ExecGetCmd+0x56>
 8006ea4:	4426      	add	r6, r4
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f7ff fe4b 	bl	8006b44 <SUBGHZSPI_Receive>
      pData++;
 8006eae:	3401      	adds	r4, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006eb0:	42b4      	cmp	r4, r6
 8006eb2:	d1f8      	bne.n	8006ea6 <HAL_SUBGHZ_ExecGetCmd+0x48>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eb8:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8006ebc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006ec0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ec4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f7ff fe84 	bl	8006bd6 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006ece:	68a8      	ldr	r0, [r5, #8]
      status = HAL_ERROR;
 8006ed0:	3800      	subs	r0, #0
 8006ed2:	bf18      	it	ne
 8006ed4:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006eda:	2300      	movs	r3, #0
 8006edc:	716b      	strb	r3, [r5, #5]
}
 8006ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8006ee0:	2002      	movs	r0, #2
 8006ee2:	e7fc      	b.n	8006ede <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8006ee4:	2002      	movs	r0, #2
 8006ee6:	e7fa      	b.n	8006ede <HAL_SUBGHZ_ExecGetCmd+0x80>

08006ee8 <HAL_SUBGHZ_IRQHandler>:
{
 8006ee8:	b530      	push	{r4, r5, lr}
 8006eea:	b083      	sub	sp, #12
 8006eec:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8006eee:	2300      	movs	r3, #0
 8006ef0:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	aa01      	add	r2, sp, #4
 8006ef8:	2112      	movs	r1, #18
 8006efa:	f7ff ffb0 	bl	8006e5e <HAL_SUBGHZ_ExecGetCmd>
  itsource = (itsource << 8U) | tmpisr[1U];
 8006efe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006f02:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8006f06:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	aa01      	add	r2, sp, #4
 8006f0e:	4619      	mov	r1, r3
 8006f10:	4628      	mov	r0, r5
 8006f12:	f7ff ff52 	bl	8006dba <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006f16:	f014 0f01 	tst.w	r4, #1
 8006f1a:	d124      	bne.n	8006f66 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8006f1c:	f014 0f02 	tst.w	r4, #2
 8006f20:	d125      	bne.n	8006f6e <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006f22:	f014 0f04 	tst.w	r4, #4
 8006f26:	d126      	bne.n	8006f76 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006f28:	f014 0f08 	tst.w	r4, #8
 8006f2c:	d127      	bne.n	8006f7e <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006f2e:	f014 0f10 	tst.w	r4, #16
 8006f32:	d128      	bne.n	8006f86 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006f34:	f014 0f20 	tst.w	r4, #32
 8006f38:	d129      	bne.n	8006f8e <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006f3a:	f014 0f40 	tst.w	r4, #64	; 0x40
 8006f3e:	d12a      	bne.n	8006f96 <HAL_SUBGHZ_IRQHandler+0xae>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006f40:	f014 0f80 	tst.w	r4, #128	; 0x80
 8006f44:	d007      	beq.n	8006f56 <HAL_SUBGHZ_IRQHandler+0x6e>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006f46:	f414 7f80 	tst.w	r4, #256	; 0x100
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006f4a:	bf14      	ite	ne
 8006f4c:	2101      	movne	r1, #1
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006f4e:	2100      	moveq	r1, #0
 8006f50:	4628      	mov	r0, r5
 8006f52:	f00c f9db 	bl	801330c <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8006f56:	f414 7f00 	tst.w	r4, #512	; 0x200
 8006f5a:	d120      	bne.n	8006f9e <HAL_SUBGHZ_IRQHandler+0xb6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8006f5c:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8006f60:	d121      	bne.n	8006fa6 <HAL_SUBGHZ_IRQHandler+0xbe>
}
 8006f62:	b003      	add	sp, #12
 8006f64:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006f66:	4628      	mov	r0, r5
 8006f68:	f00c f9b5 	bl	80132d6 <HAL_SUBGHZ_TxCpltCallback>
 8006f6c:	e7d6      	b.n	8006f1c <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006f6e:	4628      	mov	r0, r5
 8006f70:	f00c f9ba 	bl	80132e8 <HAL_SUBGHZ_RxCpltCallback>
 8006f74:	e7d5      	b.n	8006f22 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006f76:	4628      	mov	r0, r5
 8006f78:	f00c f9f1 	bl	801335e <HAL_SUBGHZ_PreambleDetectedCallback>
 8006f7c:	e7d4      	b.n	8006f28 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f00c f9f6 	bl	8013370 <HAL_SUBGHZ_SyncWordValidCallback>
 8006f84:	e7d3      	b.n	8006f2e <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006f86:	4628      	mov	r0, r5
 8006f88:	f00c f9fb 	bl	8013382 <HAL_SUBGHZ_HeaderValidCallback>
 8006f8c:	e7d2      	b.n	8006f34 <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f00c f9dc 	bl	801334c <HAL_SUBGHZ_HeaderErrorCallback>
 8006f94:	e7d1      	b.n	8006f3a <HAL_SUBGHZ_IRQHandler+0x52>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006f96:	4628      	mov	r0, r5
 8006f98:	f00c f9af 	bl	80132fa <HAL_SUBGHZ_CRCErrorCallback>
 8006f9c:	e7d0      	b.n	8006f40 <HAL_SUBGHZ_IRQHandler+0x58>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f00c f9ca 	bl	8013338 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8006fa4:	e7da      	b.n	8006f5c <HAL_SUBGHZ_IRQHandler+0x74>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f00c f9f4 	bl	8013394 <HAL_SUBGHZ_LrFhssHopCallback>
}
 8006fac:	e7d9      	b.n	8006f62 <HAL_SUBGHZ_IRQHandler+0x7a>

08006fae <HAL_SUBGHZ_WriteBuffer>:
{
 8006fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb0:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006fb2:	7980      	ldrb	r0, [r0, #6]
 8006fb4:	b2c0      	uxtb	r0, r0
 8006fb6:	2801      	cmp	r0, #1
 8006fb8:	d13e      	bne.n	8007038 <HAL_SUBGHZ_WriteBuffer+0x8a>
 8006fba:	460d      	mov	r5, r1
 8006fbc:	4617      	mov	r7, r2
 8006fbe:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006fc0:	7963      	ldrb	r3, [r4, #5]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d03a      	beq.n	800703c <HAL_SUBGHZ_WriteBuffer+0x8e>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	7163      	strb	r3, [r4, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f7ff fe2a 	bl	8006c24 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fd4:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8006fd8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006fdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fe0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006fe4:	210e      	movs	r1, #14
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f7ff fd65 	bl	8006ab6 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006fec:	4629      	mov	r1, r5
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f7ff fd61 	bl	8006ab6 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006ff4:	b156      	cbz	r6, 800700c <HAL_SUBGHZ_WriteBuffer+0x5e>
 8006ff6:	1e7d      	subs	r5, r7, #1
 8006ff8:	3e01      	subs	r6, #1
 8006ffa:	fa17 f686 	uxtah	r6, r7, r6
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006ffe:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007002:	4620      	mov	r0, r4
 8007004:	f7ff fd57 	bl	8006ab6 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007008:	42b5      	cmp	r5, r6
 800700a:	d1f8      	bne.n	8006ffe <HAL_SUBGHZ_WriteBuffer+0x50>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800700c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007010:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8007014:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007018:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800701c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007020:	4620      	mov	r0, r4
 8007022:	f7ff fdd8 	bl	8006bd6 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007026:	68a0      	ldr	r0, [r4, #8]
      status = HAL_ERROR;
 8007028:	3800      	subs	r0, #0
 800702a:	bf18      	it	ne
 800702c:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800702e:	2301      	movs	r3, #1
 8007030:	71a3      	strb	r3, [r4, #6]
    __HAL_UNLOCK(hsubghz);
 8007032:	2300      	movs	r3, #0
 8007034:	7163      	strb	r3, [r4, #5]
}
 8007036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8007038:	2002      	movs	r0, #2
 800703a:	e7fc      	b.n	8007036 <HAL_SUBGHZ_WriteBuffer+0x88>
    __HAL_LOCK(hsubghz);
 800703c:	2002      	movs	r0, #2
 800703e:	e7fa      	b.n	8007036 <HAL_SUBGHZ_WriteBuffer+0x88>

08007040 <HAL_SUBGHZ_ReadBuffer>:
{
 8007040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007042:	4614      	mov	r4, r2
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007044:	7982      	ldrb	r2, [r0, #6]
 8007046:	b2d2      	uxtb	r2, r2
 8007048:	2a01      	cmp	r2, #1
 800704a:	d13e      	bne.n	80070ca <HAL_SUBGHZ_ReadBuffer+0x8a>
 800704c:	4605      	mov	r5, r0
 800704e:	460f      	mov	r7, r1
 8007050:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8007052:	7943      	ldrb	r3, [r0, #5]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d03a      	beq.n	80070ce <HAL_SUBGHZ_ReadBuffer+0x8e>
 8007058:	2301      	movs	r3, #1
 800705a:	7143      	strb	r3, [r0, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800705c:	f7ff fde2 	bl	8006c24 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007064:	f6c5 0300 	movt	r3, #22528	; 0x5800
 8007068:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800706c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007070:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007074:	211e      	movs	r1, #30
 8007076:	4628      	mov	r0, r5
 8007078:	f7ff fd1d 	bl	8006ab6 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800707c:	4639      	mov	r1, r7
 800707e:	4628      	mov	r0, r5
 8007080:	f7ff fd19 	bl	8006ab6 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007084:	2100      	movs	r1, #0
 8007086:	4628      	mov	r0, r5
 8007088:	f7ff fd15 	bl	8006ab6 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800708c:	b13e      	cbz	r6, 800709e <HAL_SUBGHZ_ReadBuffer+0x5e>
 800708e:	4426      	add	r6, r4
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007090:	4621      	mov	r1, r4
 8007092:	4628      	mov	r0, r5
 8007094:	f7ff fd56 	bl	8006b44 <SUBGHZSPI_Receive>
      pData++;
 8007098:	3401      	adds	r4, #1
    for (uint16_t i = 0U; i < Size; i++)
 800709a:	42b4      	cmp	r4, r6
 800709c:	d1f8      	bne.n	8007090 <HAL_SUBGHZ_ReadBuffer+0x50>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800709e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070a2:	f6c5 0300 	movt	r3, #22528	; 0x5800
 80070a6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80070aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80070b2:	4628      	mov	r0, r5
 80070b4:	f7ff fd8f 	bl	8006bd6 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80070b8:	68a8      	ldr	r0, [r5, #8]
      status = HAL_ERROR;
 80070ba:	3800      	subs	r0, #0
 80070bc:	bf18      	it	ne
 80070be:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80070c0:	2301      	movs	r3, #1
 80070c2:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80070c4:	2300      	movs	r3, #0
 80070c6:	716b      	strb	r3, [r5, #5]
}
 80070c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80070ca:	2002      	movs	r0, #2
 80070cc:	e7fc      	b.n	80070c8 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 80070ce:	2002      	movs	r0, #2
 80070d0:	e7fa      	b.n	80070c8 <HAL_SUBGHZ_ReadBuffer+0x88>

080070d2 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d127      	bne.n	800712c <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070dc:	2302      	movs	r3, #2
 80070de:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070e2:	6802      	ldr	r2, [r0, #0]
 80070e4:	68d3      	ldr	r3, [r2, #12]
 80070e6:	f043 0301 	orr.w	r3, r3, #1
 80070ea:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ec:	6803      	ldr	r3, [r0, #0]
 80070ee:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80070f2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d008      	beq.n	800710c <HAL_TIM_Base_Start_IT+0x3a>
 80070fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070fe:	d005      	beq.n	800710c <HAL_TIM_Base_Start_IT+0x3a>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	f042 0201 	orr.w	r2, r2, #1
 8007106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007108:	2000      	movs	r0, #0
 800710a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800710c:	6899      	ldr	r1, [r3, #8]
 800710e:	2207      	movs	r2, #7
 8007110:	f2c0 0201 	movt	r2, #1
 8007114:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007116:	2a06      	cmp	r2, #6
 8007118:	d00a      	beq.n	8007130 <HAL_TIM_Base_Start_IT+0x5e>
 800711a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800711e:	d009      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x62>
      __HAL_TIM_ENABLE(htim);
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	f042 0201 	orr.w	r2, r2, #1
 8007126:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007128:	2000      	movs	r0, #0
 800712a:	4770      	bx	lr
    return HAL_ERROR;
 800712c:	2001      	movs	r0, #1
 800712e:	4770      	bx	lr
  return HAL_OK;
 8007130:	2000      	movs	r0, #0
 8007132:	4770      	bx	lr
 8007134:	2000      	movs	r0, #0
}
 8007136:	4770      	bx	lr

08007138 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007138:	4770      	bx	lr

0800713a <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800713a:	4770      	bx	lr

0800713c <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800713c:	4770      	bx	lr

0800713e <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800713e:	4770      	bx	lr

08007140 <HAL_TIM_IRQHandler>:
{
 8007140:	b510      	push	{r4, lr}
 8007142:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007144:	6803      	ldr	r3, [r0, #0]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	f012 0f02 	tst.w	r2, #2
 800714c:	d011      	beq.n	8007172 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800714e:	68da      	ldr	r2, [r3, #12]
 8007150:	f012 0f02 	tst.w	r2, #2
 8007154:	d00d      	beq.n	8007172 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007156:	f06f 0202 	mvn.w	r2, #2
 800715a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800715c:	2301      	movs	r3, #1
 800715e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007160:	6803      	ldr	r3, [r0, #0]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	f013 0f03 	tst.w	r3, #3
 8007168:	d079      	beq.n	800725e <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800716a:	f7ff ffe6 	bl	800713a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800716e:	2300      	movs	r3, #0
 8007170:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	691a      	ldr	r2, [r3, #16]
 8007176:	f012 0f04 	tst.w	r2, #4
 800717a:	d012      	beq.n	80071a2 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	f012 0f04 	tst.w	r2, #4
 8007182:	d00e      	beq.n	80071a2 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007184:	f06f 0204 	mvn.w	r2, #4
 8007188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800718a:	2302      	movs	r3, #2
 800718c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007196:	d068      	beq.n	800726a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8007198:	4620      	mov	r0, r4
 800719a:	f7ff ffce 	bl	800713a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800719e:	2300      	movs	r3, #0
 80071a0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	691a      	ldr	r2, [r3, #16]
 80071a6:	f012 0f08 	tst.w	r2, #8
 80071aa:	d012      	beq.n	80071d2 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071ac:	68da      	ldr	r2, [r3, #12]
 80071ae:	f012 0f08 	tst.w	r2, #8
 80071b2:	d00e      	beq.n	80071d2 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071b4:	f06f 0208 	mvn.w	r2, #8
 80071b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071ba:	2304      	movs	r3, #4
 80071bc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	f013 0f03 	tst.w	r3, #3
 80071c6:	d057      	beq.n	8007278 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80071c8:	4620      	mov	r0, r4
 80071ca:	f7ff ffb6 	bl	800713a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ce:	2300      	movs	r3, #0
 80071d0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	691a      	ldr	r2, [r3, #16]
 80071d6:	f012 0f10 	tst.w	r2, #16
 80071da:	d012      	beq.n	8007202 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	f012 0f10 	tst.w	r2, #16
 80071e2:	d00e      	beq.n	8007202 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071e4:	f06f 0210 	mvn.w	r2, #16
 80071e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071ea:	2308      	movs	r3, #8
 80071ec:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80071f6:	d046      	beq.n	8007286 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80071f8:	4620      	mov	r0, r4
 80071fa:	f7ff ff9e 	bl	800713a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071fe:	2300      	movs	r3, #0
 8007200:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	691a      	ldr	r2, [r3, #16]
 8007206:	f012 0f01 	tst.w	r2, #1
 800720a:	d003      	beq.n	8007214 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	f012 0f01 	tst.w	r2, #1
 8007212:	d13f      	bne.n	8007294 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	691a      	ldr	r2, [r3, #16]
 8007218:	f012 0f80 	tst.w	r2, #128	; 0x80
 800721c:	d003      	beq.n	8007226 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800721e:	68da      	ldr	r2, [r3, #12]
 8007220:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007224:	d13d      	bne.n	80072a2 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	691a      	ldr	r2, [r3, #16]
 800722a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800722e:	d003      	beq.n	8007238 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007236:	d13b      	bne.n	80072b0 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	691a      	ldr	r2, [r3, #16]
 800723c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007240:	d003      	beq.n	800724a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007248:	d139      	bne.n	80072be <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	691a      	ldr	r2, [r3, #16]
 800724e:	f012 0f20 	tst.w	r2, #32
 8007252:	d003      	beq.n	800725c <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	f012 0f20 	tst.w	r2, #32
 800725a:	d137      	bne.n	80072cc <HAL_TIM_IRQHandler+0x18c>
}
 800725c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800725e:	f7ff ff6b 	bl	8007138 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007262:	4620      	mov	r0, r4
 8007264:	f7ff ff6a 	bl	800713c <HAL_TIM_PWM_PulseFinishedCallback>
 8007268:	e781      	b.n	800716e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800726a:	4620      	mov	r0, r4
 800726c:	f7ff ff64 	bl	8007138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007270:	4620      	mov	r0, r4
 8007272:	f7ff ff63 	bl	800713c <HAL_TIM_PWM_PulseFinishedCallback>
 8007276:	e792      	b.n	800719e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007278:	4620      	mov	r0, r4
 800727a:	f7ff ff5d 	bl	8007138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800727e:	4620      	mov	r0, r4
 8007280:	f7ff ff5c 	bl	800713c <HAL_TIM_PWM_PulseFinishedCallback>
 8007284:	e7a3      	b.n	80071ce <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007286:	4620      	mov	r0, r4
 8007288:	f7ff ff56 	bl	8007138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800728c:	4620      	mov	r0, r4
 800728e:	f7ff ff55 	bl	800713c <HAL_TIM_PWM_PulseFinishedCallback>
 8007292:	e7b4      	b.n	80071fe <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007294:	f06f 0201 	mvn.w	r2, #1
 8007298:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800729a:	4620      	mov	r0, r4
 800729c:	f7fa fc27 	bl	8001aee <HAL_TIM_PeriodElapsedCallback>
 80072a0:	e7b8      	b.n	8007214 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80072a8:	4620      	mov	r0, r4
 80072aa:	f000 f8ab 	bl	8007404 <HAL_TIMEx_BreakCallback>
 80072ae:	e7ba      	b.n	8007226 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80072b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80072b6:	4620      	mov	r0, r4
 80072b8:	f000 f8a5 	bl	8007406 <HAL_TIMEx_Break2Callback>
 80072bc:	e7bc      	b.n	8007238 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80072c4:	4620      	mov	r0, r4
 80072c6:	f7ff ff3a 	bl	800713e <HAL_TIM_TriggerCallback>
 80072ca:	e7be      	b.n	800724a <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072cc:	f06f 0220 	mvn.w	r2, #32
 80072d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80072d2:	4620      	mov	r0, r4
 80072d4:	f000 f895 	bl	8007402 <HAL_TIMEx_CommutCallback>
}
 80072d8:	e7c0      	b.n	800725c <HAL_TIM_IRQHandler+0x11c>

080072da <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072da:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072dc:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80072e0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80072e4:	4290      	cmp	r0, r2
 80072e6:	d034      	beq.n	8007352 <TIM_Base_SetConfig+0x78>
 80072e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80072ec:	d047      	beq.n	800737e <TIM_Base_SetConfig+0xa4>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072ee:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 80072f2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80072f6:	4290      	cmp	r0, r2
 80072f8:	d01d      	beq.n	8007336 <TIM_Base_SetConfig+0x5c>
 80072fa:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 80072fe:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007302:	4290      	cmp	r0, r2
 8007304:	d009      	beq.n	800731a <TIM_Base_SetConfig+0x40>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800730a:	694a      	ldr	r2, [r1, #20]
 800730c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800730e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007310:	688b      	ldr	r3, [r1, #8]
 8007312:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007314:	680b      	ldr	r3, [r1, #0]
 8007316:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007318:	e02e      	b.n	8007378 <TIM_Base_SetConfig+0x9e>
    tmpcr1 &= ~TIM_CR1_CKD;
 800731a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800731e:	68ca      	ldr	r2, [r1, #12]
 8007320:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007326:	694a      	ldr	r2, [r1, #20]
 8007328:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800732a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800732c:	688b      	ldr	r3, [r1, #8]
 800732e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007330:	680b      	ldr	r3, [r1, #0]
 8007332:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007334:	e01e      	b.n	8007374 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8007336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800733a:	68ca      	ldr	r2, [r1, #12]
 800733c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800733e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007342:	694a      	ldr	r2, [r1, #20]
 8007344:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007346:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007348:	688b      	ldr	r3, [r1, #8]
 800734a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800734c:	680b      	ldr	r3, [r1, #0]
 800734e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007350:	e010      	b.n	8007374 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007356:	684a      	ldr	r2, [r1, #4]
 8007358:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800735a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800735e:	68ca      	ldr	r2, [r1, #12]
 8007360:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007366:	694a      	ldr	r2, [r1, #20]
 8007368:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800736a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800736c:	688b      	ldr	r3, [r1, #8]
 800736e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007370:	680b      	ldr	r3, [r1, #0]
 8007372:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007374:	690b      	ldr	r3, [r1, #16]
 8007376:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007378:	2301      	movs	r3, #1
 800737a:	6143      	str	r3, [r0, #20]
}
 800737c:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800737e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007382:	684a      	ldr	r2, [r1, #4]
 8007384:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8007386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800738a:	68ca      	ldr	r2, [r1, #12]
 800738c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800738e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007392:	694a      	ldr	r2, [r1, #20]
 8007394:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007396:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007398:	688b      	ldr	r3, [r1, #8]
 800739a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800739c:	680b      	ldr	r3, [r1, #0]
 800739e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073a0:	e7ea      	b.n	8007378 <TIM_Base_SetConfig+0x9e>

080073a2 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80073a2:	b360      	cbz	r0, 80073fe <HAL_TIM_Base_Init+0x5c>
{
 80073a4:	b510      	push	{r4, lr}
 80073a6:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80073a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80073ac:	b313      	cbz	r3, 80073f4 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80073ae:	2302      	movs	r3, #2
 80073b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073b4:	4621      	mov	r1, r4
 80073b6:	f851 0b04 	ldr.w	r0, [r1], #4
 80073ba:	f7ff ff8e 	bl	80072da <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073be:	2301      	movs	r3, #1
 80073c0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80073c8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80073cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80073d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80073d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80073e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073e4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80073e8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80073ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80073f0:	2000      	movs	r0, #0
}
 80073f2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80073f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80073f8:	f7fa ffdb 	bl	80023b2 <HAL_TIM_Base_MspInit>
 80073fc:	e7d7      	b.n	80073ae <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80073fe:	2001      	movs	r0, #1
}
 8007400:	4770      	bx	lr

08007402 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007402:	4770      	bx	lr

08007404 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007404:	4770      	bx	lr

08007406 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007406:	4770      	bx	lr

08007408 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007408:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740a:	e852 3f00 	ldrex	r3, [r2]
 800740e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007412:	e842 3100 	strex	r1, r3, [r2]
 8007416:	2900      	cmp	r1, #0
 8007418:	d1f6      	bne.n	8007408 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800741a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741c:	f102 0308 	add.w	r3, r2, #8
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	3208      	adds	r2, #8
 800742a:	e842 3100 	strex	r1, r3, [r2]
 800742e:	2900      	cmp	r1, #0
 8007430:	d1f3      	bne.n	800741a <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007432:	2320      	movs	r3, #32
 8007434:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8007438:	4770      	bx	lr

0800743a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800743a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	e852 3f00 	ldrex	r3, [r2]
 8007440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007444:	e842 3100 	strex	r1, r3, [r2]
 8007448:	2900      	cmp	r1, #0
 800744a:	d1f6      	bne.n	800743a <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800744c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744e:	f102 0308 	add.w	r3, r2, #8
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800745a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	3208      	adds	r2, #8
 8007460:	e842 3100 	strex	r1, r3, [r2]
 8007464:	2900      	cmp	r1, #0
 8007466:	d1f1      	bne.n	800744c <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007468:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800746a:	2b01      	cmp	r3, #1
 800746c:	d006      	beq.n	800747c <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800746e:	2320      	movs	r3, #32
 8007470:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007474:	2300      	movs	r3, #0
 8007476:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007478:	6743      	str	r3, [r0, #116]	; 0x74
}
 800747a:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800747c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	e852 3f00 	ldrex	r3, [r2]
 8007482:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007486:	e842 3100 	strex	r1, r3, [r2]
 800748a:	2900      	cmp	r1, #0
 800748c:	d1f6      	bne.n	800747c <UART_EndRxTransfer+0x42>
 800748e:	e7ee      	b.n	800746e <UART_EndRxTransfer+0x34>

08007490 <HAL_UART_Transmit_DMA>:
{
 8007490:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007492:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007496:	2a20      	cmp	r2, #32
 8007498:	d146      	bne.n	8007528 <HAL_UART_Transmit_DMA+0x98>
{
 800749a:	b510      	push	{r4, lr}
 800749c:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800749e:	2900      	cmp	r1, #0
 80074a0:	d044      	beq.n	800752c <HAL_UART_Transmit_DMA+0x9c>
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d044      	beq.n	8007530 <HAL_UART_Transmit_DMA+0xa0>
    huart->pTxBuffPtr  = pData;
 80074a6:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 80074a8:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 80074ac:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b0:	2200      	movs	r2, #0
 80074b2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074b6:	2221      	movs	r2, #33	; 0x21
 80074b8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 80074bc:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 80074be:	b311      	cbz	r1, 8007506 <HAL_UART_Transmit_DMA+0x76>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80074c0:	f247 5235 	movw	r2, #30005	; 0x7535
 80074c4:	f6c0 0200 	movt	r2, #2048	; 0x800
 80074c8:	62ca      	str	r2, [r1, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80074ca:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 80074cc:	f247 527f 	movw	r2, #30079	; 0x757f
 80074d0:	f6c0 0200 	movt	r2, #2048	; 0x800
 80074d4:	630a      	str	r2, [r1, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80074d6:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 80074d8:	f247 528b 	movw	r2, #30091	; 0x758b
 80074dc:	f6c0 0200 	movt	r2, #2048	; 0x800
 80074e0:	634a      	str	r2, [r1, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80074e2:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80074e4:	2100      	movs	r1, #0
 80074e6:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80074e8:	6802      	ldr	r2, [r0, #0]
 80074ea:	3228      	adds	r2, #40	; 0x28
 80074ec:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80074ee:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80074f0:	f7fc fb37 	bl	8003b62 <HAL_DMA_Start_IT>
 80074f4:	b138      	cbz	r0, 8007506 <HAL_UART_Transmit_DMA+0x76>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80074f6:	2310      	movs	r3, #16
 80074f8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 80074fc:	2320      	movs	r3, #32
 80074fe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 8007502:	2001      	movs	r0, #1
 8007504:	e00f      	b.n	8007526 <HAL_UART_Transmit_DMA+0x96>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	2240      	movs	r2, #64	; 0x40
 800750a:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800750c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	f102 0308 	add.w	r3, r2, #8
 8007512:	e853 3f00 	ldrex	r3, [r3]
 8007516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	3208      	adds	r2, #8
 800751c:	e842 3100 	strex	r1, r3, [r2]
 8007520:	2900      	cmp	r1, #0
 8007522:	d1f3      	bne.n	800750c <HAL_UART_Transmit_DMA+0x7c>
    return HAL_OK;
 8007524:	2000      	movs	r0, #0
}
 8007526:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8007528:	2002      	movs	r0, #2
}
 800752a:	4770      	bx	lr
      return HAL_ERROR;
 800752c:	2001      	movs	r0, #1
 800752e:	e7fa      	b.n	8007526 <HAL_UART_Transmit_DMA+0x96>
 8007530:	2001      	movs	r0, #1
 8007532:	e7f8      	b.n	8007526 <HAL_UART_Transmit_DMA+0x96>

08007534 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007534:	b508      	push	{r3, lr}
 8007536:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007538:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f013 0f20 	tst.w	r3, #32
 8007542:	d118      	bne.n	8007576 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800754a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	f102 0308 	add.w	r3, r2, #8
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	3208      	adds	r2, #8
 800755a:	e842 3100 	strex	r1, r3, [r2]
 800755e:	2900      	cmp	r1, #0
 8007560:	d1f3      	bne.n	800754a <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007562:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	e852 3f00 	ldrex	r3, [r2]
 8007568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756c:	e842 3100 	strex	r1, r3, [r2]
 8007570:	2900      	cmp	r1, #0
 8007572:	d1f6      	bne.n	8007562 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007574:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8007576:	f7fb faf0 	bl	8002b5a <HAL_UART_TxCpltCallback>
}
 800757a:	e7fb      	b.n	8007574 <UART_DMATransmitCplt+0x40>

0800757c <HAL_UART_TxHalfCpltCallback>:
}
 800757c:	4770      	bx	lr

0800757e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800757e:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007580:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007582:	f7ff fffb 	bl	800757c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007586:	bd08      	pop	{r3, pc}

08007588 <HAL_UART_ErrorCallback>:
}
 8007588:	4770      	bx	lr

0800758a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800758a:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800758c:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800758e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007592:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800759e:	d001      	beq.n	80075a4 <UART_DMAError+0x1a>
 80075a0:	2a21      	cmp	r2, #33	; 0x21
 80075a2:	d010      	beq.n	80075c6 <UART_DMAError+0x3c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80075a4:	6823      	ldr	r3, [r4, #0]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80075ac:	d001      	beq.n	80075b2 <UART_DMAError+0x28>
 80075ae:	2d22      	cmp	r5, #34	; 0x22
 80075b0:	d010      	beq.n	80075d4 <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80075b2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80075b6:	f043 0310 	orr.w	r3, r3, #16
 80075ba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075be:	4620      	mov	r0, r4
 80075c0:	f7ff ffe2 	bl	8007588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075c4:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80075cc:	4620      	mov	r0, r4
 80075ce:	f7ff ff1b 	bl	8007408 <UART_EndTxTransfer>
 80075d2:	e7e7      	b.n	80075a4 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80075da:	4620      	mov	r0, r4
 80075dc:	f7ff ff2d 	bl	800743a <UART_EndRxTransfer>
 80075e0:	e7e7      	b.n	80075b2 <UART_DMAError+0x28>

080075e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075e2:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075e4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80075ec:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075f0:	f7ff ffca 	bl	8007588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075f4:	bd08      	pop	{r3, pc}

080075f6 <HAL_UARTEx_RxEventCallback>:
}
 80075f6:	4770      	bx	lr

080075f8 <HAL_UART_IRQHandler>:
{
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075fc:	6802      	ldr	r2, [r0, #0]
 80075fe:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007600:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007602:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8007604:	f640 0c0f 	movw	ip, #2063	; 0x80f
 8007608:	ea13 0f0c 	tst.w	r3, ip
 800760c:	d10e      	bne.n	800762c <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800760e:	f013 0f20 	tst.w	r3, #32
 8007612:	d01a      	beq.n	800764a <HAL_UART_IRQHandler+0x52>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007614:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007618:	f000 5580 	and.w	r5, r0, #268435456	; 0x10000000
 800761c:	ea5c 0c05 	orrs.w	ip, ip, r5
 8007620:	d013      	beq.n	800764a <HAL_UART_IRQHandler+0x52>
      if (huart->RxISR != NULL)
 8007622:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007624:	b3d3      	cbz	r3, 800769c <HAL_UART_IRQHandler+0xa4>
        huart->RxISR(huart);
 8007626:	4620      	mov	r0, r4
 8007628:	4798      	blx	r3
 800762a:	e037      	b.n	800769c <HAL_UART_IRQHandler+0xa4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800762c:	f04f 0c01 	mov.w	ip, #1
 8007630:	f2c1 0c00 	movt	ip, #4096	; 0x1000
 8007634:	ea00 0e0c 	and.w	lr, r0, ip
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007638:	f44f 7c90 	mov.w	ip, #288	; 0x120
 800763c:	f2c0 4c00 	movt	ip, #1024	; 0x400
 8007640:	ea01 0c0c 	and.w	ip, r1, ip
 8007644:	ea5c 0c0e 	orrs.w	ip, ip, lr
 8007648:	d129      	bne.n	800769e <HAL_UART_IRQHandler+0xa6>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800764a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800764c:	2d01      	cmp	r5, #1
 800764e:	f000 80c7 	beq.w	80077e0 <HAL_UART_IRQHandler+0x1e8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007652:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007656:	d003      	beq.n	8007660 <HAL_UART_IRQHandler+0x68>
 8007658:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800765c:	f040 815e 	bne.w	800791c <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007660:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007664:	d006      	beq.n	8007674 <HAL_UART_IRQHandler+0x7c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007666:	f001 0280 	and.w	r2, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800766a:	f400 0000 	and.w	r0, r0, #8388608	; 0x800000
 800766e:	4302      	orrs	r2, r0
 8007670:	f040 815b 	bne.w	800792a <HAL_UART_IRQHandler+0x332>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007674:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007678:	d003      	beq.n	8007682 <HAL_UART_IRQHandler+0x8a>
 800767a:	f011 0f40 	tst.w	r1, #64	; 0x40
 800767e:	f040 815b 	bne.w	8007938 <HAL_UART_IRQHandler+0x340>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007682:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007686:	d003      	beq.n	8007690 <HAL_UART_IRQHandler+0x98>
 8007688:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800768c:	f040 8166 	bne.w	800795c <HAL_UART_IRQHandler+0x364>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007690:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007694:	d002      	beq.n	800769c <HAL_UART_IRQHandler+0xa4>
 8007696:	2900      	cmp	r1, #0
 8007698:	f2c0 8164 	blt.w	8007964 <HAL_UART_IRQHandler+0x36c>
}
 800769c:	bd38      	pop	{r3, r4, r5, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800769e:	f013 0f01 	tst.w	r3, #1
 80076a2:	d009      	beq.n	80076b8 <HAL_UART_IRQHandler+0xc0>
 80076a4:	f411 7f80 	tst.w	r1, #256	; 0x100
 80076a8:	d006      	beq.n	80076b8 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076aa:	2501      	movs	r5, #1
 80076ac:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076ae:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80076b2:	432a      	orrs	r2, r5
 80076b4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076b8:	f013 0f02 	tst.w	r3, #2
 80076bc:	d00f      	beq.n	80076de <HAL_UART_IRQHandler+0xe6>
 80076be:	f010 0f01 	tst.w	r0, #1
 80076c2:	d01b      	beq.n	80076fc <HAL_UART_IRQHandler+0x104>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076c4:	6822      	ldr	r2, [r4, #0]
 80076c6:	2502      	movs	r5, #2
 80076c8:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076ca:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80076ce:	f042 0204 	orr.w	r2, r2, #4
 80076d2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076d6:	f013 0f04 	tst.w	r3, #4
 80076da:	d106      	bne.n	80076ea <HAL_UART_IRQHandler+0xf2>
 80076dc:	e00e      	b.n	80076fc <HAL_UART_IRQHandler+0x104>
 80076de:	f013 0f04 	tst.w	r3, #4
 80076e2:	d00b      	beq.n	80076fc <HAL_UART_IRQHandler+0x104>
 80076e4:	f010 0f01 	tst.w	r0, #1
 80076e8:	d008      	beq.n	80076fc <HAL_UART_IRQHandler+0x104>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076ea:	6822      	ldr	r2, [r4, #0]
 80076ec:	2504      	movs	r5, #4
 80076ee:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076f0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80076f4:	f042 0202 	orr.w	r2, r2, #2
 80076f8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076fc:	f013 0f08 	tst.w	r3, #8
 8007700:	d00c      	beq.n	800771c <HAL_UART_IRQHandler+0x124>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007702:	f001 0220 	and.w	r2, r1, #32
 8007706:	ea52 020e 	orrs.w	r2, r2, lr
 800770a:	d007      	beq.n	800771c <HAL_UART_IRQHandler+0x124>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800770c:	6822      	ldr	r2, [r4, #0]
 800770e:	2508      	movs	r5, #8
 8007710:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007712:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8007716:	432a      	orrs	r2, r5
 8007718:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800771c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8007720:	d00c      	beq.n	800773c <HAL_UART_IRQHandler+0x144>
 8007722:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
 8007726:	d009      	beq.n	800773c <HAL_UART_IRQHandler+0x144>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007728:	6822      	ldr	r2, [r4, #0]
 800772a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800772e:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007730:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8007734:	f042 0220 	orr.w	r2, r2, #32
 8007738:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800773c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8007740:	2a00      	cmp	r2, #0
 8007742:	d0ab      	beq.n	800769c <HAL_UART_IRQHandler+0xa4>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007744:	f013 0f20 	tst.w	r3, #32
 8007748:	d009      	beq.n	800775e <HAL_UART_IRQHandler+0x166>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800774a:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800774e:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 8007752:	4301      	orrs	r1, r0
 8007754:	d003      	beq.n	800775e <HAL_UART_IRQHandler+0x166>
        if (huart->RxISR != NULL)
 8007756:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007758:	b10b      	cbz	r3, 800775e <HAL_UART_IRQHandler+0x166>
          huart->RxISR(huart);
 800775a:	4620      	mov	r0, r4
 800775c:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800775e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f003 0340 	and.w	r3, r3, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800776a:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800776e:	4313      	orrs	r3, r2
 8007770:	d02f      	beq.n	80077d2 <HAL_UART_IRQHandler+0x1da>
        UART_EndRxTransfer(huart);
 8007772:	4620      	mov	r0, r4
 8007774:	f7ff fe61 	bl	800743a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007780:	d023      	beq.n	80077ca <HAL_UART_IRQHandler+0x1d2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007782:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007784:	f102 0308 	add.w	r3, r2, #8
 8007788:	e853 3f00 	ldrex	r3, [r3]
 800778c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007790:	3208      	adds	r2, #8
 8007792:	e842 3100 	strex	r1, r3, [r2]
 8007796:	2900      	cmp	r1, #0
 8007798:	d1f3      	bne.n	8007782 <HAL_UART_IRQHandler+0x18a>
          if (huart->hdmarx != NULL)
 800779a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800779e:	b182      	cbz	r2, 80077c2 <HAL_UART_IRQHandler+0x1ca>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077a0:	f247 53e3 	movw	r3, #30179	; 0x75e3
 80077a4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80077a8:	6393      	str	r3, [r2, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077aa:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80077ae:	f7fc fa5e 	bl	8003c6e <HAL_DMA_Abort_IT>
 80077b2:	2800      	cmp	r0, #0
 80077b4:	f43f af72 	beq.w	800769c <HAL_UART_IRQHandler+0xa4>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077b8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80077bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80077be:	4798      	blx	r3
 80077c0:	e76c      	b.n	800769c <HAL_UART_IRQHandler+0xa4>
            HAL_UART_ErrorCallback(huart);
 80077c2:	4620      	mov	r0, r4
 80077c4:	f7ff fee0 	bl	8007588 <HAL_UART_ErrorCallback>
 80077c8:	e768      	b.n	800769c <HAL_UART_IRQHandler+0xa4>
          HAL_UART_ErrorCallback(huart);
 80077ca:	4620      	mov	r0, r4
 80077cc:	f7ff fedc 	bl	8007588 <HAL_UART_ErrorCallback>
 80077d0:	e764      	b.n	800769c <HAL_UART_IRQHandler+0xa4>
        HAL_UART_ErrorCallback(huart);
 80077d2:	4620      	mov	r0, r4
 80077d4:	f7ff fed8 	bl	8007588 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d8:	2300      	movs	r3, #0
 80077da:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80077de:	e75d      	b.n	800769c <HAL_UART_IRQHandler+0xa4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077e0:	f013 0f10 	tst.w	r3, #16
 80077e4:	f43f af35 	beq.w	8007652 <HAL_UART_IRQHandler+0x5a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077e8:	f011 0f10 	tst.w	r1, #16
 80077ec:	f43f af31 	beq.w	8007652 <HAL_UART_IRQHandler+0x5a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077f0:	2310      	movs	r3, #16
 80077f2:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80077fc:	d052      	beq.n	80078a4 <HAL_UART_IRQHandler+0x2ac>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077fe:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8007802:	6813      	ldr	r3, [r2, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8007808:	2b00      	cmp	r3, #0
 800780a:	f43f af47 	beq.w	800769c <HAL_UART_IRQHandler+0xa4>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800780e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007812:	4299      	cmp	r1, r3
 8007814:	f67f af42 	bls.w	800769c <HAL_UART_IRQHandler+0xa4>
        huart->RxXferCount = nb_remaining_rx_data;
 8007818:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800781c:	6813      	ldr	r3, [r2, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f013 0f20 	tst.w	r3, #32
 8007824:	d132      	bne.n	800788c <HAL_UART_IRQHandler+0x294>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007826:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007828:	e852 3f00 	ldrex	r3, [r2]
 800782c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	e842 3100 	strex	r1, r3, [r2]
 8007834:	2900      	cmp	r1, #0
 8007836:	d1f6      	bne.n	8007826 <HAL_UART_IRQHandler+0x22e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007838:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	f102 0308 	add.w	r3, r2, #8
 800783e:	e853 3f00 	ldrex	r3, [r3]
 8007842:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	3208      	adds	r2, #8
 8007848:	e842 3100 	strex	r1, r3, [r2]
 800784c:	2900      	cmp	r1, #0
 800784e:	d1f3      	bne.n	8007838 <HAL_UART_IRQHandler+0x240>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007850:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007852:	f102 0308 	add.w	r3, r2, #8
 8007856:	e853 3f00 	ldrex	r3, [r3]
 800785a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785e:	3208      	adds	r2, #8
 8007860:	e842 3100 	strex	r1, r3, [r2]
 8007864:	2900      	cmp	r1, #0
 8007866:	d1f3      	bne.n	8007850 <HAL_UART_IRQHandler+0x258>
          huart->RxState = HAL_UART_STATE_READY;
 8007868:	2320      	movs	r3, #32
 800786a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786e:	2300      	movs	r3, #0
 8007870:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007872:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	e852 3f00 	ldrex	r3, [r2]
 8007878:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	e842 3100 	strex	r1, r3, [r2]
 8007880:	2900      	cmp	r1, #0
 8007882:	d1f6      	bne.n	8007872 <HAL_UART_IRQHandler+0x27a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007884:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8007888:	f7fc f9b7 	bl	8003bfa <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800788c:	2302      	movs	r3, #2
 800788e:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007890:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007894:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007898:	1ac9      	subs	r1, r1, r3
 800789a:	b289      	uxth	r1, r1
 800789c:	4620      	mov	r0, r4
 800789e:	f7ff feaa 	bl	80075f6 <HAL_UARTEx_RxEventCallback>
 80078a2:	e6fb      	b.n	800769c <HAL_UART_IRQHandler+0xa4>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078a4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80078a8:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 80078aa:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f43f aef3 	beq.w	800769c <HAL_UART_IRQHandler+0xa4>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078b6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80078ba:	1a89      	subs	r1, r1, r2
 80078bc:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80078be:	2900      	cmp	r1, #0
 80078c0:	f43f aeec 	beq.w	800769c <HAL_UART_IRQHandler+0xa4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078c4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c6:	e852 3f00 	ldrex	r3, [r2]
 80078ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	e842 3000 	strex	r0, r3, [r2]
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d1f6      	bne.n	80078c4 <HAL_UART_IRQHandler+0x2cc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078d6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	f102 0308 	add.w	r3, r2, #8
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078e4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e8:	3208      	adds	r2, #8
 80078ea:	e842 3000 	strex	r0, r3, [r2]
 80078ee:	2800      	cmp	r0, #0
 80078f0:	d1f1      	bne.n	80078d6 <HAL_UART_IRQHandler+0x2de>
        huart->RxState = HAL_UART_STATE_READY;
 80078f2:	2320      	movs	r3, #32
 80078f4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f8:	2300      	movs	r3, #0
 80078fa:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80078fc:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007900:	e852 3f00 	ldrex	r3, [r2]
 8007904:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	e842 3000 	strex	r0, r3, [r2]
 800790c:	2800      	cmp	r0, #0
 800790e:	d1f6      	bne.n	80078fe <HAL_UART_IRQHandler+0x306>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007910:	2302      	movs	r3, #2
 8007912:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007914:	4620      	mov	r0, r4
 8007916:	f7ff fe6e 	bl	80075f6 <HAL_UARTEx_RxEventCallback>
 800791a:	e6bf      	b.n	800769c <HAL_UART_IRQHandler+0xa4>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800791c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007920:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8007922:	4620      	mov	r0, r4
 8007924:	f000 fea0 	bl	8008668 <HAL_UARTEx_WakeupCallback>
    return;
 8007928:	e6b8      	b.n	800769c <HAL_UART_IRQHandler+0xa4>
    if (huart->TxISR != NULL)
 800792a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800792c:	2b00      	cmp	r3, #0
 800792e:	f43f aeb5 	beq.w	800769c <HAL_UART_IRQHandler+0xa4>
      huart->TxISR(huart);
 8007932:	4620      	mov	r0, r4
 8007934:	4798      	blx	r3
 8007936:	e6b1      	b.n	800769c <HAL_UART_IRQHandler+0xa4>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007938:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	e852 3f00 	ldrex	r3, [r2]
 800793e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	e842 3100 	strex	r1, r3, [r2]
 8007946:	2900      	cmp	r1, #0
 8007948:	d1f6      	bne.n	8007938 <HAL_UART_IRQHandler+0x340>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800794a:	2320      	movs	r3, #32
 800794c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007950:	2300      	movs	r3, #0
 8007952:	67a3      	str	r3, [r4, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007954:	4620      	mov	r0, r4
 8007956:	f7fb f900 	bl	8002b5a <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800795a:	e69f      	b.n	800769c <HAL_UART_IRQHandler+0xa4>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800795c:	4620      	mov	r0, r4
 800795e:	f000 fe85 	bl	800866c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8007962:	e69b      	b.n	800769c <HAL_UART_IRQHandler+0xa4>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007964:	4620      	mov	r0, r4
 8007966:	f000 fe80 	bl	800866a <HAL_UARTEx_RxFifoFullCallback>
    return;
 800796a:	e697      	b.n	800769c <HAL_UART_IRQHandler+0xa4>

0800796c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800796c:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800796e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007972:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8007976:	2b22      	cmp	r3, #34	; 0x22
 8007978:	d005      	beq.n	8007986 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800797a:	6802      	ldr	r2, [r0, #0]
 800797c:	6993      	ldr	r3, [r2, #24]
 800797e:	f043 0308 	orr.w	r3, r3, #8
 8007982:	6193      	str	r3, [r2, #24]
  }
}
 8007984:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007986:	6803      	ldr	r3, [r0, #0]
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800798a:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800798c:	4013      	ands	r3, r2
 800798e:	700b      	strb	r3, [r1, #0]
    huart->pRxBuffPtr++;
 8007990:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007992:	3301      	adds	r3, #1
 8007994:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007996:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800799a:	3b01      	subs	r3, #1
 800799c:	b29b      	uxth	r3, r3
 800799e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80079a2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1eb      	bne.n	8007984 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079ac:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	e852 3f00 	ldrex	r3, [r2]
 80079b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	e842 3100 	strex	r1, r3, [r2]
 80079ba:	2900      	cmp	r1, #0
 80079bc:	d1f6      	bne.n	80079ac <UART_RxISR_8BIT+0x40>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079be:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	f102 0308 	add.w	r3, r2, #8
 80079c4:	e853 3f00 	ldrex	r3, [r3]
 80079c8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079cc:	3208      	adds	r2, #8
 80079ce:	e842 3100 	strex	r1, r3, [r2]
 80079d2:	2900      	cmp	r1, #0
 80079d4:	d1f3      	bne.n	80079be <UART_RxISR_8BIT+0x52>
      huart->RxState = HAL_UART_STATE_READY;
 80079d6:	2320      	movs	r3, #32
 80079d8:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 80079dc:	2300      	movs	r3, #0
 80079de:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079e0:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079e2:	6802      	ldr	r2, [r0, #0]
 80079e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d00c      	beq.n	8007a0a <UART_RxISR_8BIT+0x9e>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079f0:	6853      	ldr	r3, [r2, #4]
 80079f2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80079f6:	d008      	beq.n	8007a0a <UART_RxISR_8BIT+0x9e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079f8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	e852 3f00 	ldrex	r3, [r2]
 80079fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a02:	e842 3100 	strex	r1, r3, [r2]
 8007a06:	2900      	cmp	r1, #0
 8007a08:	d1f6      	bne.n	80079f8 <UART_RxISR_8BIT+0x8c>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a0a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d116      	bne.n	8007a3e <UART_RxISR_8BIT+0xd2>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a10:	2300      	movs	r3, #0
 8007a12:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a14:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a16:	e852 3f00 	ldrex	r3, [r2]
 8007a1a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	e842 3100 	strex	r1, r3, [r2]
 8007a22:	2900      	cmp	r1, #0
 8007a24:	d1f6      	bne.n	8007a14 <UART_RxISR_8BIT+0xa8>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a26:	6803      	ldr	r3, [r0, #0]
 8007a28:	69da      	ldr	r2, [r3, #28]
 8007a2a:	f012 0f10 	tst.w	r2, #16
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a2e:	bf1c      	itt	ne
 8007a30:	2210      	movne	r2, #16
 8007a32:	621a      	strne	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a34:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8007a38:	f7ff fddd 	bl	80075f6 <HAL_UARTEx_RxEventCallback>
 8007a3c:	e7a2      	b.n	8007984 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8007a3e:	f7fb f89d 	bl	8002b7c <HAL_UART_RxCpltCallback>
 8007a42:	e79f      	b.n	8007984 <UART_RxISR_8BIT+0x18>

08007a44 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a44:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a46:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a4a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8007a4e:	2a22      	cmp	r2, #34	; 0x22
 8007a50:	d005      	beq.n	8007a5e <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a52:	6802      	ldr	r2, [r0, #0]
 8007a54:	6993      	ldr	r3, [r2, #24]
 8007a56:	f043 0308 	orr.w	r3, r3, #8
 8007a5a:	6193      	str	r3, [r2, #24]
  }
}
 8007a5c:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a5e:	6802      	ldr	r2, [r0, #0]
 8007a60:	6a51      	ldr	r1, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a62:	6d82      	ldr	r2, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a64:	400b      	ands	r3, r1
 8007a66:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 8007a68:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007a6a:	3302      	adds	r3, #2
 8007a6c:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007a6e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007a72:	3b01      	subs	r3, #1
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007a7a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1eb      	bne.n	8007a5c <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a84:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a86:	e852 3f00 	ldrex	r3, [r2]
 8007a8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	e842 3100 	strex	r1, r3, [r2]
 8007a92:	2900      	cmp	r1, #0
 8007a94:	d1f6      	bne.n	8007a84 <UART_RxISR_16BIT+0x40>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a96:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	f102 0308 	add.w	r3, r2, #8
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa4:	3208      	adds	r2, #8
 8007aa6:	e842 3100 	strex	r1, r3, [r2]
 8007aaa:	2900      	cmp	r1, #0
 8007aac:	d1f3      	bne.n	8007a96 <UART_RxISR_16BIT+0x52>
      huart->RxState = HAL_UART_STATE_READY;
 8007aae:	2320      	movs	r3, #32
 8007ab0:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ab8:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007aba:	6802      	ldr	r2, [r0, #0]
 8007abc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ac0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d00c      	beq.n	8007ae2 <UART_RxISR_16BIT+0x9e>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ac8:	6853      	ldr	r3, [r2, #4]
 8007aca:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007ace:	d008      	beq.n	8007ae2 <UART_RxISR_16BIT+0x9e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ad0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	e852 3f00 	ldrex	r3, [r2]
 8007ad6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	e842 3100 	strex	r1, r3, [r2]
 8007ade:	2900      	cmp	r1, #0
 8007ae0:	d1f6      	bne.n	8007ad0 <UART_RxISR_16BIT+0x8c>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d116      	bne.n	8007b16 <UART_RxISR_16BIT+0xd2>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aec:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aee:	e852 3f00 	ldrex	r3, [r2]
 8007af2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af6:	e842 3100 	strex	r1, r3, [r2]
 8007afa:	2900      	cmp	r1, #0
 8007afc:	d1f6      	bne.n	8007aec <UART_RxISR_16BIT+0xa8>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007afe:	6803      	ldr	r3, [r0, #0]
 8007b00:	69da      	ldr	r2, [r3, #28]
 8007b02:	f012 0f10 	tst.w	r2, #16
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b06:	bf1c      	itt	ne
 8007b08:	2210      	movne	r2, #16
 8007b0a:	621a      	strne	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b0c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8007b10:	f7ff fd71 	bl	80075f6 <HAL_UARTEx_RxEventCallback>
 8007b14:	e7a2      	b.n	8007a5c <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8007b16:	f7fb f831 	bl	8002b7c <HAL_UART_RxCpltCallback>
 8007b1a:	e79f      	b.n	8007a5c <UART_RxISR_16BIT+0x18>

08007b1c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
 8007b20:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007b24:	6803      	ldr	r3, [r0, #0]
 8007b26:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007b28:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007b2c:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b30:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8007b34:	2a22      	cmp	r2, #34	; 0x22
 8007b36:	d005      	beq.n	8007b44 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b38:	699a      	ldr	r2, [r3, #24]
 8007b3a:	f042 0208 	orr.w	r2, r2, #8
 8007b3e:	619a      	str	r2, [r3, #24]
  }
}
 8007b40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b44:	4604      	mov	r4, r0
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b46:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 80d2 	beq.w	8007cf4 <UART_RxISR_8BIT_FIFOEN+0x1d8>
 8007b50:	f011 0f20 	tst.w	r1, #32
 8007b54:	f000 80a8 	beq.w	8007ca8 <UART_RxISR_8BIT_FIFOEN+0x18c>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b58:	2700      	movs	r7, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b5a:	f04f 0b04 	mov.w	fp, #4
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b5e:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
 8007b62:	f2c4 0a00 	movt	sl, #16384	; 0x4000
 8007b66:	e01b      	b.n	8007ba0 <UART_RxISR_8BIT_FIFOEN+0x84>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b68:	f015 0f04 	tst.w	r5, #4
 8007b6c:	d00b      	beq.n	8007b86 <UART_RxISR_8BIT_FIFOEN+0x6a>
 8007b6e:	f018 0f01 	tst.w	r8, #1
 8007b72:	d008      	beq.n	8007b86 <UART_RxISR_8BIT_FIFOEN+0x6a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	f8c3 b020 	str.w	fp, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b7a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007b7e:	f043 0302 	orr.w	r3, r3, #2
 8007b82:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b86:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d13b      	bne.n	8007c06 <UART_RxISR_8BIT_FIFOEN+0xea>
      if (huart->RxXferCount == 0U)
 8007b8e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d03c      	beq.n	8007c12 <UART_RxISR_8BIT_FIFOEN+0xf6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b98:	f015 0f20 	tst.w	r5, #32
 8007b9c:	f000 8084 	beq.w	8007ca8 <UART_RxISR_8BIT_FIFOEN+0x18c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ba4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007ba6:	4033      	ands	r3, r6
 8007ba8:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8007baa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bac:	3301      	adds	r3, #1
 8007bae:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007bb0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007bc0:	f015 0f07 	tst.w	r5, #7
 8007bc4:	d0e3      	beq.n	8007b8e <UART_RxISR_8BIT_FIFOEN+0x72>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007bc6:	f015 0f01 	tst.w	r5, #1
 8007bca:	d009      	beq.n	8007be0 <UART_RxISR_8BIT_FIFOEN+0xc4>
 8007bcc:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007bd0:	d006      	beq.n	8007be0 <UART_RxISR_8BIT_FIFOEN+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bd6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007be0:	f015 0f02 	tst.w	r5, #2
 8007be4:	d0c0      	beq.n	8007b68 <UART_RxISR_8BIT_FIFOEN+0x4c>
 8007be6:	f018 0f01 	tst.w	r8, #1
 8007bea:	d0cc      	beq.n	8007b86 <UART_RxISR_8BIT_FIFOEN+0x6a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bf2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007bf6:	f043 0304 	orr.w	r3, r3, #4
 8007bfa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bfe:	f015 0f04 	tst.w	r5, #4
 8007c02:	d1b7      	bne.n	8007b74 <UART_RxISR_8BIT_FIFOEN+0x58>
 8007c04:	e7bf      	b.n	8007b86 <UART_RxISR_8BIT_FIFOEN+0x6a>
          HAL_UART_ErrorCallback(huart);
 8007c06:	4620      	mov	r0, r4
 8007c08:	f7ff fcbe 	bl	8007588 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c0c:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 8007c10:	e7bd      	b.n	8007b8e <UART_RxISR_8BIT_FIFOEN+0x72>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c12:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	e852 3f00 	ldrex	r3, [r2]
 8007c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1c:	e842 3100 	strex	r1, r3, [r2]
 8007c20:	2900      	cmp	r1, #0
 8007c22:	d1f6      	bne.n	8007c12 <UART_RxISR_8BIT_FIFOEN+0xf6>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c24:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c26:	f102 0308 	add.w	r3, r2, #8
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c32:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	3208      	adds	r2, #8
 8007c38:	e842 3100 	strex	r1, r3, [r2]
 8007c3c:	2900      	cmp	r1, #0
 8007c3e:	d1f1      	bne.n	8007c24 <UART_RxISR_8BIT_FIFOEN+0x108>
        huart->RxState = HAL_UART_STATE_READY;
 8007c40:	2320      	movs	r3, #32
 8007c42:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8007c46:	6767      	str	r7, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c48:	6727      	str	r7, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	4553      	cmp	r3, sl
 8007c4e:	d003      	beq.n	8007c58 <UART_RxISR_8BIT_FIFOEN+0x13c>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007c56:	d106      	bne.n	8007c66 <UART_RxISR_8BIT_FIFOEN+0x14a>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c58:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d00d      	beq.n	8007c7a <UART_RxISR_8BIT_FIFOEN+0x15e>
          HAL_UART_RxCpltCallback(huart);
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f7fa ff8c 	bl	8002b7c <HAL_UART_RxCpltCallback>
 8007c64:	e798      	b.n	8007b98 <UART_RxISR_8BIT_FIFOEN+0x7c>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c66:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c68:	e852 3f00 	ldrex	r3, [r2]
 8007c6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	e842 3100 	strex	r1, r3, [r2]
 8007c74:	2900      	cmp	r1, #0
 8007c76:	d1f6      	bne.n	8007c66 <UART_RxISR_8BIT_FIFOEN+0x14a>
 8007c78:	e7ee      	b.n	8007c58 <UART_RxISR_8BIT_FIFOEN+0x13c>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c7a:	66e7      	str	r7, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c7c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7e:	e852 3f00 	ldrex	r3, [r2]
 8007c82:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c86:	e842 3100 	strex	r1, r3, [r2]
 8007c8a:	2900      	cmp	r1, #0
 8007c8c:	d1f6      	bne.n	8007c7c <UART_RxISR_8BIT_FIFOEN+0x160>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	69da      	ldr	r2, [r3, #28]
 8007c92:	f012 0f10 	tst.w	r2, #16
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c96:	bf1c      	itt	ne
 8007c98:	2210      	movne	r2, #16
 8007c9a:	621a      	strne	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c9c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f7ff fca8 	bl	80075f6 <HAL_UARTEx_RxEventCallback>
 8007ca6:	e777      	b.n	8007b98 <UART_RxISR_8BIT_FIFOEN+0x7c>
    rxdatacount = huart->RxXferCount;
 8007ca8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007cac:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f43f af46 	beq.w	8007b40 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007cb4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	f67f af41 	bls.w	8007b40 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007cbe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc0:	f102 0308 	add.w	r3, r2, #8
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	3208      	adds	r2, #8
 8007cce:	e842 3100 	strex	r1, r3, [r2]
 8007cd2:	2900      	cmp	r1, #0
 8007cd4:	d1f3      	bne.n	8007cbe <UART_RxISR_8BIT_FIFOEN+0x1a2>
      huart->RxISR = UART_RxISR_8BIT;
 8007cd6:	f647 136d 	movw	r3, #31085	; 0x796d
 8007cda:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007cde:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ce0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	e852 3f00 	ldrex	r3, [r2]
 8007ce6:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	e842 3100 	strex	r1, r3, [r2]
 8007cee:	2900      	cmp	r1, #0
 8007cf0:	d1f6      	bne.n	8007ce0 <UART_RxISR_8BIT_FIFOEN+0x1c4>
 8007cf2:	e725      	b.n	8007b40 <UART_RxISR_8BIT_FIFOEN+0x24>
    rxdatacount = huart->RxXferCount;
 8007cf4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007cf8:	e722      	b.n	8007b40 <UART_RxISR_8BIT_FIFOEN+0x24>

08007cfa <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007cfa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007cfe:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007d02:	6803      	ldr	r3, [r0, #0]
 8007d04:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d06:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d0a:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d0e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8007d12:	2a22      	cmp	r2, #34	; 0x22
 8007d14:	d005      	beq.n	8007d22 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d16:	699a      	ldr	r2, [r3, #24]
 8007d18:	f042 0208 	orr.w	r2, r2, #8
 8007d1c:	619a      	str	r2, [r3, #24]
  }
}
 8007d1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d22:	4604      	mov	r4, r0
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d24:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 80d2 	beq.w	8007ed2 <UART_RxISR_16BIT_FIFOEN+0x1d8>
 8007d2e:	f011 0f20 	tst.w	r1, #32
 8007d32:	f000 80a8 	beq.w	8007e86 <UART_RxISR_16BIT_FIFOEN+0x18c>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d36:	2700      	movs	r7, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d38:	f04f 0b04 	mov.w	fp, #4
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d3c:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
 8007d40:	f2c4 0a00 	movt	sl, #16384	; 0x4000
 8007d44:	e01b      	b.n	8007d7e <UART_RxISR_16BIT_FIFOEN+0x84>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d46:	f015 0f04 	tst.w	r5, #4
 8007d4a:	d00b      	beq.n	8007d64 <UART_RxISR_16BIT_FIFOEN+0x6a>
 8007d4c:	f018 0f01 	tst.w	r8, #1
 8007d50:	d008      	beq.n	8007d64 <UART_RxISR_16BIT_FIFOEN+0x6a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	f8c3 b020 	str.w	fp, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d58:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007d5c:	f043 0302 	orr.w	r3, r3, #2
 8007d60:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d64:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d13b      	bne.n	8007de4 <UART_RxISR_16BIT_FIFOEN+0xea>
      if (huart->RxXferCount == 0U)
 8007d6c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d03c      	beq.n	8007df0 <UART_RxISR_16BIT_FIFOEN+0xf6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d76:	f015 0f20 	tst.w	r5, #32
 8007d7a:	f000 8084 	beq.w	8007e86 <UART_RxISR_16BIT_FIFOEN+0x18c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d82:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8007d84:	4033      	ands	r3, r6
 8007d86:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8007d88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d8a:	3302      	adds	r3, #2
 8007d8c:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007d8e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007d92:	3b01      	subs	r3, #1
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d9a:	6823      	ldr	r3, [r4, #0]
 8007d9c:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d9e:	f015 0f07 	tst.w	r5, #7
 8007da2:	d0e3      	beq.n	8007d6c <UART_RxISR_16BIT_FIFOEN+0x72>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007da4:	f015 0f01 	tst.w	r5, #1
 8007da8:	d009      	beq.n	8007dbe <UART_RxISR_16BIT_FIFOEN+0xc4>
 8007daa:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007dae:	d006      	beq.n	8007dbe <UART_RxISR_16BIT_FIFOEN+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007db0:	2201      	movs	r2, #1
 8007db2:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007db4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007db8:	4313      	orrs	r3, r2
 8007dba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dbe:	f015 0f02 	tst.w	r5, #2
 8007dc2:	d0c0      	beq.n	8007d46 <UART_RxISR_16BIT_FIFOEN+0x4c>
 8007dc4:	f018 0f01 	tst.w	r8, #1
 8007dc8:	d0cc      	beq.n	8007d64 <UART_RxISR_16BIT_FIFOEN+0x6a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dca:	6823      	ldr	r3, [r4, #0]
 8007dcc:	2202      	movs	r2, #2
 8007dce:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dd0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007dd4:	f043 0304 	orr.w	r3, r3, #4
 8007dd8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ddc:	f015 0f04 	tst.w	r5, #4
 8007de0:	d1b7      	bne.n	8007d52 <UART_RxISR_16BIT_FIFOEN+0x58>
 8007de2:	e7bf      	b.n	8007d64 <UART_RxISR_16BIT_FIFOEN+0x6a>
          HAL_UART_ErrorCallback(huart);
 8007de4:	4620      	mov	r0, r4
 8007de6:	f7ff fbcf 	bl	8007588 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dea:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 8007dee:	e7bd      	b.n	8007d6c <UART_RxISR_16BIT_FIFOEN+0x72>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007df0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df2:	e852 3f00 	ldrex	r3, [r2]
 8007df6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	e842 3100 	strex	r1, r3, [r2]
 8007dfe:	2900      	cmp	r1, #0
 8007e00:	d1f6      	bne.n	8007df0 <UART_RxISR_16BIT_FIFOEN+0xf6>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e02:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e04:	f102 0308 	add.w	r3, r2, #8
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e10:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e14:	3208      	adds	r2, #8
 8007e16:	e842 3100 	strex	r1, r3, [r2]
 8007e1a:	2900      	cmp	r1, #0
 8007e1c:	d1f1      	bne.n	8007e02 <UART_RxISR_16BIT_FIFOEN+0x108>
        huart->RxState = HAL_UART_STATE_READY;
 8007e1e:	2320      	movs	r3, #32
 8007e20:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8007e24:	6767      	str	r7, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e26:	6727      	str	r7, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	4553      	cmp	r3, sl
 8007e2c:	d003      	beq.n	8007e36 <UART_RxISR_16BIT_FIFOEN+0x13c>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007e34:	d106      	bne.n	8007e44 <UART_RxISR_16BIT_FIFOEN+0x14a>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e36:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d00d      	beq.n	8007e58 <UART_RxISR_16BIT_FIFOEN+0x15e>
          HAL_UART_RxCpltCallback(huart);
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f7fa fe9d 	bl	8002b7c <HAL_UART_RxCpltCallback>
 8007e42:	e798      	b.n	8007d76 <UART_RxISR_16BIT_FIFOEN+0x7c>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e44:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e46:	e852 3f00 	ldrex	r3, [r2]
 8007e4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	e842 3100 	strex	r1, r3, [r2]
 8007e52:	2900      	cmp	r1, #0
 8007e54:	d1f6      	bne.n	8007e44 <UART_RxISR_16BIT_FIFOEN+0x14a>
 8007e56:	e7ee      	b.n	8007e36 <UART_RxISR_16BIT_FIFOEN+0x13c>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e58:	66e7      	str	r7, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e5a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5c:	e852 3f00 	ldrex	r3, [r2]
 8007e60:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e64:	e842 3100 	strex	r1, r3, [r2]
 8007e68:	2900      	cmp	r1, #0
 8007e6a:	d1f6      	bne.n	8007e5a <UART_RxISR_16BIT_FIFOEN+0x160>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	69da      	ldr	r2, [r3, #28]
 8007e70:	f012 0f10 	tst.w	r2, #16
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e74:	bf1c      	itt	ne
 8007e76:	2210      	movne	r2, #16
 8007e78:	621a      	strne	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e7a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f7ff fbb9 	bl	80075f6 <HAL_UARTEx_RxEventCallback>
 8007e84:	e777      	b.n	8007d76 <UART_RxISR_16BIT_FIFOEN+0x7c>
    rxdatacount = huart->RxXferCount;
 8007e86:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007e8a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f43f af46 	beq.w	8007d1e <UART_RxISR_16BIT_FIFOEN+0x24>
 8007e92:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007e96:	429a      	cmp	r2, r3
 8007e98:	f67f af41 	bls.w	8007d1e <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e9c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9e:	f102 0308 	add.w	r3, r2, #8
 8007ea2:	e853 3f00 	ldrex	r3, [r3]
 8007ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eaa:	3208      	adds	r2, #8
 8007eac:	e842 3100 	strex	r1, r3, [r2]
 8007eb0:	2900      	cmp	r1, #0
 8007eb2:	d1f3      	bne.n	8007e9c <UART_RxISR_16BIT_FIFOEN+0x1a2>
      huart->RxISR = UART_RxISR_16BIT;
 8007eb4:	f647 2345 	movw	r3, #31301	; 0x7a45
 8007eb8:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007ebc:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ebe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	e852 3f00 	ldrex	r3, [r2]
 8007ec4:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec8:	e842 3100 	strex	r1, r3, [r2]
 8007ecc:	2900      	cmp	r1, #0
 8007ece:	d1f6      	bne.n	8007ebe <UART_RxISR_16BIT_FIFOEN+0x1c4>
 8007ed0:	e725      	b.n	8007d1e <UART_RxISR_16BIT_FIFOEN+0x24>
    rxdatacount = huart->RxXferCount;
 8007ed2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007ed6:	e722      	b.n	8007d1e <UART_RxISR_16BIT_FIFOEN+0x24>

08007ed8 <UART_SetConfig>:
{
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8007edc:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ede:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ee0:	68a3      	ldr	r3, [r4, #8]
 8007ee2:	6922      	ldr	r2, [r4, #16]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	6962      	ldr	r2, [r4, #20]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	69e2      	ldr	r2, [r4, #28]
 8007eec:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007eee:	f646 12f3 	movw	r2, #27123	; 0x69f3
 8007ef2:	f6cc 72ff 	movt	r2, #53247	; 0xcfff
 8007ef6:	4002      	ands	r2, r0
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007efc:	6822      	ldr	r2, [r4, #0]
 8007efe:	6853      	ldr	r3, [r2, #4]
 8007f00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007f04:	68e1      	ldr	r1, [r4, #12]
 8007f06:	430b      	orrs	r3, r1
 8007f08:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f0a:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f0c:	6822      	ldr	r2, [r4, #0]
 8007f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f12:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007f16:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8007f18:	bf1c      	itt	ne
 8007f1a:	6a23      	ldrne	r3, [r4, #32]
 8007f1c:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f1e:	6893      	ldr	r3, [r2, #8]
 8007f20:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007f24:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007f28:	430b      	orrs	r3, r1
 8007f2a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f2c:	6822      	ldr	r2, [r4, #0]
 8007f2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007f30:	f023 030f 	bic.w	r3, r3, #15
 8007f34:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007f36:	430b      	orrs	r3, r1
 8007f38:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007f40:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d01f      	beq.n	8007f88 <UART_SetConfig+0xb0>
 8007f48:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 8007f4c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d02f      	beq.n	8007fb4 <UART_SetConfig+0xdc>
 8007f54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007f58:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d04a      	beq.n	8007ff6 <UART_SetConfig+0x11e>
 8007f60:	2210      	movs	r2, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f62:	69e0      	ldr	r0, [r4, #28]
 8007f64:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007f68:	f000 80c7 	beq.w	80080fa <UART_SetConfig+0x222>
    switch (clocksource)
 8007f6c:	2a08      	cmp	r2, #8
 8007f6e:	f200 813c 	bhi.w	80081ea <UART_SetConfig+0x312>
 8007f72:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007f76:	00fc      	.short	0x00fc
 8007f78:	01270121 	.word	0x01270121
 8007f7c:	0124013a 	.word	0x0124013a
 8007f80:	013a013a 	.word	0x013a013a
 8007f84:	00f9013a 	.word	0x00f9013a
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f8c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007f90:	f002 0203 	and.w	r2, r2, #3
 8007f94:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f98:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8007f9c:	2a03      	cmp	r2, #3
 8007f9e:	d807      	bhi.n	8007fb0 <UART_SetConfig+0xd8>
 8007fa0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007fa4:	00040076 	.word	0x00040076
 8007fa8:	012b0129 	.word	0x012b0129
 8007fac:	2204      	movs	r2, #4
 8007fae:	e7d8      	b.n	8007f62 <UART_SetConfig+0x8a>
 8007fb0:	2210      	movs	r2, #16
 8007fb2:	e7d6      	b.n	8007f62 <UART_SetConfig+0x8a>
 8007fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fb8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007fbc:	f002 020c 	and.w	r2, r2, #12
 8007fc0:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8007fc4:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8007fc8:	2a0c      	cmp	r2, #12
 8007fca:	d812      	bhi.n	8007ff2 <UART_SetConfig+0x11a>
 8007fcc:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007fd0:	00110080 	.word	0x00110080
 8007fd4:	00110011 	.word	0x00110011
 8007fd8:	0011000d 	.word	0x0011000d
 8007fdc:	00110011 	.word	0x00110011
 8007fe0:	00110117 	.word	0x00110117
 8007fe4:	00110011 	.word	0x00110011
 8007fe8:	000f      	.short	0x000f
 8007fea:	2204      	movs	r2, #4
 8007fec:	e7b9      	b.n	8007f62 <UART_SetConfig+0x8a>
 8007fee:	2208      	movs	r2, #8
 8007ff0:	e7b7      	b.n	8007f62 <UART_SetConfig+0x8a>
 8007ff2:	2210      	movs	r2, #16
 8007ff4:	e7b5      	b.n	8007f62 <UART_SetConfig+0x8a>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ffe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008006:	d070      	beq.n	80080ea <UART_SetConfig+0x212>
 8008008:	d80a      	bhi.n	8008020 <UART_SetConfig+0x148>
 800800a:	2b00      	cmp	r3, #0
 800800c:	d067      	beq.n	80080de <UART_SetConfig+0x206>
 800800e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008012:	bf18      	it	ne
 8008014:	2001      	movne	r0, #1
 8008016:	f040 80c6 	bne.w	80081a6 <UART_SetConfig+0x2ce>
        pclk = HAL_RCC_GetSysClockFreq();
 800801a:	f7fd fb01 	bl	8005620 <HAL_RCC_GetSysClockFreq>
        break;
 800801e:	e060      	b.n	80080e2 <UART_SetConfig+0x20a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008020:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008024:	d132      	bne.n	800808c <UART_SetConfig+0x1b4>
 8008026:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800802a:	f244 7390 	movw	r3, #18320	; 0x4790
 800802e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008032:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008034:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8008038:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800803c:	6865      	ldr	r5, [r4, #4]
 800803e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8008042:	4299      	cmp	r1, r3
 8008044:	f200 80c5 	bhi.w	80081d2 <UART_SetConfig+0x2fa>
 8008048:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800804c:	f200 80c3 	bhi.w	80081d6 <UART_SetConfig+0x2fe>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008050:	2600      	movs	r6, #0
 8008052:	4633      	mov	r3, r6
 8008054:	4631      	mov	r1, r6
 8008056:	f7f8 fe99 	bl	8000d8c <__aeabi_uldivmod>
 800805a:	0209      	lsls	r1, r1, #8
 800805c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8008060:	0200      	lsls	r0, r0, #8
 8008062:	086b      	lsrs	r3, r5, #1
 8008064:	18c0      	adds	r0, r0, r3
 8008066:	462a      	mov	r2, r5
 8008068:	4633      	mov	r3, r6
 800806a:	f141 0100 	adc.w	r1, r1, #0
 800806e:	f7f8 fe8d 	bl	8000d8c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008072:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8008076:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800807a:	f2c0 030f 	movt	r3, #15
 800807e:	429a      	cmp	r2, r3
 8008080:	f200 80ab 	bhi.w	80081da <UART_SetConfig+0x302>
          huart->Instance->BRR = usartdiv;
 8008084:	6823      	ldr	r3, [r4, #0]
 8008086:	60d8      	str	r0, [r3, #12]
 8008088:	4630      	mov	r0, r6
 800808a:	e08c      	b.n	80081a6 <UART_SetConfig+0x2ce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800808c:	2001      	movs	r0, #1
 800808e:	e08a      	b.n	80081a6 <UART_SetConfig+0x2ce>
 8008090:	2201      	movs	r2, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 8008092:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008096:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800809a:	428b      	cmp	r3, r1
 800809c:	f47f af61 	bne.w	8007f62 <UART_SetConfig+0x8a>
    switch (clocksource)
 80080a0:	2a08      	cmp	r2, #8
 80080a2:	f200 8094 	bhi.w	80081ce <UART_SetConfig+0x2f6>
 80080a6:	a301      	add	r3, pc, #4	; (adr r3, 80080ac <UART_SetConfig+0x1d4>)
 80080a8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80080ac:	080080df 	.word	0x080080df
 80080b0:	080081cf 	.word	0x080081cf
 80080b4:	080080d5 	.word	0x080080d5
 80080b8:	080081cf 	.word	0x080081cf
 80080bc:	0800801b 	.word	0x0800801b
 80080c0:	080081cf 	.word	0x080081cf
 80080c4:	080081cf 	.word	0x080081cf
 80080c8:	080081cf 	.word	0x080081cf
 80080cc:	080080f5 	.word	0x080080f5
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080d0:	2200      	movs	r2, #0
 80080d2:	e7de      	b.n	8008092 <UART_SetConfig+0x1ba>
    switch (clocksource)
 80080d4:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 80080d8:	f2c0 00f4 	movt	r0, #244	; 0xf4
 80080dc:	e7a5      	b.n	800802a <UART_SetConfig+0x152>
        pclk = HAL_RCC_GetPCLK1Freq();
 80080de:	f7fd ffa5 	bl	800602c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d1a1      	bne.n	800802a <UART_SetConfig+0x152>
 80080e6:	2000      	movs	r0, #0
 80080e8:	e05d      	b.n	80081a6 <UART_SetConfig+0x2ce>
        pclk = (uint32_t) HSI_VALUE;
 80080ea:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 80080ee:	f2c0 00f4 	movt	r0, #244	; 0xf4
 80080f2:	e79a      	b.n	800802a <UART_SetConfig+0x152>
        pclk = (uint32_t) LSE_VALUE;
 80080f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80080f8:	e797      	b.n	800802a <UART_SetConfig+0x152>
    switch (clocksource)
 80080fa:	2a08      	cmp	r2, #8
 80080fc:	d86f      	bhi.n	80081de <UART_SetConfig+0x306>
 80080fe:	e8df f002 	tbb	[pc, r2]
 8008102:	2805      	.short	0x2805
 8008104:	6e2b6e2e 	.word	0x6e2b6e2e
 8008108:	6e6e      	.short	0x6e6e
 800810a:	09          	.byte	0x09
 800810b:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 800810c:	f7fd ff8e 	bl	800602c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008110:	2800      	cmp	r0, #0
 8008112:	d066      	beq.n	80081e2 <UART_SetConfig+0x30a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008114:	6862      	ldr	r2, [r4, #4]
 8008116:	f244 7390 	movw	r3, #18320	; 0x4790
 800811a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800811e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008120:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8008124:	fbb0 f0f3 	udiv	r0, r0, r3
 8008128:	0853      	lsrs	r3, r2, #1
 800812a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800812e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008132:	f1a3 0110 	sub.w	r1, r3, #16
 8008136:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800813a:	4291      	cmp	r1, r2
 800813c:	d853      	bhi.n	80081e6 <UART_SetConfig+0x30e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800813e:	f023 020f 	bic.w	r2, r3, #15
 8008142:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8008144:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008146:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800814a:	4313      	orrs	r3, r2
 800814c:	60cb      	str	r3, [r1, #12]
 800814e:	2000      	movs	r0, #0
 8008150:	e029      	b.n	80081a6 <UART_SetConfig+0x2ce>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008152:	f7fd ff7b 	bl	800604c <HAL_RCC_GetPCLK2Freq>
        break;
 8008156:	e7db      	b.n	8008110 <UART_SetConfig+0x238>
        pclk = HAL_RCC_GetSysClockFreq();
 8008158:	f7fd fa62 	bl	8005620 <HAL_RCC_GetSysClockFreq>
        break;
 800815c:	e7d8      	b.n	8008110 <UART_SetConfig+0x238>
        pclk = (uint32_t) HSI_VALUE;
 800815e:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 8008162:	f2c0 00f4 	movt	r0, #244	; 0xf4
 8008166:	e7d5      	b.n	8008114 <UART_SetConfig+0x23c>
    switch (clocksource)
 8008168:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800816c:	e003      	b.n	8008176 <UART_SetConfig+0x29e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800816e:	f7fd ff5d 	bl	800602c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008172:	2800      	cmp	r0, #0
 8008174:	d03b      	beq.n	80081ee <UART_SetConfig+0x316>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008176:	6862      	ldr	r2, [r4, #4]
 8008178:	f244 7390 	movw	r3, #18320	; 0x4790
 800817c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008180:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008182:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8008186:	fbb0 f0f3 	udiv	r0, r0, r3
 800818a:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 800818e:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008192:	f1a0 0210 	sub.w	r2, r0, #16
 8008196:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800819a:	429a      	cmp	r2, r3
 800819c:	d829      	bhi.n	80081f2 <UART_SetConfig+0x31a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	b280      	uxth	r0, r0
 80081a2:	60d8      	str	r0, [r3, #12]
 80081a4:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80081a6:	2301      	movs	r3, #1
 80081a8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80081ac:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80081b0:	2300      	movs	r3, #0
 80081b2:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80081b4:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80081b8:	f7fd ff48 	bl	800604c <HAL_RCC_GetPCLK2Freq>
        break;
 80081bc:	e7d9      	b.n	8008172 <UART_SetConfig+0x29a>
        pclk = HAL_RCC_GetSysClockFreq();
 80081be:	f7fd fa2f 	bl	8005620 <HAL_RCC_GetSysClockFreq>
        break;
 80081c2:	e7d6      	b.n	8008172 <UART_SetConfig+0x29a>
        pclk = (uint32_t) HSI_VALUE;
 80081c4:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 80081c8:	f2c0 00f4 	movt	r0, #244	; 0xf4
 80081cc:	e7d3      	b.n	8008176 <UART_SetConfig+0x29e>
    switch (clocksource)
 80081ce:	2001      	movs	r0, #1
 80081d0:	e7e9      	b.n	80081a6 <UART_SetConfig+0x2ce>
        ret = HAL_ERROR;
 80081d2:	2001      	movs	r0, #1
 80081d4:	e7e7      	b.n	80081a6 <UART_SetConfig+0x2ce>
 80081d6:	2001      	movs	r0, #1
 80081d8:	e7e5      	b.n	80081a6 <UART_SetConfig+0x2ce>
          ret = HAL_ERROR;
 80081da:	2001      	movs	r0, #1
 80081dc:	e7e3      	b.n	80081a6 <UART_SetConfig+0x2ce>
    switch (clocksource)
 80081de:	2001      	movs	r0, #1
 80081e0:	e7e1      	b.n	80081a6 <UART_SetConfig+0x2ce>
 80081e2:	2000      	movs	r0, #0
 80081e4:	e7df      	b.n	80081a6 <UART_SetConfig+0x2ce>
        ret = HAL_ERROR;
 80081e6:	2001      	movs	r0, #1
 80081e8:	e7dd      	b.n	80081a6 <UART_SetConfig+0x2ce>
    switch (clocksource)
 80081ea:	2001      	movs	r0, #1
 80081ec:	e7db      	b.n	80081a6 <UART_SetConfig+0x2ce>
 80081ee:	2000      	movs	r0, #0
 80081f0:	e7d9      	b.n	80081a6 <UART_SetConfig+0x2ce>
        ret = HAL_ERROR;
 80081f2:	2001      	movs	r0, #1
 80081f4:	e7d7      	b.n	80081a6 <UART_SetConfig+0x2ce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081f6:	2202      	movs	r2, #2
 80081f8:	e6b3      	b.n	8007f62 <UART_SetConfig+0x8a>
 80081fa:	2208      	movs	r2, #8
 80081fc:	e6b1      	b.n	8007f62 <UART_SetConfig+0x8a>
 80081fe:	2202      	movs	r2, #2
 8008200:	e6af      	b.n	8007f62 <UART_SetConfig+0x8a>
 8008202:	bf00      	nop

08008204 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008204:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008206:	f013 0f01 	tst.w	r3, #1
 800820a:	d006      	beq.n	800821a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800820c:	6802      	ldr	r2, [r0, #0]
 800820e:	6853      	ldr	r3, [r2, #4]
 8008210:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008214:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008216:	430b      	orrs	r3, r1
 8008218:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800821a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800821c:	f013 0f02 	tst.w	r3, #2
 8008220:	d006      	beq.n	8008230 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008222:	6802      	ldr	r2, [r0, #0]
 8008224:	6853      	ldr	r3, [r2, #4]
 8008226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800822a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800822c:	430b      	orrs	r3, r1
 800822e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008230:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008232:	f013 0f04 	tst.w	r3, #4
 8008236:	d006      	beq.n	8008246 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008238:	6802      	ldr	r2, [r0, #0]
 800823a:	6853      	ldr	r3, [r2, #4]
 800823c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008240:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008242:	430b      	orrs	r3, r1
 8008244:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008246:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008248:	f013 0f08 	tst.w	r3, #8
 800824c:	d006      	beq.n	800825c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800824e:	6802      	ldr	r2, [r0, #0]
 8008250:	6853      	ldr	r3, [r2, #4]
 8008252:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008256:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8008258:	430b      	orrs	r3, r1
 800825a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800825c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800825e:	f013 0f10 	tst.w	r3, #16
 8008262:	d006      	beq.n	8008272 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008264:	6802      	ldr	r2, [r0, #0]
 8008266:	6893      	ldr	r3, [r2, #8]
 8008268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800826c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800826e:	430b      	orrs	r3, r1
 8008270:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008272:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008274:	f013 0f20 	tst.w	r3, #32
 8008278:	d006      	beq.n	8008288 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800827a:	6802      	ldr	r2, [r0, #0]
 800827c:	6893      	ldr	r3, [r2, #8]
 800827e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008282:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008284:	430b      	orrs	r3, r1
 8008286:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008288:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800828a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800828e:	d00a      	beq.n	80082a6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008290:	6802      	ldr	r2, [r0, #0]
 8008292:	6853      	ldr	r3, [r2, #4]
 8008294:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008298:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800829a:	430b      	orrs	r3, r1
 800829c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800829e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80082a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082a4:	d00b      	beq.n	80082be <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80082a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80082ac:	d006      	beq.n	80082bc <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082ae:	6802      	ldr	r2, [r0, #0]
 80082b0:	6853      	ldr	r3, [r2, #4]
 80082b2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80082b6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80082b8:	430b      	orrs	r3, r1
 80082ba:	6053      	str	r3, [r2, #4]
}
 80082bc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082be:	6802      	ldr	r2, [r0, #0]
 80082c0:	6853      	ldr	r3, [r2, #4]
 80082c2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80082c6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80082c8:	430b      	orrs	r3, r1
 80082ca:	6053      	str	r3, [r2, #4]
 80082cc:	e7eb      	b.n	80082a6 <UART_AdvFeatureConfig+0xa2>

080082ce <UART_WaitOnFlagUntilTimeout>:
{
 80082ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d2:	4680      	mov	r8, r0
 80082d4:	460e      	mov	r6, r1
 80082d6:	4615      	mov	r5, r2
 80082d8:	4699      	mov	r9, r3
 80082da:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082dc:	f8d8 3000 	ldr.w	r3, [r8]
 80082e0:	69dc      	ldr	r4, [r3, #28]
 80082e2:	ea36 0404 	bics.w	r4, r6, r4
 80082e6:	bf0c      	ite	eq
 80082e8:	2401      	moveq	r4, #1
 80082ea:	2400      	movne	r4, #0
 80082ec:	42ac      	cmp	r4, r5
 80082ee:	d15a      	bne.n	80083a6 <UART_WaitOnFlagUntilTimeout+0xd8>
    if (Timeout != HAL_MAX_DELAY)
 80082f0:	f1b7 3fff 	cmp.w	r7, #4294967295
 80082f4:	d0f4      	beq.n	80082e0 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082f6:	f7f9 ffb7 	bl	8002268 <HAL_GetTick>
 80082fa:	eba0 0009 	sub.w	r0, r0, r9
 80082fe:	42b8      	cmp	r0, r7
 8008300:	d830      	bhi.n	8008364 <UART_WaitOnFlagUntilTimeout+0x96>
 8008302:	b37f      	cbz	r7, 8008364 <UART_WaitOnFlagUntilTimeout+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008304:	f8d8 3000 	ldr.w	r3, [r8]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	f012 0f04 	tst.w	r2, #4
 800830e:	d0e5      	beq.n	80082dc <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008310:	69da      	ldr	r2, [r3, #28]
 8008312:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008316:	d0e1      	beq.n	80082dc <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800831c:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800831e:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008322:	e852 3f00 	ldrex	r3, [r2]
 8008326:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832a:	e842 3100 	strex	r1, r3, [r2]
 800832e:	2900      	cmp	r1, #0
 8008330:	d1f5      	bne.n	800831e <UART_WaitOnFlagUntilTimeout+0x50>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008332:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008336:	f102 0308 	add.w	r3, r2, #8
 800833a:	e853 3f00 	ldrex	r3, [r3]
 800833e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008342:	3208      	adds	r2, #8
 8008344:	e842 3100 	strex	r1, r3, [r2]
 8008348:	2900      	cmp	r1, #0
 800834a:	d1f2      	bne.n	8008332 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 800834c:	2320      	movs	r3, #32
 800834e:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008352:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008356:	f8c8 3090 	str.w	r3, [r8, #144]	; 0x90
          __HAL_UNLOCK(huart);
 800835a:	2300      	movs	r3, #0
 800835c:	f888 3084 	strb.w	r3, [r8, #132]	; 0x84
          return HAL_TIMEOUT;
 8008360:	2003      	movs	r0, #3
 8008362:	e021      	b.n	80083a8 <UART_WaitOnFlagUntilTimeout+0xda>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008364:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008368:	e852 3f00 	ldrex	r3, [r2]
 800836c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008370:	e842 3100 	strex	r1, r3, [r2]
 8008374:	2900      	cmp	r1, #0
 8008376:	d1f5      	bne.n	8008364 <UART_WaitOnFlagUntilTimeout+0x96>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008378:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	f102 0308 	add.w	r3, r2, #8
 8008380:	e853 3f00 	ldrex	r3, [r3]
 8008384:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008388:	3208      	adds	r2, #8
 800838a:	e842 3100 	strex	r1, r3, [r2]
 800838e:	2900      	cmp	r1, #0
 8008390:	d1f2      	bne.n	8008378 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8008392:	2320      	movs	r3, #32
 8008394:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008398:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 800839c:	2300      	movs	r3, #0
 800839e:	f888 3084 	strb.w	r3, [r8, #132]	; 0x84
        return HAL_TIMEOUT;
 80083a2:	2003      	movs	r0, #3
 80083a4:	e000      	b.n	80083a8 <UART_WaitOnFlagUntilTimeout+0xda>
  return HAL_OK;
 80083a6:	2000      	movs	r0, #0
}
 80083a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080083ac <UART_CheckIdleState>:
{
 80083ac:	b530      	push	{r4, r5, lr}
 80083ae:	b083      	sub	sp, #12
 80083b0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083b2:	2300      	movs	r3, #0
 80083b4:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 80083b8:	f7f9 ff56 	bl	8002268 <HAL_GetTick>
 80083bc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083be:	6822      	ldr	r2, [r4, #0]
 80083c0:	6812      	ldr	r2, [r2, #0]
 80083c2:	f012 0f08 	tst.w	r2, #8
 80083c6:	d110      	bne.n	80083ea <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f013 0f04 	tst.w	r3, #4
 80083d0:	d119      	bne.n	8008406 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 80083d2:	2320      	movs	r3, #32
 80083d4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80083d8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083dc:	2000      	movs	r0, #0
 80083de:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083e0:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 80083e2:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80083e6:	b003      	add	sp, #12
 80083e8:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	4603      	mov	r3, r0
 80083f2:	2200      	movs	r2, #0
 80083f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083f8:	4620      	mov	r0, r4
 80083fa:	f7ff ff68 	bl	80082ce <UART_WaitOnFlagUntilTimeout>
 80083fe:	2800      	cmp	r0, #0
 8008400:	d0e2      	beq.n	80083c8 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8008402:	2003      	movs	r0, #3
 8008404:	e7ef      	b.n	80083e6 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008406:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	462b      	mov	r3, r5
 800840e:	2200      	movs	r2, #0
 8008410:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008414:	4620      	mov	r0, r4
 8008416:	f7ff ff5a 	bl	80082ce <UART_WaitOnFlagUntilTimeout>
 800841a:	2800      	cmp	r0, #0
 800841c:	d0d9      	beq.n	80083d2 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800841e:	2003      	movs	r0, #3
 8008420:	e7e1      	b.n	80083e6 <UART_CheckIdleState+0x3a>

08008422 <HAL_UART_Init>:
  if (huart == NULL)
 8008422:	b378      	cbz	r0, 8008484 <HAL_UART_Init+0x62>
{
 8008424:	b510      	push	{r4, lr}
 8008426:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008428:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800842c:	b30b      	cbz	r3, 8008472 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800842e:	2324      	movs	r3, #36	; 0x24
 8008430:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8008434:	6822      	ldr	r2, [r4, #0]
 8008436:	6813      	ldr	r3, [r2, #0]
 8008438:	f023 0301 	bic.w	r3, r3, #1
 800843c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800843e:	4620      	mov	r0, r4
 8008440:	f7ff fd4a 	bl	8007ed8 <UART_SetConfig>
 8008444:	2801      	cmp	r0, #1
 8008446:	d013      	beq.n	8008470 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008448:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800844a:	b9bb      	cbnz	r3, 800847c <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800844c:	6822      	ldr	r2, [r4, #0]
 800844e:	6853      	ldr	r3, [r2, #4]
 8008450:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008454:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008456:	6822      	ldr	r2, [r4, #0]
 8008458:	6893      	ldr	r3, [r2, #8]
 800845a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800845e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8008460:	6822      	ldr	r2, [r4, #0]
 8008462:	6813      	ldr	r3, [r2, #0]
 8008464:	f043 0301 	orr.w	r3, r3, #1
 8008468:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800846a:	4620      	mov	r0, r4
 800846c:	f7ff ff9e 	bl	80083ac <UART_CheckIdleState>
}
 8008470:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8008472:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8008476:	f7fa f9c3 	bl	8002800 <HAL_UART_MspInit>
 800847a:	e7d8      	b.n	800842e <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800847c:	4620      	mov	r0, r4
 800847e:	f7ff fec1 	bl	8008204 <UART_AdvFeatureConfig>
 8008482:	e7e3      	b.n	800844c <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8008484:	2001      	movs	r0, #1
}
 8008486:	4770      	bx	lr

08008488 <UART_Start_Receive_IT>:
{
 8008488:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 800848a:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 800848c:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008490:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008494:	2300      	movs	r3, #0
 8008496:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 8008498:	6883      	ldr	r3, [r0, #8]
 800849a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800849e:	d007      	beq.n	80084b0 <UART_Start_Receive_IT+0x28>
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d13b      	bne.n	800851c <UART_Start_Receive_IT+0x94>
 80084a4:	6903      	ldr	r3, [r0, #16]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	bf14      	ite	ne
 80084aa:	237f      	movne	r3, #127	; 0x7f
 80084ac:	23ff      	moveq	r3, #255	; 0xff
 80084ae:	e005      	b.n	80084bc <UART_Start_Receive_IT+0x34>
 80084b0:	6903      	ldr	r3, [r0, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f240 13ff 	movw	r3, #511	; 0x1ff
 80084b8:	bf18      	it	ne
 80084ba:	23ff      	movne	r3, #255	; 0xff
 80084bc:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084c0:	2300      	movs	r3, #0
 80084c2:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084c6:	2322      	movs	r3, #34	; 0x22
 80084c8:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084cc:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	f101 0308 	add.w	r3, r1, #8
 80084d2:	e853 3f00 	ldrex	r3, [r3]
 80084d6:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084da:	3108      	adds	r1, #8
 80084dc:	e841 3400 	strex	r4, r3, [r1]
 80084e0:	2c00      	cmp	r4, #0
 80084e2:	d1f3      	bne.n	80084cc <UART_Start_Receive_IT+0x44>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80084e4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80084e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ea:	d022      	beq.n	8008532 <UART_Start_Receive_IT+0xaa>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084ec:	6883      	ldr	r3, [r0, #8]
 80084ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084f2:	d04b      	beq.n	800858c <UART_Start_Receive_IT+0x104>
      huart->RxISR = UART_RxISR_8BIT;
 80084f4:	f647 136d 	movw	r3, #31085	; 0x796d
 80084f8:	f6c0 0300 	movt	r3, #2048	; 0x800
 80084fc:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80084fe:	6903      	ldr	r3, [r0, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d056      	beq.n	80085b2 <UART_Start_Receive_IT+0x12a>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008504:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008506:	e852 3f00 	ldrex	r3, [r2]
 800850a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	e842 3100 	strex	r1, r3, [r2]
 8008512:	2900      	cmp	r1, #0
 8008514:	d1f6      	bne.n	8008504 <UART_Start_Receive_IT+0x7c>
}
 8008516:	2000      	movs	r0, #0
 8008518:	bc10      	pop	{r4}
 800851a:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800851c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008520:	d001      	beq.n	8008526 <UART_Start_Receive_IT+0x9e>
 8008522:	2300      	movs	r3, #0
 8008524:	e7ca      	b.n	80084bc <UART_Start_Receive_IT+0x34>
 8008526:	6903      	ldr	r3, [r0, #16]
 8008528:	2b00      	cmp	r3, #0
 800852a:	bf14      	ite	ne
 800852c:	233f      	movne	r3, #63	; 0x3f
 800852e:	237f      	moveq	r3, #127	; 0x7f
 8008530:	e7c4      	b.n	80084bc <UART_Start_Receive_IT+0x34>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008532:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008536:	4293      	cmp	r3, r2
 8008538:	d8d8      	bhi.n	80084ec <UART_Start_Receive_IT+0x64>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800853a:	6883      	ldr	r3, [r0, #8]
 800853c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008540:	d01c      	beq.n	800857c <UART_Start_Receive_IT+0xf4>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008542:	f647 331d 	movw	r3, #31517	; 0x7b1d
 8008546:	f6c0 0300 	movt	r3, #2048	; 0x800
 800854a:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800854c:	6903      	ldr	r3, [r0, #16]
 800854e:	b143      	cbz	r3, 8008562 <UART_Start_Receive_IT+0xda>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008550:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008552:	e852 3f00 	ldrex	r3, [r2]
 8008556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	e842 3100 	strex	r1, r3, [r2]
 800855e:	2900      	cmp	r1, #0
 8008560:	d1f6      	bne.n	8008550 <UART_Start_Receive_IT+0xc8>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008562:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008564:	f102 0308 	add.w	r3, r2, #8
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008570:	3208      	adds	r2, #8
 8008572:	e842 3100 	strex	r1, r3, [r2]
 8008576:	2900      	cmp	r1, #0
 8008578:	d1f3      	bne.n	8008562 <UART_Start_Receive_IT+0xda>
 800857a:	e7cc      	b.n	8008516 <UART_Start_Receive_IT+0x8e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800857c:	6903      	ldr	r3, [r0, #16]
 800857e:	b16b      	cbz	r3, 800859c <UART_Start_Receive_IT+0x114>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008580:	f647 331d 	movw	r3, #31517	; 0x7b1d
 8008584:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008588:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800858a:	e7e1      	b.n	8008550 <UART_Start_Receive_IT+0xc8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800858c:	6903      	ldr	r3, [r0, #16]
 800858e:	b15b      	cbz	r3, 80085a8 <UART_Start_Receive_IT+0x120>
      huart->RxISR = UART_RxISR_8BIT;
 8008590:	f647 136d 	movw	r3, #31085	; 0x796d
 8008594:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008598:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800859a:	e7b3      	b.n	8008504 <UART_Start_Receive_IT+0x7c>
 800859c:	f647 43fb 	movw	r3, #31995	; 0x7cfb
 80085a0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80085a4:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80085a6:	e7dc      	b.n	8008562 <UART_Start_Receive_IT+0xda>
 80085a8:	f647 2345 	movw	r3, #31301	; 0x7a45
 80085ac:	f6c0 0300 	movt	r3, #2048	; 0x800
 80085b0:	6743      	str	r3, [r0, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085b2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	e852 3f00 	ldrex	r3, [r2]
 80085b8:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085bc:	e842 3100 	strex	r1, r3, [r2]
 80085c0:	2900      	cmp	r1, #0
 80085c2:	d1f6      	bne.n	80085b2 <UART_Start_Receive_IT+0x12a>
 80085c4:	e7a7      	b.n	8008516 <UART_Start_Receive_IT+0x8e>

080085c6 <HAL_UART_Receive_IT>:
{
 80085c6:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80085c8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80085cc:	2b20      	cmp	r3, #32
 80085ce:	d11a      	bne.n	8008606 <HAL_UART_Receive_IT+0x40>
    if ((pData == NULL) || (Size == 0U))
 80085d0:	b1d9      	cbz	r1, 800860a <HAL_UART_Receive_IT+0x44>
 80085d2:	b1e2      	cbz	r2, 800860e <HAL_UART_Receive_IT+0x48>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d4:	2300      	movs	r3, #0
 80085d6:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085d8:	6804      	ldr	r4, [r0, #0]
 80085da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80085e2:	429c      	cmp	r4, r3
 80085e4:	d00c      	beq.n	8008600 <HAL_UART_Receive_IT+0x3a>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085e6:	6863      	ldr	r3, [r4, #4]
 80085e8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80085ec:	d008      	beq.n	8008600 <HAL_UART_Receive_IT+0x3a>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085ee:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	e854 3f00 	ldrex	r3, [r4]
 80085f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f8:	e844 3500 	strex	r5, r3, [r4]
 80085fc:	2d00      	cmp	r5, #0
 80085fe:	d1f6      	bne.n	80085ee <HAL_UART_Receive_IT+0x28>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008600:	f7ff ff42 	bl	8008488 <UART_Start_Receive_IT>
 8008604:	e000      	b.n	8008608 <HAL_UART_Receive_IT+0x42>
    return HAL_BUSY;
 8008606:	2002      	movs	r0, #2
}
 8008608:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800860a:	2001      	movs	r0, #1
 800860c:	e7fc      	b.n	8008608 <HAL_UART_Receive_IT+0x42>
 800860e:	2001      	movs	r0, #1
 8008610:	e7fa      	b.n	8008608 <HAL_UART_Receive_IT+0x42>

08008612 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008612:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008614:	b92b      	cbnz	r3, 8008622 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8008616:	2301      	movs	r3, #1
 8008618:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800861c:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8008620:	4770      	bx	lr
{
 8008622:	b500      	push	{lr}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008624:	6803      	ldr	r3, [r0, #0]
 8008626:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	ea4f 7e53 	mov.w	lr, r3, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800862e:	f244 7cb0 	movw	ip, #18352	; 0x47b0
 8008632:	f6c0 0c01 	movt	ip, #2049	; 0x801
 8008636:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800863a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800863c:	f244 71a8 	movw	r1, #18344	; 0x47a8
 8008640:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008644:	f811 e00e 	ldrb.w	lr, [r1, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008648:	fb93 f3fe 	sdiv	r3, r3, lr
 800864c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008650:	f3c2 6242 	ubfx	r2, r2, #25, #3
 8008654:	f81c 3002 	ldrb.w	r3, [ip, r2]
 8008658:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800865a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800865c:	fb93 f3f2 	sdiv	r3, r3, r2
    huart->NbRxDataToProcess = 1U;
 8008660:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8008664:	f85d fb04 	ldr.w	pc, [sp], #4

08008668 <HAL_UARTEx_WakeupCallback>:
}
 8008668:	4770      	bx	lr

0800866a <HAL_UARTEx_RxFifoFullCallback>:
}
 800866a:	4770      	bx	lr

0800866c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800866c:	4770      	bx	lr

0800866e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 800866e:	b510      	push	{r4, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	ab04      	add	r3, sp, #16
 8008674:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8008678:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800867c:	2b01      	cmp	r3, #1
 800867e:	d041      	beq.n	8008704 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x96>
 8008680:	4604      	mov	r4, r0
 8008682:	460a      	mov	r2, r1
 8008684:	2301      	movs	r3, #1
 8008686:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800868a:	2324      	movs	r3, #36	; 0x24
 800868c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8008690:	6801      	ldr	r1, [r0, #0]
 8008692:	680b      	ldr	r3, [r1, #0]
 8008694:	f023 0301 	bic.w	r3, r3, #1
 8008698:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800869a:	6801      	ldr	r1, [r0, #0]
 800869c:	688b      	ldr	r3, [r1, #8]
 800869e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80086a2:	4313      	orrs	r3, r2
 80086a4:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80086a6:	b1aa      	cbz	r2, 80086d4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 80086a8:	6822      	ldr	r2, [r4, #0]
 80086aa:	6813      	ldr	r3, [r2, #0]
 80086ac:	f043 0301 	orr.w	r3, r3, #1
 80086b0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80086b2:	f7f9 fdd9 	bl	8002268 <HAL_GetTick>
 80086b6:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086b8:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80086bc:	9200      	str	r2, [sp, #0]
 80086be:	2200      	movs	r2, #0
 80086c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80086c4:	4620      	mov	r0, r4
 80086c6:	f7ff fe02 	bl	80082ce <UART_WaitOnFlagUntilTimeout>
 80086ca:	b9a8      	cbnz	r0, 80086f8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x8a>
    huart->gState = HAL_UART_STATE_READY;
 80086cc:	2320      	movs	r3, #32
 80086ce:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80086d2:	e012      	b.n	80086fa <HAL_UARTEx_StopModeWakeUpSourceConfig+0x8c>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80086d4:	f89d 100e 	ldrb.w	r1, [sp, #14]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80086d8:	6802      	ldr	r2, [r0, #0]
 80086da:	6853      	ldr	r3, [r2, #4]
 80086dc:	f023 0310 	bic.w	r3, r3, #16
 80086e0:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 80086e4:	4303      	orrs	r3, r0
 80086e6:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80086e8:	6822      	ldr	r2, [r4, #0]
 80086ea:	6853      	ldr	r3, [r2, #4]
 80086ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80086f0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80086f4:	6053      	str	r3, [r2, #4]
 80086f6:	e7d7      	b.n	80086a8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 80086f8:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 80086fa:	2300      	movs	r3, #0
 80086fc:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8008700:	b004      	add	sp, #16
 8008702:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8008704:	2002      	movs	r0, #2
 8008706:	e7fb      	b.n	8008700 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x92>

08008708 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8008708:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800870c:	2b01      	cmp	r3, #1
 800870e:	d010      	beq.n	8008732 <HAL_UARTEx_EnableStopMode+0x2a>
 8008710:	2301      	movs	r3, #1
 8008712:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8008716:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008718:	e852 3f00 	ldrex	r3, [r2]
 800871c:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	e842 3100 	strex	r1, r3, [r2]
 8008724:	2900      	cmp	r1, #0
 8008726:	d1f6      	bne.n	8008716 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8008728:	2300      	movs	r3, #0
 800872a:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 800872e:	4618      	mov	r0, r3
 8008730:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008732:	2002      	movs	r0, #2
}
 8008734:	4770      	bx	lr

08008736 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8008736:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800873a:	2b01      	cmp	r3, #1
 800873c:	d01d      	beq.n	800877a <HAL_UARTEx_EnableFifoMode+0x44>
{
 800873e:	b510      	push	{r4, lr}
 8008740:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8008742:	2301      	movs	r3, #1
 8008744:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008748:	2324      	movs	r3, #36	; 0x24
 800874a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800874e:	6802      	ldr	r2, [r0, #0]
 8008750:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008752:	6811      	ldr	r1, [r2, #0]
 8008754:	f021 0101 	bic.w	r1, r1, #1
 8008758:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800875a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800875e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008762:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008764:	6802      	ldr	r2, [r0, #0]
 8008766:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8008768:	f7ff ff53 	bl	8008612 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800876c:	2320      	movs	r3, #32
 800876e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8008772:	2000      	movs	r0, #0
 8008774:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8008778:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800877a:	2002      	movs	r0, #2
}
 800877c:	4770      	bx	lr

0800877e <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800877e:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008782:	2b01      	cmp	r3, #1
 8008784:	d018      	beq.n	80087b8 <HAL_UARTEx_DisableFifoMode+0x3a>
 8008786:	2301      	movs	r3, #1
 8008788:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800878c:	2324      	movs	r3, #36	; 0x24
 800878e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008792:	6803      	ldr	r3, [r0, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008796:	6819      	ldr	r1, [r3, #0]
 8008798:	f021 0101 	bic.w	r1, r1, #1
 800879c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800879e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087a2:	2300      	movs	r3, #0
 80087a4:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087a6:	6801      	ldr	r1, [r0, #0]
 80087a8:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80087aa:	2220      	movs	r2, #32
 80087ac:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80087b0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 80087b4:	4618      	mov	r0, r3
 80087b6:	4770      	bx	lr
  __HAL_LOCK(huart);
 80087b8:	2002      	movs	r0, #2
}
 80087ba:	4770      	bx	lr

080087bc <HAL_UARTEx_SetTxFifoThreshold>:
{
 80087bc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80087be:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d01d      	beq.n	8008802 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80087c6:	4604      	mov	r4, r0
 80087c8:	2301      	movs	r3, #1
 80087ca:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80087ce:	2324      	movs	r3, #36	; 0x24
 80087d0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087d4:	6803      	ldr	r3, [r0, #0]
 80087d6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	f022 0201 	bic.w	r2, r2, #1
 80087de:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80087e0:	6802      	ldr	r2, [r0, #0]
 80087e2:	6893      	ldr	r3, [r2, #8]
 80087e4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80087e8:	4319      	orrs	r1, r3
 80087ea:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80087ec:	f7ff ff11 	bl	8008612 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80087f4:	2320      	movs	r3, #32
 80087f6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80087fa:	2000      	movs	r0, #0
 80087fc:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8008800:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008802:	2002      	movs	r0, #2
 8008804:	e7fc      	b.n	8008800 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08008806 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8008806:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008808:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800880c:	2b01      	cmp	r3, #1
 800880e:	d01d      	beq.n	800884c <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8008810:	4604      	mov	r4, r0
 8008812:	2301      	movs	r3, #1
 8008814:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008818:	2324      	movs	r3, #36	; 0x24
 800881a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800881e:	6803      	ldr	r3, [r0, #0]
 8008820:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	f022 0201 	bic.w	r2, r2, #1
 8008828:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800882a:	6802      	ldr	r2, [r0, #0]
 800882c:	6893      	ldr	r3, [r2, #8]
 800882e:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8008832:	4319      	orrs	r1, r3
 8008834:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008836:	f7ff feec 	bl	8008612 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800883e:	2320      	movs	r3, #32
 8008840:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8008844:	2000      	movs	r0, #0
 8008846:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800884a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800884c:	2002      	movs	r0, #2
 800884e:	e7fc      	b.n	800884a <HAL_UARTEx_SetRxFifoThreshold+0x44>

08008850 <HAL_UARTEx_ReceiveToIdle>:
{
 8008850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008854:	461d      	mov	r5, r3
 8008856:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (huart->RxState == HAL_UART_STATE_READY)
 8008858:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800885c:	2b20      	cmp	r3, #32
 800885e:	f040 8096 	bne.w	800898e <HAL_UARTEx_ReceiveToIdle+0x13e>
 8008862:	4604      	mov	r4, r0
 8008864:	460f      	mov	r7, r1
 8008866:	4691      	mov	r9, r2
    if ((pData == NULL) || (Size == 0U))
 8008868:	2900      	cmp	r1, #0
 800886a:	f000 8093 	beq.w	8008994 <HAL_UARTEx_ReceiveToIdle+0x144>
 800886e:	b90a      	cbnz	r2, 8008874 <HAL_UARTEx_ReceiveToIdle+0x24>
      return  HAL_ERROR;
 8008870:	2001      	movs	r0, #1
 8008872:	e08d      	b.n	8008990 <HAL_UARTEx_ReceiveToIdle+0x140>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008874:	2300      	movs	r3, #0
 8008876:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800887a:	2222      	movs	r2, #34	; 0x22
 800887c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008880:	2201      	movs	r2, #1
 8008882:	66c2      	str	r2, [r0, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008884:	6703      	str	r3, [r0, #112]	; 0x70
    tickstart = HAL_GetTick();
 8008886:	f7f9 fcef 	bl	8002268 <HAL_GetTick>
 800888a:	4680      	mov	r8, r0
    huart->RxXferSize  = Size;
 800888c:	f8a4 905c 	strh.w	r9, [r4, #92]	; 0x5c
    huart->RxXferCount = Size;
 8008890:	f8a4 905e 	strh.w	r9, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 8008894:	68a3      	ldr	r3, [r4, #8]
 8008896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800889a:	d015      	beq.n	80088c8 <HAL_UARTEx_ReceiveToIdle+0x78>
 800889c:	b9f3      	cbnz	r3, 80088dc <HAL_UARTEx_ReceiveToIdle+0x8c>
 800889e:	6923      	ldr	r3, [r4, #16]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bf0c      	ite	eq
 80088a4:	f04f 09ff 	moveq.w	r9, #255	; 0xff
 80088a8:	f04f 097f 	movne.w	r9, #127	; 0x7f
 80088ac:	f8a4 9060 	strh.w	r9, [r4, #96]	; 0x60
      pdata16bits = NULL;
 80088b0:	f04f 0b00 	mov.w	fp, #0
    *RxLen = 0U;
 80088b4:	2300      	movs	r3, #0
 80088b6:	802b      	strh	r3, [r5, #0]
    while (huart->RxXferCount > 0U)
 80088b8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d05a      	beq.n	8008978 <HAL_UARTEx_ReceiveToIdle+0x128>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088c2:	f04f 0a10 	mov.w	sl, #16
 80088c6:	e033      	b.n	8008930 <HAL_UARTEx_ReceiveToIdle+0xe0>
    UART_MASK_COMPUTATION(huart);
 80088c8:	6923      	ldr	r3, [r4, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d064      	beq.n	8008998 <HAL_UARTEx_ReceiveToIdle+0x148>
 80088ce:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80088d2:	f8a4 9060 	strh.w	r9, [r4, #96]	; 0x60
      pdata16bits = NULL;
 80088d6:	f04f 0b00 	mov.w	fp, #0
 80088da:	e7eb      	b.n	80088b4 <HAL_UARTEx_ReceiveToIdle+0x64>
    UART_MASK_COMPUTATION(huart);
 80088dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088e0:	d002      	beq.n	80088e8 <HAL_UARTEx_ReceiveToIdle+0x98>
 80088e2:	f04f 0900 	mov.w	r9, #0
 80088e6:	e7e1      	b.n	80088ac <HAL_UARTEx_ReceiveToIdle+0x5c>
 80088e8:	6923      	ldr	r3, [r4, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	bf14      	ite	ne
 80088ee:	f04f 093f 	movne.w	r9, #63	; 0x3f
 80088f2:	f04f 097f 	moveq.w	r9, #127	; 0x7f
 80088f6:	e7d9      	b.n	80088ac <HAL_UARTEx_ReceiveToIdle+0x5c>
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088f8:	2302      	movs	r3, #2
 80088fa:	6723      	str	r3, [r4, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 80088fc:	2320      	movs	r3, #32
 80088fe:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          return HAL_OK;
 8008902:	2000      	movs	r0, #0
 8008904:	e044      	b.n	8008990 <HAL_UARTEx_ReceiveToIdle+0x140>
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008908:	ea09 0303 	and.w	r3, r9, r3
 800890c:	f82b 3b02 	strh.w	r3, [fp], #2
        *RxLen += 1U;
 8008910:	882b      	ldrh	r3, [r5, #0]
 8008912:	3301      	adds	r3, #1
 8008914:	802b      	strh	r3, [r5, #0]
        huart->RxXferCount--;
 8008916:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800891a:	3b01      	subs	r3, #1
 800891c:	b29b      	uxth	r3, r3
 800891e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (Timeout != HAL_MAX_DELAY)
 8008922:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008926:	d11a      	bne.n	800895e <HAL_UARTEx_ReceiveToIdle+0x10e>
    while (huart->RxXferCount > 0U)
 8008928:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800892c:	b29b      	uxth	r3, r3
 800892e:	b31b      	cbz	r3, 8008978 <HAL_UARTEx_ReceiveToIdle+0x128>
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008930:	6823      	ldr	r3, [r4, #0]
 8008932:	69da      	ldr	r2, [r3, #28]
 8008934:	f012 0f10 	tst.w	r2, #16
 8008938:	d004      	beq.n	8008944 <HAL_UARTEx_ReceiveToIdle+0xf4>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800893a:	f8c3 a020 	str.w	sl, [r3, #32]
        if (*RxLen > 0U)
 800893e:	882b      	ldrh	r3, [r5, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1d9      	bne.n	80088f8 <HAL_UARTEx_ReceiveToIdle+0xa8>
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	69da      	ldr	r2, [r3, #28]
 8008948:	f012 0f20 	tst.w	r2, #32
 800894c:	d0e9      	beq.n	8008922 <HAL_UARTEx_ReceiveToIdle+0xd2>
        if (pdata8bits == NULL)
 800894e:	2f00      	cmp	r7, #0
 8008950:	d0d9      	beq.n	8008906 <HAL_UARTEx_ReceiveToIdle+0xb6>
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008954:	ea03 0309 	and.w	r3, r3, r9
 8008958:	f807 3b01 	strb.w	r3, [r7], #1
          pdata8bits++;
 800895c:	e7d8      	b.n	8008910 <HAL_UARTEx_ReceiveToIdle+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800895e:	f7f9 fc83 	bl	8002268 <HAL_GetTick>
 8008962:	eba0 0008 	sub.w	r0, r0, r8
 8008966:	42b0      	cmp	r0, r6
 8008968:	d801      	bhi.n	800896e <HAL_UARTEx_ReceiveToIdle+0x11e>
 800896a:	2e00      	cmp	r6, #0
 800896c:	d1dc      	bne.n	8008928 <HAL_UARTEx_ReceiveToIdle+0xd8>
          huart->RxState = HAL_UART_STATE_READY;
 800896e:	2320      	movs	r3, #32
 8008970:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          return HAL_TIMEOUT;
 8008974:	2003      	movs	r0, #3
 8008976:	e00b      	b.n	8008990 <HAL_UARTEx_ReceiveToIdle+0x140>
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8008978:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800897c:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8008980:	1a9b      	subs	r3, r3, r2
 8008982:	802b      	strh	r3, [r5, #0]
    huart->RxState = HAL_UART_STATE_READY;
 8008984:	2320      	movs	r3, #32
 8008986:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return HAL_OK;
 800898a:	2000      	movs	r0, #0
 800898c:	e000      	b.n	8008990 <HAL_UARTEx_ReceiveToIdle+0x140>
    return HAL_BUSY;
 800898e:	2002      	movs	r0, #2
}
 8008990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 8008994:	2001      	movs	r0, #1
 8008996:	e7fb      	b.n	8008990 <HAL_UARTEx_ReceiveToIdle+0x140>
    UART_MASK_COMPUTATION(huart);
 8008998:	f240 19ff 	movw	r9, #511	; 0x1ff
 800899c:	f8a4 9060 	strh.w	r9, [r4, #96]	; 0x60
      pdata16bits = (uint16_t *) pData;
 80089a0:	46bb      	mov	fp, r7
      pdata8bits  = NULL;
 80089a2:	2700      	movs	r7, #0
 80089a4:	e786      	b.n	80088b4 <HAL_UARTEx_ReceiveToIdle+0x64>

080089a6 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80089a6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80089a8:	f7f9 fb9f 	bl	80020ea <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 80089ac:	f000 fb59 	bl	8009062 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80089b0:	bd08      	pop	{r3, pc}

080089b2 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 80089b2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80089b4:	f04f 30ff 	mov.w	r0, #4294967295
 80089b8:	f00b f8ce 	bl	8013b58 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80089bc:	bd08      	pop	{r3, pc}

080089be <OnTxTimerLedEvent>:
static void OnTxTimerLedEvent(void *context)
{
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 80089be:	4770      	bx	lr

080089c0 <OnRxTimerLedEvent>:
static void OnRxTimerLedEvent(void *context)
{
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 80089c0:	4770      	bx	lr

080089c2 <OnJoinTimerLedEvent>:
static void OnJoinTimerLedEvent(void *context)
{
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 80089c2:	4770      	bx	lr

080089c4 <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 80089c4:	4770      	bx	lr

080089c6 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80089c6:	f240 0364 	movw	r3, #100	; 0x64
 80089ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80089ce:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 80089d0:	4770      	bx	lr

080089d2 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80089d2:	f240 0364 	movw	r3, #100	; 0x64
 80089d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80089da:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 80089dc:	4770      	bx	lr

080089de <OnBeaconStatusChange>:
  if (params != NULL)
 80089de:	2800      	cmp	r0, #0
 80089e0:	d040      	beq.n	8008a64 <OnBeaconStatusChange+0x86>
{
 80089e2:	b500      	push	{lr}
 80089e4:	b08d      	sub	sp, #52	; 0x34
    switch (params->State)
 80089e6:	7842      	ldrb	r2, [r0, #1]
 80089e8:	2a02      	cmp	r2, #2
 80089ea:	d00d      	beq.n	8008a08 <OnBeaconStatusChange+0x2a>
 80089ec:	2a03      	cmp	r2, #3
 80089ee:	d02f      	beq.n	8008a50 <OnBeaconStatusChange+0x72>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 80089f0:	f244 73b8 	movw	r3, #18360	; 0x47b8
 80089f4:	f6c0 0301 	movt	r3, #2049	; 0x801
 80089f8:	2200      	movs	r2, #0
 80089fa:	4611      	mov	r1, r2
 80089fc:	2002      	movs	r0, #2
 80089fe:	f00b fc15 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
}
 8008a02:	b00d      	add	sp, #52	; 0x34
 8008a04:	f85d fb04 	ldr.w	pc, [sp], #4
        APP_LOG(TS_OFF, VLEVEL_M,
 8008a08:	7ec2      	ldrb	r2, [r0, #27]
 8008a0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a0c:	7e82      	ldrb	r2, [r0, #26]
 8008a0e:	920a      	str	r2, [sp, #40]	; 0x28
 8008a10:	7e42      	ldrb	r2, [r0, #25]
 8008a12:	9209      	str	r2, [sp, #36]	; 0x24
 8008a14:	7e02      	ldrb	r2, [r0, #24]
 8008a16:	9208      	str	r2, [sp, #32]
 8008a18:	7dc2      	ldrb	r2, [r0, #23]
 8008a1a:	9207      	str	r2, [sp, #28]
 8008a1c:	7d82      	ldrb	r2, [r0, #22]
 8008a1e:	9206      	str	r2, [sp, #24]
 8008a20:	7d42      	ldrb	r2, [r0, #21]
 8008a22:	9205      	str	r2, [sp, #20]
 8008a24:	6842      	ldr	r2, [r0, #4]
 8008a26:	9204      	str	r2, [sp, #16]
 8008a28:	68c2      	ldr	r2, [r0, #12]
 8008a2a:	9203      	str	r2, [sp, #12]
 8008a2c:	f990 2014 	ldrsb.w	r2, [r0, #20]
 8008a30:	9202      	str	r2, [sp, #8]
 8008a32:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 8008a36:	9201      	str	r2, [sp, #4]
 8008a38:	7c03      	ldrb	r3, [r0, #16]
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	f244 73d0 	movw	r3, #18384	; 0x47d0
 8008a40:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008a44:	2200      	movs	r2, #0
 8008a46:	4611      	mov	r1, r2
 8008a48:	2002      	movs	r0, #2
 8008a4a:	f00b fbef 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8008a4e:	e7d8      	b.n	8008a02 <OnBeaconStatusChange+0x24>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8008a50:	f644 0344 	movw	r3, #18500	; 0x4844
 8008a54:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008a58:	2200      	movs	r2, #0
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	2002      	movs	r0, #2
 8008a5e:	f00b fbe5 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
}
 8008a62:	e7ce      	b.n	8008a02 <OnBeaconStatusChange+0x24>
 8008a64:	4770      	bx	lr

08008a66 <OnClassChange>:
{
 8008a66:	b500      	push	{lr}
 8008a68:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8008a6a:	f644 0380 	movw	r3, #18560	; 0x4880
 8008a6e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008a72:	5c1b      	ldrb	r3, [r3, r0]
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	f644 0364 	movw	r3, #18532	; 0x4864
 8008a7a:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008a7e:	2200      	movs	r2, #0
 8008a80:	4611      	mov	r1, r2
 8008a82:	2002      	movs	r0, #2
 8008a84:	f00b fbd2 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
}
 8008a88:	b003      	add	sp, #12
 8008a8a:	f85d fb04 	ldr.w	pc, [sp], #4

08008a8e <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8008a8e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 8008a90:	2801      	cmp	r0, #1
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8008a92:	bf07      	ittee	eq
 8008a94:	f644 0384 	movweq	r3, #18564	; 0x4884
 8008a98:	f6c0 0301 	movteq	r3, #2049	; 0x801
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 8008a9c:	f644 0398 	movwne	r3, #18584	; 0x4898
 8008aa0:	f6c0 0301 	movtne	r3, #2049	; 0x801
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	2002      	movs	r0, #2
 8008aaa:	f00b fbbf 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 8008aae:	bd08      	pop	{r3, pc}

08008ab0 <OnTxData>:
  if ((params != NULL))
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d055      	beq.n	8008b60 <OnTxData+0xb0>
{
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 8008aba:	7803      	ldrb	r3, [r0, #0]
 8008abc:	b90b      	cbnz	r3, 8008ac2 <OnTxData+0x12>
}
 8008abe:	b004      	add	sp, #16
 8008ac0:	bd10      	pop	{r4, pc}
      UTIL_TIMER_Start(&TxLedTimer);
 8008ac2:	f240 7064 	movw	r0, #1892	; 0x764
 8008ac6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008aca:	f00b f9fa 	bl	8013ec2 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8008ace:	f644 03b8 	movw	r3, #18616	; 0x48b8
 8008ad2:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	4611      	mov	r1, r2
 8008ada:	2002      	movs	r0, #2
 8008adc:	f00b fba6 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8008ae0:	f994 3018 	ldrsb.w	r3, [r4, #24]
 8008ae4:	9303      	str	r3, [sp, #12]
 8008ae6:	f994 300a 	ldrsb.w	r3, [r4, #10]
 8008aea:	9302      	str	r3, [sp, #8]
 8008aec:	7c23      	ldrb	r3, [r4, #16]
 8008aee:	9301      	str	r3, [sp, #4]
 8008af0:	68e3      	ldr	r3, [r4, #12]
 8008af2:	9300      	str	r3, [sp, #0]
 8008af4:	f644 03ec 	movw	r3, #18668	; 0x48ec
 8008af8:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008afc:	2200      	movs	r2, #0
 8008afe:	4611      	mov	r1, r2
 8008b00:	2003      	movs	r0, #3
 8008b02:	f00b fb93 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8008b06:	f644 1320 	movw	r3, #18720	; 0x4920
 8008b0a:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008b0e:	2200      	movs	r2, #0
 8008b10:	4611      	mov	r1, r2
 8008b12:	2003      	movs	r0, #3
 8008b14:	f00b fb8a 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8008b18:	7a23      	ldrb	r3, [r4, #8]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d116      	bne.n	8008b4c <OnTxData+0x9c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8008b1e:	7a61      	ldrb	r1, [r4, #9]
 8008b20:	f644 03ac 	movw	r3, #18604	; 0x48ac
 8008b24:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008b28:	f644 02b0 	movw	r2, #18608	; 0x48b0
 8008b2c:	f6c0 0201 	movt	r2, #2049	; 0x801
 8008b30:	2900      	cmp	r1, #0
 8008b32:	bf08      	it	eq
 8008b34:	4613      	moveq	r3, r2
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	f644 1330 	movw	r3, #18736	; 0x4930
 8008b3c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008b40:	2200      	movs	r2, #0
 8008b42:	4611      	mov	r1, r2
 8008b44:	2003      	movs	r0, #3
 8008b46:	f00b fb71 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
 8008b4a:	e7b8      	b.n	8008abe <OnTxData+0xe>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8008b4c:	f644 1344 	movw	r3, #18756	; 0x4944
 8008b50:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008b54:	2200      	movs	r2, #0
 8008b56:	4611      	mov	r1, r2
 8008b58:	2003      	movs	r0, #3
 8008b5a:	f00b fb67 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
}
 8008b5e:	e7ae      	b.n	8008abe <OnTxData+0xe>
 8008b60:	4770      	bx	lr

08008b62 <OnTxTimerEvent>:
{
 8008b62:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8008b64:	2100      	movs	r1, #0
 8008b66:	2002      	movs	r0, #2
 8008b68:	f00a ffc0 	bl	8013aec <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 8008b6c:	f240 707c 	movw	r0, #1916	; 0x77c
 8008b70:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008b74:	f00b f9a5 	bl	8013ec2 <UTIL_TIMER_Start>
}
 8008b78:	bd08      	pop	{r3, pc}

08008b7a <OnMacProcessNotify>:
{
 8008b7a:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	2001      	movs	r0, #1
 8008b80:	f00a ffb4 	bl	8013aec <UTIL_SEQ_SetTask>
}
 8008b84:	bd08      	pop	{r3, pc}

08008b86 <OnStopJoinTimerEvent>:
{
 8008b86:	b508      	push	{r3, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 8008b88:	f240 030c 	movw	r3, #12
 8008b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d000      	beq.n	8008b98 <OnStopJoinTimerEvent+0x12>
}
 8008b96:	bd08      	pop	{r3, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8008b98:	2100      	movs	r1, #0
 8008b9a:	2008      	movs	r0, #8
 8008b9c:	f00a ffa6 	bl	8013aec <UTIL_SEQ_SetTask>
}
 8008ba0:	e7f9      	b.n	8008b96 <OnStopJoinTimerEvent+0x10>

08008ba2 <OnSystemReset>:
{
 8008ba2:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8008ba4:	f001 fea4 	bl	800a8f0 <LmHandlerHalt>
 8008ba8:	b100      	cbz	r0, 8008bac <OnSystemReset+0xa>
}
 8008baa:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8008bac:	f001 fb16 	bl	800a1dc <LmHandlerJoinStatus>
 8008bb0:	2801      	cmp	r0, #1
 8008bb2:	d1fa      	bne.n	8008baa <OnSystemReset+0x8>
  __ASM volatile ("dsb 0xF":::"memory");
 8008bb4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008bb8:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8008bbc:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8008bc0:	68d1      	ldr	r1, [r2, #12]
 8008bc2:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008bc6:	2304      	movs	r3, #4
 8008bc8:	f2c0 53fa 	movt	r3, #1530	; 0x5fa
 8008bcc:	430b      	orrs	r3, r1
 8008bce:	60d3      	str	r3, [r2, #12]
 8008bd0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008bd4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8008bd6:	e7fd      	b.n	8008bd4 <OnSystemReset+0x32>

08008bd8 <OnJoinRequest>:
  if (joinParams != NULL)
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d042      	beq.n	8008c62 <OnJoinRequest+0x8a>
{
 8008bdc:	b510      	push	{r4, lr}
 8008bde:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8008be0:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8008be4:	b9fb      	cbnz	r3, 8008c26 <OnJoinRequest+0x4e>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8008be6:	f240 701c 	movw	r0, #1820	; 0x71c
 8008bea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008bee:	f00b f8fd 	bl	8013dec <UTIL_TIMER_Stop>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8008bf2:	f644 1354 	movw	r3, #18772	; 0x4954
 8008bf6:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	2002      	movs	r0, #2
 8008c00:	f00b fb14 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8008c04:	79e3      	ldrb	r3, [r4, #7]
 8008c06:	2b01      	cmp	r3, #1
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8008c08:	bf07      	ittee	eq
 8008c0a:	f644 136c 	movweq	r3, #18796	; 0x496c
 8008c0e:	f6c0 0301 	movteq	r3, #2049	; 0x801
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8008c12:	f644 138c 	movwne	r3, #18828	; 0x498c
 8008c16:	f6c0 0301 	movtne	r3, #2049	; 0x801
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	2002      	movs	r0, #2
 8008c20:	f00b fb04 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
}
 8008c24:	bd10      	pop	{r4, pc}
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8008c26:	f644 13ac 	movw	r3, #18860	; 0x49ac
 8008c2a:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008c2e:	2200      	movs	r2, #0
 8008c30:	4611      	mov	r1, r2
 8008c32:	2002      	movs	r0, #2
 8008c34:	f00b fafa 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 8008c38:	79e3      	ldrb	r3, [r4, #7]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d1f2      	bne.n	8008c24 <OnJoinRequest+0x4c>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 8008c3e:	f644 13c8 	movw	r3, #18888	; 0x49c8
 8008c42:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008c46:	2200      	movs	r2, #0
 8008c48:	4611      	mov	r1, r2
 8008c4a:	2002      	movs	r0, #2
 8008c4c:	f00b faee 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 8008c50:	f240 030c 	movw	r3, #12
 8008c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008c58:	2101      	movs	r1, #1
 8008c5a:	7818      	ldrb	r0, [r3, #0]
 8008c5c:	f001 fb31 	bl	800a2c2 <LmHandlerJoin>
}
 8008c60:	e7e0      	b.n	8008c24 <OnJoinRequest+0x4c>
 8008c62:	4770      	bx	lr

08008c64 <OnTxPeriodicityChanged>:
{
 8008c64:	b510      	push	{r4, lr}
  if (TxPeriodicity == 0)
 8008c66:	b128      	cbz	r0, 8008c74 <OnTxPeriodicityChanged+0x10>
  TxPeriodicity = periodicity;
 8008c68:	f240 037c 	movw	r3, #124	; 0x7c
 8008c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008c70:	6018      	str	r0, [r3, #0]
 8008c72:	e006      	b.n	8008c82 <OnTxPeriodicityChanged+0x1e>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8008c74:	f240 037c 	movw	r3, #124	; 0x7c
 8008c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008c7c:	f242 7210 	movw	r2, #10000	; 0x2710
 8008c80:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8008c82:	f240 747c 	movw	r4, #1916	; 0x77c
 8008c86:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f00b f8ae 	bl	8013dec <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8008c90:	f240 037c 	movw	r3, #124	; 0x7c
 8008c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008c98:	6819      	ldr	r1, [r3, #0]
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f00b f961 	bl	8013f62 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f00b f90e 	bl	8013ec2 <UTIL_TIMER_Start>
}
 8008ca6:	bd10      	pop	{r4, pc}

08008ca8 <OnRxData>:
  if (params != NULL)
 8008ca8:	2900      	cmp	r1, #0
 8008caa:	d079      	beq.n	8008da0 <OnRxData+0xf8>
{
 8008cac:	b570      	push	{r4, r5, r6, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	460d      	mov	r5, r1
    UTIL_TIMER_Start(&RxLedTimer);
 8008cb4:	f240 7034 	movw	r0, #1844	; 0x734
 8008cb8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008cbc:	f00b f901 	bl	8013ec2 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8008cc0:	782e      	ldrb	r6, [r5, #0]
 8008cc2:	2e00      	cmp	r6, #0
 8008cc4:	d04a      	beq.n	8008d5c <OnRxData+0xb4>
      if (appData != NULL)
 8008cc6:	2c00      	cmp	r4, #0
 8008cc8:	d047      	beq.n	8008d5a <OnRxData+0xb2>
        RxPort = appData->Port;
 8008cca:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 8008ccc:	6863      	ldr	r3, [r4, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d044      	beq.n	8008d5c <OnRxData+0xb4>
    switch (appData->Port)
 8008cd2:	2e02      	cmp	r6, #2
 8008cd4:	d016      	beq.n	8008d04 <OnRxData+0x5c>
 8008cd6:	2e03      	cmp	r6, #3
 8008cd8:	d140      	bne.n	8008d5c <OnRxData+0xb4>
        if (appData->BufferSize == 1)
 8008cda:	7862      	ldrb	r2, [r4, #1]
 8008cdc:	2a01      	cmp	r2, #1
 8008cde:	d13d      	bne.n	8008d5c <OnRxData+0xb4>
          switch (appData->Buffer[0])
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d006      	beq.n	8008cf4 <OnRxData+0x4c>
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d008      	beq.n	8008cfc <OnRxData+0x54>
 8008cea:	bbbb      	cbnz	r3, 8008d5c <OnRxData+0xb4>
              LmHandlerRequestClass(CLASS_A);
 8008cec:	2000      	movs	r0, #0
 8008cee:	f001 fa88 	bl	800a202 <LmHandlerRequestClass>
              break;
 8008cf2:	e033      	b.n	8008d5c <OnRxData+0xb4>
              LmHandlerRequestClass(CLASS_B);
 8008cf4:	2001      	movs	r0, #1
 8008cf6:	f001 fa84 	bl	800a202 <LmHandlerRequestClass>
              break;
 8008cfa:	e02f      	b.n	8008d5c <OnRxData+0xb4>
              LmHandlerRequestClass(CLASS_C);
 8008cfc:	2002      	movs	r0, #2
 8008cfe:	f001 fa80 	bl	800a202 <LmHandlerRequestClass>
              break;
 8008d02:	e02b      	b.n	8008d5c <OnRxData+0xb4>
        if (appData->BufferSize == 1)
 8008d04:	7862      	ldrb	r2, [r4, #1]
 8008d06:	2a01      	cmp	r2, #1
 8008d08:	d128      	bne.n	8008d5c <OnRxData+0xb4>
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8008d0a:	781b      	ldrb	r3, [r3, #0]
          if (AppLedStateOn == RESET)
 8008d0c:	f013 0f01 	tst.w	r3, #1
 8008d10:	d111      	bne.n	8008d36 <OnRxData+0x8e>
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8008d12:	f644 13ec 	movw	r3, #18924	; 0x49ec
 8008d16:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	2003      	movs	r0, #3
 8008d20:	f00b fa84 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 8008d24:	2201      	movs	r2, #1
 8008d26:	2120      	movs	r1, #32
 8008d28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008d2c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8008d30:	f7fb fb3b 	bl	80043aa <HAL_GPIO_WritePin>
 8008d34:	e012      	b.n	8008d5c <OnRxData+0xb4>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8008d36:	f644 13f8 	movw	r3, #18936	; 0x49f8
 8008d3a:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008d3e:	2200      	movs	r2, #0
 8008d40:	4611      	mov	r1, r2
 8008d42:	2003      	movs	r0, #3
 8008d44:	f00b fa72 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 8008d48:	2200      	movs	r2, #0
 8008d4a:	2120      	movs	r1, #32
 8008d4c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008d50:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8008d54:	f7fb fb29 	bl	80043aa <HAL_GPIO_WritePin>
 8008d58:	e000      	b.n	8008d5c <OnRxData+0xb4>
 uint8_t RxPort = 0;
 8008d5a:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 8008d5c:	7c2b      	ldrb	r3, [r5, #16]
 8008d5e:	2b05      	cmp	r3, #5
 8008d60:	d901      	bls.n	8008d66 <OnRxData+0xbe>
}
 8008d62:	b006      	add	sp, #24
 8008d64:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8008d66:	f995 200a 	ldrsb.w	r2, [r5, #10]
 8008d6a:	9205      	str	r2, [sp, #20]
 8008d6c:	f995 2009 	ldrsb.w	r2, [r5, #9]
 8008d70:	9204      	str	r2, [sp, #16]
 8008d72:	f644 32d8 	movw	r2, #19416	; 0x4bd8
 8008d76:	f6c0 0201 	movt	r2, #2049	; 0x801
 8008d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d7e:	9303      	str	r3, [sp, #12]
 8008d80:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8008d84:	9302      	str	r3, [sp, #8]
 8008d86:	9601      	str	r6, [sp, #4]
 8008d88:	68eb      	ldr	r3, [r5, #12]
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	f644 2304 	movw	r3, #18948	; 0x4a04
 8008d90:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008d94:	2200      	movs	r2, #0
 8008d96:	4611      	mov	r1, r2
 8008d98:	2003      	movs	r0, #3
 8008d9a:	f00b fa47 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
}
 8008d9e:	e7e0      	b.n	8008d62 <OnRxData+0xba>
 8008da0:	4770      	bx	lr

08008da2 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8008da2:	b538      	push	{r3, r4, r5, lr}
 8008da4:	4604      	mov	r4, r0
 8008da6:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 8008da8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008dac:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8008db0:	f6c0 0003 	movt	r0, #2051	; 0x803
 8008db4:	f7f8 fc00 	bl	80015b8 <FLASH_IF_Erase>
 8008db8:	b100      	cbz	r0, 8008dbc <OnStoreContextRequest+0x1a>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 8008dbc:	462a      	mov	r2, r5
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8008dc4:	f6c0 0003 	movt	r0, #2051	; 0x803
 8008dc8:	f7f8 fad5 	bl	8001376 <FLASH_IF_Write>
}
 8008dcc:	e7f5      	b.n	8008dba <OnStoreContextRequest+0x18>

08008dce <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8008dce:	b508      	push	{r3, lr}
 8008dd0:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8008dd2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8008dd6:	f6c0 0103 	movt	r1, #2051	; 0x803
 8008dda:	f7f8 fbc5 	bl	8001568 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8008dde:	bd08      	pop	{r3, pc}

08008de0 <StopJoin>:
{
 8008de0:	b538      	push	{r3, r4, r5, lr}
  UTIL_TIMER_Stop(&TxTimer);
 8008de2:	f240 707c 	movw	r0, #1916	; 0x77c
 8008de6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008dea:	f00a ffff 	bl	8013dec <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8008dee:	f001 fd76 	bl	800a8de <LmHandlerStop>
 8008df2:	b178      	cbz	r0, 8008e14 <StopJoin+0x34>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 8008df4:	f644 234c 	movw	r3, #19020	; 0x4a4c
 8008df8:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	4611      	mov	r1, r2
 8008e00:	2002      	movs	r0, #2
 8008e02:	f00b fa13 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 8008e06:	f240 704c 	movw	r0, #1868	; 0x74c
 8008e0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008e0e:	f00b f858 	bl	8013ec2 <UTIL_TIMER_Start>
}
 8008e12:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 8008e14:	f644 236c 	movw	r3, #19052	; 0x4a6c
 8008e18:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	4611      	mov	r1, r2
 8008e20:	2002      	movs	r0, #2
 8008e22:	f00b fa03 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 8008e26:	f240 040c 	movw	r4, #12
 8008e2a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8008e2e:	2501      	movs	r5, #1
 8008e30:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 8008e32:	f644 2380 	movw	r3, #19072	; 0x4a80
 8008e36:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	4611      	mov	r1, r2
 8008e3e:	2002      	movs	r0, #2
 8008e40:	f00b f9f4 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 8008e44:	f240 0064 	movw	r0, #100	; 0x64
 8008e48:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008e4c:	f001 fc0f 	bl	800a66e <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8008e50:	4629      	mov	r1, r5
 8008e52:	7820      	ldrb	r0, [r4, #0]
 8008e54:	f001 fa35 	bl	800a2c2 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8008e58:	f240 707c 	movw	r0, #1916	; 0x77c
 8008e5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008e60:	f00b f82f 	bl	8013ec2 <UTIL_TIMER_Start>
 8008e64:	e7cf      	b.n	8008e06 <StopJoin+0x26>

08008e66 <StoreContext>:
{
 8008e66:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 8008e68:	f001 fe03 	bl	800aa72 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 8008e6c:	f110 0f08 	cmn.w	r0, #8
 8008e70:	d003      	beq.n	8008e7a <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8008e72:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008e76:	d00a      	beq.n	8008e8e <StoreContext+0x28>
}
 8008e78:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8008e7a:	f644 23a0 	movw	r3, #19104	; 0x4aa0
 8008e7e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008e82:	2200      	movs	r2, #0
 8008e84:	4611      	mov	r1, r2
 8008e86:	2002      	movs	r0, #2
 8008e88:	f00b f9d0 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
 8008e8c:	e7f4      	b.n	8008e78 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8008e8e:	f644 23b8 	movw	r3, #19128	; 0x4ab8
 8008e92:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008e96:	2200      	movs	r2, #0
 8008e98:	4611      	mov	r1, r2
 8008e9a:	2002      	movs	r0, #2
 8008e9c:	f00b f9c6 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
}
 8008ea0:	e7ea      	b.n	8008e78 <StoreContext+0x12>

08008ea2 <SendTxData>:
{
 8008ea2:	b570      	push	{r4, r5, r6, lr}
 8008ea4:	b082      	sub	sp, #8
  uint8_t batteryLevel = GetBatteryLevel();
 8008ea6:	f7f9 f956 	bl	8002156 <GetBatteryLevel>
  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8008eaa:	9000      	str	r0, [sp, #0]
 8008eac:	f644 23d0 	movw	r3, #19152	; 0x4ad0
 8008eb0:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	2002      	movs	r0, #2
 8008eba:	f00b f9b7 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
  AppData.Port = LORAWAN_USER_APP_PORT;
 8008ebe:	f240 0410 	movw	r4, #16
 8008ec2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	7023      	strb	r3, [r4, #0]
  AppData.Buffer[i++] = (PM1/100) >> 8;
 8008eca:	6861      	ldr	r1, [r4, #4]
 8008ecc:	f240 2208 	movw	r2, #520	; 0x208
 8008ed0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8008ed4:	6813      	ldr	r3, [r2, #0]
 8008ed6:	f248 551f 	movw	r5, #34079	; 0x851f
 8008eda:	f2c5 15eb 	movt	r5, #20971	; 0x51eb
 8008ede:	fba5 0303 	umull	r0, r3, r5, r3
 8008ee2:	0b5b      	lsrs	r3, r3, #13
 8008ee4:	700b      	strb	r3, [r1, #0]
  AppData.Buffer[i++] = (PM1/100)%256;
 8008ee6:	6861      	ldr	r1, [r4, #4]
 8008ee8:	6813      	ldr	r3, [r2, #0]
 8008eea:	fba5 2303 	umull	r2, r3, r5, r3
 8008eee:	095b      	lsrs	r3, r3, #5
 8008ef0:	704b      	strb	r3, [r1, #1]
  AppData.Buffer[i++] = (PM2_5/100)>>8;
 8008ef2:	6861      	ldr	r1, [r4, #4]
 8008ef4:	f240 2210 	movw	r2, #528	; 0x210
 8008ef8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8008efc:	6813      	ldr	r3, [r2, #0]
 8008efe:	fba5 0303 	umull	r0, r3, r5, r3
 8008f02:	0b5b      	lsrs	r3, r3, #13
 8008f04:	708b      	strb	r3, [r1, #2]
  AppData.Buffer[i++] = (PM2_5/100)%256;
 8008f06:	6861      	ldr	r1, [r4, #4]
 8008f08:	6813      	ldr	r3, [r2, #0]
 8008f0a:	fba5 2303 	umull	r2, r3, r5, r3
 8008f0e:	095b      	lsrs	r3, r3, #5
 8008f10:	70cb      	strb	r3, [r1, #3]
  AppData.Buffer[i++] = (PM10/100)>>8;
 8008f12:	f240 230c 	movw	r3, #524	; 0x20c
 8008f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	fba5 2303 	umull	r2, r3, r5, r3
 8008f20:	095a      	lsrs	r2, r3, #5
 8008f22:	6861      	ldr	r1, [r4, #4]
 8008f24:	0b5b      	lsrs	r3, r3, #13
 8008f26:	710b      	strb	r3, [r1, #4]
  AppData.Buffer[i++] = (PM10/100)%256;
 8008f28:	6863      	ldr	r3, [r4, #4]
 8008f2a:	715a      	strb	r2, [r3, #5]
  tempVar = ((int16_t)(temp*100.0));
 8008f2c:	f240 2330 	movw	r3, #560	; 0x230
 8008f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008f34:	6818      	ldr	r0, [r3, #0]
 8008f36:	f7f7 fa8b 	bl	8000450 <__aeabi_f2d>
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f2c4 0359 	movt	r3, #16473	; 0x4059
 8008f42:	f7f7 fadd 	bl	8000500 <__aeabi_dmul>
 8008f46:	f7f7 fd75 	bl	8000a34 <__aeabi_d2iz>
 8008f4a:	b200      	sxth	r0, r0
  AppData.Buffer[i++] = tempVar/100;
 8008f4c:	6862      	ldr	r2, [r4, #4]
 8008f4e:	fb85 3100 	smull	r3, r1, r5, r0
 8008f52:	17c3      	asrs	r3, r0, #31
 8008f54:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8008f58:	7193      	strb	r3, [r2, #6]
  AppData.Buffer[i++] = tempVar%100;
 8008f5a:	6862      	ldr	r2, [r4, #4]
 8008f5c:	2664      	movs	r6, #100	; 0x64
 8008f5e:	fb06 0013 	mls	r0, r6, r3, r0
 8008f62:	71d0      	strb	r0, [r2, #7]
  tempVar = ((int16_t)(humidity*100.0));
 8008f64:	f240 232c 	movw	r3, #556	; 0x22c
 8008f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008f6c:	6818      	ldr	r0, [r3, #0]
 8008f6e:	f7f7 fa6f 	bl	8000450 <__aeabi_f2d>
 8008f72:	2200      	movs	r2, #0
 8008f74:	2300      	movs	r3, #0
 8008f76:	f2c4 0359 	movt	r3, #16473	; 0x4059
 8008f7a:	f7f7 fac1 	bl	8000500 <__aeabi_dmul>
 8008f7e:	f7f7 fd59 	bl	8000a34 <__aeabi_d2iz>
 8008f82:	b200      	sxth	r0, r0
  AppData.Buffer[i++] = tempVar/100;
 8008f84:	6863      	ldr	r3, [r4, #4]
 8008f86:	fb85 2500 	smull	r2, r5, r5, r0
 8008f8a:	17c2      	asrs	r2, r0, #31
 8008f8c:	ebc2 1265 	rsb	r2, r2, r5, asr #5
 8008f90:	721a      	strb	r2, [r3, #8]
  AppData.Buffer[i++] = tempVar%100;
 8008f92:	fb06 0012 	mls	r0, r6, r2, r0
 8008f96:	7258      	strb	r0, [r3, #9]
  AppData.Buffer[i++] = OzonePPB/256;
 8008f98:	f240 2204 	movw	r2, #516	; 0x204
 8008f9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8008fa0:	8812      	ldrh	r2, [r2, #0]
 8008fa2:	0a11      	lsrs	r1, r2, #8
 8008fa4:	7299      	strb	r1, [r3, #10]
  AppData.Buffer[i++] = OzonePPB%256;
 8008fa6:	72da      	strb	r2, [r3, #11]
  AppData.BufferSize = i;
 8008fa8:	230c      	movs	r3, #12
 8008faa:	7063      	strb	r3, [r4, #1]
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8008fac:	f240 731c 	movw	r3, #1820	; 0x71c
 8008fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008fb4:	7a5b      	ldrb	r3, [r3, #9]
 8008fb6:	bb3b      	cbnz	r3, 8009008 <SendTxData+0x166>
  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8008fb8:	f240 0364 	movw	r3, #100	; 0x64
 8008fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	78d9      	ldrb	r1, [r3, #3]
 8008fc4:	f240 0010 	movw	r0, #16
 8008fc8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008fcc:	f001 f9f8 	bl	800a3c0 <LmHandlerSend>
  if (LORAMAC_HANDLER_SUCCESS == status)
 8008fd0:	b328      	cbz	r0, 800901e <SendTxData+0x17c>
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8008fd2:	f110 0f06 	cmn.w	r0, #6
 8008fd6:	d02d      	beq.n	8009034 <SendTxData+0x192>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8008fd8:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8008fda:	f240 747c 	movw	r4, #1916	; 0x77c
 8008fde:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f00a ff02 	bl	8013dec <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8008fe8:	f240 037c 	movw	r3, #124	; 0x7c
 8008fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008ff0:	6819      	ldr	r1, [r3, #0]
 8008ff2:	42a9      	cmp	r1, r5
 8008ff4:	bf38      	it	cc
 8008ff6:	4629      	movcc	r1, r5
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f00a ffb2 	bl	8013f62 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8008ffe:	4620      	mov	r0, r4
 8009000:	f00a ff5f 	bl	8013ec2 <UTIL_TIMER_Start>
}
 8009004:	b002      	add	sp, #8
 8009006:	bd70      	pop	{r4, r5, r6, pc}
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8009008:	f001 f8e8 	bl	800a1dc <LmHandlerJoinStatus>
 800900c:	2801      	cmp	r0, #1
 800900e:	d1d3      	bne.n	8008fb8 <SendTxData+0x116>
    UTIL_TIMER_Stop(&JoinLedTimer);
 8009010:	f240 701c 	movw	r0, #1820	; 0x71c
 8009014:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009018:	f00a fee8 	bl	8013dec <UTIL_TIMER_Stop>
 800901c:	e7cc      	b.n	8008fb8 <SendTxData+0x116>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800901e:	f644 23dc 	movw	r3, #19164	; 0x4adc
 8009022:	f6c0 0301 	movt	r3, #2049	; 0x801
 8009026:	2201      	movs	r2, #1
 8009028:	2100      	movs	r1, #0
 800902a:	4610      	mov	r0, r2
 800902c:	f00b f8fe 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8009030:	2500      	movs	r5, #0
 8009032:	e7d2      	b.n	8008fda <SendTxData+0x138>
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8009034:	f001 f8cc 	bl	800a1d0 <LmHandlerGetDutyCycleWaitTime>
    if (nextTxIn > 0)
 8009038:	4605      	mov	r5, r0
 800903a:	2800      	cmp	r0, #0
 800903c:	d0cd      	beq.n	8008fda <SendTxData+0x138>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800903e:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8009042:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8009046:	fba3 2300 	umull	r2, r3, r3, r0
 800904a:	099b      	lsrs	r3, r3, #6
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	f644 23ec 	movw	r3, #19180	; 0x4aec
 8009052:	f6c0 0301 	movt	r3, #2049	; 0x801
 8009056:	2201      	movs	r2, #1
 8009058:	2100      	movs	r1, #0
 800905a:	4610      	mov	r0, r2
 800905c:	f00b f8e6 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
 8009060:	e7bb      	b.n	8008fda <SendTxData+0x138>

08009062 <LoRaWAN_Init>:
{
 8009062:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009064:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 8009066:	2400      	movs	r4, #0
 8009068:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800906a:	9402      	str	r4, [sp, #8]
 800906c:	2703      	movs	r7, #3
 800906e:	9701      	str	r7, [sp, #4]
 8009070:	2501      	movs	r5, #1
 8009072:	9500      	str	r5, [sp, #0]
 8009074:	f644 330c 	movw	r3, #19212	; 0x4b0c
 8009078:	f6c0 0301 	movt	r3, #2049	; 0x801
 800907c:	4622      	mov	r2, r4
 800907e:	4621      	mov	r1, r4
 8009080:	2002      	movs	r0, #2
 8009082:	f00b f8d3 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8009086:	9402      	str	r4, [sp, #8]
 8009088:	2305      	movs	r3, #5
 800908a:	9301      	str	r3, [sp, #4]
 800908c:	2602      	movs	r6, #2
 800908e:	9600      	str	r6, [sp, #0]
 8009090:	f644 3330 	movw	r3, #19248	; 0x4b30
 8009094:	f6c0 0301 	movt	r3, #2049	; 0x801
 8009098:	4622      	mov	r2, r4
 800909a:	4621      	mov	r1, r4
 800909c:	4630      	mov	r0, r6
 800909e:	f00b f8c5 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 80090a2:	9402      	str	r4, [sp, #8]
 80090a4:	9701      	str	r7, [sp, #4]
 80090a6:	9500      	str	r5, [sp, #0]
 80090a8:	f644 3350 	movw	r3, #19280	; 0x4b50
 80090ac:	f6c0 0301 	movt	r3, #2049	; 0x801
 80090b0:	4622      	mov	r2, r4
 80090b2:	4621      	mov	r1, r4
 80090b4:	4630      	mov	r0, r6
 80090b6:	f00b f8b9 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 80090ba:	a905      	add	r1, sp, #20
 80090bc:	4620      	mov	r0, r4
 80090be:	f001 fbf8 	bl	800a8b2 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 80090c2:	9b05      	ldr	r3, [sp, #20]
 80090c4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80090c8:	9202      	str	r2, [sp, #8]
 80090ca:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80090ce:	9201      	str	r2, [sp, #4]
 80090d0:	0e1b      	lsrs	r3, r3, #24
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	f644 3370 	movw	r3, #19312	; 0x4b70
 80090d8:	f6c0 0301 	movt	r3, #2049	; 0x801
 80090dc:	4622      	mov	r2, r4
 80090de:	4621      	mov	r1, r4
 80090e0:	4630      	mov	r0, r6
 80090e2:	f00b f8a3 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 80090e6:	a905      	add	r1, sp, #20
 80090e8:	4628      	mov	r0, r5
 80090ea:	f001 fbe2 	bl	800a8b2 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 80090ee:	9b05      	ldr	r3, [sp, #20]
 80090f0:	b2da      	uxtb	r2, r3
 80090f2:	9203      	str	r2, [sp, #12]
 80090f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80090f8:	9202      	str	r2, [sp, #8]
 80090fa:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80090fe:	9201      	str	r2, [sp, #4]
 8009100:	0e1b      	lsrs	r3, r3, #24
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	f644 3394 	movw	r3, #19348	; 0x4b94
 8009108:	f6c0 0301 	movt	r3, #2049	; 0x801
 800910c:	4622      	mov	r2, r4
 800910e:	4621      	mov	r1, r4
 8009110:	4630      	mov	r0, r6
 8009112:	f00b f88b 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8009116:	9400      	str	r4, [sp, #0]
 8009118:	f648 13bf 	movw	r3, #35263	; 0x89bf
 800911c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009120:	4622      	mov	r2, r4
 8009122:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009126:	f240 7064 	movw	r0, #1892	; 0x764
 800912a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800912e:	f00a fdf5 	bl	8013d1c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8009132:	9400      	str	r4, [sp, #0]
 8009134:	f648 13c1 	movw	r3, #35265	; 0x89c1
 8009138:	f6c0 0300 	movt	r3, #2048	; 0x800
 800913c:	4622      	mov	r2, r4
 800913e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009142:	f240 7034 	movw	r0, #1844	; 0x734
 8009146:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800914a:	f00a fde7 	bl	8013d1c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800914e:	f240 771c 	movw	r7, #1820	; 0x71c
 8009152:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8009156:	9400      	str	r4, [sp, #0]
 8009158:	f648 13c3 	movw	r3, #35267	; 0x89c3
 800915c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009160:	462a      	mov	r2, r5
 8009162:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009166:	4638      	mov	r0, r7
 8009168:	f00a fdd8 	bl	8013d1c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800916c:	9400      	str	r4, [sp, #0]
 800916e:	f648 3387 	movw	r3, #35719	; 0x8b87
 8009172:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009176:	4622      	mov	r2, r4
 8009178:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800917c:	f240 704c 	movw	r0, #1868	; 0x74c
 8009180:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009184:	f00a fdca 	bl	8013d1c <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009188:	f24a 1285 	movw	r2, #41349	; 0xa185
 800918c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8009190:	4621      	mov	r1, r4
 8009192:	4628      	mov	r0, r5
 8009194:	f00a fda4 	bl	8013ce0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8009198:	f648 62a3 	movw	r2, #36515	; 0x8ea3
 800919c:	f6c0 0200 	movt	r2, #2048	; 0x800
 80091a0:	4621      	mov	r1, r4
 80091a2:	4630      	mov	r0, r6
 80091a4:	f00a fd9c 	bl	8013ce0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 80091a8:	f648 6267 	movw	r2, #36455	; 0x8e67
 80091ac:	f6c0 0200 	movt	r2, #2048	; 0x800
 80091b0:	4621      	mov	r1, r4
 80091b2:	2004      	movs	r0, #4
 80091b4:	f00a fd94 	bl	8013ce0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 80091b8:	f648 52e1 	movw	r2, #36321	; 0x8de1
 80091bc:	f6c0 0200 	movt	r2, #2048	; 0x800
 80091c0:	4621      	mov	r1, r4
 80091c2:	2008      	movs	r0, #8
 80091c4:	f00a fd8c 	bl	8013ce0 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 80091c8:	f000 f831 	bl	800922e <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 80091cc:	4621      	mov	r1, r4
 80091ce:	f2c0 1103 	movt	r1, #259	; 0x103
 80091d2:	f240 0018 	movw	r0, #24
 80091d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80091da:	f001 fb22 	bl	800a822 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 80091de:	f240 0064 	movw	r0, #100	; 0x64
 80091e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80091e6:	f001 fa42 	bl	800a66e <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 80091ea:	4638      	mov	r0, r7
 80091ec:	f00a fe69 	bl	8013ec2 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 80091f0:	f240 030c 	movw	r3, #12
 80091f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80091f8:	4629      	mov	r1, r5
 80091fa:	7818      	ldrb	r0, [r3, #0]
 80091fc:	f001 f861 	bl	800a2c2 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8009200:	f240 017c 	movw	r1, #124	; 0x7c
 8009204:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8009208:	f240 757c 	movw	r5, #1916	; 0x77c
 800920c:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8009210:	9400      	str	r4, [sp, #0]
 8009212:	f648 3363 	movw	r3, #35683	; 0x8b63
 8009216:	f6c0 0300 	movt	r3, #2048	; 0x800
 800921a:	4622      	mov	r2, r4
 800921c:	6809      	ldr	r1, [r1, #0]
 800921e:	4628      	mov	r0, r5
 8009220:	f00a fd7c 	bl	8013d1c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8009224:	4628      	mov	r0, r5
 8009226:	f00a fe4c 	bl	8013ec2 <UTIL_TIMER_Start>
}
 800922a:	b007      	add	sp, #28
 800922c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800922e <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 800922e:	f240 7394 	movw	r3, #1940	; 0x794
 8009232:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009236:	2200      	movs	r2, #0
 8009238:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 800923a:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800923c:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800923e:	2220      	movs	r2, #32
 8009240:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8009242:	4770      	bx	lr

08009244 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8009244:	f240 7094 	movw	r0, #1940	; 0x794
 8009248:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800924c:	4770      	bx	lr

0800924e <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800924e:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8009250:	f7f9 fced 	bl	8002c2e <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009254:	bd08      	pop	{r3, pc}

08009256 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8009256:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8009258:	f7f9 fd0f 	bl	8002c7a <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800925c:	bd08      	pop	{r3, pc}

0800925e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800925e:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8009260:	f7f9 fd47 	bl	8002cf2 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8009264:	bd08      	pop	{r3, pc}

08009266 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8009266:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8009268:	f7f9 fd45 	bl	8002cf6 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800926c:	bd08      	pop	{r3, pc}

0800926e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800926e:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8009270:	f7f9 fd43 	bl	8002cfa <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009274:	bd08      	pop	{r3, pc}

08009276 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8009276:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8009278:	f7f9 fd41 	bl	8002cfe <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800927c:	bd08      	pop	{r3, pc}

0800927e <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800927e:	b510      	push	{r4, lr}
 8009280:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8009282:	2210      	movs	r2, #16
 8009284:	2100      	movs	r1, #0
 8009286:	30f1      	adds	r0, #241	; 0xf1
 8009288:	f007 fe7a 	bl	8010f80 <memset1>
    ctx->M_n = 0;
 800928c:	2100      	movs	r1, #0
 800928e:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8009292:	22f0      	movs	r2, #240	; 0xf0
 8009294:	4620      	mov	r0, r4
 8009296:	f007 fe73 	bl	8010f80 <memset1>
}
 800929a:	bd10      	pop	{r4, pc}

0800929c <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800929c:	b508      	push	{r3, lr}
 800929e:	4602      	mov	r2, r0
 80092a0:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 80092a2:	2110      	movs	r1, #16
 80092a4:	f000 f9d9 	bl	800965a <lorawan_aes_set_key>
}
 80092a8:	bd08      	pop	{r3, pc}

080092aa <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 80092aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ae:	b085      	sub	sp, #20
 80092b0:	4606      	mov	r6, r0
 80092b2:	460d      	mov	r5, r1
 80092b4:	4692      	mov	sl, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 80092b6:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 80092ba:	bbf3      	cbnz	r3, 800933a <AES_CMAC_Update+0x90>
        memcpy1( &ctx->X[0], in, 16 );

        data += mlen;
        len -= mlen;
    }
    while( len > 16 )
 80092bc:	f1ba 0f10 	cmp.w	sl, #16
 80092c0:	d970      	bls.n	80093a4 <AES_CMAC_Update+0xfa>
 80092c2:	f1aa 0b11 	sub.w	fp, sl, #17
 80092c6:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 80092ca:	f10b 0901 	add.w	r9, fp, #1
 80092ce:	eb05 1909 	add.w	r9, r5, r9, lsl #4
 80092d2:	f506 7480 	add.w	r4, r6, #256	; 0x100
    { /* not last block */

        XOR( data, ctx->X );

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80092d6:	f106 08f1 	add.w	r8, r6, #241	; 0xf1
 80092da:	2710      	movs	r7, #16
        XOR( data, ctx->X );
 80092dc:	f106 03f0 	add.w	r3, r6, #240	; 0xf0
 80092e0:	1e69      	subs	r1, r5, #1
 80092e2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80092e6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80092ea:	4042      	eors	r2, r0
 80092ec:	701a      	strb	r2, [r3, #0]
 80092ee:	42a3      	cmp	r3, r4
 80092f0:	d1f7      	bne.n	80092e2 <AES_CMAC_Update+0x38>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80092f2:	463a      	mov	r2, r7
 80092f4:	4641      	mov	r1, r8
 80092f6:	4668      	mov	r0, sp
 80092f8:	f007 fe28 	bl	8010f4c <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80092fc:	4632      	mov	r2, r6
 80092fe:	4669      	mov	r1, sp
 8009300:	4668      	mov	r0, sp
 8009302:	f000 fa36 	bl	8009772 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8009306:	463a      	mov	r2, r7
 8009308:	4669      	mov	r1, sp
 800930a:	4640      	mov	r0, r8
 800930c:	f007 fe1e 	bl	8010f4c <memcpy1>

        data += 16;
 8009310:	3510      	adds	r5, #16
    while( len > 16 )
 8009312:	454d      	cmp	r5, r9
 8009314:	d1e2      	bne.n	80092dc <AES_CMAC_Update+0x32>
 8009316:	f1aa 0a10 	sub.w	sl, sl, #16
        len -= 16;
 800931a:	ebcb 7b0b 	rsb	fp, fp, fp, lsl #28
 800931e:	eb0a 1a0b 	add.w	sl, sl, fp, lsl #4
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8009322:	fa1f f28a 	uxth.w	r2, sl
 8009326:	4649      	mov	r1, r9
 8009328:	f206 1001 	addw	r0, r6, #257	; 0x101
 800932c:	f007 fe0e 	bl	8010f4c <memcpy1>
    ctx->M_n = len;
 8009330:	f8c6 a114 	str.w	sl, [r6, #276]	; 0x114
}
 8009334:	b005      	add	sp, #20
 8009336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mlen = MIN( 16 - ctx->M_n, len );
 800933a:	f1c3 0710 	rsb	r7, r3, #16
 800933e:	463c      	mov	r4, r7
 8009340:	4297      	cmp	r7, r2
 8009342:	bf28      	it	cs
 8009344:	4614      	movcs	r4, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8009346:	f200 1001 	addw	r0, r0, #257	; 0x101
 800934a:	b2a2      	uxth	r2, r4
 800934c:	4418      	add	r0, r3
 800934e:	f007 fdfd 	bl	8010f4c <memcpy1>
        ctx->M_n += mlen;
 8009352:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 8009356:	4423      	add	r3, r4
 8009358:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800935c:	2b0f      	cmp	r3, #15
 800935e:	d9e9      	bls.n	8009334 <AES_CMAC_Update+0x8a>
 8009360:	4557      	cmp	r7, sl
 8009362:	d2e7      	bcs.n	8009334 <AES_CMAC_Update+0x8a>
 8009364:	f106 03f0 	add.w	r3, r6, #240	; 0xf0
 8009368:	f506 7080 	add.w	r0, r6, #256	; 0x100
        XOR( ctx->M_last, ctx->X );
 800936c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8009370:	7c19      	ldrb	r1, [r3, #16]
 8009372:	404a      	eors	r2, r1
 8009374:	701a      	strb	r2, [r3, #0]
 8009376:	4283      	cmp	r3, r0
 8009378:	d1f8      	bne.n	800936c <AES_CMAC_Update+0xc2>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800937a:	f106 07f1 	add.w	r7, r6, #241	; 0xf1
 800937e:	2210      	movs	r2, #16
 8009380:	4639      	mov	r1, r7
 8009382:	4668      	mov	r0, sp
 8009384:	f007 fde2 	bl	8010f4c <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8009388:	4632      	mov	r2, r6
 800938a:	4669      	mov	r1, sp
 800938c:	4668      	mov	r0, sp
 800938e:	f000 f9f0 	bl	8009772 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8009392:	2210      	movs	r2, #16
 8009394:	4669      	mov	r1, sp
 8009396:	4638      	mov	r0, r7
 8009398:	f007 fdd8 	bl	8010f4c <memcpy1>
        data += mlen;
 800939c:	4425      	add	r5, r4
        len -= mlen;
 800939e:	ebaa 0a04 	sub.w	sl, sl, r4
 80093a2:	e78b      	b.n	80092bc <AES_CMAC_Update+0x12>
    while( len > 16 )
 80093a4:	46a9      	mov	r9, r5
 80093a6:	e7bc      	b.n	8009322 <AES_CMAC_Update+0x78>

080093a8 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 80093a8:	b530      	push	{r4, r5, lr}
 80093aa:	b089      	sub	sp, #36	; 0x24
 80093ac:	4605      	mov	r5, r0
 80093ae:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 80093b0:	2210      	movs	r2, #16
 80093b2:	2100      	movs	r1, #0
 80093b4:	eb0d 0002 	add.w	r0, sp, r2
 80093b8:	f007 fde2 	bl	8010f80 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 80093bc:	4622      	mov	r2, r4
 80093be:	a904      	add	r1, sp, #16
 80093c0:	4608      	mov	r0, r1
 80093c2:	f000 f9d6 	bl	8009772 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 80093c6:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	db39      	blt.n	8009442 <AES_CMAC_Final+0x9a>
 80093ce:	aa04      	add	r2, sp, #16
 80093d0:	f10d 001f 	add.w	r0, sp, #31
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 80093d4:	7813      	ldrb	r3, [r2, #0]
 80093d6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
 80093e0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80093e4:	4282      	cmp	r2, r0
 80093e6:	d1f5      	bne.n	80093d4 <AES_CMAC_Final+0x2c>
 80093e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80093ec:	005b      	lsls	r3, r3, #1
 80093ee:	b2db      	uxtb	r3, r3
        K[15] ^= 0x87;
 80093f0:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 80093f4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80093f8:	2b10      	cmp	r3, #16
 80093fa:	d036      	beq.n	800946a <AES_CMAC_Final+0xc2>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 80093fc:	f99d 2010 	ldrsb.w	r2, [sp, #16]
 8009400:	2a00      	cmp	r2, #0
 8009402:	db40      	blt.n	8009486 <AES_CMAC_Final+0xde>
 8009404:	a904      	add	r1, sp, #16
 8009406:	f10d 0c1f 	add.w	ip, sp, #31
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800940a:	780a      	ldrb	r2, [r1, #0]
 800940c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009410:	0052      	lsls	r2, r2, #1
 8009412:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
 8009416:	f801 2c01 	strb.w	r2, [r1, #-1]
 800941a:	4561      	cmp	r1, ip
 800941c:	d1f5      	bne.n	800940a <AES_CMAC_Final+0x62>
 800941e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8009422:	0052      	lsls	r2, r2, #1
 8009424:	b2d2      	uxtb	r2, r2
            K[15] ^= 0x87;
 8009426:	f88d 201f 	strb.w	r2, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800942a:	18e2      	adds	r2, r4, r3
 800942c:	2180      	movs	r1, #128	; 0x80
 800942e:	f882 1101 	strb.w	r1, [r2, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8009432:	3301      	adds	r3, #1
 8009434:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8009438:	2b0f      	cmp	r3, #15
 800943a:	d841      	bhi.n	80094c0 <AES_CMAC_Final+0x118>
 800943c:	461a      	mov	r2, r3
            ctx->M_last[ctx->M_n] = 0;
 800943e:	2100      	movs	r1, #0
 8009440:	e036      	b.n	80094b0 <AES_CMAC_Final+0x108>
 8009442:	aa04      	add	r2, sp, #16
 8009444:	f10d 001f 	add.w	r0, sp, #31
        LSHIFT( K, K );
 8009448:	7813      	ldrb	r3, [r2, #0]
 800944a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800944e:	005b      	lsls	r3, r3, #1
 8009450:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
 8009454:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009458:	4282      	cmp	r2, r0
 800945a:	d1f5      	bne.n	8009448 <AES_CMAC_Final+0xa0>
 800945c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8009460:	005b      	lsls	r3, r3, #1
        K[15] ^= 0x87;
 8009462:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8009466:	b2db      	uxtb	r3, r3
 8009468:	e7c2      	b.n	80093f0 <AES_CMAC_Final+0x48>
 800946a:	f504 7180 	add.w	r1, r4, #256	; 0x100
 800946e:	aa04      	add	r2, sp, #16
 8009470:	f10d 0c20 	add.w	ip, sp, #32
        XOR( K, ctx->M_last );
 8009474:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009478:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800947c:	4043      	eors	r3, r0
 800947e:	700b      	strb	r3, [r1, #0]
 8009480:	4562      	cmp	r2, ip
 8009482:	d1f7      	bne.n	8009474 <AES_CMAC_Final+0xcc>
 8009484:	e029      	b.n	80094da <AES_CMAC_Final+0x132>
 8009486:	a904      	add	r1, sp, #16
 8009488:	f10d 0c1f 	add.w	ip, sp, #31
            LSHIFT( K, K );
 800948c:	780a      	ldrb	r2, [r1, #0]
 800948e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009492:	0052      	lsls	r2, r2, #1
 8009494:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
 8009498:	f801 2c01 	strb.w	r2, [r1, #-1]
 800949c:	4561      	cmp	r1, ip
 800949e:	d1f5      	bne.n	800948c <AES_CMAC_Final+0xe4>
 80094a0:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80094a4:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 80094a6:	f082 0287 	eor.w	r2, r2, #135	; 0x87
 80094aa:	b2d2      	uxtb	r2, r2
 80094ac:	e7bb      	b.n	8009426 <AES_CMAC_Final+0x7e>
        while( ++ctx->M_n < 16 )
 80094ae:	461a      	mov	r2, r3
            ctx->M_last[ctx->M_n] = 0;
 80094b0:	4423      	add	r3, r4
 80094b2:	f883 1101 	strb.w	r1, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80094b6:	1c53      	adds	r3, r2, #1
 80094b8:	2b0f      	cmp	r3, #15
 80094ba:	d9f8      	bls.n	80094ae <AES_CMAC_Final+0x106>
 80094bc:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114

        XOR( K, ctx->M_last );
 80094c0:	f504 7180 	add.w	r1, r4, #256	; 0x100
 80094c4:	aa04      	add	r2, sp, #16
 80094c6:	f10d 0c20 	add.w	ip, sp, #32
 80094ca:	f812 3b01 	ldrb.w	r3, [r2], #1
 80094ce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80094d2:	4043      	eors	r3, r0
 80094d4:	700b      	strb	r3, [r1, #0]
 80094d6:	4562      	cmp	r2, ip
 80094d8:	d1f7      	bne.n	80094ca <AES_CMAC_Final+0x122>
    }
    XOR( ctx->M_last, ctx->X );
 80094da:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
 80094de:	f504 7180 	add.w	r1, r4, #256	; 0x100
 80094e2:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 80094e6:	7c1a      	ldrb	r2, [r3, #16]
 80094e8:	ea8c 0c02 	eor.w	ip, ip, r2
 80094ec:	f883 c000 	strb.w	ip, [r3]
 80094f0:	4299      	cmp	r1, r3
 80094f2:	d1f6      	bne.n	80094e2 <AES_CMAC_Final+0x13a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80094f4:	2210      	movs	r2, #16
 80094f6:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 80094fa:	4668      	mov	r0, sp
 80094fc:	f007 fd26 	bl	8010f4c <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8009500:	4622      	mov	r2, r4
 8009502:	4629      	mov	r1, r5
 8009504:	4668      	mov	r0, sp
 8009506:	f000 f934 	bl	8009772 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800950a:	2210      	movs	r2, #16
 800950c:	2100      	movs	r1, #0
 800950e:	eb0d 0002 	add.w	r0, sp, r2
 8009512:	f007 fd35 	bl	8010f80 <memset1>
}
 8009516:	b009      	add	sp, #36	; 0x24
 8009518:	bd30      	pop	{r4, r5, pc}

0800951a <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800951a:	7803      	ldrb	r3, [r0, #0]
 800951c:	780a      	ldrb	r2, [r1, #0]
 800951e:	4053      	eors	r3, r2
 8009520:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8009522:	7843      	ldrb	r3, [r0, #1]
 8009524:	784a      	ldrb	r2, [r1, #1]
 8009526:	4053      	eors	r3, r2
 8009528:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800952a:	7883      	ldrb	r3, [r0, #2]
 800952c:	788a      	ldrb	r2, [r1, #2]
 800952e:	4053      	eors	r3, r2
 8009530:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8009532:	78c3      	ldrb	r3, [r0, #3]
 8009534:	78ca      	ldrb	r2, [r1, #3]
 8009536:	4053      	eors	r3, r2
 8009538:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800953a:	7903      	ldrb	r3, [r0, #4]
 800953c:	790a      	ldrb	r2, [r1, #4]
 800953e:	4053      	eors	r3, r2
 8009540:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8009542:	7943      	ldrb	r3, [r0, #5]
 8009544:	794a      	ldrb	r2, [r1, #5]
 8009546:	4053      	eors	r3, r2
 8009548:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800954a:	7983      	ldrb	r3, [r0, #6]
 800954c:	798a      	ldrb	r2, [r1, #6]
 800954e:	4053      	eors	r3, r2
 8009550:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8009552:	79c3      	ldrb	r3, [r0, #7]
 8009554:	79ca      	ldrb	r2, [r1, #7]
 8009556:	4053      	eors	r3, r2
 8009558:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800955a:	7a03      	ldrb	r3, [r0, #8]
 800955c:	7a0a      	ldrb	r2, [r1, #8]
 800955e:	4053      	eors	r3, r2
 8009560:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8009562:	7a43      	ldrb	r3, [r0, #9]
 8009564:	7a4a      	ldrb	r2, [r1, #9]
 8009566:	4053      	eors	r3, r2
 8009568:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800956a:	7a83      	ldrb	r3, [r0, #10]
 800956c:	7a8a      	ldrb	r2, [r1, #10]
 800956e:	4053      	eors	r3, r2
 8009570:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8009572:	7ac3      	ldrb	r3, [r0, #11]
 8009574:	7aca      	ldrb	r2, [r1, #11]
 8009576:	4053      	eors	r3, r2
 8009578:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800957a:	7b03      	ldrb	r3, [r0, #12]
 800957c:	7b0a      	ldrb	r2, [r1, #12]
 800957e:	4053      	eors	r3, r2
 8009580:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8009582:	7b43      	ldrb	r3, [r0, #13]
 8009584:	7b4a      	ldrb	r2, [r1, #13]
 8009586:	4053      	eors	r3, r2
 8009588:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800958a:	7b83      	ldrb	r3, [r0, #14]
 800958c:	7b8a      	ldrb	r2, [r1, #14]
 800958e:	4053      	eors	r3, r2
 8009590:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8009592:	7bc3      	ldrb	r3, [r0, #15]
 8009594:	7bca      	ldrb	r2, [r1, #15]
 8009596:	4053      	eors	r3, r2
 8009598:	73c3      	strb	r3, [r0, #15]
#endif
}
 800959a:	4770      	bx	lr

0800959c <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800959c:	780b      	ldrb	r3, [r1, #0]
 800959e:	f892 c000 	ldrb.w	ip, [r2]
 80095a2:	ea83 030c 	eor.w	r3, r3, ip
 80095a6:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 80095a8:	784b      	ldrb	r3, [r1, #1]
 80095aa:	f892 c001 	ldrb.w	ip, [r2, #1]
 80095ae:	ea83 030c 	eor.w	r3, r3, ip
 80095b2:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 80095b4:	788b      	ldrb	r3, [r1, #2]
 80095b6:	f892 c002 	ldrb.w	ip, [r2, #2]
 80095ba:	ea83 030c 	eor.w	r3, r3, ip
 80095be:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 80095c0:	78cb      	ldrb	r3, [r1, #3]
 80095c2:	f892 c003 	ldrb.w	ip, [r2, #3]
 80095c6:	ea83 030c 	eor.w	r3, r3, ip
 80095ca:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80095cc:	790b      	ldrb	r3, [r1, #4]
 80095ce:	f892 c004 	ldrb.w	ip, [r2, #4]
 80095d2:	ea83 030c 	eor.w	r3, r3, ip
 80095d6:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80095d8:	794b      	ldrb	r3, [r1, #5]
 80095da:	f892 c005 	ldrb.w	ip, [r2, #5]
 80095de:	ea83 030c 	eor.w	r3, r3, ip
 80095e2:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 80095e4:	798b      	ldrb	r3, [r1, #6]
 80095e6:	f892 c006 	ldrb.w	ip, [r2, #6]
 80095ea:	ea83 030c 	eor.w	r3, r3, ip
 80095ee:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 80095f0:	79cb      	ldrb	r3, [r1, #7]
 80095f2:	f892 c007 	ldrb.w	ip, [r2, #7]
 80095f6:	ea83 030c 	eor.w	r3, r3, ip
 80095fa:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 80095fc:	7a0b      	ldrb	r3, [r1, #8]
 80095fe:	f892 c008 	ldrb.w	ip, [r2, #8]
 8009602:	ea83 030c 	eor.w	r3, r3, ip
 8009606:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8009608:	7a4b      	ldrb	r3, [r1, #9]
 800960a:	f892 c009 	ldrb.w	ip, [r2, #9]
 800960e:	ea83 030c 	eor.w	r3, r3, ip
 8009612:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8009614:	7a8b      	ldrb	r3, [r1, #10]
 8009616:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800961a:	ea83 030c 	eor.w	r3, r3, ip
 800961e:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8009620:	7acb      	ldrb	r3, [r1, #11]
 8009622:	f892 c00b 	ldrb.w	ip, [r2, #11]
 8009626:	ea83 030c 	eor.w	r3, r3, ip
 800962a:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800962c:	7b0b      	ldrb	r3, [r1, #12]
 800962e:	f892 c00c 	ldrb.w	ip, [r2, #12]
 8009632:	ea83 030c 	eor.w	r3, r3, ip
 8009636:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8009638:	7b4b      	ldrb	r3, [r1, #13]
 800963a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800963e:	ea83 030c 	eor.w	r3, r3, ip
 8009642:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8009644:	7b8b      	ldrb	r3, [r1, #14]
 8009646:	f892 c00e 	ldrb.w	ip, [r2, #14]
 800964a:	ea83 030c 	eor.w	r3, r3, ip
 800964e:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8009650:	7bcb      	ldrb	r3, [r1, #15]
 8009652:	7bd2      	ldrb	r2, [r2, #15]
 8009654:	4053      	eors	r3, r2
 8009656:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8009658:	4770      	bx	lr

0800965a <lorawan_aes_set_key>:

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 800965a:	f1a1 0310 	sub.w	r3, r1, #16
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b10      	cmp	r3, #16
 8009662:	f200 8081 	bhi.w	8009768 <lorawan_aes_set_key+0x10e>
{
 8009666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    switch( keylen )
 800966a:	f240 1401 	movw	r4, #257	; 0x101
 800966e:	f2c0 0401 	movt	r4, #1
 8009672:	40dc      	lsrs	r4, r3
 8009674:	f014 0f01 	tst.w	r4, #1
 8009678:	d104      	bne.n	8009684 <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800967a:	2300      	movs	r3, #0
 800967c:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
        return ( uint8_t )-1;
 8009680:	20ff      	movs	r0, #255	; 0xff
 8009682:	e06f      	b.n	8009764 <lorawan_aes_set_key+0x10a>
    while( nn-- )
 8009684:	1e53      	subs	r3, r2, #1
 8009686:	1845      	adds	r5, r0, r1
        *d++ = *s++;
 8009688:	f810 4b01 	ldrb.w	r4, [r0], #1
 800968c:	f803 4f01 	strb.w	r4, [r3, #1]!
    while( nn-- )
 8009690:	42a8      	cmp	r0, r5
 8009692:	d1f9      	bne.n	8009688 <lorawan_aes_set_key+0x2e>
    }
    block_copy_nn(ctx->ksch, key, keylen);
    hi = (keylen + 28) << 2;
 8009694:	f101 031c 	add.w	r3, r1, #28
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	fa5f fa83 	uxtb.w	sl, r3
    ctx->rnd = (hi >> 4) - 1;
 800969e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80096a2:	3b01      	subs	r3, #1
 80096a4:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
 80096a8:	460b      	mov	r3, r1
 80096aa:	f04f 0e00 	mov.w	lr, #0
 80096ae:	f04f 0801 	mov.w	r8, #1
            t3 = s_box(tt);
            rc = f2(rc);
        }
        else if( keylen > 24 && cc % keylen == 16 )
        {
            t0 = s_box(t0);
 80096b2:	f644 59f0 	movw	r9, #19952	; 0x4df0
 80096b6:	f6c0 0901 	movt	r9, #2049	; 0x801
 80096ba:	e01f      	b.n	80096fc <lorawan_aes_set_key+0xa2>
        else if( keylen > 24 && cc % keylen == 16 )
 80096bc:	2918      	cmp	r1, #24
 80096be:	d902      	bls.n	80096c6 <lorawan_aes_set_key+0x6c>
 80096c0:	f1bc 0f10 	cmp.w	ip, #16
 80096c4:	d044      	beq.n	8009750 <lorawan_aes_set_key+0xf6>
            t1 = s_box(t1);
            t2 = s_box(t2);
            t3 = s_box(t3);
        }
        tt = cc - keylen;
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80096c6:	f812 c00e 	ldrb.w	ip, [r2, lr]
 80096ca:	ea87 070c 	eor.w	r7, r7, ip
 80096ce:	5417      	strb	r7, [r2, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80096d0:	4410      	add	r0, r2
 80096d2:	eb02 070e 	add.w	r7, r2, lr
 80096d6:	f897 c001 	ldrb.w	ip, [r7, #1]
 80096da:	ea86 060c 	eor.w	r6, r6, ip
 80096de:	7046      	strb	r6, [r0, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80096e0:	78be      	ldrb	r6, [r7, #2]
 80096e2:	4075      	eors	r5, r6
 80096e4:	7085      	strb	r5, [r0, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80096e6:	78fd      	ldrb	r5, [r7, #3]
 80096e8:	406c      	eors	r4, r5
 80096ea:	70c4      	strb	r4, [r0, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80096ec:	3304      	adds	r3, #4
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	f10e 0e04 	add.w	lr, lr, #4
 80096f4:	fa5f fe8e 	uxtb.w	lr, lr
 80096f8:	459a      	cmp	sl, r3
 80096fa:	d932      	bls.n	8009762 <lorawan_aes_set_key+0x108>
        t0 = ctx->ksch[cc - 4];
 80096fc:	4618      	mov	r0, r3
 80096fe:	18d4      	adds	r4, r2, r3
 8009700:	f814 7c04 	ldrb.w	r7, [r4, #-4]
        t1 = ctx->ksch[cc - 3];
 8009704:	f814 6c03 	ldrb.w	r6, [r4, #-3]
        t2 = ctx->ksch[cc - 2];
 8009708:	f814 5c02 	ldrb.w	r5, [r4, #-2]
        t3 = ctx->ksch[cc - 1];
 800970c:	f814 4c01 	ldrb.w	r4, [r4, #-1]
        if( cc % keylen == 0 )
 8009710:	fbb3 fcf1 	udiv	ip, r3, r1
 8009714:	fb01 3c1c 	mls	ip, r1, ip, r3
 8009718:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800971c:	d1ce      	bne.n	80096bc <lorawan_aes_set_key+0x62>
            t0 = s_box(t1) ^ rc;
 800971e:	f819 c006 	ldrb.w	ip, [r9, r6]
 8009722:	ea88 0c0c 	eor.w	ip, r8, ip
            t1 = s_box(t2);
 8009726:	f819 6005 	ldrb.w	r6, [r9, r5]
            t2 = s_box(t3);
 800972a:	f819 5004 	ldrb.w	r5, [r9, r4]
            t3 = s_box(tt);
 800972e:	f819 4007 	ldrb.w	r4, [r9, r7]
            rc = f2(rc);
 8009732:	ea4f 17d8 	mov.w	r7, r8, lsr #7
 8009736:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800973a:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 800973e:	b2ff      	uxtb	r7, r7
 8009740:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8009744:	fa5f f888 	uxtb.w	r8, r8
 8009748:	ea87 0808 	eor.w	r8, r7, r8
            t0 = s_box(t1) ^ rc;
 800974c:	4667      	mov	r7, ip
 800974e:	e7ba      	b.n	80096c6 <lorawan_aes_set_key+0x6c>
            t0 = s_box(t0);
 8009750:	f819 7007 	ldrb.w	r7, [r9, r7]
            t1 = s_box(t1);
 8009754:	f819 6006 	ldrb.w	r6, [r9, r6]
            t2 = s_box(t2);
 8009758:	f819 5005 	ldrb.w	r5, [r9, r5]
            t3 = s_box(t3);
 800975c:	f819 4004 	ldrb.w	r4, [r9, r4]
 8009760:	e7b1      	b.n	80096c6 <lorawan_aes_set_key+0x6c>
    }
    return 0;
 8009762:	2000      	movs	r0, #0
}
 8009764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ctx->rnd = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
        return ( uint8_t )-1;
 800976e:	20ff      	movs	r0, #255	; 0xff
}
 8009770:	4770      	bx	lr

08009772 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 8009772:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009776:	b093      	sub	sp, #76	; 0x4c
 8009778:	910c      	str	r1, [sp, #48]	; 0x30
 800977a:	920d      	str	r2, [sp, #52]	; 0x34
    if( ctx->rnd )
 800977c:	f892 40f0 	ldrb.w	r4, [r2, #240]	; 0xf0
 8009780:	940b      	str	r4, [sp, #44]	; 0x2c
 8009782:	2c00      	cmp	r4, #0
 8009784:	f000 8171 	beq.w	8009a6a <lorawan_aes_encrypt+0x2f8>
 8009788:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800978a:	4601      	mov	r1, r0
 800978c:	a80e      	add	r0, sp, #56	; 0x38
 800978e:	f7ff ff05 	bl	800959c <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8009792:	2c01      	cmp	r4, #1
 8009794:	f240 8166 	bls.w	8009a64 <lorawan_aes_encrypt+0x2f2>
 8009798:	462a      	mov	r2, r5
 800979a:	f105 0110 	add.w	r1, r5, #16
 800979e:	9100      	str	r1, [sp, #0]
 80097a0:	1ea3      	subs	r3, r4, #2
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	3220      	adds	r2, #32
 80097a6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80097aa:	930a      	str	r3, [sp, #40]	; 0x28
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80097ac:	f644 57f0 	movw	r7, #19952	; 0x4df0
 80097b0:	f6c0 0701 	movt	r7, #2049	; 0x801
 80097b4:	f644 3bf0 	movw	fp, #19440	; 0x4bf0
 80097b8:	f6c0 0b01 	movt	fp, #2049	; 0x801
 80097bc:	f644 4af0 	movw	sl, #19696	; 0x4cf0
 80097c0:	f6c0 0a01 	movt	sl, #2049	; 0x801
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 80097c4:	f89d 4039 	ldrb.w	r4, [sp, #57]	; 0x39
 80097c8:	9401      	str	r4, [sp, #4]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 80097ca:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 80097ce:	9502      	str	r5, [sp, #8]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 80097d0:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
 80097d4:	9103      	str	r1, [sp, #12]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 80097d6:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 80097da:	f8cd c010 	str.w	ip, [sp, #16]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 80097de:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 80097e2:	9305      	str	r3, [sp, #20]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 80097e4:	f89d 603f 	ldrb.w	r6, [sp, #63]	; 0x3f
 80097e8:	9606      	str	r6, [sp, #24]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 80097ea:	f89d c040 	ldrb.w	ip, [sp, #64]	; 0x40
 80097ee:	f8cd c01c 	str.w	ip, [sp, #28]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 80097f2:	f89d 4041 	ldrb.w	r4, [sp, #65]	; 0x41
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 80097f6:	f89d 8043 	ldrb.w	r8, [sp, #67]	; 0x43
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 80097fa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80097fe:	9208      	str	r2, [sp, #32]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8009800:	f89d e045 	ldrb.w	lr, [sp, #69]	; 0x45
 8009804:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8009808:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800980c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8009810:	f89d e03d 	ldrb.w	lr, [sp, #61]	; 0x3d
 8009814:	f89d c042 	ldrb.w	ip, [sp, #66]	; 0x42
 8009818:	f817 900c 	ldrb.w	r9, [r7, ip]
 800981c:	4649      	mov	r1, r9
 800981e:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
 8009822:	5d7b      	ldrb	r3, [r7, r5]
 8009824:	f81b 2006 	ldrb.w	r2, [fp, r6]
 8009828:	f81a 900e 	ldrb.w	r9, [sl, lr]
 800982c:	ea82 0209 	eor.w	r2, r2, r9
 8009830:	404a      	eors	r2, r1
 8009832:	405a      	eors	r2, r3
 8009834:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8009838:	5dba      	ldrb	r2, [r7, r6]
 800983a:	4053      	eors	r3, r2
 800983c:	f81b 900e 	ldrb.w	r9, [fp, lr]
 8009840:	ea89 0303 	eor.w	r3, r9, r3
 8009844:	f81a 900c 	ldrb.w	r9, [sl, ip]
 8009848:	ea83 0309 	eor.w	r3, r3, r9
 800984c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8009850:	f817 300e 	ldrb.w	r3, [r7, lr]
 8009854:	405a      	eors	r2, r3
 8009856:	f81b c00c 	ldrb.w	ip, [fp, ip]
 800985a:	ea82 020c 	eor.w	r2, r2, ip
 800985e:	f81a c005 	ldrb.w	ip, [sl, r5]
 8009862:	ea82 020c 	eor.w	r2, r2, ip
 8009866:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800986a:	404b      	eors	r3, r1
 800986c:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8009870:	405a      	eors	r2, r3
 8009872:	f81b 3005 	ldrb.w	r3, [fp, r5]
 8009876:	405a      	eors	r2, r3
 8009878:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800987c:	5c3d      	ldrb	r5, [r7, r0]
 800987e:	9903      	ldr	r1, [sp, #12]
 8009880:	5c7b      	ldrb	r3, [r7, r1]
 8009882:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009886:	f81b 200c 	ldrb.w	r2, [fp, ip]
 800988a:	f81a 6004 	ldrb.w	r6, [sl, r4]
 800988e:	4072      	eors	r2, r6
 8009890:	406a      	eors	r2, r5
 8009892:	405a      	eors	r2, r3
 8009894:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8009898:	f817 200c 	ldrb.w	r2, [r7, ip]
 800989c:	4053      	eors	r3, r2
 800989e:	f81b 6004 	ldrb.w	r6, [fp, r4]
 80098a2:	4073      	eors	r3, r6
 80098a4:	f81a 6000 	ldrb.w	r6, [sl, r0]
 80098a8:	4073      	eors	r3, r6
 80098aa:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80098ae:	5d3b      	ldrb	r3, [r7, r4]
 80098b0:	405a      	eors	r2, r3
 80098b2:	f81b 0000 	ldrb.w	r0, [fp, r0]
 80098b6:	4042      	eors	r2, r0
 80098b8:	f81a 0001 	ldrb.w	r0, [sl, r1]
 80098bc:	4042      	eors	r2, r0
 80098be:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80098c2:	406b      	eors	r3, r5
 80098c4:	f81a 200c 	ldrb.w	r2, [sl, ip]
 80098c8:	405a      	eors	r2, r3
 80098ca:	f81b 3001 	ldrb.w	r3, [fp, r1]
 80098ce:	405a      	eors	r2, r3
 80098d0:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80098d4:	9d02      	ldr	r5, [sp, #8]
 80098d6:	5d7a      	ldrb	r2, [r7, r5]
 80098d8:	9e06      	ldr	r6, [sp, #24]
 80098da:	5dbb      	ldrb	r3, [r7, r6]
 80098dc:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80098e0:	f81b 100c 	ldrb.w	r1, [fp, ip]
 80098e4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80098e8:	f81a 000e 	ldrb.w	r0, [sl, lr]
 80098ec:	4041      	eors	r1, r0
 80098ee:	4051      	eors	r1, r2
 80098f0:	4059      	eors	r1, r3
 80098f2:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80098f6:	f817 100c 	ldrb.w	r1, [r7, ip]
 80098fa:	404b      	eors	r3, r1
 80098fc:	f81b 000e 	ldrb.w	r0, [fp, lr]
 8009900:	4043      	eors	r3, r0
 8009902:	f81a 0005 	ldrb.w	r0, [sl, r5]
 8009906:	4043      	eors	r3, r0
 8009908:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800990c:	f817 300e 	ldrb.w	r3, [r7, lr]
 8009910:	4059      	eors	r1, r3
 8009912:	f81b 0005 	ldrb.w	r0, [fp, r5]
 8009916:	4041      	eors	r1, r0
 8009918:	f81a 0006 	ldrb.w	r0, [sl, r6]
 800991c:	4041      	eors	r1, r0
 800991e:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8009922:	405a      	eors	r2, r3
 8009924:	f81a 300c 	ldrb.w	r3, [sl, ip]
 8009928:	4053      	eors	r3, r2
 800992a:	f81b 2006 	ldrb.w	r2, [fp, r6]
 800992e:	4053      	eors	r3, r2
 8009930:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8009934:	9d05      	ldr	r5, [sp, #20]
 8009936:	5d7b      	ldrb	r3, [r7, r5]
 8009938:	f817 1008 	ldrb.w	r1, [r7, r8]
 800993c:	9e08      	ldr	r6, [sp, #32]
 800993e:	f81b 2006 	ldrb.w	r2, [fp, r6]
 8009942:	9c01      	ldr	r4, [sp, #4]
 8009944:	f81a 0004 	ldrb.w	r0, [sl, r4]
 8009948:	4042      	eors	r2, r0
 800994a:	405a      	eors	r2, r3
 800994c:	404a      	eors	r2, r1
 800994e:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8009952:	5dba      	ldrb	r2, [r7, r6]
 8009954:	4051      	eors	r1, r2
 8009956:	f81b 0004 	ldrb.w	r0, [fp, r4]
 800995a:	4041      	eors	r1, r0
 800995c:	f81a 0005 	ldrb.w	r0, [sl, r5]
 8009960:	4041      	eors	r1, r0
 8009962:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8009966:	5d39      	ldrb	r1, [r7, r4]
 8009968:	404a      	eors	r2, r1
 800996a:	f81b 0005 	ldrb.w	r0, [fp, r5]
 800996e:	4042      	eors	r2, r0
 8009970:	f81a 0008 	ldrb.w	r0, [sl, r8]
 8009974:	4042      	eors	r2, r0
 8009976:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800997a:	404b      	eors	r3, r1
 800997c:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8009980:	4053      	eors	r3, r2
 8009982:	f81b 2008 	ldrb.w	r2, [fp, r8]
 8009986:	4053      	eors	r3, r2
 8009988:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    xor_block(d, k);
 800998c:	9c00      	ldr	r4, [sp, #0]
 800998e:	4621      	mov	r1, r4
 8009990:	a80e      	add	r0, sp, #56	; 0x38
 8009992:	f7ff fdc2 	bl	800951a <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8009996:	4623      	mov	r3, r4
 8009998:	3310      	adds	r3, #16
 800999a:	9300      	str	r3, [sp, #0]
 800999c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800999e:	4293      	cmp	r3, r2
 80099a0:	f47f af10 	bne.w	80097c4 <lorawan_aes_encrypt+0x52>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80099a4:	f644 53f0 	movw	r3, #19952	; 0x4df0
 80099a8:	f6c0 0301 	movt	r3, #2049	; 0x801
 80099ac:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80099b0:	5c9a      	ldrb	r2, [r3, r2]
 80099b2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 80099b6:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80099ba:	5c9a      	ldrb	r2, [r3, r2]
 80099bc:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80099c0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80099c4:	5c9a      	ldrb	r2, [r3, r2]
 80099c6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 80099ca:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80099ce:	5c9a      	ldrb	r2, [r3, r2]
 80099d0:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80099d4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80099d8:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80099dc:	5c59      	ldrb	r1, [r3, r1]
 80099de:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
 80099e2:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
 80099e6:	5c59      	ldrb	r1, [r3, r1]
 80099e8:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 80099ec:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
 80099f0:	5c59      	ldrb	r1, [r3, r1]
 80099f2:	f88d 1041 	strb.w	r1, [sp, #65]	; 0x41
 80099f6:	5c9a      	ldrb	r2, [r3, r2]
 80099f8:	f88d 2045 	strb.w	r2, [sp, #69]	; 0x45
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 80099fc:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8009a00:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
 8009a04:	5c59      	ldrb	r1, [r3, r1]
 8009a06:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
 8009a0a:	5c9a      	ldrb	r2, [r3, r2]
 8009a0c:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8009a10:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
 8009a14:	f89d 1046 	ldrb.w	r1, [sp, #70]	; 0x46
 8009a18:	5c59      	ldrb	r1, [r3, r1]
 8009a1a:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 8009a1e:	5c9a      	ldrb	r2, [r3, r2]
 8009a20:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8009a24:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8009a28:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 8009a2c:	5c59      	ldrb	r1, [r3, r1]
 8009a2e:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
 8009a32:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 8009a36:	5c59      	ldrb	r1, [r3, r1]
 8009a38:	f88d 1043 	strb.w	r1, [sp, #67]	; 0x43
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8009a3c:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
 8009a40:	5c59      	ldrb	r1, [r3, r1]
 8009a42:	f88d 103f 	strb.w	r1, [sp, #63]	; 0x3f
 8009a46:	5c9b      	ldrb	r3, [r3, r2]
 8009a48:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8009a4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a50:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8009a54:	a90e      	add	r1, sp, #56	; 0x38
 8009a56:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009a58:	f7ff fda0 	bl	800959c <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8009a5c:	2000      	movs	r0, #0
}
 8009a5e:	b013      	add	sp, #76	; 0x4c
 8009a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for( r = 1 ; r < ctx->rnd ; ++r )
 8009a64:	2301      	movs	r3, #1
 8009a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a68:	e79c      	b.n	80099a4 <lorawan_aes_encrypt+0x232>
        return ( uint8_t )-1;
 8009a6a:	20ff      	movs	r0, #255	; 0xff
 8009a6c:	e7f7      	b.n	8009a5e <lorawan_aes_encrypt+0x2ec>

08009a6e <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 8009a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a72:	b0ca      	sub	sp, #296	; 0x128
 8009a74:	9c50      	ldr	r4, [sp, #320]	; 0x140
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8009a76:	2900      	cmp	r1, #0
 8009a78:	d047      	beq.n	8009b0a <ComputeCmac+0x9c>
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	4616      	mov	r6, r2
 8009a7e:	4698      	mov	r8, r3
 8009a80:	460f      	mov	r7, r1
 8009a82:	2c00      	cmp	r4, #0
 8009a84:	d043      	beq.n	8009b0e <ComputeCmac+0xa0>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8009a86:	4668      	mov	r0, sp
 8009a88:	f7ff fbf9 	bl	800927e <AES_CMAC_Init>
        if( SeNvm->KeyList[i].KeyID == keyID )
 8009a8c:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8009a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009a94:	6819      	ldr	r1, [r3, #0]
 8009a96:	468e      	mov	lr, r1
 8009a98:	f04f 0c00 	mov.w	ip, #0
 8009a9c:	f89e 2018 	ldrb.w	r2, [lr, #24]
 8009aa0:	4542      	cmp	r2, r8
 8009aa2:	d00a      	beq.n	8009aba <ComputeCmac+0x4c>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009aa4:	f10c 0c01 	add.w	ip, ip, #1
 8009aa8:	f10e 0e11 	add.w	lr, lr, #17
 8009aac:	f1bc 0f0b 	cmp.w	ip, #11
 8009ab0:	d1f4      	bne.n	8009a9c <ComputeCmac+0x2e>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8009ab2:	2003      	movs	r0, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 8009ab4:	b04a      	add	sp, #296	; 0x128
 8009ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8009aba:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8009abe:	f10c 0c19 	add.w	ip, ip, #25
 8009ac2:	4461      	add	r1, ip
 8009ac4:	4668      	mov	r0, sp
 8009ac6:	f7ff fbe9 	bl	800929c <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8009aca:	b125      	cbz	r5, 8009ad6 <ComputeCmac+0x68>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 8009acc:	2210      	movs	r2, #16
 8009ace:	4629      	mov	r1, r5
 8009ad0:	4668      	mov	r0, sp
 8009ad2:	f7ff fbea 	bl	80092aa <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8009ad6:	4632      	mov	r2, r6
 8009ad8:	4639      	mov	r1, r7
 8009ada:	4668      	mov	r0, sp
 8009adc:	f7ff fbe5 	bl	80092aa <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8009ae0:	4669      	mov	r1, sp
 8009ae2:	a846      	add	r0, sp, #280	; 0x118
 8009ae4:	f7ff fc60 	bl	80093a8 <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 8009ae8:	f89d 2119 	ldrb.w	r2, [sp, #281]	; 0x119
 8009aec:	f89d 311a 	ldrb.w	r3, [sp, #282]	; 0x11a
 8009af0:	041b      	lsls	r3, r3, #16
 8009af2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009af6:	f89d 2118 	ldrb.w	r2, [sp, #280]	; 0x118
 8009afa:	4313      	orrs	r3, r2
 8009afc:	f89d 211b 	ldrb.w	r2, [sp, #283]	; 0x11b
 8009b00:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009b04:	6023      	str	r3, [r4, #0]
    return retval;
 8009b06:	2000      	movs	r0, #0
 8009b08:	e7d4      	b.n	8009ab4 <ComputeCmac+0x46>
        return SECURE_ELEMENT_ERROR_NPE;
 8009b0a:	2002      	movs	r0, #2
 8009b0c:	e7d2      	b.n	8009ab4 <ComputeCmac+0x46>
 8009b0e:	2002      	movs	r0, #2
 8009b10:	e7d0      	b.n	8009ab4 <ComputeCmac+0x46>

08009b12 <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 8009b12:	b170      	cbz	r0, 8009b32 <SecureElementInit+0x20>
{
 8009b14:	b510      	push	{r4, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 8009b16:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8009b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009b1e:	6018      	str	r0, [r3, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 8009b20:	22d8      	movs	r2, #216	; 0xd8
 8009b22:	f245 4174 	movw	r1, #21620	; 0x5474
 8009b26:	f6c0 0101 	movt	r1, #2049	; 0x801
 8009b2a:	f007 fa0f 	bl	8010f4c <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 8009b2e:	2000      	movs	r0, #0
}
 8009b30:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8009b32:	2002      	movs	r0, #2
}
 8009b34:	4770      	bx	lr

08009b36 <SecureElementGetKeyByID>:
    return SECURE_ELEMENT_SUCCESS;
}

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 8009b36:	b410      	push	{r4}
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8009b38:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8009b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009b40:	681c      	ldr	r4, [r3, #0]
 8009b42:	4622      	mov	r2, r4
 8009b44:	2300      	movs	r3, #0
 8009b46:	f892 c018 	ldrb.w	ip, [r2, #24]
 8009b4a:	4584      	cmp	ip, r0
 8009b4c:	d006      	beq.n	8009b5c <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009b4e:	3301      	adds	r3, #1
 8009b50:	3211      	adds	r2, #17
 8009b52:	2b0b      	cmp	r3, #11
 8009b54:	d1f7      	bne.n	8009b46 <SecureElementGetKeyByID+0x10>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8009b56:	2003      	movs	r0, #3
}
 8009b58:	bc10      	pop	{r4}
 8009b5a:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8009b5c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8009b60:	3318      	adds	r3, #24
 8009b62:	441c      	add	r4, r3
 8009b64:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8009b66:	2000      	movs	r0, #0
 8009b68:	e7f6      	b.n	8009b58 <SecureElementGetKeyByID+0x22>

08009b6a <PrintKey>:
{
 8009b6a:	b510      	push	{r4, lr}
 8009b6c:	b094      	sub	sp, #80	; 0x50
 8009b6e:	4604      	mov	r4, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 8009b70:	a913      	add	r1, sp, #76	; 0x4c
 8009b72:	f7ff ffe0 	bl	8009b36 <SecureElementGetKeyByID>
 8009b76:	b960      	cbnz	r0, 8009b92 <PrintKey+0x28>
 8009b78:	f245 0288 	movw	r2, #20616	; 0x5088
 8009b7c:	f6c0 0201 	movt	r2, #2049	; 0x801
 8009b80:	2300      	movs	r3, #0
            if( KeyLabel[i].keyID == keyID )
 8009b82:	4618      	mov	r0, r3
 8009b84:	7811      	ldrb	r1, [r2, #0]
 8009b86:	42a1      	cmp	r1, r4
 8009b88:	d005      	beq.n	8009b96 <PrintKey+0x2c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	320c      	adds	r2, #12
 8009b8e:	2b0b      	cmp	r3, #11
 8009b90:	d1f7      	bne.n	8009b82 <PrintKey+0x18>
}
 8009b92:	b014      	add	sp, #80	; 0x50
 8009b94:	bd10      	pop	{r4, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 8009b96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b98:	7c1a      	ldrb	r2, [r3, #16]
 8009b9a:	9210      	str	r2, [sp, #64]	; 0x40
 8009b9c:	7bda      	ldrb	r2, [r3, #15]
 8009b9e:	920f      	str	r2, [sp, #60]	; 0x3c
 8009ba0:	7b9a      	ldrb	r2, [r3, #14]
 8009ba2:	920e      	str	r2, [sp, #56]	; 0x38
 8009ba4:	7b5a      	ldrb	r2, [r3, #13]
 8009ba6:	920d      	str	r2, [sp, #52]	; 0x34
 8009ba8:	7b1a      	ldrb	r2, [r3, #12]
 8009baa:	920c      	str	r2, [sp, #48]	; 0x30
 8009bac:	7ada      	ldrb	r2, [r3, #11]
 8009bae:	920b      	str	r2, [sp, #44]	; 0x2c
 8009bb0:	7a9a      	ldrb	r2, [r3, #10]
 8009bb2:	920a      	str	r2, [sp, #40]	; 0x28
 8009bb4:	7a5a      	ldrb	r2, [r3, #9]
 8009bb6:	9209      	str	r2, [sp, #36]	; 0x24
 8009bb8:	7a1a      	ldrb	r2, [r3, #8]
 8009bba:	9208      	str	r2, [sp, #32]
 8009bbc:	79da      	ldrb	r2, [r3, #7]
 8009bbe:	9207      	str	r2, [sp, #28]
 8009bc0:	799a      	ldrb	r2, [r3, #6]
 8009bc2:	9206      	str	r2, [sp, #24]
 8009bc4:	795a      	ldrb	r2, [r3, #5]
 8009bc6:	9205      	str	r2, [sp, #20]
 8009bc8:	791a      	ldrb	r2, [r3, #4]
 8009bca:	9204      	str	r2, [sp, #16]
 8009bcc:	78da      	ldrb	r2, [r3, #3]
 8009bce:	9203      	str	r2, [sp, #12]
 8009bd0:	789a      	ldrb	r2, [r3, #2]
 8009bd2:	9202      	str	r2, [sp, #8]
 8009bd4:	785b      	ldrb	r3, [r3, #1]
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	f245 0388 	movw	r3, #20616	; 0x5088
 8009bdc:	f6c0 0301 	movt	r3, #2049	; 0x801
 8009be0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8009be4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	f644 63f0 	movw	r3, #20208	; 0x4ef0
 8009bf0:	f6c0 0301 	movt	r3, #2049	; 0x801
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	2002      	movs	r0, #2
 8009bfa:	f00a fb17 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
                return;
 8009bfe:	e7c8      	b.n	8009b92 <PrintKey+0x28>

08009c00 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 8009c00:	2b0b      	cmp	r3, #11
 8009c02:	d80a      	bhi.n	8009c1a <SecureElementComputeAesCmac+0x1a>
{
 8009c04:	b500      	push	{lr}
 8009c06:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8009c08:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009c0c:	f8cd c000 	str.w	ip, [sp]
 8009c10:	f7ff ff2d 	bl	8009a6e <ComputeCmac>
}
 8009c14:	b003      	add	sp, #12
 8009c16:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8009c1a:	2003      	movs	r0, #3
}
 8009c1c:	4770      	bx	lr

08009c1e <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 8009c1e:	b190      	cbz	r0, 8009c46 <SecureElementVerifyAesCmac+0x28>
{
 8009c20:	b510      	push	{r4, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	468c      	mov	ip, r1
 8009c26:	4614      	mov	r4, r2
 8009c28:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8009c2e:	aa03      	add	r2, sp, #12
 8009c30:	9200      	str	r2, [sp, #0]
 8009c32:	4662      	mov	r2, ip
 8009c34:	f7ff ff1b 	bl	8009a6e <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8009c38:	b918      	cbnz	r0, 8009c42 <SecureElementVerifyAesCmac+0x24>
        return SECURE_ELEMENT_ERROR_NPE;
 8009c3a:	9803      	ldr	r0, [sp, #12]
 8009c3c:	1b00      	subs	r0, r0, r4
 8009c3e:	bf18      	it	ne
 8009c40:	2001      	movne	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8009c42:	b004      	add	sp, #16
 8009c44:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8009c46:	2002      	movs	r0, #2
}
 8009c48:	4770      	bx	lr

08009c4a <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 8009c4a:	b3b0      	cbz	r0, 8009cba <SecureElementAesEncrypt+0x70>
{
 8009c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c50:	b0be      	sub	sp, #248	; 0xf8
 8009c52:	460d      	mov	r5, r1
 8009c54:	4690      	mov	r8, r2
 8009c56:	461e      	mov	r6, r3
 8009c58:	4607      	mov	r7, r0
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 8009c5a:	b383      	cbz	r3, 8009cbe <SecureElementAesEncrypt+0x74>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 8009c5c:	f011 040f 	ands.w	r4, r1, #15
 8009c60:	d12f      	bne.n	8009cc2 <SecureElementAesEncrypt+0x78>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8009c62:	22f0      	movs	r2, #240	; 0xf0
 8009c64:	2100      	movs	r1, #0
 8009c66:	a801      	add	r0, sp, #4
 8009c68:	f007 f98a 	bl	8010f80 <memset1>
        if( SeNvm->KeyList[i].KeyID == keyID )
 8009c6c:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8009c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009c74:	6818      	ldr	r0, [r3, #0]
 8009c76:	4684      	mov	ip, r0
 8009c78:	f89c e018 	ldrb.w	lr, [ip, #24]
 8009c7c:	45c6      	cmp	lr, r8
 8009c7e:	d006      	beq.n	8009c8e <SecureElementAesEncrypt+0x44>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009c80:	3401      	adds	r4, #1
 8009c82:	f10c 0c11 	add.w	ip, ip, #17
 8009c86:	2c0b      	cmp	r4, #11
 8009c88:	d1f6      	bne.n	8009c78 <SecureElementAesEncrypt+0x2e>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8009c8a:	2003      	movs	r0, #3
 8009c8c:	e01a      	b.n	8009cc4 <SecureElementAesEncrypt+0x7a>
    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 8009c8e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8009c92:	3419      	adds	r4, #25
 8009c94:	aa01      	add	r2, sp, #4
 8009c96:	2110      	movs	r1, #16
 8009c98:	4420      	add	r0, r4
 8009c9a:	f7ff fcde 	bl	800965a <lorawan_aes_set_key>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 8009c9e:	2000      	movs	r0, #0
        while( size != 0 )
 8009ca0:	b185      	cbz	r5, 8009cc4 <SecureElementAesEncrypt+0x7a>
 8009ca2:	462c      	mov	r4, r5
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 8009ca4:	1b28      	subs	r0, r5, r4
 8009ca6:	b2c0      	uxtb	r0, r0
 8009ca8:	aa01      	add	r2, sp, #4
 8009caa:	1831      	adds	r1, r6, r0
 8009cac:	4438      	add	r0, r7
 8009cae:	f7ff fd60 	bl	8009772 <lorawan_aes_encrypt>
        while( size != 0 )
 8009cb2:	3c10      	subs	r4, #16
 8009cb4:	d1f6      	bne.n	8009ca4 <SecureElementAesEncrypt+0x5a>
    return retval;
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	e004      	b.n	8009cc4 <SecureElementAesEncrypt+0x7a>
        return SECURE_ELEMENT_ERROR_NPE;
 8009cba:	2002      	movs	r0, #2
}
 8009cbc:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 8009cbe:	2002      	movs	r0, #2
 8009cc0:	e000      	b.n	8009cc4 <SecureElementAesEncrypt+0x7a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8009cc2:	2005      	movs	r0, #5
}
 8009cc4:	b03e      	add	sp, #248	; 0xf8
 8009cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009cca <SecureElementSetKey>:
{
 8009cca:	b530      	push	{r4, r5, lr}
 8009ccc:	b085      	sub	sp, #20
    if( key == NULL )
 8009cce:	2900      	cmp	r1, #0
 8009cd0:	d038      	beq.n	8009d44 <SecureElementSetKey+0x7a>
 8009cd2:	468c      	mov	ip, r1
        if( SeNvm->KeyList[i].KeyID == keyID )
 8009cd4:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8009cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009cdc:	681d      	ldr	r5, [r3, #0]
 8009cde:	462b      	mov	r3, r5
 8009ce0:	2400      	movs	r4, #0
 8009ce2:	7e1a      	ldrb	r2, [r3, #24]
 8009ce4:	4282      	cmp	r2, r0
 8009ce6:	d007      	beq.n	8009cf8 <SecureElementSetKey+0x2e>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009ce8:	3401      	adds	r4, #1
 8009cea:	3311      	adds	r3, #17
 8009cec:	2c0b      	cmp	r4, #11
 8009cee:	d1f8      	bne.n	8009ce2 <SecureElementSetKey+0x18>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8009cf0:	2503      	movs	r5, #3
}
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	b005      	add	sp, #20
 8009cf6:	bd30      	pop	{r4, r5, pc}
            if( keyID == MC_KEY_0 )
 8009cf8:	280d      	cmp	r0, #13
 8009cfa:	d009      	beq.n	8009d10 <SecureElementSetKey+0x46>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8009cfc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8009d00:	3419      	adds	r4, #25
 8009d02:	2210      	movs	r2, #16
 8009d04:	4661      	mov	r1, ip
 8009d06:	1928      	adds	r0, r5, r4
 8009d08:	f007 f920 	bl	8010f4c <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8009d0c:	2500      	movs	r5, #0
 8009d0e:	e7f0      	b.n	8009cf2 <SecureElementSetKey+0x28>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 8009d10:	2300      	movs	r3, #0
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	9301      	str	r3, [sp, #4]
 8009d16:	9302      	str	r3, [sp, #8]
 8009d18:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 8009d1a:	466b      	mov	r3, sp
 8009d1c:	220c      	movs	r2, #12
 8009d1e:	2110      	movs	r1, #16
 8009d20:	4660      	mov	r0, ip
 8009d22:	f7ff ff92 	bl	8009c4a <SecureElementAesEncrypt>
 8009d26:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8009d28:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8009d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009d30:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8009d34:	3419      	adds	r4, #25
 8009d36:	6818      	ldr	r0, [r3, #0]
 8009d38:	2210      	movs	r2, #16
 8009d3a:	4669      	mov	r1, sp
 8009d3c:	4420      	add	r0, r4
 8009d3e:	f007 f905 	bl	8010f4c <memcpy1>
                return retval;
 8009d42:	e7d6      	b.n	8009cf2 <SecureElementSetKey+0x28>
        return SECURE_ELEMENT_ERROR_NPE;
 8009d44:	2502      	movs	r5, #2
 8009d46:	e7d4      	b.n	8009cf2 <SecureElementSetKey+0x28>

08009d48 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 8009d48:	b1d0      	cbz	r0, 8009d80 <SecureElementDeriveAndStoreKey+0x38>
{
 8009d4a:	b510      	push	{r4, lr}
 8009d4c:	b084      	sub	sp, #16
 8009d4e:	4614      	mov	r4, r2
 8009d50:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 8009d52:	2a0c      	cmp	r2, #12
 8009d54:	d101      	bne.n	8009d5a <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8009d56:	290b      	cmp	r1, #11
 8009d58:	d114      	bne.n	8009d84 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	9301      	str	r3, [sp, #4]
 8009d60:	9302      	str	r3, [sp, #8]
 8009d62:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 8009d64:	466b      	mov	r3, sp
 8009d66:	460a      	mov	r2, r1
 8009d68:	2110      	movs	r1, #16
 8009d6a:	4660      	mov	r0, ip
 8009d6c:	f7ff ff6d 	bl	8009c4a <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8009d70:	b108      	cbz	r0, 8009d76 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8009d72:	b004      	add	sp, #16
 8009d74:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 8009d76:	4669      	mov	r1, sp
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f7ff ffa6 	bl	8009cca <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8009d7e:	e7f8      	b.n	8009d72 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8009d80:	2002      	movs	r0, #2
}
 8009d82:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8009d84:	2003      	movs	r0, #3
 8009d86:	e7f4      	b.n	8009d72 <SecureElementDeriveAndStoreKey+0x2a>

08009d88 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 8009d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8009d8e:	9c07      	ldr	r4, [sp, #28]
 8009d90:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8009d92:	b363      	cbz	r3, 8009dee <SecureElementProcessJoinAccept+0x66>
 8009d94:	461f      	mov	r7, r3
 8009d96:	b364      	cbz	r4, 8009df2 <SecureElementProcessJoinAccept+0x6a>
 8009d98:	b36e      	cbz	r6, 8009df6 <SecureElementProcessJoinAccept+0x6e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8009d9a:	2d21      	cmp	r5, #33	; 0x21
 8009d9c:	d82d      	bhi.n	8009dfa <SecureElementProcessJoinAccept+0x72>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8009d9e:	462a      	mov	r2, r5
 8009da0:	4619      	mov	r1, r3
 8009da2:	4620      	mov	r0, r4
 8009da4:	f007 f8d2 	bl	8010f4c <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8009da8:	1c63      	adds	r3, r4, #1
 8009daa:	2201      	movs	r2, #1
 8009dac:	1e69      	subs	r1, r5, #1
 8009dae:	18b8      	adds	r0, r7, r2
 8009db0:	f7ff ff4b 	bl	8009c4a <SecureElementAesEncrypt>
 8009db4:	bb18      	cbnz	r0, 8009dfe <SecureElementProcessJoinAccept+0x76>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8009db6:	7ae3      	ldrb	r3, [r4, #11]
 8009db8:	09db      	lsrs	r3, r3, #7
 8009dba:	7033      	strb	r3, [r6, #0]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 8009dbc:	bb0b      	cbnz	r3, 8009e02 <SecureElementProcessJoinAccept+0x7a>
    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 8009dbe:	1963      	adds	r3, r4, r5
 8009dc0:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 8009dc4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8009dc8:	0612      	lsls	r2, r2, #24
 8009dca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009dce:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	f813 1c03 	ldrb.w	r1, [r3, #-3]
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8009dd8:	2301      	movs	r3, #1
 8009dda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009dde:	1f29      	subs	r1, r5, #4
 8009de0:	4620      	mov	r0, r4
 8009de2:	f7ff ff1c 	bl	8009c1e <SecureElementVerifyAesCmac>
        return SECURE_ELEMENT_ERROR_NPE;
 8009de6:	3800      	subs	r0, #0
 8009de8:	bf18      	it	ne
 8009dea:	2001      	movne	r0, #1
 8009dec:	e006      	b.n	8009dfc <SecureElementProcessJoinAccept+0x74>
 8009dee:	2002      	movs	r0, #2
 8009df0:	e004      	b.n	8009dfc <SecureElementProcessJoinAccept+0x74>
 8009df2:	2002      	movs	r0, #2
 8009df4:	e002      	b.n	8009dfc <SecureElementProcessJoinAccept+0x74>
 8009df6:	2002      	movs	r0, #2
 8009df8:	e000      	b.n	8009dfc <SecureElementProcessJoinAccept+0x74>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8009dfa:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8009dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8009dfe:	2007      	movs	r0, #7
 8009e00:	e7fc      	b.n	8009dfc <SecureElementProcessJoinAccept+0x74>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8009e02:	2004      	movs	r0, #4
 8009e04:	e7fa      	b.n	8009dfc <SecureElementProcessJoinAccept+0x74>

08009e06 <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
    if( randomNum == NULL )
 8009e06:	b150      	cbz	r0, 8009e1e <SecureElementRandomNumber+0x18>
{
 8009e08:	b510      	push	{r4, lr}
 8009e0a:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 8009e0c:	f245 23d0 	movw	r3, #21200	; 0x52d0
 8009e10:	f6c0 0301 	movt	r3, #2049	; 0x801
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	4798      	blx	r3
 8009e18:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 8009e1a:	2000      	movs	r0, #0
}
 8009e1c:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8009e1e:	2002      	movs	r0, #2
}
 8009e20:	4770      	bx	lr

08009e22 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8009e22:	b158      	cbz	r0, 8009e3c <SecureElementSetDevEui+0x1a>
{
 8009e24:	b508      	push	{r3, lr}
 8009e26:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 8009e28:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8009e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e30:	2208      	movs	r2, #8
 8009e32:	6818      	ldr	r0, [r3, #0]
 8009e34:	f007 f88a 	bl	8010f4c <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8009e38:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8009e3a:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8009e3c:	2002      	movs	r0, #2
}
 8009e3e:	4770      	bx	lr

08009e40 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8009e40:	b150      	cbz	r0, 8009e58 <SecureElementGetDevEui+0x18>
{
 8009e42:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 8009e44:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8009e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e4c:	2208      	movs	r2, #8
 8009e4e:	6819      	ldr	r1, [r3, #0]
 8009e50:	f007 f87c 	bl	8010f4c <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8009e54:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8009e56:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8009e58:	2002      	movs	r0, #2
}
 8009e5a:	4770      	bx	lr

08009e5c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8009e5c:	b160      	cbz	r0, 8009e78 <SecureElementSetJoinEui+0x1c>
{
 8009e5e:	b508      	push	{r3, lr}
 8009e60:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 8009e62:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8009e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e6a:	6818      	ldr	r0, [r3, #0]
 8009e6c:	2208      	movs	r2, #8
 8009e6e:	4410      	add	r0, r2
 8009e70:	f007 f86c 	bl	8010f4c <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8009e74:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8009e76:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8009e78:	2002      	movs	r0, #2
}
 8009e7a:	4770      	bx	lr

08009e7c <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8009e7c:	b158      	cbz	r0, 8009e96 <SecureElementGetJoinEui+0x1a>
{
 8009e7e:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8009e80:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8009e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e88:	6819      	ldr	r1, [r3, #0]
 8009e8a:	2208      	movs	r2, #8
 8009e8c:	4411      	add	r1, r2
 8009e8e:	f007 f85d 	bl	8010f4c <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8009e92:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8009e94:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8009e96:	2002      	movs	r0, #2
}
 8009e98:	4770      	bx	lr

08009e9a <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8009e9a:	2802      	cmp	r0, #2
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 8009e9c:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8009ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	bf0c      	ite	eq
 8009ea8:	6119      	streq	r1, [r3, #16]
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8009eaa:	6159      	strne	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8009eac:	2000      	movs	r0, #0
 8009eae:	4770      	bx	lr

08009eb0 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 8009eb0:	b159      	cbz	r1, 8009eca <SecureElementGetDevAddr+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 8009eb2:	2802      	cmp	r0, #2
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 8009eb4:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8009eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	bf0c      	ite	eq
 8009ec0:	691b      	ldreq	r3, [r3, #16]
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 8009ec2:	695b      	ldrne	r3, [r3, #20]
 8009ec4:	600b      	str	r3, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 8009ec6:	2000      	movs	r0, #0
 8009ec8:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 8009eca:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8009ecc:	4770      	bx	lr

08009ece <SecureElementInitMcuID>:
{
 8009ece:	b530      	push	{r4, r5, lr}
 8009ed0:	b085      	sub	sp, #20
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	460d      	mov	r5, r1
    uint32_t devAddrABP = 0;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 8009eda:	a802      	add	r0, sp, #8
 8009edc:	f7ff ffb0 	bl	8009e40 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 8009ee0:	a901      	add	r1, sp, #4
 8009ee2:	2001      	movs	r0, #1
 8009ee4:	f7ff ffe4 	bl	8009eb0 <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 8009ee8:	b16c      	cbz	r4, 8009f06 <SecureElementInitMcuID+0x38>
 8009eea:	f10d 0307 	add.w	r3, sp, #7
 8009eee:	f10d 0c0f 	add.w	ip, sp, #15
            if( devEui[index] != 0 )
 8009ef2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8009ef6:	b932      	cbnz	r2, 8009f06 <SecureElementInitMcuID+0x38>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8009ef8:	4563      	cmp	r3, ip
 8009efa:	d1fa      	bne.n	8009ef2 <SecureElementInitMcuID+0x24>
            seGetUniqueId( devEui );
 8009efc:	a802      	add	r0, sp, #8
 8009efe:	47a0      	blx	r4
            SecureElementSetDevEui( devEui );
 8009f00:	a802      	add	r0, sp, #8
 8009f02:	f7ff ff8e 	bl	8009e22 <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 8009f06:	b155      	cbz	r5, 8009f1e <SecureElementInitMcuID+0x50>
 8009f08:	9b01      	ldr	r3, [sp, #4]
 8009f0a:	b943      	cbnz	r3, 8009f1e <SecureElementInitMcuID+0x50>
        seGetDevAddr( &devAddrABP );
 8009f0c:	a801      	add	r0, sp, #4
 8009f0e:	47a8      	blx	r5
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8009f10:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8009f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	9a01      	ldr	r2, [sp, #4]
 8009f1c:	615a      	str	r2, [r3, #20]
}
 8009f1e:	2000      	movs	r0, #0
 8009f20:	b005      	add	sp, #20
 8009f22:	bd30      	pop	{r4, r5, pc}

08009f24 <PrintIds>:
{
 8009f24:	b530      	push	{r4, r5, lr}
 8009f26:	b08f      	sub	sp, #60	; 0x3c
 8009f28:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 8009f2a:	2400      	movs	r4, #0
 8009f2c:	9409      	str	r4, [sp, #36]	; 0x24
    SecureElementGetDevEui( devEui );
 8009f2e:	a80a      	add	r0, sp, #40	; 0x28
 8009f30:	f7ff ff86 	bl	8009e40 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 8009f34:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8009f38:	9307      	str	r3, [sp, #28]
 8009f3a:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8009f3e:	9306      	str	r3, [sp, #24]
 8009f40:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8009f44:	9305      	str	r3, [sp, #20]
 8009f46:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8009f4a:	9304      	str	r3, [sp, #16]
 8009f4c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8009f50:	9303      	str	r3, [sp, #12]
 8009f52:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8009f56:	9302      	str	r3, [sp, #8]
 8009f58:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	f644 734c 	movw	r3, #20300	; 0x4f4c
 8009f68:	f6c0 0301 	movt	r3, #2049	; 0x801
 8009f6c:	4622      	mov	r2, r4
 8009f6e:	4621      	mov	r1, r4
 8009f70:	2002      	movs	r0, #2
 8009f72:	f00a f95b 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 8009f76:	a80c      	add	r0, sp, #48	; 0x30
 8009f78:	f7ff ff80 	bl	8009e7c <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 8009f7c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8009f80:	9307      	str	r3, [sp, #28]
 8009f82:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8009f86:	9306      	str	r3, [sp, #24]
 8009f88:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 8009f8c:	9305      	str	r3, [sp, #20]
 8009f8e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8009f92:	9304      	str	r3, [sp, #16]
 8009f94:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009f98:	9303      	str	r3, [sp, #12]
 8009f9a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8009f9e:	9302      	str	r3, [sp, #8]
 8009fa0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8009fa4:	9301      	str	r3, [sp, #4]
 8009fa6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8009faa:	9300      	str	r3, [sp, #0]
 8009fac:	f644 738c 	movw	r3, #20364	; 0x4f8c
 8009fb0:	f6c0 0301 	movt	r3, #2049	; 0x801
 8009fb4:	4622      	mov	r2, r4
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	2002      	movs	r0, #2
 8009fba:	f00a f937 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 8009fbe:	a909      	add	r1, sp, #36	; 0x24
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	f7ff ff75 	bl	8009eb0 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8009fc6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009fca:	9303      	str	r3, [sp, #12]
 8009fcc:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8009fd0:	9302      	str	r3, [sp, #8]
 8009fd2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8009fd6:	9301      	str	r3, [sp, #4]
 8009fd8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	f644 73cc 	movw	r3, #20428	; 0x4fcc
 8009fe2:	f6c0 0301 	movt	r3, #2049	; 0x801
 8009fe6:	4622      	mov	r2, r4
 8009fe8:	4621      	mov	r1, r4
 8009fea:	2002      	movs	r0, #2
 8009fec:	f00a f91e 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
}
 8009ff0:	b00f      	add	sp, #60	; 0x3c
 8009ff2:	bd30      	pop	{r4, r5, pc}

08009ff4 <SecureElementPrintKeys>:
{
 8009ff4:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	f7ff fdb7 	bl	8009b6a <PrintKey>
    PrintKey( NWK_KEY );
 8009ffc:	2001      	movs	r0, #1
 8009ffe:	f7ff fdb4 	bl	8009b6a <PrintKey>
    PrintKey( APP_S_KEY );
 800a002:	2009      	movs	r0, #9
 800a004:	f7ff fdb1 	bl	8009b6a <PrintKey>
    PrintKey( NWK_S_KEY );
 800a008:	2008      	movs	r0, #8
 800a00a:	f7ff fdae 	bl	8009b6a <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 800a00e:	2000      	movs	r0, #0
 800a010:	f7ff ff88 	bl	8009f24 <PrintIds>
}
 800a014:	2000      	movs	r0, #0
 800a016:	bd08      	pop	{r3, pc}

0800a018 <SecureElementPrintSessionKeys>:
{
 800a018:	b510      	push	{r4, lr}
 800a01a:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 800a01c:	200b      	movs	r0, #11
 800a01e:	f7ff fda4 	bl	8009b6a <PrintKey>
    PrintKey( MC_KE_KEY );
 800a022:	200c      	movs	r0, #12
 800a024:	f7ff fda1 	bl	8009b6a <PrintKey>
    PrintKey( APP_S_KEY );
 800a028:	2009      	movs	r0, #9
 800a02a:	f7ff fd9e 	bl	8009b6a <PrintKey>
    PrintKey( NWK_S_KEY );
 800a02e:	2008      	movs	r0, #8
 800a030:	f7ff fd9b 	bl	8009b6a <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 800a034:	200a      	movs	r0, #10
 800a036:	f7ff fd98 	bl	8009b6a <PrintKey>
    PrintIds( mode );
 800a03a:	4620      	mov	r0, r4
 800a03c:	f7ff ff72 	bl	8009f24 <PrintIds>
}
 800a040:	2000      	movs	r0, #0
 800a042:	bd10      	pop	{r4, pc}

0800a044 <LmHandlerPackageIsTxPending>:
        }
    }
}

static bool LmHandlerPackageIsTxPending( void )
{
 800a044:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a046:	f640 05bc 	movw	r5, #2236	; 0x8bc
 800a04a:	f2c2 0500 	movt	r5, #8192	; 0x2000
{
 800a04e:	2401      	movs	r4, #1
 800a050:	e004      	b.n	800a05c <LmHandlerPackageIsTxPending+0x18>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a052:	b263      	sxtb	r3, r4
 800a054:	2b04      	cmp	r3, #4
 800a056:	dc0d      	bgt.n	800a074 <LmHandlerPackageIsTxPending+0x30>
 800a058:	3401      	adds	r4, #1
 800a05a:	b2e4      	uxtb	r4, r4
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 800a05c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a060:	2b00      	cmp	r3, #0
 800a062:	d0f6      	beq.n	800a052 <LmHandlerPackageIsTxPending+0xe>
 800a064:	2c01      	cmp	r4, #1
 800a066:	d0f7      	beq.n	800a058 <LmHandlerPackageIsTxPending+0x14>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	4798      	blx	r3
 800a06c:	4603      	mov	r3, r0
 800a06e:	2800      	cmp	r0, #0
 800a070:	d0ef      	beq.n	800a052 <LmHandlerPackageIsTxPending+0xe>
 800a072:	e000      	b.n	800a076 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
            }
        }
    }
    return false;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	bd38      	pop	{r3, r4, r5, pc}

0800a07a <LmHandlerDeviceTimeReq>:
{
 800a07a:	b500      	push	{lr}
 800a07c:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 800a07e:	230a      	movs	r3, #10
 800a080:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800a084:	a801      	add	r0, sp, #4
 800a086:	f003 ffe5 	bl	800e054 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800a08a:	f640 03b4 	movw	r3, #2228	; 0x8b4
 800a08e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a092:	9a05      	ldr	r2, [sp, #20]
 800a094:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 800a096:	3800      	subs	r0, #0
 800a098:	bf18      	it	ne
 800a09a:	2001      	movne	r0, #1
}
 800a09c:	4240      	negs	r0, r0
 800a09e:	b007      	add	sp, #28
 800a0a0:	f85d fb04 	ldr.w	pc, [sp], #4

0800a0a4 <MlmeIndication>:
{
 800a0a4:	b570      	push	{r4, r5, r6, lr}
 800a0a6:	4605      	mov	r5, r0
    RxParams.IsMcpsIndication = 0;
 800a0a8:	f240 0398 	movw	r3, #152	; 0x98
 800a0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800a0b4:	7842      	ldrb	r2, [r0, #1]
 800a0b6:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800a0b8:	7882      	ldrb	r2, [r0, #2]
 800a0ba:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800a0bc:	880a      	ldrh	r2, [r1, #0]
 800a0be:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800a0c0:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800a0c4:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800a0c6:	78ca      	ldrb	r2, [r1, #3]
 800a0c8:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800a0ca:	6842      	ldr	r2, [r0, #4]
 800a0cc:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800a0ce:	f640 03b8 	movw	r3, #2232	; 0x8b8
 800a0d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0da:	b152      	cbz	r2, 800a0f2 <MlmeIndication+0x4e>
 800a0dc:	7803      	ldrb	r3, [r0, #0]
 800a0de:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800a0e2:	2b0b      	cmp	r3, #11
 800a0e4:	d005      	beq.n	800a0f2 <MlmeIndication+0x4e>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800a0e6:	f240 0198 	movw	r1, #152	; 0x98
 800a0ea:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	4790      	blx	r2
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a0f2:	f640 04bc 	movw	r4, #2236	; 0x8bc
 800a0f6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800a0fa:	f104 0614 	add.w	r6, r4, #20
 800a0fe:	e001      	b.n	800a104 <MlmeIndication+0x60>
 800a100:	42a6      	cmp	r6, r4
 800a102:	d009      	beq.n	800a118 <MlmeIndication+0x74>
        if( LmHandlerPackages[i] != NULL )
 800a104:	f854 3b04 	ldr.w	r3, [r4], #4
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d0f9      	beq.n	800a100 <MlmeIndication+0x5c>
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800a10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d0f6      	beq.n	800a100 <MlmeIndication+0x5c>
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800a112:	4628      	mov	r0, r5
 800a114:	4798      	blx	r3
 800a116:	e7f3      	b.n	800a100 <MlmeIndication+0x5c>
}
 800a118:	bd70      	pop	{r4, r5, r6, pc}

0800a11a <McpsConfirm>:
{
 800a11a:	b570      	push	{r4, r5, r6, lr}
 800a11c:	4605      	mov	r5, r0
    TxParams.IsMcpsConfirm = 1;
 800a11e:	f240 03ac 	movw	r3, #172	; 0xac
 800a122:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a126:	2201      	movs	r2, #1
 800a128:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800a12a:	7842      	ldrb	r2, [r0, #1]
 800a12c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800a12e:	7882      	ldrb	r2, [r0, #2]
 800a130:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800a132:	68c2      	ldr	r2, [r0, #12]
 800a134:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800a136:	f990 2003 	ldrsb.w	r2, [r0, #3]
 800a13a:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800a13c:	6902      	ldr	r2, [r0, #16]
 800a13e:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800a140:	7902      	ldrb	r2, [r0, #4]
 800a142:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800a144:	f640 03b8 	movw	r3, #2232	; 0x8b8
 800a148:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a150:	b123      	cbz	r3, 800a15c <McpsConfirm+0x42>
        LmHandlerCallbacks->OnTxData( &TxParams );
 800a152:	f240 00ac 	movw	r0, #172	; 0xac
 800a156:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a15a:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a15c:	f640 04bc 	movw	r4, #2236	; 0x8bc
 800a160:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800a164:	f104 0614 	add.w	r6, r4, #20
 800a168:	e001      	b.n	800a16e <McpsConfirm+0x54>
 800a16a:	42a6      	cmp	r6, r4
 800a16c:	d009      	beq.n	800a182 <McpsConfirm+0x68>
        if( LmHandlerPackages[i] != NULL )
 800a16e:	f854 3b04 	ldr.w	r3, [r4], #4
 800a172:	2b00      	cmp	r3, #0
 800a174:	d0f9      	beq.n	800a16a <McpsConfirm+0x50>
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800a176:	69db      	ldr	r3, [r3, #28]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d0f6      	beq.n	800a16a <McpsConfirm+0x50>
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800a17c:	4628      	mov	r0, r5
 800a17e:	4798      	blx	r3
 800a180:	e7f3      	b.n	800a16a <McpsConfirm+0x50>
}
 800a182:	bd70      	pop	{r4, r5, r6, pc}

0800a184 <LmHandlerProcess>:
{
 800a184:	b570      	push	{r4, r5, r6, lr}
    LoRaMacProcess( );
 800a186:	f002 f814 	bl	800c1b2 <LoRaMacProcess>

static void LmHandlerPackagesProcess( void )
{
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a18a:	f640 05bc 	movw	r5, #2236	; 0x8bc
 800a18e:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800a192:	2400      	movs	r4, #0
 800a194:	e009      	b.n	800a1aa <LmHandlerProcess+0x26>
        return LmHandlerPackages[id]->IsInitialized( );
 800a196:	4798      	blx	r3
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800a198:	b118      	cbz	r0, 800a1a2 <LmHandlerProcess+0x1e>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
        {
            LmHandlerPackages[i]->Process( );
 800a19a:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800a19e:	695b      	ldr	r3, [r3, #20]
 800a1a0:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a1a2:	3401      	adds	r4, #1
 800a1a4:	b264      	sxtb	r4, r4
 800a1a6:	2c05      	cmp	r4, #5
 800a1a8:	d00f      	beq.n	800a1ca <LmHandlerProcess+0x46>
        if( ( LmHandlerPackages[i] != NULL ) &&
 800a1aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d0f7      	beq.n	800a1a2 <LmHandlerProcess+0x1e>
 800a1b2:	695b      	ldr	r3, [r3, #20]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d0f4      	beq.n	800a1a2 <LmHandlerProcess+0x1e>
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800a1b8:	b2e3      	uxtb	r3, r4
 800a1ba:	2b04      	cmp	r3, #4
 800a1bc:	d8f1      	bhi.n	800a1a2 <LmHandlerProcess+0x1e>
 800a1be:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1e6      	bne.n	800a196 <LmHandlerProcess+0x12>
 800a1c8:	e7eb      	b.n	800a1a2 <LmHandlerProcess+0x1e>
    if( LmHandlerPackageIsTxPending( ) == true )
 800a1ca:	f7ff ff3b 	bl	800a044 <LmHandlerPackageIsTxPending>
}
 800a1ce:	bd70      	pop	{r4, r5, r6, pc}

0800a1d0 <LmHandlerGetDutyCycleWaitTime>:
    return DutyCycleWaitTime;
 800a1d0:	f640 03b4 	movw	r3, #2228	; 0x8b4
 800a1d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 800a1d8:	6818      	ldr	r0, [r3, #0]
 800a1da:	4770      	bx	lr

0800a1dc <LmHandlerJoinStatus>:
{
 800a1dc:	b500      	push	{lr}
 800a1de:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800a1e6:	4668      	mov	r0, sp
 800a1e8:	f003 fa70 	bl	800d6cc <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 800a1ec:	b938      	cbnz	r0, 800a1fe <LmHandlerJoinStatus+0x22>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a1ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
            return LORAMAC_HANDLER_RESET;
 800a1f2:	3800      	subs	r0, #0
 800a1f4:	bf18      	it	ne
 800a1f6:	2001      	movne	r0, #1
}
 800a1f8:	b00b      	add	sp, #44	; 0x2c
 800a1fa:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_RESET;
 800a1fe:	2000      	movs	r0, #0
 800a200:	e7fa      	b.n	800a1f8 <LmHandlerJoinStatus+0x1c>

0800a202 <LmHandlerRequestClass>:
{
 800a202:	b510      	push	{r4, lr}
 800a204:	b08a      	sub	sp, #40	; 0x28
 800a206:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 800a208:	f001 ffb1 	bl	800c16e <LoRaMacIsBusy>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	d13d      	bne.n	800a28c <LmHandlerRequestClass+0x8a>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800a210:	f7ff ffe4 	bl	800a1dc <LmHandlerJoinStatus>
 800a214:	2801      	cmp	r0, #1
 800a216:	d13c      	bne.n	800a292 <LmHandlerRequestClass+0x90>
    mibReq.Type = MIB_DEVICE_CLASS;
 800a218:	2300      	movs	r3, #0
 800a21a:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a21e:	4668      	mov	r0, sp
 800a220:	f003 fa54 	bl	800d6cc <LoRaMacMibGetRequestConfirm>
 800a224:	bbc0      	cbnz	r0, 800a298 <LmHandlerRequestClass+0x96>
    currentClass = mibReq.Param.Class;
 800a226:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 800a22a:	42a3      	cmp	r3, r4
 800a22c:	d037      	beq.n	800a29e <LmHandlerRequestClass+0x9c>
        switch( newClass )
 800a22e:	2c01      	cmp	r4, #1
 800a230:	d037      	beq.n	800a2a2 <LmHandlerRequestClass+0xa0>
 800a232:	2c02      	cmp	r4, #2
 800a234:	d017      	beq.n	800a266 <LmHandlerRequestClass+0x64>
 800a236:	b114      	cbz	r4, 800a23e <LmHandlerRequestClass+0x3c>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a238:	2000      	movs	r0, #0
}
 800a23a:	b00a      	add	sp, #40	; 0x28
 800a23c:	bd10      	pop	{r4, pc}
                    if( currentClass != CLASS_A )
 800a23e:	b90b      	cbnz	r3, 800a244 <LmHandlerRequestClass+0x42>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a240:	2000      	movs	r0, #0
 800a242:	e7fa      	b.n	800a23a <LmHandlerRequestClass+0x38>
                        mibReq.Param.Class = newClass;
 800a244:	2300      	movs	r3, #0
 800a246:	f88d 3004 	strb.w	r3, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800a24a:	4668      	mov	r0, sp
 800a24c:	f003 fbf1 	bl	800da32 <LoRaMacMibSetRequestConfirm>
 800a250:	bb50      	cbnz	r0, 800a2a8 <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800a252:	f640 03b8 	movw	r3, #2232	; 0x8b8
 800a256:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a25e:	b333      	cbz	r3, 800a2ae <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800a260:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a262:	2000      	movs	r0, #0
 800a264:	e7e9      	b.n	800a23a <LmHandlerRequestClass+0x38>
                    if( currentClass != CLASS_A )
 800a266:	bb23      	cbnz	r3, 800a2b2 <LmHandlerRequestClass+0xb0>
                        mibReq.Param.Class = newClass;
 800a268:	2302      	movs	r3, #2
 800a26a:	f88d 3004 	strb.w	r3, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800a26e:	4668      	mov	r0, sp
 800a270:	f003 fbdf 	bl	800da32 <LoRaMacMibSetRequestConfirm>
 800a274:	bb00      	cbnz	r0, 800a2b8 <LmHandlerRequestClass+0xb6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800a276:	f640 03b8 	movw	r3, #2232	; 0x8b8
 800a27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a282:	b1e3      	cbz	r3, 800a2be <LmHandlerRequestClass+0xbc>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800a284:	2002      	movs	r0, #2
 800a286:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a288:	2000      	movs	r0, #0
 800a28a:	e7d6      	b.n	800a23a <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800a28c:	f06f 0001 	mvn.w	r0, #1
 800a290:	e7d3      	b.n	800a23a <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800a292:	f06f 0002 	mvn.w	r0, #2
 800a296:	e7d0      	b.n	800a23a <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_ERROR;
 800a298:	f04f 30ff 	mov.w	r0, #4294967295
 800a29c:	e7cd      	b.n	800a23a <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a29e:	2000      	movs	r0, #0
 800a2a0:	e7cb      	b.n	800a23a <LmHandlerRequestClass+0x38>
        switch( newClass )
 800a2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a6:	e7c8      	b.n	800a23a <LmHandlerRequestClass+0x38>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800a2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ac:	e7c5      	b.n	800a23a <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	e7c3      	b.n	800a23a <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800a2b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b6:	e7c0      	b.n	800a23a <LmHandlerRequestClass+0x38>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800a2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2bc:	e7bd      	b.n	800a23a <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a2be:	2000      	movs	r0, #0
 800a2c0:	e7bb      	b.n	800a23a <LmHandlerRequestClass+0x38>

0800a2c2 <LmHandlerJoin>:
{
 800a2c2:	b530      	push	{r4, r5, lr}
 800a2c4:	b091      	sub	sp, #68	; 0x44
    mlmeReq.Type = MLME_JOIN;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800a2cc:	f640 03d0 	movw	r3, #2256	; 0x8d0
 800a2d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a2d4:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800a2d8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800a2dc:	f993 4005 	ldrsb.w	r4, [r3, #5]
 800a2e0:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 800a2e4:	2802      	cmp	r0, #2
 800a2e6:	d05c      	beq.n	800a3a2 <LmHandlerJoin+0xe0>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800a2e8:	2501      	movs	r5, #1
 800a2ea:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800a2ee:	f240 0380 	movw	r3, #128	; 0x80
 800a2f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a2f6:	71dd      	strb	r5, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800a2f8:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800a2fa:	715c      	strb	r4, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800a2fc:	2000      	movs	r0, #0
 800a2fe:	7198      	strb	r0, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800a300:	7219      	strb	r1, [r3, #8]
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800a302:	231e      	movs	r3, #30
 800a304:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800a308:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800a30c:	a801      	add	r0, sp, #4
 800a30e:	f003 fb90 	bl	800da32 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800a312:	231f      	movs	r3, #31
 800a314:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800a318:	f640 04d0 	movw	r4, #2256	; 0x8d0
 800a31c:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800a320:	7923      	ldrb	r3, [r4, #4]
 800a322:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800a326:	a801      	add	r0, sp, #4
 800a328:	f003 fb83 	bl	800da32 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800a32c:	2321      	movs	r3, #33	; 0x21
 800a32e:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800a332:	7963      	ldrb	r3, [r4, #5]
 800a334:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800a338:	a801      	add	r0, sp, #4
 800a33a:	f003 fb7a 	bl	800da32 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800a33e:	2320      	movs	r3, #32
 800a340:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800a344:	7963      	ldrb	r3, [r4, #5]
 800a346:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800a34a:	a801      	add	r0, sp, #4
 800a34c:	f003 fb71 	bl	800da32 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800a350:	2328      	movs	r3, #40	; 0x28
 800a352:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800a356:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a35a:	f2c0 1300 	movt	r3, #256	; 0x100
 800a35e:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800a360:	a801      	add	r0, sp, #4
 800a362:	f003 fb66 	bl	800da32 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800a366:	f003 f8f7 	bl	800d558 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800a36a:	f88d 5004 	strb.w	r5, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800a36e:	f88d 5008 	strb.w	r5, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800a372:	a801      	add	r0, sp, #4
 800a374:	f003 fb5d 	bl	800da32 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800a378:	f640 03b8 	movw	r3, #2232	; 0x8b8
 800a37c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a384:	b123      	cbz	r3, 800a390 <LmHandlerJoin+0xce>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800a386:	f240 0080 	movw	r0, #128	; 0x80
 800a38a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a38e:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800a390:	f640 03d0 	movw	r3, #2256	; 0x8d0
 800a394:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a398:	7858      	ldrb	r0, [r3, #1]
 800a39a:	f7ff ff32 	bl	800a202 <LmHandlerRequestClass>
}
 800a39e:	b011      	add	sp, #68	; 0x44
 800a3a0:	bd30      	pop	{r4, r5, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800a3a8:	f240 0380 	movw	r3, #128	; 0x80
 800a3ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a3b0:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800a3b2:	7219      	strb	r1, [r3, #8]
        LoRaMacStart();
 800a3b4:	f003 f8d0 	bl	800d558 <LoRaMacStart>
        LoRaMacMlmeRequest( &mlmeReq );
 800a3b8:	a80b      	add	r0, sp, #44	; 0x2c
 800a3ba:	f003 fe4b 	bl	800e054 <LoRaMacMlmeRequest>
 800a3be:	e7ee      	b.n	800a39e <LmHandlerJoin+0xdc>

0800a3c0 <LmHandlerSend>:
{
 800a3c0:	b570      	push	{r4, r5, r6, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	460d      	mov	r5, r1
 800a3c8:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 800a3ca:	f001 fed0 	bl	800c16e <LoRaMacIsBusy>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	f040 8089 	bne.w	800a4e6 <LmHandlerSend+0x126>
    if( LoRaMacIsStopped() == true )
 800a3d4:	f001 fee2 	bl	800c19c <LoRaMacIsStopped>
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	f040 8087 	bne.w	800a4ec <LmHandlerSend+0x12c>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800a3de:	f7ff fefd 	bl	800a1dc <LmHandlerJoinStatus>
 800a3e2:	2801      	cmp	r0, #1
 800a3e4:	d158      	bne.n	800a498 <LmHandlerSend+0xd8>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800a3e6:	f640 03bc 	movw	r3, #2236	; 0x8bc
 800a3ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	4798      	blx	r3
 800a3f4:	b150      	cbz	r0, 800a40c <LmHandlerSend+0x4c>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800a3f6:	7822      	ldrb	r2, [r4, #0]
 800a3f8:	f640 03bc 	movw	r3, #2236	; 0x8bc
 800a3fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	4293      	cmp	r3, r2
 800a406:	d001      	beq.n	800a40c <LmHandlerSend+0x4c>
 800a408:	2a00      	cmp	r2, #0
 800a40a:	d172      	bne.n	800a4f2 <LmHandlerSend+0x132>
    TxParams.MsgType = isTxConfirmed;
 800a40c:	f240 03ac 	movw	r3, #172	; 0xac
 800a410:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a414:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800a416:	3d00      	subs	r5, #0
 800a418:	bf18      	it	ne
 800a41a:	2501      	movne	r5, #1
 800a41c:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800a420:	f640 03d0 	movw	r3, #2256	; 0x8d0
 800a424:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a428:	791b      	ldrb	r3, [r3, #4]
 800a42a:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800a42e:	4669      	mov	r1, sp
 800a430:	7860      	ldrb	r0, [r4, #1]
 800a432:	f003 f8e5 	bl	800d600 <LoRaMacQueryTxPossible>
 800a436:	2800      	cmp	r0, #0
 800a438:	d039      	beq.n	800a4ae <LmHandlerSend+0xee>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800a43a:	2300      	movs	r3, #0
 800a43c:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800a440:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800a442:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800a446:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 800a44a:	f240 03ac 	movw	r3, #172	; 0xac
 800a44e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a452:	f103 0210 	add.w	r2, r3, #16
 800a456:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a45a:	e882 0003 	stmia.w	r2, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800a45e:	f640 02d0 	movw	r2, #2256	; 0x8d0
 800a462:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800a466:	7912      	ldrb	r2, [r2, #4]
 800a468:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800a46a:	4631      	mov	r1, r6
 800a46c:	a801      	add	r0, sp, #4
 800a46e:	f003 ff4b 	bl	800e308 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800a472:	f640 03b4 	movw	r3, #2228	; 0x8b4
 800a476:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a47a:	9a05      	ldr	r2, [sp, #20]
 800a47c:	601a      	str	r2, [r3, #0]
    switch( status )
 800a47e:	2811      	cmp	r0, #17
 800a480:	d82e      	bhi.n	800a4e0 <LmHandlerSend+0x120>
 800a482:	e8df f000 	tbb	[pc, r0]
 800a486:	3922      	.short	0x3922
 800a488:	2d2d2d2d 	.word	0x2d2d2d2d
 800a48c:	2d2d1f2d 	.word	0x2d2d1f2d
 800a490:	2d2d2a2d 	.word	0x2d2d2a2d
 800a494:	27393939 	.word	0x27393939
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800a498:	f240 0380 	movw	r3, #128	; 0x80
 800a49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a4a0:	7a19      	ldrb	r1, [r3, #8]
 800a4a2:	79d8      	ldrb	r0, [r3, #7]
 800a4a4:	f7ff ff0d 	bl	800a2c2 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800a4a8:	f06f 0502 	mvn.w	r5, #2
 800a4ac:	e026      	b.n	800a4fc <LmHandlerSend+0x13c>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800a4ae:	7823      	ldrb	r3, [r4, #0]
 800a4b0:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800a4b4:	7863      	ldrb	r3, [r4, #1]
 800a4b6:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800a4ba:	6863      	ldr	r3, [r4, #4]
 800a4bc:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800a4be:	f04f 35ff 	mov.w	r5, #4294967295
 800a4c2:	e7c2      	b.n	800a44a <LmHandlerSend+0x8a>
    switch( status )
 800a4c4:	f06f 0502 	mvn.w	r5, #2
 800a4c8:	e018      	b.n	800a4fc <LmHandlerSend+0x13c>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800a4ca:	f115 0f07 	cmn.w	r5, #7
 800a4ce:	bf18      	it	ne
 800a4d0:	2500      	movne	r5, #0
 800a4d2:	e013      	b.n	800a4fc <LmHandlerSend+0x13c>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800a4d4:	f06f 0504 	mvn.w	r5, #4
            break;
 800a4d8:	e010      	b.n	800a4fc <LmHandlerSend+0x13c>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800a4da:	f06f 0505 	mvn.w	r5, #5
            break;
 800a4de:	e00d      	b.n	800a4fc <LmHandlerSend+0x13c>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800a4e0:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 800a4e4:	e00a      	b.n	800a4fc <LmHandlerSend+0x13c>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800a4e6:	f06f 0501 	mvn.w	r5, #1
 800a4ea:	e007      	b.n	800a4fc <LmHandlerSend+0x13c>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800a4ec:	f06f 0502 	mvn.w	r5, #2
 800a4f0:	e004      	b.n	800a4fc <LmHandlerSend+0x13c>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800a4f2:	f06f 0503 	mvn.w	r5, #3
 800a4f6:	e001      	b.n	800a4fc <LmHandlerSend+0x13c>
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800a4f8:	f06f 0501 	mvn.w	r5, #1
}
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	b006      	add	sp, #24
 800a500:	bd70      	pop	{r4, r5, r6, pc}

0800a502 <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 800a502:	b170      	cbz	r0, 800a522 <LmHandlerGetCurrentClass+0x20>
{
 800a504:	b510      	push	{r4, lr}
 800a506:	b08a      	sub	sp, #40	; 0x28
 800a508:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 800a50a:	2300      	movs	r3, #0
 800a50c:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a510:	4668      	mov	r0, sp
 800a512:	f003 f8db 	bl	800d6cc <LoRaMacMibGetRequestConfirm>
 800a516:	b938      	cbnz	r0, 800a528 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800a518:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a51c:	7023      	strb	r3, [r4, #0]
}
 800a51e:	b00a      	add	sp, #40	; 0x28
 800a520:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800a522:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a526:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800a528:	f04f 30ff 	mov.w	r0, #4294967295
 800a52c:	e7f7      	b.n	800a51e <LmHandlerGetCurrentClass+0x1c>

0800a52e <McpsIndication>:
{
 800a52e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a530:	b087      	sub	sp, #28
    DeviceClass_t deviceClass = CLASS_A;
 800a532:	2300      	movs	r3, #0
 800a534:	f88d 300f 	strb.w	r3, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 800a538:	f240 0398 	movw	r3, #152	; 0x98
 800a53c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a540:	2201      	movs	r2, #1
 800a542:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800a544:	7842      	ldrb	r2, [r0, #1]
 800a546:	705a      	strb	r2, [r3, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800a548:	2a00      	cmp	r2, #0
 800a54a:	d158      	bne.n	800a5fe <McpsIndication+0xd0>
 800a54c:	4605      	mov	r5, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800a54e:	f240 0398 	movw	r3, #152	; 0x98
 800a552:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a556:	7902      	ldrb	r2, [r0, #4]
 800a558:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800a55a:	880a      	ldrh	r2, [r1, #0]
 800a55c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800a55e:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800a562:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800a564:	78ca      	ldrb	r2, [r1, #3]
 800a566:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800a568:	6902      	ldr	r2, [r0, #16]
 800a56a:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 800a56c:	78c3      	ldrb	r3, [r0, #3]
 800a56e:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800a572:	7b03      	ldrb	r3, [r0, #12]
 800a574:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800a578:	6883      	ldr	r3, [r0, #8]
 800a57a:	9305      	str	r3, [sp, #20]
    if( LmHandlerCallbacks->OnRxData != NULL )
 800a57c:	f640 03b8 	movw	r3, #2232	; 0x8b8
 800a580:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a588:	b12b      	cbz	r3, 800a596 <McpsIndication+0x68>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800a58a:	f240 0198 	movw	r1, #152	; 0x98
 800a58e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a592:	a804      	add	r0, sp, #16
 800a594:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800a596:	f640 03b8 	movw	r3, #2232	; 0x8b8
 800a59a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a2:	b113      	cbz	r3, 800a5aa <McpsIndication+0x7c>
 800a5a4:	7e2a      	ldrb	r2, [r5, #24]
 800a5a6:	b102      	cbz	r2, 800a5aa <McpsIndication+0x7c>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800a5a8:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a5aa:	f640 06bc 	movw	r6, #2236	; 0x8bc
 800a5ae:	f2c2 0600 	movt	r6, #8192	; 0x2000
{
 800a5b2:	2401      	movs	r4, #1
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800a5b4:	4637      	mov	r7, r6
 800a5b6:	e009      	b.n	800a5cc <McpsIndication+0x9e>
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800a5b8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a5bc:	6a1b      	ldr	r3, [r3, #32]
 800a5be:	4628      	mov	r0, r5
 800a5c0:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a5c2:	b263      	sxtb	r3, r4
 800a5c4:	2b04      	cmp	r3, #4
 800a5c6:	dc14      	bgt.n	800a5f2 <McpsIndication+0xc4>
 800a5c8:	3401      	adds	r4, #1
 800a5ca:	b2e4      	uxtb	r4, r4
        if( LmHandlerPackages[i] != NULL )
 800a5cc:	f856 3b04 	ldr.w	r3, [r6], #4
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d0f6      	beq.n	800a5c2 <McpsIndication+0x94>
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800a5d4:	6a1a      	ldr	r2, [r3, #32]
 800a5d6:	2a00      	cmp	r2, #0
 800a5d8:	d0f3      	beq.n	800a5c2 <McpsIndication+0x94>
 800a5da:	781a      	ldrb	r2, [r3, #0]
 800a5dc:	78eb      	ldrb	r3, [r5, #3]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d0ea      	beq.n	800a5b8 <McpsIndication+0x8a>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800a5e2:	2c01      	cmp	r4, #1
 800a5e4:	d1ed      	bne.n	800a5c2 <McpsIndication+0x94>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	4798      	blx	r3
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d0eb      	beq.n	800a5c8 <McpsIndication+0x9a>
 800a5f0:	e7e2      	b.n	800a5b8 <McpsIndication+0x8a>
    LmHandlerGetCurrentClass( &deviceClass );
 800a5f2:	f10d 000f 	add.w	r0, sp, #15
 800a5f6:	f7ff ff84 	bl	800a502 <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800a5fa:	796b      	ldrb	r3, [r5, #5]
 800a5fc:	b90b      	cbnz	r3, 800a602 <McpsIndication+0xd4>
}
 800a5fe:	b007      	add	sp, #28
 800a600:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LmHandlerAppData_t appData =
 800a602:	2100      	movs	r1, #0
 800a604:	f88d 1004 	strb.w	r1, [sp, #4]
 800a608:	f88d 1005 	strb.w	r1, [sp, #5]
 800a60c:	9102      	str	r1, [sp, #8]
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800a60e:	2201      	movs	r2, #1
 800a610:	a801      	add	r0, sp, #4
 800a612:	f7ff fed5 	bl	800a3c0 <LmHandlerSend>
 800a616:	e7f2      	b.n	800a5fe <McpsIndication+0xd0>

0800a618 <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 800a618:	b198      	cbz	r0, 800a642 <LmHandlerGetTxDatarate+0x2a>
{
 800a61a:	b510      	push	{r4, lr}
 800a61c:	b08a      	sub	sp, #40	; 0x28
 800a61e:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 800a620:	231f      	movs	r3, #31
 800a622:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800a626:	4668      	mov	r0, sp
 800a628:	f003 f850 	bl	800d6cc <LoRaMacMibGetRequestConfirm>
 800a62c:	b960      	cbnz	r0, 800a648 <LmHandlerGetTxDatarate+0x30>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800a62e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800a632:	7022      	strb	r2, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800a634:	f640 03d0 	movw	r3, #2256	; 0x8d0
 800a638:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a63c:	711a      	strb	r2, [r3, #4]
}
 800a63e:	b00a      	add	sp, #40	; 0x28
 800a640:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800a642:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a646:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800a648:	f04f 30ff 	mov.w	r0, #4294967295
 800a64c:	e7f7      	b.n	800a63e <LmHandlerGetTxDatarate+0x26>

0800a64e <LmHandlerSetSystemMaxRxError>:
{
 800a64e:	b500      	push	{lr}
 800a650:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800a652:	2322      	movs	r3, #34	; 0x22
 800a654:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800a658:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a65a:	4668      	mov	r0, sp
 800a65c:	f003 f9e9 	bl	800da32 <LoRaMacMibSetRequestConfirm>
 800a660:	3800      	subs	r0, #0
 800a662:	bf18      	it	ne
 800a664:	2001      	movne	r0, #1
}
 800a666:	4240      	negs	r0, r0
 800a668:	b00b      	add	sp, #44	; 0x2c
 800a66a:	f85d fb04 	ldr.w	pc, [sp], #4

0800a66e <LmHandlerConfigure>:
{
 800a66e:	b570      	push	{r4, r5, r6, lr}
 800a670:	b08e      	sub	sp, #56	; 0x38
 800a672:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800a674:	f640 04d0 	movw	r4, #2256	; 0x8d0
 800a678:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800a67c:	2218      	movs	r2, #24
 800a67e:	4620      	mov	r0, r4
 800a680:	f006 fc64 	bl	8010f4c <memcpy1>
    loraInfo = LoraInfo_GetPtr();
 800a684:	f7fe fdde 	bl	8009244 <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800a688:	7822      	ldrb	r2, [r4, #0]
 800a68a:	2301      	movs	r3, #1
 800a68c:	4093      	lsls	r3, r2
 800a68e:	6841      	ldr	r1, [r0, #4]
 800a690:	420b      	tst	r3, r1
 800a692:	d109      	bne.n	800a6a8 <LmHandlerConfigure+0x3a>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800a694:	f245 130c 	movw	r3, #20748	; 0x510c
 800a698:	f6c0 0301 	movt	r3, #2049	; 0x801
 800a69c:	2201      	movs	r2, #1
 800a69e:	2100      	movs	r1, #0
 800a6a0:	4608      	mov	r0, r1
 800a6a2:	f009 fdc3 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800a6a6:	e7fe      	b.n	800a6a6 <LmHandlerConfigure+0x38>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800a6a8:	f640 01e8 	movw	r1, #2280	; 0x8e8
 800a6ac:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a6b0:	f640 1000 	movw	r0, #2304	; 0x900
 800a6b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a6b8:	f002 fd73 	bl	800d1a2 <LoRaMacInitialization>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	d16c      	bne.n	800a79a <LmHandlerConfigure+0x12c>
        mibReq.Type = MIB_NET_ID;
 800a6c0:	2305      	movs	r3, #5
 800a6c2:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800a6ca:	a804      	add	r0, sp, #16
 800a6cc:	f003 f9b1 	bl	800da32 <LoRaMacMibSetRequestConfirm>
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800a6d0:	f640 03e8 	movw	r3, #2280	; 0x8e8
 800a6d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a6d8:	68d9      	ldr	r1, [r3, #12]
 800a6da:	6898      	ldr	r0, [r3, #8]
 800a6dc:	f7ff fbf7 	bl	8009ece <SecureElementInitMcuID>
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	d15d      	bne.n	800a7a0 <LmHandlerConfigure+0x132>
    mibReq.Type = MIB_DEV_ADDR;
 800a6e4:	2306      	movs	r3, #6
 800a6e6:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800a6ea:	a804      	add	r0, sp, #16
 800a6ec:	f002 ffee 	bl	800d6cc <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800a6f0:	f640 049c 	movw	r4, #2204	; 0x89c
 800a6f4:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800a6f8:	9b05      	ldr	r3, [sp, #20]
 800a6fa:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a6fc:	a804      	add	r0, sp, #16
 800a6fe:	f003 f998 	bl	800da32 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 800a702:	2302      	movs	r3, #2
 800a704:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800a708:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800a70a:	a804      	add	r0, sp, #16
 800a70c:	f002 ffde 	bl	800d6cc <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 800a710:	2303      	movs	r3, #3
 800a712:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800a716:	3408      	adds	r4, #8
 800a718:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800a71a:	a804      	add	r0, sp, #16
 800a71c:	f002 ffd6 	bl	800d6cc <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 800a720:	f7ff fc68 	bl	8009ff4 <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 800a724:	260f      	movs	r6, #15
 800a726:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800a72a:	2301      	movs	r3, #1
 800a72c:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a730:	a804      	add	r0, sp, #16
 800a732:	f003 f97e 	bl	800da32 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 800a736:	2310      	movs	r3, #16
 800a738:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800a73c:	2500      	movs	r5, #0
 800a73e:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a742:	eb0d 0003 	add.w	r0, sp, r3
 800a746:	f003 f974 	bl	800da32 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 800a74a:	2304      	movs	r3, #4
 800a74c:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800a750:	f640 04d0 	movw	r4, #2256	; 0x8d0
 800a754:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800a758:	78a3      	ldrb	r3, [r4, #2]
 800a75a:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a75e:	a804      	add	r0, sp, #16
 800a760:	f003 f967 	bl	800da32 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800a764:	2339      	movs	r3, #57	; 0x39
 800a766:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800a76a:	6963      	ldr	r3, [r4, #20]
 800a76c:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a76e:	a804      	add	r0, sp, #16
 800a770:	f003 f95f 	bl	800da32 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a774:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800a778:	a902      	add	r1, sp, #8
 800a77a:	7820      	ldrb	r0, [r4, #0]
 800a77c:	f005 f865 	bl	800f84a <RegionGetPhyParam>
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800a780:	1b43      	subs	r3, r0, r5
 800a782:	bf18      	it	ne
 800a784:	2301      	movne	r3, #1
 800a786:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 800a788:	2014      	movs	r0, #20
 800a78a:	f7ff ff60 	bl	800a64e <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800a78e:	79e0      	ldrb	r0, [r4, #7]
 800a790:	f003 ffc8 	bl	800e724 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 800a794:	4628      	mov	r0, r5
}
 800a796:	b00e      	add	sp, #56	; 0x38
 800a798:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_HANDLER_ERROR;
 800a79a:	f04f 30ff 	mov.w	r0, #4294967295
 800a79e:	e7fa      	b.n	800a796 <LmHandlerConfigure+0x128>
        return LORAMAC_HANDLER_ERROR;
 800a7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a4:	e7f7      	b.n	800a796 <LmHandlerConfigure+0x128>

0800a7a6 <LmHandlerPackageRegister>:
{
 800a7a6:	b530      	push	{r4, r5, lr}
 800a7a8:	b083      	sub	sp, #12
 800a7aa:	460c      	mov	r4, r1
    LmhPackage_t *package = NULL;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	9301      	str	r3, [sp, #4]
    switch( id )
 800a7b0:	4605      	mov	r5, r0
 800a7b2:	bb58      	cbnz	r0, 800a80c <LmHandlerPackageRegister+0x66>
                package = LmhpCompliancePackageFactory( );
 800a7b4:	f000 fbb3 	bl	800af1e <LmhpCompliancePackageFactory>
 800a7b8:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 800a7ba:	9b01      	ldr	r3, [sp, #4]
 800a7bc:	b373      	cbz	r3, 800a81c <LmHandlerPackageRegister+0x76>
        LmHandlerPackages[id] = package;
 800a7be:	f640 02bc 	movw	r2, #2236	; 0x8bc
 800a7c2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800a7c6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800a7ca:	f24a 22c3 	movw	r2, #41667	; 0xa2c3
 800a7ce:	f6c0 0200 	movt	r2, #2048	; 0x800
 800a7d2:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800a7d4:	f24a 32c1 	movw	r2, #41921	; 0xa3c1
 800a7d8:	f6c0 0200 	movt	r2, #2048	; 0x800
 800a7dc:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800a7de:	f24a 027b 	movw	r2, #41083	; 0xa07b
 800a7e2:	f6c0 0200 	movt	r2, #2048	; 0x800
 800a7e6:	635a      	str	r2, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800a7e8:	f640 02b8 	movw	r2, #2232	; 0x8b8
 800a7ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800a7f0:	6812      	ldr	r2, [r2, #0]
 800a7f2:	6992      	ldr	r2, [r2, #24]
 800a7f4:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	22f2      	movs	r2, #242	; 0xf2
 800a7fa:	f240 71a8 	movw	r1, #1960	; 0x7a8
 800a7fe:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a802:	4620      	mov	r0, r4
 800a804:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800a806:	2000      	movs	r0, #0
}
 800a808:	b003      	add	sp, #12
 800a80a:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800a80c:	a901      	add	r1, sp, #4
 800a80e:	f000 fb8d 	bl	800af2c <LmhpPackagesRegister>
 800a812:	2800      	cmp	r0, #0
 800a814:	d0d1      	beq.n	800a7ba <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 800a816:	f04f 30ff 	mov.w	r0, #4294967295
 800a81a:	e7f5      	b.n	800a808 <LmHandlerPackageRegister+0x62>
        return LORAMAC_HANDLER_ERROR;
 800a81c:	f04f 30ff 	mov.w	r0, #4294967295
 800a820:	e7f2      	b.n	800a808 <LmHandlerPackageRegister+0x62>

0800a822 <LmHandlerInit>:
{
 800a822:	b500      	push	{lr}
 800a824:	b083      	sub	sp, #12
 800a826:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800a828:	f640 03b8 	movw	r3, #2232	; 0x8b8
 800a82c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a830:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800a832:	f640 1300 	movw	r3, #2304	; 0x900
 800a836:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a83a:	f24a 121b 	movw	r2, #41243	; 0xa11b
 800a83e:	f6c0 0200 	movt	r2, #2048	; 0x800
 800a842:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800a844:	f24a 522f 	movw	r2, #42287	; 0xa52f
 800a848:	f6c0 0200 	movt	r2, #2048	; 0x800
 800a84c:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800a84e:	f64a 1239 	movw	r2, #43321	; 0xa939
 800a852:	f6c0 0200 	movt	r2, #2048	; 0x800
 800a856:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800a858:	f24a 02a5 	movw	r2, #41125	; 0xa0a5
 800a85c:	f6c0 0200 	movt	r2, #2048	; 0x800
 800a860:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800a862:	6802      	ldr	r2, [r0, #0]
 800a864:	f640 03e8 	movw	r3, #2280	; 0x8e8
 800a868:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a86c:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800a86e:	6842      	ldr	r2, [r0, #4]
 800a870:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800a872:	6882      	ldr	r2, [r0, #8]
 800a874:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800a876:	68c2      	ldr	r2, [r0, #12]
 800a878:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800a87a:	f64a 2279 	movw	r2, #43641	; 0xaa79
 800a87e:	f6c0 0200 	movt	r2, #2048	; 0x800
 800a882:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800a884:	6982      	ldr	r2, [r0, #24]
 800a886:	615a      	str	r2, [r3, #20]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800a888:	f240 018c 	movw	r1, #140	; 0x8c
 800a88c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a890:	2000      	movs	r0, #0
 800a892:	f7ff ff88 	bl	800a7a6 <LmHandlerPackageRegister>
 800a896:	b948      	cbnz	r0, 800a8ac <LmHandlerInit+0x8a>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800a898:	a801      	add	r0, sp, #4
 800a89a:	f000 fb45 	bl	800af28 <LmhpPackagesRegistrationInit>
 800a89e:	3800      	subs	r0, #0
 800a8a0:	bf18      	it	ne
 800a8a2:	2001      	movne	r0, #1
 800a8a4:	4240      	negs	r0, r0
}
 800a8a6:	b003      	add	sp, #12
 800a8a8:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800a8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b0:	e7f9      	b.n	800a8a6 <LmHandlerInit+0x84>

0800a8b2 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 800a8b2:	b189      	cbz	r1, 800a8d8 <LmHandlerGetVersion+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 800a8b4:	b118      	cbz	r0, 800a8be <LmHandlerGetVersion+0xc>
 800a8b6:	2801      	cmp	r0, #1
 800a8b8:	d008      	beq.n	800a8cc <LmHandlerGetVersion+0x1a>
 800a8ba:	2000      	movs	r0, #0
 800a8bc:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 800a8be:	f44f 7240 	mov.w	r2, #768	; 0x300
 800a8c2:	f2c0 1200 	movt	r2, #256	; 0x100
 800a8c6:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 800a8c8:	2000      	movs	r0, #0
            break;
 800a8ca:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 800a8cc:	2203      	movs	r2, #3
 800a8ce:	f2c0 1201 	movt	r2, #257	; 0x101
 800a8d2:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800a8d4:	2000      	movs	r0, #0
            break;
 800a8d6:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800a8d8:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a8dc:	4770      	bx	lr

0800a8de <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800a8de:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800a8e0:	f003 ff42 	bl	800e768 <LoRaMacDeInitialization>
    {
        return LORAMAC_HANDLER_SUCCESS;
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800a8e4:	2800      	cmp	r0, #0
    }
}
 800a8e6:	bf0c      	ite	eq
 800a8e8:	2000      	moveq	r0, #0
 800a8ea:	f06f 0001 	mvnne.w	r0, #1
 800a8ee:	bd08      	pop	{r3, pc}

0800a8f0 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800a8f0:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800a8f2:	f002 fe63 	bl	800d5bc <LoRaMacHalt>
    {
        return LORAMAC_HANDLER_SUCCESS;
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800a8f6:	2800      	cmp	r0, #0
    }
}
 800a8f8:	bf0c      	ite	eq
 800a8fa:	2000      	moveq	r0, #0
 800a8fc:	f06f 0001 	mvnne.w	r0, #1
 800a900:	bd08      	pop	{r3, pc}

0800a902 <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800a902:	b198      	cbz	r0, 800a92c <LmHandlerGetTxPower+0x2a>
{
 800a904:	b510      	push	{r4, lr}
 800a906:	b08a      	sub	sp, #40	; 0x28
 800a908:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800a90a:	2320      	movs	r3, #32
 800a90c:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a910:	4668      	mov	r0, sp
 800a912:	f002 fedb 	bl	800d6cc <LoRaMacMibGetRequestConfirm>
 800a916:	b960      	cbnz	r0, 800a932 <LmHandlerGetTxPower+0x30>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800a918:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800a91c:	7022      	strb	r2, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 800a91e:	f640 03d0 	movw	r3, #2256	; 0x8d0
 800a922:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a926:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 800a928:	b00a      	add	sp, #40	; 0x28
 800a92a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800a92c:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a930:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800a932:	f04f 30ff 	mov.w	r0, #4294967295
 800a936:	e7f7      	b.n	800a928 <LmHandlerGetTxPower+0x26>

0800a938 <MlmeConfirm>:
{
 800a938:	b570      	push	{r4, r5, r6, lr}
 800a93a:	b08a      	sub	sp, #40	; 0x28
 800a93c:	4605      	mov	r5, r0
    TxParams.IsMcpsConfirm = 0;
 800a93e:	f240 03ac 	movw	r3, #172	; 0xac
 800a942:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a946:	2200      	movs	r2, #0
 800a948:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800a94a:	7842      	ldrb	r2, [r0, #1]
 800a94c:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800a94e:	f640 03b8 	movw	r3, #2232	; 0x8b8
 800a952:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a95a:	b123      	cbz	r3, 800a966 <MlmeConfirm+0x2e>
        LmHandlerCallbacks->OnTxData( &TxParams );
 800a95c:	f240 00ac 	movw	r0, #172	; 0xac
 800a960:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a964:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a966:	f640 04bc 	movw	r4, #2236	; 0x8bc
 800a96a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800a96e:	f104 0614 	add.w	r6, r4, #20
 800a972:	e001      	b.n	800a978 <MlmeConfirm+0x40>
 800a974:	42a6      	cmp	r6, r4
 800a976:	d009      	beq.n	800a98c <MlmeConfirm+0x54>
        if( LmHandlerPackages[i] != NULL )
 800a978:	f854 3b04 	ldr.w	r3, [r4], #4
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d0f9      	beq.n	800a974 <MlmeConfirm+0x3c>
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800a980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a982:	2b00      	cmp	r3, #0
 800a984:	d0f6      	beq.n	800a974 <MlmeConfirm+0x3c>
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800a986:	4628      	mov	r0, r5
 800a988:	4798      	blx	r3
 800a98a:	e7f3      	b.n	800a974 <MlmeConfirm+0x3c>
    switch( mlmeConfirm->MlmeRequest )
 800a98c:	782b      	ldrb	r3, [r5, #0]
 800a98e:	2b05      	cmp	r3, #5
 800a990:	d05e      	beq.n	800aa50 <MlmeConfirm+0x118>
 800a992:	2b0c      	cmp	r3, #12
 800a994:	d067      	beq.n	800aa66 <MlmeConfirm+0x12e>
 800a996:	2b01      	cmp	r3, #1
 800a998:	d001      	beq.n	800a99e <MlmeConfirm+0x66>
}
 800a99a:	b00a      	add	sp, #40	; 0x28
 800a99c:	bd70      	pop	{r4, r5, r6, pc}
                mibReq.Type = MIB_DEV_ADDR;
 800a99e:	2306      	movs	r3, #6
 800a9a0:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800a9a4:	4668      	mov	r0, sp
 800a9a6:	f002 fe91 	bl	800d6cc <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800a9aa:	f240 0380 	movw	r3, #128	; 0x80
 800a9ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9b2:	9901      	ldr	r1, [sp, #4]
 800a9b4:	79d8      	ldrb	r0, [r3, #7]
 800a9b6:	f7ff fa70 	bl	8009e9a <SecureElementSetDevAddr>
 800a9ba:	b928      	cbnz	r0, 800a9c8 <MlmeConfirm+0x90>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800a9bc:	f640 039c 	movw	r3, #2204	; 0x89c
 800a9c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9c4:	9a01      	ldr	r2, [sp, #4]
 800a9c6:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800a9c8:	f240 0480 	movw	r4, #128	; 0x80
 800a9cc:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800a9d0:	1d20      	adds	r0, r4, #4
 800a9d2:	f7ff fe21 	bl	800a618 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800a9d6:	1d60      	adds	r0, r4, #5
 800a9d8:	f7ff ff93 	bl	800a902 <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800a9dc:	f240 03ac 	movw	r3, #172	; 0xac
 800a9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9e4:	785b      	ldrb	r3, [r3, #1]
 800a9e6:	b30b      	cbz	r3, 800aa2c <MlmeConfirm+0xf4>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800a9e8:	f240 0380 	movw	r3, #128	; 0x80
 800a9ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9f0:	22ff      	movs	r2, #255	; 0xff
 800a9f2:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800a9f4:	f640 03b8 	movw	r3, #2232	; 0x8b8
 800a9f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d0ca      	beq.n	800a99a <MlmeConfirm+0x62>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800aa04:	f240 0080 	movw	r0, #128	; 0x80
 800aa08:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800aa0c:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800aa0e:	f240 03ac 	movw	r3, #172	; 0xac
 800aa12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa16:	785b      	ldrb	r3, [r3, #1]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1be      	bne.n	800a99a <MlmeConfirm+0x62>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800aa1c:	f240 0380 	movw	r3, #128	; 0x80
 800aa20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa24:	79d8      	ldrb	r0, [r3, #7]
 800aa26:	f7ff faf7 	bl	800a018 <SecureElementPrintSessionKeys>
            break;
 800aa2a:	e7b6      	b.n	800a99a <MlmeConfirm+0x62>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	71a2      	strb	r2, [r4, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800aa30:	f640 03d0 	movw	r3, #2256	; 0x8d0
 800aa34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa38:	7858      	ldrb	r0, [r3, #1]
 800aa3a:	f7ff fbe2 	bl	800a202 <LmHandlerRequestClass>
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800aa3e:	f640 03b8 	movw	r3, #2232	; 0x8b8
 800aa42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1da      	bne.n	800aa04 <MlmeConfirm+0xcc>
 800aa4e:	e7de      	b.n	800aa0e <MlmeConfirm+0xd6>
                RxParams.LinkCheck = true;
 800aa50:	f240 0398 	movw	r3, #152	; 0x98
 800aa54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa58:	2201      	movs	r2, #1
 800aa5a:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800aa5c:	7a2a      	ldrb	r2, [r5, #8]
 800aa5e:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800aa60:	7a6a      	ldrb	r2, [r5, #9]
 800aa62:	74da      	strb	r2, [r3, #19]
            break;
 800aa64:	e799      	b.n	800a99a <MlmeConfirm+0x62>
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800aa66:	786b      	ldrb	r3, [r5, #1]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d096      	beq.n	800a99a <MlmeConfirm+0x62>
                    LmHandlerDeviceTimeReq( );
 800aa6c:	f7ff fb05 	bl	800a07a <LmHandlerDeviceTimeReq>
}
 800aa70:	e793      	b.n	800a99a <MlmeConfirm+0x62>

0800aa72 <LmHandlerNvmDataStore>:

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800aa72:	f04f 30ff 	mov.w	r0, #4294967295
 800aa76:	4770      	bx	lr

0800aa78 <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800aa78:	4770      	bx	lr

0800aa7a <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800aa7a:	b1d8      	cbz	r0, 800aab4 <LmhpComplianceInit+0x3a>
{
 800aa7c:	b410      	push	{r4}
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800aa7e:	b191      	cbz	r1, 800aaa6 <LmhpComplianceInit+0x2c>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 800aa80:	f640 133c 	movw	r3, #2364	; 0x93c
 800aa84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa88:	6018      	str	r0, [r3, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800aa8a:	f640 1310 	movw	r3, #2320	; 0x910
 800aa8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa92:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800aa94:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 800aa96:	2201      	movs	r2, #1
 800aa98:	f640 1310 	movw	r3, #2320	; 0x910
 800aa9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aaa0:	701a      	strb	r2, [r3, #0]
    else
    {
        LmhpComplianceParams = NULL;
        ComplianceTestState.Initialized = false;
    }
}
 800aaa2:	bc10      	pop	{r4}
 800aaa4:	4770      	bx	lr
        LmhpComplianceParams = NULL;
 800aaa6:	f640 133c 	movw	r3, #2364	; 0x93c
 800aaaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aaae:	2200      	movs	r2, #0
 800aab0:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800aab2:	e7f1      	b.n	800aa98 <LmhpComplianceInit+0x1e>
        LmhpComplianceParams = NULL;
 800aab4:	f640 133c 	movw	r3, #2364	; 0x93c
 800aab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aabc:	2200      	movs	r2, #0
 800aabe:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = true;
 800aac0:	f640 1310 	movw	r3, #2320	; 0x910
 800aac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aac8:	701a      	strb	r2, [r3, #0]
 800aaca:	4770      	bx	lr

0800aacc <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
 800aacc:	f640 1310 	movw	r3, #2320	; 0x910
 800aad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 800aad4:	7818      	ldrb	r0, [r3, #0]
 800aad6:	4770      	bx	lr

0800aad8 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 800aad8:	f640 1310 	movw	r3, #2320	; 0x910
 800aadc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aae0:	7818      	ldrb	r0, [r3, #0]
 800aae2:	b120      	cbz	r0, 800aaee <LmhpComplianceIsRunning+0x16>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 800aae4:	f640 1310 	movw	r3, #2320	; 0x910
 800aae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aaec:	7858      	ldrb	r0, [r3, #1]
}
 800aaee:	4770      	bx	lr

0800aaf0 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
    if( ComplianceTestState.Initialized == false )
 800aaf0:	f640 1310 	movw	r3, #2320	; 0x910
 800aaf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	b143      	cbz	r3, 800ab0e <LmhpComplianceOnMcpsConfirm+0x1e>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800aafc:	f640 1310 	movw	r3, #2320	; 0x910
 800ab00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab04:	785b      	ldrb	r3, [r3, #1]
 800ab06:	b113      	cbz	r3, 800ab0e <LmhpComplianceOnMcpsConfirm+0x1e>
 800ab08:	7803      	ldrb	r3, [r0, #0]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d000      	beq.n	800ab10 <LmhpComplianceOnMcpsConfirm+0x20>
        ( mcpsConfirm->AckReceived != 0 ) )
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 800ab0e:	4770      	bx	lr
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800ab10:	7903      	ldrb	r3, [r0, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d0fb      	beq.n	800ab0e <LmhpComplianceOnMcpsConfirm+0x1e>
        ComplianceTestState.DownLinkCounter++;
 800ab16:	f640 1310 	movw	r3, #2320	; 0x910
 800ab1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab1e:	899a      	ldrh	r2, [r3, #12]
 800ab20:	3201      	adds	r2, #1
 800ab22:	819a      	strh	r2, [r3, #12]
 800ab24:	e7f3      	b.n	800ab0e <LmhpComplianceOnMcpsConfirm+0x1e>

0800ab26 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 800ab26:	f640 1310 	movw	r3, #2320	; 0x910
 800ab2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	b143      	cbz	r3, 800ab44 <LmhpComplianceOnMlmeConfirm+0x1e>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800ab32:	f640 1310 	movw	r3, #2320	; 0x910
 800ab36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab3a:	785b      	ldrb	r3, [r3, #1]
 800ab3c:	b113      	cbz	r3, 800ab44 <LmhpComplianceOnMlmeConfirm+0x1e>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800ab3e:	7803      	ldrb	r3, [r0, #0]
 800ab40:	2b05      	cmp	r3, #5
 800ab42:	d000      	beq.n	800ab46 <LmhpComplianceOnMlmeConfirm+0x20>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 800ab44:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 800ab46:	f640 1310 	movw	r3, #2320	; 0x910
 800ab4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab4e:	2201      	movs	r2, #1
 800ab50:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800ab52:	7a02      	ldrb	r2, [r0, #8]
 800ab54:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800ab56:	7a42      	ldrb	r2, [r0, #9]
 800ab58:	741a      	strb	r2, [r3, #16]
 800ab5a:	e7f3      	b.n	800ab44 <LmhpComplianceOnMlmeConfirm+0x1e>

0800ab5c <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 800ab5c:	4770      	bx	lr

0800ab5e <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 800ab5e:	f640 1310 	movw	r3, #2320	; 0x910
 800ab62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d05d      	beq.n	800ac28 <LmhpComplianceTxProcess+0xca>
    if( ComplianceTestState.IsRunning == false )
 800ab6c:	f640 1310 	movw	r3, #2320	; 0x910
 800ab70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab74:	785b      	ldrb	r3, [r3, #1]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d059      	beq.n	800ac2e <LmhpComplianceTxProcess+0xd0>
{
 800ab7a:	b510      	push	{r4, lr}
 800ab7c:	b082      	sub	sp, #8
    if( ComplianceTestState.LinkCheck == true )
 800ab7e:	f640 1310 	movw	r3, #2320	; 0x910
 800ab82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab86:	7b9b      	ldrb	r3, [r3, #14]
 800ab88:	b393      	cbz	r3, 800abf0 <LmhpComplianceTxProcess+0x92>
        ComplianceTestState.LinkCheck = false;
 800ab8a:	f640 1310 	movw	r3, #2320	; 0x910
 800ab8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab92:	2200      	movs	r2, #0
 800ab94:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800ab96:	2203      	movs	r2, #3
 800ab98:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800ab9a:	689a      	ldr	r2, [r3, #8]
 800ab9c:	2105      	movs	r1, #5
 800ab9e:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800aba0:	7bd9      	ldrb	r1, [r3, #15]
 800aba2:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800aba4:	7c19      	ldrb	r1, [r3, #16]
 800aba6:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 800aba8:	2201      	movs	r2, #1
 800abaa:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 800abac:	23e0      	movs	r3, #224	; 0xe0
 800abae:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 800abb2:	f640 1310 	movw	r3, #2320	; 0x910
 800abb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    LmHandlerAppData_t appData =
 800abba:	799a      	ldrb	r2, [r3, #6]
 800abbc:	f88d 2001 	strb.w	r2, [sp, #1]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 800abc4:	f640 1024 	movw	r0, #2340	; 0x924
 800abc8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800abcc:	f009 f979 	bl	8013ec2 <UTIL_TIMER_Start>
    if( LmhpCompliancePackage.OnSendRequest == NULL)
 800abd0:	f240 03c8 	movw	r3, #200	; 0xc8
 800abd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800abd8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800abda:	b354      	cbz	r4, 800ac32 <LmhpComplianceTxProcess+0xd4>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800abdc:	f640 1310 	movw	r3, #2320	; 0x910
 800abe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800abe4:	2201      	movs	r2, #1
 800abe6:	78d9      	ldrb	r1, [r3, #3]
 800abe8:	4668      	mov	r0, sp
 800abea:	47a0      	blx	r4
}
 800abec:	b002      	add	sp, #8
 800abee:	bd10      	pop	{r4, pc}
        switch( ComplianceTestState.State )
 800abf0:	f640 1310 	movw	r3, #2320	; 0x910
 800abf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800abf8:	789b      	ldrb	r3, [r3, #2]
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d008      	beq.n	800ac10 <LmhpComplianceTxProcess+0xb2>
 800abfe:	2b04      	cmp	r3, #4
 800ac00:	d1d4      	bne.n	800abac <LmhpComplianceTxProcess+0x4e>
                ComplianceTestState.State = 1;
 800ac02:	f640 1310 	movw	r3, #2320	; 0x910
 800ac06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	709a      	strb	r2, [r3, #2]
                break;
 800ac0e:	e7cd      	b.n	800abac <LmhpComplianceTxProcess+0x4e>
                ComplianceTestState.DataBufferSize = 2;
 800ac10:	f640 1310 	movw	r3, #2320	; 0x910
 800ac14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ac18:	2202      	movs	r2, #2
 800ac1a:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800ac1c:	899a      	ldrh	r2, [r3, #12]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	0a11      	lsrs	r1, r2, #8
 800ac22:	7019      	strb	r1, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800ac24:	705a      	strb	r2, [r3, #1]
                break;
 800ac26:	e7c1      	b.n	800abac <LmhpComplianceTxProcess+0x4e>
        return LORAMAC_HANDLER_ERROR;
 800ac28:	f04f 30ff 	mov.w	r0, #4294967295
 800ac2c:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 800ac2e:	2000      	movs	r0, #0
}
 800ac30:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800ac32:	f04f 30ff 	mov.w	r0, #4294967295
 800ac36:	e7d9      	b.n	800abec <LmhpComplianceTxProcess+0x8e>

0800ac38 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 800ac38:	f640 1310 	movw	r3, #2320	; 0x910
 800ac3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f000 8166 	beq.w	800af14 <LmhpComplianceOnMcpsIndication+0x2dc>
    if( mcpsIndication->RxData == false )
 800ac48:	7b43      	ldrb	r3, [r0, #13]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	f000 8162 	beq.w	800af14 <LmhpComplianceOnMcpsIndication+0x2dc>
{
 800ac50:	b510      	push	{r4, lr}
 800ac52:	b08c      	sub	sp, #48	; 0x30
    if( ( ComplianceTestState.IsRunning == true ) &&
 800ac54:	f640 1310 	movw	r3, #2320	; 0x910
 800ac58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ac5c:	785b      	ldrb	r3, [r3, #1]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f000 814f 	beq.w	800af02 <LmhpComplianceOnMcpsIndication+0x2ca>
 800ac64:	7b83      	ldrb	r3, [r0, #14]
 800ac66:	b933      	cbnz	r3, 800ac76 <LmhpComplianceOnMcpsIndication+0x3e>
        ComplianceTestState.DownLinkCounter++;
 800ac68:	f640 1310 	movw	r3, #2320	; 0x910
 800ac6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ac70:	899a      	ldrh	r2, [r3, #12]
 800ac72:	3201      	adds	r2, #1
 800ac74:	819a      	strh	r2, [r3, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800ac76:	78c3      	ldrb	r3, [r0, #3]
 800ac78:	2be0      	cmp	r3, #224	; 0xe0
 800ac7a:	f040 8149 	bne.w	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800ac7e:	6881      	ldr	r1, [r0, #8]
 800ac80:	780b      	ldrb	r3, [r1, #0]
 800ac82:	f640 1210 	movw	r2, #2320	; 0x910
 800ac86:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800ac8a:	7093      	strb	r3, [r2, #2]
        switch( ComplianceTestState.State )
 800ac8c:	2b0a      	cmp	r3, #10
 800ac8e:	f200 813f 	bhi.w	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
 800ac92:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ac96:	0057      	.short	0x0057
 800ac98:	0084007d 	.word	0x0084007d
 800ac9c:	0095008c 	.word	0x0095008c
 800aca0:	00bd00b6 	.word	0x00bd00b6
 800aca4:	011b00eb 	.word	0x011b00eb
 800aca8:	012c0122 	.word	0x012c0122
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800acac:	6883      	ldr	r3, [r0, #8]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800acae:	781a      	ldrb	r2, [r3, #0]
 800acb0:	2a01      	cmp	r2, #1
 800acb2:	f040 812d 	bne.w	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800acb6:	785a      	ldrb	r2, [r3, #1]
 800acb8:	2a01      	cmp	r2, #1
 800acba:	f040 8129 	bne.w	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800acbe:	789a      	ldrb	r2, [r3, #2]
 800acc0:	2a01      	cmp	r2, #1
 800acc2:	f040 8125 	bne.w	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800acc6:	78db      	ldrb	r3, [r3, #3]
 800acc8:	2b01      	cmp	r3, #1
 800acca:	f040 8121 	bne.w	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
            ComplianceTestState.IsTxConfirmed = false;
 800acce:	f640 1310 	movw	r3, #2320	; 0x910
 800acd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800acd6:	2400      	movs	r4, #0
 800acd8:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 800acda:	22e0      	movs	r2, #224	; 0xe0
 800acdc:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800acde:	2202      	movs	r2, #2
 800ace0:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800ace2:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800ace4:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800ace6:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800ace8:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800acea:	2201      	movs	r2, #1
 800acec:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800acee:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 800acf0:	2304      	movs	r3, #4
 800acf2:	f88d 3008 	strb.w	r3, [sp, #8]
            mibReq.Param.AdrEnable = true;
 800acf6:	f88d 200c 	strb.w	r2, [sp, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800acfa:	a802      	add	r0, sp, #8
 800acfc:	f002 fe99 	bl	800da32 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 800ad00:	4620      	mov	r0, r4
 800ad02:	f003 fd0f 	bl	800e724 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800ad06:	f640 133c 	movw	r3, #2364	; 0x93c
 800ad0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	b103      	cbz	r3, 800ad16 <LmhpComplianceOnMcpsIndication+0xde>
                LmhpComplianceParams->StopPeripherals( );
 800ad14:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800ad16:	f640 1424 	movw	r4, #2340	; 0x924
 800ad1a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800ad1e:	2200      	movs	r2, #0
 800ad20:	9200      	str	r2, [sp, #0]
 800ad22:	f64a 7317 	movw	r3, #44823	; 0xaf17
 800ad26:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ad2a:	f04f 31ff 	mov.w	r1, #4294967295
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f008 fff4 	bl	8013d1c <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800ad34:	f241 3188 	movw	r1, #5000	; 0x1388
 800ad38:	4620      	mov	r0, r4
 800ad3a:	f009 f912 	bl	8013f62 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 800ad3e:	f7ff ff0e 	bl	800ab5e <LmhpComplianceTxProcess>
 800ad42:	e0e5      	b.n	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
                    TimerStop( &ComplianceTxNextPacketTimer );
 800ad44:	f640 1024 	movw	r0, #2340	; 0x924
 800ad48:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ad4c:	f009 f84e 	bl	8013dec <UTIL_TIMER_Stop>
                    ComplianceTestState.DownLinkCounter = 0;
 800ad50:	f640 1310 	movw	r3, #2320	; 0x910
 800ad54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad58:	2200      	movs	r2, #0
 800ad5a:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800ad5c:	705a      	strb	r2, [r3, #1]
                    mibReq.Type = MIB_ADR;
 800ad5e:	2304      	movs	r3, #4
 800ad60:	f88d 3008 	strb.w	r3, [sp, #8]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800ad64:	f640 143c 	movw	r4, #2364	; 0x93c
 800ad68:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800ad74:	a802      	add	r0, sp, #8
 800ad76:	f002 fe5c 	bl	800da32 <LoRaMacMibSetRequestConfirm>
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	7858      	ldrb	r0, [r3, #1]
 800ad7e:	f003 fcd1 	bl	800e724 <LoRaMacTestSetDutyCycleOn>
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800ad82:	6823      	ldr	r3, [r4, #0]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f000 80c2 	beq.w	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
                        LmhpComplianceParams->StartPeripherals( );
 800ad8c:	4798      	blx	r3
                break;
 800ad8e:	e0bf      	b.n	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
                ComplianceTestState.DataBufferSize = 2;
 800ad90:	f640 1310 	movw	r3, #2320	; 0x910
 800ad94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad98:	2202      	movs	r2, #2
 800ad9a:	719a      	strb	r2, [r3, #6]
                break;
 800ad9c:	e0b8      	b.n	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
                ComplianceTestState.IsTxConfirmed = true;
 800ad9e:	f640 1310 	movw	r3, #2320	; 0x910
 800ada2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ada6:	2201      	movs	r2, #1
 800ada8:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800adaa:	709a      	strb	r2, [r3, #2]
                break;
 800adac:	e0b0      	b.n	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
                ComplianceTestState.IsTxConfirmed = false;
 800adae:	f640 1310 	movw	r3, #2320	; 0x910
 800adb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800adb6:	2200      	movs	r2, #0
 800adb8:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800adba:	2201      	movs	r2, #1
 800adbc:	709a      	strb	r2, [r3, #2]
                break;
 800adbe:	e0a7      	b.n	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800adc0:	7b01      	ldrb	r1, [r0, #12]
 800adc2:	f640 1310 	movw	r3, #2320	; 0x910
 800adc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800adca:	7199      	strb	r1, [r3, #6]
                ComplianceTestState.DataBuffer[0] = 4;
 800adcc:	689a      	ldr	r2, [r3, #8]
 800adce:	2404      	movs	r4, #4
 800add0:	7014      	strb	r4, [r2, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800add2:	795b      	ldrb	r3, [r3, #5]
 800add4:	428b      	cmp	r3, r1
 800add6:	bf28      	it	cs
 800add8:	460b      	movcs	r3, r1
 800adda:	2b01      	cmp	r3, #1
 800addc:	f240 8098 	bls.w	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
 800ade0:	1c51      	adds	r1, r2, #1
 800ade2:	3b02      	subs	r3, #2
 800ade4:	fa51 f183 	uxtab	r1, r1, r3
 800ade8:	4613      	mov	r3, r2
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800adea:	f1c2 0c01 	rsb	ip, r2, #1
 800adee:	6882      	ldr	r2, [r0, #8]
 800adf0:	441a      	add	r2, r3
 800adf2:	f812 200c 	ldrb.w	r2, [r2, ip]
 800adf6:	3201      	adds	r2, #1
 800adf8:	f803 2f01 	strb.w	r2, [r3, #1]!
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800adfc:	428b      	cmp	r3, r1
 800adfe:	d1f6      	bne.n	800adee <LmhpComplianceOnMcpsIndication+0x1b6>
 800ae00:	e086      	b.n	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
                    mlmeReq.Type = MLME_LINK_CHECK;
 800ae02:	2305      	movs	r3, #5
 800ae04:	f88d 3008 	strb.w	r3, [sp, #8]
                    LoRaMacMlmeRequest( &mlmeReq );
 800ae08:	a802      	add	r0, sp, #8
 800ae0a:	f003 f923 	bl	800e054 <LoRaMacMlmeRequest>
                break;
 800ae0e:	e07f      	b.n	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
                    TimerStop( &ComplianceTxNextPacketTimer );
 800ae10:	f640 1024 	movw	r0, #2340	; 0x924
 800ae14:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ae18:	f008 ffe8 	bl	8013dec <UTIL_TIMER_Stop>
                    ComplianceTestState.DownLinkCounter = 0;
 800ae1c:	f640 1310 	movw	r3, #2320	; 0x910
 800ae20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae24:	2200      	movs	r2, #0
 800ae26:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800ae28:	705a      	strb	r2, [r3, #1]
                    mibReq.Type = MIB_ADR;
 800ae2a:	2304      	movs	r3, #4
 800ae2c:	f88d 3008 	strb.w	r3, [sp, #8]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800ae30:	f640 143c 	movw	r4, #2364	; 0x93c
 800ae34:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800ae38:	6823      	ldr	r3, [r4, #0]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800ae40:	a802      	add	r0, sp, #8
 800ae42:	f002 fdf6 	bl	800da32 <LoRaMacMibSetRequestConfirm>
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800ae46:	6823      	ldr	r3, [r4, #0]
 800ae48:	7858      	ldrb	r0, [r3, #1]
 800ae4a:	f003 fc6b 	bl	800e724 <LoRaMacTestSetDutyCycleOn>
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800ae4e:	6823      	ldr	r3, [r4, #0]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	b103      	cbz	r3, 800ae56 <LmhpComplianceOnMcpsIndication+0x21e>
                        LmhpComplianceParams->StartPeripherals( );
 800ae54:	4798      	blx	r3
                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 800ae56:	f240 03c8 	movw	r3, #200	; 0xc8
 800ae5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d055      	beq.n	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800ae64:	2101      	movs	r1, #1
 800ae66:	2002      	movs	r0, #2
 800ae68:	4798      	blx	r3
                break;
 800ae6a:	e051      	b.n	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
                    if( mcpsIndication->BufferSize == 3 )
 800ae6c:	7b03      	ldrb	r3, [r0, #12]
 800ae6e:	2b03      	cmp	r3, #3
 800ae70:	d00b      	beq.n	800ae8a <LmhpComplianceOnMcpsIndication+0x252>
                    else if( mcpsIndication->BufferSize == 7 )
 800ae72:	2b07      	cmp	r3, #7
 800ae74:	d013      	beq.n	800ae9e <LmhpComplianceOnMcpsIndication+0x266>
                    LoRaMacMlmeRequest( &mlmeReq );
 800ae76:	a802      	add	r0, sp, #8
 800ae78:	f003 f8ec 	bl	800e054 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 800ae7c:	f640 1310 	movw	r3, #2320	; 0x910
 800ae80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae84:	2201      	movs	r2, #1
 800ae86:	709a      	strb	r2, [r3, #2]
                break;
 800ae88:	e042      	b.n	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
                        mlmeReq.Type = MLME_TXCW;
 800ae8a:	2306      	movs	r3, #6
 800ae8c:	f88d 3008 	strb.w	r3, [sp, #8]
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800ae90:	784a      	ldrb	r2, [r1, #1]
 800ae92:	788b      	ldrb	r3, [r1, #2]
 800ae94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ae98:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ae9c:	e7eb      	b.n	800ae76 <LmhpComplianceOnMcpsIndication+0x23e>
                        mlmeReq.Type = MLME_TXCW_1;
 800ae9e:	f88d 3008 	strb.w	r3, [sp, #8]
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800aea2:	784a      	ldrb	r2, [r1, #1]
 800aea4:	788b      	ldrb	r3, [r1, #2]
 800aea6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800aeaa:	f8ad 300c 	strh.w	r3, [sp, #12]
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800aeae:	78ca      	ldrb	r2, [r1, #3]
 800aeb0:	790b      	ldrb	r3, [r1, #4]
 800aeb2:	021b      	lsls	r3, r3, #8
 800aeb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aeb8:	794a      	ldrb	r2, [r1, #5]
 800aeba:	4313      	orrs	r3, r2
 800aebc:	2264      	movs	r2, #100	; 0x64
 800aebe:	fb02 f303 	mul.w	r3, r2, r3
 800aec2:	9304      	str	r3, [sp, #16]
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800aec4:	798b      	ldrb	r3, [r1, #6]
 800aec6:	f88d 3014 	strb.w	r3, [sp, #20]
 800aeca:	e7d4      	b.n	800ae76 <LmhpComplianceOnMcpsIndication+0x23e>
                    mlmeReq.Type = MLME_DEVICE_TIME;
 800aecc:	230a      	movs	r3, #10
 800aece:	f88d 3008 	strb.w	r3, [sp, #8]
                    LoRaMacMlmeRequest( &mlmeReq );
 800aed2:	a802      	add	r0, sp, #8
 800aed4:	f003 f8be 	bl	800e054 <LoRaMacMlmeRequest>
                break;
 800aed8:	e01a      	b.n	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
                    mibReq.Type = MIB_DEVICE_CLASS;
 800aeda:	2300      	movs	r3, #0
 800aedc:	f88d 3008 	strb.w	r3, [sp, #8]
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800aee0:	784b      	ldrb	r3, [r1, #1]
 800aee2:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800aee6:	a802      	add	r0, sp, #8
 800aee8:	f002 fda3 	bl	800da32 <LoRaMacMibSetRequestConfirm>
                break;
 800aeec:	e010      	b.n	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800aeee:	230d      	movs	r3, #13
 800aef0:	f88d 3008 	strb.w	r3, [sp, #8]
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800aef4:	784b      	ldrb	r3, [r1, #1]
 800aef6:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMlmeRequest( &mlmeReq );
 800aefa:	a802      	add	r0, sp, #8
 800aefc:	f003 f8aa 	bl	800e054 <LoRaMacMlmeRequest>
                break;
 800af00:	e006      	b.n	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800af02:	78c3      	ldrb	r3, [r0, #3]
 800af04:	2be0      	cmp	r3, #224	; 0xe0
 800af06:	d103      	bne.n	800af10 <LmhpComplianceOnMcpsIndication+0x2d8>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800af08:	7b03      	ldrb	r3, [r0, #12]
 800af0a:	2b04      	cmp	r3, #4
 800af0c:	f43f aece 	beq.w	800acac <LmhpComplianceOnMcpsIndication+0x74>
}
 800af10:	b00c      	add	sp, #48	; 0x30
 800af12:	bd10      	pop	{r4, pc}
 800af14:	4770      	bx	lr

0800af16 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 800af16:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 800af18:	f7ff fe21 	bl	800ab5e <LmhpComplianceTxProcess>
}
 800af1c:	bd08      	pop	{r3, pc}

0800af1e <LmhpCompliancePackageFactory>:
}
 800af1e:	f240 00c8 	movw	r0, #200	; 0xc8
 800af22:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800af26:	4770      	bx	lr

0800af28 <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 800af28:	2000      	movs	r0, #0
 800af2a:	4770      	bx	lr

0800af2c <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800af2c:	f04f 30ff 	mov.w	r0, #4294967295
 800af30:	4770      	bx	lr

0800af32 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800af32:	f640 634c 	movw	r3, #3660	; 0xe4c
 800af36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800af3a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800af3e:	2b02      	cmp	r3, #2
 800af40:	bf18      	it	ne
 800af42:	2306      	movne	r3, #6
 800af44:	f640 1244 	movw	r2, #2372	; 0x944
 800af48:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800af4c:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800af50:	4770      	bx	lr

0800af52 <StopRetransmission>:
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800af52:	f640 1344 	movw	r3, #2372	; 0x944
 800af56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800af5a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800af5e:	f013 0f02 	tst.w	r3, #2
 800af62:	d007      	beq.n	800af74 <StopRetransmission+0x22>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800af64:	f640 1344 	movw	r3, #2372	; 0x944
 800af68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800af6c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800af70:	2b01      	cmp	r3, #1
 800af72:	d90d      	bls.n	800af90 <StopRetransmission+0x3e>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800af74:	f640 634c 	movw	r3, #3660	; 0xe4c
 800af78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800af7c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800af80:	b133      	cbz	r3, 800af90 <StopRetransmission+0x3e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 800af82:	f640 634c 	movw	r3, #3660	; 0xe4c
 800af86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800af8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af8c:	3201      	adds	r2, #1
 800af8e:	629a      	str	r2, [r3, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800af90:	f640 1344 	movw	r3, #2372	; 0x944
 800af94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.NodeAckRequested = false;
 800af9e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 800afa2:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800afa6:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800afaa:	f022 0202 	bic.w	r2, r2, #2
 800afae:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 800afb2:	2001      	movs	r0, #1
 800afb4:	4770      	bx	lr

0800afb6 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 800afb6:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800afb8:	f640 1344 	movw	r3, #2372	; 0x944
 800afbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800afc0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800afc4:	b113      	cbz	r3, 800afcc <OnMacProcessNotify+0x16>
 800afc6:	695b      	ldr	r3, [r3, #20]
 800afc8:	b103      	cbz	r3, 800afcc <OnMacProcessNotify+0x16>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800afca:	4798      	blx	r3
    }
}
 800afcc:	bd08      	pop	{r3, pc}

0800afce <OnRadioRxError>:
{
 800afce:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800afd0:	f640 1340 	movw	r3, #2368	; 0x940
 800afd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800afd8:	781a      	ldrb	r2, [r3, #0]
 800afda:	f042 0202 	orr.w	r2, r2, #2
 800afde:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 800afe0:	f7ff ffe9 	bl	800afb6 <OnMacProcessNotify>
}
 800afe4:	bd08      	pop	{r3, pc}

0800afe6 <GetMaxAppPayloadWithoutFOptsLength>:
{
 800afe6:	b500      	push	{lr}
 800afe8:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800afea:	f640 634c 	movw	r3, #3660	; 0xe4c
 800afee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aff2:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800aff6:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 800affa:	f88d 0009 	strb.w	r0, [sp, #9]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800affe:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800b002:	320d      	adds	r2, #13
 800b004:	f88d 2008 	strb.w	r2, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b008:	a902      	add	r1, sp, #8
 800b00a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b00e:	f004 fc1c 	bl	800f84a <RegionGetPhyParam>
}
 800b012:	b2c0      	uxtb	r0, r0
 800b014:	b005      	add	sp, #20
 800b016:	f85d fb04 	ldr.w	pc, [sp], #4

0800b01a <OnAckTimeoutTimerEvent>:
{
 800b01a:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 800b01c:	f640 1444 	movw	r4, #2372	; 0x944
 800b020:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800b024:	f504 707d 	add.w	r0, r4, #1012	; 0x3f4
 800b028:	f008 fee0 	bl	8013dec <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800b02c:	f894 3410 	ldrb.w	r3, [r4, #1040]	; 0x410
 800b030:	b113      	cbz	r3, 800b038 <OnAckTimeoutTimerEvent+0x1e>
        MacCtx.AckTimeoutRetry = true;
 800b032:	2201      	movs	r2, #1
 800b034:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800b038:	f640 634c 	movw	r3, #3660	; 0xe4c
 800b03c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b040:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b044:	2b02      	cmp	r3, #2
 800b046:	d002      	beq.n	800b04e <OnAckTimeoutTimerEvent+0x34>
    OnMacProcessNotify( );
 800b048:	f7ff ffb5 	bl	800afb6 <OnMacProcessNotify>
}
 800b04c:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 800b04e:	f640 1344 	movw	r3, #2372	; 0x944
 800b052:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b056:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800b05a:	f042 0210 	orr.w	r2, r2, #16
 800b05e:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800b062:	e7f1      	b.n	800b048 <OnAckTimeoutTimerEvent+0x2e>

0800b064 <PrepareRxDoneAbort>:
{
 800b064:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800b066:	f640 1344 	movw	r3, #2372	; 0x944
 800b06a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b06e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800b072:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b076:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 800b07a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800b07e:	b963      	cbnz	r3, 800b09a <PrepareRxDoneAbort+0x36>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800b080:	f640 1344 	movw	r3, #2372	; 0x944
 800b084:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b088:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800b08c:	f042 0212 	orr.w	r2, r2, #18
 800b090:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 800b094:	f7ff ff4d 	bl	800af32 <UpdateRxSlotIdleState>
}
 800b098:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 800b09a:	2000      	movs	r0, #0
 800b09c:	f7ff ffbd 	bl	800b01a <OnAckTimeoutTimerEvent>
 800b0a0:	e7ee      	b.n	800b080 <PrepareRxDoneAbort+0x1c>
	...

0800b0a4 <ProcessMacCommands>:
{
 800b0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a8:	b091      	sub	sp, #68	; 0x44
 800b0aa:	9303      	str	r3, [sp, #12]
    uint8_t status = 0;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b0b2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( macIndex < commandsSize )
 800b0b6:	4291      	cmp	r1, r2
 800b0b8:	f080 82de 	bcs.w	800b678 <ProcessMacCommands+0x5d4>
 800b0bc:	4605      	mov	r5, r0
 800b0be:	460c      	mov	r4, r1
 800b0c0:	4616      	mov	r6, r2
    bool adrBlockFound = false;
 800b0c2:	9302      	str	r3, [sp, #8]
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800b0c4:	f241 58b4 	movw	r8, #5556	; 0x15b4
 800b0c8:	f2c2 0800 	movt	r8, #8192	; 0x2000
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800b0cc:	f640 1744 	movw	r7, #2372	; 0x944
 800b0d0:	f2c2 0700 	movt	r7, #8192	; 0x2000
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800b0d4:	f44f 5976 	mov.w	r9, #15744	; 0x3d80
 800b0d8:	f2c1 29d5 	movt	r9, #4821	; 0x12d5
 800b0dc:	e027      	b.n	800b12e <ProcessMacCommands+0x8a>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800b0de:	2005      	movs	r0, #5
 800b0e0:	f003 fe56 	bl	800ed90 <LoRaMacConfirmQueueIsCmdActive>
 800b0e4:	b908      	cbnz	r0, 800b0ea <ProcessMacCommands+0x46>
        switch( payload[macIndex++] )
 800b0e6:	4654      	mov	r4, sl
 800b0e8:	e01e      	b.n	800b128 <ProcessMacCommands+0x84>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800b0ea:	2105      	movs	r1, #5
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	f003 fdfa 	bl	800ece6 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800b0f2:	1ca3      	adds	r3, r4, #2
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	f815 200a 	ldrb.w	r2, [r5, sl]
 800b0fa:	f887 2450 	strb.w	r2, [r7, #1104]	; 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800b0fe:	3403      	adds	r4, #3
 800b100:	b2e4      	uxtb	r4, r4
 800b102:	5ceb      	ldrb	r3, [r5, r3]
 800b104:	f887 3451 	strb.w	r3, [r7, #1105]	; 0x451
 800b108:	e00e      	b.n	800b128 <ProcessMacCommands+0x84>
                int8_t linkAdrDatarate = DR_0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	f88d 3016 	strb.w	r3, [sp, #22]
                int8_t linkAdrTxPower = TX_POWER_0;
 800b110:	f88d 3017 	strb.w	r3, [sp, #23]
                uint8_t linkAdrNbRep = 0;
 800b114:	f88d 3018 	strb.w	r3, [sp, #24]
                uint8_t linkAdrNbBytesParsed = 0;
 800b118:	f88d 301c 	strb.w	r3, [sp, #28]
                if( adrBlockFound == false )
 800b11c:	9b02      	ldr	r3, [sp, #8]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d03c      	beq.n	800b19c <ProcessMacCommands+0xf8>
                break;
 800b122:	4654      	mov	r4, sl
 800b124:	2301      	movs	r3, #1
 800b126:	9302      	str	r3, [sp, #8]
    while( macIndex < commandsSize )
 800b128:	42a6      	cmp	r6, r4
 800b12a:	f240 82a5 	bls.w	800b678 <ProcessMacCommands+0x5d4>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800b12e:	5d28      	ldrb	r0, [r5, r4]
 800b130:	f003 fd28 	bl	800eb84 <LoRaMacCommandsGetCmdSize>
 800b134:	4420      	add	r0, r4
 800b136:	42b0      	cmp	r0, r6
 800b138:	f300 829e 	bgt.w	800b678 <ProcessMacCommands+0x5d4>
        switch( payload[macIndex++] )
 800b13c:	f104 0a01 	add.w	sl, r4, #1
 800b140:	fa5f fa8a 	uxtb.w	sl, sl
 800b144:	5d2b      	ldrb	r3, [r5, r4]
 800b146:	3b02      	subs	r3, #2
 800b148:	2b11      	cmp	r3, #17
 800b14a:	f200 8295 	bhi.w	800b678 <ProcessMacCommands+0x5d4>
 800b14e:	a201      	add	r2, pc, #4	; (adr r2, 800b154 <ProcessMacCommands+0xb0>)
 800b150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b154:	0800b0df 	.word	0x0800b0df
 800b158:	0800b10b 	.word	0x0800b10b
 800b15c:	0800b267 	.word	0x0800b267
 800b160:	0800b295 	.word	0x0800b295
 800b164:	0800b327 	.word	0x0800b327
 800b168:	0800b357 	.word	0x0800b357
 800b16c:	0800b3cb 	.word	0x0800b3cb
 800b170:	0800b401 	.word	0x0800b401
 800b174:	0800b49b 	.word	0x0800b49b
 800b178:	0800b679 	.word	0x0800b679
 800b17c:	0800b679 	.word	0x0800b679
 800b180:	0800b4fd 	.word	0x0800b4fd
 800b184:	0800b679 	.word	0x0800b679
 800b188:	0800b679 	.word	0x0800b679
 800b18c:	0800b59f 	.word	0x0800b59f
 800b190:	0800b5cb 	.word	0x0800b5cb
 800b194:	0800b60b 	.word	0x0800b60b
 800b198:	0800b643 	.word	0x0800b643
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800b19c:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b1a0:	442b      	add	r3, r5
 800b1a2:	930a      	str	r3, [sp, #40]	; 0x28
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800b1a4:	1b33      	subs	r3, r6, r4
 800b1a6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800b1aa:	f640 604c 	movw	r0, #3660	; 0xe4c
 800b1ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b1b2:	f890 311a 	ldrb.w	r3, [r0, #282]	; 0x11a
 800b1b6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b1ba:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800b1be:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800b1c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800b1c6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b1ca:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800b1ce:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800b1d2:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800b1d6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800b1da:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 800b1de:	9309      	str	r3, [sp, #36]	; 0x24
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800b1e0:	ab07      	add	r3, sp, #28
 800b1e2:	9301      	str	r3, [sp, #4]
 800b1e4:	ab06      	add	r3, sp, #24
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	f10d 0317 	add.w	r3, sp, #23
 800b1ec:	f10d 0216 	add.w	r2, sp, #22
 800b1f0:	a909      	add	r1, sp, #36	; 0x24
 800b1f2:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800b1f6:	f004 fb86 	bl	800f906 <RegionLinkAdrReq>
 800b1fa:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
                    if( ( status & 0x07 ) == 0x07 )
 800b1fe:	f000 0007 	and.w	r0, r0, #7
 800b202:	2807      	cmp	r0, #7
 800b204:	d01e      	beq.n	800b244 <ProcessMacCommands+0x1a0>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800b206:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b20a:	2b04      	cmp	r3, #4
 800b20c:	d916      	bls.n	800b23c <ProcessMacCommands+0x198>
 800b20e:	f04f 0a00 	mov.w	sl, #0
 800b212:	f64c 4bcd 	movw	fp, #52429	; 0xcccd
 800b216:	f6cc 4bcc 	movt	fp, #52428	; 0xcccc
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800b21a:	2201      	movs	r2, #1
 800b21c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 800b220:	2003      	movs	r0, #3
 800b222:	f003 fb78 	bl	800e916 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800b226:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b22a:	f10a 0a01 	add.w	sl, sl, #1
 800b22e:	fbab 2103 	umull	r2, r1, fp, r3
 800b232:	fa5f f28a 	uxtb.w	r2, sl
 800b236:	ebb2 0f91 	cmp.w	r2, r1, lsr #2
 800b23a:	d3ee      	bcc.n	800b21a <ProcessMacCommands+0x176>
                    macIndex += linkAdrNbBytesParsed - 1;
 800b23c:	4423      	add	r3, r4
 800b23e:	fa5f fa83 	uxtb.w	sl, r3
 800b242:	e76e      	b.n	800b122 <ProcessMacCommands+0x7e>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800b244:	f640 634c 	movw	r3, #3660	; 0xe4c
 800b248:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b24c:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800b250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800b254:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800b258:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800b25c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800b260:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800b264:	e7cf      	b.n	800b206 <ProcessMacCommands+0x162>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800b266:	3402      	adds	r4, #2
 800b268:	b2e4      	uxtb	r4, r4
 800b26a:	f815 200a 	ldrb.w	r2, [r5, sl]
 800b26e:	f002 020f 	and.w	r2, r2, #15
 800b272:	f640 634c 	movw	r3, #3660	; 0xe4c
 800b276:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b27a:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800b27e:	2101      	movs	r1, #1
 800b280:	fa01 f202 	lsl.w	r2, r1, r2
 800b284:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800b288:	2200      	movs	r2, #0
 800b28a:	a90d      	add	r1, sp, #52	; 0x34
 800b28c:	2004      	movs	r0, #4
 800b28e:	f003 fb42 	bl	800e916 <LoRaMacCommandsAddCmd>
                break;
 800b292:	e749      	b.n	800b128 <ProcessMacCommands+0x84>
                status = 0x07;
 800b294:	2307      	movs	r3, #7
 800b296:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800b29a:	f815 300a 	ldrb.w	r3, [r5, sl]
 800b29e:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800b2a2:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800b2a6:	f003 030f 	and.w	r3, r3, #15
 800b2aa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                macIndex++;
 800b2ae:	1ca3      	adds	r3, r4, #2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	5ce9      	ldrb	r1, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800b2b4:	1d23      	adds	r3, r4, #4
 800b2b6:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800b2b8:	1ce2      	adds	r2, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800b2ba:	b2d2      	uxtb	r2, r2
 800b2bc:	5caa      	ldrb	r2, [r5, r2]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800b2be:	3405      	adds	r4, #5
 800b2c0:	b2e4      	uxtb	r4, r4
 800b2c2:	5ceb      	ldrb	r3, [r5, r3]
 800b2c4:	041b      	lsls	r3, r3, #16
 800b2c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b2ca:	430b      	orrs	r3, r1
                rxParamSetupReq.Frequency *= 100;
 800b2cc:	2264      	movs	r2, #100	; 0x64
 800b2ce:	fb02 f303 	mul.w	r3, r2, r3
 800b2d2:	930a      	str	r3, [sp, #40]	; 0x28
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800b2d4:	f640 634c 	movw	r3, #3660	; 0xe4c
 800b2d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b2dc:	a909      	add	r1, sp, #36	; 0x24
 800b2de:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b2e2:	f004 fb22 	bl	800f92a <RegionRxParamSetupReq>
 800b2e6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
                if( ( status & 0x07 ) == 0x07 )
 800b2ea:	f000 0307 	and.w	r3, r0, #7
 800b2ee:	2b07      	cmp	r3, #7
 800b2f0:	d007      	beq.n	800b302 <ProcessMacCommands+0x25e>
                macCmdPayload[0] = status;
 800b2f2:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	a90d      	add	r1, sp, #52	; 0x34
 800b2fa:	2005      	movs	r0, #5
 800b2fc:	f003 fb0b 	bl	800e916 <LoRaMacCommandsAddCmd>
                break;
 800b300:	e712      	b.n	800b128 <ProcessMacCommands+0x84>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800b302:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 800b306:	f640 634c 	movw	r3, #3660	; 0xe4c
 800b30a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b30e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800b312:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800b316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b318:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800b31a:	675a      	str	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800b31c:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800b320:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800b324:	e7e5      	b.n	800b2f2 <ProcessMacCommands+0x24e>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800b326:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 800b32a:	b183      	cbz	r3, 800b34e <ProcessMacCommands+0x2aa>
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	b183      	cbz	r3, 800b352 <ProcessMacCommands+0x2ae>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800b330:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800b332:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800b336:	9b03      	ldr	r3, [sp, #12]
 800b338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b33c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800b340:	2202      	movs	r2, #2
 800b342:	a90d      	add	r1, sp, #52	; 0x34
 800b344:	2006      	movs	r0, #6
 800b346:	f003 fae6 	bl	800e916 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800b34a:	4654      	mov	r4, sl
                break;
 800b34c:	e6ec      	b.n	800b128 <ProcessMacCommands+0x84>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800b34e:	20ff      	movs	r0, #255	; 0xff
 800b350:	e7ef      	b.n	800b332 <ProcessMacCommands+0x28e>
 800b352:	20ff      	movs	r0, #255	; 0xff
 800b354:	e7ed      	b.n	800b332 <ProcessMacCommands+0x28e>
                status = 0x03;
 800b356:	2303      	movs	r3, #3
 800b358:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                newChannelReq.ChannelId = payload[macIndex++];
 800b35c:	f815 300a 	ldrb.w	r3, [r5, sl]
 800b360:	f88d 3020 	strb.w	r3, [sp, #32]
                newChannelReq.NewChannel = &chParam;
 800b364:	ab09      	add	r3, sp, #36	; 0x24
 800b366:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800b368:	1d62      	adds	r2, r4, #5
 800b36a:	b2d2      	uxtb	r2, r2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800b36c:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	5ce9      	ldrb	r1, [r5, r3]
 800b372:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800b374:	b2db      	uxtb	r3, r3
 800b376:	5ceb      	ldrb	r3, [r5, r3]
 800b378:	041b      	lsls	r3, r3, #16
 800b37a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                newChannelReq.ChannelId = payload[macIndex++];
 800b37e:	1ca1      	adds	r1, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800b380:	b2c9      	uxtb	r1, r1
 800b382:	5c69      	ldrb	r1, [r5, r1]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800b384:	430b      	orrs	r3, r1
                chParam.Frequency *= 100;
 800b386:	2164      	movs	r1, #100	; 0x64
 800b388:	fb01 f303 	mul.w	r3, r1, r3
 800b38c:	9309      	str	r3, [sp, #36]	; 0x24
                chParam.Rx1Frequency = 0;
 800b38e:	2300      	movs	r3, #0
 800b390:	930a      	str	r3, [sp, #40]	; 0x28
                chParam.DrRange.Value = payload[macIndex++];
 800b392:	3406      	adds	r4, #6
 800b394:	b2e4      	uxtb	r4, r4
 800b396:	5cab      	ldrb	r3, [r5, r2]
 800b398:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800b39c:	f640 634c 	movw	r3, #3660	; 0xe4c
 800b3a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b3a4:	a907      	add	r1, sp, #28
 800b3a6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b3aa:	f004 fac7 	bl	800f93c <RegionNewChannelReq>
 800b3ae:	b2c3      	uxtb	r3, r0
 800b3b0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                if( ( int8_t )status >= 0 )
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	f6ff aeb7 	blt.w	800b128 <ProcessMacCommands+0x84>
                    macCmdPayload[0] = status;
 800b3ba:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800b3be:	2201      	movs	r2, #1
 800b3c0:	a90d      	add	r1, sp, #52	; 0x34
 800b3c2:	2007      	movs	r0, #7
 800b3c4:	f003 faa7 	bl	800e916 <LoRaMacCommandsAddCmd>
                break;
 800b3c8:	e6ae      	b.n	800b128 <ProcessMacCommands+0x84>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800b3ca:	3402      	adds	r4, #2
 800b3cc:	b2e4      	uxtb	r4, r4
 800b3ce:	f815 300a 	ldrb.w	r3, [r5, sl]
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800b3d2:	f003 030f 	and.w	r3, r3, #15
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	bf38      	it	cc
 800b3da:	2301      	movcc	r3, #1
 800b3dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b3e0:	fb02 f303 	mul.w	r3, r2, r3
 800b3e4:	f640 624c 	movw	r2, #3660	; 0xe4c
 800b3e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800b3ec:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800b3ee:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b3f2:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	a90d      	add	r1, sp, #52	; 0x34
 800b3f8:	2008      	movs	r0, #8
 800b3fa:	f003 fa8c 	bl	800e916 <LoRaMacCommandsAddCmd>
                break;
 800b3fe:	e693      	b.n	800b128 <ProcessMacCommands+0x84>
                uint8_t eirpDwellTime = payload[macIndex++];
 800b400:	3402      	adds	r4, #2
 800b402:	b2e4      	uxtb	r4, r4
 800b404:	f815 300a 	ldrb.w	r3, [r5, sl]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800b408:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800b40c:	f88d 2019 	strb.w	r2, [sp, #25]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800b410:	f3c3 1200 	ubfx	r2, r3, #4, #1
 800b414:	f88d 2018 	strb.w	r2, [sp, #24]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800b418:	f003 030f 	and.w	r3, r3, #15
 800b41c:	f88d 301a 	strb.w	r3, [sp, #26]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800b420:	f640 634c 	movw	r3, #3660	; 0xe4c
 800b424:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b428:	a906      	add	r1, sp, #24
 800b42a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b42e:	f004 fa8e 	bl	800f94e <RegionTxParamSetupReq>
 800b432:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b436:	f43f ae77 	beq.w	800b128 <ProcessMacCommands+0x84>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800b43a:	f89d b018 	ldrb.w	fp, [sp, #24]
 800b43e:	f640 6a4c 	movw	sl, #3660	; 0xe4c
 800b442:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 800b446:	f88a b07c 	strb.w	fp, [sl, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800b44a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b44e:	f88a 307d 	strb.w	r3, [sl, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800b452:	f245 1398 	movw	r3, #20888	; 0x5198
 800b456:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b45a:	f89d 201a 	ldrb.w	r2, [sp, #26]
 800b45e:	5c98      	ldrb	r0, [r3, r2]
 800b460:	f7f5 fc16 	bl	8000c90 <__aeabi_ui2f>
 800b464:	f8ca 0080 	str.w	r0, [sl, #128]	; 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800b468:	2302      	movs	r3, #2
 800b46a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b46e:	f88d b026 	strb.w	fp, [sp, #38]	; 0x26
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b472:	a909      	add	r1, sp, #36	; 0x24
 800b474:	f89a 0048 	ldrb.w	r0, [sl, #72]	; 0x48
 800b478:	f004 f9e7 	bl	800f84a <RegionGetPhyParam>
 800b47c:	9007      	str	r0, [sp, #28]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800b47e:	b240      	sxtb	r0, r0
 800b480:	f99a 3039 	ldrsb.w	r3, [sl, #57]	; 0x39
 800b484:	4298      	cmp	r0, r3
 800b486:	bfb8      	it	lt
 800b488:	4618      	movlt	r0, r3
 800b48a:	f88a 0039 	strb.w	r0, [sl, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800b48e:	2200      	movs	r2, #0
 800b490:	a90d      	add	r1, sp, #52	; 0x34
 800b492:	2009      	movs	r0, #9
 800b494:	f003 fa3f 	bl	800e916 <LoRaMacCommandsAddCmd>
                break;
 800b498:	e646      	b.n	800b128 <ProcessMacCommands+0x84>
                status = 0x03;
 800b49a:	2303      	movs	r3, #3
 800b49c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                dlChannelReq.ChannelId = payload[macIndex++];
 800b4a0:	f815 300a 	ldrb.w	r3, [r5, sl]
 800b4a4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b4a8:	1ca3      	adds	r3, r4, #2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	5ce9      	ldrb	r1, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800b4ae:	1d23      	adds	r3, r4, #4
 800b4b0:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800b4b2:	1ce2      	adds	r2, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800b4b4:	b2d2      	uxtb	r2, r2
 800b4b6:	5caa      	ldrb	r2, [r5, r2]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800b4b8:	3405      	adds	r4, #5
 800b4ba:	b2e4      	uxtb	r4, r4
 800b4bc:	5ceb      	ldrb	r3, [r5, r3]
 800b4be:	041b      	lsls	r3, r3, #16
 800b4c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b4c4:	430b      	orrs	r3, r1
                dlChannelReq.Rx1Frequency *= 100;
 800b4c6:	2264      	movs	r2, #100	; 0x64
 800b4c8:	fb02 f303 	mul.w	r3, r2, r3
 800b4cc:	930a      	str	r3, [sp, #40]	; 0x28
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800b4ce:	f640 634c 	movw	r3, #3660	; 0xe4c
 800b4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b4d6:	a909      	add	r1, sp, #36	; 0x24
 800b4d8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b4dc:	f004 fa40 	bl	800f960 <RegionDlChannelReq>
 800b4e0:	b2c3      	uxtb	r3, r0
 800b4e2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                if( ( int8_t )status >= 0 )
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	f6ff ae1e 	blt.w	800b128 <ProcessMacCommands+0x84>
                    macCmdPayload[0] = status;
 800b4ec:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	a90d      	add	r1, sp, #52	; 0x34
 800b4f4:	200a      	movs	r0, #10
 800b4f6:	f003 fa0e 	bl	800e916 <LoRaMacCommandsAddCmd>
                break;
 800b4fa:	e615      	b.n	800b128 <ProcessMacCommands+0x84>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800b4fc:	200a      	movs	r0, #10
 800b4fe:	f003 fc47 	bl	800ed90 <LoRaMacConfirmQueueIsCmdActive>
 800b502:	b908      	cbnz	r0, 800b508 <ProcessMacCommands+0x464>
        switch( payload[macIndex++] )
 800b504:	4654      	mov	r4, sl
 800b506:	e60f      	b.n	800b128 <ProcessMacCommands+0x84>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800b508:	210a      	movs	r1, #10
 800b50a:	2000      	movs	r0, #0
 800b50c:	f003 fbeb 	bl	800ece6 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 800b510:	2300      	movs	r3, #0
 800b512:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800b516:	1d62      	adds	r2, r4, #5
 800b518:	b2d2      	uxtb	r2, r2
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800b51a:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	5ce9      	ldrb	r1, [r5, r3]
 800b520:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800b522:	b2db      	uxtb	r3, r3
 800b524:	5ceb      	ldrb	r3, [r5, r3]
 800b526:	041b      	lsls	r3, r3, #16
 800b528:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800b52c:	f815 100a 	ldrb.w	r1, [r5, sl]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800b530:	ea43 0a01 	orr.w	sl, r3, r1
 800b534:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800b536:	b2db      	uxtb	r3, r3
 800b538:	5ceb      	ldrb	r3, [r5, r3]
 800b53a:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800b53e:	3406      	adds	r4, #6
 800b540:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800b542:	5cab      	ldrb	r3, [r5, r2]
 800b544:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b548:	fb02 f303 	mul.w	r3, r2, r3
 800b54c:	121b      	asrs	r3, r3, #8
 800b54e:	f8ad 3020 	strh.w	r3, [sp, #32]
                    sysTimeCurrent = SysTimeGet( );
 800b552:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800b556:	4658      	mov	r0, fp
 800b558:	f008 f880 	bl	801365c <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800b55c:	eb0a 0309 	add.w	r3, sl, r9
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800b560:	9307      	str	r3, [sp, #28]
 800b562:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800b56c:	f10d 0a1c 	add.w	sl, sp, #28
 800b570:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800b574:	a80e      	add	r0, sp, #56	; 0x38
 800b576:	f008 f82a 	bl	80135ce <SysTimeSub>
 800b57a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b580:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800b584:	4650      	mov	r0, sl
 800b586:	f008 f807 	bl	8013598 <SysTimeAdd>
                    SysTimeSet( sysTime );
 800b58a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800b58e:	f008 f839 	bl	8013604 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800b592:	f003 f9ab 	bl	800e8ec <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800b596:	2301      	movs	r3, #1
 800b598:	f887 3430 	strb.w	r3, [r7, #1072]	; 0x430
 800b59c:	e5c4      	b.n	800b128 <ProcessMacCommands+0x84>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800b59e:	200d      	movs	r0, #13
 800b5a0:	f003 fbf6 	bl	800ed90 <LoRaMacConfirmQueueIsCmdActive>
 800b5a4:	b908      	cbnz	r0, 800b5aa <ProcessMacCommands+0x506>
        switch( payload[macIndex++] )
 800b5a6:	4654      	mov	r4, sl
 800b5a8:	e5be      	b.n	800b128 <ProcessMacCommands+0x84>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800b5aa:	210d      	movs	r1, #13
 800b5ac:	2000      	movs	r0, #0
 800b5ae:	f003 fb9a 	bl	800ece6 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800b5b2:	f897 3480 	ldrb.w	r3, [r7, #1152]	; 0x480
 800b5b6:	3b04      	subs	r3, #4
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d801      	bhi.n	800b5c2 <ProcessMacCommands+0x51e>
        switch( payload[macIndex++] )
 800b5be:	4654      	mov	r4, sl
 800b5c0:	e5b2      	b.n	800b128 <ProcessMacCommands+0x84>
                        LoRaMacClassBPingSlotInfoAns( );
 800b5c2:	f003 f98f 	bl	800e8e4 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800b5c6:	4654      	mov	r4, sl
 800b5c8:	e5ae      	b.n	800b128 <ProcessMacCommands+0x84>
                frequency = ( uint32_t )payload[macIndex++];
 800b5ca:	f815 100a 	ldrb.w	r1, [r5, sl]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800b5ce:	1d22      	adds	r2, r4, #4
 800b5d0:	b2d2      	uxtb	r2, r2
                frequency = ( uint32_t )payload[macIndex++];
 800b5d2:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	5ce8      	ldrb	r0, [r5, r3]
 800b5d8:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	5ceb      	ldrb	r3, [r5, r3]
 800b5de:	041b      	lsls	r3, r3, #16
 800b5e0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800b5e4:	430b      	orrs	r3, r1
                datarate = payload[macIndex++] & 0x0F;
 800b5e6:	3405      	adds	r4, #5
 800b5e8:	b2e4      	uxtb	r4, r4
 800b5ea:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800b5ec:	2164      	movs	r1, #100	; 0x64
 800b5ee:	fb03 f101 	mul.w	r1, r3, r1
 800b5f2:	f000 000f 	and.w	r0, r0, #15
 800b5f6:	f003 f976 	bl	800e8e6 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800b5fa:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800b5fe:	2201      	movs	r2, #1
 800b600:	a90d      	add	r1, sp, #52	; 0x34
 800b602:	2011      	movs	r0, #17
 800b604:	f003 f987 	bl	800e916 <LoRaMacCommandsAddCmd>
                break;
 800b608:	e58e      	b.n	800b128 <ProcessMacCommands+0x84>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800b60a:	200e      	movs	r0, #14
 800b60c:	f003 fbc0 	bl	800ed90 <LoRaMacConfirmQueueIsCmdActive>
 800b610:	b908      	cbnz	r0, 800b616 <ProcessMacCommands+0x572>
        switch( payload[macIndex++] )
 800b612:	4654      	mov	r4, sl
 800b614:	e588      	b.n	800b128 <ProcessMacCommands+0x84>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800b616:	210e      	movs	r1, #14
 800b618:	2000      	movs	r0, #0
 800b61a:	f003 fb64 	bl	800ece6 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800b61e:	1ce3      	adds	r3, r4, #3
 800b620:	b2db      	uxtb	r3, r3
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800b622:	1ca2      	adds	r2, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800b624:	b2d2      	uxtb	r2, r2
 800b626:	f815 c002 	ldrb.w	ip, [r5, r2]
 800b62a:	f815 000a 	ldrb.w	r0, [r5, sl]
                    beaconTimingChannel = payload[macIndex++];
 800b62e:	3404      	adds	r4, #4
 800b630:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800b632:	f8d8 2000 	ldr.w	r2, [r8]
 800b636:	5ce9      	ldrb	r1, [r5, r3]
 800b638:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 800b63c:	f003 f955 	bl	800e8ea <LoRaMacClassBBeaconTimingAns>
 800b640:	e572      	b.n	800b128 <ProcessMacCommands+0x84>
                    frequency = ( uint32_t )payload[macIndex++];
 800b642:	f815 100a 	ldrb.w	r1, [r5, sl]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800b646:	1ce3      	adds	r3, r4, #3
 800b648:	b2db      	uxtb	r3, r3
                    frequency = ( uint32_t )payload[macIndex++];
 800b64a:	1ca2      	adds	r2, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800b64c:	b2d2      	uxtb	r2, r2
 800b64e:	5caa      	ldrb	r2, [r5, r2]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800b650:	3404      	adds	r4, #4
 800b652:	b2e4      	uxtb	r4, r4
 800b654:	5ceb      	ldrb	r3, [r5, r3]
 800b656:	041b      	lsls	r3, r3, #16
 800b658:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b65c:	430b      	orrs	r3, r1
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800b65e:	2064      	movs	r0, #100	; 0x64
 800b660:	fb03 f000 	mul.w	r0, r3, r0
 800b664:	f003 f943 	bl	800e8ee <LoRaMacClassBBeaconFreqReq>
 800b668:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800b66c:	2201      	movs	r2, #1
 800b66e:	a90d      	add	r1, sp, #52	; 0x34
 800b670:	2013      	movs	r0, #19
 800b672:	f003 f950 	bl	800e916 <LoRaMacCommandsAddCmd>
                break;
 800b676:	e557      	b.n	800b128 <ProcessMacCommands+0x84>
}
 800b678:	b011      	add	sp, #68	; 0x44
 800b67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67e:	bf00      	nop

0800b680 <HandleRadioRxErrorTimeout>:
{
 800b680:	b570      	push	{r4, r5, r6, lr}
 800b682:	4605      	mov	r5, r0
 800b684:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b686:	f640 634c 	movw	r3, #3660	; 0xe4c
 800b68a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b68e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b692:	2b02      	cmp	r3, #2
 800b694:	d005      	beq.n	800b6a2 <HandleRadioRxErrorTimeout+0x22>
        Radio.Sleep( );
 800b696:	f245 23d0 	movw	r3, #21200	; 0x52d0
 800b69a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a0:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800b6a2:	f003 f90e 	bl	800e8c2 <LoRaMacClassBIsBeaconExpected>
 800b6a6:	4606      	mov	r6, r0
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	d13d      	bne.n	800b728 <HandleRadioRxErrorTimeout+0xa8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b6ac:	f640 634c 	movw	r3, #3660	; 0xe4c
 800b6b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b6b4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d046      	beq.n	800b74a <HandleRadioRxErrorTimeout+0xca>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800b6bc:	f640 1344 	movw	r3, #2372	; 0x944
 800b6c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b6c4:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d158      	bne.n	800b77e <HandleRadioRxErrorTimeout+0xfe>
            if( MacCtx.NodeAckRequested == true )
 800b6cc:	f640 1344 	movw	r3, #2372	; 0x944
 800b6d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b6d4:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800b6d8:	b12b      	cbz	r3, 800b6e6 <HandleRadioRxErrorTimeout+0x66>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800b6da:	f640 1344 	movw	r3, #2372	; 0x944
 800b6de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b6e2:	f883 5435 	strb.w	r5, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	f003 fb2c 	bl	800ed44 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800b6ec:	f640 634c 	movw	r3, #3660	; 0xe4c
 800b6f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b6f4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b6f6:	f008 fb39 	bl	8013d6c <UTIL_TIMER_GetElapsedTime>
 800b6fa:	f640 1344 	movw	r3, #2372	; 0x944
 800b6fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b702:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800b706:	4298      	cmp	r0, r3
 800b708:	d31c      	bcc.n	800b744 <HandleRadioRxErrorTimeout+0xc4>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800b70a:	f640 1444 	movw	r4, #2372	; 0x944
 800b70e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800b712:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800b716:	f008 fb69 	bl	8013dec <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800b71a:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 800b71e:	f043 0310 	orr.w	r3, r3, #16
 800b722:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
 800b726:	e00d      	b.n	800b744 <HandleRadioRxErrorTimeout+0xc4>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800b728:	2002      	movs	r0, #2
 800b72a:	f003 f8c0 	bl	800e8ae <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800b72e:	2000      	movs	r0, #0
 800b730:	f003 f8c2 	bl	800e8b8 <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b734:	f640 634c 	movw	r3, #3660	; 0xe4c
 800b738:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b73c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b740:	2b01      	cmp	r3, #1
 800b742:	d002      	beq.n	800b74a <HandleRadioRxErrorTimeout+0xca>
    UpdateRxSlotIdleState( );
 800b744:	f7ff fbf5 	bl	800af32 <UpdateRxSlotIdleState>
}
 800b748:	bd70      	pop	{r4, r5, r6, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800b74a:	f003 f8bc 	bl	800e8c6 <LoRaMacClassBIsPingExpected>
 800b74e:	b928      	cbnz	r0, 800b75c <HandleRadioRxErrorTimeout+0xdc>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800b750:	f003 f8bb 	bl	800e8ca <LoRaMacClassBIsMulticastExpected>
 800b754:	b960      	cbnz	r0, 800b770 <HandleRadioRxErrorTimeout+0xf0>
    if( classBRx == false )
 800b756:	2e00      	cmp	r6, #0
 800b758:	d1f4      	bne.n	800b744 <HandleRadioRxErrorTimeout+0xc4>
 800b75a:	e7af      	b.n	800b6bc <HandleRadioRxErrorTimeout+0x3c>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b75c:	2000      	movs	r0, #0
 800b75e:	f003 f8a7 	bl	800e8b0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800b762:	2000      	movs	r0, #0
 800b764:	f003 f8a9 	bl	800e8ba <LoRaMacClassBPingSlotTimerEvent>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800b768:	f003 f8af 	bl	800e8ca <LoRaMacClassBIsMulticastExpected>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d0e9      	beq.n	800b744 <HandleRadioRxErrorTimeout+0xc4>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b770:	2000      	movs	r0, #0
 800b772:	f003 f89e 	bl	800e8b2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800b776:	2000      	movs	r0, #0
 800b778:	f003 f8a0 	bl	800e8bc <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800b77c:	e7e2      	b.n	800b744 <HandleRadioRxErrorTimeout+0xc4>
            if( MacCtx.NodeAckRequested == true )
 800b77e:	f640 1344 	movw	r3, #2372	; 0x944
 800b782:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b786:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800b78a:	b12b      	cbz	r3, 800b798 <HandleRadioRxErrorTimeout+0x118>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800b78c:	f640 1344 	movw	r3, #2372	; 0x944
 800b790:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b794:	f883 4435 	strb.w	r4, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800b798:	4620      	mov	r0, r4
 800b79a:	f003 fad3 	bl	800ed44 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b79e:	f640 634c 	movw	r3, #3660	; 0xe4c
 800b7a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b7a6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	d0ca      	beq.n	800b744 <HandleRadioRxErrorTimeout+0xc4>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800b7ae:	f640 1344 	movw	r3, #2372	; 0x944
 800b7b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b7b6:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800b7ba:	f042 0210 	orr.w	r2, r2, #16
 800b7be:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800b7c2:	e7bf      	b.n	800b744 <HandleRadioRxErrorTimeout+0xc4>

0800b7c4 <ScheduleTx>:
{
 800b7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c8:	b092      	sub	sp, #72	; 0x48
 800b7ca:	4605      	mov	r5, r0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800b7cc:	f003 f879 	bl	800e8c2 <LoRaMacClassBIsBeaconExpected>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	f040 8201 	bne.w	800bbd8 <ScheduleTx+0x414>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b7d6:	f640 634c 	movw	r3, #3660	; 0xe4c
 800b7da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b7de:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d013      	beq.n	800b80e <ScheduleTx+0x4a>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800b7e6:	f640 634c 	movw	r3, #3660	; 0xe4c
 800b7ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7f0:	b1c3      	cbz	r3, 800b824 <ScheduleTx+0x60>
    switch( MacCtx.TxMsg.Type )
 800b7f2:	f640 1344 	movw	r3, #2372	; 0x944
 800b7f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b7fa:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800b7fe:	b313      	cbz	r3, 800b846 <ScheduleTx+0x82>
 800b800:	2b04      	cmp	r3, #4
 800b802:	f000 80a1 	beq.w	800b948 <ScheduleTx+0x184>
 800b806:	2003      	movs	r0, #3
}
 800b808:	b012      	add	sp, #72	; 0x48
 800b80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800b80e:	f003 f85a 	bl	800e8c6 <LoRaMacClassBIsPingExpected>
 800b812:	2800      	cmp	r0, #0
 800b814:	f040 81e2 	bne.w	800bbdc <ScheduleTx+0x418>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800b818:	f003 f857 	bl	800e8ca <LoRaMacClassBIsMulticastExpected>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	d0e2      	beq.n	800b7e6 <ScheduleTx+0x22>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800b820:	200f      	movs	r0, #15
    if( status != LORAMAC_STATUS_OK )
 800b822:	e7f1      	b.n	800b808 <ScheduleTx+0x44>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800b824:	f640 624c 	movw	r2, #3660	; 0xe4c
 800b828:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800b82c:	f8b2 311e 	ldrh.w	r3, [r2, #286]	; 0x11e
 800b830:	3b01      	subs	r3, #1
 800b832:	f640 1144 	movw	r1, #2372	; 0x944
 800b836:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b83a:	f8d1 1414 	ldr.w	r1, [r1, #1044]	; 0x414
 800b83e:	fb01 f303 	mul.w	r3, r1, r3
 800b842:	6313      	str	r3, [r2, #48]	; 0x30
 800b844:	e7d5      	b.n	800b7f2 <ScheduleTx+0x2e>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800b846:	f640 204c 	movw	r0, #2636	; 0xa4c
 800b84a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b84e:	f003 ff53 	bl	800f6f8 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800b852:	2800      	cmp	r0, #0
 800b854:	f040 81be 	bne.w	800bbd4 <ScheduleTx+0x410>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800b858:	f640 1344 	movw	r3, #2372	; 0x944
 800b85c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b860:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800b864:	f640 1644 	movw	r6, #2372	; 0x944
 800b868:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800b86c:	8033      	strh	r3, [r6, #0]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800b86e:	f640 644c 	movw	r4, #3660	; 0xe4c
 800b872:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800b876:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b878:	930a      	str	r3, [sp, #40]	; 0x28
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b87a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800b87e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800b882:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800b886:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800b88a:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800b88e:	4640      	mov	r0, r8
 800b890:	f007 ff0b 	bl	80136aa <SysTimeGetMcuTime>
 800b894:	af02      	add	r7, sp, #8
 800b896:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800b8a0:	e898 0006 	ldmia.w	r8, {r1, r2}
 800b8a4:	4638      	mov	r0, r7
 800b8a6:	f007 fe92 	bl	80135ce <SysTimeSub>
 800b8aa:	ab0d      	add	r3, sp, #52	; 0x34
 800b8ac:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b8b0:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800b8b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b8b6:	930b      	str	r3, [sp, #44]	; 0x2c
    nextChan.LastTxIsJoinRequest = false;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    nextChan.Joined = true;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    nextChan.PktLen = MacCtx.PktBufferLen;
 800b8c4:	8833      	ldrh	r3, [r6, #0]
 800b8c6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b8ca:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 800b8ce:	b92b      	cbnz	r3, 800b8dc <ScheduleTx+0x118>
        nextChan.LastTxIsJoinRequest = true;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        nextChan.Joined = false;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800b8dc:	f640 1244 	movw	r2, #2372	; 0x944
 800b8e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800b8e4:	f640 604c 	movw	r0, #3660	; 0xe4c
 800b8e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b8ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	f202 4384 	addw	r3, r2, #1156	; 0x484
 800b8f6:	f202 4211 	addw	r2, r2, #1041	; 0x411
 800b8fa:	a90a      	add	r1, sp, #40	; 0x28
 800b8fc:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800b900:	f004 f842 	bl	800f988 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800b904:	b380      	cbz	r0, 800b968 <ScheduleTx+0x1a4>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800b906:	280b      	cmp	r0, #11
 800b908:	f47f af7e 	bne.w	800b808 <ScheduleTx+0x44>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800b90c:	f640 1344 	movw	r3, #2372	; 0x944
 800b910:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b914:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
 800b918:	b331      	cbz	r1, 800b968 <ScheduleTx+0x1a4>
                if( allowDelayedTx == true )
 800b91a:	2d00      	cmp	r5, #0
 800b91c:	f43f af74 	beq.w	800b808 <ScheduleTx+0x44>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800b920:	f640 1344 	movw	r3, #2372	; 0x944
 800b924:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b928:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800b92c:	f042 0220 	orr.w	r2, r2, #32
 800b930:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800b934:	f503 745a 	add.w	r4, r3, #872	; 0x368
 800b938:	4620      	mov	r0, r4
 800b93a:	f008 fb12 	bl	8013f62 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800b93e:	4620      	mov	r0, r4
 800b940:	f008 fabf 	bl	8013ec2 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800b944:	2000      	movs	r0, #0
 800b946:	e75f      	b.n	800b808 <ScheduleTx+0x44>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800b948:	f640 204c 	movw	r0, #2636	; 0xa4c
 800b94c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b950:	f003 ff08 	bl	800f764 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800b954:	2800      	cmp	r0, #0
 800b956:	f040 813d 	bne.w	800bbd4 <ScheduleTx+0x410>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800b95a:	f640 1344 	movw	r3, #2372	; 0x944
 800b95e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b962:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
            break;
 800b966:	e77d      	b.n	800b864 <ScheduleTx+0xa0>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800b968:	f640 644c 	movw	r4, #3660	; 0xe4c
 800b96c:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800b970:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800b974:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
 800b978:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800b97c:	f894 107d 	ldrb.w	r1, [r4, #125]	; 0x7d
 800b980:	4630      	mov	r0, r6
 800b982:	f004 f816 	bl	800f9b2 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800b986:	f640 1544 	movw	r5, #2372	; 0x944
 800b98a:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800b98e:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b996:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800b99a:	b241      	sxtb	r1, r0
 800b99c:	4630      	mov	r0, r6
 800b99e:	f003 ff8f 	bl	800f8c0 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800b9a2:	f505 7373 	add.w	r3, r5, #972	; 0x3cc
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b9aa:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800b9ae:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800b9b2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b9b6:	f003 ff83 	bl	800f8c0 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800b9ba:	f8d5 03c4 	ldr.w	r0, [r5, #964]	; 0x3c4
 800b9be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b9c0:	4403      	add	r3, r0
 800b9c2:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800b9c6:	f8d5 13d8 	ldr.w	r1, [r5, #984]	; 0x3d8
 800b9ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b9cc:	440b      	add	r3, r1
 800b9ce:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800b9d2:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
 800b9d6:	2b04      	cmp	r3, #4
 800b9d8:	d008      	beq.n	800b9ec <ScheduleTx+0x228>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800b9da:	4622      	mov	r2, r4
 800b9dc:	6e24      	ldr	r4, [r4, #96]	; 0x60
 800b9de:	4404      	add	r4, r0
 800b9e0:	f8c5 43b0 	str.w	r4, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800b9e4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b9e6:	440a      	add	r2, r1
 800b9e8:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
    size_t macCmdsSize = 0;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	9306      	str	r3, [sp, #24]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800b9f0:	f640 634c 	movw	r3, #3660	; 0xe4c
 800b9f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b9f8:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f040 8088 	bne.w	800bb12 <ScheduleTx+0x34e>
    return SendFrameOnChannel( MacCtx.Channel );
 800ba02:	f640 1444 	movw	r4, #2372	; 0x944
 800ba06:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800ba0a:	f894 6411 	ldrb.w	r6, [r4, #1041]	; 0x411
    int8_t txPower = 0;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	f88d 3013 	strb.w	r3, [sp, #19]
    txConfig.Channel = channel;
 800ba14:	f88d 6018 	strb.w	r6, [sp, #24]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ba18:	f640 654c 	movw	r5, #3660	; 0xe4c
 800ba1c:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800ba20:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800ba24:	f88d 3019 	strb.w	r3, [sp, #25]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ba28:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 800ba2c:	f88d 301a 	strb.w	r3, [sp, #26]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800ba30:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800ba34:	9307      	str	r3, [sp, #28]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800ba36:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800ba3a:	9308      	str	r3, [sp, #32]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800ba3c:	8823      	ldrh	r3, [r4, #0]
 800ba3e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800ba42:	f204 4314 	addw	r3, r4, #1044	; 0x414
 800ba46:	f10d 0213 	add.w	r2, sp, #19
 800ba4a:	a906      	add	r1, sp, #24
 800ba4c:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 800ba50:	f003 ff4d 	bl	800f8ee <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	f884 3435 	strb.w	r3, [r4, #1077]	; 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ba5a:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800ba5e:	f884 3436 	strb.w	r3, [r4, #1078]	; 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 800ba62:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800ba66:	f884 3437 	strb.w	r3, [r4, #1079]	; 0x437
    MacCtx.McpsConfirm.Channel = channel;
 800ba6a:	f8c4 6444 	str.w	r6, [r4, #1092]	; 0x444
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800ba6e:	f8d4 3414 	ldr.w	r3, [r4, #1044]	; 0x414
 800ba72:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800ba76:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800ba7a:	f002 ff28 	bl	800e8ce <LoRaMacClassBIsBeaconModeActive>
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	d163      	bne.n	800bb4a <ScheduleTx+0x386>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ba82:	f640 634c 	movw	r3, #3660	; 0xe4c
 800ba86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba8a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d063      	beq.n	800bb5a <ScheduleTx+0x396>
    LoRaMacClassBHaltBeaconing( );
 800ba92:	f002 ff1f 	bl	800e8d4 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800ba96:	f640 634c 	movw	r3, #3660	; 0xe4c
 800ba9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba9e:	f993 5039 	ldrsb.w	r5, [r3, #57]	; 0x39
 800baa2:	f640 1344 	movw	r3, #2372	; 0x944
 800baa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800baaa:	f893 4411 	ldrb.w	r4, [r3, #1041]	; 0x411
    uint32_t fCntUp = 0;
 800baae:	2200      	movs	r2, #0
 800bab0:	9205      	str	r2, [sp, #20]
    switch( MacCtx.TxMsg.Type )
 800bab2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d052      	beq.n	800bb60 <ScheduleTx+0x39c>
 800baba:	2b04      	cmp	r3, #4
 800babc:	f040 8086 	bne.w	800bbcc <ScheduleTx+0x408>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800bac0:	a805      	add	r0, sp, #20
 800bac2:	f003 fb06 	bl	800f0d2 <LoRaMacCryptoGetFCntUp>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d17c      	bne.n	800bbc4 <ScheduleTx+0x400>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800baca:	f640 1344 	movw	r3, #2372	; 0x944
 800bace:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bad2:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800bad6:	b93b      	cbnz	r3, 800bae8 <ScheduleTx+0x324>
 800bad8:	f640 1344 	movw	r3, #2372	; 0x944
 800badc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bae0:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d902      	bls.n	800baee <ScheduleTx+0x32a>
                fCntUp -= 1;
 800bae8:	9b05      	ldr	r3, [sp, #20]
 800baea:	3b01      	subs	r3, #1
 800baec:	9305      	str	r3, [sp, #20]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800baee:	f640 234c 	movw	r3, #2636	; 0xa4c
 800baf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800baf6:	4622      	mov	r2, r4
 800baf8:	b2e9      	uxtb	r1, r5
 800bafa:	9805      	ldr	r0, [sp, #20]
 800bafc:	f003 fb64 	bl	800f1c8 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d161      	bne.n	800bbc8 <ScheduleTx+0x404>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800bb04:	f640 1344 	movw	r3, #2372	; 0x944
 800bb08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb0c:	f893 110c 	ldrb.w	r1, [r3, #268]	; 0x10c
            break;
 800bb10:	e033      	b.n	800bb7a <ScheduleTx+0x3b6>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800bb12:	a806      	add	r0, sp, #24
 800bb14:	f002 fff7 	bl	800eb06 <LoRaMacCommandsGetSizeSerializedCmds>
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	d159      	bne.n	800bbd0 <ScheduleTx+0x40c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800bb1c:	f640 1344 	movw	r3, #2372	; 0x944
 800bb20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb24:	f893 4237 	ldrb.w	r4, [r3, #567]	; 0x237
 800bb28:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800bb2c:	f640 634c 	movw	r3, #3660	; 0xe4c
 800bb30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800bb34:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800bb38:	f7ff fa55 	bl	800afe6 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800bb3c:	b280      	uxth	r0, r0
 800bb3e:	442c      	add	r4, r5
 800bb40:	42a0      	cmp	r0, r4
 800bb42:	f4bf af5e 	bcs.w	800ba02 <ScheduleTx+0x23e>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800bb46:	2008      	movs	r0, #8
 800bb48:	e65e      	b.n	800b808 <ScheduleTx+0x44>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800bb4a:	f8d4 0414 	ldr.w	r0, [r4, #1044]	; 0x414
 800bb4e:	f002 fed0 	bl	800e8f2 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d095      	beq.n	800ba82 <ScheduleTx+0x2be>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800bb56:	2010      	movs	r0, #16
    return SendFrameOnChannel( MacCtx.Channel );
 800bb58:	e656      	b.n	800b808 <ScheduleTx+0x44>
        LoRaMacClassBStopRxSlots( );
 800bb5a:	f002 fecc 	bl	800e8f6 <LoRaMacClassBStopRxSlots>
 800bb5e:	e798      	b.n	800ba92 <ScheduleTx+0x2ce>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800bb60:	f640 204c 	movw	r0, #2636	; 0xa4c
 800bb64:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800bb68:	f003 fb01 	bl	800f16e <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800bb6c:	bb40      	cbnz	r0, 800bbc0 <ScheduleTx+0x3fc>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800bb6e:	f640 1344 	movw	r3, #2372	; 0x944
 800bb72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb76:	f893 110c 	ldrb.w	r1, [r3, #268]	; 0x10c
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800bb7a:	f640 1344 	movw	r3, #2372	; 0x944
 800bb7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb82:	8019      	strh	r1, [r3, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800bb84:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800bb88:	f042 0202 	orr.w	r2, r2, #2
 800bb8c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 800bb90:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800bb94:	b943      	cbnz	r3, 800bba8 <ScheduleTx+0x3e4>
        MacCtx.ChannelsNbTransCounter++;
 800bb96:	f640 1344 	movw	r3, #2372	; 0x944
 800bb9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb9e:	f893 240c 	ldrb.w	r2, [r3, #1036]	; 0x40c
 800bba2:	3201      	adds	r2, #1
 800bba4:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800bba8:	f245 23d0 	movw	r3, #21200	; 0x52d0
 800bbac:	f6c0 0301 	movt	r3, #2049	; 0x801
 800bbb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb2:	f640 1046 	movw	r0, #2374	; 0x946
 800bbb6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800bbba:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 800bbbc:	2000      	movs	r0, #0
 800bbbe:	e623      	b.n	800b808 <ScheduleTx+0x44>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800bbc0:	2011      	movs	r0, #17
 800bbc2:	e621      	b.n	800b808 <ScheduleTx+0x44>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800bbc4:	2012      	movs	r0, #18
 800bbc6:	e61f      	b.n	800b808 <ScheduleTx+0x44>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800bbc8:	2011      	movs	r0, #17
    if( status != LORAMAC_STATUS_OK )
 800bbca:	e61d      	b.n	800b808 <ScheduleTx+0x44>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800bbcc:	2003      	movs	r0, #3
 800bbce:	e61b      	b.n	800b808 <ScheduleTx+0x44>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bbd0:	2013      	movs	r0, #19
 800bbd2:	e619      	b.n	800b808 <ScheduleTx+0x44>
 800bbd4:	2011      	movs	r0, #17
 800bbd6:	e617      	b.n	800b808 <ScheduleTx+0x44>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800bbd8:	200e      	movs	r0, #14
 800bbda:	e615      	b.n	800b808 <ScheduleTx+0x44>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800bbdc:	200f      	movs	r0, #15
 800bbde:	e613      	b.n	800b808 <ScheduleTx+0x44>

0800bbe0 <OnTxDelayedTimerEvent>:
{
 800bbe0:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800bbe2:	f640 1444 	movw	r4, #2372	; 0x944
 800bbe6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800bbea:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800bbee:	f008 f8fd 	bl	8013dec <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800bbf2:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800bbf6:	f023 0320 	bic.w	r3, r3, #32
 800bbfa:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    switch( ScheduleTx( true ) )
 800bbfe:	2001      	movs	r0, #1
 800bc00:	f7ff fde0 	bl	800b7c4 <ScheduleTx>
 800bc04:	b108      	cbz	r0, 800bc0a <OnTxDelayedTimerEvent+0x2a>
 800bc06:	280b      	cmp	r0, #11
 800bc08:	d100      	bne.n	800bc0c <OnTxDelayedTimerEvent+0x2c>
}
 800bc0a:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800bc0c:	f640 624c 	movw	r2, #3660	; 0xe4c
 800bc10:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800bc14:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800bc18:	f884 2436 	strb.w	r2, [r4, #1078]	; 0x436
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800bc1c:	f894 240e 	ldrb.w	r2, [r4, #1038]	; 0x40e
 800bc20:	f884 2439 	strb.w	r2, [r4, #1081]	; 0x439
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800bc24:	2009      	movs	r0, #9
 800bc26:	f884 0435 	strb.w	r0, [r4, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800bc2a:	f003 f88b 	bl	800ed44 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800bc2e:	f7ff f990 	bl	800af52 <StopRetransmission>
}
 800bc32:	e7ea      	b.n	800bc0a <OnTxDelayedTimerEvent+0x2a>

0800bc34 <OpenContinuousRxCWindow>:
{
 800bc34:	b570      	push	{r4, r5, r6, lr}
 800bc36:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800bc38:	f640 644c 	movw	r4, #3660	; 0xe4c
 800bc3c:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800bc40:	f640 1544 	movw	r5, #2372	; 0x944
 800bc44:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800bc48:	f505 7678 	add.w	r6, r5, #992	; 0x3e0
 800bc4c:	9600      	str	r6, [sp, #0]
 800bc4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bc50:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800bc54:	f994 1078 	ldrsb.w	r1, [r4, #120]	; 0x78
 800bc58:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800bc5c:	f003 fe30 	bl	800f8c0 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800bc60:	2302      	movs	r3, #2
 800bc62:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800bc66:	2301      	movs	r3, #1
 800bc68:	f885 33f2 	strb.w	r3, [r5, #1010]	; 0x3f2
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800bc6c:	f205 421c 	addw	r2, r5, #1052	; 0x41c
 800bc70:	4631      	mov	r1, r6
 800bc72:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800bc76:	f003 fe2f 	bl	800f8d8 <RegionRxConfig>
 800bc7a:	b170      	cbz	r0, 800bc9a <OpenContinuousRxCWindow+0x66>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800bc7c:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
 800bc80:	f885 345e 	strb.w	r3, [r5, #1118]	; 0x45e
        Radio.Rx( 0 ); // Continuous mode
 800bc84:	f245 23d0 	movw	r3, #21200	; 0x52d0
 800bc88:	f6c0 0301 	movt	r3, #2049	; 0x801
 800bc8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc8e:	2000      	movs	r0, #0
 800bc90:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800bc92:	f895 33f3 	ldrb.w	r3, [r5, #1011]	; 0x3f3
 800bc96:	f885 3480 	strb.w	r3, [r5, #1152]	; 0x480
}
 800bc9a:	b002      	add	sp, #8
 800bc9c:	bd70      	pop	{r4, r5, r6, pc}

0800bc9e <RxWindowSetup>:
{
 800bc9e:	b538      	push	{r3, r4, r5, lr}
 800bca0:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800bca2:	f008 f8a3 	bl	8013dec <UTIL_TIMER_Stop>
    Radio.Standby( );
 800bca6:	f245 23d0 	movw	r3, #21200	; 0x52d0
 800bcaa:	f6c0 0301 	movt	r3, #2049	; 0x801
 800bcae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb0:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800bcb2:	f640 634c 	movw	r3, #3660	; 0xe4c
 800bcb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bcba:	f640 5260 	movw	r2, #3424	; 0xd60
 800bcbe:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800bcc2:	4621      	mov	r1, r4
 800bcc4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bcc8:	f003 fe06 	bl	800f8d8 <RegionRxConfig>
 800bccc:	b1a8      	cbz	r0, 800bcfa <RxWindowSetup+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800bcce:	f640 1544 	movw	r5, #2372	; 0x944
 800bcd2:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800bcd6:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
 800bcda:	f885 345e 	strb.w	r3, [r5, #1118]	; 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800bcde:	f640 634c 	movw	r3, #3660	; 0xe4c
 800bce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bce6:	f245 22d0 	movw	r2, #21200	; 0x52d0
 800bcea:	f6c0 0201 	movt	r2, #2049	; 0x801
 800bcee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bcf0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800bcf2:	4790      	blx	r2
        MacCtx.RxSlot = rxConfig->RxSlot;
 800bcf4:	7ce3      	ldrb	r3, [r4, #19]
 800bcf6:	f885 3480 	strb.w	r3, [r5, #1152]	; 0x480
}
 800bcfa:	bd38      	pop	{r3, r4, r5, pc}

0800bcfc <OnRxWindow2TimerEvent>:
{
 800bcfc:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800bcfe:	f640 1344 	movw	r3, #2372	; 0x944
 800bd02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd06:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800bd0a:	b903      	cbnz	r3, 800bd0e <OnRxWindow2TimerEvent+0x12>
}
 800bd0c:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800bd0e:	f640 1044 	movw	r0, #2372	; 0x944
 800bd12:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800bd16:	f890 3411 	ldrb.w	r3, [r0, #1041]	; 0x411
 800bd1a:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800bd1e:	f640 634c 	movw	r3, #3660	; 0xe4c
 800bd22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd26:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bd28:	f8c0 23d0 	str.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bd2c:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800bd30:	f880 23dc 	strb.w	r2, [r0, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800bd34:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800bd38:	f880 33dd 	strb.w	r3, [r0, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	f880 33de 	strb.w	r3, [r0, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800bd42:	2301      	movs	r3, #1
 800bd44:	f880 33df 	strb.w	r3, [r0, #991]	; 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800bd48:	f500 7173 	add.w	r1, r0, #972	; 0x3cc
 800bd4c:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800bd50:	f7ff ffa5 	bl	800bc9e <RxWindowSetup>
 800bd54:	e7da      	b.n	800bd0c <OnRxWindow2TimerEvent+0x10>

0800bd56 <OnRxWindow1TimerEvent>:
{
 800bd56:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800bd58:	f640 1044 	movw	r0, #2372	; 0x944
 800bd5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800bd60:	f890 3411 	ldrb.w	r3, [r0, #1041]	; 0x411
 800bd64:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800bd68:	f640 634c 	movw	r3, #3660	; 0xe4c
 800bd6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd70:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800bd74:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bd78:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800bd7c:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800bd80:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800bd84:	f880 33c9 	strb.w	r3, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	f880 33ca 	strb.w	r3, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800bd8e:	f880 33cb 	strb.w	r3, [r0, #971]	; 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800bd92:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800bd96:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800bd9a:	f7ff ff80 	bl	800bc9e <RxWindowSetup>
}
 800bd9e:	bd08      	pop	{r3, pc}

0800bda0 <OnRadioRxTimeout>:
{
 800bda0:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800bda2:	f640 1340 	movw	r3, #2368	; 0x940
 800bda6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bdaa:	781a      	ldrb	r2, [r3, #0]
 800bdac:	f042 0201 	orr.w	r2, r2, #1
 800bdb0:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 800bdb2:	f7ff f900 	bl	800afb6 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800bdb6:	f245 1358 	movw	r3, #20824	; 0x5158
 800bdba:	f6c0 0301 	movt	r3, #2049	; 0x801
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	2100      	movs	r1, #0
 800bdc2:	2002      	movs	r0, #2
 800bdc4:	f008 fa32 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
}
 800bdc8:	bd08      	pop	{r3, pc}

0800bdca <OnRadioTxTimeout>:
{
 800bdca:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800bdcc:	f640 1340 	movw	r3, #2368	; 0x940
 800bdd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bdd4:	781a      	ldrb	r2, [r3, #0]
 800bdd6:	f042 0204 	orr.w	r2, r2, #4
 800bdda:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 800bddc:	f7ff f8eb 	bl	800afb6 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800bde0:	f245 1368 	movw	r3, #20840	; 0x5168
 800bde4:	f6c0 0301 	movt	r3, #2049	; 0x801
 800bde8:	2201      	movs	r2, #1
 800bdea:	2100      	movs	r1, #0
 800bdec:	2002      	movs	r0, #2
 800bdee:	f008 fa1d 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
}
 800bdf2:	bd08      	pop	{r3, pc}

0800bdf4 <OnRadioRxDone>:
{
 800bdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdf6:	4607      	mov	r7, r0
 800bdf8:	460e      	mov	r6, r1
 800bdfa:	4615      	mov	r5, r2
 800bdfc:	461c      	mov	r4, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800bdfe:	f007 ffab 	bl	8013d58 <UTIL_TIMER_GetCurrentTime>
 800be02:	f241 5cb4 	movw	ip, #5556	; 0x15b4
 800be06:	f2c2 0c00 	movt	ip, #8192	; 0x2000
 800be0a:	f8cc 0000 	str.w	r0, [ip]
    RxDoneParams.Payload = payload;
 800be0e:	f8cc 7004 	str.w	r7, [ip, #4]
    RxDoneParams.Size = size;
 800be12:	f8ac 6008 	strh.w	r6, [ip, #8]
    RxDoneParams.Rssi = rssi;
 800be16:	f8ac 500a 	strh.w	r5, [ip, #10]
    RxDoneParams.Snr = snr;
 800be1a:	f88c 400c 	strb.w	r4, [ip, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800be1e:	f640 1340 	movw	r3, #2368	; 0x940
 800be22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800be26:	781a      	ldrb	r2, [r3, #0]
 800be28:	f042 0208 	orr.w	r2, r2, #8
 800be2c:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 800be2e:	f7ff f8c2 	bl	800afb6 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800be32:	f245 1378 	movw	r3, #20856	; 0x5178
 800be36:	f6c0 0301 	movt	r3, #2049	; 0x801
 800be3a:	2201      	movs	r2, #1
 800be3c:	2100      	movs	r1, #0
 800be3e:	2002      	movs	r0, #2
 800be40:	f008 f9f4 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
}
 800be44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be46 <OnRadioTxDone>:
{
 800be46:	b510      	push	{r4, lr}
 800be48:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800be4a:	f007 ff85 	bl	8013d58 <UTIL_TIMER_GetCurrentTime>
 800be4e:	f241 53c4 	movw	r3, #5572	; 0x15c4
 800be52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800be56:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800be58:	466c      	mov	r4, sp
 800be5a:	4620      	mov	r0, r4
 800be5c:	f007 fbfe 	bl	801365c <SysTimeGet>
 800be60:	f640 437c 	movw	r3, #3196	; 0xc7c
 800be64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800be68:	e894 0003 	ldmia.w	r4, {r0, r1}
 800be6c:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800be70:	f640 1340 	movw	r3, #2368	; 0x940
 800be74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800be78:	781a      	ldrb	r2, [r3, #0]
 800be7a:	f042 0210 	orr.w	r2, r2, #16
 800be7e:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 800be80:	f7ff f899 	bl	800afb6 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800be84:	f245 1388 	movw	r3, #20872	; 0x5188
 800be88:	f6c0 0301 	movt	r3, #2049	; 0x801
 800be8c:	2201      	movs	r2, #1
 800be8e:	2100      	movs	r1, #0
 800be90:	2002      	movs	r0, #2
 800be92:	f008 f9cb 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
}
 800be96:	b002      	add	sp, #8
 800be98:	bd10      	pop	{r4, pc}

0800be9a <ResetMacParameters>:
{
 800be9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be9c:	b08f      	sub	sp, #60	; 0x3c
    if( isRejoin == false )
 800be9e:	b930      	cbnz	r0, 800beae <ResetMacParameters+0x14>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800bea0:	f640 634c 	movw	r3, #3660	; 0xe4c
 800bea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bea8:	2200      	movs	r2, #0
 800beaa:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    Nvm.MacGroup1.AdrAckCounter = 0;
 800beae:	f640 644c 	movw	r4, #3660	; 0xe4c
 800beb2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800beb6:	2600      	movs	r6, #0
 800beb8:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800beba:	f640 1544 	movw	r5, #2372	; 0x944
 800bebe:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800bec2:	f885 640c 	strb.w	r6, [r5, #1036]	; 0x40c
    MacCtx.AckTimeoutRetries = 1;
 800bec6:	2701      	movs	r7, #1
 800bec8:	f885 740d 	strb.w	r7, [r5, #1037]	; 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 800becc:	f885 740e 	strb.w	r7, [r5, #1038]	; 0x40e
    MacCtx.AckTimeoutRetry = false;
 800bed0:	f885 640f 	strb.w	r6, [r5, #1039]	; 0x40f
    Nvm.MacGroup2.MaxDCycle = 0;
 800bed4:	f884 611b 	strb.w	r6, [r4, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800bed8:	f8a4 711e 	strh.w	r7, [r4, #286]	; 0x11e
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800bedc:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
 800bee0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800bee4:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
 800bee8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800beec:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 800bef0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800bef4:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800bef8:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 800befc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf00:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800bf04:	f104 0374 	add.w	r3, r4, #116	; 0x74
 800bf08:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800bf0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf10:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800bf14:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 800bf18:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800bf1c:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 800bf20:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800bf24:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800bf28:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800bf2c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800bf30:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800bf34:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
 800bf38:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800bf3c:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 800bf40:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
    MacCtx.NodeAckRequested = false;
 800bf44:	f885 6410 	strb.w	r6, [r5, #1040]	; 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 800bf48:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800bf4c:	f8c4 6130 	str.w	r6, [r4, #304]	; 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800bf50:	f884 6134 	strb.w	r6, [r4, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 800bf54:	f884 6135 	strb.w	r6, [r4, #309]	; 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800bf58:	f8c4 6138 	str.w	r6, [r4, #312]	; 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800bf5c:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800bf60:	f884 6141 	strb.w	r6, [r4, #321]	; 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800bf64:	f884 6142 	strb.w	r6, [r4, #322]	; 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800bf68:	f884 6143 	strb.w	r6, [r4, #323]	; 0x143
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800bf6c:	f88d 700c 	strb.w	r7, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800bf70:	f504 7308 	add.w	r3, r4, #544	; 0x220
 800bf74:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800bf76:	f504 732d 	add.w	r3, r4, #692	; 0x2b4
 800bf7a:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800bf7c:	a901      	add	r1, sp, #4
 800bf7e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800bf82:	f003 fc79 	bl	800f878 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800bf86:	f885 6411 	strb.w	r6, [r5, #1041]	; 0x411
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800bf8a:	f885 63cc 	strb.w	r6, [r5, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800bf8e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bf90:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bf94:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800bf98:	f885 33dc 	strb.w	r3, [r5, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800bf9c:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800bfa0:	f885 33dd 	strb.w	r3, [r5, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800bfa4:	f885 63de 	strb.w	r6, [r5, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800bfa8:	f885 73df 	strb.w	r7, [r5, #991]	; 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800bfac:	f505 7478 	add.w	r4, r5, #992	; 0x3e0
 800bfb0:	f505 7c73 	add.w	ip, r5, #972	; 0x3cc
 800bfb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bfb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bfba:	f8dc 3000 	ldr.w	r3, [ip]
 800bfbe:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800bfc0:	f885 73f2 	strb.w	r7, [r5, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800bfc4:	2302      	movs	r3, #2
 800bfc6:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 800bfca:	960c      	str	r6, [sp, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800bfcc:	960d      	str	r6, [sp, #52]	; 0x34
    if( MacCtx.MacCallbacks != NULL )
 800bfce:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800bfd2:	b11b      	cbz	r3, 800bfdc <ResetMacParameters+0x142>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800bfd4:	685a      	ldr	r2, [r3, #4]
 800bfd6:	920c      	str	r2, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800bfd8:	695b      	ldr	r3, [r3, #20]
 800bfda:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800bfdc:	f640 1344 	movw	r3, #2372	; 0x944
 800bfe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bfe4:	f203 425c 	addw	r2, r3, #1116	; 0x45c
 800bfe8:	9204      	str	r2, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800bfea:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800bfee:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800bff0:	f503 6289 	add.w	r2, r3, #1096	; 0x448
 800bff4:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800bff6:	f203 4381 	addw	r3, r3, #1153	; 0x481
 800bffa:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800bffc:	f640 624c 	movw	r2, #3660	; 0xe4c
 800c000:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c004:	f102 03e4 	add.w	r3, r2, #228	; 0xe4
 800c008:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800c00a:	f102 0348 	add.w	r3, r2, #72	; 0x48
 800c00e:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800c010:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 800c014:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800c016:	f102 03e8 	add.w	r3, r2, #232	; 0xe8
 800c01a:	930b      	str	r3, [sp, #44]	; 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800c01c:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
 800c020:	a90c      	add	r1, sp, #48	; 0x30
 800c022:	a804      	add	r0, sp, #16
 800c024:	f002 fc42 	bl	800e8ac <LoRaMacClassBInit>
}
 800c028:	b00f      	add	sp, #60	; 0x3c
 800c02a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c02c <SwitchClass>:
{
 800c02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c02e:	4605      	mov	r5, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800c030:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c034:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c038:	f893 4118 	ldrb.w	r4, [r3, #280]	; 0x118
 800c03c:	2c01      	cmp	r4, #1
 800c03e:	d06f      	beq.n	800c120 <SwitchClass+0xf4>
 800c040:	2c02      	cmp	r4, #2
 800c042:	d079      	beq.n	800c138 <SwitchClass+0x10c>
 800c044:	b114      	cbz	r4, 800c04c <SwitchClass+0x20>
 800c046:	2403      	movs	r4, #3
}
 800c048:	4620      	mov	r0, r4
 800c04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_A )
 800c04c:	b960      	cbnz	r0, 800c068 <SwitchClass+0x3c>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800c04e:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c052:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c056:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800c05a:	336c      	adds	r3, #108	; 0x6c
 800c05c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c060:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 800c064:	462c      	mov	r4, r5
 800c066:	e7ef      	b.n	800c048 <SwitchClass+0x1c>
            if( deviceClass == CLASS_B )
 800c068:	2801      	cmp	r0, #1
 800c06a:	d02f      	beq.n	800c0cc <SwitchClass+0xa0>
            if( deviceClass == CLASS_C )
 800c06c:	2802      	cmp	r0, #2
 800c06e:	d17a      	bne.n	800c166 <SwitchClass+0x13a>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800c070:	f640 664c 	movw	r6, #3660	; 0xe4c
 800c074:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800c078:	2702      	movs	r7, #2
 800c07a:	f886 7118 	strb.w	r7, [r6, #280]	; 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800c07e:	f640 1e44 	movw	lr, #2372	; 0x944
 800c082:	f2c2 0e00 	movt	lr, #8192	; 0x2000
 800c086:	f50e 7578 	add.w	r5, lr, #992	; 0x3e0
 800c08a:	f50e 7c73 	add.w	ip, lr, #972	; 0x3cc
 800c08e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c094:	f8dc 3000 	ldr.w	r3, [ip]
 800c098:	602b      	str	r3, [r5, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800c09a:	f88e 73f3 	strb.w	r7, [lr, #1011]	; 0x3f3
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800c09e:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
 800c0a2:	b11b      	cbz	r3, 800c0ac <SwitchClass+0x80>
 800c0a4:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
 800c0a8:	42bb      	cmp	r3, r7
 800c0aa:	d01d      	beq.n	800c0e8 <SwitchClass+0xbc>
                MacCtx.NodeAckRequested = false;
 800c0ac:	f640 1344 	movw	r3, #2372	; 0x944
 800c0b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
                Radio.Sleep( );
 800c0ba:	f245 23d0 	movw	r3, #21200	; 0x52d0
 800c0be:	f6c0 0301 	movt	r3, #2049	; 0x801
 800c0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c4:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800c0c6:	f7ff fdb5 	bl	800bc34 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800c0ca:	e7bd      	b.n	800c048 <SwitchClass+0x1c>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800c0cc:	2001      	movs	r0, #1
 800c0ce:	f002 fc03 	bl	800e8d8 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d1b7      	bne.n	800c048 <SwitchClass+0x1c>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800c0d8:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 800c0e6:	e7af      	b.n	800c048 <SwitchClass+0x1c>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800c0e8:	f8d6 1104 	ldr.w	r1, [r6, #260]	; 0x104
 800c0ec:	6771      	str	r1, [r6, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800c0ee:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
 800c0f2:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800c0f6:	f89e 0411 	ldrb.w	r0, [lr, #1041]	; 0x411
 800c0fa:	f88e 03e0 	strb.w	r0, [lr, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800c0fe:	f8ce 13e4 	str.w	r1, [lr, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c102:	f896 107d 	ldrb.w	r1, [r6, #125]	; 0x7d
 800c106:	f88e 13f0 	strb.w	r1, [lr, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800c10a:	f896 208c 	ldrb.w	r2, [r6, #140]	; 0x8c
 800c10e:	f88e 23f1 	strb.w	r2, [lr, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800c112:	2203      	movs	r2, #3
 800c114:	f88e 23f3 	strb.w	r2, [lr, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800c118:	2201      	movs	r2, #1
 800c11a:	f88e 23f2 	strb.w	r2, [lr, #1010]	; 0x3f2
                        break;
 800c11e:	e7c5      	b.n	800c0ac <SwitchClass+0x80>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800c120:	f002 fbda 	bl	800e8d8 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800c124:	4604      	mov	r4, r0
 800c126:	2800      	cmp	r0, #0
 800c128:	d18e      	bne.n	800c048 <SwitchClass+0x1c>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800c12a:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c12e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c132:	f883 5118 	strb.w	r5, [r3, #280]	; 0x118
 800c136:	e787      	b.n	800c048 <SwitchClass+0x1c>
            if( deviceClass == CLASS_A )
 800c138:	b9b8      	cbnz	r0, 800c16a <SwitchClass+0x13e>
                MacCtx.RxSlot = RX_SLOT_NONE;
 800c13a:	f640 1344 	movw	r3, #2372	; 0x944
 800c13e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c142:	2206      	movs	r2, #6
 800c144:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800c148:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c14c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c150:	2200      	movs	r2, #0
 800c152:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
                Radio.Sleep( );
 800c156:	f245 23d0 	movw	r3, #21200	; 0x52d0
 800c15a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800c15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c160:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800c162:	462c      	mov	r4, r5
 800c164:	e770      	b.n	800c048 <SwitchClass+0x1c>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c166:	2403      	movs	r4, #3
 800c168:	e76e      	b.n	800c048 <SwitchClass+0x1c>
 800c16a:	2403      	movs	r4, #3
 800c16c:	e76c      	b.n	800c048 <SwitchClass+0x1c>

0800c16e <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800c16e:	f640 1344 	movw	r3, #2372	; 0x944
 800c172:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c176:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d00a      	beq.n	800c194 <LoRaMacIsBusy+0x26>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800c17e:	b95b      	cbnz	r3, 800c198 <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800c180:	f640 1344 	movw	r3, #2372	; 0x944
 800c184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800c188:	f893 0482 	ldrb.w	r0, [r3, #1154]	; 0x482
 800c18c:	3801      	subs	r0, #1
 800c18e:	bf18      	it	ne
 800c190:	2001      	movne	r0, #1
 800c192:	4770      	bx	lr
        return false;
 800c194:	2000      	movs	r0, #0
 800c196:	4770      	bx	lr
    return true;
 800c198:	2001      	movs	r0, #1
}
 800c19a:	4770      	bx	lr

0800c19c <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800c19c:	f640 1344 	movw	r3, #2372	; 0x944
 800c1a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c1a4:	f8d3 0340 	ldr.w	r0, [r3, #832]	; 0x340
}
 800c1a8:	2801      	cmp	r0, #1
 800c1aa:	bf14      	ite	ne
 800c1ac:	2000      	movne	r0, #0
 800c1ae:	2001      	moveq	r0, #1
 800c1b0:	4770      	bx	lr

0800c1b2 <LoRaMacProcess>:
{
 800c1b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b6:	b0a5      	sub	sp, #148	; 0x94
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1b8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c1bc:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800c1be:	f640 1340 	movw	r3, #2368	; 0x940
 800c1c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c1c6:	681a      	ldr	r2, [r3, #0]
    LoRaMacRadioEvents.Value = 0;
 800c1c8:	2000      	movs	r0, #0
 800c1ca:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1cc:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800c1d0:	b19a      	cbz	r2, 800c1fa <LoRaMacProcess+0x48>
        if( events.Events.TxDone == 1 )
 800c1d2:	b2d4      	uxtb	r4, r2
 800c1d4:	f012 0f10 	tst.w	r2, #16
 800c1d8:	d167      	bne.n	800c2aa <LoRaMacProcess+0xf8>
        if( events.Events.RxDone == 1 )
 800c1da:	f014 0f08 	tst.w	r4, #8
 800c1de:	f040 8104 	bne.w	800c3ea <LoRaMacProcess+0x238>
        if( events.Events.TxTimeout == 1 )
 800c1e2:	f014 0f04 	tst.w	r4, #4
 800c1e6:	f040 84af 	bne.w	800cb48 <LoRaMacProcess+0x996>
        if( events.Events.RxError == 1 )
 800c1ea:	f014 0f02 	tst.w	r4, #2
 800c1ee:	f040 84d6 	bne.w	800cb9e <LoRaMacProcess+0x9ec>
        if( events.Events.RxTimeout == 1 )
 800c1f2:	f014 0f01 	tst.w	r4, #1
 800c1f6:	f040 84d8 	bne.w	800cbaa <LoRaMacProcess+0x9f8>
    LoRaMacClassBProcess( );
 800c1fa:	f002 fb7d 	bl	800e8f8 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800c1fe:	f640 1344 	movw	r3, #2372	; 0x944
 800c202:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c206:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800c20a:	f013 0f10 	tst.w	r3, #16
 800c20e:	f040 84d2 	bne.w	800cbb6 <LoRaMacProcess+0xa04>
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800c212:	f640 1344 	movw	r3, #2372	; 0x944
 800c216:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c21a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800c21e:	f013 0f08 	tst.w	r3, #8
 800c222:	d011      	beq.n	800c248 <LoRaMacProcess+0x96>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800c224:	f640 1044 	movw	r0, #2372	; 0x944
 800c228:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c22c:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 800c230:	f36f 03c3 	bfc	r3, #3, #1
 800c234:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800c238:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 800c242:	f200 405c 	addw	r0, r0, #1116	; 0x45c
 800c246:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800c248:	f640 1344 	movw	r3, #2372	; 0x944
 800c24c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c250:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800c254:	f013 0f02 	tst.w	r3, #2
 800c258:	d011      	beq.n	800c27e <LoRaMacProcess+0xcc>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800c25a:	f640 1044 	movw	r0, #2372	; 0x944
 800c25e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c262:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 800c266:	f36f 0341 	bfc	r3, #1, #1
 800c26a:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800c26e:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 800c278:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 800c27c:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800c27e:	f640 1344 	movw	r3, #2372	; 0x944
 800c282:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c286:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800c28a:	2b02      	cmp	r3, #2
 800c28c:	f000 85a8 	beq.w	800cde0 <LoRaMacProcess+0xc2e>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800c290:	f640 1344 	movw	r3, #2372	; 0x944
 800c294:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c298:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800c29c:	f013 0f20 	tst.w	r3, #32
 800c2a0:	f040 85a2 	bne.w	800cde8 <LoRaMacProcess+0xc36>
}
 800c2a4:	b025      	add	sp, #148	; 0x94
 800c2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c2aa:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c2ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2b2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c2b6:	2b02      	cmp	r3, #2
 800c2b8:	d005      	beq.n	800c2c6 <LoRaMacProcess+0x114>
        Radio.Sleep( );
 800c2ba:	f245 23d0 	movw	r3, #21200	; 0x52d0
 800c2be:	f6c0 0301 	movt	r3, #2049	; 0x801
 800c2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c4:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2c6:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c2ca:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800c2cc:	f007 fd44 	bl	8013d58 <UTIL_TIMER_GetCurrentTime>
 800c2d0:	f241 53c4 	movw	r3, #5572	; 0x15c4
 800c2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2d8:	681e      	ldr	r6, [r3, #0]
 800c2da:	1a36      	subs	r6, r6, r0
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800c2dc:	f640 1544 	movw	r5, #2372	; 0x944
 800c2e0:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800c2e4:	f8d5 13b0 	ldr.w	r1, [r5, #944]	; 0x3b0
 800c2e8:	f505 7760 	add.w	r7, r5, #896	; 0x380
 800c2ec:	4431      	add	r1, r6
 800c2ee:	4638      	mov	r0, r7
 800c2f0:	f007 fe37 	bl	8013f62 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800c2f4:	4638      	mov	r0, r7
 800c2f6:	f007 fde4 	bl	8013ec2 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800c2fa:	f8d5 13b4 	ldr.w	r1, [r5, #948]	; 0x3b4
 800c2fe:	f505 7566 	add.w	r5, r5, #920	; 0x398
 800c302:	4431      	add	r1, r6
 800c304:	4628      	mov	r0, r5
 800c306:	f007 fe2c 	bl	8013f62 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800c30a:	4628      	mov	r0, r5
 800c30c:	f007 fdd9 	bl	8013ec2 <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c310:	f388 8810 	msr	PRIMASK, r8
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800c314:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c318:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c31c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c320:	2b02      	cmp	r3, #2
 800c322:	d006      	beq.n	800c332 <LoRaMacProcess+0x180>
 800c324:	f640 1344 	movw	r3, #2372	; 0x944
 800c328:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c32c:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800c330:	b1db      	cbz	r3, 800c36a <LoRaMacProcess+0x1b8>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800c332:	2316      	movs	r3, #22
 800c334:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c338:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c33c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c340:	a90c      	add	r1, sp, #48	; 0x30
 800c342:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c346:	f003 fa80 	bl	800f84a <RegionGetPhyParam>
 800c34a:	900a      	str	r0, [sp, #40]	; 0x28
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800c34c:	f640 1344 	movw	r3, #2372	; 0x944
 800c350:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c354:	f8d3 13b4 	ldr.w	r1, [r3, #948]	; 0x3b4
 800c358:	f503 757d 	add.w	r5, r3, #1012	; 0x3f4
 800c35c:	4401      	add	r1, r0
 800c35e:	4628      	mov	r0, r5
 800c360:	f007 fdff 	bl	8013f62 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800c364:	4628      	mov	r0, r5
 800c366:	f007 fdac 	bl	8013ec2 <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800c36a:	f241 53c4 	movw	r3, #5572	; 0x15c4
 800c36e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f640 654c 	movw	r5, #3660	; 0xe4c
 800c378:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800c37c:	62eb      	str	r3, [r5, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 800c37e:	f640 1644 	movw	r6, #2372	; 0x944
 800c382:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800c386:	f896 2411 	ldrb.w	r2, [r6, #1041]	; 0x411
 800c38a:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800c38e:	9317      	str	r3, [sp, #92]	; 0x5c
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800c390:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800c394:	4640      	mov	r0, r8
 800c396:	f007 f988 	bl	80136aa <SysTimeGetMcuTime>
 800c39a:	af04      	add	r7, sp, #16
 800c39c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800c3a0:	9300      	str	r3, [sp, #0]
 800c3a2:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800c3a6:	e898 0006 	ldmia.w	r8, {r1, r2}
 800c3aa:	4638      	mov	r0, r7
 800c3ac:	f007 f90f 	bl	80135ce <SysTimeSub>
 800c3b0:	ab19      	add	r3, sp, #100	; 0x64
 800c3b2:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c3b6:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800c3ba:	f8d6 3414 	ldr.w	r3, [r6, #1044]	; 0x414
 800c3be:	9318      	str	r3, [sp, #96]	; 0x60
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c3c0:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 800c3c4:	3b00      	subs	r3, #0
 800c3c6:	bf18      	it	ne
 800c3c8:	2301      	movne	r3, #1
 800c3ca:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800c3ce:	a916      	add	r1, sp, #88	; 0x58
 800c3d0:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 800c3d4:	f003 fa48 	bl	800f868 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 800c3d8:	f896 3410 	ldrb.w	r3, [r6, #1040]	; 0x410
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f47f aefc 	bne.w	800c1da <LoRaMacProcess+0x28>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f886 2435 	strb.w	r2, [r6, #1077]	; 0x435
}
 800c3e8:	e6f7      	b.n	800c1da <LoRaMacProcess+0x28>
    uint8_t *payload = RxDoneParams.Payload;
 800c3ea:	f241 53b4 	movw	r3, #5556	; 0x15b4
 800c3ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c3f2:	f8d3 9004 	ldr.w	r9, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800c3f6:	f8b3 8008 	ldrh.w	r8, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800c3fa:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800c3fe:	f993 500c 	ldrsb.w	r5, [r3, #12]
    uint32_t downLinkCounter = 0;
 800c402:	2300      	movs	r3, #0
 800c404:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800c406:	f640 624c 	movw	r2, #3660	; 0xe4c
 800c40a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c40e:	f8d2 70e4 	ldr.w	r7, [r2, #228]	; 0xe4
    MacCtx.McpsConfirm.AckReceived = false;
 800c412:	f640 1644 	movw	r6, #2372	; 0x944
 800c416:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800c41a:	f886 3438 	strb.w	r3, [r6, #1080]	; 0x438
    MacCtx.RxStatus.Rssi = rssi;
 800c41e:	f8a6 a47c 	strh.w	sl, [r6, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800c422:	f886 547e 	strb.w	r5, [r6, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800c426:	f896 2480 	ldrb.w	r2, [r6, #1152]	; 0x480
 800c42a:	f886 247f 	strb.w	r2, [r6, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800c42e:	f886 341b 	strb.w	r3, [r6, #1051]	; 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 800c432:	f886 341a 	strb.w	r3, [r6, #1050]	; 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800c436:	f886 341d 	strb.w	r3, [r6, #1053]	; 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 800c43a:	f8c6 3420 	str.w	r3, [r6, #1056]	; 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 800c43e:	f886 3424 	strb.w	r3, [r6, #1060]	; 0x424
    MacCtx.McpsIndication.RxData = false;
 800c442:	f886 3425 	strb.w	r3, [r6, #1061]	; 0x425
    MacCtx.McpsIndication.AckReceived = false;
 800c446:	f886 3426 	strb.w	r3, [r6, #1062]	; 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800c44a:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800c44e:	f886 3418 	strb.w	r3, [r6, #1048]	; 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 800c452:	f8c6 342c 	str.w	r3, [r6, #1068]	; 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800c456:	f886 3430 	strb.w	r3, [r6, #1072]	; 0x430
    Radio.Sleep( );
 800c45a:	f245 23d0 	movw	r3, #21200	; 0x52d0
 800c45e:	f6c0 0301 	movt	r3, #2049	; 0x801
 800c462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c464:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800c466:	f506 7066 	add.w	r0, r6, #920	; 0x398
 800c46a:	f007 fcbf 	bl	8013dec <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800c46e:	4641      	mov	r1, r8
 800c470:	4648      	mov	r0, r9
 800c472:	f002 fa24 	bl	800e8be <LoRaMacClassBRxBeacon>
 800c476:	b9d0      	cbnz	r0, 800c4ae <LoRaMacProcess+0x2fc>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c478:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c480:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c484:	2b01      	cmp	r3, #1
 800c486:	d017      	beq.n	800c4b8 <LoRaMacProcess+0x306>
    if( size == 0 )
 800c488:	f1b8 0f00 	cmp.w	r8, #0
 800c48c:	d037      	beq.n	800c4fe <LoRaMacProcess+0x34c>
    macHdr.Value = payload[pktHeaderLen++];
 800c48e:	f899 6000 	ldrb.w	r6, [r9]
    switch( macHdr.Bits.MType )
 800c492:	0973      	lsrs	r3, r6, #5
 800c494:	3b01      	subs	r3, #1
 800c496:	2b06      	cmp	r3, #6
 800c498:	f200 8332 	bhi.w	800cb00 <LoRaMacProcess+0x94e>
 800c49c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c4a0:	03300039 	.word	0x03300039
 800c4a4:	033000dc 	.word	0x033000dc
 800c4a8:	033000d5 	.word	0x033000d5
 800c4ac:	02fe      	.short	0x02fe
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800c4ae:	f8a6 a472 	strh.w	sl, [r6, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800c4b2:	f886 5474 	strb.w	r5, [r6, #1140]	; 0x474
        return;
 800c4b6:	e694      	b.n	800c1e2 <LoRaMacProcess+0x30>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800c4b8:	f002 fa05 	bl	800e8c6 <LoRaMacClassBIsPingExpected>
 800c4bc:	b168      	cbz	r0, 800c4da <LoRaMacProcess+0x328>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c4be:	2000      	movs	r0, #0
 800c4c0:	f002 f9f6 	bl	800e8b0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800c4c4:	2000      	movs	r0, #0
 800c4c6:	f002 f9f8 	bl	800e8ba <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800c4ca:	f640 1344 	movw	r3, #2372	; 0x944
 800c4ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c4d2:	2204      	movs	r2, #4
 800c4d4:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800c4d8:	e7d6      	b.n	800c488 <LoRaMacProcess+0x2d6>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800c4da:	f002 f9f6 	bl	800e8ca <LoRaMacClassBIsMulticastExpected>
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d0d2      	beq.n	800c488 <LoRaMacProcess+0x2d6>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c4e2:	2000      	movs	r0, #0
 800c4e4:	f002 f9e5 	bl	800e8b2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	f002 f9e7 	bl	800e8bc <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800c4ee:	f640 1344 	movw	r3, #2372	; 0x944
 800c4f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c4f6:	2205      	movs	r2, #5
 800c4f8:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800c4fc:	e7c4      	b.n	800c488 <LoRaMacProcess+0x2d6>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c4fe:	f640 1344 	movw	r3, #2372	; 0x944
 800c502:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c506:	2201      	movs	r2, #1
 800c508:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
        PrepareRxDoneAbort( );
 800c50c:	f7fe fdaa 	bl	800b064 <PrepareRxDoneAbort>
        return;
 800c510:	e667      	b.n	800c1e2 <LoRaMacProcess+0x30>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800c512:	f1b8 0f10 	cmp.w	r8, #16
 800c516:	d936      	bls.n	800c586 <LoRaMacProcess+0x3d4>
            macMsgJoinAccept.Buffer = payload;
 800c518:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
            macMsgJoinAccept.BufSize = size;
 800c51c:	fa5f f888 	uxtb.w	r8, r8
 800c520:	f88d 8034 	strb.w	r8, [sp, #52]	; 0x34
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800c524:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c528:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c52c:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800c530:	bb9b      	cbnz	r3, 800c59a <LoRaMacProcess+0x3e8>
            SecureElementGetJoinEui( joinEui );
 800c532:	a816      	add	r0, sp, #88	; 0x58
 800c534:	f7fd fca2 	bl	8009e7c <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800c538:	aa0c      	add	r2, sp, #48	; 0x30
 800c53a:	a916      	add	r1, sp, #88	; 0x58
 800c53c:	20ff      	movs	r0, #255	; 0xff
 800c53e:	f002 ffac 	bl	800f49a <LoRaMacCryptoHandleJoinAccept>
 800c542:	4605      	mov	r5, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800c544:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800c548:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c54c:	f88d 3020 	strb.w	r3, [sp, #32]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c550:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c554:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c558:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800c55c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800c560:	2207      	movs	r2, #7
 800c562:	a908      	add	r1, sp, #32
 800c564:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c568:	f003 f98e 	bl	800f888 <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800c56c:	b905      	cbnz	r5, 800c570 <LoRaMacProcess+0x3be>
 800c56e:	b9f0      	cbnz	r0, 800c5ae <LoRaMacProcess+0x3fc>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800c570:	2001      	movs	r0, #1
 800c572:	f002 fc0d 	bl	800ed90 <LoRaMacConfirmQueueIsCmdActive>
 800c576:	2800      	cmp	r0, #0
 800c578:	f000 82b0 	beq.w	800cadc <LoRaMacProcess+0x92a>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800c57c:	2101      	movs	r1, #1
 800c57e:	2007      	movs	r0, #7
 800c580:	f002 fbb1 	bl	800ece6 <LoRaMacConfirmQueueSetStatus>
 800c584:	e2aa      	b.n	800cadc <LoRaMacProcess+0x92a>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c586:	f640 1344 	movw	r3, #2372	; 0x944
 800c58a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c58e:	2201      	movs	r2, #1
 800c590:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800c594:	f7fe fd66 	bl	800b064 <PrepareRxDoneAbort>
                return;
 800c598:	e623      	b.n	800c1e2 <LoRaMacProcess+0x30>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c59a:	f640 1344 	movw	r3, #2372	; 0x944
 800c59e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800c5a8:	f7fe fd5c 	bl	800b064 <PrepareRxDoneAbort>
                return;
 800c5ac:	e619      	b.n	800c1e2 <LoRaMacProcess+0x30>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800c5ae:	f640 654c 	movw	r5, #3660	; 0xe4c
 800c5b2:	f2c2 0500 	movt	r5, #8192	; 0x2000
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800c5b6:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800c5ba:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 800c5be:	041b      	lsls	r3, r3, #16
 800c5c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800c5c4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800c5ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c5d0:	f8c5 10e4 	str.w	r1, [r5, #228]	; 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800c5d4:	2002      	movs	r0, #2
 800c5d6:	f7fd fc60 	bl	8009e9a <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800c5da:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800c5de:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800c5e2:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800c5e6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c5ea:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800c5ee:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800c5f2:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	bf38      	it	cc
 800c5fa:	2301      	movcc	r3, #1
 800c5fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c600:	fb02 f303 	mul.w	r3, r2, r3
 800c604:	65ab      	str	r3, [r5, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800c606:	4413      	add	r3, r2
 800c608:	65eb      	str	r3, [r5, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800c60a:	2601      	movs	r6, #1
 800c60c:	f885 6068 	strb.w	r6, [r5, #104]	; 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800c610:	2300      	movs	r3, #0
 800c612:	f885 312a 	strb.w	r3, [r5, #298]	; 0x12a
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800c616:	f10d 0342 	add.w	r3, sp, #66	; 0x42
 800c61a:	930a      	str	r3, [sp, #40]	; 0x28
                applyCFList.Size = size - 17;
 800c61c:	f1a8 0811 	sub.w	r8, r8, #17
 800c620:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800c624:	a90a      	add	r1, sp, #40	; 0x28
 800c626:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 800c62a:	f003 f938 	bl	800f89e <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c62e:	2302      	movs	r3, #2
 800c630:	f885 312c 	strb.w	r3, [r5, #300]	; 0x12c
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800c634:	4630      	mov	r0, r6
 800c636:	f002 fbab 	bl	800ed90 <LoRaMacConfirmQueueIsCmdActive>
 800c63a:	2800      	cmp	r0, #0
 800c63c:	f000 824e 	beq.w	800cadc <LoRaMacProcess+0x92a>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800c640:	4631      	mov	r1, r6
 800c642:	2000      	movs	r0, #0
 800c644:	f002 fb4f 	bl	800ece6 <LoRaMacConfirmQueueSetStatus>
 800c648:	e248      	b.n	800cadc <LoRaMacProcess+0x92a>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800c64a:	f640 1344 	movw	r3, #2372	; 0x944
 800c64e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c652:	2201      	movs	r2, #1
 800c654:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c658:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c65c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c660:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800c664:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800c668:	f640 1244 	movw	r2, #2372	; 0x944
 800c66c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c670:	f892 241c 	ldrb.w	r2, [r2, #1052]	; 0x41c
 800c674:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800c678:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800c67c:	320d      	adds	r2, #13
 800c67e:	f88d 2020 	strb.w	r2, [sp, #32]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c682:	a908      	add	r1, sp, #32
 800c684:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c688:	f003 f8df 	bl	800f84a <RegionGetPhyParam>
 800c68c:	9006      	str	r0, [sp, #24]
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800c68e:	f1a8 030d 	sub.w	r3, r8, #13
 800c692:	b21b      	sxth	r3, r3
 800c694:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c698:	b200      	sxth	r0, r0
 800c69a:	4283      	cmp	r3, r0
 800c69c:	dc02      	bgt.n	800c6a4 <LoRaMacProcess+0x4f2>
 800c69e:	f1b8 0f0b 	cmp.w	r8, #11
 800c6a2:	d809      	bhi.n	800c6b8 <LoRaMacProcess+0x506>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c6a4:	f640 1344 	movw	r3, #2372	; 0x944
 800c6a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800c6b2:	f7fe fcd7 	bl	800b064 <PrepareRxDoneAbort>
                return;
 800c6b6:	e594      	b.n	800c1e2 <LoRaMacProcess+0x30>
            macMsgData.Buffer = payload;
 800c6b8:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
            macMsgData.BufSize = size;
 800c6bc:	f88d 805c 	strb.w	r8, [sp, #92]	; 0x5c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800c6c0:	f640 337c 	movw	r3, #2940	; 0xb7c
 800c6c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c6c8:	931f      	str	r3, [sp, #124]	; 0x7c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800c6ca:	23ff      	movs	r3, #255	; 0xff
 800c6cc:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800c6d0:	a816      	add	r0, sp, #88	; 0x58
 800c6d2:	f002 ffb3 	bl	800f63c <LoRaMacParserData>
 800c6d6:	9003      	str	r0, [sp, #12]
 800c6d8:	bb00      	cbnz	r0, 800c71c <LoRaMacProcess+0x56a>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800c6da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c6dc:	f640 1344 	movw	r3, #2372	; 0x944
 800c6e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c6e4:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800c6e8:	f89d 1064 	ldrb.w	r1, [sp, #100]	; 0x64
 800c6ec:	f011 0f0f 	tst.w	r1, #15
 800c6f0:	f000 852b 	beq.w	800d14a <LoRaMacProcess+0xf98>
 800c6f4:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	f040 8477 	bne.w	800cfec <LoRaMacProcess+0xe3a>
    else if( macMsg->FRMPayloadSize == 0 )
 800c6fe:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 800c702:	2b00      	cmp	r3, #0
 800c704:	f000 8475 	beq.w	800cff2 <LoRaMacProcess+0xe40>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c708:	f640 1344 	movw	r3, #2372	; 0x944
 800c70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c710:	2201      	movs	r2, #1
 800c712:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800c716:	f7fe fca5 	bl	800b064 <PrepareRxDoneAbort>
                return;
 800c71a:	e562      	b.n	800c1e2 <LoRaMacProcess+0x30>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c71c:	f640 1344 	movw	r3, #2372	; 0x944
 800c720:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c724:	2201      	movs	r2, #1
 800c726:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800c72a:	f7fe fc9b 	bl	800b064 <PrepareRxDoneAbort>
                return;
 800c72e:	e558      	b.n	800c1e2 <LoRaMacProcess+0x30>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800c730:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
        *fType = FRAME_TYPE_C;
 800c734:	2b00      	cmp	r3, #0
 800c736:	bf14      	ite	ne
 800c738:	f04f 0a03 	movne.w	sl, #3
 800c73c:	f04f 0a02 	moveq.w	sl, #2
 800c740:	f000 bd0a 	b.w	800d158 <LoRaMacProcess+0xfa6>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800c744:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c748:	f2c2 0300 	movt	r3, #8192	; 0x2000
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800c74c:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800c750:	2b00      	cmp	r3, #0
 800c752:	f000 850c 	beq.w	800d16e <LoRaMacProcess+0xfbc>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800c756:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c75a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c75e:	f893 b0ea 	ldrb.w	fp, [r3, #234]	; 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800c762:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c766:	6812      	ldr	r2, [r2, #0]
 800c768:	9207      	str	r2, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800c76a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c76e:	2b02      	cmp	r3, #2
 800c770:	d06d      	beq.n	800c84e <LoRaMacProcess+0x69c>
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800c772:	f1ba 0f03 	cmp.w	sl, #3
 800c776:	d172      	bne.n	800c85e <LoRaMacProcess+0x6ac>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800c778:	f011 0f60 	tst.w	r1, #96	; 0x60
 800c77c:	d16f      	bne.n	800c85e <LoRaMacProcess+0x6ac>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800c77e:	2315      	movs	r3, #21
 800c780:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c784:	f640 674c 	movw	r7, #3660	; 0xe4c
 800c788:	f2c2 0700 	movt	r7, #8192	; 0x2000
 800c78c:	a908      	add	r1, sp, #32
 800c78e:	f897 0048 	ldrb.w	r0, [r7, #72]	; 0x48
 800c792:	f003 f85a 	bl	800f84a <RegionGetPhyParam>
 800c796:	9006      	str	r0, [sp, #24]
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800c798:	b281      	uxth	r1, r0
 800c79a:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
    switch( addrID )
 800c79e:	f1bb 0f00 	cmp.w	fp, #0
 800c7a2:	f040 840b 	bne.w	800cfbc <LoRaMacProcess+0xe0a>
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	9303      	str	r3, [sp, #12]
 800c7aa:	f04f 0904 	mov.w	r9, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800c7ae:	ab07      	add	r3, sp, #28
 800c7b0:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
 800c7b4:	4648      	mov	r0, r9
 800c7b6:	f002 fc99 	bl	800f0ec <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	d168      	bne.n	800c890 <LoRaMacProcess+0x6de>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800c7be:	ab16      	add	r3, sp, #88	; 0x58
 800c7c0:	9300      	str	r3, [sp, #0]
 800c7c2:	9b07      	ldr	r3, [sp, #28]
 800c7c4:	464a      	mov	r2, r9
 800c7c6:	4641      	mov	r1, r8
 800c7c8:	4658      	mov	r0, fp
 800c7ca:	f002 fd7e 	bl	800f2ca <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	f040 8091 	bne.w	800c8f6 <LoRaMacProcess+0x744>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c7d4:	f640 1344 	movw	r3, #2372	; 0x944
 800c7d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c7dc:	2100      	movs	r1, #0
 800c7de:	f883 1419 	strb.w	r1, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 800c7e2:	9a03      	ldr	r2, [sp, #12]
 800c7e4:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 800c7e8:	f8c3 1420 	str.w	r1, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 800c7ec:	f883 1424 	strb.w	r1, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800c7f0:	9a07      	ldr	r2, [sp, #28]
 800c7f2:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800c7f6:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800c7fa:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800c7fe:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800c802:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c806:	f883 1435 	strb.w	r1, [r3, #1077]	; 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800c80a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800c80e:	f893 247f 	ldrb.w	r2, [r3, #1151]	; 0x47f
 800c812:	2a01      	cmp	r2, #1
 800c814:	d97c      	bls.n	800c910 <LoRaMacProcess+0x75e>
            if( multicast == 1 )
 800c816:	9b03      	ldr	r3, [sp, #12]
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d07f      	beq.n	800c91c <LoRaMacProcess+0x76a>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800c81c:	f006 06e0 	and.w	r6, r6, #224	; 0xe0
 800c820:	2ea0      	cmp	r6, #160	; 0xa0
 800c822:	f000 80aa 	beq.w	800c97a <LoRaMacProcess+0x7c8>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800c826:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c82e:	2100      	movs	r1, #0
 800c830:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800c834:	f640 1344 	movw	r3, #2372	; 0x944
 800c838:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c83c:	f883 1418 	strb.w	r1, [r3, #1048]	; 0x418
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800c840:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800c844:	f013 0f10 	tst.w	r3, #16
 800c848:	f000 8085 	beq.w	800c956 <LoRaMacProcess+0x7a4>
 800c84c:	e075      	b.n	800c93a <LoRaMacProcess+0x788>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800c84e:	f640 1344 	movw	r3, #2372	; 0x944
 800c852:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c856:	2203      	movs	r2, #3
 800c858:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800c85c:	e789      	b.n	800c772 <LoRaMacProcess+0x5c0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c85e:	f640 1344 	movw	r3, #2372	; 0x944
 800c862:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c866:	2201      	movs	r2, #1
 800c868:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800c86c:	f7fe fbfa 	bl	800b064 <PrepareRxDoneAbort>
                return;
 800c870:	e4b7      	b.n	800c1e2 <LoRaMacProcess+0x30>
    switch( addrID )
 800c872:	4647      	mov	r7, r8
 800c874:	f8cd b00c 	str.w	fp, [sp, #12]
 800c878:	f000 bc8b 	b.w	800d192 <LoRaMacProcess+0xfe0>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800c87c:	f04f 0909 	mov.w	r9, #9
 800c880:	fa29 f90a 	lsr.w	r9, r9, sl
 800c884:	f009 0901 	and.w	r9, r9, #1
 800c888:	f109 0901 	add.w	r9, r9, #1
 800c88c:	46b8      	mov	r8, r7
 800c88e:	e78e      	b.n	800c7ae <LoRaMacProcess+0x5fc>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800c890:	2807      	cmp	r0, #7
 800c892:	d125      	bne.n	800c8e0 <LoRaMacProcess+0x72e>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800c894:	f640 1344 	movw	r3, #2372	; 0x944
 800c898:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c89c:	2208      	movs	r2, #8
 800c89e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800c8a2:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c8a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c8aa:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	f040 838f 	bne.w	800cfd2 <LoRaMacProcess+0xe20>
 800c8b4:	f006 06e0 	and.w	r6, r6, #224	; 0xe0
 800c8b8:	2ea0      	cmp	r6, #160	; 0xa0
 800c8ba:	f040 838a 	bne.w	800cfd2 <LoRaMacProcess+0xe20>
 800c8be:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c8c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c8c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	f040 8381 	bne.w	800cfd2 <LoRaMacProcess+0xe20>
                        Nvm.MacGroup1.SrvAckRequested = true;
 800c8d0:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c8d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c8d8:	2201      	movs	r2, #1
 800c8da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800c8de:	e378      	b.n	800cfd2 <LoRaMacProcess+0xe20>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800c8e0:	2808      	cmp	r0, #8
 800c8e2:	f040 836f 	bne.w	800cfc4 <LoRaMacProcess+0xe12>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800c8e6:	f640 1344 	movw	r3, #2372	; 0x944
 800c8ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c8ee:	220a      	movs	r2, #10
 800c8f0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 800c8f4:	e36d      	b.n	800cfd2 <LoRaMacProcess+0xe20>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800c8f6:	2802      	cmp	r0, #2
 800c8f8:	bf0c      	ite	eq
 800c8fa:	220b      	moveq	r2, #11
 800c8fc:	220c      	movne	r2, #12
 800c8fe:	f640 1344 	movw	r3, #2372	; 0x944
 800c902:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c906:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800c90a:	f7fe fbab 	bl	800b064 <PrepareRxDoneAbort>
                return;
 800c90e:	e468      	b.n	800c1e2 <LoRaMacProcess+0x30>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800c910:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c914:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c918:	6299      	str	r1, [r3, #40]	; 0x28
 800c91a:	e77c      	b.n	800c816 <LoRaMacProcess+0x664>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800c91c:	f640 1344 	movw	r3, #2372	; 0x944
 800c920:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c924:	2102      	movs	r1, #2
 800c926:	f883 1418 	strb.w	r1, [r3, #1048]	; 0x418
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800c92a:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c92e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c932:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c936:	2b00      	cmp	r3, #0
 800c938:	d082      	beq.n	800c840 <LoRaMacProcess+0x68e>
 800c93a:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c93e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c942:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c946:	b933      	cbnz	r3, 800c956 <LoRaMacProcess+0x7a4>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800c948:	f640 1344 	movw	r3, #2372	; 0x944
 800c94c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c950:	2101      	movs	r1, #1
 800c952:	f883 141d 	strb.w	r1, [r3, #1053]	; 0x41d
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800c956:	f640 1344 	movw	r3, #2372	; 0x944
 800c95a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c95e:	f893 1434 	ldrb.w	r1, [r3, #1076]	; 0x434
 800c962:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800c966:	2a01      	cmp	r2, #1
 800c968:	d91f      	bls.n	800c9aa <LoRaMacProcess+0x7f8>
            switch( fType )
 800c96a:	f1ba 0f03 	cmp.w	sl, #3
 800c96e:	f200 808b 	bhi.w	800ca88 <LoRaMacProcess+0x8d6>
 800c972:	e8df f00a 	tbb	[pc, sl]
 800c976:	4e25      	.short	0x4e25
 800c978:	7663      	.short	0x7663
                    Nvm.MacGroup1.SrvAckRequested = true;
 800c97a:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c97e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c982:	2101      	movs	r1, #1
 800c984:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800c988:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 800c98c:	b92b      	cbnz	r3, 800c99a <LoRaMacProcess+0x7e8>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800c98e:	f640 634c 	movw	r3, #3660	; 0xe4c
 800c992:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c996:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c998:	6359      	str	r1, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800c99a:	f640 1344 	movw	r3, #2372	; 0x944
 800c99e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c9a2:	2101      	movs	r1, #1
 800c9a4:	f883 1418 	strb.w	r1, [r3, #1048]	; 0x418
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800c9a8:	e7c7      	b.n	800c93a <LoRaMacProcess+0x788>
        if( request == MCPS_CONFIRMED )
 800c9aa:	2901      	cmp	r1, #1
 800c9ac:	d105      	bne.n	800c9ba <LoRaMacProcess+0x808>
            if( fCtrl.Bits.Ack == 1 )
 800c9ae:	f013 0f20 	tst.w	r3, #32
 800c9b2:	d0da      	beq.n	800c96a <LoRaMacProcess+0x7b8>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800c9b4:	f002 f890 	bl	800ead8 <LoRaMacCommandsRemoveStickyAnsCmds>
 800c9b8:	e7d7      	b.n	800c96a <LoRaMacProcess+0x7b8>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800c9ba:	f002 f88d 	bl	800ead8 <LoRaMacCommandsRemoveStickyAnsCmds>
 800c9be:	e7d4      	b.n	800c96a <LoRaMacProcess+0x7b8>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800c9c0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800c9c4:	f640 1644 	movw	r6, #2372	; 0x944
 800c9c8:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800c9cc:	f896 347f 	ldrb.w	r3, [r6, #1151]	; 0x47f
 800c9d0:	9300      	str	r3, [sp, #0]
 800c9d2:	462b      	mov	r3, r5
 800c9d4:	f002 020f 	and.w	r2, r2, #15
 800c9d8:	2100      	movs	r1, #0
 800c9da:	a81a      	add	r0, sp, #104	; 0x68
 800c9dc:	f7fe fb62 	bl	800b0a4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c9e0:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 800c9e4:	f886 341b 	strb.w	r3, [r6, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800c9e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c9ea:	f8c6 3420 	str.w	r3, [r6, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800c9ee:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 800c9f2:	f886 3424 	strb.w	r3, [r6, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	f886 3425 	strb.w	r3, [r6, #1061]	; 0x425
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800c9fc:	f640 1344 	movw	r3, #2372	; 0x944
 800ca00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ca04:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800ca08:	f042 0202 	orr.w	r2, r2, #2
 800ca0c:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
            break;
 800ca10:	e064      	b.n	800cadc <LoRaMacProcess+0x92a>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ca12:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800ca16:	f640 1644 	movw	r6, #2372	; 0x944
 800ca1a:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800ca1e:	f896 347f 	ldrb.w	r3, [r6, #1151]	; 0x47f
 800ca22:	9300      	str	r3, [sp, #0]
 800ca24:	462b      	mov	r3, r5
 800ca26:	f002 020f 	and.w	r2, r2, #15
 800ca2a:	2100      	movs	r1, #0
 800ca2c:	a81a      	add	r0, sp, #104	; 0x68
 800ca2e:	f7fe fb39 	bl	800b0a4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ca32:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 800ca36:	f886 341b 	strb.w	r3, [r6, #1051]	; 0x41b
                    break;
 800ca3a:	e7df      	b.n	800c9fc <LoRaMacProcess+0x84a>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800ca3c:	f640 1644 	movw	r6, #2372	; 0x944
 800ca40:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800ca44:	f896 347f 	ldrb.w	r3, [r6, #1151]	; 0x47f
 800ca48:	9300      	str	r3, [sp, #0]
 800ca4a:	462b      	mov	r3, r5
 800ca4c:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800ca50:	2100      	movs	r1, #0
 800ca52:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800ca54:	f7fe fb26 	bl	800b0a4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ca58:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 800ca5c:	f886 341b 	strb.w	r3, [r6, #1051]	; 0x41b
                    break;
 800ca60:	e7cc      	b.n	800c9fc <LoRaMacProcess+0x84a>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ca62:	f640 1344 	movw	r3, #2372	; 0x944
 800ca66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ca6a:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 800ca6e:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ca72:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ca74:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ca78:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800ca7c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 800ca80:	2201      	movs	r2, #1
 800ca82:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 800ca86:	e7b9      	b.n	800c9fc <LoRaMacProcess+0x84a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ca88:	f640 1344 	movw	r3, #2372	; 0x944
 800ca8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ca90:	2201      	movs	r2, #1
 800ca92:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    PrepareRxDoneAbort( );
 800ca96:	f7fe fae5 	bl	800b064 <PrepareRxDoneAbort>
                    break;
 800ca9a:	e7af      	b.n	800c9fc <LoRaMacProcess+0x84a>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800ca9c:	f108 32ff 	add.w	r2, r8, #4294967295
 800caa0:	f640 1544 	movw	r5, #2372	; 0x944
 800caa4:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800caa8:	f505 760e 	add.w	r6, r5, #568	; 0x238
 800caac:	b292      	uxth	r2, r2
 800caae:	f109 0101 	add.w	r1, r9, #1
 800cab2:	4630      	mov	r0, r6
 800cab4:	f004 fa4a 	bl	8010f4c <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800cab8:	2303      	movs	r3, #3
 800caba:	f885 3418 	strb.w	r3, [r5, #1048]	; 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800cabe:	2300      	movs	r3, #0
 800cac0:	f885 3419 	strb.w	r3, [r5, #1049]	; 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800cac4:	f8c5 6420 	str.w	r6, [r5, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800cac8:	f108 38ff 	add.w	r8, r8, #4294967295
 800cacc:	f885 8424 	strb.w	r8, [r5, #1060]	; 0x424
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800cad0:	f895 3481 	ldrb.w	r3, [r5, #1153]	; 0x481
 800cad4:	f043 0302 	orr.w	r3, r3, #2
 800cad8:	f885 3481 	strb.w	r3, [r5, #1153]	; 0x481
    if( MacCtx.NodeAckRequested == true )
 800cadc:	f640 1344 	movw	r3, #2372	; 0x944
 800cae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cae4:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800cae8:	b1a3      	cbz	r3, 800cb14 <LoRaMacProcess+0x962>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800caea:	f640 1344 	movw	r3, #2372	; 0x944
 800caee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800caf2:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800caf6:	b1ab      	cbz	r3, 800cb24 <LoRaMacProcess+0x972>
            OnAckTimeoutTimerEvent( NULL );
 800caf8:	2000      	movs	r0, #0
 800cafa:	f7fe fa8e 	bl	800b01a <OnAckTimeoutTimerEvent>
 800cafe:	e011      	b.n	800cb24 <LoRaMacProcess+0x972>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cb00:	f640 1344 	movw	r3, #2372	; 0x944
 800cb04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cb08:	2201      	movs	r2, #1
 800cb0a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            PrepareRxDoneAbort( );
 800cb0e:	f7fe faa9 	bl	800b064 <PrepareRxDoneAbort>
            break;
 800cb12:	e7e3      	b.n	800cadc <LoRaMacProcess+0x92a>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800cb14:	f640 634c 	movw	r3, #3660	; 0xe4c
 800cb18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cb1c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800cb20:	2b02      	cmp	r3, #2
 800cb22:	d00d      	beq.n	800cb40 <LoRaMacProcess+0x98e>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800cb24:	f640 1344 	movw	r3, #2372	; 0x944
 800cb28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cb2c:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800cb30:	f042 0210 	orr.w	r2, r2, #16
 800cb34:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 800cb38:	f7fe f9fb 	bl	800af32 <UpdateRxSlotIdleState>
 800cb3c:	f7ff bb51 	b.w	800c1e2 <LoRaMacProcess+0x30>
            OnAckTimeoutTimerEvent( NULL );
 800cb40:	2000      	movs	r0, #0
 800cb42:	f7fe fa6a 	bl	800b01a <OnAckTimeoutTimerEvent>
 800cb46:	e7ed      	b.n	800cb24 <LoRaMacProcess+0x972>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800cb48:	f640 634c 	movw	r3, #3660	; 0xe4c
 800cb4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cb50:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800cb54:	2b02      	cmp	r3, #2
 800cb56:	d005      	beq.n	800cb64 <LoRaMacProcess+0x9b2>
        Radio.Sleep( );
 800cb58:	f245 23d0 	movw	r3, #21200	; 0x52d0
 800cb5c:	f6c0 0301 	movt	r3, #2049	; 0x801
 800cb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb62:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800cb64:	f7fe f9e5 	bl	800af32 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800cb68:	f640 1544 	movw	r5, #2372	; 0x944
 800cb6c:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800cb70:	2002      	movs	r0, #2
 800cb72:	f885 0435 	strb.w	r0, [r5, #1077]	; 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800cb76:	f002 f8e5 	bl	800ed44 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800cb7a:	f895 3410 	ldrb.w	r3, [r5, #1040]	; 0x410
 800cb7e:	b113      	cbz	r3, 800cb86 <LoRaMacProcess+0x9d4>
        MacCtx.AckTimeoutRetry = true;
 800cb80:	2201      	movs	r2, #1
 800cb82:	f885 240f 	strb.w	r2, [r5, #1039]	; 0x40f
    MacCtx.MacFlags.Bits.MacDone = 1;
 800cb86:	f640 1344 	movw	r3, #2372	; 0x944
 800cb8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cb8e:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800cb92:	f042 0210 	orr.w	r2, r2, #16
 800cb96:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
}
 800cb9a:	f7ff bb26 	b.w	800c1ea <LoRaMacProcess+0x38>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800cb9e:	2106      	movs	r1, #6
 800cba0:	2005      	movs	r0, #5
 800cba2:	f7fe fd6d 	bl	800b680 <HandleRadioRxErrorTimeout>
}
 800cba6:	f7ff bb24 	b.w	800c1f2 <LoRaMacProcess+0x40>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800cbaa:	2104      	movs	r1, #4
 800cbac:	2003      	movs	r0, #3
 800cbae:	f7fe fd67 	bl	800b680 <HandleRadioRxErrorTimeout>
}
 800cbb2:	f7ff bb22 	b.w	800c1fa <LoRaMacProcess+0x48>
    MacCtx.AllowRequests = requestState;
 800cbb6:	f640 1244 	movw	r2, #2372	; 0x944
 800cbba:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	f882 1482 	strb.w	r1, [r2, #1154]	; 0x482
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800cbc4:	f8d2 2340 	ldr.w	r2, [r2, #832]	; 0x340
 800cbc8:	f012 0f80 	tst.w	r2, #128	; 0x80
 800cbcc:	d007      	beq.n	800cbde <LoRaMacProcess+0xa2c>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800cbce:	f640 1144 	movw	r1, #2372	; 0x944
 800cbd2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800cbd6:	f022 0282 	bic.w	r2, r2, #130	; 0x82
 800cbda:	f8c1 2340 	str.w	r2, [r1, #832]	; 0x340
        if( IsRequestPending( ) > 0 )
 800cbde:	f013 0f05 	tst.w	r3, #5
 800cbe2:	d01b      	beq.n	800cc1c <LoRaMacProcess+0xa6a>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800cbe4:	200c      	movs	r0, #12
 800cbe6:	f002 f8d3 	bl	800ed90 <LoRaMacConfirmQueueIsCmdActive>
 800cbea:	b1b8      	cbz	r0, 800cc1c <LoRaMacProcess+0xa6a>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800cbec:	f640 1344 	movw	r3, #2372	; 0x944
 800cbf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cbf4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800cbf8:	f013 0f01 	tst.w	r3, #1
 800cbfc:	f040 824f 	bne.w	800d09e <LoRaMacProcess+0xeec>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800cc00:	f013 0f04 	tst.w	r3, #4
 800cc04:	d013      	beq.n	800cc2e <LoRaMacProcess+0xa7c>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800cc06:	f640 1344 	movw	r3, #2372	; 0x944
 800cc0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc0e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800cc12:	f022 0202 	bic.w	r2, r2, #2
 800cc16:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        if( noTx == 0x00 )
 800cc1a:	e012      	b.n	800cc42 <LoRaMacProcess+0xa90>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800cc1c:	f640 1344 	movw	r3, #2372	; 0x944
 800cc20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc24:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800cc28:	f013 0f04 	tst.w	r3, #4
 800cc2c:	d124      	bne.n	800cc78 <LoRaMacProcess+0xac6>
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800cc2e:	f640 1344 	movw	r3, #2372	; 0x944
 800cc32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc36:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800cc3a:	f013 0f01 	tst.w	r3, #1
 800cc3e:	f040 823e 	bne.w	800d0be <LoRaMacProcess+0xf0c>
    if( MacCtx.MacState == LORAMAC_IDLE )
 800cc42:	f640 1344 	movw	r3, #2372	; 0x944
 800cc46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc4a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	f040 8207 	bne.w	800d062 <LoRaMacProcess+0xeb0>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800cc54:	f640 1344 	movw	r3, #2372	; 0x944
 800cc58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc5c:	f893 4481 	ldrb.w	r4, [r3, #1153]	; 0x481
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800cc60:	f014 0f04 	tst.w	r4, #4
 800cc64:	f040 81c8 	bne.w	800cff8 <LoRaMacProcess+0xe46>
    MacCtx.AllowRequests = requestState;
 800cc68:	f640 1344 	movw	r3, #2372	; 0x944
 800cc6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc70:	2201      	movs	r2, #1
 800cc72:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
        if( reqEvents.Bits.MlmeReq == 1 )
 800cc76:	e1e8      	b.n	800d04a <LoRaMacProcess+0xe98>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800cc78:	2001      	movs	r0, #1
 800cc7a:	f002 f889 	bl	800ed90 <LoRaMacConfirmQueueIsCmdActive>
 800cc7e:	b1a8      	cbz	r0, 800ccac <LoRaMacProcess+0xafa>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800cc80:	2001      	movs	r0, #1
 800cc82:	f002 f848 	bl	800ed16 <LoRaMacConfirmQueueGetStatus>
 800cc86:	b930      	cbnz	r0, 800cc96 <LoRaMacProcess+0xae4>
                MacCtx.ChannelsNbTransCounter = 0;
 800cc88:	f640 1344 	movw	r3, #2372	; 0x944
 800cc8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc90:	2200      	movs	r2, #0
 800cc92:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800cc96:	f640 1344 	movw	r3, #2372	; 0x944
 800cc9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc9e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800cca2:	f022 0202 	bic.w	r2, r2, #2
 800cca6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
 800ccaa:	e7c0      	b.n	800cc2e <LoRaMacProcess+0xa7c>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800ccac:	2006      	movs	r0, #6
 800ccae:	f002 f86f 	bl	800ed90 <LoRaMacConfirmQueueIsCmdActive>
 800ccb2:	b150      	cbz	r0, 800ccca <LoRaMacProcess+0xb18>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ccb4:	f640 1344 	movw	r3, #2372	; 0x944
 800ccb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ccbc:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800ccc0:	f022 0202 	bic.w	r2, r2, #2
 800ccc4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
 800ccc8:	e7b1      	b.n	800cc2e <LoRaMacProcess+0xa7c>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800ccca:	2007      	movs	r0, #7
 800cccc:	f002 f860 	bl	800ed90 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800ccd0:	2800      	cmp	r0, #0
 800ccd2:	d0ac      	beq.n	800cc2e <LoRaMacProcess+0xa7c>
 800ccd4:	e7ee      	b.n	800ccb4 <LoRaMacProcess+0xb02>
    if( MacCtx.ChannelsNbTransCounter >=
 800ccd6:	f640 1144 	movw	r1, #2372	; 0x944
 800ccda:	f2c2 0100 	movt	r1, #8192	; 0x2000
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800ccde:	f640 624c 	movw	r2, #3660	; 0xe4c
 800cce2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    if( MacCtx.ChannelsNbTransCounter >=
 800cce6:	f891 140c 	ldrb.w	r1, [r1, #1036]	; 0x40c
 800ccea:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 800ccee:	4291      	cmp	r1, r2
 800ccf0:	f080 8153 	bcs.w	800cf9a <LoRaMacProcess+0xde8>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ccf4:	f013 0f02 	tst.w	r3, #2
 800ccf8:	f000 81f0 	beq.w	800d0dc <LoRaMacProcess+0xf2a>
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800ccfc:	f640 634c 	movw	r3, #3660	; 0xe4c
 800cd00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd04:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f000 8146 	beq.w	800cf9a <LoRaMacProcess+0xde8>
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800cd0e:	f640 1344 	movw	r3, #2372	; 0x944
 800cd12:	f2c2 0300 	movt	r3, #8192	; 0x2000
        if( stopRetransmission == true )
 800cd16:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f040 81de 	bne.w	800d0dc <LoRaMacProcess+0xf2a>
 800cd20:	e13b      	b.n	800cf9a <LoRaMacProcess+0xde8>
            if( MacCtx.AckTimeoutRetry == true )
 800cd22:	f640 1244 	movw	r2, #2372	; 0x944
 800cd26:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800cd2a:	f892 240f 	ldrb.w	r2, [r2, #1039]	; 0x40f
 800cd2e:	2a00      	cmp	r2, #0
 800cd30:	f000 81a6 	beq.w	800d080 <LoRaMacProcess+0xece>
    if( MacCtx.AckTimeoutRetriesCounter >=
 800cd34:	f640 1244 	movw	r2, #2372	; 0x944
 800cd38:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800cd3c:	f892 140e 	ldrb.w	r1, [r2, #1038]	; 0x40e
 800cd40:	f892 240d 	ldrb.w	r2, [r2, #1037]	; 0x40d
 800cd44:	428a      	cmp	r2, r1
 800cd46:	f240 8110 	bls.w	800cf6a <LoRaMacProcess+0xdb8>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800cd4a:	f013 0f02 	tst.w	r3, #2
 800cd4e:	f000 80df 	beq.w	800cf10 <LoRaMacProcess+0xd5e>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800cd52:	f640 1344 	movw	r3, #2372	; 0x944
 800cd56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd5a:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800cd5e:	f640 624c 	movw	r2, #3660	; 0xe4c
 800cd62:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800cd66:	f892 212a 	ldrb.w	r2, [r2, #298]	; 0x12a
 800cd6a:	b9fa      	cbnz	r2, 800cdac <LoRaMacProcess+0xbfa>
                    if( stopRetransmission == false )
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	f000 80d8 	beq.w	800cf22 <LoRaMacProcess+0xd70>
 800cd72:	e10a      	b.n	800cf8a <LoRaMacProcess+0xdd8>
static void AckTimeoutRetriesFinalize( void )
{
    if( MacCtx.McpsConfirm.AckReceived == false )
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800cd74:	2302      	movs	r3, #2
 800cd76:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800cd7a:	f640 634c 	movw	r3, #3660	; 0xe4c
 800cd7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd82:	f503 7208 	add.w	r2, r3, #544	; 0x220
 800cd86:	9216      	str	r2, [sp, #88]	; 0x58
        params.NvmGroup2 = &Nvm.RegionGroup2;
 800cd88:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
 800cd8c:	9217      	str	r2, [sp, #92]	; 0x5c
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800cd8e:	a916      	add	r1, sp, #88	; 0x58
 800cd90:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800cd94:	f002 fd70 	bl	800f878 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 800cd98:	f640 1344 	movw	r3, #2372	; 0x944
 800cd9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 800cda6:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 800cdaa:	e0ee      	b.n	800cf8a <LoRaMacProcess+0xdd8>
        if( stopRetransmission == true )
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f000 8195 	beq.w	800d0dc <LoRaMacProcess+0xf2a>
 800cdb2:	e0f2      	b.n	800cf9a <LoRaMacProcess+0xde8>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800cdb4:	f640 508c 	movw	r0, #3468	; 0xd8c
 800cdb8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800cdbc:	f001 fff5 	bl	800edaa <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800cdc0:	f002 f82e 	bl	800ee20 <LoRaMacConfirmQueueGetCnt>
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	f000 8140 	beq.w	800d04a <LoRaMacProcess+0xe98>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800cdca:	f640 1344 	movw	r3, #2372	; 0x944
 800cdce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cdd2:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800cdd6:	f042 0204 	orr.w	r2, r2, #4
 800cdda:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800cdde:	e134      	b.n	800d04a <LoRaMacProcess+0xe98>
        OpenContinuousRxCWindow( );
 800cde0:	f7fe ff28 	bl	800bc34 <OpenContinuousRxCWindow>
 800cde4:	f7ff ba54 	b.w	800c290 <LoRaMacProcess+0xde>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800cde8:	f640 1344 	movw	r3, #2372	; 0x944
 800cdec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cdf0:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800cdf4:	f36f 1245 	bfc	r2, #5, #1
 800cdf8:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    if( MacCtx.MacState != LORAMAC_IDLE )
 800cdfc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f47f aa4f 	bne.w	800c2a4 <LoRaMacProcess+0xf2>
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800ce06:	f640 644c 	movw	r4, #3660	; 0xe4c
 800ce0a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800ce0e:	2124      	movs	r1, #36	; 0x24
 800ce10:	4620      	mov	r0, r4
 800ce12:	f004 f8bf 	bl	8010f94 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800ce16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce18:	4298      	cmp	r0, r3
 800ce1a:	d077      	beq.n	800cf0c <LoRaMacProcess+0xd5a>
        nvmData->Crypto.Crc32 = crc;
 800ce1c:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800ce1e:	2401      	movs	r4, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800ce20:	f640 654c 	movw	r5, #3660	; 0xe4c
 800ce24:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800ce28:	211c      	movs	r1, #28
 800ce2a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800ce2e:	f004 f8b1 	bl	8010f94 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800ce32:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ce34:	4298      	cmp	r0, r3
 800ce36:	d002      	beq.n	800ce3e <LoRaMacProcess+0xc8c>
        nvmData->MacGroup1.Crc32 = crc;
 800ce38:	6468      	str	r0, [r5, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800ce3a:	f044 0402 	orr.w	r4, r4, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800ce3e:	f640 654c 	movw	r5, #3660	; 0xe4c
 800ce42:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800ce46:	21fc      	movs	r1, #252	; 0xfc
 800ce48:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800ce4c:	f004 f8a2 	bl	8010f94 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800ce50:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
 800ce54:	4298      	cmp	r0, r3
 800ce56:	d003      	beq.n	800ce60 <LoRaMacProcess+0xcae>
        nvmData->MacGroup2.Crc32 = crc;
 800ce58:	f8c5 0144 	str.w	r0, [r5, #324]	; 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800ce5c:	f044 0404 	orr.w	r4, r4, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800ce60:	f640 654c 	movw	r5, #3660	; 0xe4c
 800ce64:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800ce68:	21d4      	movs	r1, #212	; 0xd4
 800ce6a:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 800ce6e:	f004 f891 	bl	8010f94 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800ce72:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800ce76:	4298      	cmp	r0, r3
 800ce78:	d003      	beq.n	800ce82 <LoRaMacProcess+0xcd0>
        nvmData->SecureElement.Crc32 = crc;
 800ce7a:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800ce7e:	f044 0408 	orr.w	r4, r4, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800ce82:	f640 654c 	movw	r5, #3660	; 0xe4c
 800ce86:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800ce8a:	2190      	movs	r1, #144	; 0x90
 800ce8c:	f505 7008 	add.w	r0, r5, #544	; 0x220
 800ce90:	f004 f880 	bl	8010f94 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800ce94:	f8d5 32b0 	ldr.w	r3, [r5, #688]	; 0x2b0
 800ce98:	4298      	cmp	r0, r3
 800ce9a:	d003      	beq.n	800cea4 <LoRaMacProcess+0xcf2>
        nvmData->RegionGroup1.Crc32 = crc;
 800ce9c:	f8c5 02b0 	str.w	r0, [r5, #688]	; 0x2b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800cea0:	f044 0410 	orr.w	r4, r4, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800cea4:	f640 654c 	movw	r5, #3660	; 0xe4c
 800cea8:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800ceac:	f44f 6193 	mov.w	r1, #1176	; 0x498
 800ceb0:	f505 702d 	add.w	r0, r5, #692	; 0x2b4
 800ceb4:	f004 f86e 	bl	8010f94 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800ceb8:	f8d5 374c 	ldr.w	r3, [r5, #1868]	; 0x74c
 800cebc:	4298      	cmp	r0, r3
 800cebe:	d003      	beq.n	800cec8 <LoRaMacProcess+0xd16>
        nvmData->RegionGroup2.Crc32 = crc;
 800cec0:	f8c5 074c 	str.w	r0, [r5, #1868]	; 0x74c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800cec4:	f044 0420 	orr.w	r4, r4, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800cec8:	f640 654c 	movw	r5, #3660	; 0xe4c
 800cecc:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800ced0:	2114      	movs	r1, #20
 800ced2:	f505 60ea 	add.w	r0, r5, #1872	; 0x750
 800ced6:	f004 f85d 	bl	8010f94 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800ceda:	f8d5 3764 	ldr.w	r3, [r5, #1892]	; 0x764
 800cede:	4298      	cmp	r0, r3
 800cee0:	d003      	beq.n	800ceea <LoRaMacProcess+0xd38>
        nvmData->ClassB.Crc32 = crc;
 800cee2:	f8c5 0764 	str.w	r0, [r5, #1892]	; 0x764
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800cee6:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800ceea:	f640 1344 	movw	r3, #2372	; 0x944
 800ceee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cef2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	f43f a9d4 	beq.w	800c2a4 <LoRaMacProcess+0xf2>
 800cefc:	691b      	ldr	r3, [r3, #16]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f43f a9d0 	beq.w	800c2a4 <LoRaMacProcess+0xf2>
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800cf04:	4620      	mov	r0, r4
 800cf06:	4798      	blx	r3
}
 800cf08:	f7ff b9cc 	b.w	800c2a4 <LoRaMacProcess+0xf2>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800cf0c:	2400      	movs	r4, #0
 800cf0e:	e787      	b.n	800ce20 <LoRaMacProcess+0xc6e>
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800cf10:	f640 634c 	movw	r3, #3660	; 0xe4c
 800cf14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cf18:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f040 80dd 	bne.w	800d0dc <LoRaMacProcess+0xf2a>
        MacCtx.AckTimeoutRetriesCounter++;
 800cf22:	1c4b      	adds	r3, r1, #1
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	f640 1244 	movw	r2, #2372	; 0x944
 800cf2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800cf2e:	f882 340e 	strb.w	r3, [r2, #1038]	; 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800cf32:	f013 0f01 	tst.w	r3, #1
 800cf36:	f000 80d1 	beq.w	800d0dc <LoRaMacProcess+0xf2a>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800cf3a:	2322      	movs	r3, #34	; 0x22
 800cf3c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800cf40:	f640 644c 	movw	r4, #3660	; 0xe4c
 800cf44:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800cf48:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 800cf4c:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800cf50:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800cf54:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800cf58:	a916      	add	r1, sp, #88	; 0x58
 800cf5a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800cf5e:	f002 fc74 	bl	800f84a <RegionGetPhyParam>
 800cf62:	900c      	str	r0, [sp, #48]	; 0x30
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 800cf64:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 800cf68:	e0b8      	b.n	800d0dc <LoRaMacProcess+0xf2a>
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800cf6a:	f640 634c 	movw	r3, #3660	; 0xe4c
 800cf6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cf72:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 800cf76:	b983      	cbnz	r3, 800cf9a <LoRaMacProcess+0xde8>
    if( MacCtx.McpsConfirm.AckReceived == false )
 800cf78:	f640 1344 	movw	r3, #2372	; 0x944
 800cf7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cf80:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	f43f aef5 	beq.w	800cd74 <LoRaMacProcess+0xbc2>
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800cf8a:	f640 1344 	movw	r3, #2372	; 0x944
 800cf8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cf92:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 800cf96:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            TimerStop( &MacCtx.TxDelayedTimer );
 800cf9a:	f640 1444 	movw	r4, #2372	; 0x944
 800cf9e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800cfa2:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800cfa6:	f006 ff21 	bl	8013dec <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800cfaa:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800cfae:	f023 0320 	bic.w	r3, r3, #32
 800cfb2:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800cfb6:	f7fd ffcc 	bl	800af52 <StopRetransmission>
 800cfba:	e09e      	b.n	800d0fa <LoRaMacProcess+0xf48>
    switch( addrID )
 800cfbc:	f1bb 0f01 	cmp.w	fp, #1
 800cfc0:	f43f ac57 	beq.w	800c872 <LoRaMacProcess+0x6c0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cfc4:	f640 1344 	movw	r3, #2372	; 0x944
 800cfc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cfcc:	2201      	movs	r2, #1
 800cfce:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800cfd2:	9a07      	ldr	r2, [sp, #28]
 800cfd4:	f640 1344 	movw	r3, #2372	; 0x944
 800cfd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cfdc:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800cfe0:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
                PrepareRxDoneAbort( );
 800cfe4:	f7fe f83e 	bl	800b064 <PrepareRxDoneAbort>
                return;
 800cfe8:	f7ff b8fb 	b.w	800c1e2 <LoRaMacProcess+0x30>
        *fType = FRAME_TYPE_A;
 800cfec:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800cff0:	e0b2      	b.n	800d158 <LoRaMacProcess+0xfa6>
        *fType = FRAME_TYPE_B;
 800cff2:	f04f 0a01 	mov.w	sl, #1
 800cff6:	e0af      	b.n	800d158 <LoRaMacProcess+0xfa6>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800cff8:	f640 1344 	movw	r3, #2372	; 0x944
 800cffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d000:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800d004:	f36f 0282 	bfc	r2, #2, #1
 800d008:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.AllowRequests = requestState;
 800d00c:	2201      	movs	r2, #1
 800d00e:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
        if( reqEvents.Bits.McpsReq == 1 )
 800d012:	e016      	b.n	800d042 <LoRaMacProcess+0xe90>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800d014:	f640 1344 	movw	r3, #2372	; 0x944
 800d018:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d01c:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800d020:	f36f 0282 	bfc	r2, #2, #1
 800d024:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.AllowRequests = requestState;
 800d028:	2201      	movs	r2, #1
 800d02a:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800d02e:	f640 1044 	movw	r0, #2372	; 0x944
 800d032:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d036:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f200 4034 	addw	r0, r0, #1076	; 0x434
 800d040:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800d042:	f014 0f04 	tst.w	r4, #4
 800d046:	f47f aeb5 	bne.w	800cdb4 <LoRaMacProcess+0xc02>
        LoRaMacClassBResumeBeaconing( );
 800d04a:	f001 fc44 	bl	800e8d6 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800d04e:	f640 1344 	movw	r3, #2372	; 0x944
 800d052:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d056:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800d05a:	f36f 1204 	bfc	r2, #4, #1
 800d05e:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.AllowRequests = requestState;
 800d062:	f640 1344 	movw	r3, #2372	; 0x944
 800d066:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d06a:	2201      	movs	r2, #1
 800d06c:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800d070:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800d074:	f042 0220 	orr.w	r2, r2, #32
 800d078:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800d07c:	f7ff b8c9 	b.w	800c212 <LoRaMacProcess+0x60>
    if( MacCtx.MacState == LORAMAC_IDLE )
 800d080:	f640 1344 	movw	r3, #2372	; 0x944
 800d084:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d088:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d1e8      	bne.n	800d062 <LoRaMacProcess+0xeb0>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800d090:	f640 1344 	movw	r3, #2372	; 0x944
 800d094:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d098:	f893 4481 	ldrb.w	r4, [r3, #1153]	; 0x481
 800d09c:	e03f      	b.n	800d11e <LoRaMacProcess+0xf6c>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800d09e:	f640 1344 	movw	r3, #2372	; 0x944
 800d0a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d0a6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d0aa:	f013 0f04 	tst.w	r3, #4
 800d0ae:	f47f ade3 	bne.w	800cc78 <LoRaMacProcess+0xac6>
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800d0b2:	f640 1344 	movw	r3, #2372	; 0x944
 800d0b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d0ba:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800d0be:	f640 1244 	movw	r2, #2372	; 0x944
 800d0c2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800d0c6:	f892 2434 	ldrb.w	r2, [r2, #1076]	; 0x434
 800d0ca:	2a00      	cmp	r2, #0
 800d0cc:	f43f ae03 	beq.w	800ccd6 <LoRaMacProcess+0xb24>
 800d0d0:	2a03      	cmp	r2, #3
 800d0d2:	f43f ae00 	beq.w	800ccd6 <LoRaMacProcess+0xb24>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800d0d6:	2a01      	cmp	r2, #1
 800d0d8:	f43f ae23 	beq.w	800cd22 <LoRaMacProcess+0xb70>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800d0dc:	f640 1344 	movw	r3, #2372	; 0x944
 800d0e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d0e4:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800d0e8:	f36f 1204 	bfc	r2, #4, #1
 800d0ec:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800d0f0:	2000      	movs	r0, #0
 800d0f2:	f883 040f 	strb.w	r0, [r3, #1039]	; 0x40f
            OnTxDelayedTimerEvent( NULL );
 800d0f6:	f7fe fd73 	bl	800bbe0 <OnTxDelayedTimerEvent>
    if( MacCtx.MacState == LORAMAC_IDLE )
 800d0fa:	f640 1344 	movw	r3, #2372	; 0x944
 800d0fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d102:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d106:	2b00      	cmp	r3, #0
 800d108:	d1ab      	bne.n	800d062 <LoRaMacProcess+0xeb0>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800d10a:	f640 1344 	movw	r3, #2372	; 0x944
 800d10e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d112:	f893 4481 	ldrb.w	r4, [r3, #1153]	; 0x481
 800d116:	f014 0f01 	tst.w	r4, #1
 800d11a:	f43f ada1 	beq.w	800cc60 <LoRaMacProcess+0xaae>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800d11e:	f640 1344 	movw	r3, #2372	; 0x944
 800d122:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d126:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800d12a:	f36f 0200 	bfc	r2, #0, #1
 800d12e:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800d132:	f012 0f04 	tst.w	r2, #4
 800d136:	f47f af6d 	bne.w	800d014 <LoRaMacProcess+0xe62>
    MacCtx.AllowRequests = requestState;
 800d13a:	f640 1344 	movw	r3, #2372	; 0x944
 800d13e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d142:	2201      	movs	r2, #1
 800d144:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
        if( reqEvents.Bits.McpsReq == 1 )
 800d148:	e771      	b.n	800d02e <LoRaMacProcess+0xe7c>
    else if( macMsg->FRMPayloadSize == 0 )
 800d14a:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 800d14e:	2b00      	cmp	r3, #0
 800d150:	f47f aaee 	bne.w	800c730 <LoRaMacProcess+0x57e>
        *fType = FRAME_TYPE_B;
 800d154:	f04f 0a01 	mov.w	sl, #1
            downLinkCounter = 0;
 800d158:	2300      	movs	r3, #0
 800d15a:	9307      	str	r3, [sp, #28]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800d15c:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d160:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d164:	f8d3 80ec 	ldr.w	r8, [r3, #236]	; 0xec
 800d168:	4542      	cmp	r2, r8
 800d16a:	f43f aaeb 	beq.w	800c744 <LoRaMacProcess+0x592>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800d16e:	2315      	movs	r3, #21
 800d170:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d174:	f640 684c 	movw	r8, #3660	; 0xe4c
 800d178:	f2c2 0800 	movt	r8, #8192	; 0x2000
 800d17c:	a908      	add	r1, sp, #32
 800d17e:	f898 0048 	ldrb.w	r0, [r8, #72]	; 0x48
 800d182:	f002 fb62 	bl	800f84a <RegionGetPhyParam>
 800d186:	9006      	str	r0, [sp, #24]
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800d188:	b281      	uxth	r1, r0
 800d18a:	f898 312a 	ldrb.w	r3, [r8, #298]	; 0x12a
 800d18e:	f04f 0b01 	mov.w	fp, #1
            if( lrWanVersion.Fields.Minor == 1 )
 800d192:	2b01      	cmp	r3, #1
 800d194:	f43f ab72 	beq.w	800c87c <LoRaMacProcess+0x6ca>
 800d198:	46b8      	mov	r8, r7
                *fCntID = FCNT_DOWN;
 800d19a:	f04f 0903 	mov.w	r9, #3
 800d19e:	f7ff bb06 	b.w	800c7ae <LoRaMacProcess+0x5fc>

0800d1a2 <LoRaMacInitialization>:
    }
    return 0;
}

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800d1a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a6:	b08b      	sub	sp, #44	; 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	f000 81bc 	beq.w	800d526 <LoRaMacInitialization+0x384>
 800d1ae:	4688      	mov	r8, r1
 800d1b0:	4691      	mov	r9, r2
 800d1b2:	4607      	mov	r7, r0
 800d1b4:	2900      	cmp	r1, #0
 800d1b6:	f000 81b8 	beq.w	800d52a <LoRaMacInitialization+0x388>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800d1ba:	6803      	ldr	r3, [r0, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f000 81b6 	beq.w	800d52e <LoRaMacInitialization+0x38c>
 800d1c2:	6843      	ldr	r3, [r0, #4]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f000 81b4 	beq.w	800d532 <LoRaMacInitialization+0x390>
        ( primitives->MacMcpsIndication == NULL ) ||
 800d1ca:	6883      	ldr	r3, [r0, #8]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f000 81b2 	beq.w	800d536 <LoRaMacInitialization+0x394>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800d1d2:	68c3      	ldr	r3, [r0, #12]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	f000 81b0 	beq.w	800d53a <LoRaMacInitialization+0x398>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800d1da:	4610      	mov	r0, r2
 800d1dc:	f002 fb30 	bl	800f840 <RegionIsActive>
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	f000 81ac 	beq.w	800d53e <LoRaMacInitialization+0x39c>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800d1e6:	4638      	mov	r0, r7
 800d1e8:	f001 fd17 	bl	800ec1a <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800d1ec:	f640 644c 	movw	r4, #3660	; 0xe4c
 800d1f0:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800d1f4:	f44f 62ed 	mov.w	r2, #1896	; 0x768
 800d1f8:	2100      	movs	r1, #0
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	f003 fec0 	bl	8010f80 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800d200:	f640 1544 	movw	r5, #2372	; 0x944
 800d204:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800d208:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 800d20c:	2100      	movs	r1, #0
 800d20e:	4628      	mov	r0, r5
 800d210:	f003 feb6 	bl	8010f80 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 800d214:	f04f 0a01 	mov.w	sl, #1
 800d218:	f885 a40e 	strb.w	sl, [r5, #1038]	; 0x40e
    MacCtx.AckTimeoutRetries = 1;
 800d21c:	f885 a40d 	strb.w	sl, [r5, #1037]	; 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800d220:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800d224:	2600      	movs	r6, #0
 800d226:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800d22a:	f884 608c 	strb.w	r6, [r4, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800d22e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d232:	f2c0 1300 	movt	r3, #256	; 0x100
 800d236:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d23a:	230f      	movs	r3, #15
 800d23c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d240:	a908      	add	r1, sp, #32
 800d242:	4648      	mov	r0, r9
 800d244:	f002 fb01 	bl	800f84a <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800d248:	1b80      	subs	r0, r0, r6
 800d24a:	bf18      	it	ne
 800d24c:	2001      	movne	r0, #1
 800d24e:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800d252:	f04f 0b0a 	mov.w	fp, #10
 800d256:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d25a:	a908      	add	r1, sp, #32
 800d25c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d260:	f002 faf3 	bl	800f84a <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800d264:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800d268:	f04f 0906 	mov.w	r9, #6
 800d26c:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d270:	a908      	add	r1, sp, #32
 800d272:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d276:	f002 fae8 	bl	800f84a <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800d27a:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800d27e:	2310      	movs	r3, #16
 800d280:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d284:	a908      	add	r1, sp, #32
 800d286:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d28a:	f002 fade 	bl	800f84a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800d28e:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800d292:	2311      	movs	r3, #17
 800d294:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d298:	a908      	add	r1, sp, #32
 800d29a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d29e:	f002 fad4 	bl	800f84a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800d2a2:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800d2a6:	2312      	movs	r3, #18
 800d2a8:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d2ac:	a908      	add	r1, sp, #32
 800d2ae:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d2b2:	f002 faca 	bl	800f84a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800d2b6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800d2ba:	2313      	movs	r3, #19
 800d2bc:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d2c0:	a908      	add	r1, sp, #32
 800d2c2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d2c6:	f002 fac0 	bl	800f84a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800d2ca:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800d2ce:	2314      	movs	r3, #20
 800d2d0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d2d4:	a908      	add	r1, sp, #32
 800d2d6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d2da:	f002 fab6 	bl	800f84a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800d2de:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800d2e2:	2317      	movs	r3, #23
 800d2e4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d2e8:	a908      	add	r1, sp, #32
 800d2ea:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d2ee:	f002 faac 	bl	800f84a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800d2f2:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800d2f6:	2318      	movs	r3, #24
 800d2f8:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d2fc:	a908      	add	r1, sp, #32
 800d2fe:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d302:	f002 faa2 	bl	800f84a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800d306:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800d30a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800d30e:	2319      	movs	r3, #25
 800d310:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d314:	a908      	add	r1, sp, #32
 800d316:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d31a:	f002 fa96 	bl	800f84a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800d31e:	b2c0      	uxtb	r0, r0
 800d320:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800d324:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800d328:	231e      	movs	r3, #30
 800d32a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d32e:	a908      	add	r1, sp, #32
 800d330:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d334:	f002 fa89 	bl	800f84a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800d338:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800d33c:	231f      	movs	r3, #31
 800d33e:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d342:	a908      	add	r1, sp, #32
 800d344:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d348:	f002 fa7f 	bl	800f84a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800d34c:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800d350:	2320      	movs	r3, #32
 800d352:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d356:	eb0d 0103 	add.w	r1, sp, r3
 800d35a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d35e:	f002 fa74 	bl	800f84a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800d362:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800d366:	2321      	movs	r3, #33	; 0x21
 800d368:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d36c:	a908      	add	r1, sp, #32
 800d36e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d372:	f002 fa6a 	bl	800f84a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800d376:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800d37a:	230b      	movs	r3, #11
 800d37c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d380:	a908      	add	r1, sp, #32
 800d382:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d386:	f002 fa60 	bl	800f84a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800d38a:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800d38e:	230c      	movs	r3, #12
 800d390:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d394:	a908      	add	r1, sp, #32
 800d396:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d39a:	f002 fa56 	bl	800f84a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800d39e:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800d3a2:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800d3a6:	f8c4 b094 	str.w	fp, [r4, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800d3aa:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800d3ae:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800d3b2:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800d3b6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800d3ba:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800d3bc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800d3c0:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800d3c2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800d3c6:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800d3c8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800d3cc:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800d3ce:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800d3d2:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800d3d4:	f884 a068 	strb.w	sl, [r4, #104]	; 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800d3d8:	f88d 6018 	strb.w	r6, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800d3dc:	f504 7308 	add.w	r3, r4, #544	; 0x220
 800d3e0:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800d3e2:	f504 732d 	add.w	r3, r4, #692	; 0x2b4
 800d3e6:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800d3e8:	a904      	add	r1, sp, #16
 800d3ea:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d3ee:	f002 fa43 	bl	800f878 <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800d3f2:	f8c5 8348 	str.w	r8, [r5, #840]	; 0x348
    ResetMacParameters( false );
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	f7fe fd4f 	bl	800be9a <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800d3fc:	f884 a119 	strb.w	sl, [r4, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 800d400:	f8c5 7344 	str.w	r7, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800d404:	f885 6481 	strb.w	r6, [r5, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 800d408:	f8c5 a340 	str.w	sl, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800d40c:	62e6      	str	r6, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800d40e:	6326      	str	r6, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800d410:	9600      	str	r6, [sp, #0]
 800d412:	f64b 33e1 	movw	r3, #48097	; 0xbbe1
 800d416:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d41a:	4632      	mov	r2, r6
 800d41c:	f04f 31ff 	mov.w	r1, #4294967295
 800d420:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800d424:	f006 fc7a 	bl	8013d1c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800d428:	9600      	str	r6, [sp, #0]
 800d42a:	f64b 5357 	movw	r3, #48471	; 0xbd57
 800d42e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d432:	4632      	mov	r2, r6
 800d434:	f04f 31ff 	mov.w	r1, #4294967295
 800d438:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800d43c:	f006 fc6e 	bl	8013d1c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800d440:	9600      	str	r6, [sp, #0]
 800d442:	f64b 43fd 	movw	r3, #48381	; 0xbcfd
 800d446:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d44a:	4632      	mov	r2, r6
 800d44c:	f04f 31ff 	mov.w	r1, #4294967295
 800d450:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800d454:	f006 fc62 	bl	8013d1c <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800d458:	9600      	str	r6, [sp, #0]
 800d45a:	f24b 031b 	movw	r3, #45083	; 0xb01b
 800d45e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d462:	4632      	mov	r2, r6
 800d464:	f04f 31ff 	mov.w	r1, #4294967295
 800d468:	f505 707d 	add.w	r0, r5, #1012	; 0x3f4
 800d46c:	f006 fc56 	bl	8013d1c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800d470:	ae02      	add	r6, sp, #8
 800d472:	4630      	mov	r0, r6
 800d474:	f006 f919 	bl	80136aa <SysTimeGetMcuTime>
 800d478:	f504 7390 	add.w	r3, r4, #288	; 0x120
 800d47c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d480:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800d484:	f64b 6347 	movw	r3, #48711	; 0xbe47
 800d488:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d48c:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800d490:	f64b 53f5 	movw	r3, #48629	; 0xbdf5
 800d494:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d498:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800d49c:	f64a 73cf 	movw	r3, #45007	; 0xafcf
 800d4a0:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d4a4:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800d4a8:	f64b 53cb 	movw	r3, #48587	; 0xbdcb
 800d4ac:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d4b0:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800d4b4:	f64b 53a1 	movw	r3, #48545	; 0xbda1
 800d4b8:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d4bc:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800d4c0:	f245 23d0 	movw	r3, #21200	; 0x52d0
 800d4c4:	f6c0 0301 	movt	r3, #2049	; 0x801
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800d4ce:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800d4d0:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 800d4d4:	f7fc fb1d 	bl	8009b12 <SecureElementInit>
 800d4d8:	bbb0      	cbnz	r0, 800d548 <LoRaMacInitialization+0x3a6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f001 fdd4 	bl	800f088 <LoRaMacCryptoInit>
 800d4e0:	bba0      	cbnz	r0, 800d54c <LoRaMacInitialization+0x3aa>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800d4e2:	f001 fa0a 	bl	800e8fa <LoRaMacCommandsInit>
 800d4e6:	bb98      	cbnz	r0, 800d550 <LoRaMacInitialization+0x3ae>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800d4e8:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800d4ec:	f001 fe33 	bl	800f156 <LoRaMacCryptoSetMulticastReference>
 800d4f0:	4604      	mov	r4, r0
 800d4f2:	bb78      	cbnz	r0, 800d554 <LoRaMacInitialization+0x3b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800d4f4:	f245 25d0 	movw	r5, #21200	; 0x52d0
 800d4f8:	f6c0 0501 	movt	r5, #2049	; 0x801
 800d4fc:	696b      	ldr	r3, [r5, #20]
 800d4fe:	4798      	blx	r3
 800d500:	f003 fcfa 	bl	8010ef8 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800d504:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d508:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d50c:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800d50e:	f893 0119 	ldrb.w	r0, [r3, #281]	; 0x119
 800d512:	4790      	blx	r2
    Radio.Sleep( );
 800d514:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d516:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 800d518:	f640 1344 	movw	r3, #2372	; 0x944
 800d51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d520:	f883 a482 	strb.w	sl, [r3, #1154]	; 0x482
}
 800d524:	e00c      	b.n	800d540 <LoRaMacInitialization+0x39e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d526:	2403      	movs	r4, #3
 800d528:	e00a      	b.n	800d540 <LoRaMacInitialization+0x39e>
 800d52a:	2403      	movs	r4, #3
 800d52c:	e008      	b.n	800d540 <LoRaMacInitialization+0x39e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d52e:	2403      	movs	r4, #3
 800d530:	e006      	b.n	800d540 <LoRaMacInitialization+0x39e>
 800d532:	2403      	movs	r4, #3
 800d534:	e004      	b.n	800d540 <LoRaMacInitialization+0x39e>
 800d536:	2403      	movs	r4, #3
 800d538:	e002      	b.n	800d540 <LoRaMacInitialization+0x39e>
 800d53a:	2403      	movs	r4, #3
 800d53c:	e000      	b.n	800d540 <LoRaMacInitialization+0x39e>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800d53e:	2409      	movs	r4, #9

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 800d540:	4620      	mov	r0, r4
 800d542:	b00b      	add	sp, #44	; 0x2c
 800d544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800d548:	2411      	movs	r4, #17
 800d54a:	e7f9      	b.n	800d540 <LoRaMacInitialization+0x39e>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800d54c:	2411      	movs	r4, #17
 800d54e:	e7f7      	b.n	800d540 <LoRaMacInitialization+0x39e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d550:	2413      	movs	r4, #19
 800d552:	e7f5      	b.n	800d540 <LoRaMacInitialization+0x39e>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800d554:	2411      	movs	r4, #17
 800d556:	e7f3      	b.n	800d540 <LoRaMacInitialization+0x39e>

0800d558 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800d558:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800d55a:	f640 1344 	movw	r3, #2372	; 0x944
 800d55e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d562:	2400      	movs	r4, #0
 800d564:	f8c3 4340 	str.w	r4, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 800d568:	f7fd fce3 	bl	800af32 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 800d56c:	4620      	mov	r0, r4
 800d56e:	bd10      	pop	{r4, pc}

0800d570 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800d570:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800d572:	f7fe fdfc 	bl	800c16e <LoRaMacIsBusy>
 800d576:	b148      	cbz	r0, 800d58c <LoRaMacStop+0x1c>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800d578:	f640 1344 	movw	r3, #2372	; 0x944
 800d57c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d580:	f8d3 0340 	ldr.w	r0, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800d584:	3801      	subs	r0, #1
 800d586:	bf18      	it	ne
 800d588:	2001      	movne	r0, #1
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
}
 800d58a:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800d58c:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d590:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d594:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d598:	2b02      	cmp	r3, #2
 800d59a:	d008      	beq.n	800d5ae <LoRaMacStop+0x3e>
        MacCtx.MacState = LORAMAC_STOPPED;
 800d59c:	f640 1344 	movw	r3, #2372	; 0x944
 800d5a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800d5aa:	2000      	movs	r0, #0
 800d5ac:	e7ed      	b.n	800d58a <LoRaMacStop+0x1a>
            Radio.Sleep( );
 800d5ae:	f245 23d0 	movw	r3, #21200	; 0x52d0
 800d5b2:	f6c0 0301 	movt	r3, #2049	; 0x801
 800d5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b8:	4798      	blx	r3
 800d5ba:	e7ef      	b.n	800d59c <LoRaMacStop+0x2c>

0800d5bc <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800d5bc:	b510      	push	{r4, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800d5be:	f640 1444 	movw	r4, #2372	; 0x944
 800d5c2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800d5c6:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800d5ca:	f006 fc0f 	bl	8013dec <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800d5ce:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800d5d2:	f006 fc0b 	bl	8013dec <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800d5d6:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800d5da:	f006 fc07 	bl	8013dec <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 800d5de:	f504 707d 	add.w	r0, r4, #1012	; 0x3f4
 800d5e2:	f006 fc03 	bl	8013dec <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800d5e6:	f001 f975 	bl	800e8d4 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800d5ea:	f245 23d0 	movw	r3, #21200	; 0x52d0
 800d5ee:	f6c0 0301 	movt	r3, #2049	; 0x801
 800d5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f4:	4798      	blx	r3

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	bd10      	pop	{r4, pc}

0800d600 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800d600:	b530      	push	{r4, r5, lr}
 800d602:	b089      	sub	sp, #36	; 0x24
 800d604:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d606:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d60e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d610:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800d612:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
 800d616:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800d61a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800d61e:	f88d 3006 	strb.w	r3, [sp, #6]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800d622:	2300      	movs	r3, #0
 800d624:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 800d626:	2900      	cmp	r1, #0
 800d628:	d04c      	beq.n	800d6c4 <LoRaMacQueryTxPossible+0xc4>
 800d62a:	460d      	mov	r5, r1
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800d62c:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d630:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d634:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800d638:	9103      	str	r1, [sp, #12]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800d63a:	2100      	movs	r1, #0
 800d63c:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800d640:	f893 111a 	ldrb.w	r1, [r3, #282]	; 0x11a
 800d644:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d648:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800d64a:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 800d64e:	f8ad 2018 	strh.w	r2, [sp, #24]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800d652:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 800d656:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d65a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800d65e:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d662:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800d666:	f88d 201d 	strb.w	r2, [sp, #29]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d66a:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800d66e:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800d672:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d676:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800d67a:	ab02      	add	r3, sp, #8
 800d67c:	f10d 0206 	add.w	r2, sp, #6
 800d680:	f10d 0107 	add.w	r1, sp, #7
 800d684:	a803      	add	r0, sp, #12
 800d686:	f001 f897 	bl	800e7b8 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800d68a:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800d68e:	f7fd fcaa 	bl	800afe6 <GetMaxAppPayloadWithoutFOptsLength>
 800d692:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d694:	4668      	mov	r0, sp
 800d696:	f001 fa36 	bl	800eb06 <LoRaMacCommandsGetSizeSerializedCmds>
 800d69a:	b9a8      	cbnz	r0, 800d6c8 <LoRaMacQueryTxPossible+0xc8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800d69c:	9a00      	ldr	r2, [sp, #0]
 800d69e:	2a0f      	cmp	r2, #15
 800d6a0:	d80c      	bhi.n	800d6bc <LoRaMacQueryTxPossible+0xbc>
 800d6a2:	786b      	ldrb	r3, [r5, #1]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d809      	bhi.n	800d6bc <LoRaMacQueryTxPossible+0xbc>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800d6a8:	1a99      	subs	r1, r3, r2
 800d6aa:	7029      	strb	r1, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800d6ac:	4414      	add	r4, r2
 800d6ae:	42a3      	cmp	r3, r4
 800d6b0:	bf2c      	ite	cs
 800d6b2:	2000      	movcs	r0, #0
 800d6b4:	2001      	movcc	r0, #1
 800d6b6:	00c0      	lsls	r0, r0, #3
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800d6b8:	b009      	add	sp, #36	; 0x24
 800d6ba:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800d6c0:	2008      	movs	r0, #8
 800d6c2:	e7f9      	b.n	800d6b8 <LoRaMacQueryTxPossible+0xb8>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d6c4:	2003      	movs	r0, #3
 800d6c6:	e7f7      	b.n	800d6b8 <LoRaMacQueryTxPossible+0xb8>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d6c8:	2013      	movs	r0, #19
 800d6ca:	e7f5      	b.n	800d6b8 <LoRaMacQueryTxPossible+0xb8>

0800d6cc <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	f000 81ab 	beq.w	800da28 <LoRaMacMibGetRequestConfirm+0x35c>
{
 800d6d2:	b510      	push	{r4, lr}
 800d6d4:	b084      	sub	sp, #16
 800d6d6:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800d6d8:	7800      	ldrb	r0, [r0, #0]
 800d6da:	283f      	cmp	r0, #63	; 0x3f
 800d6dc:	f200 81a0 	bhi.w	800da20 <LoRaMacMibGetRequestConfirm+0x354>
 800d6e0:	e8df f010 	tbh	[pc, r0, lsl #1]
 800d6e4:	00480040 	.word	0x00480040
 800d6e8:	00560051 	.word	0x00560051
 800d6ec:	0064005b 	.word	0x0064005b
 800d6f0:	019e006d 	.word	0x019e006d
 800d6f4:	019e019e 	.word	0x019e019e
 800d6f8:	019e019e 	.word	0x019e019e
 800d6fc:	019e019e 	.word	0x019e019e
 800d700:	0078019e 	.word	0x0078019e
 800d704:	008a0081 	.word	0x008a0081
 800d708:	00a40099 	.word	0x00a40099
 800d70c:	00ba00af 	.word	0x00ba00af
 800d710:	00c500d4 	.word	0x00c500d4
 800d714:	00ec00e3 	.word	0x00ec00e3
 800d718:	00fc00f4 	.word	0x00fc00f4
 800d71c:	010c0104 	.word	0x010c0104
 800d720:	011d0114 	.word	0x011d0114
 800d724:	0126012f 	.word	0x0126012f
 800d728:	01400138 	.word	0x01400138
 800d72c:	015c0149 	.word	0x015c0149
 800d730:	01590152 	.word	0x01590152
 800d734:	0165019e 	.word	0x0165019e
 800d738:	019e019e 	.word	0x019e019e
 800d73c:	019e019e 	.word	0x019e019e
 800d740:	019e019e 	.word	0x019e019e
 800d744:	019e019e 	.word	0x019e019e
 800d748:	019e019e 	.word	0x019e019e
 800d74c:	019e019e 	.word	0x019e019e
 800d750:	019e019e 	.word	0x019e019e
 800d754:	0171019e 	.word	0x0171019e
 800d758:	0183017a 	.word	0x0183017a
 800d75c:	0195018c 	.word	0x0195018c
 800d760:	01a401a4 	.word	0x01a401a4
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800d764:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d768:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d76c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d770:	7123      	strb	r3, [r4, #4]
            break;
 800d772:	e15c      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d774:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d778:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d77c:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800d780:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d782:	2000      	movs	r0, #0
            break;
 800d784:	e153      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800d786:	6860      	ldr	r0, [r4, #4]
 800d788:	f7fc fb5a 	bl	8009e40 <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d78c:	2000      	movs	r0, #0
            break;
 800d78e:	e14e      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800d790:	6860      	ldr	r0, [r4, #4]
 800d792:	f7fc fb73 	bl	8009e7c <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d796:	2000      	movs	r0, #0
            break;
 800d798:	e149      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800d79a:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d79e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d7a2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800d7a6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d7a8:	2000      	movs	r0, #0
            break;
 800d7aa:	e140      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800d7ac:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d7b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d7b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d7b8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d7ba:	2000      	movs	r0, #0
            break;
 800d7bc:	e137      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800d7be:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d7c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d7c6:	1d21      	adds	r1, r4, #4
 800d7c8:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
 800d7cc:	f7fc fb70 	bl	8009eb0 <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d7d0:	2000      	movs	r0, #0
            break;
 800d7d2:	e12c      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800d7d4:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d7d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d7dc:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800d7e0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d7e2:	2000      	movs	r0, #0
            break;
 800d7e4:	e123      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800d7e6:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d7ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d7ee:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d7f2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d7f4:	2000      	movs	r0, #0
            break;
 800d7f6:	e11a      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800d7f8:	231d      	movs	r3, #29
 800d7fa:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d7fe:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d802:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d806:	a902      	add	r1, sp, #8
 800d808:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d80c:	f002 f81d 	bl	800f84a <RegionGetPhyParam>

            mibGet->Param.ChannelList = phyParam.Channels;
 800d810:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d812:	2000      	movs	r0, #0
            break;
 800d814:	e10b      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800d816:	3404      	adds	r4, #4
 800d818:	f640 63b8 	movw	r3, #3768	; 0xeb8
 800d81c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d820:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d824:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d828:	2000      	movs	r0, #0
            break;
 800d82a:	e100      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800d82c:	3404      	adds	r4, #4
 800d82e:	f640 7300 	movw	r3, #3840	; 0xf00
 800d832:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d836:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d83a:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d83e:	2000      	movs	r0, #0
            break;
 800d840:	e0f5      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800d842:	3404      	adds	r4, #4
 800d844:	f640 63c0 	movw	r3, #3776	; 0xec0
 800d848:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d84c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d850:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d854:	2000      	movs	r0, #0
            break;
 800d856:	e0ea      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800d858:	3404      	adds	r4, #4
 800d85a:	f640 7308 	movw	r3, #3848	; 0xf08
 800d85e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d862:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d866:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d86a:	2000      	movs	r0, #0
            break;
 800d86c:	e0df      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800d86e:	231b      	movs	r3, #27
 800d870:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d874:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d878:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d87c:	a902      	add	r1, sp, #8
 800d87e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d882:	f001 ffe2 	bl	800f84a <RegionGetPhyParam>

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800d886:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d888:	2000      	movs	r0, #0
            break;
 800d88a:	e0d0      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800d88c:	231a      	movs	r3, #26
 800d88e:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d892:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d896:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d89a:	a902      	add	r1, sp, #8
 800d89c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d8a0:	f001 ffd3 	bl	800f84a <RegionGetPhyParam>

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800d8a4:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d8a6:	2000      	movs	r0, #0
            break;
 800d8a8:	e0c1      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800d8aa:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d8ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d8b2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d8b6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d8b8:	2000      	movs	r0, #0
            break;
 800d8ba:	e0b8      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800d8bc:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d8c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d8c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8c6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d8c8:	2000      	movs	r0, #0
            break;
 800d8ca:	e0b0      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800d8cc:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d8d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d8d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8d6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d8d8:	2000      	movs	r0, #0
            break;
 800d8da:	e0a8      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800d8dc:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d8e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d8e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8e6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d8e8:	2000      	movs	r0, #0
            break;
 800d8ea:	e0a0      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800d8ec:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d8f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d8f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8f6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d8f8:	2000      	movs	r0, #0
            break;
 800d8fa:	e098      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800d8fc:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d900:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d906:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d908:	2000      	movs	r0, #0
            break;
 800d90a:	e090      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800d90c:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d910:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d914:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 800d918:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d91a:	2000      	movs	r0, #0
            break;
 800d91c:	e087      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800d91e:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d922:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d926:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800d92a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d92c:	2000      	movs	r0, #0
            break;
 800d92e:	e07e      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800d930:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d934:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d938:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800d93c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d93e:	2000      	movs	r0, #0
            break;
 800d940:	e075      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d942:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d946:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d94a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800d94e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d950:	2000      	movs	r0, #0
            break;
 800d952:	e06c      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800d954:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d958:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d95c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d95e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d960:	2000      	movs	r0, #0
            break;
 800d962:	e064      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800d964:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d968:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d96c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d970:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d972:	2000      	movs	r0, #0
            break;
 800d974:	e05b      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800d976:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d97a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d97e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d982:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d984:	2000      	movs	r0, #0
            break;
 800d986:	e052      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800d988:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d98c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d990:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d992:	2000      	movs	r0, #0
            break;
 800d994:	e04b      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 800d996:	2000      	movs	r0, #0
 800d998:	6060      	str	r0, [r4, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800d99a:	e048      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800d99c:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d9a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d9a4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d9a8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d9aa:	2000      	movs	r0, #0
            break;
 800d9ac:	e03f      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800d9ae:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d9b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d9b6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800d9ba:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800d9bc:	f002 f805 	bl	800f9ca <RegionGetVersion>
 800d9c0:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d9c2:	2000      	movs	r0, #0
            break;
 800d9c4:	e033      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800d9c6:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d9ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d9ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9d2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d9d4:	2000      	movs	r0, #0
            break;
 800d9d6:	e02a      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800d9d8:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d9dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d9e0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800d9e4:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d9e6:	2000      	movs	r0, #0
            break;
 800d9e8:	e021      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800d9ea:	f640 634c 	movw	r3, #3660	; 0xe4c
 800d9ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d9f2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800d9f6:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d9f8:	2000      	movs	r0, #0
            break;
 800d9fa:	e018      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800d9fc:	f640 634c 	movw	r3, #3660	; 0xe4c
 800da00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800da04:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800da08:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800da0a:	2000      	movs	r0, #0
            break;
 800da0c:	e00f      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800da0e:	f640 634c 	movw	r3, #3660	; 0xe4c
 800da12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800da16:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800da1a:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800da1c:	2000      	movs	r0, #0
            break;
 800da1e:	e006      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
#endif
            break;
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800da20:	4620      	mov	r0, r4
 800da22:	f000 ff5b 	bl	800e8dc <LoRaMacClassBMibGetRequestConfirm>
            break;
 800da26:	e002      	b.n	800da2e <LoRaMacMibGetRequestConfirm+0x362>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800da28:	2003      	movs	r0, #3
        }
    }
    return status;
}
 800da2a:	4770      	bx	lr
    switch( mibGet->Type )
 800da2c:	2018      	movs	r0, #24
}
 800da2e:	b004      	add	sp, #16
 800da30:	bd10      	pop	{r4, pc}

0800da32 <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800da32:	2800      	cmp	r0, #0
 800da34:	f000 82e1 	beq.w	800dffa <LoRaMacMibSetRequestConfirm+0x5c8>
{
 800da38:	b530      	push	{r4, r5, lr}
 800da3a:	b085      	sub	sp, #20
 800da3c:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800da3e:	f640 1344 	movw	r3, #2372	; 0x944
 800da42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800da46:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800da4a:	f013 0f02 	tst.w	r3, #2
 800da4e:	f040 82d6 	bne.w	800dffe <LoRaMacMibSetRequestConfirm+0x5cc>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800da52:	7805      	ldrb	r5, [r0, #0]
 800da54:	2d3f      	cmp	r5, #63	; 0x3f
 800da56:	f200 82cd 	bhi.w	800dff4 <LoRaMacMibSetRequestConfirm+0x5c2>
 800da5a:	e8df f015 	tbh	[pc, r5, lsl #1]
 800da5e:	0042      	.short	0x0042
 800da60:	00520046 	.word	0x00520046
 800da64:	00600059 	.word	0x00600059
 800da68:	00720069 	.word	0x00720069
 800da6c:	00910086 	.word	0x00910086
 800da70:	00a7009c 	.word	0x00a7009c
 800da74:	00bd00b2 	.word	0x00bd00b2
 800da78:	00d300c8 	.word	0x00d300c8
 800da7c:	00ef00de 	.word	0x00ef00de
 800da80:	00f802cb 	.word	0x00f802cb
 800da84:	01450126 	.word	0x01450126
 800da88:	01af017d 	.word	0x01af017d
 800da8c:	01c2019c 	.word	0x01c2019c
 800da90:	01d801d0 	.word	0x01d801d0
 800da94:	01e801e0 	.word	0x01e801e0
 800da98:	01f801f0 	.word	0x01f801f0
 800da9c:	024a0212 	.word	0x024a0212
 800daa0:	02640230 	.word	0x02640230
 800daa4:	0279026e 	.word	0x0279026e
 800daa8:	00400282 	.word	0x00400282
 800daac:	028b02cb 	.word	0x028b02cb
 800dab0:	02cb02cb 	.word	0x02cb02cb
 800dab4:	02cb02cb 	.word	0x02cb02cb
 800dab8:	02cb02cb 	.word	0x02cb02cb
 800dabc:	02cb02cb 	.word	0x02cb02cb
 800dac0:	02cb02cb 	.word	0x02cb02cb
 800dac4:	02cb02cb 	.word	0x02cb02cb
 800dac8:	02cb02cb 	.word	0x02cb02cb
 800dacc:	02cb02cb 	.word	0x02cb02cb
 800dad0:	02a7029e 	.word	0x02a7029e
 800dad4:	02b902b0 	.word	0x02b902b0
 800dad8:	02d302c2 	.word	0x02d302c2
 800dadc:	02d3      	.short	0x02d3
 800dade:	2000      	movs	r0, #0
 800dae0:	e28e      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800dae2:	7900      	ldrb	r0, [r0, #4]
 800dae4:	f7fe faa2 	bl	800c02c <SwitchClass>
            break;
 800dae8:	e28a      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800daea:	7902      	ldrb	r2, [r0, #4]
 800daec:	2a02      	cmp	r2, #2
 800daee:	f000 828b 	beq.w	800e008 <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800daf2:	f640 634c 	movw	r3, #3660	; 0xe4c
 800daf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dafa:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dafe:	2000      	movs	r0, #0
 800db00:	e27e      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800db02:	6840      	ldr	r0, [r0, #4]
 800db04:	f7fc f98d 	bl	8009e22 <SecureElementSetDevEui>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800db08:	2800      	cmp	r0, #0
 800db0a:	bf18      	it	ne
 800db0c:	2003      	movne	r0, #3
 800db0e:	e277      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800db10:	6840      	ldr	r0, [r0, #4]
 800db12:	f7fc f9a3 	bl	8009e5c <SecureElementSetJoinEui>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800db16:	2800      	cmp	r0, #0
 800db18:	bf18      	it	ne
 800db1a:	4628      	movne	r0, r5
 800db1c:	e270      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800db1e:	7902      	ldrb	r2, [r0, #4]
 800db20:	f640 634c 	movw	r3, #3660	; 0xe4c
 800db24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800db28:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800db2c:	2000      	movs	r0, #0
            break;
 800db2e:	e267      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800db30:	6842      	ldr	r2, [r0, #4]
 800db32:	f640 634c 	movw	r3, #3660	; 0xe4c
 800db36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800db3a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800db3e:	2000      	movs	r0, #0
            break;
 800db40:	e25e      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800db42:	f640 634c 	movw	r3, #3660	; 0xe4c
 800db46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800db4a:	6841      	ldr	r1, [r0, #4]
 800db4c:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
 800db50:	f7fc f9a3 	bl	8009e9a <SecureElementSetDevAddr>
 800db54:	2800      	cmp	r0, #0
 800db56:	f040 8259 	bne.w	800e00c <LoRaMacMibSetRequestConfirm+0x5da>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800db5a:	6862      	ldr	r2, [r4, #4]
 800db5c:	f640 634c 	movw	r3, #3660	; 0xe4c
 800db60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800db64:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800db68:	e24a      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800db6a:	6841      	ldr	r1, [r0, #4]
 800db6c:	2900      	cmp	r1, #0
 800db6e:	f000 824f 	beq.w	800e010 <LoRaMacMibSetRequestConfirm+0x5de>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800db72:	2000      	movs	r0, #0
 800db74:	f001 fc6f 	bl	800f456 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800db78:	2800      	cmp	r0, #0
 800db7a:	bf18      	it	ne
 800db7c:	2011      	movne	r0, #17
 800db7e:	e23f      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800db80:	6841      	ldr	r1, [r0, #4]
 800db82:	2900      	cmp	r1, #0
 800db84:	f000 8246 	beq.w	800e014 <LoRaMacMibSetRequestConfirm+0x5e2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800db88:	2001      	movs	r0, #1
 800db8a:	f001 fc64 	bl	800f456 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800db8e:	2800      	cmp	r0, #0
 800db90:	bf18      	it	ne
 800db92:	2011      	movne	r0, #17
 800db94:	e234      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800db96:	6841      	ldr	r1, [r0, #4]
 800db98:	2900      	cmp	r1, #0
 800db9a:	f000 823d 	beq.w	800e018 <LoRaMacMibSetRequestConfirm+0x5e6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800db9e:	2008      	movs	r0, #8
 800dba0:	f001 fc59 	bl	800f456 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800dba4:	2800      	cmp	r0, #0
 800dba6:	bf18      	it	ne
 800dba8:	2011      	movne	r0, #17
 800dbaa:	e229      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800dbac:	6841      	ldr	r1, [r0, #4]
 800dbae:	2900      	cmp	r1, #0
 800dbb0:	f000 8234 	beq.w	800e01c <LoRaMacMibSetRequestConfirm+0x5ea>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800dbb4:	2009      	movs	r0, #9
 800dbb6:	f001 fc4e 	bl	800f456 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800dbba:	2800      	cmp	r0, #0
 800dbbc:	bf18      	it	ne
 800dbbe:	2011      	movne	r0, #17
 800dbc0:	e21e      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800dbc2:	6841      	ldr	r1, [r0, #4]
 800dbc4:	2900      	cmp	r1, #0
 800dbc6:	f000 822b 	beq.w	800e020 <LoRaMacMibSetRequestConfirm+0x5ee>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800dbca:	200c      	movs	r0, #12
 800dbcc:	f001 fc43 	bl	800f456 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	bf18      	it	ne
 800dbd4:	2011      	movne	r0, #17
 800dbd6:	e213      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800dbd8:	6841      	ldr	r1, [r0, #4]
 800dbda:	2900      	cmp	r1, #0
 800dbdc:	f000 8222 	beq.w	800e024 <LoRaMacMibSetRequestConfirm+0x5f2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800dbe0:	200d      	movs	r0, #13
 800dbe2:	f001 fc38 	bl	800f456 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	bf18      	it	ne
 800dbea:	2011      	movne	r0, #17
 800dbec:	e208      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800dbee:	6841      	ldr	r1, [r0, #4]
 800dbf0:	2900      	cmp	r1, #0
 800dbf2:	f000 8219 	beq.w	800e028 <LoRaMacMibSetRequestConfirm+0x5f6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800dbf6:	200e      	movs	r0, #14
 800dbf8:	f001 fc2d 	bl	800f456 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800dbfc:	2800      	cmp	r0, #0
 800dbfe:	bf18      	it	ne
 800dc00:	2011      	movne	r0, #17
 800dc02:	e1fd      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800dc04:	6841      	ldr	r1, [r0, #4]
 800dc06:	2900      	cmp	r1, #0
 800dc08:	f000 8210 	beq.w	800e02c <LoRaMacMibSetRequestConfirm+0x5fa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800dc0c:	200f      	movs	r0, #15
 800dc0e:	f001 fc22 	bl	800f456 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800dc12:	2800      	cmp	r0, #0
 800dc14:	bf18      	it	ne
 800dc16:	2011      	movne	r0, #17
 800dc18:	e1f2      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800dc1a:	7900      	ldrb	r0, [r0, #4]
 800dc1c:	f640 634c 	movw	r3, #3660	; 0xe4c
 800dc20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dc24:	f883 0119 	strb.w	r0, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800dc28:	f245 24d0 	movw	r4, #21200	; 0x52d0
 800dc2c:	f6c0 0401 	movt	r4, #2049	; 0x801
 800dc30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc32:	4798      	blx	r3
            Radio.Sleep( );
 800dc34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dc36:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dc38:	2000      	movs	r0, #0
            break;
 800dc3a:	e1e1      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800dc3c:	7902      	ldrb	r2, [r0, #4]
 800dc3e:	f640 634c 	movw	r3, #3660	; 0xe4c
 800dc42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dc46:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dc4a:	2000      	movs	r0, #0
            break;
 800dc4c:	e1d8      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800dc4e:	7a03      	ldrb	r3, [r0, #8]
 800dc50:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dc54:	f640 634c 	movw	r3, #3660	; 0xe4c
 800dc58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dc5c:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800dc60:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800dc64:	2207      	movs	r2, #7
 800dc66:	a901      	add	r1, sp, #4
 800dc68:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800dc6c:	f001 fe0c 	bl	800f888 <RegionVerify>
 800dc70:	b908      	cbnz	r0, 800dc76 <LoRaMacMibSetRequestConfirm+0x244>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dc72:	2003      	movs	r0, #3
 800dc74:	e1c4      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800dc76:	6863      	ldr	r3, [r4, #4]
 800dc78:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800dc7a:	f640 634c 	movw	r3, #3660	; 0xe4c
 800dc7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dc82:	2200      	movs	r2, #0
 800dc84:	a901      	add	r1, sp, #4
 800dc86:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800dc8a:	f001 fdfd 	bl	800f888 <RegionVerify>
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	f000 81ce 	beq.w	800e030 <LoRaMacMibSetRequestConfirm+0x5fe>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800dc94:	f640 63b8 	movw	r3, #3768	; 0xeb8
 800dc98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dc9c:	3404      	adds	r4, #4
 800dc9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dca2:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dca6:	2000      	movs	r0, #0
 800dca8:	e1aa      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800dcaa:	7a03      	ldrb	r3, [r0, #8]
 800dcac:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dcb0:	f640 634c 	movw	r3, #3660	; 0xe4c
 800dcb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dcb8:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800dcbc:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800dcc0:	2207      	movs	r2, #7
 800dcc2:	a901      	add	r1, sp, #4
 800dcc4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800dcc8:	f001 fdde 	bl	800f888 <RegionVerify>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	f000 81b1 	beq.w	800e034 <LoRaMacMibSetRequestConfirm+0x602>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800dcd2:	f640 7300 	movw	r3, #3840	; 0xf00
 800dcd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dcda:	3404      	adds	r4, #4
 800dcdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dce0:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dce4:	2000      	movs	r0, #0
 800dce6:	e18b      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800dce8:	7a03      	ldrb	r3, [r0, #8]
 800dcea:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dcee:	f640 634c 	movw	r3, #3660	; 0xe4c
 800dcf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dcf6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800dcfa:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800dcfe:	2207      	movs	r2, #7
 800dd00:	a901      	add	r1, sp, #4
 800dd02:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800dd06:	f001 fdbf 	bl	800f888 <RegionVerify>
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	f000 8194 	beq.w	800e038 <LoRaMacMibSetRequestConfirm+0x606>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800dd10:	f640 634c 	movw	r3, #3660	; 0xe4c
 800dd14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dd18:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800dd1c:	3404      	adds	r4, #4
 800dd1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dd22:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800dd26:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800dd2a:	2b02      	cmp	r3, #2
 800dd2c:	d001      	beq.n	800dd32 <LoRaMacMibSetRequestConfirm+0x300>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dd2e:	2000      	movs	r0, #0
 800dd30:	e166      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800dd32:	f640 634c 	movw	r3, #3660	; 0xe4c
 800dd36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dd3a:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	f000 815e 	beq.w	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800dd44:	f245 23d0 	movw	r3, #21200	; 0x52d0
 800dd48:	f6c0 0301 	movt	r3, #2049	; 0x801
 800dd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd4e:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800dd50:	f7fd ff70 	bl	800bc34 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dd54:	2000      	movs	r0, #0
 800dd56:	e153      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800dd58:	7a03      	ldrb	r3, [r0, #8]
 800dd5a:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dd5e:	f640 634c 	movw	r3, #3660	; 0xe4c
 800dd62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dd66:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800dd6a:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800dd6e:	2207      	movs	r2, #7
 800dd70:	a901      	add	r1, sp, #4
 800dd72:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800dd76:	f001 fd87 	bl	800f888 <RegionVerify>
 800dd7a:	2800      	cmp	r0, #0
 800dd7c:	f000 815e 	beq.w	800e03c <LoRaMacMibSetRequestConfirm+0x60a>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800dd80:	f640 7308 	movw	r3, #3848	; 0xf08
 800dd84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dd88:	3404      	adds	r4, #4
 800dd8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dd8e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dd92:	2000      	movs	r0, #0
 800dd94:	e134      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800dd96:	6843      	ldr	r3, [r0, #4]
 800dd98:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800dda0:	f640 634c 	movw	r3, #3660	; 0xe4c
 800dda4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dda8:	a902      	add	r1, sp, #8
 800ddaa:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ddae:	f001 fd7e 	bl	800f8ae <RegionChanMaskSet>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ddb2:	2800      	cmp	r0, #0
 800ddb4:	bf14      	ite	ne
 800ddb6:	2000      	movne	r0, #0
 800ddb8:	2003      	moveq	r0, #3
 800ddba:	e121      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800ddbc:	6843      	ldr	r3, [r0, #4]
 800ddbe:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800ddc6:	f640 634c 	movw	r3, #3660	; 0xe4c
 800ddca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ddce:	a902      	add	r1, sp, #8
 800ddd0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ddd4:	f001 fd6b 	bl	800f8ae <RegionChanMaskSet>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	bf14      	ite	ne
 800dddc:	2000      	movne	r0, #0
 800ddde:	2003      	moveq	r0, #3
 800dde0:	e10e      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800dde2:	7902      	ldrb	r2, [r0, #4]
 800dde4:	1e53      	subs	r3, r2, #1
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	2b0e      	cmp	r3, #14
 800ddea:	f200 8129 	bhi.w	800e040 <LoRaMacMibSetRequestConfirm+0x60e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800ddee:	f640 634c 	movw	r3, #3660	; 0xe4c
 800ddf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ddf6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ddfa:	2000      	movs	r0, #0
 800ddfc:	e100      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800ddfe:	6842      	ldr	r2, [r0, #4]
 800de00:	f640 634c 	movw	r3, #3660	; 0xe4c
 800de04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800de08:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de0a:	2000      	movs	r0, #0
            break;
 800de0c:	e0f8      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800de0e:	6842      	ldr	r2, [r0, #4]
 800de10:	f640 634c 	movw	r3, #3660	; 0xe4c
 800de14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800de18:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de1a:	2000      	movs	r0, #0
            break;
 800de1c:	e0f0      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800de1e:	6842      	ldr	r2, [r0, #4]
 800de20:	f640 634c 	movw	r3, #3660	; 0xe4c
 800de24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800de28:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de2a:	2000      	movs	r0, #0
            break;
 800de2c:	e0e8      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800de2e:	6842      	ldr	r2, [r0, #4]
 800de30:	f640 634c 	movw	r3, #3660	; 0xe4c
 800de34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800de38:	661a      	str	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de3a:	2000      	movs	r0, #0
            break;
 800de3c:	e0e0      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800de3e:	6842      	ldr	r2, [r0, #4]
 800de40:	f640 634c 	movw	r3, #3660	; 0xe4c
 800de44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800de48:	665a      	str	r2, [r3, #100]	; 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de4a:	2000      	movs	r0, #0
            break;
 800de4c:	e0d8      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800de4e:	7903      	ldrb	r3, [r0, #4]
 800de50:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800de54:	f640 634c 	movw	r3, #3660	; 0xe4c
 800de58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800de5c:	2206      	movs	r2, #6
 800de5e:	a901      	add	r1, sp, #4
 800de60:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800de64:	f001 fd10 	bl	800f888 <RegionVerify>
 800de68:	2800      	cmp	r0, #0
 800de6a:	f000 80eb 	beq.w	800e044 <LoRaMacMibSetRequestConfirm+0x612>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800de6e:	f640 634c 	movw	r3, #3660	; 0xe4c
 800de72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800de76:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800de7a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de7e:	2000      	movs	r0, #0
 800de80:	e0be      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800de82:	7903      	ldrb	r3, [r0, #4]
 800de84:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800de88:	f640 634c 	movw	r3, #3660	; 0xe4c
 800de8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800de90:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800de94:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800de98:	2205      	movs	r2, #5
 800de9a:	a901      	add	r1, sp, #4
 800de9c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800dea0:	f001 fcf2 	bl	800f888 <RegionVerify>
 800dea4:	2800      	cmp	r0, #0
 800dea6:	f000 80cf 	beq.w	800e048 <LoRaMacMibSetRequestConfirm+0x616>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800deaa:	f640 634c 	movw	r3, #3660	; 0xe4c
 800deae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800deb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800deb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800deba:	2000      	movs	r0, #0
 800debc:	e0a0      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800debe:	7903      	ldrb	r3, [r0, #4]
 800dec0:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800dec4:	f640 634c 	movw	r3, #3660	; 0xe4c
 800dec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800decc:	220a      	movs	r2, #10
 800dece:	a901      	add	r1, sp, #4
 800ded0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ded4:	f001 fcd8 	bl	800f888 <RegionVerify>
 800ded8:	2800      	cmp	r0, #0
 800deda:	f000 80b7 	beq.w	800e04c <LoRaMacMibSetRequestConfirm+0x61a>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800dede:	f640 634c 	movw	r3, #3660	; 0xe4c
 800dee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dee6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800deea:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800deee:	2000      	movs	r0, #0
 800def0:	e086      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800def2:	7903      	ldrb	r3, [r0, #4]
 800def4:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800def8:	f640 634c 	movw	r3, #3660	; 0xe4c
 800defc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df00:	2209      	movs	r2, #9
 800df02:	a901      	add	r1, sp, #4
 800df04:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800df08:	f001 fcbe 	bl	800f888 <RegionVerify>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	f000 809f 	beq.w	800e050 <LoRaMacMibSetRequestConfirm+0x61e>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800df12:	f640 634c 	movw	r3, #3660	; 0xe4c
 800df16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df1a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800df1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df22:	2000      	movs	r0, #0
 800df24:	e06c      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800df26:	6842      	ldr	r2, [r0, #4]
 800df28:	f640 634c 	movw	r3, #3660	; 0xe4c
 800df2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800df34:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df36:	2000      	movs	r0, #0
            break;
 800df38:	e062      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800df3a:	7902      	ldrb	r2, [r0, #4]
 800df3c:	f640 634c 	movw	r3, #3660	; 0xe4c
 800df40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800df48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df4c:	2000      	movs	r0, #0
            break;
 800df4e:	e057      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800df50:	6842      	ldr	r2, [r0, #4]
 800df52:	f640 634c 	movw	r3, #3660	; 0xe4c
 800df56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df5e:	2000      	movs	r0, #0
            break;
 800df60:	e04e      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800df62:	6842      	ldr	r2, [r0, #4]
 800df64:	f640 634c 	movw	r3, #3660	; 0xe4c
 800df68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df6c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df70:	2000      	movs	r0, #0
            break;
 800df72:	e045      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            status = RestoreNvmData( );
            break;
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800df74:	7983      	ldrb	r3, [r0, #6]
 800df76:	2b01      	cmp	r3, #1
 800df78:	d901      	bls.n	800df7e <LoRaMacMibSetRequestConfirm+0x54c>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df7a:	2003      	movs	r0, #3
 800df7c:	e040      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800df7e:	f640 634c 	movw	r3, #3660	; 0xe4c
 800df82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df86:	6842      	ldr	r2, [r0, #4]
 800df88:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800df8c:	6840      	ldr	r0, [r0, #4]
 800df8e:	f001 f898 	bl	800f0c2 <LoRaMacCryptoSetLrWanVersion>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800df92:	2800      	cmp	r0, #0
 800df94:	bf18      	it	ne
 800df96:	2011      	movne	r0, #17
 800df98:	e032      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            }
            break;
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800df9a:	6842      	ldr	r2, [r0, #4]
 800df9c:	f640 634c 	movw	r3, #3660	; 0xe4c
 800dfa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dfa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dfa8:	2000      	movs	r0, #0
            break;
 800dfaa:	e029      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800dfac:	8882      	ldrh	r2, [r0, #4]
 800dfae:	f640 634c 	movw	r3, #3660	; 0xe4c
 800dfb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dfb6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dfba:	2000      	movs	r0, #0
            break;
 800dfbc:	e020      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800dfbe:	8882      	ldrh	r2, [r0, #4]
 800dfc0:	f640 634c 	movw	r3, #3660	; 0xe4c
 800dfc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dfc8:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dfcc:	2000      	movs	r0, #0
            break;
 800dfce:	e017      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800dfd0:	8882      	ldrh	r2, [r0, #4]
 800dfd2:	f640 634c 	movw	r3, #3660	; 0xe4c
 800dfd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dfda:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dfde:	2000      	movs	r0, #0
            break;
 800dfe0:	e00e      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800dfe2:	8882      	ldrh	r2, [r0, #4]
 800dfe4:	f640 634c 	movw	r3, #3660	; 0xe4c
 800dfe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dfec:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dff0:	2000      	movs	r0, #0
            break;
 800dff2:	e005      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
#endif
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800dff4:	f000 fc74 	bl	800e8e0 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800dff8:	e002      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dffa:	2003      	movs	r0, #3
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800dffc:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800dffe:	2001      	movs	r0, #1
}
 800e000:	b005      	add	sp, #20
 800e002:	bd30      	pop	{r4, r5, pc}
            status = LORAMAC_STATUS_ERROR;
 800e004:	2018      	movs	r0, #24
 800e006:	e7fb      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e008:	2003      	movs	r0, #3
 800e00a:	e7f9      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e00c:	2003      	movs	r0, #3
 800e00e:	e7f7      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e010:	2003      	movs	r0, #3
 800e012:	e7f5      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e014:	2003      	movs	r0, #3
 800e016:	e7f3      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e018:	2003      	movs	r0, #3
 800e01a:	e7f1      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e01c:	2003      	movs	r0, #3
 800e01e:	e7ef      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e020:	2003      	movs	r0, #3
 800e022:	e7ed      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e024:	2003      	movs	r0, #3
 800e026:	e7eb      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e028:	2003      	movs	r0, #3
 800e02a:	e7e9      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e02c:	2003      	movs	r0, #3
 800e02e:	e7e7      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e030:	2003      	movs	r0, #3
 800e032:	e7e5      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e034:	2003      	movs	r0, #3
 800e036:	e7e3      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e038:	2003      	movs	r0, #3
 800e03a:	e7e1      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e03c:	2003      	movs	r0, #3
 800e03e:	e7df      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e040:	2003      	movs	r0, #3
 800e042:	e7dd      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e044:	2003      	movs	r0, #3
 800e046:	e7db      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e048:	2003      	movs	r0, #3
 800e04a:	e7d9      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e04c:	2003      	movs	r0, #3
 800e04e:	e7d7      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e050:	2003      	movs	r0, #3
 800e052:	e7d5      	b.n	800e000 <LoRaMacMibSetRequestConfirm+0x5ce>

0800e054 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800e054:	b570      	push	{r4, r5, r6, lr}
 800e056:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800e058:	2300      	movs	r3, #0
 800e05a:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800e05e:	2800      	cmp	r0, #0
 800e060:	f000 8147 	beq.w	800e2f2 <LoRaMacMlmeRequest+0x29e>
 800e064:	4605      	mov	r5, r0
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800e066:	f7fe f882 	bl	800c16e <LoRaMacIsBusy>
 800e06a:	b118      	cbz	r0, 800e074 <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 800e06c:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800e06e:	4620      	mov	r0, r4
 800e070:	b006      	add	sp, #24
 800e072:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800e074:	f000 fedb 	bl	800ee2e <LoRaMacConfirmQueueIsFull>
 800e078:	b108      	cbz	r0, 800e07e <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 800e07a:	2401      	movs	r4, #1
 800e07c:	e7f7      	b.n	800e06e <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800e07e:	f000 fecf 	bl	800ee20 <LoRaMacConfirmQueueGetCnt>
 800e082:	b340      	cbz	r0, 800e0d6 <LoRaMacMlmeRequest+0x82>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e084:	f640 1344 	movw	r3, #2372	; 0x944
 800e088:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e08c:	2101      	movs	r1, #1
 800e08e:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e092:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800e096:	f042 0204 	orr.w	r2, r2, #4
 800e09a:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 800e09e:	782c      	ldrb	r4, [r5, #0]
 800e0a0:	f88d 4014 	strb.w	r4, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e0a4:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	f88d 3017 	strb.w	r3, [sp, #23]
    switch( mlmeRequest->Type )
 800e0ae:	1e63      	subs	r3, r4, #1
 800e0b0:	2b0d      	cmp	r3, #13
 800e0b2:	f200 8120 	bhi.w	800e2f6 <LoRaMacMlmeRequest+0x2a2>
 800e0b6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e0ba:	0017      	.short	0x0017
 800e0bc:	011e011e 	.word	0x011e011e
 800e0c0:	0065011e 	.word	0x0065011e
 800e0c4:	00a1006d 	.word	0x00a1006d
 800e0c8:	011e011e 	.word	0x011e011e
 800e0cc:	011e00b6 	.word	0x011e00b6
 800e0d0:	00d3010e 	.word	0x00d3010e
 800e0d4:	0105      	.short	0x0105
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800e0d6:	2214      	movs	r2, #20
 800e0d8:	2100      	movs	r1, #0
 800e0da:	f640 508c 	movw	r0, #3468	; 0xd8c
 800e0de:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800e0e2:	f002 ff4d 	bl	8010f80 <memset1>
 800e0e6:	e7cd      	b.n	800e084 <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800e0e8:	f640 1344 	movw	r3, #2372	; 0x944
 800e0ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e0f0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e0f4:	f013 0f20 	tst.w	r3, #32
 800e0f8:	d1b9      	bne.n	800e06e <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( false );
 800e0fa:	2000      	movs	r0, #0
 800e0fc:	f7fd fecd 	bl	800be9a <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800e100:	f640 644c 	movw	r4, #3660	; 0xe4c
 800e104:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800e108:	2200      	movs	r2, #0
 800e10a:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800e10e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e112:	f001 fc2e 	bl	800f972 <RegionAlternateDr>
 800e116:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800e11a:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800e11e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800e122:	2307      	movs	r3, #7
 800e124:	f88d 3015 	strb.w	r3, [sp, #21]
            SwitchClass( CLASS_A );
 800e128:	2000      	movs	r0, #0
 800e12a:	f7fd ff7f 	bl	800c02c <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800e12e:	f640 1444 	movw	r4, #2372	; 0x944
 800e132:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800e136:	2600      	movs	r6, #0
 800e138:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800e13c:	1ca3      	adds	r3, r4, #2
 800e13e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800e142:	23ff      	movs	r3, #255	; 0xff
 800e144:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800e148:	f884 610d 	strb.w	r6, [r4, #269]	; 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800e14c:	f504 7087 	add.w	r0, r4, #270	; 0x10e
 800e150:	f7fb fe94 	bl	8009e7c <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800e154:	f504 708b 	add.w	r0, r4, #278	; 0x116
 800e158:	f7fb fe72 	bl	8009e40 <SecureElementGetDevEui>
    status = ScheduleTx( allowDelayedTx );
 800e15c:	4630      	mov	r0, r6
 800e15e:	f7fd fb31 	bl	800b7c4 <ScheduleTx>
            if( status != LORAMAC_STATUS_OK )
 800e162:	4604      	mov	r4, r0
 800e164:	2800      	cmp	r0, #0
 800e166:	d03d      	beq.n	800e1e4 <LoRaMacMlmeRequest+0x190>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800e168:	f640 664c 	movw	r6, #3660	; 0xe4c
 800e16c:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800e170:	2201      	movs	r2, #1
 800e172:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800e176:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800e17a:	f001 fbfa 	bl	800f972 <RegionAlternateDr>
 800e17e:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800e182:	e075      	b.n	800e270 <LoRaMacMlmeRequest+0x21c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800e184:	2200      	movs	r2, #0
 800e186:	a904      	add	r1, sp, #16
 800e188:	2002      	movs	r0, #2
 800e18a:	f000 fbc4 	bl	800e916 <LoRaMacCommandsAddCmd>
 800e18e:	b348      	cbz	r0, 800e1e4 <LoRaMacMlmeRequest+0x190>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e190:	2413      	movs	r4, #19
 800e192:	e06d      	b.n	800e270 <LoRaMacMlmeRequest+0x21c>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800e194:	88aa      	ldrh	r2, [r5, #4]
    continuousWave.Channel = MacCtx.Channel;
 800e196:	f640 1444 	movw	r4, #2372	; 0x944
 800e19a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800e19e:	f894 3411 	ldrb.w	r3, [r4, #1041]	; 0x411
 800e1a2:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e1a6:	f640 634c 	movw	r3, #3660	; 0xe4c
 800e1aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e1ae:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 800e1b2:	f88d 1001 	strb.w	r1, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e1b6:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800e1ba:	f88d 1002 	strb.w	r1, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800e1be:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800e1c2:	9101      	str	r1, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800e1c4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800e1c8:	9102      	str	r1, [sp, #8]
    continuousWave.Timeout = timeout;
 800e1ca:	f8ad 200c 	strh.w	r2, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800e1ce:	4669      	mov	r1, sp
 800e1d0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e1d4:	f001 fbe5 	bl	800f9a2 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800e1d8:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800e1dc:	f043 0302 	orr.w	r3, r3, #2
 800e1e0:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800e1e4:	f640 1344 	movw	r3, #2372	; 0x944
 800e1e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e1ec:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800e1f0:	612b      	str	r3, [r5, #16]
        LoRaMacConfirmQueueAdd( &queueElement );
 800e1f2:	a805      	add	r0, sp, #20
 800e1f4:	f000 fd26 	bl	800ec44 <LoRaMacConfirmQueueAdd>
    return status;
 800e1f8:	2400      	movs	r4, #0
 800e1fa:	e738      	b.n	800e06e <LoRaMacMlmeRequest+0x1a>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800e1fc:	f245 23d0 	movw	r3, #21200	; 0x52d0
 800e200:	f6c0 0301 	movt	r3, #2049	; 0x801
 800e204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e206:	88aa      	ldrh	r2, [r5, #4]
 800e208:	f995 100c 	ldrsb.w	r1, [r5, #12]
 800e20c:	68a8      	ldr	r0, [r5, #8]
 800e20e:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800e210:	f640 1344 	movw	r3, #2372	; 0x944
 800e214:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e218:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800e21c:	f042 0202 	orr.w	r2, r2, #2
 800e220:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
            break;
 800e224:	e7de      	b.n	800e1e4 <LoRaMacMlmeRequest+0x190>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800e226:	4669      	mov	r1, sp
 800e228:	200d      	movs	r0, #13
 800e22a:	f000 fc27 	bl	800ea7c <LoRaMacCommandsGetCmd>
 800e22e:	b938      	cbnz	r0, 800e240 <LoRaMacMlmeRequest+0x1ec>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800e230:	f640 1344 	movw	r3, #2372	; 0x944
 800e234:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e238:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800e23c:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800e23e:	e7d8      	b.n	800e1f2 <LoRaMacMlmeRequest+0x19e>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800e240:	2200      	movs	r2, #0
 800e242:	a904      	add	r1, sp, #16
 800e244:	200d      	movs	r0, #13
 800e246:	f000 fb66 	bl	800e916 <LoRaMacCommandsAddCmd>
 800e24a:	2800      	cmp	r0, #0
 800e24c:	d0f0      	beq.n	800e230 <LoRaMacMlmeRequest+0x1dc>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800e24e:	f640 1344 	movw	r3, #2372	; 0x944
 800e252:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e256:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800e25a:	612b      	str	r3, [r5, #16]
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e25c:	2413      	movs	r4, #19
 800e25e:	e00e      	b.n	800e27e <LoRaMacMlmeRequest+0x22a>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800e260:	f640 634c 	movw	r3, #3660	; 0xe4c
 800e264:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e268:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e26c:	b1d3      	cbz	r3, 800e2a4 <LoRaMacMlmeRequest+0x250>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e26e:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800e270:	f640 1344 	movw	r3, #2372	; 0x944
 800e274:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e278:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800e27c:	612b      	str	r3, [r5, #16]
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800e27e:	f000 fdcf 	bl	800ee20 <LoRaMacConfirmQueueGetCnt>
 800e282:	2800      	cmp	r0, #0
 800e284:	f47f aef3 	bne.w	800e06e <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 800e288:	f640 1344 	movw	r3, #2372	; 0x944
 800e28c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e290:	2100      	movs	r1, #0
 800e292:	f883 1410 	strb.w	r1, [r3, #1040]	; 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e296:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800e29a:	f361 0282 	bfi	r2, r1, #2, #1
 800e29e:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800e2a2:	e6e4      	b.n	800e06e <LoRaMacMlmeRequest+0x1a>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800e2a4:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800e2a6:	f004 0007 	and.w	r0, r4, #7
 800e2aa:	f000 fb12 	bl	800e8d2 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800e2ae:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	a904      	add	r1, sp, #16
 800e2b6:	2010      	movs	r0, #16
 800e2b8:	f000 fb2d 	bl	800e916 <LoRaMacCommandsAddCmd>
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	d091      	beq.n	800e1e4 <LoRaMacMlmeRequest+0x190>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e2c0:	2413      	movs	r4, #19
 800e2c2:	e7d5      	b.n	800e270 <LoRaMacMlmeRequest+0x21c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	a904      	add	r1, sp, #16
 800e2c8:	2012      	movs	r0, #18
 800e2ca:	f000 fb24 	bl	800e916 <LoRaMacCommandsAddCmd>
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	d088      	beq.n	800e1e4 <LoRaMacMlmeRequest+0x190>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e2d2:	2413      	movs	r4, #19
 800e2d4:	e7cc      	b.n	800e270 <LoRaMacMlmeRequest+0x21c>
            queueElement.RestrictCommonReadyToHandle = true;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800e2dc:	f000 faea 	bl	800e8b4 <LoRaMacClassBIsAcquisitionInProgress>
 800e2e0:	b108      	cbz	r0, 800e2e6 <LoRaMacMlmeRequest+0x292>
                status = LORAMAC_STATUS_BUSY;
 800e2e2:	2401      	movs	r4, #1
 800e2e4:	e7c4      	b.n	800e270 <LoRaMacMlmeRequest+0x21c>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800e2e6:	f000 fae2 	bl	800e8ae <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800e2ea:	2000      	movs	r0, #0
 800e2ec:	f000 fae4 	bl	800e8b8 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800e2f0:	e778      	b.n	800e1e4 <LoRaMacMlmeRequest+0x190>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e2f2:	2403      	movs	r4, #3
 800e2f4:	e6bb      	b.n	800e06e <LoRaMacMlmeRequest+0x1a>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800e2f6:	f640 1344 	movw	r3, #2372	; 0x944
 800e2fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e2fe:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800e302:	612b      	str	r3, [r5, #16]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e304:	2402      	movs	r4, #2
 800e306:	e7ba      	b.n	800e27e <LoRaMacMlmeRequest+0x22a>

0800e308 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800e308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e30c:	b08f      	sub	sp, #60	; 0x3c
 800e30e:	9100      	str	r1, [sp, #0]
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800e310:	2800      	cmp	r0, #0
 800e312:	f000 81f7 	beq.w	800e704 <LoRaMacMcpsRequest+0x3fc>
 800e316:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 800e318:	f7fd ff29 	bl	800c16e <LoRaMacIsBusy>
 800e31c:	b118      	cbz	r0, 800e326 <LoRaMacMcpsRequest+0x1e>
    {
        return LORAMAC_STATUS_BUSY;
 800e31e:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800e320:	b00f      	add	sp, #60	; 0x3c
 800e322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    macHdr.Value = 0;
 800e326:	2100      	movs	r1, #0
 800e328:	460d      	mov	r5, r1
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800e32a:	f640 1644 	movw	r6, #2372	; 0x944
 800e32e:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800e332:	2214      	movs	r2, #20
 800e334:	f206 4034 	addw	r0, r6, #1076	; 0x434
 800e338:	f002 fe22 	bl	8010f80 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e33c:	2301      	movs	r3, #1
 800e33e:	f886 3435 	strb.w	r3, [r6, #1077]	; 0x435
    MacCtx.AckTimeoutRetriesCounter = 1;
 800e342:	f886 340e 	strb.w	r3, [r6, #1038]	; 0x40e
    switch( mcpsRequest->Type )
 800e346:	7823      	ldrb	r3, [r4, #0]
 800e348:	2b01      	cmp	r3, #1
 800e34a:	f000 80f4 	beq.w	800e536 <LoRaMacMcpsRequest+0x22e>
 800e34e:	2b03      	cmp	r3, #3
 800e350:	f000 8106 	beq.w	800e560 <LoRaMacMcpsRequest+0x258>
 800e354:	b1c3      	cbz	r3, 800e388 <LoRaMacMcpsRequest+0x80>
    getPhy.Attribute = PHY_MIN_TX_DR;
 800e356:	2502      	movs	r5, #2
 800e358:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e35c:	f640 634c 	movw	r3, #3660	; 0xe4c
 800e360:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e364:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800e368:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e36c:	a90c      	add	r1, sp, #48	; 0x30
 800e36e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e372:	f001 fa6a 	bl	800f84a <RegionGetPhyParam>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e376:	4628      	mov	r0, r5
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800e378:	f640 1344 	movw	r3, #2372	; 0x944
 800e37c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e380:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800e384:	6123      	str	r3, [r4, #16]
    return status;
 800e386:	e7cb      	b.n	800e320 <LoRaMacMcpsRequest+0x18>
            MacCtx.AckTimeoutRetries = 1;
 800e388:	2201      	movs	r2, #1
 800e38a:	f886 240d 	strb.w	r2, [r6, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800e38e:	2302      	movs	r3, #2
 800e390:	f363 1547 	bfi	r5, r3, #5, #3
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800e394:	7923      	ldrb	r3, [r4, #4]
 800e396:	9301      	str	r3, [sp, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800e398:	f8d4 9008 	ldr.w	r9, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800e39c:	89a7      	ldrh	r7, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800e39e:	f994 800e 	ldrsb.w	r8, [r4, #14]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800e3a2:	2302      	movs	r3, #2
 800e3a4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e3a8:	f640 664c 	movw	r6, #3660	; 0xe4c
 800e3ac:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800e3b0:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
 800e3b4:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e3b8:	a90c      	add	r1, sp, #48	; 0x30
 800e3ba:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800e3be:	f001 fa44 	bl	800f84a <RegionGetPhyParam>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800e3c2:	f896 311a 	ldrb.w	r3, [r6, #282]	; 0x11a
 800e3c6:	b9f3      	cbnz	r3, 800e406 <LoRaMacMcpsRequest+0xfe>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800e3c8:	b240      	sxtb	r0, r0
 800e3ca:	4540      	cmp	r0, r8
 800e3cc:	bfb8      	it	lt
 800e3ce:	4640      	movlt	r0, r8
            verify.DatarateParams.Datarate = datarate;
 800e3d0:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e3d4:	f640 634c 	movw	r3, #3660	; 0xe4c
 800e3d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e3dc:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800e3e0:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800e3e4:	2205      	movs	r2, #5
 800e3e6:	a90a      	add	r1, sp, #40	; 0x28
 800e3e8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e3ec:	f001 fa4c 	bl	800f888 <RegionVerify>
 800e3f0:	2800      	cmp	r0, #0
 800e3f2:	f000 8189 	beq.w	800e708 <LoRaMacMcpsRequest+0x400>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800e3f6:	f640 634c 	movw	r3, #3660	; 0xe4c
 800e3fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e3fe:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800e402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e406:	f640 634c 	movw	r3, #3660	; 0xe4c
 800e40a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e40e:	f993 a039 	ldrsb.w	sl, [r3, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800e412:	f993 b038 	ldrsb.w	fp, [r3, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e418:	9202      	str	r2, [sp, #8]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e41a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800e41e:	2b00      	cmp	r3, #0
 800e420:	f000 8174 	beq.w	800e70c <LoRaMacMcpsRequest+0x404>
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800e424:	f640 634c 	movw	r3, #3660	; 0xe4c
 800e428:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e42c:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 800e430:	b92b      	cbnz	r3, 800e43e <LoRaMacMcpsRequest+0x136>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800e432:	f640 634c 	movw	r3, #3660	; 0xe4c
 800e436:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e43a:	2100      	movs	r1, #0
 800e43c:	6319      	str	r1, [r3, #48]	; 0x30
    fCtrl.Value = 0;
 800e43e:	f04f 0600 	mov.w	r6, #0
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800e442:	f640 634c 	movw	r3, #3660	; 0xe4c
 800e446:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e44a:	f893 111a 	ldrb.w	r1, [r3, #282]	; 0x11a
 800e44e:	f361 16c7 	bfi	r6, r1, #7, #1
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e452:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e456:	2b01      	cmp	r3, #1
        fCtrl.Bits.FPending      = 1;
 800e458:	bf14      	ite	ne
 800e45a:	f3c6 1300 	ubfxne	r3, r6, #4, #1
 800e45e:	2301      	moveq	r3, #1
 800e460:	f363 1604 	bfi	r6, r3, #4, #1
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800e464:	f640 634c 	movw	r3, #3660	; 0xe4c
 800e468:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e46c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e470:	b90b      	cbnz	r3, 800e476 <LoRaMacMcpsRequest+0x16e>
        fCtrl.Bits.Ack = 1;
 800e472:	f3c6 1340 	ubfx	r3, r6, #5, #1
 800e476:	f363 1645 	bfi	r6, r3, #5, #1
    adrNext.UpdateChanMask = true;
 800e47a:	2301      	movs	r3, #1
 800e47c:	f88d 3018 	strb.w	r3, [sp, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800e480:	f88d 1019 	strb.w	r1, [sp, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e484:	9207      	str	r2, [sp, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800e486:	f640 614c 	movw	r1, #3660	; 0xe4c
 800e48a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800e48e:	f8b1 3088 	ldrh.w	r3, [r1, #136]	; 0x88
 800e492:	f8ad 3020 	strh.w	r3, [sp, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800e496:	f8b1 308a 	ldrh.w	r3, [r1, #138]	; 0x8a
 800e49a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e49e:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e4a2:	f88d b025 	strb.w	fp, [sp, #37]	; 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e4a6:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 800e4aa:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800e4ae:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 800e4b2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    adrNext.Version = Nvm.MacGroup2.Version;
 800e4b6:	f8d1 3128 	ldr.w	r3, [r1, #296]	; 0x128
 800e4ba:	9305      	str	r3, [sp, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800e4bc:	ab02      	add	r3, sp, #8
 800e4be:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800e4c2:	3139      	adds	r1, #57	; 0x39
 800e4c4:	a805      	add	r0, sp, #20
 800e4c6:	f000 f977 	bl	800e7b8 <LoRaMacAdrCalcNext>
 800e4ca:	f360 1686 	bfi	r6, r0, #6, #1
    MacCtx.PktBufferLen = 0;
 800e4ce:	f640 1244 	movw	r2, #2372	; 0x944
 800e4d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	8013      	strh	r3, [r2, #0]
    MacCtx.NodeAckRequested = false;
 800e4da:	f882 3410 	strb.w	r3, [r2, #1040]	; 0x410
    uint32_t fCntUp = 0;
 800e4de:	9303      	str	r3, [sp, #12]
    size_t macCmdsSize = 0;
 800e4e0:	9304      	str	r3, [sp, #16]
        fBufferSize = 0;
 800e4e2:	4599      	cmp	r9, r3
 800e4e4:	bf08      	it	eq
 800e4e6:	461f      	moveq	r7, r3
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800e4e8:	4690      	mov	r8, r2
 800e4ea:	463a      	mov	r2, r7
 800e4ec:	4649      	mov	r1, r9
 800e4ee:	f508 709c 	add.w	r0, r8, #312	; 0x138
 800e4f2:	f002 fd2b 	bl	8010f4c <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800e4f6:	b2fa      	uxtb	r2, r7
 800e4f8:	f888 2237 	strb.w	r2, [r8, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800e4fc:	b2e9      	uxtb	r1, r5
 800e4fe:	f888 5002 	strb.w	r5, [r8, #2]
    switch( macHdr->Bits.MType )
 800e502:	f3c5 1542 	ubfx	r5, r5, #5, #3
 800e506:	2d04      	cmp	r5, #4
 800e508:	d03b      	beq.n	800e582 <LoRaMacMcpsRequest+0x27a>
 800e50a:	2d07      	cmp	r5, #7
 800e50c:	f000 80e7 	beq.w	800e6de <LoRaMacMcpsRequest+0x3d6>
 800e510:	2d02      	cmp	r5, #2
 800e512:	d03d      	beq.n	800e590 <LoRaMacMcpsRequest+0x288>
 800e514:	2002      	movs	r0, #2
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800e516:	f640 634c 	movw	r3, #3660	; 0xe4c
 800e51a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e51e:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800e522:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
            MacCtx.NodeAckRequested = false;
 800e526:	f640 1344 	movw	r3, #2372	; 0x944
 800e52a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e52e:	2200      	movs	r2, #0
 800e530:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 800e534:	e720      	b.n	800e378 <LoRaMacMcpsRequest+0x70>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800e536:	f640 1344 	movw	r3, #2372	; 0x944
 800e53a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e53e:	7be2      	ldrb	r2, [r4, #15]
 800e540:	2a08      	cmp	r2, #8
 800e542:	bf28      	it	cs
 800e544:	2208      	movcs	r2, #8
 800e546:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800e54a:	2304      	movs	r3, #4
 800e54c:	f363 1547 	bfi	r5, r3, #5, #3
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800e550:	7923      	ldrb	r3, [r4, #4]
 800e552:	9301      	str	r3, [sp, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800e554:	f8d4 9008 	ldr.w	r9, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800e558:	89a7      	ldrh	r7, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800e55a:	f994 800e 	ldrsb.w	r8, [r4, #14]
            break;
 800e55e:	e720      	b.n	800e3a2 <LoRaMacMcpsRequest+0x9a>
            MacCtx.AckTimeoutRetries = 1;
 800e560:	f640 1344 	movw	r3, #2372	; 0x944
 800e564:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e568:	2201      	movs	r2, #1
 800e56a:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800e56e:	f06f 051f 	mvn.w	r5, #31
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800e572:	f8d4 9004 	ldr.w	r9, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800e576:	8927      	ldrh	r7, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800e578:	f994 800a 	ldrsb.w	r8, [r4, #10]
    uint8_t fPort = 0;
 800e57c:	2300      	movs	r3, #0
 800e57e:	9301      	str	r3, [sp, #4]
            break;
 800e580:	e70f      	b.n	800e3a2 <LoRaMacMcpsRequest+0x9a>
            MacCtx.NodeAckRequested = true;
 800e582:	f640 1344 	movw	r3, #2372	; 0x944
 800e586:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e58a:	2001      	movs	r0, #1
 800e58c:	f883 0410 	strb.w	r0, [r3, #1040]	; 0x410
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800e590:	f640 1344 	movw	r3, #2372	; 0x944
 800e594:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e598:	2004      	movs	r0, #4
 800e59a:	f883 0104 	strb.w	r0, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800e59e:	1c98      	adds	r0, r3, #2
 800e5a0:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800e5a4:	20ff      	movs	r0, #255	; 0xff
 800e5a6:	f883 010c 	strb.w	r0, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800e5aa:	f883 110d 	strb.w	r1, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800e5ae:	9901      	ldr	r1, [sp, #4]
 800e5b0:	f883 1128 	strb.w	r1, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800e5b4:	f640 614c 	movw	r1, #3660	; 0xe4c
 800e5b8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800e5bc:	f8d1 10e4 	ldr.w	r1, [r1, #228]	; 0xe4
 800e5c0:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800e5c4:	f883 6114 	strb.w	r6, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800e5c8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800e5cc:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800e5d0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800e5d4:	a803      	add	r0, sp, #12
 800e5d6:	f000 fd7c 	bl	800f0d2 <LoRaMacCryptoGetFCntUp>
 800e5da:	2800      	cmp	r0, #0
 800e5dc:	f040 809a 	bne.w	800e714 <LoRaMacMcpsRequest+0x40c>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800e5e0:	9a03      	ldr	r2, [sp, #12]
 800e5e2:	f640 1344 	movw	r3, #2372	; 0x944
 800e5e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e5ea:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	f883 1439 	strb.w	r1, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = false;
 800e5f4:	f883 1438 	strb.w	r1, [r3, #1080]	; 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800e5f8:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800e5fc:	a804      	add	r0, sp, #16
 800e5fe:	f000 fa82 	bl	800eb06 <LoRaMacCommandsGetSizeSerializedCmds>
 800e602:	2800      	cmp	r0, #0
 800e604:	f040 8088 	bne.w	800e718 <LoRaMacMcpsRequest+0x410>
            if( macCmdsSize > 0 )
 800e608:	9b04      	ldr	r3, [sp, #16]
 800e60a:	bb03      	cbnz	r3, 800e64e <LoRaMacMcpsRequest+0x346>
        status = ScheduleTx( allowDelayedTx );
 800e60c:	9800      	ldr	r0, [sp, #0]
 800e60e:	f7fd f8d9 	bl	800b7c4 <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
 800e612:	2800      	cmp	r0, #0
 800e614:	f47f af7f 	bne.w	800e516 <LoRaMacMcpsRequest+0x20e>
        Nvm.MacGroup1.SrvAckRequested = false;
 800e618:	f640 634c 	movw	r3, #3660	; 0xe4c
 800e61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e620:	2200      	movs	r2, #0
 800e622:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800e626:	9a02      	ldr	r2, [sp, #8]
 800e628:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800e62a:	f000 fa3a 	bl	800eaa2 <LoRaMacCommandsRemoveNoneStickyCmds>
 800e62e:	2800      	cmp	r0, #0
 800e630:	d16e      	bne.n	800e710 <LoRaMacMcpsRequest+0x408>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800e632:	7822      	ldrb	r2, [r4, #0]
 800e634:	f640 1344 	movw	r3, #2372	; 0x944
 800e638:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e63c:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800e640:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800e644:	f042 0201 	orr.w	r2, r2, #1
 800e648:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800e64c:	e694      	b.n	800e378 <LoRaMacMcpsRequest+0x70>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800e64e:	f640 634c 	movw	r3, #3660	; 0xe4c
 800e652:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e656:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800e65a:	f7fc fcc4 	bl	800afe6 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800e65e:	f640 1344 	movw	r3, #2372	; 0x944
 800e662:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e666:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800e66a:	b30b      	cbz	r3, 800e6b0 <LoRaMacMcpsRequest+0x3a8>
 800e66c:	9b04      	ldr	r3, [sp, #16]
 800e66e:	2b0f      	cmp	r3, #15
 800e670:	d90a      	bls.n	800e688 <LoRaMacMcpsRequest+0x380>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800e672:	f640 52cc 	movw	r2, #3532	; 0xdcc
 800e676:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800e67a:	a904      	add	r1, sp, #16
 800e67c:	f000 fa4f 	bl	800eb1e <LoRaMacCommandsSerializeCmds>
 800e680:	2800      	cmp	r0, #0
 800e682:	d0c3      	beq.n	800e60c <LoRaMacMcpsRequest+0x304>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e684:	2013      	movs	r0, #19
 800e686:	e746      	b.n	800e516 <LoRaMacMcpsRequest+0x20e>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800e688:	f640 225c 	movw	r2, #2652	; 0xa5c
 800e68c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800e690:	a904      	add	r1, sp, #16
 800e692:	200f      	movs	r0, #15
 800e694:	f000 fa43 	bl	800eb1e <LoRaMacCommandsSerializeCmds>
 800e698:	2800      	cmp	r0, #0
 800e69a:	d13f      	bne.n	800e71c <LoRaMacMcpsRequest+0x414>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800e69c:	9b04      	ldr	r3, [sp, #16]
 800e69e:	f363 0603 	bfi	r6, r3, #0, #4
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800e6a2:	f640 1344 	movw	r3, #2372	; 0x944
 800e6a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6aa:	f883 6114 	strb.w	r6, [r3, #276]	; 0x114
 800e6ae:	e7ad      	b.n	800e60c <LoRaMacMcpsRequest+0x304>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800e6b0:	f640 52cc 	movw	r2, #3532	; 0xdcc
 800e6b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800e6b8:	a904      	add	r1, sp, #16
 800e6ba:	f000 fa30 	bl	800eb1e <LoRaMacCommandsSerializeCmds>
 800e6be:	bb78      	cbnz	r0, 800e720 <LoRaMacMcpsRequest+0x418>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800e6c0:	f640 1344 	movw	r3, #2372	; 0x944
 800e6c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800e6ce:	f503 6291 	add.w	r2, r3, #1160	; 0x488
 800e6d2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800e6d6:	9a04      	ldr	r2, [sp, #16]
 800e6d8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800e6dc:	e796      	b.n	800e60c <LoRaMacMcpsRequest+0x304>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800e6de:	f1b9 0f00 	cmp.w	r9, #0
 800e6e2:	d093      	beq.n	800e60c <LoRaMacMcpsRequest+0x304>
 800e6e4:	2a00      	cmp	r2, #0
 800e6e6:	d091      	beq.n	800e60c <LoRaMacMcpsRequest+0x304>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800e6e8:	f640 1544 	movw	r5, #2372	; 0x944
 800e6ec:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800e6f0:	b2fa      	uxtb	r2, r7
 800e6f2:	4649      	mov	r1, r9
 800e6f4:	1ce8      	adds	r0, r5, #3
 800e6f6:	f002 fc29 	bl	8010f4c <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800e6fa:	f895 3237 	ldrb.w	r3, [r5, #567]	; 0x237
 800e6fe:	3301      	adds	r3, #1
 800e700:	802b      	strh	r3, [r5, #0]
 800e702:	e783      	b.n	800e60c <LoRaMacMcpsRequest+0x304>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e704:	2003      	movs	r0, #3
 800e706:	e60b      	b.n	800e320 <LoRaMacMcpsRequest+0x18>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800e708:	2003      	movs	r0, #3
 800e70a:	e609      	b.n	800e320 <LoRaMacMcpsRequest+0x18>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800e70c:	2007      	movs	r0, #7
 800e70e:	e70a      	b.n	800e526 <LoRaMacMcpsRequest+0x21e>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e710:	2013      	movs	r0, #19
 800e712:	e708      	b.n	800e526 <LoRaMacMcpsRequest+0x21e>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800e714:	2012      	movs	r0, #18
 800e716:	e6fe      	b.n	800e516 <LoRaMacMcpsRequest+0x20e>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e718:	2013      	movs	r0, #19
 800e71a:	e6fc      	b.n	800e516 <LoRaMacMcpsRequest+0x20e>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e71c:	2013      	movs	r0, #19
 800e71e:	e6fa      	b.n	800e516 <LoRaMacMcpsRequest+0x20e>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e720:	2013      	movs	r0, #19
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800e722:	e6f8      	b.n	800e516 <LoRaMacMcpsRequest+0x20e>

0800e724 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800e724:	b510      	push	{r4, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800e72a:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800e72e:	f640 634c 	movw	r3, #3660	; 0xe4c
 800e732:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e736:	220f      	movs	r2, #15
 800e738:	a901      	add	r1, sp, #4
 800e73a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e73e:	f001 f8a3 	bl	800f888 <RegionVerify>
 800e742:	b178      	cbz	r0, 800e764 <LoRaMacTestSetDutyCycleOn+0x40>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800e744:	f640 634c 	movw	r3, #3660	; 0xe4c
 800e748:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e74c:	f883 411c 	strb.w	r4, [r3, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800e750:	f640 1344 	movw	r3, #2372	; 0x944
 800e754:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e758:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800e75c:	f042 0220 	orr.w	r2, r2, #32
 800e760:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    }
}
 800e764:	b002      	add	sp, #8
 800e766:	bd10      	pop	{r4, pc}

0800e768 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800e768:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800e76a:	f7fe ff01 	bl	800d570 <LoRaMacStop>
 800e76e:	b110      	cbz	r0, 800e776 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800e770:	2401      	movs	r4, #1
    }
}
 800e772:	4620      	mov	r0, r4
 800e774:	bd38      	pop	{r3, r4, r5, pc}
 800e776:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800e778:	f640 1544 	movw	r5, #2372	; 0x944
 800e77c:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800e780:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800e784:	f005 fb32 	bl	8013dec <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800e788:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800e78c:	f005 fb2e 	bl	8013dec <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800e790:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800e794:	f005 fb2a 	bl	8013dec <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.AckTimeoutTimer );
 800e798:	f505 707d 	add.w	r0, r5, #1012	; 0x3f4
 800e79c:	f005 fb26 	bl	8013dec <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800e7a0:	f000 f898 	bl	800e8d4 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800e7a4:	2000      	movs	r0, #0
 800e7a6:	f7fd fb78 	bl	800be9a <ResetMacParameters>
        Radio.Sleep( );
 800e7aa:	f245 23d0 	movw	r3, #21200	; 0x52d0
 800e7ae:	f6c0 0301 	movt	r3, #2049	; 0x801
 800e7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b4:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800e7b6:	e7dc      	b.n	800e772 <LoRaMacDeInitialization+0xa>

0800e7b8 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800e7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7bc:	b089      	sub	sp, #36	; 0x24
 800e7be:	461d      	mov	r5, r3
    if( adrNext->Version.Fields.Minor == 0 )
 800e7c0:	7883      	ldrb	r3, [r0, #2]
 800e7c2:	b12b      	cbz	r3, 800e7d0 <LoRaMacAdrCalcNext+0x18>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800e7c4:	f04f 0800 	mov.w	r8, #0
}
 800e7c8:	4640      	mov	r0, r8
 800e7ca:	b009      	add	sp, #36	; 0x24
 800e7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d0:	4604      	mov	r4, r0
 800e7d2:	460f      	mov	r7, r1
 800e7d4:	4616      	mov	r6, r2
    int8_t datarate = adrNext->Datarate;
 800e7d6:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 800e7da:	f990 a011 	ldrsb.w	sl, [r0, #17]
    *adrAckCounter = adrNext->AdrAckCounter;
 800e7de:	6883      	ldr	r3, [r0, #8]
 800e7e0:	602b      	str	r3, [r5, #0]
    if( adrNext->AdrEnabled == true )
 800e7e2:	f890 8005 	ldrb.w	r8, [r0, #5]
 800e7e6:	f1b8 0f00 	cmp.w	r8, #0
 800e7ea:	d104      	bne.n	800e7f6 <LoRaMacAdrCalcNext+0x3e>
    *drOut = datarate;
 800e7ec:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800e7f0:	f886 a000 	strb.w	sl, [r6]
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800e7f4:	e7e8      	b.n	800e7c8 <LoRaMacAdrCalcNext+0x10>
        getPhy.Attribute = PHY_MIN_TX_DR;
 800e7f6:	2302      	movs	r3, #2
 800e7f8:	f88d 300c 	strb.w	r3, [sp, #12]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800e7fc:	7c83      	ldrb	r3, [r0, #18]
 800e7fe:	f88d 300e 	strb.w	r3, [sp, #14]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800e802:	a903      	add	r1, sp, #12
 800e804:	7cc0      	ldrb	r0, [r0, #19]
 800e806:	f001 f820 	bl	800f84a <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800e80a:	fa4f fb80 	sxtb.w	fp, r0
        datarate = MAX( datarate, minTxDatarate );
 800e80e:	464a      	mov	r2, r9
 800e810:	45d9      	cmp	r9, fp
 800e812:	bfb8      	it	lt
 800e814:	465a      	movlt	r2, fp
 800e816:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 800e818:	45d9      	cmp	r9, fp
 800e81a:	dc04      	bgt.n	800e826 <LoRaMacAdrCalcNext+0x6e>
            *adrAckCounter = 0;
 800e81c:	2300      	movs	r3, #0
 800e81e:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 800e820:	4691      	mov	r9, r2
            adrAckReq = false;
 800e822:	4698      	mov	r8, r3
 800e824:	e7e2      	b.n	800e7ec <LoRaMacAdrCalcNext+0x34>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800e826:	68a2      	ldr	r2, [r4, #8]
 800e828:	89a1      	ldrh	r1, [r4, #12]
 800e82a:	428a      	cmp	r2, r1
 800e82c:	bf34      	ite	cc
 800e82e:	f04f 0800 	movcc.w	r8, #0
 800e832:	f04f 0801 	movcs.w	r8, #1
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800e836:	89e3      	ldrh	r3, [r4, #14]
 800e838:	440b      	add	r3, r1
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d202      	bcs.n	800e844 <LoRaMacAdrCalcNext+0x8c>
        datarate = MAX( datarate, minTxDatarate );
 800e83e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e842:	e7d3      	b.n	800e7ec <LoRaMacAdrCalcNext+0x34>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800e844:	2308      	movs	r3, #8
 800e846:	f88d 300c 	strb.w	r3, [sp, #12]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800e84a:	a903      	add	r1, sp, #12
 800e84c:	7ce0      	ldrb	r0, [r4, #19]
 800e84e:	f000 fffc 	bl	800f84a <RegionGetPhyParam>
                txPower = phyParam.Value;
 800e852:	fa4f fa80 	sxtb.w	sl, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800e856:	89e2      	ldrh	r2, [r4, #14]
 800e858:	68a3      	ldr	r3, [r4, #8]
 800e85a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e85e:	fb02 3311 	mls	r3, r2, r1, r3
 800e862:	2b01      	cmp	r3, #1
 800e864:	d002      	beq.n	800e86c <LoRaMacAdrCalcNext+0xb4>
        datarate = MAX( datarate, minTxDatarate );
 800e866:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e86a:	e7bf      	b.n	800e7ec <LoRaMacAdrCalcNext+0x34>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800e86c:	2322      	movs	r3, #34	; 0x22
 800e86e:	f88d 300c 	strb.w	r3, [sp, #12]
                    getPhy.Datarate = datarate;
 800e872:	9b01      	ldr	r3, [sp, #4]
 800e874:	f88d 300d 	strb.w	r3, [sp, #13]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800e878:	7ca3      	ldrb	r3, [r4, #18]
 800e87a:	f88d 300e 	strb.w	r3, [sp, #14]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800e87e:	a903      	add	r1, sp, #12
 800e880:	7ce0      	ldrb	r0, [r4, #19]
 800e882:	f000 ffe2 	bl	800f84a <RegionGetPhyParam>
                    datarate = phyParam.Value;
 800e886:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 800e88a:	45cb      	cmp	fp, r9
 800e88c:	d1ae      	bne.n	800e7ec <LoRaMacAdrCalcNext+0x34>
                        if( adrNext->UpdateChanMask == true )
 800e88e:	f894 8004 	ldrb.w	r8, [r4, #4]
 800e892:	f1b8 0f00 	cmp.w	r8, #0
 800e896:	d0a9      	beq.n	800e7ec <LoRaMacAdrCalcNext+0x34>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800e898:	2302      	movs	r3, #2
 800e89a:	f88d 301c 	strb.w	r3, [sp, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 800e89e:	a905      	add	r1, sp, #20
 800e8a0:	7ce0      	ldrb	r0, [r4, #19]
 800e8a2:	f000 ffe9 	bl	800f878 <RegionInitDefaults>
                        adrAckReq = false;
 800e8a6:	f04f 0800 	mov.w	r8, #0
 800e8aa:	e79f      	b.n	800e7ec <LoRaMacAdrCalcNext+0x34>

0800e8ac <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8ac:	4770      	bx	lr

0800e8ae <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8ae:	4770      	bx	lr

0800e8b0 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8b0:	4770      	bx	lr

0800e8b2 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8b2:	4770      	bx	lr

0800e8b4 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	4770      	bx	lr

0800e8b8 <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8b8:	4770      	bx	lr

0800e8ba <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8ba:	4770      	bx	lr

0800e8bc <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8bc:	4770      	bx	lr

0800e8be <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8be:	2000      	movs	r0, #0
 800e8c0:	4770      	bx	lr

0800e8c2 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8c2:	2000      	movs	r0, #0
 800e8c4:	4770      	bx	lr

0800e8c6 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8c6:	2000      	movs	r0, #0
 800e8c8:	4770      	bx	lr

0800e8ca <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8ca:	2000      	movs	r0, #0
 800e8cc:	4770      	bx	lr

0800e8ce <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8ce:	2000      	movs	r0, #0
 800e8d0:	4770      	bx	lr

0800e8d2 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8d2:	4770      	bx	lr

0800e8d4 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8d4:	4770      	bx	lr

0800e8d6 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8d6:	4770      	bx	lr

0800e8d8 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8d8:	2002      	movs	r0, #2
 800e8da:	4770      	bx	lr

0800e8dc <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8dc:	2002      	movs	r0, #2
 800e8de:	4770      	bx	lr

0800e8e0 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8e0:	2002      	movs	r0, #2
 800e8e2:	4770      	bx	lr

0800e8e4 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8e4:	4770      	bx	lr

0800e8e6 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8e6:	2000      	movs	r0, #0
 800e8e8:	4770      	bx	lr

0800e8ea <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8ea:	4770      	bx	lr

0800e8ec <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8ec:	4770      	bx	lr

0800e8ee <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8ee:	2000      	movs	r0, #0
 800e8f0:	4770      	bx	lr

0800e8f2 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8f2:	2000      	movs	r0, #0
 800e8f4:	4770      	bx	lr

0800e8f6 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8f6:	4770      	bx	lr

0800e8f8 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e8f8:	4770      	bx	lr

0800e8fa <LoRaMacCommandsInit>:
            return false;
    }
}

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800e8fa:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800e8fc:	f241 54c8 	movw	r4, #5576	; 0x15c8
 800e900:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800e904:	22fc      	movs	r2, #252	; 0xfc
 800e906:	2100      	movs	r1, #0
 800e908:	4620      	mov	r0, r4
 800e90a:	f002 fb39 	bl	8010f80 <memset1>
    list->First = NULL;
 800e90e:	2000      	movs	r0, #0
 800e910:	6020      	str	r0, [r4, #0]
    list->Last = NULL;
 800e912:	6060      	str	r0, [r4, #4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
 800e914:	bd10      	pop	{r4, pc}

0800e916 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800e916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( payload == NULL )
 800e918:	b189      	cbz	r1, 800e93e <LoRaMacCommandsAddCmd+0x28>
 800e91a:	4606      	mov	r6, r0
 800e91c:	4617      	mov	r7, r2
 800e91e:	468e      	mov	lr, r1
 800e920:	f241 52df 	movw	r2, #5599	; 0x15df
 800e924:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800e928:	f04f 0c00 	mov.w	ip, #0
 800e92c:	e012      	b.n	800e954 <LoRaMacCommandsAddCmd+0x3e>
        list->First = element;
 800e92e:	f241 53c8 	movw	r3, #5576	; 0x15c8
 800e932:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e936:	6018      	str	r0, [r3, #0]
 800e938:	e01e      	b.n	800e978 <LoRaMacCommandsAddCmd+0x62>
            return true;
 800e93a:	2301      	movs	r3, #1
 800e93c:	e03f      	b.n	800e9be <LoRaMacCommandsAddCmd+0xa8>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800e93e:	2401      	movs	r4, #1
 800e940:	e000      	b.n	800e944 <LoRaMacCommandsAddCmd+0x2e>
    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );

    if( newCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800e942:	2402      	movs	r4, #2
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );

    return LORAMAC_COMMANDS_SUCCESS;
}
 800e944:	4620      	mov	r0, r4
 800e946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 800e948:	f10c 0c01 	add.w	ip, ip, #1
 800e94c:	3210      	adds	r2, #16
 800e94e:	f1bc 0f0f 	cmp.w	ip, #15
 800e952:	d0f6      	beq.n	800e942 <LoRaMacCommandsAddCmd+0x2c>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800e954:	4665      	mov	r5, ip
 800e956:	f1a2 000f 	sub.w	r0, r2, #15
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800e95a:	f1a2 0310 	sub.w	r3, r2, #16
        if( mem[size] != 0x00 )
 800e95e:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800e962:	2c00      	cmp	r4, #0
 800e964:	d1f0      	bne.n	800e948 <LoRaMacCommandsAddCmd+0x32>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800e966:	4293      	cmp	r3, r2
 800e968:	d1f9      	bne.n	800e95e <LoRaMacCommandsAddCmd+0x48>
    if( list->First == NULL )
 800e96a:	f241 53c8 	movw	r3, #5576	; 0x15c8
 800e96e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d0da      	beq.n	800e92e <LoRaMacCommandsAddCmd+0x18>
    if( list->Last )
 800e978:	f241 53c8 	movw	r3, #5576	; 0x15c8
 800e97c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	b103      	cbz	r3, 800e986 <LoRaMacCommandsAddCmd+0x70>
        list->Last->Next = element;
 800e984:	6018      	str	r0, [r3, #0]
    element->Next = NULL;
 800e986:	f241 53c8 	movw	r3, #5576	; 0x15c8
 800e98a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e98e:	eb03 1205 	add.w	r2, r3, r5, lsl #4
 800e992:	2100      	movs	r1, #0
 800e994:	6091      	str	r1, [r2, #8]
    list->Last = element;
 800e996:	6058      	str	r0, [r3, #4]
    newCmd->CID = cid;
 800e998:	7316      	strb	r6, [r2, #12]
    newCmd->PayloadSize = payloadSize;
 800e99a:	6117      	str	r7, [r2, #16]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800e99c:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 800e9a0:	b2ba      	uxth	r2, r7
 800e9a2:	4671      	mov	r1, lr
 800e9a4:	f103 000d 	add.w	r0, r3, #13
 800e9a8:	f002 fad0 	bl	8010f4c <memcpy1>
    switch( cid )
 800e9ac:	2e05      	cmp	r6, #5
 800e9ae:	d0c4      	beq.n	800e93a <LoRaMacCommandsAddCmd+0x24>
 800e9b0:	f1a6 0308 	sub.w	r3, r6, #8
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	2b02      	cmp	r3, #2
 800e9b8:	bf8c      	ite	hi
 800e9ba:	2300      	movhi	r3, #0
 800e9bc:	2301      	movls	r3, #1
    newCmd->IsSticky = IsSticky( cid );
 800e9be:	f241 52c8 	movw	r2, #5576	; 0x15c8
 800e9c2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800e9c6:	1c69      	adds	r1, r5, #1
 800e9c8:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 800e9cc:	710b      	strb	r3, [r1, #4]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	714b      	strb	r3, [r1, #5]
    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800e9d2:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	443b      	add	r3, r7
 800e9da:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    return LORAMAC_COMMANDS_SUCCESS;
 800e9de:	e7b1      	b.n	800e944 <LoRaMacCommandsAddCmd+0x2e>

0800e9e0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800e9e0:	b320      	cbz	r0, 800ea2c <LoRaMacCommandsRemoveCmd+0x4c>
{
 800e9e2:	b510      	push	{r4, lr}
 800e9e4:	4684      	mov	ip, r0
    curElement = list->First;
 800e9e6:	f241 53c8 	movw	r3, #5576	; 0x15c8
 800e9ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9ee:	6819      	ldr	r1, [r3, #0]
    if( element != curElement )
 800e9f0:	4288      	cmp	r0, r1
 800e9f2:	d010      	beq.n	800ea16 <LoRaMacCommandsRemoveCmd+0x36>
    curElement = list->First;
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	e000      	b.n	800e9fa <LoRaMacCommandsRemoveCmd+0x1a>
            curElement = curElement->Next;
 800e9f8:	4613      	mov	r3, r2
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800e9fa:	b1cb      	cbz	r3, 800ea30 <LoRaMacCommandsRemoveCmd+0x50>
 800e9fc:	681a      	ldr	r2, [r3, #0]
 800e9fe:	4594      	cmp	ip, r2
 800ea00:	d1fa      	bne.n	800e9f8 <LoRaMacCommandsRemoveCmd+0x18>
    if( list->First == element )
 800ea02:	4291      	cmp	r1, r2
 800ea04:	d008      	beq.n	800ea18 <LoRaMacCommandsRemoveCmd+0x38>
    if( list->Last == element )
 800ea06:	f241 52c8 	movw	r2, #5576	; 0x15c8
 800ea0a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800ea0e:	6852      	ldr	r2, [r2, #4]
 800ea10:	4594      	cmp	ip, r2
 800ea12:	d11a      	bne.n	800ea4a <LoRaMacCommandsRemoveCmd+0x6a>
 800ea14:	e013      	b.n	800ea3e <LoRaMacCommandsRemoveCmd+0x5e>
        curElement = NULL;
 800ea16:	2300      	movs	r3, #0
        list->First = element->Next;
 800ea18:	6809      	ldr	r1, [r1, #0]
 800ea1a:	f241 52c8 	movw	r2, #5576	; 0x15c8
 800ea1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800ea22:	6011      	str	r1, [r2, #0]
    if( list->Last == element )
 800ea24:	6852      	ldr	r2, [r2, #4]
 800ea26:	4594      	cmp	ip, r2
 800ea28:	d10e      	bne.n	800ea48 <LoRaMacCommandsRemoveCmd+0x68>
 800ea2a:	e008      	b.n	800ea3e <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ea2c:	2001      	movs	r0, #1
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800ea2e:	4770      	bx	lr
    if( list->Last == element )
 800ea30:	f241 52c8 	movw	r2, #5576	; 0x15c8
 800ea34:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800ea38:	6852      	ldr	r2, [r2, #4]
 800ea3a:	4594      	cmp	ip, r2
 800ea3c:	d108      	bne.n	800ea50 <LoRaMacCommandsRemoveCmd+0x70>
        list->Last = PrevElement;
 800ea3e:	f241 52c8 	movw	r2, #5576	; 0x15c8
 800ea42:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800ea46:	6053      	str	r3, [r2, #4]
    if( PrevElement != NULL )
 800ea48:	b113      	cbz	r3, 800ea50 <LoRaMacCommandsRemoveCmd+0x70>
        PrevElement->Next = element->Next;
 800ea4a:	f8dc 2000 	ldr.w	r2, [ip]
 800ea4e:	601a      	str	r2, [r3, #0]
    element->Next = NULL;
 800ea50:	2400      	movs	r4, #0
 800ea52:	f8cc 4000 	str.w	r4, [ip]
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800ea56:	f241 52c8 	movw	r2, #5576	; 0x15c8
 800ea5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800ea5e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800ea62:	3b01      	subs	r3, #1
 800ea64:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800ea68:	1a5b      	subs	r3, r3, r1
 800ea6a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800ea6e:	2210      	movs	r2, #16
 800ea70:	4621      	mov	r1, r4
 800ea72:	4660      	mov	r0, ip
 800ea74:	f002 fa84 	bl	8010f80 <memset1>
    return LORAMAC_COMMANDS_SUCCESS;
 800ea78:	4620      	mov	r0, r4
}
 800ea7a:	bd10      	pop	{r4, pc}

0800ea7c <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800ea7c:	f241 53c8 	movw	r3, #5576	; 0x15c8
 800ea80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ea84:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800ea86:	b13b      	cbz	r3, 800ea98 <LoRaMacCommandsGetCmd+0x1c>
 800ea88:	791a      	ldrb	r2, [r3, #4]
 800ea8a:	4282      	cmp	r2, r0
 800ea8c:	d006      	beq.n	800ea9c <LoRaMacCommandsGetCmd+0x20>
    {
        curElement = curElement->Next;
 800ea8e:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d1f9      	bne.n	800ea88 <LoRaMacCommandsGetCmd+0xc>
    *macCmd = curElement;

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800ea94:	2003      	movs	r0, #3
 800ea96:	e002      	b.n	800ea9e <LoRaMacCommandsGetCmd+0x22>
 800ea98:	2003      	movs	r0, #3
 800ea9a:	e000      	b.n	800ea9e <LoRaMacCommandsGetCmd+0x22>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800ea9c:	2000      	movs	r0, #0
    *macCmd = curElement;
 800ea9e:	600b      	str	r3, [r1, #0]
}
 800eaa0:	4770      	bx	lr

0800eaa2 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800eaa2:	f241 53c8 	movw	r3, #5576	; 0x15c8
 800eaa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eaaa:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800eaac:	b120      	cbz	r0, 800eab8 <LoRaMacCommandsRemoveNoneStickyCmds+0x16>
    {
        if( curElement->IsSticky == false )
 800eaae:	7b03      	ldrb	r3, [r0, #12]
 800eab0:	b133      	cbz	r3, 800eac0 <LoRaMacCommandsRemoveNoneStickyCmds+0x1e>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800eab2:	6800      	ldr	r0, [r0, #0]
    while( curElement != NULL )
 800eab4:	2800      	cmp	r0, #0
 800eab6:	d1fa      	bne.n	800eaae <LoRaMacCommandsRemoveNoneStickyCmds+0xc>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800eab8:	2000      	movs	r0, #0
 800eaba:	4770      	bx	lr
 800eabc:	2000      	movs	r0, #0
 800eabe:	bd10      	pop	{r4, pc}
{
 800eac0:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800eac2:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800eac4:	f7ff ff8c 	bl	800e9e0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800eac8:	4620      	mov	r0, r4
    while( curElement != NULL )
 800eaca:	2800      	cmp	r0, #0
 800eacc:	d0f6      	beq.n	800eabc <LoRaMacCommandsRemoveNoneStickyCmds+0x1a>
        if( curElement->IsSticky == false )
 800eace:	7b03      	ldrb	r3, [r0, #12]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d0f6      	beq.n	800eac2 <LoRaMacCommandsRemoveNoneStickyCmds+0x20>
            curElement = curElement->Next;
 800ead4:	6800      	ldr	r0, [r0, #0]
 800ead6:	e7f8      	b.n	800eaca <LoRaMacCommandsRemoveNoneStickyCmds+0x28>

0800ead8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800ead8:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800eada:	f241 53c8 	movw	r3, #5576	; 0x15c8
 800eade:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eae2:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800eae4:	b91c      	cbnz	r4, 800eaee <LoRaMacCommandsRemoveStickyAnsCmds+0x16>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800eae6:	2000      	movs	r0, #0
 800eae8:	bd10      	pop	{r4, pc}
    while( curElement != NULL )
 800eaea:	2c00      	cmp	r4, #0
 800eaec:	d0fb      	beq.n	800eae6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
        nexElement = curElement->Next;
 800eaee:	4620      	mov	r0, r4
 800eaf0:	6824      	ldr	r4, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800eaf2:	7903      	ldrb	r3, [r0, #4]
    switch( cid )
 800eaf4:	2b05      	cmp	r3, #5
 800eaf6:	d003      	beq.n	800eb00 <LoRaMacCommandsRemoveStickyAnsCmds+0x28>
 800eaf8:	3b08      	subs	r3, #8
 800eafa:	b2db      	uxtb	r3, r3
 800eafc:	2b02      	cmp	r3, #2
 800eafe:	d8f4      	bhi.n	800eaea <LoRaMacCommandsRemoveStickyAnsCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
 800eb00:	f7ff ff6e 	bl	800e9e0 <LoRaMacCommandsRemoveCmd>
 800eb04:	e7f1      	b.n	800eaea <LoRaMacCommandsRemoveStickyAnsCmds+0x12>

0800eb06 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800eb06:	b140      	cbz	r0, 800eb1a <LoRaMacCommandsGetSizeSerializedCmds+0x14>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800eb08:	f241 53c8 	movw	r3, #5576	; 0x15c8
 800eb0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb10:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800eb14:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800eb16:	2000      	movs	r0, #0
 800eb18:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800eb1a:	2001      	movs	r0, #1
}
 800eb1c:	4770      	bx	lr

0800eb1e <LoRaMacCommandsSerializeCmds>:
{
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800eb1e:	b36a      	cbz	r2, 800eb7c <LoRaMacCommandsSerializeCmds+0x5e>
{
 800eb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb24:	4607      	mov	r7, r0
 800eb26:	4688      	mov	r8, r1
 800eb28:	4616      	mov	r6, r2
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800eb2a:	b349      	cbz	r1, 800eb80 <LoRaMacCommandsSerializeCmds+0x62>
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800eb2c:	f241 53c8 	movw	r3, #5576	; 0x15c8
 800eb30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb34:	681c      	ldr	r4, [r3, #0]
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800eb36:	b1dc      	cbz	r4, 800eb70 <LoRaMacCommandsSerializeCmds+0x52>
    uint8_t itr = 0;
 800eb38:	2100      	movs	r1, #0
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800eb3a:	1a7a      	subs	r2, r7, r1
 800eb3c:	68a3      	ldr	r3, [r4, #8]
 800eb3e:	3301      	adds	r3, #1
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d30f      	bcc.n	800eb64 <LoRaMacCommandsSerializeCmds+0x46>
        {
            buffer[itr++] = curElement->CID;
 800eb44:	1c4d      	adds	r5, r1, #1
 800eb46:	b2ed      	uxtb	r5, r5
 800eb48:	7923      	ldrb	r3, [r4, #4]
 800eb4a:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800eb4c:	8922      	ldrh	r2, [r4, #8]
 800eb4e:	1d61      	adds	r1, r4, #5
 800eb50:	1970      	adds	r0, r6, r5
 800eb52:	f002 f9fb 	bl	8010f4c <memcpy1>
            itr += curElement->PayloadSize;
 800eb56:	68a3      	ldr	r3, [r4, #8]
 800eb58:	441d      	add	r5, r3
 800eb5a:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800eb5c:	6824      	ldr	r4, [r4, #0]
    while( curElement != NULL )
 800eb5e:	2c00      	cmp	r4, #0
 800eb60:	d1eb      	bne.n	800eb3a <LoRaMacCommandsSerializeCmds+0x1c>
 800eb62:	e005      	b.n	800eb70 <LoRaMacCommandsSerializeCmds+0x52>

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800eb64:	4620      	mov	r0, r4
 800eb66:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800eb68:	f7ff ff3a 	bl	800e9e0 <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 800eb6c:	2c00      	cmp	r4, #0
 800eb6e:	d1f9      	bne.n	800eb64 <LoRaMacCommandsSerializeCmds+0x46>
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800eb70:	4640      	mov	r0, r8
 800eb72:	f7ff ffc8 	bl	800eb06 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800eb76:	2000      	movs	r0, #0
}
 800eb78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800eb7c:	2001      	movs	r0, #1
}
 800eb7e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800eb80:	2001      	movs	r0, #1
 800eb82:	e7f9      	b.n	800eb78 <LoRaMacCommandsSerializeCmds+0x5a>

0800eb84 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800eb84:	1e83      	subs	r3, r0, #2
 800eb86:	2b11      	cmp	r3, #17
 800eb88:	d824      	bhi.n	800ebd4 <LoRaMacCommandsGetCmdSize+0x50>
 800eb8a:	e8df f003 	tbb	[pc, r3]
 800eb8e:	0b09      	.short	0x0b09
 800eb90:	110f240d 	.word	0x110f240d
 800eb94:	23171513 	.word	0x23171513
 800eb98:	23231923 	.word	0x23231923
 800eb9c:	211f1d1b 	.word	0x211f1d1b
 800eba0:	2003      	movs	r0, #3
 800eba2:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800eba4:	2005      	movs	r0, #5
            break;
 800eba6:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800eba8:	2002      	movs	r0, #2
            break;
 800ebaa:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800ebac:	2001      	movs	r0, #1
            break;
 800ebae:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800ebb0:	2006      	movs	r0, #6
            break;
 800ebb2:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800ebb4:	2002      	movs	r0, #2
            break;
 800ebb6:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800ebb8:	2002      	movs	r0, #2
            break;
 800ebba:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800ebbc:	2005      	movs	r0, #5
            break;
 800ebbe:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800ebc0:	2006      	movs	r0, #6
            break;
 800ebc2:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800ebc4:	2001      	movs	r0, #1
            break;
 800ebc6:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800ebc8:	2005      	movs	r0, #5
            break;
 800ebca:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800ebcc:	2004      	movs	r0, #4
            break;
 800ebce:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800ebd0:	2004      	movs	r0, #4
            break;
 800ebd2:	4770      	bx	lr
    uint8_t cidSize = 0;
 800ebd4:	2000      	movs	r0, #0
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800ebd6:	4770      	bx	lr

0800ebd8 <GetElement>:
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800ebd8:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800ebda:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800ebde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ebe2:	f893 4020 	ldrb.w	r4, [r3, #32]
 800ebe6:	b1a4      	cbz	r4, 800ec12 <GetElement+0x3a>
 800ebe8:	2300      	movs	r3, #0
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800ebea:	f241 6ec4 	movw	lr, #5828	; 0x16c4
 800ebee:	f2c2 0e00 	movt	lr, #8192	; 0x2000
 800ebf2:	f10e 0c1c 	add.w	ip, lr, #28
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 800ebf6:	780a      	ldrb	r2, [r1, #0]
 800ebf8:	4282      	cmp	r2, r0
 800ebfa:	d00c      	beq.n	800ec16 <GetElement+0x3e>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800ebfc:	4561      	cmp	r1, ip
        bufferPointer++;
 800ebfe:	bf14      	ite	ne
 800ec00:	3104      	addne	r1, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ec02:	f10e 010c 	addeq.w	r1, lr, #12
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800ec06:	3301      	adds	r3, #1
 800ec08:	b2da      	uxtb	r2, r3
 800ec0a:	4294      	cmp	r4, r2
 800ec0c:	d8f3      	bhi.n	800ebf6 <GetElement+0x1e>
            return element;
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
 800ec0e:	2000      	movs	r0, #0
 800ec10:	e002      	b.n	800ec18 <GetElement+0x40>
        return NULL;
 800ec12:	2000      	movs	r0, #0
 800ec14:	e000      	b.n	800ec18 <GetElement+0x40>
 800ec16:	4608      	mov	r0, r1
}
 800ec18:	bd10      	pop	{r4, pc}

0800ec1a <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800ec1a:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800ec1c:	f241 64c4 	movw	r4, #5828	; 0x16c4
 800ec20:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800ec24:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800ec26:	2300      	movs	r3, #0
 800ec28:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ec2c:	f104 000c 	add.w	r0, r4, #12
 800ec30:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ec32:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800ec34:	2214      	movs	r2, #20
 800ec36:	21ff      	movs	r1, #255	; 0xff
 800ec38:	f002 f9a2 	bl	8010f80 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800ec42:	bd10      	pop	{r4, pc}

0800ec44 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800ec44:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800ec48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ec4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ec50:	2b04      	cmp	r3, #4
 800ec52:	d825      	bhi.n	800eca0 <LoRaMacConfirmQueueAdd+0x5c>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800ec54:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800ec58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ec5c:	689a      	ldr	r2, [r3, #8]
 800ec5e:	7801      	ldrb	r1, [r0, #0]
 800ec60:	7011      	strb	r1, [r2, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800ec62:	689a      	ldr	r2, [r3, #8]
 800ec64:	7841      	ldrb	r1, [r0, #1]
 800ec66:	7051      	strb	r1, [r2, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800ec68:	689a      	ldr	r2, [r3, #8]
 800ec6a:	78c1      	ldrb	r1, [r0, #3]
 800ec6c:	70d1      	strb	r1, [r2, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800ec6e:	689a      	ldr	r2, [r3, #8]
 800ec70:	2100      	movs	r1, #0
 800ec72:	7091      	strb	r1, [r2, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800ec74:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ec78:	3201      	adds	r2, #1
 800ec7a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800ec7e:	689a      	ldr	r2, [r3, #8]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800ec80:	331c      	adds	r3, #28
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d007      	beq.n	800ec96 <LoRaMacConfirmQueueAdd+0x52>
        bufferPointer++;
 800ec86:	3204      	adds	r2, #4
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800ec88:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800ec8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ec90:	609a      	str	r2, [r3, #8]

    return true;
 800ec92:	2001      	movs	r0, #1
 800ec94:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ec96:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800ec9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800ec9e:	e7f3      	b.n	800ec88 <LoRaMacConfirmQueueAdd+0x44>
        return false;
 800eca0:	2000      	movs	r0, #0
}
 800eca2:	4770      	bx	lr

0800eca4 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800eca4:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800eca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ecac:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ecb0:	b1ba      	cbz	r2, 800ece2 <LoRaMacConfirmQueueRemoveFirst+0x3e>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800ecb2:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800ecb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ecba:	3a01      	subs	r2, #1
 800ecbc:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800ecc0:	685a      	ldr	r2, [r3, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800ecc2:	331c      	adds	r3, #28
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d007      	beq.n	800ecd8 <LoRaMacConfirmQueueRemoveFirst+0x34>
        bufferPointer++;
 800ecc8:	3204      	adds	r2, #4
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800ecca:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800ecce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ecd2:	605a      	str	r2, [r3, #4]

    return true;
 800ecd4:	2001      	movs	r0, #1
 800ecd6:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ecd8:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800ecdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800ece0:	e7f3      	b.n	800ecca <LoRaMacConfirmQueueRemoveFirst+0x26>
        return false;
 800ece2:	2000      	movs	r0, #0
}
 800ece4:	4770      	bx	lr

0800ece6 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800ece6:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800ecea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ecee:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ecf2:	b17b      	cbz	r3, 800ed14 <LoRaMacConfirmQueueSetStatus+0x2e>
{
 800ecf4:	b510      	push	{r4, lr}
 800ecf6:	4604      	mov	r4, r0
 800ecf8:	4608      	mov	r0, r1
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800ecfa:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800ecfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed02:	689a      	ldr	r2, [r3, #8]
 800ed04:	6859      	ldr	r1, [r3, #4]
 800ed06:	f7ff ff67 	bl	800ebd8 <GetElement>
        if( element != NULL )
 800ed0a:	b110      	cbz	r0, 800ed12 <LoRaMacConfirmQueueSetStatus+0x2c>
        {
            element->Status = status;
 800ed0c:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800ed0e:	2201      	movs	r2, #1
 800ed10:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800ed12:	bd10      	pop	{r4, pc}
 800ed14:	4770      	bx	lr

0800ed16 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800ed16:	b508      	push	{r3, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800ed18:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800ed1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed20:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ed24:	b153      	cbz	r3, 800ed3c <LoRaMacConfirmQueueGetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800ed26:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800ed2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed2e:	689a      	ldr	r2, [r3, #8]
 800ed30:	6859      	ldr	r1, [r3, #4]
 800ed32:	f7ff ff51 	bl	800ebd8 <GetElement>
        if( element != NULL )
 800ed36:	b118      	cbz	r0, 800ed40 <LoRaMacConfirmQueueGetStatus+0x2a>
        {
            return element->Status;
 800ed38:	7840      	ldrb	r0, [r0, #1]
 800ed3a:	e000      	b.n	800ed3e <LoRaMacConfirmQueueGetStatus+0x28>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ed3c:	2001      	movs	r0, #1
}
 800ed3e:	bd08      	pop	{r3, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ed40:	2001      	movs	r0, #1
 800ed42:	e7fc      	b.n	800ed3e <LoRaMacConfirmQueueGetStatus+0x28>

0800ed44 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800ed44:	f241 62c4 	movw	r2, #5828	; 0x16c4
 800ed48:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800ed4c:	6853      	ldr	r3, [r2, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800ed4e:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800ed52:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ed56:	b1d2      	cbz	r2, 800ed8e <LoRaMacConfirmQueueSetStatusCmn+0x4a>
{
 800ed58:	b500      	push	{lr}
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 800ed5a:	f04f 0e01 	mov.w	lr, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800ed5e:	f241 61c4 	movw	r1, #5828	; 0x16c4
 800ed62:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ed66:	f101 0c1c 	add.w	ip, r1, #28
 800ed6a:	e007      	b.n	800ed7c <LoRaMacConfirmQueueSetStatusCmn+0x38>
 800ed6c:	4563      	cmp	r3, ip
        bufferPointer++;
 800ed6e:	bf14      	ite	ne
 800ed70:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ed72:	f101 030c 	addeq.w	r3, r1, #12
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800ed76:	688a      	ldr	r2, [r1, #8]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d006      	beq.n	800ed8a <LoRaMacConfirmQueueSetStatusCmn+0x46>
            element->Status = status;
 800ed7c:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800ed7e:	78da      	ldrb	r2, [r3, #3]
 800ed80:	2a00      	cmp	r2, #0
 800ed82:	d1f3      	bne.n	800ed6c <LoRaMacConfirmQueueSetStatusCmn+0x28>
                element->ReadyToHandle = true;
 800ed84:	f883 e002 	strb.w	lr, [r3, #2]
 800ed88:	e7f0      	b.n	800ed6c <LoRaMacConfirmQueueSetStatusCmn+0x28>
    }
}
 800ed8a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800ed90:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800ed92:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800ed96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed9a:	689a      	ldr	r2, [r3, #8]
 800ed9c:	6859      	ldr	r1, [r3, #4]
 800ed9e:	f7ff ff1b 	bl	800ebd8 <GetElement>
    {
        return true;
    }
    return false;
}
 800eda2:	3800      	subs	r0, #0
 800eda4:	bf18      	it	ne
 800eda6:	2001      	movne	r0, #1
 800eda8:	bd08      	pop	{r3, pc}

0800edaa <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800edaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edac:	b083      	sub	sp, #12
 800edae:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800edb0:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800edb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800edb8:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800edbc:	2204      	movs	r2, #4
 800edbe:	2100      	movs	r1, #0
 800edc0:	eb0d 0002 	add.w	r0, sp, r2
 800edc4:	f002 f8dc 	bl	8010f80 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800edc8:	b347      	cbz	r7, 800ee1c <LoRaMacConfirmQueueHandleCb+0x72>
 800edca:	2500      	movs	r5, #0
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800edcc:	f241 64c4 	movw	r4, #5828	; 0x16c4
 800edd0:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800edd4:	e011      	b.n	800edfa <LoRaMacConfirmQueueHandleCb+0x50>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800edd6:	781a      	ldrb	r2, [r3, #0]
 800edd8:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800eddc:	785a      	ldrb	r2, [r3, #1]
 800edde:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800ede2:	78db      	ldrb	r3, [r3, #3]
 800ede4:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800ede8:	f7ff ff5c 	bl	800eca4 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800edec:	a801      	add	r0, sp, #4
 800edee:	f7ff ff29 	bl	800ec44 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800edf2:	3501      	adds	r5, #1
 800edf4:	b2eb      	uxtb	r3, r5
 800edf6:	429f      	cmp	r7, r3
 800edf8:	d910      	bls.n	800ee1c <LoRaMacConfirmQueueHandleCb+0x72>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800edfa:	6863      	ldr	r3, [r4, #4]
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	7033      	strb	r3, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800ee00:	6863      	ldr	r3, [r4, #4]
 800ee02:	785b      	ldrb	r3, [r3, #1]
 800ee04:	7073      	strb	r3, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800ee06:	6863      	ldr	r3, [r4, #4]
        if( readyToHandle == true )
 800ee08:	789a      	ldrb	r2, [r3, #2]
 800ee0a:	2a00      	cmp	r2, #0
 800ee0c:	d0e3      	beq.n	800edd6 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800ee0e:	6823      	ldr	r3, [r4, #0]
 800ee10:	689b      	ldr	r3, [r3, #8]
 800ee12:	4630      	mov	r0, r6
 800ee14:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800ee16:	f7ff ff45 	bl	800eca4 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 800ee1a:	e7ea      	b.n	800edf2 <LoRaMacConfirmQueueHandleCb+0x48>
        }
    }
}
 800ee1c:	b003      	add	sp, #12
 800ee1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ee20 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800ee20:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800ee24:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 800ee28:	f893 0020 	ldrb.w	r0, [r3, #32]
 800ee2c:	4770      	bx	lr

0800ee2e <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800ee2e:	f241 63c4 	movw	r3, #5828	; 0x16c4
 800ee32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800ee36:	f893 0020 	ldrb.w	r0, [r3, #32]
    }
    else
    {
        return false;
    }
}
 800ee3a:	2804      	cmp	r0, #4
 800ee3c:	bf94      	ite	ls
 800ee3e:	2000      	movls	r0, #0
 800ee40:	2001      	movhi	r0, #1
 800ee42:	4770      	bx	lr

0800ee44 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800ee44:	2900      	cmp	r1, #0
 800ee46:	d02a      	beq.n	800ee9e <GetLastFcntDown+0x5a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800ee48:	3801      	subs	r0, #1
 800ee4a:	2803      	cmp	r0, #3
 800ee4c:	d829      	bhi.n	800eea2 <GetLastFcntDown+0x5e>
 800ee4e:	e8df f000 	tbb	[pc, r0]
 800ee52:	0b02      	.short	0x0b02
 800ee54:	1d14      	.short	0x1d14
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800ee56:	f241 62e8 	movw	r2, #5864	; 0x16e8
 800ee5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800ee5e:	6812      	ldr	r2, [r2, #0]
 800ee60:	6912      	ldr	r2, [r2, #16]
 800ee62:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800ee64:	2000      	movs	r0, #0
            break;
 800ee66:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800ee68:	f241 62e8 	movw	r2, #5864	; 0x16e8
 800ee6c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800ee70:	6812      	ldr	r2, [r2, #0]
 800ee72:	6952      	ldr	r2, [r2, #20]
 800ee74:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800ee76:	2000      	movs	r0, #0
            break;
 800ee78:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800ee7a:	f241 62e8 	movw	r2, #5864	; 0x16e8
 800ee7e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800ee82:	6812      	ldr	r2, [r2, #0]
 800ee84:	6992      	ldr	r2, [r2, #24]
 800ee86:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800ee88:	2000      	movs	r0, #0
            break;
 800ee8a:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800ee8c:	f241 62e8 	movw	r2, #5864	; 0x16e8
 800ee90:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800ee94:	6812      	ldr	r2, [r2, #0]
 800ee96:	69d2      	ldr	r2, [r2, #28]
 800ee98:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800ee9a:	2000      	movs	r0, #0
            break;
 800ee9c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ee9e:	200a      	movs	r0, #10
 800eea0:	4770      	bx	lr
    switch( fCntID )
 800eea2:	2005      	movs	r0, #5
}
 800eea4:	4770      	bx	lr

0800eea6 <DeriveSessionKey10x>:
{
 800eea6:	b510      	push	{r4, lr}
 800eea8:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800eeaa:	2400      	movs	r4, #0
 800eeac:	9402      	str	r4, [sp, #8]
 800eeae:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800eeb0:	2808      	cmp	r0, #8
 800eeb2:	d023      	beq.n	800eefc <DeriveSessionKey10x+0x56>
 800eeb4:	2809      	cmp	r0, #9
 800eeb6:	d123      	bne.n	800ef00 <DeriveSessionKey10x+0x5a>
 800eeb8:	2402      	movs	r4, #2
            compBase[0] = 0x01;
 800eeba:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800eebe:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800eec2:	0a0c      	lsrs	r4, r1, #8
 800eec4:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800eec8:	0c09      	lsrs	r1, r1, #16
 800eeca:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800eece:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800eed2:	0a11      	lsrs	r1, r2, #8
 800eed4:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800eed8:	0c12      	lsrs	r2, r2, #16
 800eeda:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800eede:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800eee2:	0a1b      	lsrs	r3, r3, #8
 800eee4:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800eee8:	4602      	mov	r2, r0
 800eeea:	2101      	movs	r1, #1
 800eeec:	4668      	mov	r0, sp
 800eeee:	f7fa ff2b 	bl	8009d48 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800eef2:	2800      	cmp	r0, #0
 800eef4:	bf18      	it	ne
 800eef6:	200f      	movne	r0, #15
}
 800eef8:	b004      	add	sp, #16
 800eefa:	bd10      	pop	{r4, pc}
    switch( keyID )
 800eefc:	2401      	movs	r4, #1
 800eefe:	e7dc      	b.n	800eeba <DeriveSessionKey10x+0x14>
 800ef00:	200b      	movs	r0, #11
 800ef02:	e7f9      	b.n	800eef8 <DeriveSessionKey10x+0x52>

0800ef04 <PayloadEncrypt>:
{
 800ef04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef08:	b089      	sub	sp, #36	; 0x24
 800ef0a:	460e      	mov	r6, r1
 800ef0c:	9911      	ldr	r1, [sp, #68]	; 0x44
    if( buffer == 0 )
 800ef0e:	2800      	cmp	r0, #0
 800ef10:	d05a      	beq.n	800efc8 <PayloadEncrypt+0xc4>
 800ef12:	4690      	mov	r8, r2
 800ef14:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800ef16:	2200      	movs	r2, #0
 800ef18:	9204      	str	r2, [sp, #16]
 800ef1a:	9205      	str	r2, [sp, #20]
 800ef1c:	9206      	str	r2, [sp, #24]
 800ef1e:	9207      	str	r2, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800ef20:	9200      	str	r2, [sp, #0]
 800ef22:	9201      	str	r2, [sp, #4]
 800ef24:	9203      	str	r2, [sp, #12]
    aBlock[0] = 0x01;
 800ef26:	2201      	movs	r2, #1
 800ef28:	f88d 2000 	strb.w	r2, [sp]
    aBlock[5] = dir;
 800ef2c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800ef30:	f88d 2005 	strb.w	r2, [sp, #5]
    aBlock[6] = address & 0xFF;
 800ef34:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800ef38:	0a1a      	lsrs	r2, r3, #8
 800ef3a:	f88d 2007 	strb.w	r2, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800ef3e:	0c1a      	lsrs	r2, r3, #16
 800ef40:	f88d 2008 	strb.w	r2, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800ef44:	0e1b      	lsrs	r3, r3, #24
 800ef46:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800ef4a:	f88d 100a 	strb.w	r1, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800ef4e:	0a0b      	lsrs	r3, r1, #8
 800ef50:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800ef54:	0c0b      	lsrs	r3, r1, #16
 800ef56:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800ef5a:	0e09      	lsrs	r1, r1, #24
 800ef5c:	f88d 100d 	strb.w	r1, [sp, #13]
    while( size > 0 )
 800ef60:	2e00      	cmp	r6, #0
 800ef62:	dd34      	ble.n	800efce <PayloadEncrypt+0xca>
 800ef64:	2700      	movs	r7, #0
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800ef66:	f04f 0910 	mov.w	r9, #16
 800ef6a:	e004      	b.n	800ef76 <PayloadEncrypt+0x72>
        size -= 16;
 800ef6c:	3e10      	subs	r6, #16
 800ef6e:	b236      	sxth	r6, r6
    while( size > 0 )
 800ef70:	3701      	adds	r7, #1
 800ef72:	2e00      	cmp	r6, #0
 800ef74:	dd30      	ble.n	800efd8 <PayloadEncrypt+0xd4>
 800ef76:	b2fb      	uxtb	r3, r7
 800ef78:	011d      	lsls	r5, r3, #4
 800ef7a:	b2ed      	uxtb	r5, r5
        aBlock[15] = ctr & 0xFF;
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	f88d 300f 	strb.w	r3, [sp, #15]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800ef82:	ab04      	add	r3, sp, #16
 800ef84:	4642      	mov	r2, r8
 800ef86:	4649      	mov	r1, r9
 800ef88:	4668      	mov	r0, sp
 800ef8a:	f7fa fe5e 	bl	8009c4a <SecureElementAesEncrypt>
 800ef8e:	4686      	mov	lr, r0
 800ef90:	bb00      	cbnz	r0, 800efd4 <PayloadEncrypt+0xd0>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800ef92:	4631      	mov	r1, r6
 800ef94:	2e10      	cmp	r6, #16
 800ef96:	bfa8      	it	ge
 800ef98:	2110      	movge	r1, #16
 800ef9a:	2900      	cmp	r1, #0
 800ef9c:	dde6      	ble.n	800ef6c <PayloadEncrypt+0x68>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	f04f 0c00 	mov.w	ip, #0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800efa4:	eb05 000c 	add.w	r0, r5, ip
 800efa8:	f10c 0220 	add.w	r2, ip, #32
 800efac:	eb0d 0c02 	add.w	ip, sp, r2
 800efb0:	5c22      	ldrb	r2, [r4, r0]
 800efb2:	f81c cc10 	ldrb.w	ip, [ip, #-16]
 800efb6:	ea82 020c 	eor.w	r2, r2, ip
 800efba:	5422      	strb	r2, [r4, r0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800efbc:	3301      	adds	r3, #1
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	469c      	mov	ip, r3
 800efc2:	428b      	cmp	r3, r1
 800efc4:	dbee      	blt.n	800efa4 <PayloadEncrypt+0xa0>
 800efc6:	e7d1      	b.n	800ef6c <PayloadEncrypt+0x68>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800efc8:	f04f 0e0a 	mov.w	lr, #10
 800efcc:	e004      	b.n	800efd8 <PayloadEncrypt+0xd4>
    return LORAMAC_CRYPTO_SUCCESS;
 800efce:	f04f 0e00 	mov.w	lr, #0
 800efd2:	e001      	b.n	800efd8 <PayloadEncrypt+0xd4>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800efd4:	f04f 0e0f 	mov.w	lr, #15
}
 800efd8:	4670      	mov	r0, lr
 800efda:	b009      	add	sp, #36	; 0x24
 800efdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800efe0 <VerifyCmacB0>:
{
 800efe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efe4:	b0c4      	sub	sp, #272	; 0x110
 800efe6:	9e4b      	ldr	r6, [sp, #300]	; 0x12c
 800efe8:	9d4c      	ldr	r5, [sp, #304]	; 0x130
    if( msg == 0 )
 800efea:	2800      	cmp	r0, #0
 800efec:	d048      	beq.n	800f080 <VerifyCmacB0+0xa0>
 800efee:	460c      	mov	r4, r1
 800eff0:	4617      	mov	r7, r2
 800eff2:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800eff4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800eff8:	d844      	bhi.n	800f084 <VerifyCmacB0+0xa4>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800effa:	f44f 7288 	mov.w	r2, #272	; 0x110
 800effe:	2100      	movs	r1, #0
 800f000:	4668      	mov	r0, sp
 800f002:	f001 ffbd 	bl	8010f80 <memset1>
    b0[0] = 0x49;
 800f006:	2349      	movs	r3, #73	; 0x49
 800f008:	f88d 3000 	strb.w	r3, [sp]
        b0[1] = 0x00;
 800f00c:	2300      	movs	r3, #0
 800f00e:	f88d 3001 	strb.w	r3, [sp, #1]
        b0[2] = 0x00;
 800f012:	f88d 3002 	strb.w	r3, [sp, #2]
    b0[3] = 0x00;
 800f016:	f88d 3003 	strb.w	r3, [sp, #3]
    b0[4] = 0x00;
 800f01a:	f88d 3004 	strb.w	r3, [sp, #4]
    b0[5] = dir;
 800f01e:	f89d 2128 	ldrb.w	r2, [sp, #296]	; 0x128
 800f022:	f88d 2005 	strb.w	r2, [sp, #5]
    b0[6] = devAddr & 0xFF;
 800f026:	f88d 6006 	strb.w	r6, [sp, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800f02a:	0a32      	lsrs	r2, r6, #8
 800f02c:	f88d 2007 	strb.w	r2, [sp, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800f030:	0c32      	lsrs	r2, r6, #16
 800f032:	f88d 2008 	strb.w	r2, [sp, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800f036:	0e36      	lsrs	r6, r6, #24
 800f038:	f88d 6009 	strb.w	r6, [sp, #9]
    b0[10] = fCnt & 0xFF;
 800f03c:	f88d 500a 	strb.w	r5, [sp, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800f040:	0a2a      	lsrs	r2, r5, #8
 800f042:	f88d 200b 	strb.w	r2, [sp, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800f046:	0c2a      	lsrs	r2, r5, #16
 800f048:	f88d 200c 	strb.w	r2, [sp, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800f04c:	0e2d      	lsrs	r5, r5, #24
 800f04e:	f88d 500d 	strb.w	r5, [sp, #13]
    b0[14] = 0x00;
 800f052:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[15] = msgLen & 0xFF;
 800f056:	f88d 400f 	strb.w	r4, [sp, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800f05a:	4622      	mov	r2, r4
 800f05c:	4641      	mov	r1, r8
 800f05e:	a804      	add	r0, sp, #16
 800f060:	f001 ff74 	bl	8010f4c <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800f064:	463b      	mov	r3, r7
 800f066:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800f068:	f104 0110 	add.w	r1, r4, #16
 800f06c:	4668      	mov	r0, sp
 800f06e:	f7fa fdd6 	bl	8009c1e <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800f072:	b110      	cbz	r0, 800f07a <VerifyCmacB0+0x9a>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f074:	2801      	cmp	r0, #1
 800f076:	bf18      	it	ne
 800f078:	200f      	movne	r0, #15
}
 800f07a:	b044      	add	sp, #272	; 0x110
 800f07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f080:	200a      	movs	r0, #10
 800f082:	e7fa      	b.n	800f07a <VerifyCmacB0+0x9a>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800f084:	200e      	movs	r0, #14
 800f086:	e7f8      	b.n	800f07a <VerifyCmacB0+0x9a>

0800f088 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800f088:	b1c8      	cbz	r0, 800f0be <LoRaMacCryptoInit+0x36>
{
 800f08a:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800f08c:	f241 64e8 	movw	r4, #5864	; 0x16e8
 800f090:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800f094:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800f096:	2228      	movs	r2, #40	; 0x28
 800f098:	2100      	movs	r1, #0
 800f09a:	f001 ff71 	bl	8010f80 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800f09e:	6823      	ldr	r3, [r4, #0]
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800f0a4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800f0a6:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800f0a8:	2000      	movs	r0, #0
 800f0aa:	7018      	strb	r0, [r3, #0]
    CryptoNvm->FCntList.FCntUp = 0;
 800f0ac:	60d8      	str	r0, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800f0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f0b2:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800f0b4:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800f0b6:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800f0b8:	621a      	str	r2, [r3, #32]
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800f0ba:	61da      	str	r2, [r3, #28]

    // Reset frame counters
    ResetFCnts( );

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f0bc:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800f0be:	2009      	movs	r0, #9
}
 800f0c0:	4770      	bx	lr

0800f0c2 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800f0c2:	f241 63e8 	movw	r3, #5864	; 0x16e8
 800f0c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800f0ce:	2000      	movs	r0, #0
 800f0d0:	4770      	bx	lr

0800f0d2 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800f0d2:	b148      	cbz	r0, 800f0e8 <LoRaMacCryptoGetFCntUp+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800f0d4:	f241 63e8 	movw	r3, #5864	; 0x16e8
 800f0d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	68db      	ldr	r3, [r3, #12]
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800f0e4:	2000      	movs	r0, #0
 800f0e6:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f0e8:	200a      	movs	r0, #10
}
 800f0ea:	4770      	bx	lr

0800f0ec <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800f0ec:	b570      	push	{r4, r5, r6, lr}
 800f0ee:	b082      	sub	sp, #8
 800f0f0:	4614      	mov	r4, r2
    uint32_t lastDown = 0;
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800f0f6:	b363      	cbz	r3, 800f152 <LoRaMacCryptoGetFCntDown+0x66>
 800f0f8:	460d      	mov	r5, r1
 800f0fa:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800f0fc:	a901      	add	r1, sp, #4
 800f0fe:	f7ff fea1 	bl	800ee44 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f102:	b9d0      	cbnz	r0, 800f13a <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 800f104:	9b01      	ldr	r3, [sp, #4]
 800f106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f10a:	d004      	beq.n	800f116 <LoRaMacCryptoGetFCntDown+0x2a>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800f10c:	b29a      	uxth	r2, r3
 800f10e:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800f110:	2a00      	cmp	r2, #0
 800f112:	dd14      	ble.n	800f13e <LoRaMacCryptoGetFCntDown+0x52>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800f114:	189c      	adds	r4, r3, r2
        *currentDown = frameFcnt;
 800f116:	6034      	str	r4, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800f118:	f241 62e8 	movw	r2, #5864	; 0x16e8
 800f11c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800f120:	6812      	ldr	r2, [r2, #0]
 800f122:	7892      	ldrb	r2, [r2, #2]
 800f124:	b94a      	cbnz	r2, 800f13a <LoRaMacCryptoGetFCntDown+0x4e>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800f126:	1ae4      	subs	r4, r4, r3
 800f128:	eb63 0303 	sbc.w	r3, r3, r3
 800f12c:	42ac      	cmp	r4, r5
 800f12e:	f173 0300 	sbcs.w	r3, r3, #0
 800f132:	bfac      	ite	ge
 800f134:	2001      	movge	r0, #1
 800f136:	2000      	movlt	r0, #0
 800f138:	00c0      	lsls	r0, r0, #3
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f13a:	b002      	add	sp, #8
 800f13c:	bd70      	pop	{r4, r5, r6, pc}
        else if( fCntDiff == 0 )
 800f13e:	b12a      	cbz	r2, 800f14c <LoRaMacCryptoGetFCntDown+0x60>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800f140:	0c1a      	lsrs	r2, r3, #16
 800f142:	0412      	lsls	r2, r2, #16
 800f144:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800f148:	4414      	add	r4, r2
 800f14a:	e7e4      	b.n	800f116 <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800f14c:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800f14e:	2007      	movs	r0, #7
 800f150:	e7f3      	b.n	800f13a <LoRaMacCryptoGetFCntDown+0x4e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f152:	200a      	movs	r0, #10
 800f154:	e7f1      	b.n	800f13a <LoRaMacCryptoGetFCntDown+0x4e>

0800f156 <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800f156:	b908      	cbnz	r0, 800f15c <LoRaMacCryptoSetMulticastReference+0x6>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f158:	200a      	movs	r0, #10
 800f15a:	4770      	bx	lr
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800f15c:	f241 62e8 	movw	r2, #5864	; 0x16e8
 800f160:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800f164:	6812      	ldr	r2, [r2, #0]
 800f166:	321c      	adds	r2, #28
 800f168:	6242      	str	r2, [r0, #36]	; 0x24
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800f16a:	2000      	movs	r0, #0
}
 800f16c:	4770      	bx	lr

0800f16e <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800f16e:	b328      	cbz	r0, 800f1bc <LoRaMacCryptoPrepareJoinRequest+0x4e>
{
 800f170:	b510      	push	{r4, lr}
 800f172:	b084      	sub	sp, #16
 800f174:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800f176:	2300      	movs	r3, #0
 800f178:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800f17a:	a803      	add	r0, sp, #12
 800f17c:	f7fa fe43 	bl	8009e06 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800f180:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800f184:	f241 63e8 	movw	r3, #5864	; 0x16e8
 800f188:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800f190:	82e2      	strh	r2, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800f192:	4620      	mov	r0, r4
 800f194:	f000 fab0 	bl	800f6f8 <LoRaMacSerializerJoinRequest>
 800f198:	b990      	cbnz	r0, 800f1c0 <LoRaMacCryptoPrepareJoinRequest+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800f19a:	4623      	mov	r3, r4
 800f19c:	f853 1b18 	ldr.w	r1, [r3], #24
 800f1a0:	9300      	str	r3, [sp, #0]
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	2213      	movs	r2, #19
 800f1a6:	f7fa fd2b 	bl	8009c00 <SecureElementComputeAesCmac>
 800f1aa:	b958      	cbnz	r0, 800f1c4 <LoRaMacCryptoPrepareJoinRequest+0x56>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	f000 faa3 	bl	800f6f8 <LoRaMacSerializerJoinRequest>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800f1b2:	2800      	cmp	r0, #0
 800f1b4:	bf18      	it	ne
 800f1b6:	2011      	movne	r0, #17
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f1b8:	b004      	add	sp, #16
 800f1ba:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f1bc:	200a      	movs	r0, #10
}
 800f1be:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800f1c0:	2011      	movs	r0, #17
 800f1c2:	e7f9      	b.n	800f1b8 <LoRaMacCryptoPrepareJoinRequest+0x4a>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f1c4:	200f      	movs	r0, #15
 800f1c6:	e7f7      	b.n	800f1b8 <LoRaMacCryptoPrepareJoinRequest+0x4a>

0800f1c8 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d06f      	beq.n	800f2ac <LoRaMacCryptoSecureMessage+0xe4>
{
 800f1cc:	b530      	push	{r4, r5, lr}
 800f1ce:	b087      	sub	sp, #28
 800f1d0:	4604      	mov	r4, r0
 800f1d2:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800f1d4:	f241 63e8 	movw	r3, #5864	; 0x16e8
 800f1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	68db      	ldr	r3, [r3, #12]
 800f1e0:	4283      	cmp	r3, r0
 800f1e2:	d865      	bhi.n	800f2b0 <LoRaMacCryptoSecureMessage+0xe8>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800f1e4:	f895 2020 	ldrb.w	r2, [r5, #32]
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800f1e8:	2a00      	cmp	r2, #0
 800f1ea:	bf14      	ite	ne
 800f1ec:	2209      	movne	r2, #9
 800f1ee:	2208      	moveq	r2, #8
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800f1f0:	4283      	cmp	r3, r0
 800f1f2:	d20a      	bcs.n	800f20a <LoRaMacCryptoSecureMessage+0x42>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800f1f4:	9001      	str	r0, [sp, #4]
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	9300      	str	r3, [sp, #0]
 800f1fa:	68ab      	ldr	r3, [r5, #8]
 800f1fc:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800f200:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800f202:	f7ff fe7f 	bl	800ef04 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f206:	2800      	cmp	r0, #0
 800f208:	d155      	bne.n	800f2b6 <LoRaMacCryptoSecureMessage+0xee>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800f20a:	4628      	mov	r0, r5
 800f20c:	f000 faaa 	bl	800f764 <LoRaMacSerializerData>
 800f210:	2800      	cmp	r0, #0
 800f212:	d14f      	bne.n	800f2b4 <LoRaMacCryptoSecureMessage+0xec>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800f214:	6829      	ldr	r1, [r5, #0]
 800f216:	f895 c004 	ldrb.w	ip, [r5, #4]
 800f21a:	f1ac 0204 	sub.w	r2, ip, #4
 800f21e:	b292      	uxth	r2, r2
 800f220:	68ab      	ldr	r3, [r5, #8]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800f222:	2900      	cmp	r1, #0
 800f224:	d04b      	beq.n	800f2be <LoRaMacCryptoSecureMessage+0xf6>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800f226:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800f22a:	d84a      	bhi.n	800f2c2 <LoRaMacCryptoSecureMessage+0xfa>
    b0[0] = 0x49;
 800f22c:	2049      	movs	r0, #73	; 0x49
 800f22e:	f88d 0008 	strb.w	r0, [sp, #8]
        b0[1] = 0x00;
 800f232:	2000      	movs	r0, #0
 800f234:	f88d 0009 	strb.w	r0, [sp, #9]
        b0[2] = 0x00;
 800f238:	f88d 000a 	strb.w	r0, [sp, #10]
    b0[3] = 0x00;
 800f23c:	f88d 000b 	strb.w	r0, [sp, #11]
    b0[4] = 0x00;
 800f240:	f88d 000c 	strb.w	r0, [sp, #12]
    b0[5] = dir;
 800f244:	f88d 000d 	strb.w	r0, [sp, #13]
    b0[6] = devAddr & 0xFF;
 800f248:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800f24c:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 800f250:	f88d e00f 	strb.w	lr, [sp, #15]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800f254:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f258:	f88d e010 	strb.w	lr, [sp, #16]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800f25c:	0e1b      	lsrs	r3, r3, #24
 800f25e:	f88d 3011 	strb.w	r3, [sp, #17]
    b0[10] = fCnt & 0xFF;
 800f262:	f88d 4012 	strb.w	r4, [sp, #18]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800f266:	0a23      	lsrs	r3, r4, #8
 800f268:	f88d 3013 	strb.w	r3, [sp, #19]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800f26c:	0c23      	lsrs	r3, r4, #16
 800f26e:	f88d 3014 	strb.w	r3, [sp, #20]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800f272:	0e23      	lsrs	r3, r4, #24
 800f274:	f88d 3015 	strb.w	r3, [sp, #21]
    b0[14] = 0x00;
 800f278:	f88d 0016 	strb.w	r0, [sp, #22]
    b0[15] = msgLen & 0xFF;
 800f27c:	f1ac 0c04 	sub.w	ip, ip, #4
 800f280:	f88d c017 	strb.w	ip, [sp, #23]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800f284:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800f288:	9300      	str	r3, [sp, #0]
 800f28a:	2308      	movs	r3, #8
 800f28c:	eb0d 0003 	add.w	r0, sp, r3
 800f290:	f7fa fcb6 	bl	8009c00 <SecureElementComputeAesCmac>
 800f294:	b9b8      	cbnz	r0, 800f2c6 <LoRaMacCryptoSecureMessage+0xfe>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800f296:	4628      	mov	r0, r5
 800f298:	f000 fa64 	bl	800f764 <LoRaMacSerializerData>
 800f29c:	b968      	cbnz	r0, 800f2ba <LoRaMacCryptoSecureMessage+0xf2>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800f29e:	f241 63e8 	movw	r3, #5864	; 0x16e8
 800f2a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800f2aa:	e004      	b.n	800f2b6 <LoRaMacCryptoSecureMessage+0xee>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f2ac:	200a      	movs	r0, #10
}
 800f2ae:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800f2b0:	2006      	movs	r0, #6
 800f2b2:	e000      	b.n	800f2b6 <LoRaMacCryptoSecureMessage+0xee>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800f2b4:	2011      	movs	r0, #17
}
 800f2b6:	b007      	add	sp, #28
 800f2b8:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800f2ba:	2011      	movs	r0, #17
 800f2bc:	e7fb      	b.n	800f2b6 <LoRaMacCryptoSecureMessage+0xee>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f2be:	200a      	movs	r0, #10
 800f2c0:	e7f9      	b.n	800f2b6 <LoRaMacCryptoSecureMessage+0xee>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800f2c2:	200e      	movs	r0, #14
 800f2c4:	e7f7      	b.n	800f2b6 <LoRaMacCryptoSecureMessage+0xee>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f2c6:	200f      	movs	r0, #15
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f2c8:	e7f5      	b.n	800f2b6 <LoRaMacCryptoSecureMessage+0xee>

0800f2ca <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800f2ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ce:	b086      	sub	sp, #24
 800f2d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if( macMsg == 0 )
 800f2d2:	2c00      	cmp	r4, #0
 800f2d4:	f000 808d 	beq.w	800f3f2 <LoRaMacCryptoUnsecureMessage+0x128>
 800f2d8:	4607      	mov	r7, r0
 800f2da:	4688      	mov	r8, r1
 800f2dc:	4616      	mov	r6, r2
 800f2de:	461d      	mov	r5, r3
    uint32_t lastDown = 0;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800f2e4:	a905      	add	r1, sp, #20
 800f2e6:	4610      	mov	r0, r2
 800f2e8:	f7ff fdac 	bl	800ee44 <GetLastFcntDown>
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	f040 8088 	bne.w	800f402 <LoRaMacCryptoUnsecureMessage+0x138>
    if( ( currentDown > lastDown ) ||
 800f2f2:	9b05      	ldr	r3, [sp, #20]
 800f2f4:	429d      	cmp	r5, r3
 800f2f6:	d802      	bhi.n	800f2fe <LoRaMacCryptoUnsecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800f2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2fc:	d17b      	bne.n	800f3f6 <LoRaMacCryptoUnsecureMessage+0x12c>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800f2fe:	4620      	mov	r0, r4
 800f300:	f000 f99c 	bl	800f63c <LoRaMacParserData>
 800f304:	2800      	cmp	r0, #0
 800f306:	d178      	bne.n	800f3fa <LoRaMacCryptoUnsecureMessage+0x130>
        if( KeyAddrList[i].AddrID == addrID )
 800f308:	f240 1304 	movw	r3, #260	; 0x104
 800f30c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	42bb      	cmp	r3, r7
 800f314:	d00c      	beq.n	800f330 <LoRaMacCryptoUnsecureMessage+0x66>
 800f316:	f240 1304 	movw	r3, #260	; 0x104
 800f31a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f31e:	791b      	ldrb	r3, [r3, #4]
 800f320:	42bb      	cmp	r3, r7
 800f322:	bf08      	it	eq
 800f324:	2101      	moveq	r1, #1
 800f326:	d004      	beq.n	800f332 <LoRaMacCryptoUnsecureMessage+0x68>
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800f328:	200c      	movs	r0, #12
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f32a:	b006      	add	sp, #24
 800f32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( KeyAddrList[i].AddrID == addrID )
 800f330:	2100      	movs	r1, #0
    if( address != macMsg->FHDR.DevAddr )
 800f332:	68a3      	ldr	r3, [r4, #8]
 800f334:	4543      	cmp	r3, r8
 800f336:	d162      	bne.n	800f3fe <LoRaMacCryptoUnsecureMessage+0x134>
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800f338:	7b23      	ldrb	r3, [r4, #12]
 800f33a:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800f33e:	f241 62e8 	movw	r2, #5864	; 0x16e8
 800f342:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800f346:	6812      	ldr	r2, [r2, #0]
 800f348:	7892      	ldrb	r2, [r2, #2]
        isAck = false;
 800f34a:	2a00      	cmp	r2, #0
    payloadDecryptionKeyID = curItem->AppSkey;
 800f34c:	f240 1204 	movw	r2, #260	; 0x104
 800f350:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800f354:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f358:	7857      	ldrb	r7, [r2, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800f35a:	7921      	ldrb	r1, [r4, #4]
 800f35c:	f1a1 0104 	sub.w	r1, r1, #4
 800f360:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f362:	9003      	str	r0, [sp, #12]
 800f364:	9502      	str	r5, [sp, #8]
 800f366:	f8cd 8004 	str.w	r8, [sp, #4]
 800f36a:	f04f 0001 	mov.w	r0, #1
 800f36e:	9000      	str	r0, [sp, #0]
 800f370:	bf08      	it	eq
 800f372:	2300      	moveq	r3, #0
 800f374:	7892      	ldrb	r2, [r2, #2]
 800f376:	b289      	uxth	r1, r1
 800f378:	6820      	ldr	r0, [r4, #0]
 800f37a:	f7ff fe31 	bl	800efe0 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f37e:	2800      	cmp	r0, #0
 800f380:	d1d3      	bne.n	800f32a <LoRaMacCryptoUnsecureMessage+0x60>
    if( macMsg->FPort == 0 )
 800f382:	f894 3020 	ldrb.w	r3, [r4, #32]
        payloadDecryptionKeyID = NWK_S_KEY;
 800f386:	2b00      	cmp	r3, #0
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800f388:	9501      	str	r5, [sp, #4]
 800f38a:	f04f 0301 	mov.w	r3, #1
 800f38e:	9300      	str	r3, [sp, #0]
 800f390:	4643      	mov	r3, r8
 800f392:	bf14      	ite	ne
 800f394:	463a      	movne	r2, r7
 800f396:	2208      	moveq	r2, #8
 800f398:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800f39c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f39e:	f7ff fdb1 	bl	800ef04 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f3a2:	2800      	cmp	r0, #0
 800f3a4:	d1c1      	bne.n	800f32a <LoRaMacCryptoUnsecureMessage+0x60>
    switch( fCntID )
 800f3a6:	1e72      	subs	r2, r6, #1
 800f3a8:	2a03      	cmp	r2, #3
 800f3aa:	d8be      	bhi.n	800f32a <LoRaMacCryptoUnsecureMessage+0x60>
 800f3ac:	e8df f002 	tbb	[pc, r2]
 800f3b0:	1a120a02 	.word	0x1a120a02
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800f3b4:	f241 63e8 	movw	r3, #5864	; 0x16e8
 800f3b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	611d      	str	r5, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800f3c0:	621d      	str	r5, [r3, #32]
            break;
 800f3c2:	e7b2      	b.n	800f32a <LoRaMacCryptoUnsecureMessage+0x60>
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800f3c4:	f241 63e8 	movw	r3, #5864	; 0x16e8
 800f3c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	615d      	str	r5, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800f3d0:	621d      	str	r5, [r3, #32]
            break;
 800f3d2:	e7aa      	b.n	800f32a <LoRaMacCryptoUnsecureMessage+0x60>
            CryptoNvm->FCntList.FCntDown = currentDown;
 800f3d4:	f241 63e8 	movw	r3, #5864	; 0x16e8
 800f3d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	619d      	str	r5, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800f3e0:	621d      	str	r5, [r3, #32]
            break;
 800f3e2:	e7a2      	b.n	800f32a <LoRaMacCryptoUnsecureMessage+0x60>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800f3e4:	f241 63e8 	movw	r3, #5864	; 0x16e8
 800f3e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	61dd      	str	r5, [r3, #28]
            break;
 800f3f0:	e79b      	b.n	800f32a <LoRaMacCryptoUnsecureMessage+0x60>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f3f2:	200a      	movs	r0, #10
 800f3f4:	e799      	b.n	800f32a <LoRaMacCryptoUnsecureMessage+0x60>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800f3f6:	2006      	movs	r0, #6
 800f3f8:	e797      	b.n	800f32a <LoRaMacCryptoUnsecureMessage+0x60>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800f3fa:	2010      	movs	r0, #16
 800f3fc:	e795      	b.n	800f32a <LoRaMacCryptoUnsecureMessage+0x60>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800f3fe:	2002      	movs	r0, #2
 800f400:	e793      	b.n	800f32a <LoRaMacCryptoUnsecureMessage+0x60>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800f402:	2006      	movs	r0, #6
 800f404:	e791      	b.n	800f32a <LoRaMacCryptoUnsecureMessage+0x60>

0800f406 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800f406:	b500      	push	{lr}
 800f408:	b085      	sub	sp, #20
 800f40a:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 800f40c:	2300      	movs	r3, #0
 800f40e:	9300      	str	r3, [sp, #0]
 800f410:	9301      	str	r3, [sp, #4]
 800f412:	9302      	str	r3, [sp, #8]
 800f414:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 800f416:	290b      	cmp	r1, #11
 800f418:	d005      	beq.n	800f426 <LoRaMacCryptoDeriveLifeTimeKey+0x20>
 800f41a:	290c      	cmp	r1, #12
 800f41c:	d011      	beq.n	800f442 <LoRaMacCryptoDeriveLifeTimeKey+0x3c>
 800f41e:	290a      	cmp	r1, #10
 800f420:	d00a      	beq.n	800f438 <LoRaMacCryptoDeriveLifeTimeKey+0x32>
 800f422:	200b      	movs	r0, #11
 800f424:	e014      	b.n	800f450 <LoRaMacCryptoDeriveLifeTimeKey+0x4a>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 800f426:	2801      	cmp	r0, #1
 800f428:	d001      	beq.n	800f42e <LoRaMacCryptoDeriveLifeTimeKey+0x28>
    KeyIdentifier_t rootKeyId = APP_KEY;
 800f42a:	2100      	movs	r1, #0
 800f42c:	e00a      	b.n	800f444 <LoRaMacCryptoDeriveLifeTimeKey+0x3e>
            {
                compBase[0] = 0x20;
 800f42e:	2320      	movs	r3, #32
 800f430:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800f434:	2100      	movs	r1, #0
 800f436:	e005      	b.n	800f444 <LoRaMacCryptoDeriveLifeTimeKey+0x3e>
            break;
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
            break;
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 800f438:	2330      	movs	r3, #48	; 0x30
 800f43a:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800f43e:	2100      	movs	r1, #0
            break;
 800f440:	e000      	b.n	800f444 <LoRaMacCryptoDeriveLifeTimeKey+0x3e>
    switch( keyID )
 800f442:	210b      	movs	r1, #11
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800f444:	4668      	mov	r0, sp
 800f446:	f7fa fc7f 	bl	8009d48 <SecureElementDeriveAndStoreKey>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f44a:	2800      	cmp	r0, #0
 800f44c:	bf18      	it	ne
 800f44e:	200f      	movne	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f450:	b005      	add	sp, #20
 800f452:	f85d fb04 	ldr.w	pc, [sp], #4

0800f456 <LoRaMacCryptoSetKey>:
{
 800f456:	b510      	push	{r4, lr}
 800f458:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800f45a:	f7fa fc36 	bl	8009cca <SecureElementSetKey>
 800f45e:	b9b0      	cbnz	r0, 800f48e <LoRaMacCryptoSetKey+0x38>
    if( keyID == APP_KEY )
 800f460:	b104      	cbz	r4, 800f464 <LoRaMacCryptoSetKey+0xe>
}
 800f462:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800f464:	f241 63e8 	movw	r3, #5864	; 0x16e8
 800f468:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	210b      	movs	r1, #11
 800f470:	7898      	ldrb	r0, [r3, #2]
 800f472:	f7ff ffc8 	bl	800f406 <LoRaMacCryptoDeriveLifeTimeKey>
 800f476:	b960      	cbnz	r0, 800f492 <LoRaMacCryptoSetKey+0x3c>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800f478:	210c      	movs	r1, #12
 800f47a:	f7ff ffc4 	bl	800f406 <LoRaMacCryptoDeriveLifeTimeKey>
 800f47e:	b950      	cbnz	r0, 800f496 <LoRaMacCryptoSetKey+0x40>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800f480:	210a      	movs	r1, #10
 800f482:	f7ff ffc0 	bl	800f406 <LoRaMacCryptoDeriveLifeTimeKey>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f486:	2800      	cmp	r0, #0
 800f488:	bf18      	it	ne
 800f48a:	200f      	movne	r0, #15
 800f48c:	e7e9      	b.n	800f462 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f48e:	200f      	movs	r0, #15
 800f490:	e7e7      	b.n	800f462 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f492:	200f      	movs	r0, #15
 800f494:	e7e5      	b.n	800f462 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f496:	200f      	movs	r0, #15
 800f498:	e7e3      	b.n	800f462 <LoRaMacCryptoSetKey+0xc>

0800f49a <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800f49a:	2a00      	cmp	r2, #0
 800f49c:	d073      	beq.n	800f586 <LoRaMacCryptoHandleJoinAccept+0xec>
{
 800f49e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4a0:	b08f      	sub	sp, #60	; 0x3c
 800f4a2:	4607      	mov	r7, r0
 800f4a4:	460d      	mov	r5, r1
 800f4a6:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800f4a8:	2900      	cmp	r1, #0
 800f4aa:	d06e      	beq.n	800f58a <LoRaMacCryptoHandleJoinAccept+0xf0>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800f4ac:	2600      	movs	r6, #0
 800f4ae:	9605      	str	r6, [sp, #20]
 800f4b0:	221d      	movs	r2, #29
 800f4b2:	4631      	mov	r1, r6
 800f4b4:	a806      	add	r0, sp, #24
 800f4b6:	f004 ff97 	bl	80143e8 <memset>
    uint8_t versionMinor         = 0;
 800f4ba:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800f4be:	f241 63e8 	movw	r3, #5864	; 0x16e8
 800f4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800f4ca:	f10d 0313 	add.w	r3, sp, #19
 800f4ce:	9302      	str	r3, [sp, #8]
 800f4d0:	ab05      	add	r3, sp, #20
 800f4d2:	9301      	str	r3, [sp, #4]
 800f4d4:	7923      	ldrb	r3, [r4, #4]
 800f4d6:	9300      	str	r3, [sp, #0]
 800f4d8:	6823      	ldr	r3, [r4, #0]
 800f4da:	4632      	mov	r2, r6
 800f4dc:	4629      	mov	r1, r5
 800f4de:	4638      	mov	r0, r7
 800f4e0:	f7fa fc52 	bl	8009d88 <SecureElementProcessJoinAccept>
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	d152      	bne.n	800f58e <LoRaMacCryptoHandleJoinAccept+0xf4>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800f4e8:	7922      	ldrb	r2, [r4, #4]
 800f4ea:	a905      	add	r1, sp, #20
 800f4ec:	6820      	ldr	r0, [r4, #0]
 800f4ee:	f001 fd2d 	bl	8010f4c <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800f4f2:	4620      	mov	r0, r4
 800f4f4:	f000 f852 	bl	800f59c <LoRaMacParserJoinAccept>
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	d14b      	bne.n	800f594 <LoRaMacCryptoHandleJoinAccept+0xfa>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800f4fc:	79a3      	ldrb	r3, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800f4fe:	79e2      	ldrb	r2, [r4, #7]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800f500:	7a25      	ldrb	r5, [r4, #8]
 800f502:	042d      	lsls	r5, r5, #16
 800f504:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 800f508:	431d      	orrs	r5, r3
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800f50a:	f241 63e8 	movw	r3, #5864	; 0x16e8
 800f50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f512:	681b      	ldr	r3, [r3, #0]
    if( isJoinNonceOk == true )
 800f514:	689a      	ldr	r2, [r3, #8]
 800f516:	4295      	cmp	r5, r2
 800f518:	d93e      	bls.n	800f598 <LoRaMacCryptoHandleJoinAccept+0xfe>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800f51a:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 800f51c:	210b      	movs	r1, #11
 800f51e:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800f522:	f7ff ff70 	bl	800f406 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f526:	bb98      	cbnz	r0, 800f590 <LoRaMacCryptoHandleJoinAccept+0xf6>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 800f528:	210c      	movs	r1, #12
 800f52a:	2000      	movs	r0, #0
 800f52c:	f7ff ff6b 	bl	800f406 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f530:	bb70      	cbnz	r0, 800f590 <LoRaMacCryptoHandleJoinAccept+0xf6>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 800f532:	210a      	movs	r1, #10
 800f534:	2000      	movs	r0, #0
 800f536:	f7ff ff66 	bl	800f406 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f53a:	bb48      	cbnz	r0, 800f590 <LoRaMacCryptoHandleJoinAccept+0xf6>
        netID = ( uint32_t )macMsg->NetID[0];
 800f53c:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800f53e:	7aa2      	ldrb	r2, [r4, #10]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800f540:	7ae4      	ldrb	r4, [r4, #11]
 800f542:	0424      	lsls	r4, r4, #16
 800f544:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800f548:	431c      	orrs	r4, r3
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800f54a:	4633      	mov	r3, r6
 800f54c:	4622      	mov	r2, r4
 800f54e:	4629      	mov	r1, r5
 800f550:	2009      	movs	r0, #9
 800f552:	f7ff fca8 	bl	800eea6 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f556:	b9d8      	cbnz	r0, 800f590 <LoRaMacCryptoHandleJoinAccept+0xf6>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800f558:	4633      	mov	r3, r6
 800f55a:	4622      	mov	r2, r4
 800f55c:	4629      	mov	r1, r5
 800f55e:	2008      	movs	r0, #8
 800f560:	f7ff fca1 	bl	800eea6 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f564:	b9a0      	cbnz	r0, 800f590 <LoRaMacCryptoHandleJoinAccept+0xf6>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800f566:	f241 63e8 	movw	r3, #5864	; 0x16e8
 800f56a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800f574:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800f576:	2200      	movs	r2, #0
 800f578:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800f57a:	f04f 32ff 	mov.w	r2, #4294967295
 800f57e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800f580:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800f582:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800f584:	e004      	b.n	800f590 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f586:	200a      	movs	r0, #10
}
 800f588:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f58a:	200a      	movs	r0, #10
 800f58c:	e000      	b.n	800f590 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f58e:	200f      	movs	r0, #15
}
 800f590:	b00f      	add	sp, #60	; 0x3c
 800f592:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800f594:	2010      	movs	r0, #16
 800f596:	e7fb      	b.n	800f590 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800f598:	2003      	movs	r0, #3
 800f59a:	e7f9      	b.n	800f590 <LoRaMacCryptoHandleJoinAccept+0xf6>

0800f59c <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f59c:	2800      	cmp	r0, #0
 800f59e:	d047      	beq.n	800f630 <LoRaMacParserJoinAccept+0x94>
{
 800f5a0:	b510      	push	{r4, lr}
 800f5a2:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f5a4:	6801      	ldr	r1, [r0, #0]
 800f5a6:	2900      	cmp	r1, #0
 800f5a8:	d044      	beq.n	800f634 <LoRaMacParserJoinAccept+0x98>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800f5aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5ae:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800f5b0:	2203      	movs	r2, #3
 800f5b2:	3006      	adds	r0, #6
 800f5b4:	f001 fcca 	bl	8010f4c <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800f5b8:	4620      	mov	r0, r4
 800f5ba:	f850 1b09 	ldr.w	r1, [r0], #9
 800f5be:	2203      	movs	r2, #3
 800f5c0:	3104      	adds	r1, #4
 800f5c2:	f001 fcc3 	bl	8010f4c <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800f5c6:	6821      	ldr	r1, [r4, #0]
 800f5c8:	79cb      	ldrb	r3, [r1, #7]
 800f5ca:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800f5cc:	7a0a      	ldrb	r2, [r1, #8]
 800f5ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f5d2:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800f5d4:	7a4a      	ldrb	r2, [r1, #9]
 800f5d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f5da:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800f5dc:	7a8a      	ldrb	r2, [r1, #10]
 800f5de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f5e2:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800f5e4:	7acb      	ldrb	r3, [r1, #11]
 800f5e6:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800f5e8:	7b0b      	ldrb	r3, [r1, #12]
 800f5ea:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800f5ec:	7923      	ldrb	r3, [r4, #4]
 800f5ee:	2b21      	cmp	r3, #33	; 0x21
 800f5f0:	d016      	beq.n	800f620 <LoRaMacParserJoinAccept+0x84>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800f5f2:	2b11      	cmp	r3, #17
 800f5f4:	dc20      	bgt.n	800f638 <LoRaMacParserJoinAccept+0x9c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800f5f6:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800f5f8:	6821      	ldr	r1, [r4, #0]
 800f5fa:	5c8b      	ldrb	r3, [r1, r2]
 800f5fc:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800f5fe:	1c50      	adds	r0, r2, #1
 800f600:	5c08      	ldrb	r0, [r1, r0]
 800f602:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800f606:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800f608:	1c90      	adds	r0, r2, #2
 800f60a:	5c08      	ldrb	r0, [r1, r0]
 800f60c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f610:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800f612:	3203      	adds	r2, #3
 800f614:	5c8a      	ldrb	r2, [r1, r2]
 800f616:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f61a:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800f61c:	2000      	movs	r0, #0
}
 800f61e:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800f620:	2210      	movs	r2, #16
 800f622:	310d      	adds	r1, #13
 800f624:	f104 0012 	add.w	r0, r4, #18
 800f628:	f001 fc90 	bl	8010f4c <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800f62c:	221d      	movs	r2, #29
 800f62e:	e7e3      	b.n	800f5f8 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800f630:	2002      	movs	r0, #2
}
 800f632:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800f634:	2002      	movs	r0, #2
 800f636:	e7f2      	b.n	800f61e <LoRaMacParserJoinAccept+0x82>
        return LORAMAC_PARSER_FAIL;
 800f638:	2001      	movs	r0, #1
 800f63a:	e7f0      	b.n	800f61e <LoRaMacParserJoinAccept+0x82>

0800f63c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f63c:	2800      	cmp	r0, #0
 800f63e:	d057      	beq.n	800f6f0 <LoRaMacParserData+0xb4>
{
 800f640:	b510      	push	{r4, lr}
 800f642:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f644:	6801      	ldr	r1, [r0, #0]
 800f646:	2900      	cmp	r1, #0
 800f648:	d054      	beq.n	800f6f4 <LoRaMacParserData+0xb8>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800f64a:	780b      	ldrb	r3, [r1, #0]
 800f64c:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800f64e:	784b      	ldrb	r3, [r1, #1]
 800f650:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800f652:	788a      	ldrb	r2, [r1, #2]
 800f654:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f658:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800f65a:	78ca      	ldrb	r2, [r1, #3]
 800f65c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f660:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800f662:	790a      	ldrb	r2, [r1, #4]
 800f664:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f668:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800f66a:	794b      	ldrb	r3, [r1, #5]
 800f66c:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800f66e:	798b      	ldrb	r3, [r1, #6]
 800f670:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800f672:	79ca      	ldrb	r2, [r1, #7]
 800f674:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f678:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800f67a:	7b02      	ldrb	r2, [r0, #12]
 800f67c:	f002 020f 	and.w	r2, r2, #15
 800f680:	3108      	adds	r1, #8
 800f682:	3010      	adds	r0, #16
 800f684:	f001 fc62 	bl	8010f4c <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800f688:	7b23      	ldrb	r3, [r4, #12]
 800f68a:	f003 030f 	and.w	r3, r3, #15
 800f68e:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800f692:	2200      	movs	r2, #0
 800f694:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800f698:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800f69c:	7922      	ldrb	r2, [r4, #4]
 800f69e:	1a11      	subs	r1, r2, r0
 800f6a0:	2904      	cmp	r1, #4
 800f6a2:	dc16      	bgt.n	800f6d2 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800f6a4:	6822      	ldr	r2, [r4, #0]
 800f6a6:	7923      	ldrb	r3, [r4, #4]
 800f6a8:	441a      	add	r2, r3
 800f6aa:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800f6ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800f6b0:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800f6b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f6b8:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800f6ba:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800f6be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800f6c2:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800f6c4:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800f6c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f6cc:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800f6ce:	2000      	movs	r0, #0
}
 800f6d0:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800f6d2:	6821      	ldr	r1, [r4, #0]
 800f6d4:	3309      	adds	r3, #9
 800f6d6:	5c08      	ldrb	r0, [r1, r0]
 800f6d8:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800f6dc:	3a04      	subs	r2, #4
 800f6de:	1ad2      	subs	r2, r2, r3
 800f6e0:	b2d2      	uxtb	r2, r2
 800f6e2:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800f6e6:	4419      	add	r1, r3
 800f6e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f6ea:	f001 fc2f 	bl	8010f4c <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800f6ee:	e7d9      	b.n	800f6a4 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800f6f0:	2002      	movs	r0, #2
}
 800f6f2:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800f6f4:	2002      	movs	r0, #2
 800f6f6:	e7eb      	b.n	800f6d0 <LoRaMacParserData+0x94>

0800f6f8 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f6f8:	b370      	cbz	r0, 800f758 <LoRaMacSerializerJoinRequest+0x60>
{
 800f6fa:	b510      	push	{r4, lr}
 800f6fc:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f6fe:	6803      	ldr	r3, [r0, #0]
 800f700:	b363      	cbz	r3, 800f75c <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800f702:	7902      	ldrb	r2, [r0, #4]
 800f704:	2a16      	cmp	r2, #22
 800f706:	d92b      	bls.n	800f760 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800f708:	7942      	ldrb	r2, [r0, #5]
 800f70a:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800f70c:	4601      	mov	r1, r0
 800f70e:	f851 0b06 	ldr.w	r0, [r1], #6
 800f712:	2208      	movs	r2, #8
 800f714:	3001      	adds	r0, #1
 800f716:	f001 fc26 	bl	8010f66 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800f71a:	4621      	mov	r1, r4
 800f71c:	f851 0b0e 	ldr.w	r0, [r1], #14
 800f720:	2208      	movs	r2, #8
 800f722:	3009      	adds	r0, #9
 800f724:	f001 fc1f 	bl	8010f66 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800f728:	6823      	ldr	r3, [r4, #0]
 800f72a:	8ae2      	ldrh	r2, [r4, #22]
 800f72c:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800f72e:	6822      	ldr	r2, [r4, #0]
 800f730:	8ae3      	ldrh	r3, [r4, #22]
 800f732:	0a1b      	lsrs	r3, r3, #8
 800f734:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800f736:	6823      	ldr	r3, [r4, #0]
 800f738:	69a2      	ldr	r2, [r4, #24]
 800f73a:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800f73c:	6822      	ldr	r2, [r4, #0]
 800f73e:	69a3      	ldr	r3, [r4, #24]
 800f740:	0a1b      	lsrs	r3, r3, #8
 800f742:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800f744:	6823      	ldr	r3, [r4, #0]
 800f746:	8b62      	ldrh	r2, [r4, #26]
 800f748:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800f74a:	6823      	ldr	r3, [r4, #0]
 800f74c:	7ee2      	ldrb	r2, [r4, #27]
 800f74e:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800f750:	2317      	movs	r3, #23
 800f752:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800f754:	2000      	movs	r0, #0
}
 800f756:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800f758:	2001      	movs	r0, #1
}
 800f75a:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800f75c:	2001      	movs	r0, #1
 800f75e:	e7fa      	b.n	800f756 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800f760:	2002      	movs	r0, #2
 800f762:	e7f8      	b.n	800f756 <LoRaMacSerializerJoinRequest+0x5e>

0800f764 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f764:	2800      	cmp	r0, #0
 800f766:	d065      	beq.n	800f834 <LoRaMacSerializerData+0xd0>
{
 800f768:	b538      	push	{r3, r4, r5, lr}
 800f76a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f76c:	6801      	ldr	r1, [r0, #0]
 800f76e:	2900      	cmp	r1, #0
 800f770:	d062      	beq.n	800f838 <LoRaMacSerializerData+0xd4>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800f772:	7b03      	ldrb	r3, [r0, #12]
 800f774:	f003 030f 	and.w	r3, r3, #15

    if( macMsg->FRMPayloadSize > 0 )
 800f778:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800f77c:	2a00      	cmp	r2, #0
 800f77e:	d157      	bne.n	800f830 <LoRaMacSerializerData+0xcc>
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800f780:	3308      	adds	r3, #8
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800f782:	3204      	adds	r2, #4

    if( macMsg->BufSize < computedBufSize )
 800f784:	7920      	ldrb	r0, [r4, #4]
 800f786:	4413      	add	r3, r2
 800f788:	4298      	cmp	r0, r3
 800f78a:	d357      	bcc.n	800f83c <LoRaMacSerializerData+0xd8>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800f78c:	7963      	ldrb	r3, [r4, #5]
 800f78e:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800f790:	6823      	ldr	r3, [r4, #0]
 800f792:	68a2      	ldr	r2, [r4, #8]
 800f794:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800f796:	6822      	ldr	r2, [r4, #0]
 800f798:	68a3      	ldr	r3, [r4, #8]
 800f79a:	0a1b      	lsrs	r3, r3, #8
 800f79c:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800f79e:	6823      	ldr	r3, [r4, #0]
 800f7a0:	8962      	ldrh	r2, [r4, #10]
 800f7a2:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800f7a4:	6823      	ldr	r3, [r4, #0]
 800f7a6:	7ae2      	ldrb	r2, [r4, #11]
 800f7a8:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800f7aa:	6823      	ldr	r3, [r4, #0]
 800f7ac:	7b22      	ldrb	r2, [r4, #12]
 800f7ae:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800f7b0:	6823      	ldr	r3, [r4, #0]
 800f7b2:	89e2      	ldrh	r2, [r4, #14]
 800f7b4:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800f7b6:	6822      	ldr	r2, [r4, #0]
 800f7b8:	89e3      	ldrh	r3, [r4, #14]
 800f7ba:	0a1b      	lsrs	r3, r3, #8
 800f7bc:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800f7be:	7b22      	ldrb	r2, [r4, #12]
 800f7c0:	4621      	mov	r1, r4
 800f7c2:	f851 0b10 	ldr.w	r0, [r1], #16
 800f7c6:	f002 020f 	and.w	r2, r2, #15
 800f7ca:	3008      	adds	r0, #8
 800f7cc:	f001 fbbe 	bl	8010f4c <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800f7d0:	7b23      	ldrb	r3, [r4, #12]
 800f7d2:	f003 030f 	and.w	r3, r3, #15
 800f7d6:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800f7da:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800f7de:	b12a      	cbz	r2, 800f7ec <LoRaMacSerializerData+0x88>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800f7e0:	f894 1020 	ldrb.w	r1, [r4, #32]
 800f7e4:	6822      	ldr	r2, [r4, #0]
 800f7e6:	5551      	strb	r1, [r2, r5]
 800f7e8:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800f7ec:	6820      	ldr	r0, [r4, #0]
 800f7ee:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800f7f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f7f4:	4428      	add	r0, r5
 800f7f6:	f001 fba9 	bl	8010f4c <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800f7fa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f7fe:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800f800:	6822      	ldr	r2, [r4, #0]
 800f802:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f804:	54d1      	strb	r1, [r2, r3]
 800f806:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800f808:	b292      	uxth	r2, r2
 800f80a:	6820      	ldr	r0, [r4, #0]
 800f80c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f80e:	0a09      	lsrs	r1, r1, #8
 800f810:	5481      	strb	r1, [r0, r2]
 800f812:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800f814:	b292      	uxth	r2, r2
 800f816:	6821      	ldr	r1, [r4, #0]
 800f818:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800f81a:	5488      	strb	r0, [r1, r2]
 800f81c:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800f81e:	b292      	uxth	r2, r2
 800f820:	6821      	ldr	r1, [r4, #0]
 800f822:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800f826:	5488      	strb	r0, [r1, r2]
 800f828:	3304      	adds	r3, #4

    macMsg->BufSize = bufItr;
 800f82a:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800f82c:	2000      	movs	r0, #0
}
 800f82e:	bd38      	pop	{r3, r4, r5, pc}
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800f830:	3309      	adds	r3, #9
 800f832:	e7a6      	b.n	800f782 <LoRaMacSerializerData+0x1e>
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800f834:	2001      	movs	r0, #1
}
 800f836:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800f838:	2001      	movs	r0, #1
 800f83a:	e7f8      	b.n	800f82e <LoRaMacSerializerData+0xca>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800f83c:	2002      	movs	r0, #2
 800f83e:	e7f6      	b.n	800f82e <LoRaMacSerializerData+0xca>

0800f840 <RegionIsActive>:
        default:
        {
            return false;
        }
    }
}
 800f840:	2805      	cmp	r0, #5
 800f842:	bf14      	ite	ne
 800f844:	2000      	movne	r0, #0
 800f846:	2001      	moveq	r0, #1
 800f848:	4770      	bx	lr

0800f84a <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800f84a:	b500      	push	{lr}
 800f84c:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
    switch( region )
 800f84e:	2805      	cmp	r0, #5
 800f850:	d005      	beq.n	800f85e <RegionGetPhyParam+0x14>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800f852:	2300      	movs	r3, #0
 800f854:	9301      	str	r3, [sp, #4]
        }
    }
}
 800f856:	9801      	ldr	r0, [sp, #4]
 800f858:	b003      	add	sp, #12
 800f85a:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_GET_PHY_PARAM( );
 800f85e:	4608      	mov	r0, r1
 800f860:	f000 fd40 	bl	80102e4 <RegionEU868GetPhyParam>
 800f864:	9001      	str	r0, [sp, #4]
 800f866:	e7f6      	b.n	800f856 <RegionGetPhyParam+0xc>

0800f868 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 800f868:	2805      	cmp	r0, #5
 800f86a:	d000      	beq.n	800f86e <RegionSetBandTxDone+0x6>
 800f86c:	4770      	bx	lr
{
 800f86e:	b508      	push	{r3, lr}
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 800f870:	4608      	mov	r0, r1
 800f872:	f000 fe0d 	bl	8010490 <RegionEU868SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800f876:	bd08      	pop	{r3, pc}

0800f878 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 800f878:	2805      	cmp	r0, #5
 800f87a:	d000      	beq.n	800f87e <RegionInitDefaults+0x6>
 800f87c:	4770      	bx	lr
{
 800f87e:	b508      	push	{r3, lr}
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 800f880:	4608      	mov	r0, r1
 800f882:	f000 fe24 	bl	80104ce <RegionEU868InitDefaults>
        default:
        {
            break;
        }
    }
}
 800f886:	bd08      	pop	{r3, pc}

0800f888 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 800f888:	2805      	cmp	r0, #5
 800f88a:	d001      	beq.n	800f890 <RegionVerify+0x8>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800f88c:	2000      	movs	r0, #0
        }
    }
}
 800f88e:	4770      	bx	lr
{
 800f890:	b508      	push	{r3, lr}
 800f892:	460b      	mov	r3, r1
        EU868_VERIFY( );
 800f894:	4611      	mov	r1, r2
 800f896:	4618      	mov	r0, r3
 800f898:	f000 fe8d 	bl	80105b6 <RegionEU868Verify>
}
 800f89c:	bd08      	pop	{r3, pc}

0800f89e <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 800f89e:	2805      	cmp	r0, #5
 800f8a0:	d000      	beq.n	800f8a4 <RegionApplyCFList+0x6>
 800f8a2:	4770      	bx	lr
{
 800f8a4:	b508      	push	{r3, lr}
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 800f8a6:	4608      	mov	r0, r1
 800f8a8:	f001 fa85 	bl	8010db6 <RegionEU868ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800f8ac:	bd08      	pop	{r3, pc}

0800f8ae <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 800f8ae:	2805      	cmp	r0, #5
 800f8b0:	d001      	beq.n	800f8b6 <RegionChanMaskSet+0x8>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800f8b2:	2000      	movs	r0, #0
        }
    }
}
 800f8b4:	4770      	bx	lr
{
 800f8b6:	b508      	push	{r3, lr}
        EU868_CHAN_MASK_SET( );
 800f8b8:	4608      	mov	r0, r1
 800f8ba:	f000 fec1 	bl	8010640 <RegionEU868ChanMaskSet>
}
 800f8be:	bd08      	pop	{r3, pc}

0800f8c0 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    switch( region )
 800f8c0:	2805      	cmp	r0, #5
 800f8c2:	d000      	beq.n	800f8c6 <RegionComputeRxWindowParameters+0x6>
 800f8c4:	4770      	bx	lr
{
 800f8c6:	b508      	push	{r3, lr}
 800f8c8:	468c      	mov	ip, r1
 800f8ca:	4611      	mov	r1, r2
 800f8cc:	461a      	mov	r2, r3
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800f8ce:	9b02      	ldr	r3, [sp, #8]
 800f8d0:	4660      	mov	r0, ip
 800f8d2:	f000 fed6 	bl	8010682 <RegionEU868ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800f8d6:	bd08      	pop	{r3, pc}

0800f8d8 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 800f8d8:	2805      	cmp	r0, #5
 800f8da:	d001      	beq.n	800f8e0 <RegionRxConfig+0x8>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800f8dc:	2000      	movs	r0, #0
        }
    }
}
 800f8de:	4770      	bx	lr
{
 800f8e0:	b508      	push	{r3, lr}
 800f8e2:	460b      	mov	r3, r1
        EU868_RX_CONFIG( );
 800f8e4:	4611      	mov	r1, r2
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f000 ff05 	bl	80106f6 <RegionEU868RxConfig>
}
 800f8ec:	bd08      	pop	{r3, pc}

0800f8ee <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 800f8ee:	2805      	cmp	r0, #5
 800f8f0:	d001      	beq.n	800f8f6 <RegionTxConfig+0x8>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800f8f2:	2000      	movs	r0, #0
        }
    }
}
 800f8f4:	4770      	bx	lr
{
 800f8f6:	b508      	push	{r3, lr}
 800f8f8:	468c      	mov	ip, r1
 800f8fa:	4611      	mov	r1, r2
        EU868_TX_CONFIG( );
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	4660      	mov	r0, ip
 800f900:	f000 ff8e 	bl	8010820 <RegionEU868TxConfig>
}
 800f904:	bd08      	pop	{r3, pc}

0800f906 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
    switch( region )
 800f906:	2805      	cmp	r0, #5
 800f908:	d001      	beq.n	800f90e <RegionLinkAdrReq+0x8>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800f90a:	2000      	movs	r0, #0
        }
    }
}
 800f90c:	4770      	bx	lr
{
 800f90e:	b500      	push	{lr}
 800f910:	b083      	sub	sp, #12
 800f912:	468c      	mov	ip, r1
 800f914:	4611      	mov	r1, r2
 800f916:	461a      	mov	r2, r3
        EU868_LINK_ADR_REQ( );
 800f918:	9b05      	ldr	r3, [sp, #20]
 800f91a:	9300      	str	r3, [sp, #0]
 800f91c:	9b04      	ldr	r3, [sp, #16]
 800f91e:	4660      	mov	r0, ip
 800f920:	f001 f820 	bl	8010964 <RegionEU868LinkAdrReq>
}
 800f924:	b003      	add	sp, #12
 800f926:	f85d fb04 	ldr.w	pc, [sp], #4

0800f92a <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 800f92a:	2805      	cmp	r0, #5
 800f92c:	d001      	beq.n	800f932 <RegionRxParamSetupReq+0x8>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800f92e:	2000      	movs	r0, #0
        }
    }
}
 800f930:	4770      	bx	lr
{
 800f932:	b508      	push	{r3, lr}
        EU868_RX_PARAM_SETUP_REQ( );
 800f934:	4608      	mov	r0, r1
 800f936:	f001 f8d2 	bl	8010ade <RegionEU868RxParamSetupReq>
}
 800f93a:	bd08      	pop	{r3, pc}

0800f93c <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 800f93c:	2805      	cmp	r0, #5
 800f93e:	d001      	beq.n	800f944 <RegionNewChannelReq+0x8>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800f940:	2000      	movs	r0, #0
        }
    }
}
 800f942:	4770      	bx	lr
{
 800f944:	b508      	push	{r3, lr}
        EU868_NEW_CHANNEL_REQ( );
 800f946:	4608      	mov	r0, r1
 800f948:	f001 fa75 	bl	8010e36 <RegionEU868NewChannelReq>
}
 800f94c:	bd08      	pop	{r3, pc}

0800f94e <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 800f94e:	2805      	cmp	r0, #5
 800f950:	d001      	beq.n	800f956 <RegionTxParamSetupReq+0x8>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800f952:	2000      	movs	r0, #0
        }
    }
}
 800f954:	4770      	bx	lr
{
 800f956:	b508      	push	{r3, lr}
        EU868_TX_PARAM_SETUP_REQ( );
 800f958:	4608      	mov	r0, r1
 800f95a:	f001 f8e2 	bl	8010b22 <RegionEU868TxParamSetupReq>
}
 800f95e:	bd08      	pop	{r3, pc}

0800f960 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 800f960:	2805      	cmp	r0, #5
 800f962:	d001      	beq.n	800f968 <RegionDlChannelReq+0x8>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800f964:	2000      	movs	r0, #0
        }
    }
}
 800f966:	4770      	bx	lr
{
 800f968:	b508      	push	{r3, lr}
        EU868_DL_CHANNEL_REQ( );
 800f96a:	4608      	mov	r0, r1
 800f96c:	f001 f8dc 	bl	8010b28 <RegionEU868DlChannelReq>
}
 800f970:	bd08      	pop	{r3, pc}

0800f972 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    switch( region )
 800f972:	2805      	cmp	r0, #5
 800f974:	d001      	beq.n	800f97a <RegionAlternateDr+0x8>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800f976:	2000      	movs	r0, #0
        }
    }
}
 800f978:	4770      	bx	lr
{
 800f97a:	b508      	push	{r3, lr}
 800f97c:	460b      	mov	r3, r1
        EU868_ALTERNATE_DR( );
 800f97e:	4611      	mov	r1, r2
 800f980:	4618      	mov	r0, r3
 800f982:	f001 f8fa 	bl	8010b7a <RegionEU868AlternateDr>
}
 800f986:	bd08      	pop	{r3, pc}

0800f988 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
    switch( region )
 800f988:	2805      	cmp	r0, #5
 800f98a:	d001      	beq.n	800f990 <RegionNextChannel+0x8>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800f98c:	2009      	movs	r0, #9
        }
    }
}
 800f98e:	4770      	bx	lr
{
 800f990:	b508      	push	{r3, lr}
 800f992:	468c      	mov	ip, r1
 800f994:	4611      	mov	r1, r2
 800f996:	461a      	mov	r2, r3
        EU868_NEXT_CHANNEL( );
 800f998:	9b02      	ldr	r3, [sp, #8]
 800f99a:	4660      	mov	r0, ip
 800f99c:	f001 f8ee 	bl	8010b7c <RegionEU868NextChannel>
}
 800f9a0:	bd08      	pop	{r3, pc}

0800f9a2 <RegionSetContinuousWave>:
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
    switch( region )
 800f9a2:	2805      	cmp	r0, #5
 800f9a4:	d000      	beq.n	800f9a8 <RegionSetContinuousWave+0x6>
 800f9a6:	4770      	bx	lr
{
 800f9a8:	b508      	push	{r3, lr}
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 800f9aa:	4608      	mov	r0, r1
 800f9ac:	f001 fa6e 	bl	8010e8c <RegionEU868SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800f9b0:	bd08      	pop	{r3, pc}

0800f9b2 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800f9b2:	468c      	mov	ip, r1
 800f9b4:	4611      	mov	r1, r2
    switch( region )
 800f9b6:	2805      	cmp	r0, #5
 800f9b8:	d001      	beq.n	800f9be <RegionApplyDrOffset+0xc>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800f9ba:	b2d0      	uxtb	r0, r2
        }
    }
}
 800f9bc:	4770      	bx	lr
{
 800f9be:	b508      	push	{r3, lr}
        EU868_APPLY_DR_OFFSET( );
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	4660      	mov	r0, ip
 800f9c4:	f001 fa92 	bl	8010eec <RegionEU868ApplyDrOffset>
}
 800f9c8:	bd08      	pop	{r3, pc}

0800f9ca <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800f9ca:	2003      	movs	r0, #3
 800f9cc:	f2c0 1001 	movt	r0, #257	; 0x101
 800f9d0:	4770      	bx	lr

0800f9d2 <RegionCommonChanVerifyDr>:
    }
    return nbActiveBits;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800f9d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9d4:	9f06      	ldr	r7, [sp, #24]
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	db2c      	blt.n	800fa34 <RegionCommonChanVerifyDr+0x62>
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800f9da:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	dc2a      	bgt.n	800fa38 <RegionCommonChanVerifyDr+0x66>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800f9e2:	b1c0      	cbz	r0, 800fa16 <RegionCommonChanVerifyDr+0x44>
 800f9e4:	2600      	movs	r6, #0
 800f9e6:	4635      	mov	r5, r6
 800f9e8:	e01b      	b.n	800fa22 <RegionCommonChanVerifyDr+0x50>
        for( uint8_t j = 0; j < 16; j++ )
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	f10c 0c0c 	add.w	ip, ip, #12
 800f9f0:	2b10      	cmp	r3, #16
 800f9f2:	d011      	beq.n	800fa18 <RegionCommonChanVerifyDr+0x46>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800f9f4:	fa44 fe03 	asr.w	lr, r4, r3
 800f9f8:	f01e 0f01 	tst.w	lr, #1
 800f9fc:	d0f5      	beq.n	800f9ea <RegionCommonChanVerifyDr+0x18>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800f9fe:	f89c e008 	ldrb.w	lr, [ip, #8]
    if( ( value >= min ) && ( value <= max ) )
 800fa02:	f00e 0e0f 	and.w	lr, lr, #15
 800fa06:	4596      	cmp	lr, r2
 800fa08:	dcef      	bgt.n	800f9ea <RegionCommonChanVerifyDr+0x18>
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800fa0a:	f89c e008 	ldrb.w	lr, [ip, #8]
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800fa0e:	ebb2 1f1e 	cmp.w	r2, lr, lsr #4
 800fa12:	dcea      	bgt.n	800f9ea <RegionCommonChanVerifyDr+0x18>
                    return true;
 800fa14:	2001      	movs	r0, #1
}
 800fa16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800fa18:	3510      	adds	r5, #16
 800fa1a:	b2ed      	uxtb	r5, r5
 800fa1c:	3601      	adds	r6, #1
 800fa1e:	42a8      	cmp	r0, r5
 800fa20:	d90c      	bls.n	800fa3c <RegionCommonChanVerifyDr+0x6a>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800fa22:	b2f3      	uxtb	r3, r6
 800fa24:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 800fa28:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800fa2c:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 800fa30:	2300      	movs	r3, #0
 800fa32:	e7df      	b.n	800f9f4 <RegionCommonChanVerifyDr+0x22>
        return false;
 800fa34:	2000      	movs	r0, #0
 800fa36:	e7ee      	b.n	800fa16 <RegionCommonChanVerifyDr+0x44>
 800fa38:	2000      	movs	r0, #0
 800fa3a:	e7ec      	b.n	800fa16 <RegionCommonChanVerifyDr+0x44>
    return false;
 800fa3c:	2000      	movs	r0, #0
 800fa3e:	e7ea      	b.n	800fa16 <RegionCommonChanVerifyDr+0x44>

0800fa40 <RegionCommonValueInRange>:
    if( ( value >= min ) && ( value <= max ) )
 800fa40:	4288      	cmp	r0, r1
 800fa42:	db04      	blt.n	800fa4e <RegionCommonValueInRange+0xe>
    {
        return 1;
 800fa44:	4290      	cmp	r0, r2
 800fa46:	bfcc      	ite	gt
 800fa48:	2000      	movgt	r0, #0
 800fa4a:	2001      	movle	r0, #1
 800fa4c:	4770      	bx	lr
    }
    return 0;
 800fa4e:	2000      	movs	r0, #0
}
 800fa50:	4770      	bx	lr

0800fa52 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800fa52:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800fa56:	0913      	lsrs	r3, r2, #4
 800fa58:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800fa5c:	d30e      	bcc.n	800fa7c <RegionCommonChanDisable+0x2a>
 800fa5e:	4291      	cmp	r1, r2
 800fa60:	d20e      	bcs.n	800fa80 <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800fa62:	f001 010f 	and.w	r1, r1, #15
 800fa66:	2301      	movs	r3, #1
 800fa68:	fa03 f101 	lsl.w	r1, r3, r1
 800fa6c:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800fa70:	ea22 0201 	bic.w	r2, r2, r1
 800fa74:	f820 201c 	strh.w	r2, [r0, ip, lsl #1]

    return true;
 800fa78:	4618      	mov	r0, r3
 800fa7a:	4770      	bx	lr
        return false;
 800fa7c:	2000      	movs	r0, #0
 800fa7e:	4770      	bx	lr
 800fa80:	2000      	movs	r0, #0
}
 800fa82:	4770      	bx	lr

0800fa84 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800fa84:	b318      	cbz	r0, 800face <RegionCommonCountChannels+0x4a>
 800fa86:	4603      	mov	r3, r0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800fa88:	4291      	cmp	r1, r2
 800fa8a:	d222      	bcs.n	800fad2 <RegionCommonCountChannels+0x4e>
{
 800fa8c:	b530      	push	{r4, r5, lr}
 800fa8e:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 800fa92:	3a01      	subs	r2, #1
 800fa94:	1a52      	subs	r2, r2, r1
 800fa96:	fa51 f282 	uxtab	r2, r1, r2
 800fa9a:	3302      	adds	r3, #2
 800fa9c:	eb03 0542 	add.w	r5, r3, r2, lsl #1
    uint8_t nbChannels = 0;
 800faa0:	2000      	movs	r0, #0
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800faa2:	f04f 0e01 	mov.w	lr, #1
 800faa6:	e003      	b.n	800fab0 <RegionCommonCountChannels+0x2c>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800faa8:	4408      	add	r0, r1
 800faaa:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800faac:	42ac      	cmp	r4, r5
 800faae:	d012      	beq.n	800fad6 <RegionCommonCountChannels+0x52>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800fab0:	f834 cb02 	ldrh.w	ip, [r4], #2
 800fab4:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800fab6:	4619      	mov	r1, r3
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800fab8:	fa0e f203 	lsl.w	r2, lr, r3
 800fabc:	ea32 020c 	bics.w	r2, r2, ip
            nbActiveBits++;
 800fac0:	bf04      	itt	eq
 800fac2:	3101      	addeq	r1, #1
 800fac4:	b2c9      	uxtbeq	r1, r1
    for( uint8_t j = 0; j < nbBits; j++ )
 800fac6:	3301      	adds	r3, #1
 800fac8:	2b10      	cmp	r3, #16
 800faca:	d1f5      	bne.n	800fab8 <RegionCommonCountChannels+0x34>
 800facc:	e7ec      	b.n	800faa8 <RegionCommonCountChannels+0x24>
        return 0;
 800face:	2000      	movs	r0, #0
 800fad0:	4770      	bx	lr
    uint8_t nbChannels = 0;
 800fad2:	2000      	movs	r0, #0
    }

    return nbChannels;
}
 800fad4:	4770      	bx	lr
 800fad6:	bd30      	pop	{r4, r5, pc}

0800fad8 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800fad8:	b168      	cbz	r0, 800faf6 <RegionCommonChanMaskCopy+0x1e>
 800fada:	b161      	cbz	r1, 800faf6 <RegionCommonChanMaskCopy+0x1e>
    {
        for( uint8_t i = 0; i < len; i++ )
 800fadc:	b15a      	cbz	r2, 800faf6 <RegionCommonChanMaskCopy+0x1e>
 800fade:	1e8b      	subs	r3, r1, #2
 800fae0:	3802      	subs	r0, #2
 800fae2:	3a01      	subs	r2, #1
 800fae4:	b2d2      	uxtb	r2, r2
 800fae6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800faea:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800faee:	f820 2f02 	strh.w	r2, [r0, #2]!
        for( uint8_t i = 0; i < len; i++ )
 800faf2:	428b      	cmp	r3, r1
 800faf4:	d1f9      	bne.n	800faea <RegionCommonChanMaskCopy+0x12>
        }
    }
}
 800faf6:	4770      	bx	lr

0800faf8 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800faf8:	b082      	sub	sp, #8
 800fafa:	b500      	push	{lr}
 800fafc:	9302      	str	r3, [sp, #8]
    uint16_t dutyCycle = band->DCycle;
 800fafe:	f8b0 c000 	ldrh.w	ip, [r0]
    if( joined == false )
 800fb02:	b97a      	cbnz	r2, 800fb24 <RegionCommonSetBandTxDone+0x2c>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800fb04:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800fb08:	d308      	bcc.n	800fb1c <RegionCommonSetBandTxDone+0x24>
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800fb0a:	f649 2eaf 	movw	lr, #39599	; 0x9aaf
 800fb0e:	f242 7210 	movw	r2, #10000	; 0x2710
 800fb12:	4573      	cmp	r3, lr
 800fb14:	bf98      	it	ls
 800fb16:	f44f 727a 	movls.w	r2, #1000	; 0x3e8
 800fb1a:	e000      	b.n	800fb1e <RegionCommonSetBandTxDone+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800fb1c:	2264      	movs	r2, #100	; 0x64
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800fb1e:	4594      	cmp	ip, r2
 800fb20:	bf38      	it	cc
 800fb22:	4694      	movcc	ip, r2
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800fb24:	68c3      	ldr	r3, [r0, #12]
 800fb26:	f1bc 0f01 	cmp.w	ip, #1
 800fb2a:	bf38      	it	cc
 800fb2c:	f04f 0c01 	movcc.w	ip, #1
 800fb30:	fb01 f10c 	mul.w	r1, r1, ip
 800fb34:	428b      	cmp	r3, r1
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800fb36:	bf8c      	ite	hi
 800fb38:	1a5b      	subhi	r3, r3, r1
    }
    else
    {
        band->TimeCredits = 0;
 800fb3a:	2300      	movls	r3, #0
 800fb3c:	60c3      	str	r3, [r0, #12]
    }
}
 800fb3e:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb42:	b002      	add	sp, #8
 800fb44:	4770      	bx	lr

0800fb46 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800fb46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb4a:	b093      	sub	sp, #76	; 0x4c
 800fb4c:	4683      	mov	fp, r0
 800fb4e:	460d      	mov	r5, r1
 800fb50:	4614      	mov	r4, r2
 800fb52:	9302      	str	r3, [sp, #8]
 800fb54:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 800fb58:	9308      	str	r3, [sp, #32]
 800fb5a:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800fb5e:	f004 f8fb 	bl	8013d58 <UTIL_TIMER_GetCurrentTime>
 800fb62:	9003      	str	r0, [sp, #12]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800fb64:	2c00      	cmp	r4, #0
 800fb66:	f000 809e 	beq.w	800fca6 <RegionCommonUpdateBandTimeOff+0x160>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800fb6a:	f5a9 33f6 	sub.w	r3, r9, #125952	; 0x1ec00
 800fb6e:	3b30      	subs	r3, #48	; 0x30
 800fb70:	f244 5207 	movw	r2, #17671	; 0x4507
 800fb74:	f2cc 222e 	movt	r2, #49710	; 0xc22e
 800fb78:	fba2 2303 	umull	r2, r3, r2, r3
 800fb7c:	0c1b      	lsrs	r3, r3, #16
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800fb7e:	f44f 42a3 	mov.w	r2, #20864	; 0x5180
 800fb82:	f2c0 0201 	movt	r2, #1
 800fb86:	fb02 f103 	mul.w	r1, r2, r3
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800fb8a:	f501 31f6 	add.w	r1, r1, #125952	; 0x1ec00
 800fb8e:	3130      	adds	r1, #48	; 0x30
 800fb90:	9109      	str	r1, [sp, #36]	; 0x24
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800fb92:	fb03 2302 	mla	r3, r3, r2, r2
 800fb96:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb98:	462f      	mov	r7, r5
 800fb9a:	3c01      	subs	r4, #1
 800fb9c:	b2e4      	uxtb	r4, r4
 800fb9e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800fba2:	3518      	adds	r5, #24
 800fba4:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fba8:	9304      	str	r3, [sp, #16]
    uint8_t validBands = 0;
 800fbaa:	f04f 0a00 	mov.w	sl, #0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800fbae:	f04f 33ff 	mov.w	r3, #4294967295
 800fbb2:	9305      	str	r3, [sp, #20]
        band->TimeCredits = maxCredits;
 800fbb4:	f247 7340 	movw	r3, #30528	; 0x7740
 800fbb8:	f2c0 031b 	movt	r3, #27
 800fbbc:	9306      	str	r3, [sp, #24]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800fbbe:	f64e 432f 	movw	r3, #60463	; 0xec2f
 800fbc2:	f2c0 0301 	movt	r3, #1
 800fbc6:	9307      	str	r3, [sp, #28]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800fbc8:	f64a 0380 	movw	r3, #43136	; 0xa880
 800fbcc:	f2c0 1312 	movt	r3, #274	; 0x112
 800fbd0:	930a      	str	r3, [sp, #40]	; 0x28
 800fbd2:	e09f      	b.n	800fd14 <RegionCommonUpdateBandTimeOff+0x1ce>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800fbd4:	4643      	mov	r3, r8
 800fbd6:	2b64      	cmp	r3, #100	; 0x64
 800fbd8:	bf38      	it	cc
 800fbda:	2364      	movcc	r3, #100	; 0x64
    if( dutyCycle == 0 )
 800fbdc:	461e      	mov	r6, r3
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800fbde:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 800fbe2:	d803      	bhi.n	800fbec <RegionCommonUpdateBandTimeOff+0xa6>
            band->LastMaxCreditAssignTime = elapsedTime;
 800fbe4:	60b8      	str	r0, [r7, #8]
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800fbe6:	4698      	mov	r8, r3
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800fbe8:	9d06      	ldr	r5, [sp, #24]
 800fbea:	e0d7      	b.n	800fd9c <RegionCommonUpdateBandTimeOff+0x256>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800fbec:	4698      	mov	r8, r3
 800fbee:	e0cc      	b.n	800fd8a <RegionCommonUpdateBandTimeOff+0x244>
            ( band->MaxTimeCredits != maxCredits ) ||
 800fbf0:	f245 137f 	movw	r3, #20863	; 0x517f
 800fbf4:	f2c0 0301 	movt	r3, #1
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	f240 80e9 	bls.w	800fdd0 <RegionCommonUpdateBandTimeOff+0x28a>
 800fbfe:	e0e2      	b.n	800fdc6 <RegionCommonUpdateBandTimeOff+0x280>
                timeDiff.SubSeconds = 0;
 800fc00:	2300      	movs	r3, #0
 800fc02:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800fc06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc08:	930e      	str	r3, [sp, #56]	; 0x38
 800fc0a:	ab0e      	add	r3, sp, #56	; 0x38
 800fc0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fc10:	f003 fd62 	bl	80136d8 <SysTimeToMs>
 800fc14:	60a0      	str	r0, [r4, #8]
 800fc16:	e0db      	b.n	800fdd0 <RegionCommonUpdateBandTimeOff+0x28a>
            bands[i].ReadyForTransmission = false;
 800fc18:	2200      	movs	r2, #0
 800fc1a:	7522      	strb	r2, [r4, #20]
            if( bands[i].MaxTimeCredits >= creditCosts )
 800fc1c:	42ae      	cmp	r6, r5
 800fc1e:	d809      	bhi.n	800fc34 <RegionCommonUpdateBandTimeOff+0xee>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800fc20:	1af6      	subs	r6, r6, r3
 800fc22:	9b05      	ldr	r3, [sp, #20]
 800fc24:	42b3      	cmp	r3, r6
 800fc26:	bf28      	it	cs
 800fc28:	4633      	movcs	r3, r6
 800fc2a:	9305      	str	r3, [sp, #20]
                validBands++;
 800fc2c:	f10a 0a01 	add.w	sl, sl, #1
 800fc30:	fa5f fa8a 	uxtb.w	sl, sl
            if( joined == false )
 800fc34:	f1bb 0f00 	cmp.w	fp, #0
 800fc38:	d168      	bne.n	800fd0c <RegionCommonUpdateBandTimeOff+0x1c6>
                SysTime_t backoffTimeRange = {
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800fc40:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 800fc44:	d021      	beq.n	800fc8a <RegionCommonUpdateBandTimeOff+0x144>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800fc46:	f64e 4230 	movw	r2, #60464	; 0xec30
 800fc4a:	f2c0 0201 	movt	r2, #1
 800fc4e:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800fc52:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 800fc56:	bf18      	it	ne
 800fc58:	4613      	movne	r3, r2
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800fc5a:	f64e 4230 	movw	r2, #60464	; 0xec30
 800fc5e:	f2c0 0201 	movt	r2, #1
 800fc62:	4591      	cmp	r9, r2
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800fc64:	bf84      	itt	hi
 800fc66:	9a0b      	ldrhi	r2, [sp, #44]	; 0x2c
 800fc68:	189b      	addhi	r3, r3, r2
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800fc6a:	930e      	str	r3, [sp, #56]	; 0x38
 800fc6c:	ac0e      	add	r4, sp, #56	; 0x38
 800fc6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fc70:	9300      	str	r3, [sp, #0]
 800fc72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc74:	e894 0006 	ldmia.w	r4, {r1, r2}
 800fc78:	4620      	mov	r0, r4
 800fc7a:	f003 fca8 	bl	80135ce <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800fc7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fc82:	f003 fd29 	bl	80136d8 <SysTimeToMs>
 800fc86:	9005      	str	r0, [sp, #20]
 800fc88:	e040      	b.n	800fd0c <RegionCommonUpdateBandTimeOff+0x1c6>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800fc8a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800fc8e:	e7e4      	b.n	800fc5a <RegionCommonUpdateBandTimeOff+0x114>

    if( validBands == 0 )
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800fc90:	f1ba 0f00 	cmp.w	sl, #0
 800fc94:	9b05      	ldr	r3, [sp, #20]
 800fc96:	bf08      	it	eq
 800fc98:	f04f 33ff 	moveq.w	r3, #4294967295
 800fc9c:	9305      	str	r3, [sp, #20]
    }
    return minTimeToWait;
}
 800fc9e:	9805      	ldr	r0, [sp, #20]
 800fca0:	b013      	add	sp, #76	; 0x4c
 800fca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800fca6:	f04f 33ff 	mov.w	r3, #4294967295
 800fcaa:	9305      	str	r3, [sp, #20]
 800fcac:	e7f7      	b.n	800fc9e <RegionCommonUpdateBandTimeOff+0x158>
            bands[i].ReadyForTransmission = false;
 800fcae:	2200      	movs	r2, #0
 800fcb0:	7522      	strb	r2, [r4, #20]
            if( bands[i].MaxTimeCredits >= creditCosts )
 800fcb2:	42ae      	cmp	r6, r5
 800fcb4:	d8c1      	bhi.n	800fc3a <RegionCommonUpdateBandTimeOff+0xf4>
 800fcb6:	e7b3      	b.n	800fc20 <RegionCommonUpdateBandTimeOff+0xda>
    if( dutyCycle == 0 )
 800fcb8:	4646      	mov	r6, r8
 800fcba:	2e01      	cmp	r6, #1
 800fcbc:	bf38      	it	cc
 800fcbe:	2601      	movcc	r6, #1
        if( dutyCycleEnabled == false )
 800fcc0:	9b02      	ldr	r3, [sp, #8]
 800fcc2:	b90b      	cbnz	r3, 800fcc8 <RegionCommonUpdateBandTimeOff+0x182>
            band->TimeCredits = maxCredits;
 800fcc4:	9b06      	ldr	r3, [sp, #24]
 800fcc6:	60e3      	str	r3, [r4, #12]
    if( band->LastBandUpdateTime == 0 )
 800fcc8:	6860      	ldr	r0, [r4, #4]
 800fcca:	2800      	cmp	r0, #0
 800fccc:	d04f      	beq.n	800fd6e <RegionCommonUpdateBandTimeOff+0x228>
    band->MaxTimeCredits = maxCredits;
 800fcce:	9b06      	ldr	r3, [sp, #24]
 800fcd0:	6123      	str	r3, [r4, #16]
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800fcd2:	f004 f84b 	bl	8013d6c <UTIL_TIMER_GetElapsedTime>
 800fcd6:	68e3      	ldr	r3, [r4, #12]
 800fcd8:	4403      	add	r3, r0
 800fcda:	60e3      	str	r3, [r4, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
 800fcdc:	6925      	ldr	r5, [r4, #16]
 800fcde:	68e3      	ldr	r3, [r4, #12]
 800fce0:	42ab      	cmp	r3, r5
        band->TimeCredits = band->MaxTimeCredits;
 800fce2:	bf88      	it	hi
 800fce4:	60e5      	strhi	r5, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800fce6:	9b03      	ldr	r3, [sp, #12]
 800fce8:	6063      	str	r3, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800fcea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fcec:	fb03 f606 	mul.w	r6, r3, r6
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 800fcf0:	68e3      	ldr	r3, [r4, #12]
 800fcf2:	42b3      	cmp	r3, r6
 800fcf4:	d205      	bcs.n	800fd02 <RegionCommonUpdateBandTimeOff+0x1bc>
 800fcf6:	9a02      	ldr	r2, [sp, #8]
 800fcf8:	2a00      	cmp	r2, #0
 800fcfa:	d18d      	bne.n	800fc18 <RegionCommonUpdateBandTimeOff+0xd2>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800fcfc:	f1bb 0f00 	cmp.w	fp, #0
 800fd00:	d0d5      	beq.n	800fcae <RegionCommonUpdateBandTimeOff+0x168>
            bands[i].ReadyForTransmission = true;
 800fd02:	2301      	movs	r3, #1
 800fd04:	7523      	strb	r3, [r4, #20]
            validBands++;
 800fd06:	449a      	add	sl, r3
 800fd08:	fa5f fa8a 	uxtb.w	sl, sl
    for( uint8_t i = 0; i < nbBands; i++ )
 800fd0c:	3718      	adds	r7, #24
 800fd0e:	9b04      	ldr	r3, [sp, #16]
 800fd10:	429f      	cmp	r7, r3
 800fd12:	d0bd      	beq.n	800fc90 <RegionCommonUpdateBandTimeOff+0x14a>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800fd14:	f8cd 9074 	str.w	r9, [sp, #116]	; 0x74
 800fd18:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800fd1c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800fd20:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800fd24:	ab0c      	add	r3, sp, #48	; 0x30
 800fd26:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fd2a:	f003 fcd5 	bl	80136d8 <SysTimeToMs>
    uint16_t dutyCycle = band->DCycle;
 800fd2e:	463c      	mov	r4, r7
 800fd30:	f8b7 8000 	ldrh.w	r8, [r7]
    if( joined == false )
 800fd34:	f1bb 0f00 	cmp.w	fp, #0
 800fd38:	d1be      	bne.n	800fcb8 <RegionCommonUpdateBandTimeOff+0x172>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800fd3a:	f5b9 6f61 	cmp.w	r9, #3600	; 0xe10
 800fd3e:	f4ff af49 	bcc.w	800fbd4 <RegionCommonUpdateBandTimeOff+0x8e>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800fd42:	f649 23af 	movw	r3, #39599	; 0x9aaf
 800fd46:	4599      	cmp	r9, r3
 800fd48:	d915      	bls.n	800fd76 <RegionCommonUpdateBandTimeOff+0x230>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800fd4a:	f242 7310 	movw	r3, #10000	; 0x2710
 800fd4e:	4598      	cmp	r8, r3
 800fd50:	bf38      	it	cc
 800fd52:	4698      	movcc	r8, r3
    if( dutyCycle == 0 )
 800fd54:	4646      	mov	r6, r8
 800fd56:	2e01      	cmp	r6, #1
 800fd58:	bf38      	it	cc
 800fd5a:	2601      	movcc	r6, #1
 800fd5c:	b2b6      	uxth	r6, r6
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800fd5e:	f44f 5538 	mov.w	r5, #11776	; 0x2e00
 800fd62:	f2c0 2593 	movt	r5, #659	; 0x293
 800fd66:	e019      	b.n	800fd9c <RegionCommonUpdateBandTimeOff+0x256>
        band->TimeCredits = maxCredits;
 800fd68:	60e5      	str	r5, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800fd6a:	6125      	str	r5, [r4, #16]
    if( band->TimeCredits > band->MaxTimeCredits )
 800fd6c:	e7bb      	b.n	800fce6 <RegionCommonUpdateBandTimeOff+0x1a0>
        band->TimeCredits = maxCredits;
 800fd6e:	9b06      	ldr	r3, [sp, #24]
 800fd70:	60e3      	str	r3, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800fd72:	6123      	str	r3, [r4, #16]
    if( joined == true )
 800fd74:	e7ad      	b.n	800fcd2 <RegionCommonUpdateBandTimeOff+0x18c>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800fd76:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 800fd7a:	bf38      	it	cc
 800fd7c:	f44f 787a 	movcc.w	r8, #1000	; 0x3e8
    if( dutyCycle == 0 )
 800fd80:	4646      	mov	r6, r8
 800fd82:	2e01      	cmp	r6, #1
 800fd84:	bf38      	it	cc
 800fd86:	2601      	movcc	r6, #1
 800fd88:	b2b6      	uxth	r6, r6
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800fd8a:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
            band->LastMaxCreditAssignTime = elapsedTime;
 800fd8e:	bf07      	ittee	eq
 800fd90:	60a0      	streq	r0, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800fd92:	9d0a      	ldreq	r5, [sp, #40]	; 0x28
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800fd94:	f44f 5538 	movne.w	r5, #11776	; 0x2e00
 800fd98:	f2c0 2593 	movtne	r5, #659	; 0x293
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800fd9c:	68a1      	ldr	r1, [r4, #8]
 800fd9e:	a810      	add	r0, sp, #64	; 0x40
 800fda0:	f003 fcbc 	bl	801371c <SysTimeFromMs>
 800fda4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fda6:	9300      	str	r3, [sp, #0]
 800fda8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fdaa:	aa0c      	add	r2, sp, #48	; 0x30
 800fdac:	ca06      	ldmia	r2, {r1, r2}
 800fdae:	a80e      	add	r0, sp, #56	; 0x38
 800fdb0:	f003 fc0d 	bl	80135ce <SysTimeSub>
 800fdb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800fdb6:	9b02      	ldr	r3, [sp, #8]
 800fdb8:	b90b      	cbnz	r3, 800fdbe <RegionCommonUpdateBandTimeOff+0x278>
 800fdba:	9b08      	ldr	r3, [sp, #32]
 800fdbc:	b11b      	cbz	r3, 800fdc6 <RegionCommonUpdateBandTimeOff+0x280>
 800fdbe:	6923      	ldr	r3, [r4, #16]
 800fdc0:	42ab      	cmp	r3, r5
 800fdc2:	f43f af15 	beq.w	800fbf0 <RegionCommonUpdateBandTimeOff+0xaa>
            band->TimeCredits = maxCredits;
 800fdc6:	60e5      	str	r5, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800fdc8:	9b07      	ldr	r3, [sp, #28]
 800fdca:	4599      	cmp	r9, r3
 800fdcc:	f63f af18 	bhi.w	800fc00 <RegionCommonUpdateBandTimeOff+0xba>
    if( band->LastBandUpdateTime == 0 )
 800fdd0:	6863      	ldr	r3, [r4, #4]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d0c8      	beq.n	800fd68 <RegionCommonUpdateBandTimeOff+0x222>
    band->MaxTimeCredits = maxCredits;
 800fdd6:	6125      	str	r5, [r4, #16]
    if( joined == true )
 800fdd8:	e780      	b.n	800fcdc <RegionCommonUpdateBandTimeOff+0x196>

0800fdda <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800fdda:	7803      	ldrb	r3, [r0, #0]
 800fddc:	2b03      	cmp	r3, #3
 800fdde:	d001      	beq.n	800fde4 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800fde0:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800fde2:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800fde4:	7843      	ldrb	r3, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800fde6:	f003 020f 	and.w	r2, r3, #15
 800fdea:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800fdec:	091b      	lsrs	r3, r3, #4
 800fdee:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800fdf0:	7883      	ldrb	r3, [r0, #2]
 800fdf2:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800fdf4:	78c2      	ldrb	r2, [r0, #3]
 800fdf6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fdfa:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800fdfc:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800fdfe:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800fe02:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800fe04:	f003 030f 	and.w	r3, r3, #15
 800fe08:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800fe0a:	2005      	movs	r0, #5
 800fe0c:	4770      	bx	lr

0800fe0e <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800fe0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe12:	b083      	sub	sp, #12
 800fe14:	4604      	mov	r4, r0
 800fe16:	460f      	mov	r7, r1
 800fe18:	4616      	mov	r6, r2
 800fe1a:	461d      	mov	r5, r3
    uint8_t status = verifyParams->Status;
 800fe1c:	f890 9004 	ldrb.w	r9, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800fe20:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800fe24:	f990 8007 	ldrsb.w	r8, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800fe28:	7943      	ldrb	r3, [r0, #5]
 800fe2a:	b113      	cbz	r3, 800fe32 <RegionCommonLinkAdrReqVerifyParams+0x24>
    int8_t nbRepetitions = verifyParams->NbRep;
 800fe2c:	f990 b008 	ldrsb.w	fp, [r0, #8]
 800fe30:	e005      	b.n	800fe3e <RegionCommonLinkAdrReqVerifyParams+0x30>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800fe32:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800fe36:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800fe3a:	f990 800a 	ldrsb.w	r8, [r0, #10]
    }

    if( status != 0 )
 800fe3e:	f1b9 0f00 	cmp.w	r9, #0
 800fe42:	d02d      	beq.n	800fea0 <RegionCommonLinkAdrReqVerifyParams+0x92>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800fe44:	f1ba 0f0f 	cmp.w	sl, #15
 800fe48:	d10f      	bne.n	800fe6a <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800fe4a:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800fe4e:	f1b8 0f0f 	cmp.w	r8, #15
 800fe52:	d01b      	beq.n	800fe8c <RegionCommonLinkAdrReqVerifyParams+0x7e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800fe54:	f994 301d 	ldrsb.w	r3, [r4, #29]
    if( ( value >= min ) && ( value <= max ) )
 800fe58:	4543      	cmp	r3, r8
 800fe5a:	dc2b      	bgt.n	800feb4 <RegionCommonLinkAdrReqVerifyParams+0xa6>
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800fe5c:	f994 301c 	ldrsb.w	r3, [r4, #28]
 800fe60:	4543      	cmp	r3, r8
 800fe62:	da15      	bge.n	800fe90 <RegionCommonLinkAdrReqVerifyParams+0x82>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800fe64:	f009 09fb 	and.w	r9, r9, #251	; 0xfb
 800fe68:	e01a      	b.n	800fea0 <RegionCommonLinkAdrReqVerifyParams+0x92>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800fe6a:	69a3      	ldr	r3, [r4, #24]
 800fe6c:	9301      	str	r3, [sp, #4]
 800fe6e:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800fe72:	9300      	str	r3, [sp, #0]
 800fe74:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800fe78:	4652      	mov	r2, sl
 800fe7a:	6921      	ldr	r1, [r4, #16]
 800fe7c:	7b20      	ldrb	r0, [r4, #12]
 800fe7e:	f7ff fda8 	bl	800f9d2 <RegionCommonChanVerifyDr>
 800fe82:	2800      	cmp	r0, #0
 800fe84:	d1e3      	bne.n	800fe4e <RegionCommonLinkAdrReqVerifyParams+0x40>
            status &= 0xFD; // Datarate KO
 800fe86:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
 800fe8a:	e7e0      	b.n	800fe4e <RegionCommonLinkAdrReqVerifyParams+0x40>
            txPower =  verifyParams->CurrentTxPower;
 800fe8c:	f994 800a 	ldrsb.w	r8, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800fe90:	f1b9 0f07 	cmp.w	r9, #7
 800fe94:	d104      	bne.n	800fea0 <RegionCommonLinkAdrReqVerifyParams+0x92>
    {
        if( nbRepetitions == 0 )
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 800fe96:	f1bb 0f00 	cmp.w	fp, #0
 800fe9a:	bf08      	it	eq
 800fe9c:	f04f 0b01 	moveq.w	fp, #1
        }
    }

    // Apply changes
    *dr = datarate;
 800fea0:	f887 a000 	strb.w	sl, [r7]
    *txPow = txPower;
 800fea4:	f886 8000 	strb.w	r8, [r6]
    *nbRep = nbRepetitions;
 800fea8:	f885 b000 	strb.w	fp, [r5]

    return status;
}
 800feac:	4648      	mov	r0, r9
 800feae:	b003      	add	sp, #12
 800feb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800feb4:	4698      	mov	r8, r3
 800feb6:	e7eb      	b.n	800fe90 <RegionCommonLinkAdrReqVerifyParams+0x82>

0800feb8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800feb8:	f244 2340 	movw	r3, #16960	; 0x4240
 800febc:	f2c0 030f 	movt	r3, #15
 800fec0:	fa03 f000 	lsl.w	r0, r3, r0
}
 800fec4:	fbb0 f0f1 	udiv	r0, r0, r1
 800fec8:	4770      	bx	lr

0800feca <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800feca:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800fece:	fbb3 f0f0 	udiv	r0, r3, r0
 800fed2:	4770      	bx	lr

0800fed4 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800fed4:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800fed6:	f1a1 0c04 	sub.w	ip, r1, #4
 800feda:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800fede:	fb0e f202 	mul.w	r2, lr, r2
 800fee2:	fb00 220c 	mla	r2, r0, ip, r2
 800fee6:	0052      	lsls	r2, r2, #1
 800fee8:	d004      	beq.n	800fef4 <RegionCommonComputeRxWindowParameters+0x20>
 800feea:	f100 3cff 	add.w	ip, r0, #4294967295
 800feee:	4462      	add	r2, ip
 800fef0:	fbb2 f2f0 	udiv	r2, r2, r0
 800fef4:	4291      	cmp	r1, r2
 800fef6:	bf38      	it	cc
 800fef8:	4611      	movcc	r1, r2
 800fefa:	9a01      	ldr	r2, [sp, #4]
 800fefc:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800fefe:	0082      	lsls	r2, r0, #2
 800ff00:	fb00 f101 	mul.w	r1, r0, r1
 800ff04:	b1b9      	cbz	r1, 800ff36 <RegionCommonComputeRxWindowParameters+0x62>
 800ff06:	3101      	adds	r1, #1
 800ff08:	0849      	lsrs	r1, r1, #1
 800ff0a:	1a52      	subs	r2, r2, r1
 800ff0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ff10:	fb01 2313 	mls	r3, r1, r3, r2
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	bfc8      	it	gt
 800ff18:	f203 33e7 	addwgt	r3, r3, #999	; 0x3e7
 800ff1c:	f644 52d3 	movw	r2, #19923	; 0x4dd3
 800ff20:	f2c1 0262 	movt	r2, #4194	; 0x1062
 800ff24:	fb82 1203 	smull	r1, r2, r2, r3
 800ff28:	17db      	asrs	r3, r3, #31
 800ff2a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800ff2e:	9a02      	ldr	r2, [sp, #8]
 800ff30:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800ff32:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800ff36:	2100      	movs	r1, #0
 800ff38:	e7e7      	b.n	800ff0a <RegionCommonComputeRxWindowParameters+0x36>

0800ff3a <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800ff3a:	b538      	push	{r3, r4, r5, lr}
 800ff3c:	460d      	mov	r5, r1
 800ff3e:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800ff40:	0040      	lsls	r0, r0, #1
 800ff42:	f7f0 fea5 	bl	8000c90 <__aeabi_ui2f>
 800ff46:	4601      	mov	r1, r0
 800ff48:	4628      	mov	r0, r5
 800ff4a:	f7f0 fdef 	bl	8000b2c <__aeabi_fsub>
 800ff4e:	4621      	mov	r1, r4
 800ff50:	f7f0 fdec 	bl	8000b2c <__aeabi_fsub>
 800ff54:	f7f0 fa7c 	bl	8000450 <__aeabi_f2d>
 800ff58:	f004 fada 	bl	8014510 <floor>
 800ff5c:	f7f0 fd6a 	bl	8000a34 <__aeabi_d2iz>

    return phyTxPower;
}
 800ff60:	b240      	sxtb	r0, r0
 800ff62:	bd38      	pop	{r3, r4, r5, pc}

0800ff64 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800ff64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff68:	b083      	sub	sp, #12
 800ff6a:	9101      	str	r1, [sp, #4]
 800ff6c:	4690      	mov	r8, r2
 800ff6e:	4699      	mov	r9, r3
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800ff70:	8a03      	ldrh	r3, [r0, #16]
 800ff72:	b123      	cbz	r3, 800ff7e <RegionCommonCountNbOfEnabledChannels+0x1a>
 800ff74:	2600      	movs	r6, #0
 800ff76:	4634      	mov	r4, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800ff78:	4635      	mov	r5, r6
    uint8_t nbChannelCount = 0;
 800ff7a:	4631      	mov	r1, r6
 800ff7c:	e05f      	b.n	801003e <RegionCommonCountNbOfEnabledChannels+0xda>
    uint8_t nbRestrictedChannelsCount = 0;
 800ff7e:	2500      	movs	r5, #0
    uint8_t nbChannelCount = 0;
 800ff80:	4629      	mov	r1, r5
                }
                enabledChannels[nbChannelCount++] = i + j;
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800ff82:	f888 1000 	strb.w	r1, [r8]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800ff86:	f889 5000 	strb.w	r5, [r9]
}
 800ff8a:	b003      	add	sp, #12
 800ff8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800ff90:	f990 a001 	ldrsb.w	sl, [r0, #1]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800ff94:	f89b e008 	ldrb.w	lr, [fp, #8]
 800ff98:	f34e 0e03 	sbfx	lr, lr, #0, #4
    if( ( value >= min ) && ( value <= max ) )
 800ff9c:	fa4f fe8e 	sxtb.w	lr, lr
 800ffa0:	45d6      	cmp	lr, sl
 800ffa2:	dc1c      	bgt.n	800ffde <RegionCommonCountNbOfEnabledChannels+0x7a>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800ffa4:	f89b e008 	ldrb.w	lr, [fp, #8]
 800ffa8:	f34e 1e03 	sbfx	lr, lr, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800ffac:	fa4f fe8e 	sxtb.w	lr, lr
 800ffb0:	45d6      	cmp	lr, sl
 800ffb2:	db14      	blt.n	800ffde <RegionCommonCountNbOfEnabledChannels+0x7a>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800ffb4:	f89b e009 	ldrb.w	lr, [fp, #9]
 800ffb8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 800ffbc:	68c7      	ldr	r7, [r0, #12]
 800ffbe:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
 800ffc2:	f89e e014 	ldrb.w	lr, [lr, #20]
 800ffc6:	f1be 0f00 	cmp.w	lr, #0
 800ffca:	d02e      	beq.n	801002a <RegionCommonCountNbOfEnabledChannels+0xc6>
                enabledChannels[nbChannelCount++] = i + j;
 800ffcc:	f101 0e01 	add.w	lr, r1, #1
 800ffd0:	eb04 0a0c 	add.w	sl, r4, ip
 800ffd4:	9f01      	ldr	r7, [sp, #4]
 800ffd6:	f807 a001 	strb.w	sl, [r7, r1]
 800ffda:	fa5f f18e 	uxtb.w	r1, lr
        for( uint8_t j = 0; j < 16; j++ )
 800ffde:	f10c 0c01 	add.w	ip, ip, #1
 800ffe2:	330c      	adds	r3, #12
 800ffe4:	f1bc 0f10 	cmp.w	ip, #16
 800ffe8:	d022      	beq.n	8010030 <RegionCommonCountNbOfEnabledChannels+0xcc>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800ffea:	6847      	ldr	r7, [r0, #4]
 800ffec:	f837 e002 	ldrh.w	lr, [r7, r2]
 800fff0:	fa4e fe0c 	asr.w	lr, lr, ip
 800fff4:	f01e 0f01 	tst.w	lr, #1
 800fff8:	d0f1      	beq.n	800ffde <RegionCommonCountNbOfEnabledChannels+0x7a>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800fffa:	6887      	ldr	r7, [r0, #8]
 800fffc:	eb07 0b03 	add.w	fp, r7, r3
 8010000:	58ff      	ldr	r7, [r7, r3]
 8010002:	2f00      	cmp	r7, #0
 8010004:	d0eb      	beq.n	800ffde <RegionCommonCountNbOfEnabledChannels+0x7a>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8010006:	f890 e000 	ldrb.w	lr, [r0]
 801000a:	f1be 0f00 	cmp.w	lr, #0
 801000e:	d1bf      	bne.n	800ff90 <RegionCommonCountNbOfEnabledChannels+0x2c>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8010010:	f8d0 e014 	ldr.w	lr, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8010014:	f1be 0f00 	cmp.w	lr, #0
 8010018:	d0ba      	beq.n	800ff90 <RegionCommonCountNbOfEnabledChannels+0x2c>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801001a:	f83e e002 	ldrh.w	lr, [lr, r2]
 801001e:	fa4e fe0c 	asr.w	lr, lr, ip
 8010022:	f01e 0f01 	tst.w	lr, #1
 8010026:	d1b3      	bne.n	800ff90 <RegionCommonCountNbOfEnabledChannels+0x2c>
 8010028:	e7d9      	b.n	800ffde <RegionCommonCountNbOfEnabledChannels+0x7a>
                    nbRestrictedChannelsCount++;
 801002a:	3501      	adds	r5, #1
 801002c:	b2ed      	uxtb	r5, r5
                    continue;
 801002e:	e7d6      	b.n	800ffde <RegionCommonCountNbOfEnabledChannels+0x7a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8010030:	f104 0310 	add.w	r3, r4, #16
 8010034:	b2dc      	uxtb	r4, r3
 8010036:	3601      	adds	r6, #1
 8010038:	8a02      	ldrh	r2, [r0, #16]
 801003a:	42a2      	cmp	r2, r4
 801003c:	d9a1      	bls.n	800ff82 <RegionCommonCountNbOfEnabledChannels+0x1e>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801003e:	b2f2      	uxtb	r2, r6
 8010040:	0052      	lsls	r2, r2, #1
 8010042:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	f04f 0c00 	mov.w	ip, #0
 801004c:	e7cd      	b.n	800ffea <RegionCommonCountNbOfEnabledChannels+0x86>

0801004e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801004e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010052:	b085      	sub	sp, #20
 8010054:	4604      	mov	r4, r0
 8010056:	460f      	mov	r7, r1
 8010058:	4616      	mov	r6, r2
 801005a:	461d      	mov	r5, r3
 801005c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8010060:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8010064:	6840      	ldr	r0, [r0, #4]
 8010066:	f003 fe81 	bl	8013d6c <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801006a:	6823      	ldr	r3, [r4, #0]
 801006c:	1a1b      	subs	r3, r3, r0
 801006e:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 8010072:	2301      	movs	r3, #1
 8010074:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 8010078:	2300      	movs	r3, #0
 801007a:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801007c:	6863      	ldr	r3, [r4, #4]
 801007e:	b113      	cbz	r3, 8010086 <RegionCommonIdentifyChannels+0x38>
 8010080:	6823      	ldr	r3, [r4, #0]
 8010082:	4283      	cmp	r3, r0
 8010084:	d824      	bhi.n	80100d0 <RegionCommonIdentifyChannels+0x82>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8010086:	2300      	movs	r3, #0
 8010088:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801008a:	69e3      	ldr	r3, [r4, #28]
 801008c:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8010090:	781f      	ldrb	r7, [r3, #0]
 8010092:	69a3      	ldr	r3, [r4, #24]
 8010094:	9303      	str	r3, [sp, #12]
 8010096:	ab01      	add	r3, sp, #4
 8010098:	f104 020c 	add.w	r2, r4, #12
 801009c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80100a4:	7d23      	ldrb	r3, [r4, #20]
 80100a6:	9300      	str	r3, [sp, #0]
 80100a8:	7a23      	ldrb	r3, [r4, #8]
 80100aa:	7a62      	ldrb	r2, [r4, #9]
 80100ac:	4661      	mov	r1, ip
 80100ae:	4638      	mov	r0, r7
 80100b0:	f7ff fd49 	bl	800fb46 <RegionCommonUpdateBandTimeOff>
 80100b4:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80100b8:	4643      	mov	r3, r8
 80100ba:	462a      	mov	r2, r5
 80100bc:	4631      	mov	r1, r6
 80100be:	69e0      	ldr	r0, [r4, #28]
 80100c0:	f7ff ff50 	bl	800ff64 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80100c4:	782b      	ldrb	r3, [r5, #0]
 80100c6:	b11b      	cbz	r3, 80100d0 <RegionCommonIdentifyChannels+0x82>
    {
        *nextTxDelay = 0;
 80100c8:	2000      	movs	r0, #0
 80100ca:	f8c9 0000 	str.w	r0, [r9]
        return LORAMAC_STATUS_OK;
 80100ce:	e005      	b.n	80100dc <RegionCommonIdentifyChannels+0x8e>
    }
    else if( *nbRestrictedChannels > 0 )
 80100d0:	f898 3000 	ldrb.w	r3, [r8]
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	bf14      	ite	ne
 80100d8:	200b      	movne	r0, #11
 80100da:	200c      	moveq	r0, #12
    }
}
 80100dc:	b005      	add	sp, #20
 80100de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080100e2 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80100e2:	b570      	push	{r4, r5, r6, lr}
 80100e4:	b082      	sub	sp, #8
 80100e6:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 80100e8:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 80100ec:	f990 6002 	ldrsb.w	r6, [r0, #2]
 80100f0:	42a6      	cmp	r6, r4
 80100f2:	d010      	beq.n	8010116 <RegionCommonGetNextLowerTxDr+0x34>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80100f4:	3c01      	subs	r4, #1
 80100f6:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 80100f8:	42a6      	cmp	r6, r4
 80100fa:	d00c      	beq.n	8010116 <RegionCommonGetNextLowerTxDr+0x34>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80100fc:	68ab      	ldr	r3, [r5, #8]
 80100fe:	9301      	str	r3, [sp, #4]
 8010100:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8010104:	9300      	str	r3, [sp, #0]
 8010106:	4633      	mov	r3, r6
 8010108:	4622      	mov	r2, r4
 801010a:	6869      	ldr	r1, [r5, #4]
 801010c:	78e8      	ldrb	r0, [r5, #3]
 801010e:	f7ff fc60 	bl	800f9d2 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 8010112:	2800      	cmp	r0, #0
 8010114:	d0ee      	beq.n	80100f4 <RegionCommonGetNextLowerTxDr+0x12>

        return drLocal;
    }
}
 8010116:	4620      	mov	r0, r4
 8010118:	b002      	add	sp, #8
 801011a:	bd70      	pop	{r4, r5, r6, pc}

0801011c <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 801011c:	4288      	cmp	r0, r1
 801011e:	bfb8      	it	lt
 8010120:	4608      	movlt	r0, r1
 8010122:	4770      	bx	lr

08010124 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 8010124:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8010128:	f24d 0390 	movw	r3, #53392	; 0xd090
 801012c:	f2c0 0303 	movt	r3, #3
 8010130:	4298      	cmp	r0, r3
 8010132:	d009      	beq.n	8010148 <RegionCommonGetBandwidth+0x24>
 8010134:	f24a 1320 	movw	r3, #41248	; 0xa120
 8010138:	f2c0 0307 	movt	r3, #7
 801013c:	4298      	cmp	r0, r3
 801013e:	bf14      	ite	ne
 8010140:	2000      	movne	r0, #0
 8010142:	2001      	moveq	r0, #1
 8010144:	0040      	lsls	r0, r0, #1
 8010146:	4770      	bx	lr
 8010148:	2001      	movs	r0, #1
        case 250000:
            return 1;
        case 500000:
            return 2;
    }
}
 801014a:	4770      	bx	lr

0801014c <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 801014c:	b500      	push	{lr}
 801014e:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 8010150:	2805      	cmp	r0, #5
 8010152:	d814      	bhi.n	801017e <RegionCommonRxConfigPrint+0x32>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8010154:	9202      	str	r2, [sp, #8]
 8010156:	9101      	str	r1, [sp, #4]
 8010158:	f245 2310 	movw	r3, #21008	; 0x5210
 801015c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8010160:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010164:	9300      	str	r3, [sp, #0]
 8010166:	f245 13a8 	movw	r3, #20904	; 0x51a8
 801016a:	f6c0 0301 	movt	r3, #2049	; 0x801
 801016e:	2201      	movs	r2, #1
 8010170:	2100      	movs	r1, #0
 8010172:	2002      	movs	r0, #2
 8010174:	f004 f85a 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8010178:	b005      	add	sp, #20
 801017a:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801017e:	9201      	str	r2, [sp, #4]
 8010180:	9100      	str	r1, [sp, #0]
 8010182:	f245 13c8 	movw	r3, #20936	; 0x51c8
 8010186:	f6c0 0301 	movt	r3, #2049	; 0x801
 801018a:	2201      	movs	r2, #1
 801018c:	2100      	movs	r1, #0
 801018e:	2002      	movs	r0, #2
 8010190:	f004 f84c 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
}
 8010194:	e7f0      	b.n	8010178 <RegionCommonRxConfigPrint+0x2c>

08010196 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8010196:	b500      	push	{lr}
 8010198:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801019a:	9101      	str	r1, [sp, #4]
 801019c:	9000      	str	r0, [sp, #0]
 801019e:	f245 13e4 	movw	r3, #20964	; 0x51e4
 80101a2:	f6c0 0301 	movt	r3, #2049	; 0x801
 80101a6:	2201      	movs	r2, #1
 80101a8:	2100      	movs	r1, #0
 80101aa:	2002      	movs	r0, #2
 80101ac:	f004 f83e 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
}
 80101b0:	b003      	add	sp, #12
 80101b2:	f85d fb04 	ldr.w	pc, [sp], #4

080101b6 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 80101b6:	b538      	push	{r3, r4, r5, lr}
 80101b8:	4604      	mov	r4, r0
 80101ba:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80101bc:	f245 23d0 	movw	r3, #21200	; 0x52d0
 80101c0:	f6c0 0301 	movt	r3, #2049	; 0x801
 80101c4:	6a1b      	ldr	r3, [r3, #32]
 80101c6:	4798      	blx	r3
 80101c8:	b160      	cbz	r0, 80101e4 <VerifyRfFreq+0x2e>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80101ca:	f64a 2340 	movw	r3, #43584	; 0xaa40
 80101ce:	f6cc 438f 	movt	r3, #52367	; 0xcc8f
 80101d2:	4423      	add	r3, r4
 80101d4:	f248 427f 	movw	r2, #33919	; 0x847f
 80101d8:	f2c0 021e 	movt	r2, #30
 80101dc:	4293      	cmp	r3, r2
 80101de:	d802      	bhi.n	80101e6 <VerifyRfFreq+0x30>
    {
        *band = 2;
 80101e0:	2302      	movs	r3, #2
 80101e2:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 80101e4:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80101e6:	f44f 5317 	mov.w	r3, #9664	; 0x25c0
 80101ea:	f6cc 4371 	movt	r3, #52337	; 0xcc71
 80101ee:	4423      	add	r3, r4
 80101f0:	f24c 62c0 	movw	r2, #50880	; 0xc6c0
 80101f4:	f2c0 022d 	movt	r2, #45	; 0x2d
 80101f8:	4293      	cmp	r3, r2
 80101fa:	d802      	bhi.n	8010202 <VerifyRfFreq+0x4c>
        *band = 0;
 80101fc:	2300      	movs	r3, #0
 80101fe:	702b      	strb	r3, [r5, #0]
 8010200:	e7f0      	b.n	80101e4 <VerifyRfFreq+0x2e>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8010202:	f645 63ff 	movw	r3, #24319	; 0x5eff
 8010206:	f6cc 4343 	movt	r3, #52291	; 0xcc43
 801020a:	4423      	add	r3, r4
 801020c:	f242 72bf 	movw	r2, #10175	; 0x27bf
 8010210:	f2c0 0209 	movt	r2, #9
 8010214:	4293      	cmp	r3, r2
 8010216:	d802      	bhi.n	801021e <VerifyRfFreq+0x68>
        *band = 1;
 8010218:	2301      	movs	r3, #1
 801021a:	702b      	strb	r3, [r5, #0]
 801021c:	e7e2      	b.n	80101e4 <VerifyRfFreq+0x2e>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801021e:	f24b 03a0 	movw	r3, #45216	; 0xb0a0
 8010222:	f6cc 4338 	movt	r3, #52280	; 0xcc38
 8010226:	4423      	add	r3, r4
 8010228:	f24a 1220 	movw	r2, #41248	; 0xa120
 801022c:	f2c0 0207 	movt	r2, #7
 8010230:	4293      	cmp	r3, r2
 8010232:	d802      	bhi.n	801023a <VerifyRfFreq+0x84>
        *band = 5;
 8010234:	2305      	movs	r3, #5
 8010236:	702b      	strb	r3, [r5, #0]
 8010238:	e7d4      	b.n	80101e4 <VerifyRfFreq+0x2e>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801023a:	f44f 7310 	mov.w	r3, #576	; 0x240
 801023e:	f6cc 432e 	movt	r3, #52270	; 0xcc2e
 8010242:	4423      	add	r3, r4
 8010244:	f24d 0290 	movw	r2, #53392	; 0xd090
 8010248:	f2c0 0203 	movt	r2, #3
 801024c:	4293      	cmp	r3, r2
 801024e:	d802      	bhi.n	8010256 <VerifyRfFreq+0xa0>
        *band = 3;
 8010250:	2303      	movs	r3, #3
 8010252:	702b      	strb	r3, [r5, #0]
 8010254:	e7c6      	b.n	80101e4 <VerifyRfFreq+0x2e>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8010256:	f646 6360 	movw	r3, #28256	; 0x6e60
 801025a:	f6cc 4329 	movt	r3, #52265	; 0xcc29
 801025e:	4423      	add	r3, r4
 8010260:	f249 32e0 	movw	r2, #37856	; 0x93e0
 8010264:	f2c0 0204 	movt	r2, #4
 8010268:	4293      	cmp	r3, r2
        *band = 4;
 801026a:	bf9a      	itte	ls
 801026c:	2304      	movls	r3, #4
 801026e:	702b      	strbls	r3, [r5, #0]
        return false;
 8010270:	2000      	movhi	r0, #0
 8010272:	e7b7      	b.n	80101e4 <VerifyRfFreq+0x2e>

08010274 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8010274:	b570      	push	{r4, r5, r6, lr}
 8010276:	b084      	sub	sp, #16
 8010278:	4605      	mov	r5, r0
 801027a:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 801027c:	f245 2348 	movw	r3, #21064	; 0x5248
 8010280:	f6c0 0301 	movt	r3, #2049	; 0x801
 8010284:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8010286:	f245 2128 	movw	r1, #21032	; 0x5228
 801028a:	f6c0 0101 	movt	r1, #2049	; 0x801
 801028e:	f7ff ff49 	bl	8010124 <RegionCommonGetBandwidth>
 8010292:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 8010294:	2d07      	cmp	r5, #7
 8010296:	d011      	beq.n	80102bc <GetTimeOnAir+0x48>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8010298:	f245 23d0 	movw	r3, #21200	; 0x52d0
 801029c:	f6c0 0301 	movt	r3, #2049	; 0x801
 80102a0:	2001      	movs	r0, #1
 80102a2:	9003      	str	r0, [sp, #12]
 80102a4:	b2e4      	uxtb	r4, r4
 80102a6:	9402      	str	r4, [sp, #8]
 80102a8:	2200      	movs	r2, #0
 80102aa:	9201      	str	r2, [sp, #4]
 80102ac:	2208      	movs	r2, #8
 80102ae:	9200      	str	r2, [sp, #0]
 80102b0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80102b2:	4603      	mov	r3, r0
 80102b4:	4632      	mov	r2, r6
 80102b6:	47a0      	blx	r4
    }
    return timeOnAir;
}
 80102b8:	b004      	add	sp, #16
 80102ba:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80102bc:	f245 23d0 	movw	r3, #21200	; 0x52d0
 80102c0:	f6c0 0301 	movt	r3, #2049	; 0x801
 80102c4:	2201      	movs	r2, #1
 80102c6:	9203      	str	r2, [sp, #12]
 80102c8:	b2e4      	uxtb	r4, r4
 80102ca:	9402      	str	r4, [sp, #8]
 80102cc:	2000      	movs	r0, #0
 80102ce:	9001      	str	r0, [sp, #4]
 80102d0:	2205      	movs	r2, #5
 80102d2:	9200      	str	r2, [sp, #0]
 80102d4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80102d6:	4603      	mov	r3, r0
 80102d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80102dc:	fb06 f202 	mul.w	r2, r6, r2
 80102e0:	47a0      	blx	r4
 80102e2:	e7e9      	b.n	80102b8 <GetTimeOnAir+0x44>

080102e4 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80102e4:	b500      	push	{lr}
 80102e6:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 80102e8:	2300      	movs	r3, #0
 80102ea:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80102ec:	7803      	ldrb	r3, [r0, #0]
 80102ee:	3b0b      	subs	r3, #11
 80102f0:	2b2e      	cmp	r3, #46	; 0x2e
 80102f2:	d832      	bhi.n	801035a <RegionEU868GetPhyParam+0x76>
 80102f4:	e8df f003 	tbb	[pc, r3]
 80102f8:	443b3835 	.word	0x443b3835
 80102fc:	5854504d 	.word	0x5854504d
 8010300:	6864605c 	.word	0x6864605c
 8010304:	7a317431 	.word	0x7a317431
 8010308:	318f8c83 	.word	0x318f8c83
 801030c:	189a9631 	.word	0x189a9631
 8010310:	31313131 	.word	0x31313131
 8010314:	31313131 	.word	0x31313131
 8010318:	31313131 	.word	0x31313131
 801031c:	ada6a031 	.word	0xada6a031
 8010320:	b6b03131 	.word	0xb6b03131
 8010324:	b931      	.short	0xb931
 8010326:	c2          	.byte	0xc2
 8010327:	00          	.byte	0x00
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010328:	7843      	ldrb	r3, [r0, #1]
 801032a:	f88d 3004 	strb.w	r3, [sp, #4]
 801032e:	2307      	movs	r3, #7
 8010330:	f88d 3005 	strb.w	r3, [sp, #5]
 8010334:	2300      	movs	r3, #0
 8010336:	f88d 3006 	strb.w	r3, [sp, #6]
 801033a:	2310      	movs	r3, #16
 801033c:	f88d 3007 	strb.w	r3, [sp, #7]
            {
                .CurrentDr = getPhy->Datarate,
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8010340:	f241 63f0 	movw	r3, #5872	; 0x16f0
 8010344:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801034e:	9202      	str	r2, [sp, #8]
 8010350:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8010352:	a801      	add	r0, sp, #4
 8010354:	f7ff fec5 	bl	80100e2 <RegionCommonGetNextLowerTxDr>
 8010358:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
}
 801035a:	9804      	ldr	r0, [sp, #16]
 801035c:	b007      	add	sp, #28
 801035e:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8010362:	2340      	movs	r3, #64	; 0x40
 8010364:	9304      	str	r3, [sp, #16]
            break;
 8010366:	e7f8      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8010368:	2320      	movs	r3, #32
 801036a:	9304      	str	r3, [sp, #16]
            break;
 801036c:	e7f5      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801036e:	f245 2350 	movw	r3, #21072	; 0x5250
 8010372:	f6c0 0301 	movt	r3, #2049	; 0x801
 8010376:	f990 2001 	ldrsb.w	r2, [r0, #1]
 801037a:	5c9b      	ldrb	r3, [r3, r2]
 801037c:	9304      	str	r3, [sp, #16]
            break;
 801037e:	e7ec      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8010380:	f245 2358 	movw	r3, #21080	; 0x5258
 8010384:	f6c0 0301 	movt	r3, #2049	; 0x801
 8010388:	f990 2001 	ldrsb.w	r2, [r0, #1]
 801038c:	5c9b      	ldrb	r3, [r3, r2]
 801038e:	9304      	str	r3, [sp, #16]
            break;
 8010390:	e7e3      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8010392:	2301      	movs	r3, #1
 8010394:	9304      	str	r3, [sp, #16]
            break;
 8010396:	e7e0      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8010398:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801039c:	9304      	str	r3, [sp, #16]
            break;
 801039e:	e7dc      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80103a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80103a4:	9304      	str	r3, [sp, #16]
            break;
 80103a6:	e7d8      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80103a8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80103ac:	9304      	str	r3, [sp, #16]
            break;
 80103ae:	e7d4      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80103b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80103b4:	9304      	str	r3, [sp, #16]
            break;
 80103b6:	e7d0      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80103b8:	f241 7370 	movw	r3, #6000	; 0x1770
 80103bc:	9304      	str	r3, [sp, #16]
            break;
 80103be:	e7cc      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80103c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80103c4:	9304      	str	r3, [sp, #16]
            break;
 80103c6:	e7c8      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80103c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80103cc:	f64f 4018 	movw	r0, #64536	; 0xfc18
 80103d0:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 80103d4:	f000 fd96 	bl	8010f04 <randr>
 80103d8:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 80103dc:	9004      	str	r0, [sp, #16]
            break;
 80103de:	e7bc      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80103e0:	f24e 6308 	movw	r3, #58888	; 0xe608
 80103e4:	f2c3 33d3 	movt	r3, #13267	; 0x33d3
 80103e8:	9304      	str	r3, [sp, #16]
            break;
 80103ea:	e7b6      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80103ec:	f241 63f0 	movw	r3, #5872	; 0x16f0
 80103f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80103fa:	9304      	str	r3, [sp, #16]
            break;
 80103fc:	e7ad      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80103fe:	f241 63f0 	movw	r3, #5872	; 0x16f0
 8010402:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801040c:	9304      	str	r3, [sp, #16]
            break;
 801040e:	e7a4      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8010410:	2310      	movs	r3, #16
 8010412:	9304      	str	r3, [sp, #16]
            break;
 8010414:	e7a1      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8010416:	f241 63f0 	movw	r3, #5872	; 0x16f0
 801041a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	9304      	str	r3, [sp, #16]
            break;
 8010422:	e79a      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8010424:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8010428:	9304      	str	r3, [sp, #16]
            break;
 801042a:	e796      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801042c:	f649 139a 	movw	r3, #39322	; 0x999a
 8010430:	f2c4 0309 	movt	r3, #16393	; 0x4009
 8010434:	9304      	str	r3, [sp, #16]
            break;
 8010436:	e790      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8010438:	f24e 6308 	movw	r3, #58888	; 0xe608
 801043c:	f2c3 33d3 	movt	r3, #13267	; 0x33d3
 8010440:	9304      	str	r3, [sp, #16]
            break;
 8010442:	e78a      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8010444:	2311      	movs	r3, #17
 8010446:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801044a:	2302      	movs	r3, #2
 801044c:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 8010450:	e783      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8010452:	2303      	movs	r3, #3
 8010454:	9304      	str	r3, [sp, #16]
            break;
 8010456:	e780      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8010458:	f24e 6308 	movw	r3, #58888	; 0xe608
 801045c:	f2c3 33d3 	movt	r3, #13267	; 0x33d3
 8010460:	9304      	str	r3, [sp, #16]
            break;
 8010462:	e77a      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8010464:	2303      	movs	r3, #3
 8010466:	9304      	str	r3, [sp, #16]
            break;
 8010468:	e777      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801046a:	f245 2348 	movw	r3, #21064	; 0x5248
 801046e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8010472:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8010476:	5c9b      	ldrb	r3, [r3, r2]
 8010478:	9304      	str	r3, [sp, #16]
            break;
 801047a:	e76e      	b.n	801035a <RegionEU868GetPhyParam+0x76>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 801047c:	f245 2128 	movw	r1, #21032	; 0x5228
 8010480:	f6c0 0101 	movt	r1, #2049	; 0x801
 8010484:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8010488:	f7ff fe4c 	bl	8010124 <RegionCommonGetBandwidth>
 801048c:	9004      	str	r0, [sp, #16]
            break;
 801048e:	e764      	b.n	801035a <RegionEU868GetPhyParam+0x76>

08010490 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8010490:	b510      	push	{r4, lr}
 8010492:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8010494:	f241 62ec 	movw	r2, #5868	; 0x16ec
 8010498:	f2c2 0200 	movt	r2, #8192	; 0x2000
 801049c:	f241 63f0 	movw	r3, #5872	; 0x16f0
 80104a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80104a4:	6819      	ldr	r1, [r3, #0]
 80104a6:	7803      	ldrb	r3, [r0, #0]
 80104a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80104ac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80104b0:	7a5b      	ldrb	r3, [r3, #9]
 80104b2:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 80104b6:	6814      	ldr	r4, [r2, #0]
 80104b8:	6903      	ldr	r3, [r0, #16]
 80104ba:	9300      	str	r3, [sp, #0]
 80104bc:	68c3      	ldr	r3, [r0, #12]
 80104be:	7842      	ldrb	r2, [r0, #1]
 80104c0:	6881      	ldr	r1, [r0, #8]
 80104c2:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 80104c6:	f7ff fb17 	bl	800faf8 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 80104ca:	b002      	add	sp, #8
 80104cc:	bd10      	pop	{r4, pc}

080104ce <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80104ce:	b510      	push	{r4, lr}
 80104d0:	b0a4      	sub	sp, #144	; 0x90
 80104d2:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80104d4:	2290      	movs	r2, #144	; 0x90
 80104d6:	2100      	movs	r1, #0
 80104d8:	4668      	mov	r0, sp
 80104da:	f003 ff85 	bl	80143e8 <memset>
 80104de:	2364      	movs	r3, #100	; 0x64
 80104e0:	f8ad 3000 	strh.w	r3, [sp]
 80104e4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80104e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80104ec:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80104f0:	210a      	movs	r1, #10
 80104f2:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 80104f6:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 80104fa:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80104fe:	7a23      	ldrb	r3, [r4, #8]
 8010500:	2b01      	cmp	r3, #1
 8010502:	d03a      	beq.n	801057a <RegionEU868InitDefaults+0xac>
 8010504:	2b02      	cmp	r3, #2
 8010506:	d049      	beq.n	801059c <RegionEU868InitDefaults+0xce>
 8010508:	b10b      	cbz	r3, 801050e <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 801050a:	b024      	add	sp, #144	; 0x90
 801050c:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801050e:	6820      	ldr	r0, [r4, #0]
 8010510:	2800      	cmp	r0, #0
 8010512:	d0fa      	beq.n	801050a <RegionEU868InitDefaults+0x3c>
 8010514:	6862      	ldr	r2, [r4, #4]
 8010516:	2a00      	cmp	r2, #0
 8010518:	d0f7      	beq.n	801050a <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801051a:	f241 63ec 	movw	r3, #5868	; 0x16ec
 801051e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010522:	6018      	str	r0, [r3, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8010524:	f241 64f0 	movw	r4, #5872	; 0x16f0
 8010528:	f2c2 0400 	movt	r4, #8192	; 0x2000
 801052c:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801052e:	2290      	movs	r2, #144	; 0x90
 8010530:	4669      	mov	r1, sp
 8010532:	f000 fd0b 	bl	8010f4c <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8010536:	6824      	ldr	r4, [r4, #0]
 8010538:	f244 6334 	movw	r3, #17972	; 0x4634
 801053c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8010540:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010544:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8010548:	f104 0c0c 	add.w	ip, r4, #12
 801054c:	f103 020c 	add.w	r2, r3, #12
 8010550:	ca07      	ldmia	r2, {r0, r1, r2}
 8010552:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8010556:	f104 0c18 	add.w	ip, r4, #24
 801055a:	3318      	adds	r3, #24
 801055c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010560:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8010564:	2307      	movs	r3, #7
 8010566:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801056a:	2201      	movs	r2, #1
 801056c:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 8010570:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 8010574:	f7ff fab0 	bl	800fad8 <RegionCommonChanMaskCopy>
            break;
 8010578:	e7c7      	b.n	801050a <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801057a:	f241 63f0 	movw	r3, #5872	; 0x16f0
 801057e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010582:	6818      	ldr	r0, [r3, #0]
 8010584:	2300      	movs	r3, #0
 8010586:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8010588:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801058a:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801058c:	2201      	movs	r2, #1
 801058e:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 8010592:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8010596:	f7ff fa9f 	bl	800fad8 <RegionCommonChanMaskCopy>
            break;
 801059a:	e7b6      	b.n	801050a <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801059c:	f241 63f0 	movw	r3, #5872	; 0x16f0
 80105a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 80105aa:	f8b3 148c 	ldrh.w	r1, [r3, #1164]	; 0x48c
 80105ae:	430a      	orrs	r2, r1
 80105b0:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 80105b4:	e7a9      	b.n	801050a <RegionEU868InitDefaults+0x3c>

080105b6 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80105b6:	b500      	push	{lr}
 80105b8:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80105ba:	290f      	cmp	r1, #15
 80105bc:	d809      	bhi.n	80105d2 <RegionEU868Verify+0x1c>
 80105be:	e8df f001 	tbb	[pc, r1]
 80105c2:	080c      	.short	0x080c
 80105c4:	15080808 	.word	0x15080808
 80105c8:	3308291f 	.word	0x3308291f
 80105cc:	08080833 	.word	0x08080833
 80105d0:	3d08      	.short	0x3d08
 80105d2:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 80105d4:	b003      	add	sp, #12
 80105d6:	f85d fb04 	ldr.w	pc, [sp], #4
            uint8_t band = 0;
 80105da:	2300      	movs	r3, #0
 80105dc:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 80105e0:	f10d 0107 	add.w	r1, sp, #7
 80105e4:	6800      	ldr	r0, [r0, #0]
 80105e6:	f7ff fde6 	bl	80101b6 <VerifyRfFreq>
 80105ea:	e7f3      	b.n	80105d4 <RegionEU868Verify+0x1e>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80105ec:	2207      	movs	r2, #7
 80105ee:	2100      	movs	r1, #0
 80105f0:	f990 0000 	ldrsb.w	r0, [r0]
 80105f4:	f7ff fa24 	bl	800fa40 <RegionCommonValueInRange>
 80105f8:	3800      	subs	r0, #0
 80105fa:	bf18      	it	ne
 80105fc:	2001      	movne	r0, #1
 80105fe:	e7e9      	b.n	80105d4 <RegionEU868Verify+0x1e>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8010600:	2205      	movs	r2, #5
 8010602:	2100      	movs	r1, #0
 8010604:	f990 0000 	ldrsb.w	r0, [r0]
 8010608:	f7ff fa1a 	bl	800fa40 <RegionCommonValueInRange>
 801060c:	3800      	subs	r0, #0
 801060e:	bf18      	it	ne
 8010610:	2001      	movne	r0, #1
 8010612:	e7df      	b.n	80105d4 <RegionEU868Verify+0x1e>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8010614:	2207      	movs	r2, #7
 8010616:	2100      	movs	r1, #0
 8010618:	f990 0000 	ldrsb.w	r0, [r0]
 801061c:	f7ff fa10 	bl	800fa40 <RegionCommonValueInRange>
 8010620:	3800      	subs	r0, #0
 8010622:	bf18      	it	ne
 8010624:	2001      	movne	r0, #1
 8010626:	e7d5      	b.n	80105d4 <RegionEU868Verify+0x1e>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8010628:	2207      	movs	r2, #7
 801062a:	2100      	movs	r1, #0
 801062c:	f990 0000 	ldrsb.w	r0, [r0]
 8010630:	f7ff fa06 	bl	800fa40 <RegionCommonValueInRange>
 8010634:	3800      	subs	r0, #0
 8010636:	bf18      	it	ne
 8010638:	2001      	movne	r0, #1
 801063a:	e7cb      	b.n	80105d4 <RegionEU868Verify+0x1e>
            return EU868_DUTY_CYCLE_ENABLED;
 801063c:	2001      	movs	r0, #1
 801063e:	e7c9      	b.n	80105d4 <RegionEU868Verify+0x1e>

08010640 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8010640:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8010642:	7903      	ldrb	r3, [r0, #4]
 8010644:	b11b      	cbz	r3, 801064e <RegionEU868ChanMaskSet+0xe>
 8010646:	2b01      	cmp	r3, #1
 8010648:	d00e      	beq.n	8010668 <RegionEU868ChanMaskSet+0x28>
 801064a:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 801064c:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801064e:	f241 63f0 	movw	r3, #5872	; 0x16f0
 8010652:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	2201      	movs	r2, #1
 801065a:	6801      	ldr	r1, [r0, #0]
 801065c:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8010660:	f7ff fa3a 	bl	800fad8 <RegionCommonChanMaskCopy>
    return true;
 8010664:	2001      	movs	r0, #1
            break;
 8010666:	e7f1      	b.n	801064c <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8010668:	f241 63f0 	movw	r3, #5872	; 0x16f0
 801066c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	2201      	movs	r2, #1
 8010674:	6801      	ldr	r1, [r0, #0]
 8010676:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 801067a:	f7ff fa2d 	bl	800fad8 <RegionCommonChanMaskCopy>
    return true;
 801067e:	2001      	movs	r0, #1
            break;
 8010680:	e7e4      	b.n	801064c <RegionEU868ChanMaskSet+0xc>

08010682 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8010682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010684:	b083      	sub	sp, #12
 8010686:	460e      	mov	r6, r1
 8010688:	4617      	mov	r7, r2
 801068a:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801068c:	2807      	cmp	r0, #7
 801068e:	bfa8      	it	ge
 8010690:	2007      	movge	r0, #7
 8010692:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8010694:	f245 2128 	movw	r1, #21032	; 0x5228
 8010698:	f6c0 0101 	movt	r1, #2049	; 0x801
 801069c:	f7ff fd42 	bl	8010124 <RegionCommonGetBandwidth>
 80106a0:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80106a2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80106a6:	2b07      	cmp	r3, #7
 80106a8:	d020      	beq.n	80106ec <RegionEU868ComputeRxWindowParameters+0x6a>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80106aa:	f245 2128 	movw	r1, #21032	; 0x5228
 80106ae:	f6c0 0101 	movt	r1, #2049	; 0x801
 80106b2:	f245 2248 	movw	r2, #21064	; 0x5248
 80106b6:	f6c0 0201 	movt	r2, #2049	; 0x801
 80106ba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80106be:	5cd0      	ldrb	r0, [r2, r3]
 80106c0:	f7ff fbfa 	bl	800feb8 <RegionCommonComputeSymbolTimeLoRa>
 80106c4:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80106c6:	f245 23d0 	movw	r3, #21200	; 0x52d0
 80106ca:	f6c0 0301 	movt	r3, #2049	; 0x801
 80106ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106d0:	4798      	blx	r3
 80106d2:	4603      	mov	r3, r0
 80106d4:	f104 020c 	add.w	r2, r4, #12
 80106d8:	9201      	str	r2, [sp, #4]
 80106da:	3408      	adds	r4, #8
 80106dc:	9400      	str	r4, [sp, #0]
 80106de:	463a      	mov	r2, r7
 80106e0:	4631      	mov	r1, r6
 80106e2:	4628      	mov	r0, r5
 80106e4:	f7ff fbf6 	bl	800fed4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80106e8:	b003      	add	sp, #12
 80106ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80106ec:	2032      	movs	r0, #50	; 0x32
 80106ee:	f7ff fbec 	bl	800feca <RegionCommonComputeSymbolTimeFsk>
 80106f2:	4605      	mov	r5, r0
 80106f4:	e7e7      	b.n	80106c6 <RegionEU868ComputeRxWindowParameters+0x44>

080106f6 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80106f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106fa:	b08a      	sub	sp, #40	; 0x28
 80106fc:	4604      	mov	r4, r0
 80106fe:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8010700:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 8010704:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8010708:	f245 23d0 	movw	r3, #21200	; 0x52d0
 801070c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8010710:	685b      	ldr	r3, [r3, #4]
 8010712:	4798      	blx	r3
 8010714:	2800      	cmp	r0, #0
 8010716:	f040 8081 	bne.w	801081c <RegionEU868RxConfig+0x126>
 801071a:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801071c:	7ce3      	ldrb	r3, [r4, #19]
 801071e:	b98b      	cbnz	r3, 8010744 <RegionEU868RxConfig+0x4e>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8010720:	f241 62f0 	movw	r2, #5872	; 0x16f0
 8010724:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8010728:	7823      	ldrb	r3, [r4, #0]
 801072a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801072e:	0099      	lsls	r1, r3, #2
 8010730:	6812      	ldr	r2, [r2, #0]
 8010732:	eb02 0383 	add.w	r3, r2, r3, lsl #2
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8010736:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801073a:	f1b8 0f00 	cmp.w	r8, #0
 801073e:	d101      	bne.n	8010744 <RegionEU868RxConfig+0x4e>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8010740:	f852 8001 	ldr.w	r8, [r2, r1]
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8010744:	f245 2348 	movw	r3, #21064	; 0x5248
 8010748:	f6c0 0301 	movt	r3, #2049	; 0x801
 801074c:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 8010750:	f245 23d0 	movw	r3, #21200	; 0x52d0
 8010754:	f6c0 0301 	movt	r3, #2049	; 0x801
 8010758:	68db      	ldr	r3, [r3, #12]
 801075a:	4640      	mov	r0, r8
 801075c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801075e:	2d07      	cmp	r5, #7
 8010760:	d034      	beq.n	80107cc <RegionEU868RxConfig+0xd6>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8010762:	f245 22d0 	movw	r2, #21200	; 0x52d0
 8010766:	f6c0 0201 	movt	r2, #2049	; 0x801
 801076a:	7ca3      	ldrb	r3, [r4, #18]
 801076c:	9309      	str	r3, [sp, #36]	; 0x24
 801076e:	2601      	movs	r6, #1
 8010770:	9608      	str	r6, [sp, #32]
 8010772:	2300      	movs	r3, #0
 8010774:	9307      	str	r3, [sp, #28]
 8010776:	9306      	str	r3, [sp, #24]
 8010778:	9305      	str	r3, [sp, #20]
 801077a:	9304      	str	r3, [sp, #16]
 801077c:	9303      	str	r3, [sp, #12]
 801077e:	8921      	ldrh	r1, [r4, #8]
 8010780:	9102      	str	r1, [sp, #8]
 8010782:	2108      	movs	r1, #8
 8010784:	9101      	str	r1, [sp, #4]
 8010786:	9300      	str	r3, [sp, #0]
 8010788:	f8d2 a018 	ldr.w	sl, [r2, #24]
 801078c:	4633      	mov	r3, r6
 801078e:	464a      	mov	r2, r9
 8010790:	78a1      	ldrb	r1, [r4, #2]
 8010792:	4630      	mov	r0, r6
 8010794:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 8010796:	7c63      	ldrb	r3, [r4, #17]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d039      	beq.n	8010810 <RegionEU868RxConfig+0x11a>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801079c:	f245 2358 	movw	r3, #21080	; 0x5258
 80107a0:	f6c0 0301 	movt	r3, #2049	; 0x801
 80107a4:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80107a6:	310d      	adds	r1, #13
 80107a8:	f245 23d0 	movw	r3, #21200	; 0x52d0
 80107ac:	f6c0 0301 	movt	r3, #2049	; 0x801
 80107b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107b2:	b2c9      	uxtb	r1, r1
 80107b4:	4630      	mov	r0, r6
 80107b6:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80107b8:	462a      	mov	r2, r5
 80107ba:	4641      	mov	r1, r8
 80107bc:	7ce0      	ldrb	r0, [r4, #19]
 80107be:	f7ff fcc5 	bl	801014c <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80107c2:	703d      	strb	r5, [r7, #0]
    return true;
 80107c4:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80107c6:	b00a      	add	sp, #40	; 0x28
 80107c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80107cc:	f245 23d0 	movw	r3, #21200	; 0x52d0
 80107d0:	f6c0 0301 	movt	r3, #2049	; 0x801
 80107d4:	7ca2      	ldrb	r2, [r4, #18]
 80107d6:	9209      	str	r2, [sp, #36]	; 0x24
 80107d8:	2000      	movs	r0, #0
 80107da:	9008      	str	r0, [sp, #32]
 80107dc:	9007      	str	r0, [sp, #28]
 80107de:	9006      	str	r0, [sp, #24]
 80107e0:	2101      	movs	r1, #1
 80107e2:	9105      	str	r1, [sp, #20]
 80107e4:	9004      	str	r0, [sp, #16]
 80107e6:	9003      	str	r0, [sp, #12]
 80107e8:	8922      	ldrh	r2, [r4, #8]
 80107ea:	9202      	str	r2, [sp, #8]
 80107ec:	2205      	movs	r2, #5
 80107ee:	9201      	str	r2, [sp, #4]
 80107f0:	f244 5285 	movw	r2, #17797	; 0x4585
 80107f4:	f361 421f 	bfi	r2, r1, #16, #16
 80107f8:	9200      	str	r2, [sp, #0]
 80107fa:	f8d3 a018 	ldr.w	sl, [r3, #24]
 80107fe:	4603      	mov	r3, r0
 8010800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010804:	fb02 f209 	mul.w	r2, r2, r9
 8010808:	f24c 3150 	movw	r1, #50000	; 0xc350
 801080c:	47d0      	blx	sl
 801080e:	e7c2      	b.n	8010796 <RegionEU868RxConfig+0xa0>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8010810:	f245 2350 	movw	r3, #21072	; 0x5250
 8010814:	f6c0 0301 	movt	r3, #2049	; 0x801
 8010818:	5d59      	ldrb	r1, [r3, r5]
 801081a:	e7c4      	b.n	80107a6 <RegionEU868RxConfig+0xb0>
        return false;
 801081c:	2000      	movs	r0, #0
 801081e:	e7d2      	b.n	80107c6 <RegionEU868RxConfig+0xd0>

08010820 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8010820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010824:	b08b      	sub	sp, #44	; 0x2c
 8010826:	4604      	mov	r4, r0
 8010828:	460f      	mov	r7, r1
 801082a:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801082c:	f245 2348 	movw	r3, #21064	; 0x5248
 8010830:	f6c0 0301 	movt	r3, #2049	; 0x801
 8010834:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8010838:	f913 b002 	ldrsb.w	fp, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801083c:	f241 63ec 	movw	r3, #5868	; 0x16ec
 8010840:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010844:	681a      	ldr	r2, [r3, #0]
 8010846:	f241 65f0 	movw	r5, #5872	; 0x16f0
 801084a:	f2c2 0500 	movt	r5, #8192	; 0x2000
 801084e:	6829      	ldr	r1, [r5, #0]
 8010850:	7803      	ldrb	r3, [r0, #0]
 8010852:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010856:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801085a:	7a4b      	ldrb	r3, [r1, #9]
 801085c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010860:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010864:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8010868:	f990 0002 	ldrsb.w	r0, [r0, #2]
 801086c:	f7ff fc56 	bl	801011c <RegionCommonLimitTxPower>
 8010870:	4606      	mov	r6, r0
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8010872:	f245 2128 	movw	r1, #21032	; 0x5228
 8010876:	f6c0 0101 	movt	r1, #2049	; 0x801
 801087a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801087e:	f7ff fc51 	bl	8010124 <RegionCommonGetBandwidth>
 8010882:	4682      	mov	sl, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8010884:	68a2      	ldr	r2, [r4, #8]
 8010886:	6861      	ldr	r1, [r4, #4]
 8010888:	4630      	mov	r0, r6
 801088a:	f7ff fb56 	bl	800ff3a <RegionCommonComputeTxPower>
 801088e:	4681      	mov	r9, r0

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8010890:	682a      	ldr	r2, [r5, #0]
 8010892:	7825      	ldrb	r5, [r4, #0]
 8010894:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010898:	f245 23d0 	movw	r3, #21200	; 0x52d0
 801089c:	f6c0 0301 	movt	r3, #2049	; 0x801
 80108a0:	68db      	ldr	r3, [r3, #12]
 80108a2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80108a6:	4798      	blx	r3

    if( txConfig->Datarate == DR_7 )
 80108a8:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80108ac:	2b07      	cmp	r3, #7
 80108ae:	d03a      	beq.n	8010926 <RegionEU868TxConfig+0x106>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80108b0:	f245 23d0 	movw	r3, #21200	; 0x52d0
 80108b4:	f6c0 0301 	movt	r3, #2049	; 0x801
 80108b8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80108bc:	9208      	str	r2, [sp, #32]
 80108be:	2200      	movs	r2, #0
 80108c0:	9207      	str	r2, [sp, #28]
 80108c2:	9206      	str	r2, [sp, #24]
 80108c4:	9205      	str	r2, [sp, #20]
 80108c6:	2501      	movs	r5, #1
 80108c8:	9504      	str	r5, [sp, #16]
 80108ca:	9203      	str	r2, [sp, #12]
 80108cc:	2108      	movs	r1, #8
 80108ce:	9102      	str	r1, [sp, #8]
 80108d0:	9501      	str	r5, [sp, #4]
 80108d2:	f8cd b000 	str.w	fp, [sp]
 80108d6:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80108da:	4653      	mov	r3, sl
 80108dc:	4649      	mov	r1, r9
 80108de:	4628      	mov	r0, r5
 80108e0:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80108e2:	f241 63f0 	movw	r3, #5872	; 0x16f0
 80108e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80108ea:	681a      	ldr	r2, [r3, #0]
 80108ec:	7823      	ldrb	r3, [r4, #0]
 80108ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80108f2:	f994 1001 	ldrsb.w	r1, [r4, #1]
 80108f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80108fa:	f7ff fc4c 	bl	8010196 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80108fe:	89a1      	ldrh	r1, [r4, #12]
 8010900:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8010904:	f7ff fcb6 	bl	8010274 <GetTimeOnAir>
 8010908:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801090c:	f245 23d0 	movw	r3, #21200	; 0x52d0
 8010910:	f6c0 0301 	movt	r3, #2049	; 0x801
 8010914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010916:	7b21      	ldrb	r1, [r4, #12]
 8010918:	4628      	mov	r0, r5
 801091a:	4798      	blx	r3

    *txPower = txPowerLimited;
 801091c:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 801091e:	2001      	movs	r0, #1
 8010920:	b00b      	add	sp, #44	; 0x2c
 8010922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8010926:	f245 23d0 	movw	r3, #21200	; 0x52d0
 801092a:	f6c0 0301 	movt	r3, #2049	; 0x801
 801092e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8010932:	9208      	str	r2, [sp, #32]
 8010934:	2500      	movs	r5, #0
 8010936:	9507      	str	r5, [sp, #28]
 8010938:	9506      	str	r5, [sp, #24]
 801093a:	9505      	str	r5, [sp, #20]
 801093c:	2201      	movs	r2, #1
 801093e:	9204      	str	r2, [sp, #16]
 8010940:	9503      	str	r5, [sp, #12]
 8010942:	2205      	movs	r2, #5
 8010944:	9202      	str	r2, [sp, #8]
 8010946:	9501      	str	r5, [sp, #4]
 8010948:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801094c:	fb02 f20b 	mul.w	r2, r2, fp
 8010950:	9200      	str	r2, [sp, #0]
 8010952:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 8010956:	4653      	mov	r3, sl
 8010958:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801095c:	4649      	mov	r1, r9
 801095e:	4628      	mov	r0, r5
 8010960:	47d8      	blx	fp
 8010962:	e7be      	b.n	80108e2 <RegionEU868TxConfig+0xc2>

08010964 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8010964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010968:	b08d      	sub	sp, #52	; 0x34
 801096a:	4605      	mov	r5, r0
 801096c:	4689      	mov	r9, r1
 801096e:	4690      	mov	r8, r2
 8010970:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8010972:	2300      	movs	r3, #0
 8010974:	930a      	str	r3, [sp, #40]	; 0x28
 8010976:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 801097a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801097e:	7a04      	ldrb	r4, [r0, #8]
 8010980:	2c00      	cmp	r4, #0
 8010982:	d04c      	beq.n	8010a1e <RegionEU868LinkAdrReq+0xba>
    uint8_t bytesProcessed = 0;
 8010984:	461c      	mov	r4, r3
    uint8_t status = 0x07;
 8010986:	2607      	movs	r6, #7
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8010988:	f241 6af0 	movw	sl, #5872	; 0x16f0
 801098c:	f2c2 0a00 	movt	sl, #8192	; 0x2000
                        chMask |= 1 << i;
 8010990:	f04f 0b01 	mov.w	fp, #1
 8010994:	e007      	b.n	80109a6 <RegionEU868LinkAdrReq+0x42>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8010996:	1e53      	subs	r3, r2, #1
 8010998:	b2db      	uxtb	r3, r3
 801099a:	2b04      	cmp	r3, #4
 801099c:	d81b      	bhi.n	80109d6 <RegionEU868LinkAdrReq+0x72>
            status &= 0xFE; // Channel mask KO
 801099e:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80109a0:	7a2b      	ldrb	r3, [r5, #8]
 80109a2:	42a3      	cmp	r3, r4
 80109a4:	d93c      	bls.n	8010a20 <RegionEU868LinkAdrReq+0xbc>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80109a6:	6868      	ldr	r0, [r5, #4]
 80109a8:	a90a      	add	r1, sp, #40	; 0x28
 80109aa:	4420      	add	r0, r4
 80109ac:	f7ff fa15 	bl	800fdda <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 80109b0:	4603      	mov	r3, r0
 80109b2:	b3a8      	cbz	r0, 8010a20 <RegionEU868LinkAdrReq+0xbc>
        bytesProcessed += nextIndex;
 80109b4:	4423      	add	r3, r4
 80109b6:	b2dc      	uxtb	r4, r3
        chMask = linkAdrParams.ChMask;
 80109b8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80109bc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80109c0:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 80109c4:	2a00      	cmp	r2, #0
 80109c6:	d1e6      	bne.n	8010996 <RegionEU868LinkAdrReq+0x32>
 80109c8:	b33b      	cbz	r3, 8010a1a <RegionEU868LinkAdrReq+0xb6>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80109ca:	f8da c000 	ldr.w	ip, [sl]
 80109ce:	2100      	movs	r1, #0
 80109d0:	460b      	mov	r3, r1
 80109d2:	2607      	movs	r6, #7
 80109d4:	e013      	b.n	80109fe <RegionEU868LinkAdrReq+0x9a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80109d6:	2a06      	cmp	r2, #6
            status &= 0xFE; // Channel mask KO
 80109d8:	bf88      	it	hi
 80109da:	2606      	movhi	r6, #6
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80109dc:	d8e0      	bhi.n	80109a0 <RegionEU868LinkAdrReq+0x3c>
 80109de:	e7f4      	b.n	80109ca <RegionEU868LinkAdrReq+0x66>
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80109e0:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
 80109e4:	b138      	cbz	r0, 80109f6 <RegionEU868LinkAdrReq+0x92>
                        chMask |= 1 << i;
 80109e6:	fa0b f003 	lsl.w	r0, fp, r3
 80109ea:	f8bd e026 	ldrh.w	lr, [sp, #38]	; 0x26
 80109ee:	ea40 000e 	orr.w	r0, r0, lr
 80109f2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80109f6:	3301      	adds	r3, #1
 80109f8:	3103      	adds	r1, #3
 80109fa:	2b10      	cmp	r3, #16
 80109fc:	d0d0      	beq.n	80109a0 <RegionEU868LinkAdrReq+0x3c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 80109fe:	2a06      	cmp	r2, #6
 8010a00:	d0ee      	beq.n	80109e0 <RegionEU868LinkAdrReq+0x7c>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8010a02:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 8010a06:	4118      	asrs	r0, r3
 8010a08:	f010 0f01 	tst.w	r0, #1
 8010a0c:	d0f3      	beq.n	80109f6 <RegionEU868LinkAdrReq+0x92>
 8010a0e:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8010a12:	2800      	cmp	r0, #0
 8010a14:	bf08      	it	eq
 8010a16:	2606      	moveq	r6, #6
 8010a18:	e7ed      	b.n	80109f6 <RegionEU868LinkAdrReq+0x92>
            status &= 0xFE; // Channel mask KO
 8010a1a:	2606      	movs	r6, #6
 8010a1c:	e7c0      	b.n	80109a0 <RegionEU868LinkAdrReq+0x3c>
    uint8_t status = 0x07;
 8010a1e:	2607      	movs	r6, #7
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 8010a20:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8010a24:	7aab      	ldrb	r3, [r5, #10]
 8010a26:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8010a2a:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8010a2e:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8010a32:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8010a36:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8010a3a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8010a3e:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8010a42:	7aeb      	ldrb	r3, [r5, #11]
 8010a44:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8010a48:	7b2b      	ldrb	r3, [r5, #12]
 8010a4a:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8010a4e:	7b6b      	ldrb	r3, [r5, #13]
 8010a50:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8010a54:	2310      	movs	r3, #16
 8010a56:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8010a5a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8010a5e:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8010a60:	2200      	movs	r2, #0
 8010a62:	f88d 2018 	strb.w	r2, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8010a66:	2107      	movs	r1, #7
 8010a68:	f88d 1019 	strb.w	r1, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8010a6c:	f241 63f0 	movw	r3, #5872	; 0x16f0
 8010a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	9307      	str	r3, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8010a78:	f88d 1020 	strb.w	r1, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8010a7c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8010a80:	682b      	ldr	r3, [r5, #0]
 8010a82:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8010a84:	ab0a      	add	r3, sp, #40	; 0x28
 8010a86:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 8010a8a:	f10d 0129 	add.w	r1, sp, #41	; 0x29
 8010a8e:	a801      	add	r0, sp, #4
 8010a90:	f7ff f9bd 	bl	800fe0e <RegionCommonLinkAdrReqVerifyParams>
 8010a94:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8010a96:	2807      	cmp	r0, #7
 8010a98:	d010      	beq.n	8010abc <RegionEU868LinkAdrReq+0x158>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8010a9a:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8010a9e:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 8010aa2:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8010aa6:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 8010aaa:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8010aae:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 8010ab0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010ab2:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 8010ab4:	4628      	mov	r0, r5
 8010ab6:	b00d      	add	sp, #52	; 0x34
 8010ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8010abc:	f241 66f0 	movw	r6, #5872	; 0x16f0
 8010ac0:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8010ac4:	6830      	ldr	r0, [r6, #0]
 8010ac6:	220c      	movs	r2, #12
 8010ac8:	2100      	movs	r1, #0
 8010aca:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8010ace:	f000 fa57 	bl	8010f80 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8010ad2:	6833      	ldr	r3, [r6, #0]
 8010ad4:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8010ad8:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 8010adc:	e7dd      	b.n	8010a9a <RegionEU868LinkAdrReq+0x136>

08010ade <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8010ade:	b570      	push	{r4, r5, r6, lr}
 8010ae0:	b082      	sub	sp, #8
 8010ae2:	4605      	mov	r5, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8010ae4:	2600      	movs	r6, #0
 8010ae6:	f88d 6007 	strb.w	r6, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8010aea:	f10d 0107 	add.w	r1, sp, #7
 8010aee:	6840      	ldr	r0, [r0, #4]
 8010af0:	f7ff fb61 	bl	80101b6 <VerifyRfFreq>
 8010af4:	1d84      	adds	r4, r0, #6
 8010af6:	b2e4      	uxtb	r4, r4
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8010af8:	2207      	movs	r2, #7
 8010afa:	4631      	mov	r1, r6
 8010afc:	f995 0000 	ldrsb.w	r0, [r5]
 8010b00:	f7fe ff9e 	bl	800fa40 <RegionCommonValueInRange>
 8010b04:	b908      	cbnz	r0, 8010b0a <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 8010b06:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8010b0a:	2205      	movs	r2, #5
 8010b0c:	2100      	movs	r1, #0
 8010b0e:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8010b12:	f7fe ff95 	bl	800fa40 <RegionCommonValueInRange>
 8010b16:	b908      	cbnz	r0, 8010b1c <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8010b18:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	b002      	add	sp, #8
 8010b20:	bd70      	pop	{r4, r5, r6, pc}

08010b22 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 8010b22:	f04f 30ff 	mov.w	r0, #4294967295
 8010b26:	4770      	bx	lr

08010b28 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8010b28:	b510      	push	{r4, lr}
 8010b2a:	b082      	sub	sp, #8
    uint8_t status = 0x03;

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	f88d 3007 	strb.w	r3, [sp, #7]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8010b32:	7803      	ldrb	r3, [r0, #0]
 8010b34:	2b0f      	cmp	r3, #15
 8010b36:	d902      	bls.n	8010b3e <RegionEU868DlChannelReq+0x16>
    {
        return 0;
 8010b38:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 8010b3a:	b002      	add	sp, #8
 8010b3c:	bd10      	pop	{r4, pc}
 8010b3e:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8010b40:	f10d 0107 	add.w	r1, sp, #7
 8010b44:	6840      	ldr	r0, [r0, #4]
 8010b46:	f7ff fb36 	bl	80101b6 <VerifyRfFreq>
 8010b4a:	1c83      	adds	r3, r0, #2
 8010b4c:	b2db      	uxtb	r3, r3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8010b4e:	f241 61f0 	movw	r1, #5872	; 0x16f0
 8010b52:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8010b56:	7822      	ldrb	r2, [r4, #0]
 8010b58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010b5c:	6809      	ldr	r1, [r1, #0]
 8010b5e:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8010b62:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010b66:	b91a      	cbnz	r2, 8010b70 <RegionEU868DlChannelReq+0x48>
        status &= 0xFD;
 8010b68:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    return status;
 8010b6c:	b258      	sxtb	r0, r3
 8010b6e:	e7e4      	b.n	8010b3a <RegionEU868DlChannelReq+0x12>
    if( status == 0x03 )
 8010b70:	2b03      	cmp	r3, #3
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8010b72:	bf04      	itt	eq
 8010b74:	6862      	ldreq	r2, [r4, #4]
 8010b76:	6042      	streq	r2, [r0, #4]
 8010b78:	e7f8      	b.n	8010b6c <RegionEU868DlChannelReq+0x44>

08010b7a <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 8010b7a:	4770      	bx	lr

08010b7c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8010b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b7e:	b097      	sub	sp, #92	; 0x5c
 8010b80:	4604      	mov	r4, r0
 8010b82:	460f      	mov	r7, r1
 8010b84:	4616      	mov	r6, r2
 8010b86:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8010b88:	2100      	movs	r1, #0
 8010b8a:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 8010b8e:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8010b92:	9111      	str	r1, [sp, #68]	; 0x44
 8010b94:	9112      	str	r1, [sp, #72]	; 0x48
 8010b96:	9113      	str	r1, [sp, #76]	; 0x4c
 8010b98:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8010b9a:	2307      	movs	r3, #7
 8010b9c:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8010ba0:	f241 63f0 	movw	r3, #5872	; 0x16f0
 8010ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ba8:	6818      	ldr	r0, [r3, #0]
 8010baa:	2201      	movs	r2, #1
 8010bac:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8010bb0:	f7fe ff68 	bl	800fa84 <RegionCommonCountChannels>
 8010bb4:	b950      	cbnz	r0, 8010bcc <RegionEU868NextChannel+0x50>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8010bb6:	f241 63f0 	movw	r3, #5872	; 0x16f0
 8010bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010bbe:	681a      	ldr	r2, [r3, #0]
 8010bc0:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8010bc4:	f043 0307 	orr.w	r3, r3, #7
 8010bc8:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8010bcc:	7a63      	ldrb	r3, [r4, #9]
 8010bce:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8010bd2:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8010bd6:	f88d 200d 	strb.w	r2, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8010bda:	f241 63f0 	movw	r3, #5872	; 0x16f0
 8010bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	f503 6190 	add.w	r1, r3, #1152	; 0x480
 8010be8:	9104      	str	r1, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8010bea:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8010bec:	f241 63ec 	movw	r3, #5868	; 0x16ec
 8010bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	9306      	str	r3, [sp, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8010bf8:	2310      	movs	r3, #16
 8010bfa:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 8010bfe:	f10d 030a 	add.w	r3, sp, #10
 8010c02:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8010c04:	6823      	ldr	r3, [r4, #0]
 8010c06:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8010c08:	6863      	ldr	r3, [r4, #4]
 8010c0a:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8010c0c:	7aa3      	ldrb	r3, [r4, #10]
 8010c0e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8010c12:	2306      	movs	r3, #6
 8010c14:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8010c18:	ab0c      	add	r3, sp, #48	; 0x30
 8010c1a:	f104 010c 	add.w	r1, r4, #12
 8010c1e:	c903      	ldmia	r1, {r0, r1}
 8010c20:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8010c24:	7d23      	ldrb	r3, [r4, #20]
 8010c26:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8010c2a:	8ae1      	ldrh	r1, [r4, #22]
 8010c2c:	4610      	mov	r0, r2
 8010c2e:	f7ff fb21 	bl	8010274 <GetTimeOnAir>
 8010c32:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8010c34:	ab03      	add	r3, sp, #12
 8010c36:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8010c38:	9601      	str	r6, [sp, #4]
 8010c3a:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 8010c3e:	9300      	str	r3, [sp, #0]
 8010c40:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 8010c44:	aa11      	add	r2, sp, #68	; 0x44
 8010c46:	4629      	mov	r1, r5
 8010c48:	a809      	add	r0, sp, #36	; 0x24
 8010c4a:	f7ff fa00 	bl	801004e <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8010c4e:	4604      	mov	r4, r0
 8010c50:	b120      	cbz	r0, 8010c5c <RegionEU868NextChannel+0xe0>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8010c52:	280c      	cmp	r0, #12
 8010c54:	d00f      	beq.n	8010c76 <RegionEU868NextChannel+0xfa>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8010c56:	4620      	mov	r0, r4
 8010c58:	b017      	add	sp, #92	; 0x5c
 8010c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8010c5c:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 8010c60:	3901      	subs	r1, #1
 8010c62:	f000 f94f 	bl	8010f04 <randr>
 8010c66:	f100 0358 	add.w	r3, r0, #88	; 0x58
 8010c6a:	eb0d 0003 	add.w	r0, sp, r3
 8010c6e:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 8010c72:	703b      	strb	r3, [r7, #0]
 8010c74:	e7ef      	b.n	8010c56 <RegionEU868NextChannel+0xda>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8010c76:	f241 63f0 	movw	r3, #5872	; 0x16f0
 8010c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c7e:	681a      	ldr	r2, [r3, #0]
 8010c80:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8010c84:	f043 0307 	orr.w	r3, r3, #7
 8010c88:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 8010c8c:	e7e3      	b.n	8010c56 <RegionEU868NextChannel+0xda>

08010c8e <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8010c8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c90:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8010c92:	2300      	movs	r3, #0
 8010c94:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 8010c98:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8010c9a:	2d02      	cmp	r5, #2
 8010c9c:	d94a      	bls.n	8010d34 <RegionEU868ChannelAdd+0xa6>
 8010c9e:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8010ca0:	2d0f      	cmp	r5, #15
 8010ca2:	d849      	bhi.n	8010d38 <RegionEU868ChannelAdd+0xaa>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8010ca4:	6803      	ldr	r3, [r0, #0]
 8010ca6:	7a18      	ldrb	r0, [r3, #8]
 8010ca8:	f340 0003 	sbfx	r0, r0, #0, #4
 8010cac:	2207      	movs	r2, #7
 8010cae:	2100      	movs	r1, #0
 8010cb0:	b240      	sxtb	r0, r0
 8010cb2:	f7fe fec5 	bl	800fa40 <RegionCommonValueInRange>
 8010cb6:	4606      	mov	r6, r0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8010cb8:	6823      	ldr	r3, [r4, #0]
 8010cba:	7a1b      	ldrb	r3, [r3, #8]
 8010cbc:	f343 1303 	sbfx	r3, r3, #4, #4
 8010cc0:	2207      	movs	r2, #7
 8010cc2:	2100      	movs	r1, #0
 8010cc4:	b258      	sxtb	r0, r3
 8010cc6:	f7fe febb 	bl	800fa40 <RegionCommonValueInRange>
 8010cca:	2800      	cmp	r0, #0
 8010ccc:	d042      	beq.n	8010d54 <RegionEU868ChannelAdd+0xc6>
    {
        drInvalid = true;
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8010cce:	6822      	ldr	r2, [r4, #0]
 8010cd0:	7a13      	ldrb	r3, [r2, #8]
 8010cd2:	f343 0103 	sbfx	r1, r3, #0, #4
 8010cd6:	f343 1303 	sbfx	r3, r3, #4, #4
 8010cda:	b249      	sxtb	r1, r1
 8010cdc:	b25b      	sxtb	r3, r3
 8010cde:	4299      	cmp	r1, r3
 8010ce0:	dc42      	bgt.n	8010d68 <RegionEU868ChannelAdd+0xda>
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8010ce2:	f10d 0107 	add.w	r1, sp, #7
 8010ce6:	6810      	ldr	r0, [r2, #0]
 8010ce8:	f7ff fa65 	bl	80101b6 <VerifyRfFreq>
 8010cec:	f080 0301 	eor.w	r3, r0, #1
 8010cf0:	b2db      	uxtb	r3, r3
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8010cf2:	2e00      	cmp	r6, #0
 8010cf4:	d040      	beq.n	8010d78 <RegionEU868ChannelAdd+0xea>
    }
    if( drInvalid == true )
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 8010cf6:	bb13      	cbnz	r3, 8010d3e <RegionEU868ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8010cf8:	f241 67f0 	movw	r7, #5872	; 0x16f0
 8010cfc:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8010d00:	006e      	lsls	r6, r5, #1
 8010d02:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	220c      	movs	r2, #12
 8010d0a:	6821      	ldr	r1, [r4, #0]
 8010d0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010d10:	f000 f91c 	bl	8010f4c <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8010d14:	683a      	ldr	r2, [r7, #0]
 8010d16:	442e      	add	r6, r5
 8010d18:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010d1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010d20:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8010d22:	2301      	movs	r3, #1
 8010d24:	40ab      	lsls	r3, r5
 8010d26:	f8b2 1480 	ldrh.w	r1, [r2, #1152]	; 0x480
 8010d2a:	430b      	orrs	r3, r1
 8010d2c:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8010d30:	2000      	movs	r0, #0
 8010d32:	e002      	b.n	8010d3a <RegionEU868ChannelAdd+0xac>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8010d34:	2006      	movs	r0, #6
 8010d36:	e000      	b.n	8010d3a <RegionEU868ChannelAdd+0xac>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010d38:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8010d3a:	b003      	add	sp, #12
 8010d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8010d3e:	2004      	movs	r0, #4
 8010d40:	e7fb      	b.n	8010d3a <RegionEU868ChannelAdd+0xac>
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8010d42:	f10d 0107 	add.w	r1, sp, #7
 8010d46:	6810      	ldr	r0, [r2, #0]
 8010d48:	f7ff fa35 	bl	80101b6 <VerifyRfFreq>
 8010d4c:	f080 0301 	eor.w	r3, r0, #1
 8010d50:	b2db      	uxtb	r3, r3
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8010d52:	e011      	b.n	8010d78 <RegionEU868ChannelAdd+0xea>
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8010d54:	6822      	ldr	r2, [r4, #0]
 8010d56:	7a13      	ldrb	r3, [r2, #8]
 8010d58:	f343 0103 	sbfx	r1, r3, #0, #4
 8010d5c:	f343 1303 	sbfx	r3, r3, #4, #4
 8010d60:	b249      	sxtb	r1, r1
 8010d62:	b25b      	sxtb	r3, r3
 8010d64:	4299      	cmp	r1, r3
 8010d66:	ddec      	ble.n	8010d42 <RegionEU868ChannelAdd+0xb4>
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8010d68:	f10d 0107 	add.w	r1, sp, #7
 8010d6c:	6810      	ldr	r0, [r2, #0]
 8010d6e:	f7ff fa22 	bl	80101b6 <VerifyRfFreq>
 8010d72:	f080 0301 	eor.w	r3, r0, #1
 8010d76:	b2db      	uxtb	r3, r3
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8010d78:	1d58      	adds	r0, r3, #5
 8010d7a:	b2c0      	uxtb	r0, r0
 8010d7c:	e7dd      	b.n	8010d3a <RegionEU868ChannelAdd+0xac>

08010d7e <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8010d7e:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8010d80:	2902      	cmp	r1, #2
 8010d82:	d801      	bhi.n	8010d88 <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 8010d84:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 8010d86:	4770      	bx	lr
{
 8010d88:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8010d8a:	f241 63f0 	movw	r3, #5872	; 0x16f0
 8010d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d92:	6818      	ldr	r0, [r3, #0]
 8010d94:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8010d98:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8010d9c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8010da0:	2200      	movs	r2, #0
 8010da2:	f840 200c 	str.w	r2, [r0, ip]
 8010da6:	605a      	str	r2, [r3, #4]
 8010da8:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8010daa:	2210      	movs	r2, #16
 8010dac:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8010db0:	f7fe fe4f 	bl	800fa52 <RegionCommonChanDisable>
}
 8010db4:	bd08      	pop	{r3, pc}

08010db6 <RegionEU868ApplyCFList>:
{
 8010db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dba:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8010dbc:	2350      	movs	r3, #80	; 0x50
 8010dbe:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 8010dc2:	7903      	ldrb	r3, [r0, #4]
 8010dc4:	2b10      	cmp	r3, #16
 8010dc6:	d133      	bne.n	8010e30 <RegionEU868ApplyCFList+0x7a>
 8010dc8:	4607      	mov	r7, r0
    if( applyCFList->Payload[15] != 0 )
 8010dca:	6803      	ldr	r3, [r0, #0]
 8010dcc:	7bdb      	ldrb	r3, [r3, #15]
 8010dce:	bb7b      	cbnz	r3, 8010e30 <RegionEU868ApplyCFList+0x7a>
 8010dd0:	2500      	movs	r5, #0
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8010dd2:	2403      	movs	r4, #3
            newChannel.Frequency = 0;
 8010dd4:	462e      	mov	r6, r5
            newChannel.Frequency *= 100;
 8010dd6:	f04f 0864 	mov.w	r8, #100	; 0x64
 8010dda:	e019      	b.n	8010e10 <RegionEU868ApplyCFList+0x5a>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8010ddc:	683a      	ldr	r2, [r7, #0]
 8010dde:	5d53      	ldrb	r3, [r2, r5]
 8010de0:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8010de2:	442a      	add	r2, r5
 8010de4:	7851      	ldrb	r1, [r2, #1]
 8010de6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8010dea:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8010dec:	7892      	ldrb	r2, [r2, #2]
 8010dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 8010df2:	fb08 f303 	mul.w	r3, r8, r3
 8010df6:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 8010df8:	9604      	str	r6, [sp, #16]
        if( newChannel.Frequency != 0 )
 8010dfa:	b17b      	cbz	r3, 8010e1c <RegionEU868ApplyCFList+0x66>
            channelAdd.NewChannel = &newChannel;
 8010dfc:	ab03      	add	r3, sp, #12
 8010dfe:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 8010e00:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 8010e04:	a801      	add	r0, sp, #4
 8010e06:	f7ff ff42 	bl	8010c8e <RegionEU868ChannelAdd>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8010e0a:	3401      	adds	r4, #1
 8010e0c:	b2e4      	uxtb	r4, r4
 8010e0e:	3503      	adds	r5, #3
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8010e10:	2c07      	cmp	r4, #7
 8010e12:	d9e3      	bls.n	8010ddc <RegionEU868ApplyCFList+0x26>
            newChannel.Frequency = 0;
 8010e14:	9603      	str	r6, [sp, #12]
            newChannel.DrRange.Value = 0;
 8010e16:	f88d 6014 	strb.w	r6, [sp, #20]
            newChannel.Rx1Frequency = 0;
 8010e1a:	9604      	str	r6, [sp, #16]
            channelRemove.ChannelId = chanIdx;
 8010e1c:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 8010e20:	4668      	mov	r0, sp
 8010e22:	f7ff ffac 	bl	8010d7e <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8010e26:	3401      	adds	r4, #1
 8010e28:	b2e4      	uxtb	r4, r4
 8010e2a:	3503      	adds	r5, #3
 8010e2c:	2c10      	cmp	r4, #16
 8010e2e:	d1ef      	bne.n	8010e10 <RegionEU868ApplyCFList+0x5a>
}
 8010e30:	b006      	add	sp, #24
 8010e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010e36 <RegionEU868NewChannelReq>:
{
 8010e36:	b500      	push	{lr}
 8010e38:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 8010e3a:	6803      	ldr	r3, [r0, #0]
 8010e3c:	681a      	ldr	r2, [r3, #0]
 8010e3e:	b962      	cbnz	r2, 8010e5a <RegionEU868NewChannelReq+0x24>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8010e40:	7903      	ldrb	r3, [r0, #4]
 8010e42:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8010e46:	a801      	add	r0, sp, #4
 8010e48:	f7ff ff99 	bl	8010d7e <RegionEU868ChannelsRemove>
            status &= 0xFC;
 8010e4c:	2800      	cmp	r0, #0
 8010e4e:	bf14      	ite	ne
 8010e50:	2003      	movne	r0, #3
 8010e52:	2000      	moveq	r0, #0
}
 8010e54:	b005      	add	sp, #20
 8010e56:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8010e5a:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8010e5c:	7903      	ldrb	r3, [r0, #4]
 8010e5e:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8010e62:	a802      	add	r0, sp, #8
 8010e64:	f7ff ff13 	bl	8010c8e <RegionEU868ChannelAdd>
 8010e68:	2806      	cmp	r0, #6
 8010e6a:	d80b      	bhi.n	8010e84 <RegionEU868NewChannelReq+0x4e>
 8010e6c:	e8df f000 	tbb	[pc, r0]
 8010e70:	0a0a0a0c 	.word	0x0a0a0a0c
 8010e74:	0604      	.short	0x0604
 8010e76:	08          	.byte	0x08
 8010e77:	00          	.byte	0x00
 8010e78:	2002      	movs	r0, #2
 8010e7a:	e7eb      	b.n	8010e54 <RegionEU868NewChannelReq+0x1e>
                status &= 0xFD;
 8010e7c:	2001      	movs	r0, #1
                break;
 8010e7e:	e7e9      	b.n	8010e54 <RegionEU868NewChannelReq+0x1e>
                status &= 0xFC;
 8010e80:	2000      	movs	r0, #0
                break;
 8010e82:	e7e7      	b.n	8010e54 <RegionEU868NewChannelReq+0x1e>
                status &= 0xFC;
 8010e84:	2000      	movs	r0, #0
                break;
 8010e86:	e7e5      	b.n	8010e54 <RegionEU868NewChannelReq+0x1e>
    uint8_t status = 0x03;
 8010e88:	2003      	movs	r0, #3
 8010e8a:	e7e3      	b.n	8010e54 <RegionEU868NewChannelReq+0x1e>

08010e8c <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8010e8c:	b538      	push	{r3, r4, r5, lr}
 8010e8e:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8010e90:	f241 63ec 	movw	r3, #5868	; 0x16ec
 8010e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e98:	681a      	ldr	r2, [r3, #0]
 8010e9a:	f241 65f0 	movw	r5, #5872	; 0x16f0
 8010e9e:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8010ea2:	6829      	ldr	r1, [r5, #0]
 8010ea4:	7803      	ldrb	r3, [r0, #0]
 8010ea6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010eaa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010eae:	7a4b      	ldrb	r3, [r1, #9]
 8010eb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010eb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010eb8:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8010ebc:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8010ec0:	f7ff f92c 	bl	801011c <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8010ec4:	682a      	ldr	r2, [r5, #0]
 8010ec6:	7823      	ldrb	r3, [r4, #0]
 8010ec8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010ecc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8010ed0:	68a2      	ldr	r2, [r4, #8]
 8010ed2:	6861      	ldr	r1, [r4, #4]
 8010ed4:	f7ff f831 	bl	800ff3a <RegionCommonComputeTxPower>
 8010ed8:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8010eda:	f245 23d0 	movw	r3, #21200	; 0x52d0
 8010ede:	f6c0 0301 	movt	r3, #2049	; 0x801
 8010ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ee4:	89a2      	ldrh	r2, [r4, #12]
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8010eea:	bd38      	pop	{r3, r4, r5, pc}

08010eec <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8010eec:	1a88      	subs	r0, r1, r2

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 8010eee:	b240      	sxtb	r0, r0
 8010ef0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
#else
    return 0;
#endif /* REGION_EU868 */
}
 8010ef4:	b2c0      	uxtb	r0, r0
 8010ef6:	4770      	bx	lr

08010ef8 <srand1>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
}

void srand1( uint32_t seed )
{
    next = seed;
 8010ef8:	f240 130c 	movw	r3, #268	; 0x10c
 8010efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f00:	6018      	str	r0, [r3, #0]
}
 8010f02:	4770      	bx	lr

08010f04 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8010f04:	b500      	push	{lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8010f06:	f240 120c 	movw	r2, #268	; 0x10c
 8010f0a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8010f0e:	f644 6c6d 	movw	ip, #20077	; 0x4e6d
 8010f12:	f2c4 1cc6 	movt	ip, #16838	; 0x41c6
 8010f16:	f243 0339 	movw	r3, #12345	; 0x3039
 8010f1a:	f8d2 e000 	ldr.w	lr, [r2]
 8010f1e:	fb0c 330e 	mla	r3, ip, lr, r3
 8010f22:	6013      	str	r3, [r2, #0]
 8010f24:	2203      	movs	r2, #3
 8010f26:	fba2 c203 	umull	ip, r2, r2, r3
 8010f2a:	eba3 0c02 	sub.w	ip, r3, r2
 8010f2e:	eb02 025c 	add.w	r2, r2, ip, lsr #1
 8010f32:	0f92      	lsrs	r2, r2, #30
 8010f34:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
 8010f38:	1a9b      	subs	r3, r3, r2
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8010f3a:	1a09      	subs	r1, r1, r0
 8010f3c:	3101      	adds	r1, #1
 8010f3e:	fb93 f2f1 	sdiv	r2, r3, r1
 8010f42:	fb01 3312 	mls	r3, r1, r2, r3
}
 8010f46:	4418      	add	r0, r3
 8010f48:	f85d fb04 	ldr.w	pc, [sp], #4

08010f4c <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8010f4c:	1e53      	subs	r3, r2, #1
 8010f4e:	b29b      	uxth	r3, r3
 8010f50:	b142      	cbz	r2, 8010f64 <memcpy1+0x18>
 8010f52:	3801      	subs	r0, #1
 8010f54:	3301      	adds	r3, #1
 8010f56:	18ca      	adds	r2, r1, r3
    {
        *dst++ = *src++;
 8010f58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f5c:	f800 3f01 	strb.w	r3, [r0, #1]!
    while( size-- )
 8010f60:	4291      	cmp	r1, r2
 8010f62:	d1f9      	bne.n	8010f58 <memcpy1+0xc>
    }
}
 8010f64:	4770      	bx	lr

08010f66 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
    while( size-- )
 8010f66:	1e53      	subs	r3, r2, #1
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	b142      	cbz	r2, 8010f7e <memcpyr+0x18>
 8010f6c:	4410      	add	r0, r2
 8010f6e:	3301      	adds	r3, #1
 8010f70:	18ca      	adds	r2, r1, r3
    {
        *dst-- = *src++;
 8010f72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f76:	f800 3d01 	strb.w	r3, [r0, #-1]!
    while( size-- )
 8010f7a:	4291      	cmp	r1, r2
 8010f7c:	d1f9      	bne.n	8010f72 <memcpyr+0xc>
    }
}
 8010f7e:	4770      	bx	lr

08010f80 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 8010f80:	1e53      	subs	r3, r2, #1
 8010f82:	b29b      	uxth	r3, r3
 8010f84:	b12a      	cbz	r2, 8010f92 <memset1+0x12>
 8010f86:	3301      	adds	r3, #1
 8010f88:	4403      	add	r3, r0
    {
        *dst++ = value;
 8010f8a:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8010f8e:	4298      	cmp	r0, r3
 8010f90:	d1fb      	bne.n	8010f8a <memset1+0xa>
    }
}
 8010f92:	4770      	bx	lr

08010f94 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8010f94:	b300      	cbz	r0, 8010fd8 <Crc32+0x44>
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 8010f96:	b309      	cbz	r1, 8010fdc <Crc32+0x48>
{
 8010f98:	b510      	push	{r4, lr}
 8010f9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8010f9e:	3901      	subs	r1, #1
 8010fa0:	fa10 fe81 	uxtah	lr, r0, r1
    uint32_t crc = 0xFFFFFFFF;
 8010fa4:	f04f 31ff 	mov.w	r1, #4294967295
    {
        crc ^= ( uint32_t )buffer[i];
 8010fa8:	2408      	movs	r4, #8
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8010faa:	f248 3020 	movw	r0, #33568	; 0x8320
 8010fae:	f6ce 50b8 	movt	r0, #60856	; 0xedb8
 8010fb2:	e001      	b.n	8010fb8 <Crc32+0x24>
    for( uint16_t i = 0; i < length; ++i )
 8010fb4:	45f4      	cmp	ip, lr
 8010fb6:	d00d      	beq.n	8010fd4 <Crc32+0x40>
        crc ^= ( uint32_t )buffer[i];
 8010fb8:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8010fbc:	4059      	eors	r1, r3
 8010fbe:	4623      	mov	r3, r4
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8010fc0:	f341 0200 	sbfx	r2, r1, #0, #1
 8010fc4:	4002      	ands	r2, r0
 8010fc6:	ea82 0151 	eor.w	r1, r2, r1, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 8010fca:	3b01      	subs	r3, #1
 8010fcc:	b29b      	uxth	r3, r3
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d1f6      	bne.n	8010fc0 <Crc32+0x2c>
 8010fd2:	e7ef      	b.n	8010fb4 <Crc32+0x20>
        }
    }

    return ~crc;
 8010fd4:	43c8      	mvns	r0, r1
}
 8010fd6:	bd10      	pop	{r4, pc}
        return 0;
 8010fd8:	2000      	movs	r0, #0
 8010fda:	4770      	bx	lr
    uint32_t crc = 0xFFFFFFFF;
 8010fdc:	f04f 31ff 	mov.w	r1, #4294967295
    return ~crc;
 8010fe0:	43c8      	mvns	r0, r1
}
 8010fe2:	4770      	bx	lr

08010fe4 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8010fe4:	2001      	movs	r0, #1
 8010fe6:	4770      	bx	lr

08010fe8 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8010fe8:	b570      	push	{r4, r5, r6, lr}
 8010fea:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8010fee:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8010ff2:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8010ff6:	f89d c01c 	ldrb.w	ip, [sp, #28]
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8010ffa:	b148      	cbz	r0, 8011010 <RadioTimeOnAir+0x28>
 8010ffc:	4686      	mov	lr, r0
 8010ffe:	2801      	cmp	r0, #1
 8011000:	d015      	beq.n	801102e <RadioTimeOnAir+0x46>
 8011002:	2201      	movs	r2, #1
 8011004:	2300      	movs	r3, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8011006:	1898      	adds	r0, r3, r2
 8011008:	3801      	subs	r0, #1
 801100a:	fbb0 f0f2 	udiv	r0, r0, r2
}
 801100e:	bd70      	pop	{r4, r5, r6, pc}
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8011010:	f085 0501 	eor.w	r5, r5, #1
    return ( preambleLen << 3 ) +
 8011014:	00e3      	lsls	r3, r4, #3
 8011016:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801101a:	3318      	adds	r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801101c:	eb06 0c4c 	add.w	ip, r6, ip, lsl #1
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8011020:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8011024:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011028:	fb01 f303 	mul.w	r3, r1, r3
        break;
 801102c:	e7eb      	b.n	8011006 <RadioTimeOnAir+0x1e>
    int32_t crDenom           = coderate + 4;
 801102e:	3304      	adds	r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8011030:	1f50      	subs	r0, r2, #5
 8011032:	2801      	cmp	r0, #1
 8011034:	d939      	bls.n	80110aa <RadioTimeOnAir+0xc2>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011036:	2900      	cmp	r1, #0
 8011038:	d13b      	bne.n	80110b2 <RadioTimeOnAir+0xca>
 801103a:	f1a2 000b 	sub.w	r0, r2, #11
 801103e:	2801      	cmp	r0, #1
 8011040:	bf8c      	ite	hi
 8011042:	2000      	movhi	r0, #0
 8011044:	2001      	movls	r0, #1
                            ( 4 * datarate ) +
 8011046:	ea4f 0e82 	mov.w	lr, r2, lsl #2
                            ( crcOn ? 16 : 0 ) -
 801104a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801104e:	eb0c 0cc6 	add.w	ip, ip, r6, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8011052:	ebac 0c82 	sub.w	ip, ip, r2, lsl #2
                            ( fixLen ? 0 : 20 );
 8011056:	2d00      	cmp	r5, #0
 8011058:	bf14      	ite	ne
 801105a:	2600      	movne	r6, #0
 801105c:	2614      	moveq	r6, #20
                            ( 4 * datarate ) +
 801105e:	4466      	add	r6, ip
    if( datarate <= 6 )
 8011060:	2a06      	cmp	r2, #6
 8011062:	d858      	bhi.n	8011116 <RadioTimeOnAir+0x12e>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8011064:	2e00      	cmp	r6, #0
 8011066:	bfac      	ite	ge
 8011068:	eb0e 0006 	addge.w	r0, lr, r6
 801106c:	f10e 0000 	addlt.w	r0, lr, #0
 8011070:	3801      	subs	r0, #1
 8011072:	fb90 f0fe 	sdiv	r0, r0, lr
 8011076:	fb03 4300 	mla	r3, r3, r0, r4
        intermediate += 2;
 801107a:	330e      	adds	r3, #14
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801107c:	009b      	lsls	r3, r3, #2
 801107e:	3301      	adds	r3, #1
 8011080:	3a02      	subs	r2, #2
 8011082:	4093      	lsls	r3, r2
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8011084:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011088:	fb02 f303 	mul.w	r3, r2, r3
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801108c:	f245 22cc 	movw	r2, #21196	; 0x52cc
 8011090:	f6c0 0201 	movt	r2, #2049	; 0x801
    switch( bw )
 8011094:	5c52      	ldrb	r2, [r2, r1]
 8011096:	2a0a      	cmp	r2, #10
 8011098:	d839      	bhi.n	801110e <RadioTimeOnAir+0x126>
 801109a:	e8df f002 	tbb	[pc, r2]
 801109e:	1a14      	.short	0x1a14
 80110a0:	2e292620 	.word	0x2e292620
 80110a4:	1d173833 	.word	0x1d173833
 80110a8:	23          	.byte	0x23
 80110a9:	00          	.byte	0x00
        if( preambleLen < 12 )
 80110aa:	2c0c      	cmp	r4, #12
 80110ac:	bf38      	it	cc
 80110ae:	240c      	movcc	r4, #12
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80110b0:	b129      	cbz	r1, 80110be <RadioTimeOnAir+0xd6>
 80110b2:	2901      	cmp	r1, #1
 80110b4:	d105      	bne.n	80110c2 <RadioTimeOnAir+0xda>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80110b6:	2a0c      	cmp	r2, #12
 80110b8:	d040      	beq.n	801113c <RadioTimeOnAir+0x154>
    bool    lowDatareOptimize = false;
 80110ba:	2000      	movs	r0, #0
 80110bc:	e7c3      	b.n	8011046 <RadioTimeOnAir+0x5e>
 80110be:	2000      	movs	r0, #0
 80110c0:	e7c1      	b.n	8011046 <RadioTimeOnAir+0x5e>
 80110c2:	2000      	movs	r0, #0
 80110c4:	e7bf      	b.n	8011046 <RadioTimeOnAir+0x5e>
    switch( bw )
 80110c6:	f641 6284 	movw	r2, #7812	; 0x1e84
 80110ca:	e79c      	b.n	8011006 <RadioTimeOnAir+0x1e>
        bandwidthInHz = 10417UL;
 80110cc:	f642 02b1 	movw	r2, #10417	; 0x28b1
        break;
 80110d0:	e799      	b.n	8011006 <RadioTimeOnAir+0x1e>
        bandwidthInHz = 15625UL;
 80110d2:	f643 5209 	movw	r2, #15625	; 0x3d09
        break;
 80110d6:	e796      	b.n	8011006 <RadioTimeOnAir+0x1e>
        bandwidthInHz = 20833UL;
 80110d8:	f245 1261 	movw	r2, #20833	; 0x5161
        break;
 80110dc:	e793      	b.n	8011006 <RadioTimeOnAir+0x1e>
        bandwidthInHz = 31250UL;
 80110de:	f647 2212 	movw	r2, #31250	; 0x7a12
        break;
 80110e2:	e790      	b.n	8011006 <RadioTimeOnAir+0x1e>
        bandwidthInHz = 41667UL;
 80110e4:	f24a 22c3 	movw	r2, #41667	; 0xa2c3
        break;
 80110e8:	e78d      	b.n	8011006 <RadioTimeOnAir+0x1e>
        bandwidthInHz = 62500UL;
 80110ea:	f24f 4224 	movw	r2, #62500	; 0xf424
        break;
 80110ee:	e78a      	b.n	8011006 <RadioTimeOnAir+0x1e>
        bandwidthInHz = 125000UL;
 80110f0:	f64e 0248 	movw	r2, #59464	; 0xe848
 80110f4:	f2c0 0201 	movt	r2, #1
        break;
 80110f8:	e785      	b.n	8011006 <RadioTimeOnAir+0x1e>
        bandwidthInHz = 250000UL;
 80110fa:	f24d 0290 	movw	r2, #53392	; 0xd090
 80110fe:	f2c0 0203 	movt	r2, #3
        break;
 8011102:	e780      	b.n	8011006 <RadioTimeOnAir+0x1e>
        bandwidthInHz = 500000UL;
 8011104:	f24a 1220 	movw	r2, #41248	; 0xa120
 8011108:	f2c0 0207 	movt	r2, #7
        break;
 801110c:	e77b      	b.n	8011006 <RadioTimeOnAir+0x1e>
    uint32_t bandwidthInHz = 0;
 801110e:	2200      	movs	r2, #0
 8011110:	e779      	b.n	8011006 <RadioTimeOnAir+0x1e>
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8011112:	4666      	mov	r6, ip
        lowDatareOptimize = true;
 8011114:	4628      	mov	r0, r5
        ceilNumerator += 8;
 8011116:	3608      	adds	r6, #8
        if( lowDatareOptimize == true )
 8011118:	b118      	cbz	r0, 8011122 <RadioTimeOnAir+0x13a>
            ceilDenominator = 4 * ( datarate - 2 );
 801111a:	f1a2 0e02 	sub.w	lr, r2, #2
 801111e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8011122:	2e00      	cmp	r6, #0
 8011124:	bfac      	ite	ge
 8011126:	eb0e 0006 	addge.w	r0, lr, r6
 801112a:	f10e 0000 	addlt.w	r0, lr, #0
 801112e:	3801      	subs	r0, #1
 8011130:	fb90 f0fe 	sdiv	r0, r0, lr
 8011134:	fb03 4300 	mla	r3, r3, r0, r4
    int32_t intermediate =
 8011138:	330c      	adds	r3, #12
    if( datarate <= 6 )
 801113a:	e79f      	b.n	801107c <RadioTimeOnAir+0x94>
                            ( 4 * datarate ) +
 801113c:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8011140:	00f6      	lsls	r6, r6, #3
 8011142:	eb06 160c 	add.w	r6, r6, ip, lsl #4
                            ( crcOn ? 16 : 0 ) -
 8011146:	eba6 0c82 	sub.w	ip, r6, r2, lsl #2
                            ( fixLen ? 0 : 20 );
 801114a:	2d00      	cmp	r5, #0
 801114c:	d1e1      	bne.n	8011112 <RadioTimeOnAir+0x12a>
        lowDatareOptimize = true;
 801114e:	2001      	movs	r0, #1
                            ( fixLen ? 0 : 20 );
 8011150:	2614      	movs	r6, #20
 8011152:	e784      	b.n	801105e <RadioTimeOnAir+0x76>

08011154 <RadioOnTxTimeoutIrq>:
{
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
}

static void RadioOnTxTimeoutIrq( void *context )
{
 8011154:	b508      	push	{r3, lr}

static void RadioOnTxTimeoutProcess( void )
{
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8011156:	f241 73f4 	movw	r3, #6132	; 0x17f4
 801115a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	b113      	cbz	r3, 8011168 <RadioOnTxTimeoutIrq+0x14>
 8011162:	685b      	ldr	r3, [r3, #4]
 8011164:	b103      	cbz	r3, 8011168 <RadioOnTxTimeoutIrq+0x14>
    {
        RadioEvents->TxTimeout( );
 8011166:	4798      	blx	r3
}
 8011168:	bd08      	pop	{r3, pc}

0801116a <RadioOnRxTimeoutIrq>:
{
 801116a:	b508      	push	{r3, lr}

static void RadioOnRxTimeoutProcess( void )
{
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801116c:	f241 73f4 	movw	r3, #6132	; 0x17f4
 8011170:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	b113      	cbz	r3, 801117e <RadioOnRxTimeoutIrq+0x14>
 8011178:	68db      	ldr	r3, [r3, #12]
 801117a:	b103      	cbz	r3, 801117e <RadioOnRxTimeoutIrq+0x14>
    {
        RadioEvents->RxTimeout( );
 801117c:	4798      	blx	r3
}
 801117e:	bd08      	pop	{r3, pc}

08011180 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 8011180:	2001      	movs	r0, #1
 8011182:	4770      	bx	lr

08011184 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 8011184:	2001      	movs	r0, #1
 8011186:	4770      	bx	lr

08011188 <RadioSetMaxPayloadLength>:
{
 8011188:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 801118a:	2801      	cmp	r0, #1
 801118c:	d007      	beq.n	801119e <RadioSetMaxPayloadLength+0x16>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801118e:	f641 0310 	movw	r3, #6160	; 0x1810
 8011192:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011196:	7d5b      	ldrb	r3, [r3, #21]
 8011198:	2b01      	cmp	r3, #1
 801119a:	d00e      	beq.n	80111ba <RadioSetMaxPayloadLength+0x32>
}
 801119c:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801119e:	f240 1310 	movw	r3, #272	; 0x110
 80111a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80111a6:	7019      	strb	r1, [r3, #0]
 80111a8:	f641 0010 	movw	r0, #6160	; 0x1810
 80111ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80111b0:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80111b2:	300e      	adds	r0, #14
 80111b4:	f001 ff42 	bl	801303c <SUBGRF_SetPacketParams>
 80111b8:	e7f0      	b.n	801119c <RadioSetMaxPayloadLength+0x14>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80111ba:	f240 1310 	movw	r3, #272	; 0x110
 80111be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80111c2:	7019      	strb	r1, [r3, #0]
 80111c4:	f641 0010 	movw	r0, #6160	; 0x1810
 80111c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80111cc:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80111ce:	300e      	adds	r0, #14
 80111d0:	f001 ff34 	bl	801303c <SUBGRF_SetPacketParams>
}
 80111d4:	e7e2      	b.n	801119c <RadioSetMaxPayloadLength+0x14>

080111d6 <RadioRead>:
{
 80111d6:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 80111d8:	f001 fb03 	bl	80127e2 <SUBGRF_ReadRegister>
}
 80111dc:	bd08      	pop	{r3, pc}

080111de <RadioWrite>:
{
 80111de:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 80111e0:	f001 faee 	bl	80127c0 <SUBGRF_WriteRegister>
}
 80111e4:	bd08      	pop	{r3, pc}

080111e6 <RadioTxCw>:
{
 80111e6:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80111e8:	f002 f85e 	bl	80132a8 <SUBGRF_SetRfTxPower>
 80111ec:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80111ee:	210e      	movs	r1, #14
 80111f0:	f640 101f 	movw	r0, #2335	; 0x91f
 80111f4:	f001 fae4 	bl	80127c0 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80111f8:	2101      	movs	r1, #1
 80111fa:	4620      	mov	r0, r4
 80111fc:	f002 f83f 	bl	801327e <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8011200:	f001 fca7 	bl	8012b52 <SUBGRF_SetTxContinuousWave>
}
 8011204:	bd10      	pop	{r4, pc}

08011206 <RadioSetRxDutyCycle>:
{
 8011206:	b570      	push	{r4, r5, r6, lr}
 8011208:	4604      	mov	r4, r0
 801120a:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801120c:	f641 0610 	movw	r6, #6160	; 0x1810
 8011210:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8011214:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 8011218:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801121a:	2300      	movs	r3, #0
 801121c:	461a      	mov	r2, r3
 801121e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011222:	4608      	mov	r0, r1
 8011224:	f001 fd3c 	bl	8012ca0 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8011228:	2100      	movs	r1, #0
 801122a:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 801122e:	f002 f826 	bl	801327e <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8011232:	4629      	mov	r1, r5
 8011234:	4620      	mov	r0, r4
 8011236:	f001 fc5f 	bl	8012af8 <SUBGRF_SetRxDutyCycle>
}
 801123a:	bd70      	pop	{r4, r5, r6, pc}

0801123c <RadioRxBoosted>:
{
 801123c:	b538      	push	{r3, r4, r5, lr}
 801123e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8011240:	f002 f91a 	bl	8013478 <RFW_Is_Init>
 8011244:	2801      	cmp	r0, #1
 8011246:	d018      	beq.n	801127a <RadioRxBoosted+0x3e>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8011248:	2300      	movs	r3, #0
 801124a:	461a      	mov	r2, r3
 801124c:	f240 2162 	movw	r1, #610	; 0x262
 8011250:	4608      	mov	r0, r1
 8011252:	f001 fd25 	bl	8012ca0 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8011256:	b99c      	cbnz	r4, 8011280 <RadioRxBoosted+0x44>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8011258:	f641 0410 	movw	r4, #6160	; 0x1810
 801125c:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8011260:	2100      	movs	r1, #0
 8011262:	65a1      	str	r1, [r4, #88]	; 0x58
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8011264:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8011268:	f002 f809 	bl	801327e <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 801126c:	7863      	ldrb	r3, [r4, #1]
 801126e:	b19b      	cbz	r3, 8011298 <RadioRxBoosted+0x5c>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8011270:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011274:	f001 fc23 	bl	8012abe <SUBGRF_SetRxBoosted>
}
 8011278:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 801127a:	f002 f905 	bl	8013488 <RFW_ReceiveInit>
 801127e:	e7ea      	b.n	8011256 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8011280:	f241 75f8 	movw	r5, #6136	; 0x17f8
 8011284:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8011288:	4621      	mov	r1, r4
 801128a:	4628      	mov	r0, r5
 801128c:	f002 fe69 	bl	8013f62 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8011290:	4628      	mov	r0, r5
 8011292:	f002 fe16 	bl	8013ec2 <UTIL_TIMER_Start>
 8011296:	e7df      	b.n	8011258 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8011298:	f641 0310 	movw	r3, #6160	; 0x1810
 801129c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80112a0:	6898      	ldr	r0, [r3, #8]
 80112a2:	0180      	lsls	r0, r0, #6
 80112a4:	f001 fc0b 	bl	8012abe <SUBGRF_SetRxBoosted>
}
 80112a8:	e7e6      	b.n	8011278 <RadioRxBoosted+0x3c>

080112aa <RadioStandby>:
{
 80112aa:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 80112ac:	2000      	movs	r0, #0
 80112ae:	f001 fb81 	bl	80129b4 <SUBGRF_SetStandby>
}
 80112b2:	bd08      	pop	{r3, pc}

080112b4 <RadioGetStatus>:
{
 80112b4:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 80112b6:	f001 fa7d 	bl	80127b4 <SUBGRF_GetOperatingMode>
 80112ba:	2805      	cmp	r0, #5
 80112bc:	d007      	beq.n	80112ce <RadioGetStatus+0x1a>
 80112be:	2807      	cmp	r0, #7
 80112c0:	d007      	beq.n	80112d2 <RadioGetStatus+0x1e>
 80112c2:	2804      	cmp	r0, #4
 80112c4:	bf14      	ite	ne
 80112c6:	2000      	movne	r0, #0
 80112c8:	2001      	moveq	r0, #1
 80112ca:	0040      	lsls	r0, r0, #1
}
 80112cc:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 80112ce:	2001      	movs	r0, #1
 80112d0:	e7fc      	b.n	80112cc <RadioGetStatus+0x18>
            return RF_CAD;
 80112d2:	2003      	movs	r0, #3
 80112d4:	e7fa      	b.n	80112cc <RadioGetStatus+0x18>

080112d6 <RadioGetWakeupTime>:
{
 80112d6:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80112d8:	f001 fffb 	bl	80132d2 <SUBGRF_GetRadioWakeUpTime>
}
 80112dc:	3003      	adds	r0, #3
 80112de:	bd08      	pop	{r3, pc}

080112e0 <RadioReadRegisters>:
{
 80112e0:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 80112e2:	f001 fb05 	bl	80128f0 <SUBGRF_ReadRegisters>
}
 80112e6:	bd08      	pop	{r3, pc}

080112e8 <RadioWriteRegisters>:
{
 80112e8:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 80112ea:	f001 faba 	bl	8012862 <SUBGRF_WriteRegisters>
}
 80112ee:	bd08      	pop	{r3, pc}

080112f0 <RadioRssi>:
{
 80112f0:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 80112f2:	f001 ff36 	bl	8013162 <SUBGRF_GetRssiInst>
}
 80112f6:	b200      	sxth	r0, r0
 80112f8:	bd08      	pop	{r3, pc}

080112fa <RadioSetTxContinuousWave>:
{
 80112fa:	b538      	push	{r3, r4, r5, lr}
 80112fc:	460c      	mov	r4, r1
 80112fe:	4615      	mov	r5, r2
    SUBGRF_SetRfFrequency( freq );
 8011300:	f001 fd41 	bl	8012d86 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8011304:	4620      	mov	r0, r4
 8011306:	f001 ffcf 	bl	80132a8 <SUBGRF_SetRfTxPower>
 801130a:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801130c:	210e      	movs	r1, #14
 801130e:	f640 101f 	movw	r0, #2335	; 0x91f
 8011312:	f001 fa55 	bl	80127c0 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8011316:	2101      	movs	r1, #1
 8011318:	4620      	mov	r0, r4
 801131a:	f001 ffb0 	bl	801327e <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801131e:	f001 fc18 	bl	8012b52 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8011322:	f641 046c 	movw	r4, #6252	; 0x186c
 8011326:	f2c2 0400 	movt	r4, #8192	; 0x2000
 801132a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801132e:	fb05 f101 	mul.w	r1, r5, r1
 8011332:	4620      	mov	r0, r4
 8011334:	f002 fe15 	bl	8013f62 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8011338:	4620      	mov	r0, r4
 801133a:	f002 fdc2 	bl	8013ec2 <UTIL_TIMER_Start>
}
 801133e:	bd38      	pop	{r3, r4, r5, pc}

08011340 <RadioSetChannel>:
{
 8011340:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8011342:	f001 fd20 	bl	8012d86 <SUBGRF_SetRfFrequency>
}
 8011346:	bd08      	pop	{r3, pc}

08011348 <RadioStartCad>:
{
 8011348:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801134a:	f641 0310 	movw	r3, #6160	; 0x1810
 801134e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011352:	2100      	movs	r1, #0
 8011354:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8011358:	f001 ff91 	bl	801327e <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801135c:	2300      	movs	r3, #0
 801135e:	461a      	mov	r2, r3
 8011360:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8011364:	4608      	mov	r0, r1
 8011366:	f001 fc9b 	bl	8012ca0 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 801136a:	f001 fbe5 	bl	8012b38 <SUBGRF_SetCad>
}
 801136e:	bd08      	pop	{r3, pc}

08011370 <RadioRx>:
{
 8011370:	b538      	push	{r3, r4, r5, lr}
 8011372:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8011374:	f002 f880 	bl	8013478 <RFW_Is_Init>
 8011378:	2801      	cmp	r0, #1
 801137a:	d018      	beq.n	80113ae <RadioRx+0x3e>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801137c:	2300      	movs	r3, #0
 801137e:	461a      	mov	r2, r3
 8011380:	f240 2162 	movw	r1, #610	; 0x262
 8011384:	4608      	mov	r0, r1
 8011386:	f001 fc8b 	bl	8012ca0 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 801138a:	b99c      	cbnz	r4, 80113b4 <RadioRx+0x44>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801138c:	f641 0410 	movw	r4, #6160	; 0x1810
 8011390:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8011394:	2100      	movs	r1, #0
 8011396:	65a1      	str	r1, [r4, #88]	; 0x58
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8011398:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 801139c:	f001 ff6f 	bl	801327e <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80113a0:	7863      	ldrb	r3, [r4, #1]
 80113a2:	b19b      	cbz	r3, 80113cc <RadioRx+0x5c>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80113a4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80113a8:	f001 fb3c 	bl	8012a24 <SUBGRF_SetRx>
}
 80113ac:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 80113ae:	f002 f86b 	bl	8013488 <RFW_ReceiveInit>
 80113b2:	e7ea      	b.n	801138a <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80113b4:	f241 75f8 	movw	r5, #6136	; 0x17f8
 80113b8:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80113bc:	4621      	mov	r1, r4
 80113be:	4628      	mov	r0, r5
 80113c0:	f002 fdcf 	bl	8013f62 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80113c4:	4628      	mov	r0, r5
 80113c6:	f002 fd7c 	bl	8013ec2 <UTIL_TIMER_Start>
 80113ca:	e7df      	b.n	801138c <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80113cc:	f641 0310 	movw	r3, #6160	; 0x1810
 80113d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80113d4:	6898      	ldr	r0, [r3, #8]
 80113d6:	0180      	lsls	r0, r0, #6
 80113d8:	f001 fb24 	bl	8012a24 <SUBGRF_SetRx>
}
 80113dc:	e7e6      	b.n	80113ac <RadioRx+0x3c>

080113de <RadioSleep>:
{
 80113de:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 80113e0:	f04f 0004 	mov.w	r0, #4
 80113e4:	f001 facb 	bl	801297e <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 80113e8:	2002      	movs	r0, #2
 80113ea:	f7f0 ff49 	bl	8002280 <HAL_Delay>
}
 80113ee:	bd08      	pop	{r3, pc}

080113f0 <RadioRandom>:
{
 80113f0:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80113f2:	2300      	movs	r3, #0
 80113f4:	461a      	mov	r2, r3
 80113f6:	4619      	mov	r1, r3
 80113f8:	4618      	mov	r0, r3
 80113fa:	f001 fc51 	bl	8012ca0 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 80113fe:	f001 fb29 	bl	8012a54 <SUBGRF_GetRandom>
}
 8011402:	bd08      	pop	{r3, pc}

08011404 <RadioSetModem>:
{
 8011404:	b510      	push	{r4, lr}
 8011406:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8011408:	f641 0310 	movw	r3, #6160	; 0x1810
 801140c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011410:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8011412:	f002 f83e 	bl	8013492 <RFW_SetRadioModem>
    switch( modem )
 8011416:	2c05      	cmp	r4, #5
 8011418:	d804      	bhi.n	8011424 <RadioSetModem+0x20>
 801141a:	e8df f004 	tbb	[pc, r4]
 801141e:	170d      	.short	0x170d
 8011420:	3e342a03 	.word	0x3e342a03
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8011424:	2003      	movs	r0, #3
 8011426:	f001 fcdc 	bl	8012de2 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 801142a:	f641 0310 	movw	r3, #6160	; 0x1810
 801142e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011432:	2200      	movs	r2, #0
 8011434:	735a      	strb	r2, [r3, #13]
}
 8011436:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8011438:	2000      	movs	r0, #0
 801143a:	f001 fcd2 	bl	8012de2 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 801143e:	f641 0310 	movw	r3, #6160	; 0x1810
 8011442:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011446:	2200      	movs	r2, #0
 8011448:	735a      	strb	r2, [r3, #13]
        break;
 801144a:	e7f4      	b.n	8011436 <RadioSetModem+0x32>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801144c:	2001      	movs	r0, #1
 801144e:	f001 fcc8 	bl	8012de2 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8011452:	f641 0310 	movw	r3, #6160	; 0x1810
 8011456:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801145a:	7b18      	ldrb	r0, [r3, #12]
 801145c:	7b5b      	ldrb	r3, [r3, #13]
 801145e:	4283      	cmp	r3, r0
 8011460:	d0e9      	beq.n	8011436 <RadioSetModem+0x32>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8011462:	f641 0310 	movw	r3, #6160	; 0x1810
 8011466:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801146a:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801146c:	f000 fb33 	bl	8011ad6 <RadioSetPublicNetwork>
 8011470:	e7e1      	b.n	8011436 <RadioSetModem+0x32>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8011472:	2002      	movs	r0, #2
 8011474:	f001 fcb5 	bl	8012de2 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011478:	f641 0310 	movw	r3, #6160	; 0x1810
 801147c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011480:	2200      	movs	r2, #0
 8011482:	735a      	strb	r2, [r3, #13]
        break;
 8011484:	e7d7      	b.n	8011436 <RadioSetModem+0x32>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8011486:	2002      	movs	r0, #2
 8011488:	f001 fcab 	bl	8012de2 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 801148c:	f641 0310 	movw	r3, #6160	; 0x1810
 8011490:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011494:	2200      	movs	r2, #0
 8011496:	735a      	strb	r2, [r3, #13]
        break;
 8011498:	e7cd      	b.n	8011436 <RadioSetModem+0x32>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801149a:	2000      	movs	r0, #0
 801149c:	f001 fca1 	bl	8012de2 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80114a0:	f641 0310 	movw	r3, #6160	; 0x1810
 80114a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80114a8:	2200      	movs	r2, #0
 80114aa:	735a      	strb	r2, [r3, #13]
}
 80114ac:	e7c3      	b.n	8011436 <RadioSetModem+0x32>

080114ae <RadioSetTxGenericConfig>:
{
 80114ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114b2:	b086      	sub	sp, #24
 80114b4:	4605      	mov	r5, r0
 80114b6:	460c      	mov	r4, r1
 80114b8:	4617      	mov	r7, r2
 80114ba:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 80114bc:	2100      	movs	r1, #0
 80114be:	9104      	str	r1, [sp, #16]
 80114c0:	9105      	str	r1, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80114c2:	f001 ffd8 	bl	8013476 <RFW_DeInit>
    switch( modem )
 80114c6:	2d03      	cmp	r5, #3
 80114c8:	f200 818e 	bhi.w	80117e8 <RadioSetTxGenericConfig+0x33a>
 80114cc:	e8df f015 	tbh	[pc, r5, lsl #1]
 80114d0:	01070092 	.word	0x01070092
 80114d4:	00040175 	.word	0x00040175
        if( config->msk.SyncWordLength > 8 )
 80114d8:	7ca2      	ldrb	r2, [r4, #18]
 80114da:	2a08      	cmp	r2, #8
 80114dc:	f200 8194 	bhi.w	8011808 <RadioSetTxGenericConfig+0x35a>
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 80114e0:	68a1      	ldr	r1, [r4, #8]
 80114e2:	a804      	add	r0, sp, #16
 80114e4:	f002 f841 	bl	801356a <UTIL_MEM_cpy_8>
        if( ( config->msk.BitRate == 0 ) )
 80114e8:	6823      	ldr	r3, [r4, #0]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	f000 818f 	beq.w	801180e <RadioSetTxGenericConfig+0x360>
        else if( config->msk.BitRate <= 10000 )
 80114f0:	f242 7210 	movw	r2, #10000	; 0x2710
 80114f4:	4293      	cmp	r3, r2
 80114f6:	d82c      	bhi.n	8011552 <RadioSetTxGenericConfig+0xa4>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80114f8:	f641 0310 	movw	r3, #6160	; 0x1810
 80114fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011500:	2203      	movs	r2, #3
 8011502:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8011504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8011508:	6822      	ldr	r2, [r4, #0]
 801150a:	63da      	str	r2, [r3, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801150c:	7ce2      	ldrb	r2, [r4, #19]
 801150e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            radio_modem = MODEM_MSK;
 8011512:	2502      	movs	r5, #2
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8011514:	f641 0310 	movw	r3, #6160	; 0x1810
 8011518:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801151c:	6862      	ldr	r2, [r4, #4]
 801151e:	00d2      	lsls	r2, r2, #3
 8011520:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8011522:	2204      	movs	r2, #4
 8011524:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8011526:	7ca2      	ldrb	r2, [r4, #18]
 8011528:	00d2      	lsls	r2, r2, #3
 801152a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801152c:	2200      	movs	r2, #0
 801152e:	751a      	strb	r2, [r3, #20]
        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8011530:	7da3      	ldrb	r3, [r4, #22]
 8011532:	2b02      	cmp	r3, #2
 8011534:	d01e      	beq.n	8011574 <RadioSetTxGenericConfig+0xc6>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8011536:	7d23      	ldrb	r3, [r4, #20]
 8011538:	2b02      	cmp	r3, #2
 801153a:	d01b      	beq.n	8011574 <RadioSetTxGenericConfig+0xc6>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801153c:	7d62      	ldrb	r2, [r4, #21]
 801153e:	f641 0310 	movw	r3, #6160	; 0x1810
 8011542:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011546:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8011548:	7da2      	ldrb	r2, [r4, #22]
 801154a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801154c:	7d22      	ldrb	r2, [r4, #20]
 801154e:	755a      	strb	r2, [r3, #21]
 8011550:	e032      	b.n	80115b8 <RadioSetTxGenericConfig+0x10a>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011552:	f641 0310 	movw	r3, #6160	; 0x1810
 8011556:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801155a:	2500      	movs	r5, #0
 801155c:	739d      	strb	r5, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801155e:	f883 5038 	strb.w	r5, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8011562:	6822      	ldr	r2, [r4, #0]
 8011564:	63da      	str	r2, [r3, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8011566:	7ce2      	ldrb	r2, [r4, #19]
 8011568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801156c:	6822      	ldr	r2, [r4, #0]
 801156e:	0892      	lsrs	r2, r2, #2
 8011570:	641a      	str	r2, [r3, #64]	; 0x40
 8011572:	e7cf      	b.n	8011514 <RadioSetTxGenericConfig+0x66>
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8011574:	7d62      	ldrb	r2, [r4, #21]
 8011576:	f102 030f 	add.w	r3, r2, #15
 801157a:	b2db      	uxtb	r3, r3
 801157c:	2b01      	cmp	r3, #1
 801157e:	d901      	bls.n	8011584 <RadioSetTxGenericConfig+0xd6>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8011580:	2a01      	cmp	r2, #1
 8011582:	d134      	bne.n	80115ee <RadioSetTxGenericConfig+0x140>
            ConfigGeneric.TxConfig = config;
 8011584:	9401      	str	r4, [sp, #4]
            ConfigGeneric.rtx = CONFIG_TX;
 8011586:	2301      	movs	r3, #1
 8011588:	f88d 300c 	strb.w	r3, [sp, #12]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801158c:	f241 73f4 	movw	r3, #6132	; 0x17f4
 8011590:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011594:	f641 026c 	movw	r2, #6252	; 0x186c
 8011598:	f2c2 0200 	movt	r2, #8192	; 0x2000
 801159c:	6819      	ldr	r1, [r3, #0]
 801159e:	a801      	add	r0, sp, #4
 80115a0:	f001 ff66 	bl	8013470 <RFW_Init>
 80115a4:	bb18      	cbnz	r0, 80115ee <RadioSetTxGenericConfig+0x140>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80115a6:	f641 0310 	movw	r3, #6160	; 0x1810
 80115aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80115ae:	2200      	movs	r2, #0
 80115b0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80115b2:	2101      	movs	r1, #1
 80115b4:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80115b6:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80115b8:	f7ff fe77 	bl	80112aa <RadioStandby>
        RadioSetModem( radio_modem );
 80115bc:	4628      	mov	r0, r5
 80115be:	f7ff ff21 	bl	8011404 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80115c2:	f641 0510 	movw	r5, #6160	; 0x1810
 80115c6:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80115ca:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80115ce:	f001 fca7 	bl	8012f20 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80115d2:	f105 000e 	add.w	r0, r5, #14
 80115d6:	f001 fd31 	bl	801303c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80115da:	a804      	add	r0, sp, #16
 80115dc:	f001 f951 	bl	8012882 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80115e0:	8a20      	ldrh	r0, [r4, #16]
 80115e2:	f001 f922 	bl	801282a <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 80115e6:	89a0      	ldrh	r0, [r4, #12]
 80115e8:	f001 f96b 	bl	80128c2 <SUBGRF_SetCrcPolynomial>
        break;
 80115ec:	e0fc      	b.n	80117e8 <RadioSetTxGenericConfig+0x33a>
                return -1;
 80115ee:	f04f 30ff 	mov.w	r0, #4294967295
 80115f2:	e106      	b.n	8011802 <RadioSetTxGenericConfig+0x354>
        if( config->fsk.BitRate == 0 )
 80115f4:	6823      	ldr	r3, [r4, #0]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	f000 810c 	beq.w	8011814 <RadioSetTxGenericConfig+0x366>
        if( config->fsk.SyncWordLength > 8 )
 80115fc:	7ca2      	ldrb	r2, [r4, #18]
 80115fe:	2a08      	cmp	r2, #8
 8011600:	f200 810b 	bhi.w	801181a <RadioSetTxGenericConfig+0x36c>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8011604:	68a1      	ldr	r1, [r4, #8]
 8011606:	a804      	add	r0, sp, #16
 8011608:	f001 ffaf 	bl	801356a <UTIL_MEM_cpy_8>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801160c:	f641 0110 	movw	r1, #6160	; 0x1810
 8011610:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8011614:	2300      	movs	r3, #0
 8011616:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801161a:	6822      	ldr	r2, [r4, #0]
 801161c:	63ca      	str	r2, [r1, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801161e:	7ce2      	ldrb	r2, [r4, #19]
 8011620:	f881 2044 	strb.w	r2, [r1, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8011624:	69a2      	ldr	r2, [r4, #24]
 8011626:	640a      	str	r2, [r1, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011628:	738b      	strb	r3, [r1, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801162a:	6862      	ldr	r2, [r4, #4]
 801162c:	00d2      	lsls	r2, r2, #3
 801162e:	820a      	strh	r2, [r1, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8011630:	2204      	movs	r2, #4
 8011632:	748a      	strb	r2, [r1, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8011634:	7ca2      	ldrb	r2, [r4, #18]
 8011636:	00d2      	lsls	r2, r2, #3
 8011638:	74ca      	strb	r2, [r1, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801163a:	750b      	strb	r3, [r1, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801163c:	7da3      	ldrb	r3, [r4, #22]
 801163e:	2b02      	cmp	r3, #2
 8011640:	d00d      	beq.n	801165e <RadioSetTxGenericConfig+0x1b0>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8011642:	7d23      	ldrb	r3, [r4, #20]
 8011644:	2b02      	cmp	r3, #2
 8011646:	d00a      	beq.n	801165e <RadioSetTxGenericConfig+0x1b0>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8011648:	7d62      	ldrb	r2, [r4, #21]
 801164a:	f641 0310 	movw	r3, #6160	; 0x1810
 801164e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011652:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8011654:	7da2      	ldrb	r2, [r4, #22]
 8011656:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8011658:	7d22      	ldrb	r2, [r4, #20]
 801165a:	755a      	strb	r2, [r3, #21]
 801165c:	e021      	b.n	80116a2 <RadioSetTxGenericConfig+0x1f4>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801165e:	7d62      	ldrb	r2, [r4, #21]
 8011660:	f102 030f 	add.w	r3, r2, #15
 8011664:	b2db      	uxtb	r3, r3
 8011666:	2b01      	cmp	r3, #1
 8011668:	d901      	bls.n	801166e <RadioSetTxGenericConfig+0x1c0>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801166a:	2a01      	cmp	r2, #1
 801166c:	d134      	bne.n	80116d8 <RadioSetTxGenericConfig+0x22a>
            ConfigGeneric.rtx = CONFIG_TX;
 801166e:	2301      	movs	r3, #1
 8011670:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 8011674:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8011676:	f241 73f4 	movw	r3, #6132	; 0x17f4
 801167a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801167e:	f641 026c 	movw	r2, #6252	; 0x186c
 8011682:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8011686:	6819      	ldr	r1, [r3, #0]
 8011688:	a801      	add	r0, sp, #4
 801168a:	f001 fef1 	bl	8013470 <RFW_Init>
 801168e:	bb18      	cbnz	r0, 80116d8 <RadioSetTxGenericConfig+0x22a>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8011690:	f641 0310 	movw	r3, #6160	; 0x1810
 8011694:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011698:	2200      	movs	r2, #0
 801169a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801169c:	2101      	movs	r1, #1
 801169e:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80116a0:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80116a2:	f7ff fe02 	bl	80112aa <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80116a6:	2000      	movs	r0, #0
 80116a8:	f7ff feac 	bl	8011404 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80116ac:	f641 0510 	movw	r5, #6160	; 0x1810
 80116b0:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80116b4:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80116b8:	f001 fc32 	bl	8012f20 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80116bc:	f105 000e 	add.w	r0, r5, #14
 80116c0:	f001 fcbc 	bl	801303c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80116c4:	a804      	add	r0, sp, #16
 80116c6:	f001 f8dc 	bl	8012882 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80116ca:	8a20      	ldrh	r0, [r4, #16]
 80116cc:	f001 f8ad 	bl	801282a <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80116d0:	89a0      	ldrh	r0, [r4, #12]
 80116d2:	f001 f8f6 	bl	80128c2 <SUBGRF_SetCrcPolynomial>
        break;
 80116d6:	e087      	b.n	80117e8 <RadioSetTxGenericConfig+0x33a>
                return -1;
 80116d8:	f04f 30ff 	mov.w	r0, #4294967295
 80116dc:	e091      	b.n	8011802 <RadioSetTxGenericConfig+0x354>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80116de:	f641 0310 	movw	r3, #6160	; 0x1810
 80116e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80116e6:	2201      	movs	r2, #1
 80116e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80116ec:	7822      	ldrb	r2, [r4, #0]
 80116ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80116f2:	7862      	ldrb	r2, [r4, #1]
 80116f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80116f8:	78a2      	ldrb	r2, [r4, #2]
 80116fa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80116fe:	78e3      	ldrb	r3, [r4, #3]
 8011700:	2b01      	cmp	r3, #1
 8011702:	d039      	beq.n	8011778 <RadioSetTxGenericConfig+0x2ca>
 8011704:	2b02      	cmp	r3, #2
 8011706:	d03f      	beq.n	8011788 <RadioSetTxGenericConfig+0x2da>
 8011708:	b373      	cbz	r3, 8011768 <RadioSetTxGenericConfig+0x2ba>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801170a:	f641 0510 	movw	r5, #6160	; 0x1810
 801170e:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8011712:	f04f 0801 	mov.w	r8, #1
 8011716:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801171a:	88a3      	ldrh	r3, [r4, #4]
 801171c:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801171e:	79a3      	ldrb	r3, [r4, #6]
 8011720:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8011722:	79e3      	ldrb	r3, [r4, #7]
 8011724:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8011728:	7a23      	ldrb	r3, [r4, #8]
 801172a:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 801172e:	f7ff fdbc 	bl	80112aa <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8011732:	4640      	mov	r0, r8
 8011734:	f7ff fe66 	bl	8011404 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011738:	f105 0038 	add.w	r0, r5, #56	; 0x38
 801173c:	f001 fbf0 	bl	8012f20 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011740:	f105 000e 	add.w	r0, r5, #14
 8011744:	f001 fc7a 	bl	801303c <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8011748:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 801174c:	2b06      	cmp	r3, #6
 801174e:	d029      	beq.n	80117a4 <RadioSetTxGenericConfig+0x2f6>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8011750:	f640 0089 	movw	r0, #2185	; 0x889
 8011754:	f001 f845 	bl	80127e2 <SUBGRF_ReadRegister>
 8011758:	f040 0104 	orr.w	r1, r0, #4
 801175c:	b2c9      	uxtb	r1, r1
 801175e:	f640 0089 	movw	r0, #2185	; 0x889
 8011762:	f001 f82d 	bl	80127c0 <SUBGRF_WriteRegister>
 8011766:	e03f      	b.n	80117e8 <RadioSetTxGenericConfig+0x33a>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8011768:	f641 0310 	movw	r3, #6160	; 0x1810
 801176c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011770:	2200      	movs	r2, #0
 8011772:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8011776:	e7c8      	b.n	801170a <RadioSetTxGenericConfig+0x25c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8011778:	f641 0310 	movw	r3, #6160	; 0x1810
 801177c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011780:	2201      	movs	r2, #1
 8011782:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8011786:	e7c0      	b.n	801170a <RadioSetTxGenericConfig+0x25c>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8011788:	7823      	ldrb	r3, [r4, #0]
 801178a:	3b0b      	subs	r3, #11
 801178c:	b2db      	uxtb	r3, r3
 801178e:	2b01      	cmp	r3, #1
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8011790:	f641 0310 	movw	r3, #6160	; 0x1810
 8011794:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011798:	bf94      	ite	ls
 801179a:	2201      	movls	r2, #1
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801179c:	2200      	movhi	r2, #0
 801179e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80117a2:	e7b2      	b.n	801170a <RadioSetTxGenericConfig+0x25c>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80117a4:	f640 0089 	movw	r0, #2185	; 0x889
 80117a8:	f001 f81b 	bl	80127e2 <SUBGRF_ReadRegister>
 80117ac:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80117b0:	f640 0089 	movw	r0, #2185	; 0x889
 80117b4:	f001 f804 	bl	80127c0 <SUBGRF_WriteRegister>
 80117b8:	e016      	b.n	80117e8 <RadioSetTxGenericConfig+0x33a>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80117ba:	6823      	ldr	r3, [r4, #0]
 80117bc:	3b01      	subs	r3, #1
 80117be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80117c2:	d22d      	bcs.n	8011820 <RadioSetTxGenericConfig+0x372>
        RadioSetModem( MODEM_BPSK );
 80117c4:	2003      	movs	r0, #3
 80117c6:	f7ff fe1d 	bl	8011404 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80117ca:	f641 0010 	movw	r0, #6160	; 0x1810
 80117ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80117d2:	2302      	movs	r3, #2
 80117d4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80117d8:	6823      	ldr	r3, [r4, #0]
 80117da:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80117dc:	2316      	movs	r3, #22
 80117de:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80117e2:	3038      	adds	r0, #56	; 0x38
 80117e4:	f001 fb9c 	bl	8012f20 <SUBGRF_SetModulationParams>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80117e8:	4638      	mov	r0, r7
 80117ea:	f001 fd5d 	bl	80132a8 <SUBGRF_SetRfTxPower>
 80117ee:	f641 0410 	movw	r4, #6160	; 0x1810
 80117f2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80117f6:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80117fa:	f001 fe41 	bl	8013480 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80117fe:	6066      	str	r6, [r4, #4]
    return 0;
 8011800:	2000      	movs	r0, #0
}
 8011802:	b006      	add	sp, #24
 8011804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1;
 8011808:	f04f 30ff 	mov.w	r0, #4294967295
 801180c:	e7f9      	b.n	8011802 <RadioSetTxGenericConfig+0x354>
            return -1;
 801180e:	f04f 30ff 	mov.w	r0, #4294967295
 8011812:	e7f6      	b.n	8011802 <RadioSetTxGenericConfig+0x354>
            return -1;
 8011814:	f04f 30ff 	mov.w	r0, #4294967295
 8011818:	e7f3      	b.n	8011802 <RadioSetTxGenericConfig+0x354>
            return -1;
 801181a:	f04f 30ff 	mov.w	r0, #4294967295
 801181e:	e7f0      	b.n	8011802 <RadioSetTxGenericConfig+0x354>
            return -1;
 8011820:	f04f 30ff 	mov.w	r0, #4294967295
 8011824:	e7ed      	b.n	8011802 <RadioSetTxGenericConfig+0x354>

08011826 <RadioSetRxGenericConfig>:
{
 8011826:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011828:	b087      	sub	sp, #28
 801182a:	4607      	mov	r7, r0
 801182c:	460c      	mov	r4, r1
 801182e:	4615      	mov	r5, r2
 8011830:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 8011832:	2300      	movs	r3, #0
 8011834:	9304      	str	r3, [sp, #16]
 8011836:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8011838:	f001 fe1d 	bl	8013476 <RFW_DeInit>
        symbTimeout = 0;
 801183c:	2d00      	cmp	r5, #0
 801183e:	bf18      	it	ne
 8011840:	2600      	movne	r6, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8011842:	f641 0310 	movw	r3, #6160	; 0x1810
 8011846:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801184a:	3d00      	subs	r5, #0
 801184c:	bf18      	it	ne
 801184e:	2501      	movne	r5, #1
 8011850:	705d      	strb	r5, [r3, #1]
    switch( modem )
 8011852:	b12f      	cbz	r7, 8011860 <RadioSetRxGenericConfig+0x3a>
 8011854:	2f01      	cmp	r7, #1
 8011856:	f000 80a2 	beq.w	801199e <RadioSetRxGenericConfig+0x178>
 801185a:	2000      	movs	r0, #0
}
 801185c:	b007      	add	sp, #28
 801185e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8011860:	68a3      	ldr	r3, [r4, #8]
 8011862:	2b00      	cmp	r3, #0
 8011864:	f000 812b 	beq.w	8011abe <RadioSetRxGenericConfig+0x298>
 8011868:	68e3      	ldr	r3, [r4, #12]
 801186a:	2b00      	cmp	r3, #0
 801186c:	f000 812a 	beq.w	8011ac4 <RadioSetRxGenericConfig+0x29e>
        if( config->fsk.SyncWordLength > 8 )
 8011870:	7fa2      	ldrb	r2, [r4, #30]
 8011872:	2a08      	cmp	r2, #8
 8011874:	f200 8129 	bhi.w	8011aca <RadioSetRxGenericConfig+0x2a4>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8011878:	6921      	ldr	r1, [r4, #16]
 801187a:	a804      	add	r0, sp, #16
 801187c:	f001 fe75 	bl	801356a <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8011880:	6820      	ldr	r0, [r4, #0]
 8011882:	3800      	subs	r0, #0
 8011884:	bf18      	it	ne
 8011886:	2001      	movne	r0, #1
 8011888:	f001 f971 	bl	8012b6e <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801188c:	f641 0510 	movw	r5, #6160	; 0x1810
 8011890:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8011894:	2700      	movs	r7, #0
 8011896:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801189a:	68a3      	ldr	r3, [r4, #8]
 801189c:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801189e:	f894 3020 	ldrb.w	r3, [r4, #32]
 80118a2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80118a6:	6860      	ldr	r0, [r4, #4]
 80118a8:	f001 fd7e 	bl	80133a8 <SUBGRF_GetFskBandwidthRegValue>
 80118ac:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80118b0:	73af      	strb	r7, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80118b2:	68e3      	ldr	r3, [r4, #12]
 80118b4:	00db      	lsls	r3, r3, #3
 80118b6:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80118b8:	7fe3      	ldrb	r3, [r4, #31]
 80118ba:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80118bc:	7fa3      	ldrb	r3, [r4, #30]
 80118be:	00db      	lsls	r3, r3, #3
 80118c0:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80118c2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80118c6:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80118c8:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 80118cc:	b99a      	cbnz	r2, 80118f6 <RadioSetRxGenericConfig+0xd0>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80118ce:	7d21      	ldrb	r1, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80118d0:	f641 0310 	movw	r3, #6160	; 0x1810
 80118d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80118d8:	7599      	strb	r1, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80118da:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80118de:	2902      	cmp	r1, #2
 80118e0:	d013      	beq.n	801190a <RadioSetRxGenericConfig+0xe4>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80118e2:	f641 0310 	movw	r3, #6160	; 0x1810
 80118e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80118ea:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 80118ee:	75d8      	strb	r0, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80118f0:	7619      	strb	r1, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80118f2:	755a      	strb	r2, [r3, #21]
 80118f4:	e02c      	b.n	8011950 <RadioSetRxGenericConfig+0x12a>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80118f6:	2a02      	cmp	r2, #2
 80118f8:	d001      	beq.n	80118fe <RadioSetRxGenericConfig+0xd8>
 80118fa:	21ff      	movs	r1, #255	; 0xff
 80118fc:	e7e8      	b.n	80118d0 <RadioSetRxGenericConfig+0xaa>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80118fe:	f641 0310 	movw	r3, #6160	; 0x1810
 8011902:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011906:	22ff      	movs	r2, #255	; 0xff
 8011908:	759a      	strb	r2, [r3, #22]
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801190a:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 801190e:	f102 030f 	add.w	r3, r2, #15
 8011912:	b2db      	uxtb	r3, r3
 8011914:	2b01      	cmp	r3, #1
 8011916:	d901      	bls.n	801191c <RadioSetRxGenericConfig+0xf6>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8011918:	2a01      	cmp	r2, #1
 801191a:	d13d      	bne.n	8011998 <RadioSetRxGenericConfig+0x172>
            ConfigGeneric.rtx = CONFIG_RX;
 801191c:	2300      	movs	r3, #0
 801191e:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.RxConfig = config;
 8011922:	9402      	str	r4, [sp, #8]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8011924:	f241 73f4 	movw	r3, #6132	; 0x17f4
 8011928:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801192c:	f241 72f8 	movw	r2, #6136	; 0x17f8
 8011930:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8011934:	6819      	ldr	r1, [r3, #0]
 8011936:	a801      	add	r0, sp, #4
 8011938:	f001 fd9a 	bl	8013470 <RFW_Init>
 801193c:	bb60      	cbnz	r0, 8011998 <RadioSetRxGenericConfig+0x172>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801193e:	f641 0310 	movw	r3, #6160	; 0x1810
 8011942:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011946:	2200      	movs	r2, #0
 8011948:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801194a:	2101      	movs	r1, #1
 801194c:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801194e:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8011950:	f7ff fcab 	bl	80112aa <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8011954:	2000      	movs	r0, #0
 8011956:	f7ff fd55 	bl	8011404 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801195a:	f641 0510 	movw	r5, #6160	; 0x1810
 801195e:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8011962:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8011966:	f001 fadb 	bl	8012f20 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801196a:	f105 000e 	add.w	r0, r5, #14
 801196e:	f001 fb65 	bl	801303c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8011972:	a804      	add	r0, sp, #16
 8011974:	f000 ff85 	bl	8012882 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8011978:	8ba0      	ldrh	r0, [r4, #28]
 801197a:	f000 ff56 	bl	801282a <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801197e:	8b20      	ldrh	r0, [r4, #24]
 8011980:	f000 ff9f 	bl	80128c2 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8011984:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8011988:	fb06 f303 	mul.w	r3, r6, r3
 801198c:	68a2      	ldr	r2, [r4, #8]
 801198e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011992:	60ab      	str	r3, [r5, #8]
    return status;
 8011994:	2000      	movs	r0, #0
        break;
 8011996:	e761      	b.n	801185c <RadioSetRxGenericConfig+0x36>
                return -1;
 8011998:	f04f 30ff 	mov.w	r0, #4294967295
 801199c:	e75e      	b.n	801185c <RadioSetRxGenericConfig+0x36>
        if( config->lora.PreambleLen == 0 )
 801199e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	f000 8095 	beq.w	8011ad0 <RadioSetRxGenericConfig+0x2aa>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80119a6:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80119aa:	2b01      	cmp	r3, #1
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80119ac:	bf0c      	ite	eq
 80119ae:	7d27      	ldrbeq	r7, [r4, #20]
            MaxPayloadLength = 0xFF;
 80119b0:	27ff      	movne	r7, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80119b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80119b4:	3800      	subs	r0, #0
 80119b6:	bf18      	it	ne
 80119b8:	2001      	movne	r0, #1
 80119ba:	f001 f8d8 	bl	8012b6e <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80119be:	b2f0      	uxtb	r0, r6
 80119c0:	f001 f8e2 	bl	8012b88 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80119c4:	f641 0310 	movw	r3, #6160	; 0x1810
 80119c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80119cc:	2201      	movs	r2, #1
 80119ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80119d2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80119d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80119da:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80119de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80119e2:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 80119e6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80119ea:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80119ee:	2b01      	cmp	r3, #1
 80119f0:	d043      	beq.n	8011a7a <RadioSetRxGenericConfig+0x254>
 80119f2:	2b02      	cmp	r3, #2
 80119f4:	d049      	beq.n	8011a8a <RadioSetRxGenericConfig+0x264>
 80119f6:	b3c3      	cbz	r3, 8011a6a <RadioSetRxGenericConfig+0x244>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80119f8:	f641 0510 	movw	r5, #6160	; 0x1810
 80119fc:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8011a00:	2601      	movs	r6, #1
 8011a02:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8011a04:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8011a06:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8011a08:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8011a0c:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8011a0e:	77ef      	strb	r7, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8011a10:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8011a14:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8011a18:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8011a1c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 8011a20:	f7ff fc43 	bl	80112aa <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8011a24:	4630      	mov	r0, r6
 8011a26:	f7ff fced 	bl	8011404 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011a2a:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8011a2e:	f001 fa77 	bl	8012f20 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011a32:	f105 000e 	add.w	r0, r5, #14
 8011a36:	f001 fb01 	bl	801303c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8011a3a:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8011a3e:	42b3      	cmp	r3, r6
 8011a40:	d032      	beq.n	8011aa8 <RadioSetRxGenericConfig+0x282>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8011a42:	f240 7036 	movw	r0, #1846	; 0x736
 8011a46:	f000 fecc 	bl	80127e2 <SUBGRF_ReadRegister>
 8011a4a:	f040 0104 	orr.w	r1, r0, #4
 8011a4e:	b2c9      	uxtb	r1, r1
 8011a50:	f240 7036 	movw	r0, #1846	; 0x736
 8011a54:	f000 feb4 	bl	80127c0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8011a58:	f641 0310 	movw	r3, #6160	; 0x1810
 8011a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a64:	609a      	str	r2, [r3, #8]
    return status;
 8011a66:	2000      	movs	r0, #0
        break;
 8011a68:	e6f8      	b.n	801185c <RadioSetRxGenericConfig+0x36>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8011a6a:	f641 0310 	movw	r3, #6160	; 0x1810
 8011a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011a72:	2200      	movs	r2, #0
 8011a74:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8011a78:	e7be      	b.n	80119f8 <RadioSetRxGenericConfig+0x1d2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8011a7a:	f641 0310 	movw	r3, #6160	; 0x1810
 8011a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011a82:	2201      	movs	r2, #1
 8011a84:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8011a88:	e7b6      	b.n	80119f8 <RadioSetRxGenericConfig+0x1d2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8011a8a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8011a8e:	3b0b      	subs	r3, #11
 8011a90:	b2db      	uxtb	r3, r3
 8011a92:	2b01      	cmp	r3, #1
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8011a94:	f641 0310 	movw	r3, #6160	; 0x1810
 8011a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011a9c:	bf94      	ite	ls
 8011a9e:	2201      	movls	r2, #1
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8011aa0:	2200      	movhi	r2, #0
 8011aa2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8011aa6:	e7a7      	b.n	80119f8 <RadioSetRxGenericConfig+0x1d2>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8011aa8:	f240 7036 	movw	r0, #1846	; 0x736
 8011aac:	f000 fe99 	bl	80127e2 <SUBGRF_ReadRegister>
 8011ab0:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8011ab4:	f240 7036 	movw	r0, #1846	; 0x736
 8011ab8:	f000 fe82 	bl	80127c0 <SUBGRF_WriteRegister>
 8011abc:	e7cc      	b.n	8011a58 <RadioSetRxGenericConfig+0x232>
            return -1;
 8011abe:	f04f 30ff 	mov.w	r0, #4294967295
 8011ac2:	e6cb      	b.n	801185c <RadioSetRxGenericConfig+0x36>
 8011ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ac8:	e6c8      	b.n	801185c <RadioSetRxGenericConfig+0x36>
            return -1;
 8011aca:	f04f 30ff 	mov.w	r0, #4294967295
 8011ace:	e6c5      	b.n	801185c <RadioSetRxGenericConfig+0x36>
            return -1;
 8011ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ad4:	e6c2      	b.n	801185c <RadioSetRxGenericConfig+0x36>

08011ad6 <RadioSetPublicNetwork>:
{
 8011ad6:	b510      	push	{r4, lr}
 8011ad8:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8011ada:	f641 0310 	movw	r3, #6160	; 0x1810
 8011ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011ae2:	7318      	strb	r0, [r3, #12]
 8011ae4:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8011ae6:	2001      	movs	r0, #1
 8011ae8:	f7ff fc8c 	bl	8011404 <RadioSetModem>
    if( enable == true )
 8011aec:	b154      	cbz	r4, 8011b04 <RadioSetPublicNetwork+0x2e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8011aee:	2134      	movs	r1, #52	; 0x34
 8011af0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8011af4:	f000 fe64 	bl	80127c0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8011af8:	2144      	movs	r1, #68	; 0x44
 8011afa:	f240 7041 	movw	r0, #1857	; 0x741
 8011afe:	f000 fe5f 	bl	80127c0 <SUBGRF_WriteRegister>
}
 8011b02:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8011b04:	2114      	movs	r1, #20
 8011b06:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8011b0a:	f000 fe59 	bl	80127c0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8011b0e:	2124      	movs	r1, #36	; 0x24
 8011b10:	f240 7041 	movw	r0, #1857	; 0x741
 8011b14:	f000 fe54 	bl	80127c0 <SUBGRF_WriteRegister>
}
 8011b18:	e7f3      	b.n	8011b02 <RadioSetPublicNetwork+0x2c>

08011b1a <RadioSetTxConfig>:
{
 8011b1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b1e:	b083      	sub	sp, #12
 8011b20:	4604      	mov	r4, r0
 8011b22:	460d      	mov	r5, r1
 8011b24:	4616      	mov	r6, r2
 8011b26:	469a      	mov	sl, r3
 8011b28:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 8011b2c:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 8011b30:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    RFW_DeInit();
 8011b34:	f001 fc9f 	bl	8013476 <RFW_DeInit>
    switch( modem )
 8011b38:	2c01      	cmp	r4, #1
 8011b3a:	d064      	beq.n	8011c06 <RadioSetTxConfig+0xec>
 8011b3c:	2c04      	cmp	r4, #4
 8011b3e:	f000 80be 	beq.w	8011cbe <RadioSetTxConfig+0x1a4>
 8011b42:	b1b4      	cbz	r4, 8011b72 <RadioSetTxConfig+0x58>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8011b44:	4628      	mov	r0, r5
 8011b46:	f001 fbaf 	bl	80132a8 <SUBGRF_SetRfTxPower>
 8011b4a:	f641 0410 	movw	r4, #6160	; 0x1810
 8011b4e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8011b52:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8011b56:	210e      	movs	r1, #14
 8011b58:	f640 101f 	movw	r0, #2335	; 0x91f
 8011b5c:	f000 fe30 	bl	80127c0 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8011b60:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8011b64:	f001 fc8c 	bl	8013480 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8011b68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011b6a:	6063      	str	r3, [r4, #4]
}
 8011b6c:	b003      	add	sp, #12
 8011b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8011b72:	f641 0410 	movw	r4, #6160	; 0x1810
 8011b76:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8011b7a:	f04f 0b00 	mov.w	fp, #0
 8011b7e:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8011b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b84:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8011b86:	230b      	movs	r3, #11
 8011b88:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8011b8c:	4650      	mov	r0, sl
 8011b8e:	f001 fc0b 	bl	80133a8 <SUBGRF_GetFskBandwidthRegValue>
 8011b92:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8011b96:	6426      	str	r6, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011b98:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8011b9c:	00ff      	lsls	r7, r7, #3
 8011b9e:	8227      	strh	r7, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8011ba0:	2304      	movs	r3, #4
 8011ba2:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8011ba4:	2318      	movs	r3, #24
 8011ba6:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8011ba8:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8011bac:	f088 0801 	eor.w	r8, r8, #1
 8011bb0:	f884 8015 	strb.w	r8, [r4, #21]
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8011bb4:	45d9      	cmp	r9, fp
 8011bb6:	bf14      	ite	ne
 8011bb8:	23f2      	movne	r3, #242	; 0xf2
 8011bba:	2301      	moveq	r3, #1
 8011bbc:	f641 0410 	movw	r4, #6160	; 0x1810
 8011bc0:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8011bc4:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8011bca:	f7ff fb6e 	bl	80112aa <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8011bce:	4658      	mov	r0, fp
 8011bd0:	f7ff fc18 	bl	8011404 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011bd4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011bd8:	f001 f9a2 	bl	8012f20 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011bdc:	f104 000e 	add.w	r0, r4, #14
 8011be0:	f001 fa2c 	bl	801303c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8011be4:	f244 6358 	movw	r3, #18008	; 0x4658
 8011be8:	f6c0 0301 	movt	r3, #2049	; 0x801
 8011bec:	466a      	mov	r2, sp
 8011bee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011bf2:	e882 0003 	stmia.w	r2, {r0, r1}
 8011bf6:	4610      	mov	r0, r2
 8011bf8:	f000 fe43 	bl	8012882 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8011bfc:	f240 10ff 	movw	r0, #511	; 0x1ff
 8011c00:	f000 fe13 	bl	801282a <SUBGRF_SetWhiteningSeed>
            break;
 8011c04:	e79e      	b.n	8011b44 <RadioSetTxConfig+0x2a>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8011c06:	f641 0310 	movw	r3, #6160	; 0x1810
 8011c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c0e:	2201      	movs	r2, #1
 8011c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8011c14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c16:	b2d2      	uxtb	r2, r2
 8011c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8011c1c:	f245 21cc 	movw	r1, #21196	; 0x52cc
 8011c20:	f6c0 0101 	movt	r1, #2049	; 0x801
 8011c24:	f811 100a 	ldrb.w	r1, [r1, sl]
 8011c28:	f883 1051 	strb.w	r1, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8011c2c:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8011c30:	f883 1052 	strb.w	r1, [r3, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011c34:	f1ba 0f00 	cmp.w	sl, #0
 8011c38:	d133      	bne.n	8011ca2 <RadioSetTxConfig+0x188>
 8011c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c3c:	f1a3 010b 	sub.w	r1, r3, #11
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8011c40:	2901      	cmp	r1, #1
 8011c42:	bf8c      	ite	hi
 8011c44:	2100      	movhi	r1, #0
 8011c46:	2101      	movls	r1, #1
 8011c48:	f641 0310 	movw	r3, #6160	; 0x1810
 8011c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c50:	f883 1053 	strb.w	r1, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8011c54:	2101      	movs	r1, #1
 8011c56:	7399      	strb	r1, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8011c58:	3a05      	subs	r2, #5
 8011c5a:	b2d2      	uxtb	r2, r2
 8011c5c:	428a      	cmp	r2, r1
 8011c5e:	d92a      	bls.n	8011cb6 <RadioSetTxConfig+0x19c>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011c60:	f641 0410 	movw	r4, #6160	; 0x1810
 8011c64:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8011c68:	83a7      	strh	r7, [r4, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8011c6a:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8011c6e:	f240 1310 	movw	r3, #272	; 0x110
 8011c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c76:	781b      	ldrb	r3, [r3, #0]
 8011c78:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8011c7a:	f884 9020 	strb.w	r9, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8011c7e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8011c82:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8011c86:	f7ff fb10 	bl	80112aa <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8011c8a:	2001      	movs	r0, #1
 8011c8c:	f7ff fbba 	bl	8011404 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011c90:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011c94:	f001 f944 	bl	8012f20 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011c98:	f104 000e 	add.w	r0, r4, #14
 8011c9c:	f001 f9ce 	bl	801303c <SUBGRF_SetPacketParams>
            break;
 8011ca0:	e750      	b.n	8011b44 <RadioSetTxConfig+0x2a>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011ca2:	f1ba 0f01 	cmp.w	sl, #1
 8011ca6:	d104      	bne.n	8011cb2 <RadioSetTxConfig+0x198>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8011ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011caa:	2b0c      	cmp	r3, #12
 8011cac:	d01a      	beq.n	8011ce4 <RadioSetTxConfig+0x1ca>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8011cae:	2100      	movs	r1, #0
 8011cb0:	e7ca      	b.n	8011c48 <RadioSetTxConfig+0x12e>
 8011cb2:	2100      	movs	r1, #0
 8011cb4:	e7c8      	b.n	8011c48 <RadioSetTxConfig+0x12e>
                if( preambleLen < 12 )
 8011cb6:	2f0c      	cmp	r7, #12
 8011cb8:	bf38      	it	cc
 8011cba:	270c      	movcc	r7, #12
 8011cbc:	e7d0      	b.n	8011c60 <RadioSetTxConfig+0x146>
            RadioSetModem(MODEM_SIGFOX_TX);
 8011cbe:	2004      	movs	r0, #4
 8011cc0:	f7ff fba0 	bl	8011404 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8011cc4:	f641 0010 	movw	r0, #6160	; 0x1810
 8011cc8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8011ccc:	2302      	movs	r3, #2
 8011cce:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8011cd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011cd4:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8011cd6:	2316      	movs	r3, #22
 8011cd8:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011cdc:	3038      	adds	r0, #56	; 0x38
 8011cde:	f001 f91f 	bl	8012f20 <SUBGRF_SetModulationParams>
            break;
 8011ce2:	e72f      	b.n	8011b44 <RadioSetTxConfig+0x2a>
 8011ce4:	f641 0310 	movw	r3, #6160	; 0x1810
 8011ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011cec:	2201      	movs	r2, #1
 8011cee:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8011cf2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8011cf4:	e7b4      	b.n	8011c60 <RadioSetTxConfig+0x146>

08011cf6 <RadioInit>:
{
 8011cf6:	b570      	push	{r4, r5, r6, lr}
 8011cf8:	b082      	sub	sp, #8
    RadioEvents = events;
 8011cfa:	f241 73f4 	movw	r3, #6132	; 0x17f4
 8011cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011d02:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8011d04:	f641 0510 	movw	r5, #6160	; 0x1810
 8011d08:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8011d0c:	2400      	movs	r4, #0
 8011d0e:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8011d10:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8011d12:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8011d14:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8011d16:	f242 60f5 	movw	r0, #9973	; 0x26f5
 8011d1a:	f6c0 0001 	movt	r0, #2049	; 0x801
 8011d1e:	f000 fff5 	bl	8012d0c <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8011d22:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8011d24:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8011d26:	f000 ff48 	bl	8012bba <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8011d2a:	4621      	mov	r1, r4
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	f001 f9fa 	bl	8013126 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8011d32:	2204      	movs	r2, #4
 8011d34:	4621      	mov	r1, r4
 8011d36:	2001      	movs	r0, #1
 8011d38:	f001 f86c 	bl	8012e14 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011d3c:	4623      	mov	r3, r4
 8011d3e:	4622      	mov	r2, r4
 8011d40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011d44:	4608      	mov	r0, r1
 8011d46:	f000 ffab 	bl	8012ca0 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8011d4a:	f7ff fb48 	bl	80113de <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8011d4e:	f641 066c 	movw	r6, #6252	; 0x186c
 8011d52:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8011d56:	9400      	str	r4, [sp, #0]
 8011d58:	f241 1355 	movw	r3, #4437	; 0x1155
 8011d5c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8011d60:	4622      	mov	r2, r4
 8011d62:	f04f 31ff 	mov.w	r1, #4294967295
 8011d66:	4630      	mov	r0, r6
 8011d68:	f001 ffd8 	bl	8013d1c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8011d6c:	f241 75f8 	movw	r5, #6136	; 0x17f8
 8011d70:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8011d74:	9400      	str	r4, [sp, #0]
 8011d76:	f241 136b 	movw	r3, #4459	; 0x116b
 8011d7a:	f6c0 0301 	movt	r3, #2049	; 0x801
 8011d7e:	4622      	mov	r2, r4
 8011d80:	f04f 31ff 	mov.w	r1, #4294967295
 8011d84:	4628      	mov	r0, r5
 8011d86:	f001 ffc9 	bl	8013d1c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8011d8a:	4630      	mov	r0, r6
 8011d8c:	f002 f82e 	bl	8013dec <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8011d90:	4628      	mov	r0, r5
 8011d92:	f002 f82b 	bl	8013dec <UTIL_TIMER_Stop>
}
 8011d96:	b002      	add	sp, #8
 8011d98:	bd70      	pop	{r4, r5, r6, pc}

08011d9a <RadioSetRxConfig>:
{
 8011d9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d9e:	b087      	sub	sp, #28
 8011da0:	4604      	mov	r4, r0
 8011da2:	9100      	str	r1, [sp, #0]
 8011da4:	4615      	mov	r5, r2
 8011da6:	9301      	str	r3, [sp, #4]
 8011da8:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 8011dac:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 8011db0:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
 8011db4:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
 8011db8:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 8011dbc:	f89d 9064 	ldrb.w	r9, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 8011dc0:	f641 0310 	movw	r3, #6160	; 0x1810
 8011dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011dc8:	f883 9001 	strb.w	r9, [r3, #1]
    RFW_DeInit();
 8011dcc:	f001 fb53 	bl	8013476 <RFW_DeInit>
        symbTimeout = 0;
 8011dd0:	f1b9 0f00 	cmp.w	r9, #0
 8011dd4:	bf18      	it	ne
 8011dd6:	2700      	movne	r7, #0
        MaxPayloadLength = 0xFF;
 8011dd8:	f1b8 0f00 	cmp.w	r8, #0
 8011ddc:	bf08      	it	eq
 8011dde:	26ff      	moveq	r6, #255	; 0xff
 8011de0:	f240 1310 	movw	r3, #272	; 0x110
 8011de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011de8:	701e      	strb	r6, [r3, #0]
    switch( modem )
 8011dea:	2c01      	cmp	r4, #1
 8011dec:	f000 80dd 	beq.w	8011faa <RadioSetRxConfig+0x210>
 8011df0:	2c05      	cmp	r4, #5
 8011df2:	d005      	beq.n	8011e00 <RadioSetRxConfig+0x66>
 8011df4:	2c00      	cmp	r4, #0
 8011df6:	f000 8081 	beq.w	8011efc <RadioSetRxConfig+0x162>
}
 8011dfa:	b007      	add	sp, #28
 8011dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8011e00:	2001      	movs	r0, #1
 8011e02:	f000 feb4 	bl	8012b6e <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8011e06:	f641 0410 	movw	r4, #6160	; 0x1810
 8011e0a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8011e0e:	2600      	movs	r6, #0
 8011e10:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8011e14:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8011e16:	2309      	movs	r3, #9
 8011e18:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8011e1c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8011e20:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8011e22:	9800      	ldr	r0, [sp, #0]
 8011e24:	f001 fac0 	bl	80133a8 <SUBGRF_GetFskBandwidthRegValue>
 8011e28:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011e2c:	73a6      	strb	r6, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8011e2e:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8011e32:	f8a4 a010 	strh.w	sl, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8011e36:	74a6      	strb	r6, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8011e38:	2310      	movs	r3, #16
 8011e3a:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8011e3c:	7526      	strb	r6, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8011e3e:	7566      	strb	r6, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8011e40:	f240 1310 	movw	r3, #272	; 0x110
 8011e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011e48:	781b      	ldrb	r3, [r3, #0]
 8011e4a:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8011e50:	7626      	strb	r6, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8011e52:	2005      	movs	r0, #5
 8011e54:	f7ff fad6 	bl	8011404 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011e58:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011e5c:	f001 f860 	bl	8012f20 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011e60:	f104 000e 	add.w	r0, r4, #14
 8011e64:	f001 f8ea 	bl	801303c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8011e68:	ab02      	add	r3, sp, #8
 8011e6a:	f244 6260 	movw	r2, #18016	; 0x4660
 8011e6e:	f6c0 0201 	movt	r2, #2049	; 0x801
 8011e72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e76:	e883 0003 	stmia.w	r3, {r0, r1}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f000 fd01 	bl	8012882 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8011e80:	f240 10ff 	movw	r0, #511	; 0x1ff
 8011e84:	f000 fcd1 	bl	801282a <SUBGRF_SetWhiteningSeed>
    return SUBGRF_ReadRegister( addr );
 8011e88:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8011e8c:	f000 fca9 	bl	80127e2 <SUBGRF_ReadRegister>
    SUBGRF_WriteRegister( addr, data );
 8011e90:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 8011e94:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8011e98:	f000 fc92 	bl	80127c0 <SUBGRF_WriteRegister>
 8011e9c:	2104      	movs	r1, #4
 8011e9e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8011ea2:	f000 fc8d 	bl	80127c0 <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister( addr );
 8011ea6:	f640 009b 	movw	r0, #2203	; 0x89b
 8011eaa:	f000 fc9a 	bl	80127e2 <SUBGRF_ReadRegister>
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8011eae:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
    SUBGRF_WriteRegister( addr, data );
 8011eb2:	f041 0108 	orr.w	r1, r1, #8
 8011eb6:	f640 009b 	movw	r0, #2203	; 0x89b
 8011eba:	f000 fc81 	bl	80127c0 <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister( addr );
 8011ebe:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8011ec2:	f000 fc8e 	bl	80127e2 <SUBGRF_ReadRegister>
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8011ec6:	f040 0118 	orr.w	r1, r0, #24
    SUBGRF_WriteRegister( addr, data );
 8011eca:	b2c9      	uxtb	r1, r1
 8011ecc:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8011ed0:	f000 fc76 	bl	80127c0 <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister( addr );
 8011ed4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8011ed8:	f000 fc83 	bl	80127e2 <SUBGRF_ReadRegister>
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8011edc:	f000 018f 	and.w	r1, r0, #143	; 0x8f
    SUBGRF_WriteRegister( addr, data );
 8011ee0:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8011ee4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8011ee8:	f000 fc6a 	bl	80127c0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8011eec:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8011ef0:	fb07 f303 	mul.w	r3, r7, r3
 8011ef4:	fbb3 f3f5 	udiv	r3, r3, r5
 8011ef8:	60a3      	str	r3, [r4, #8]
            break;
 8011efa:	e77e      	b.n	8011dfa <RadioSetRxConfig+0x60>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8011efc:	2000      	movs	r0, #0
 8011efe:	f000 fe36 	bl	8012b6e <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8011f02:	f641 0410 	movw	r4, #6160	; 0x1810
 8011f06:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8011f0a:	2600      	movs	r6, #0
 8011f0c:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8011f10:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8011f12:	230b      	movs	r3, #11
 8011f14:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8011f18:	9800      	ldr	r0, [sp, #0]
 8011f1a:	f001 fa45 	bl	80133a8 <SUBGRF_GetFskBandwidthRegValue>
 8011f1e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011f22:	73a6      	strb	r6, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8011f24:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8011f28:	f8a4 a010 	strh.w	sl, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8011f2c:	2304      	movs	r3, #4
 8011f2e:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8011f30:	2318      	movs	r3, #24
 8011f32:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8011f34:	7526      	strb	r6, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8011f36:	f088 0801 	eor.w	r8, r8, #1
 8011f3a:	f884 8015 	strb.w	r8, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8011f3e:	f240 1310 	movw	r3, #272	; 0x110
 8011f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	75a3      	strb	r3, [r4, #22]
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8011f4a:	45b3      	cmp	fp, r6
 8011f4c:	bf14      	ite	ne
 8011f4e:	23f2      	movne	r3, #242	; 0xf2
 8011f50:	2301      	moveq	r3, #1
 8011f52:	f641 0410 	movw	r4, #6160	; 0x1810
 8011f56:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8011f5a:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8011f60:	f7ff f9a3 	bl	80112aa <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8011f64:	4630      	mov	r0, r6
 8011f66:	f7ff fa4d 	bl	8011404 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011f6a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011f6e:	f000 ffd7 	bl	8012f20 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011f72:	f104 000e 	add.w	r0, r4, #14
 8011f76:	f001 f861 	bl	801303c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8011f7a:	f244 6358 	movw	r3, #18008	; 0x4658
 8011f7e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8011f82:	aa04      	add	r2, sp, #16
 8011f84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011f88:	e882 0003 	stmia.w	r2, {r0, r1}
 8011f8c:	4610      	mov	r0, r2
 8011f8e:	f000 fc78 	bl	8012882 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8011f92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8011f96:	f000 fc48 	bl	801282a <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8011f9a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8011f9e:	fb07 f303 	mul.w	r3, r7, r3
 8011fa2:	fbb3 f3f5 	udiv	r3, r3, r5
 8011fa6:	60a3      	str	r3, [r4, #8]
            break;
 8011fa8:	e727      	b.n	8011dfa <RadioSetRxConfig+0x60>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8011faa:	2000      	movs	r0, #0
 8011fac:	f000 fddf 	bl	8012b6e <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8011fb0:	f641 0310 	movw	r3, #6160	; 0x1810
 8011fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011fb8:	2201      	movs	r2, #1
 8011fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8011fbe:	b2ea      	uxtb	r2, r5
 8011fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8011fc4:	f245 21cc 	movw	r1, #21196	; 0x52cc
 8011fc8:	f6c0 0101 	movt	r1, #2049	; 0x801
 8011fcc:	9800      	ldr	r0, [sp, #0]
 8011fce:	5c09      	ldrb	r1, [r1, r0]
 8011fd0:	f883 1051 	strb.w	r1, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8011fd4:	9901      	ldr	r1, [sp, #4]
 8011fd6:	f883 1052 	strb.w	r1, [r3, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011fda:	2800      	cmp	r0, #0
 8011fdc:	d156      	bne.n	801208c <RadioSetRxConfig+0x2f2>
 8011fde:	f1a5 010b 	sub.w	r1, r5, #11
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8011fe2:	2901      	cmp	r1, #1
 8011fe4:	bf8c      	ite	hi
 8011fe6:	2100      	movhi	r1, #0
 8011fe8:	2101      	movls	r1, #1
 8011fea:	f641 0310 	movw	r3, #6160	; 0x1810
 8011fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011ff2:	f883 1053 	strb.w	r1, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8011ff6:	2101      	movs	r1, #1
 8011ff8:	7399      	strb	r1, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8011ffa:	3a05      	subs	r2, #5
 8011ffc:	b2d2      	uxtb	r2, r2
 8011ffe:	428a      	cmp	r2, r1
 8012000:	d94d      	bls.n	801209e <RadioSetRxConfig+0x304>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8012002:	f641 0410 	movw	r4, #6160	; 0x1810
 8012006:	f2c2 0400 	movt	r4, #8192	; 0x2000
 801200a:	f8a4 a01c 	strh.w	sl, [r4, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801200e:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8012012:	f240 1310 	movw	r3, #272	; 0x110
 8012016:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801201e:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8012022:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8012026:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 801202a:	f7ff f93e 	bl	80112aa <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801202e:	2001      	movs	r0, #1
 8012030:	f7ff f9e8 	bl	8011404 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8012034:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012038:	f000 ff72 	bl	8012f20 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801203c:	f104 000e 	add.w	r0, r4, #14
 8012040:	f000 fffc 	bl	801303c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8012044:	b2f8      	uxtb	r0, r7
 8012046:	f000 fd9f 	bl	8012b88 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801204a:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801204e:	f000 fbc8 	bl	80127e2 <SUBGRF_ReadRegister>
 8012052:	f000 0101 	and.w	r1, r0, #1
 8012056:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801205a:	f000 fbb1 	bl	80127c0 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801205e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8012062:	2b01      	cmp	r3, #1
 8012064:	d021      	beq.n	80120aa <RadioSetRxConfig+0x310>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8012066:	f240 7036 	movw	r0, #1846	; 0x736
 801206a:	f000 fbba 	bl	80127e2 <SUBGRF_ReadRegister>
 801206e:	f040 0104 	orr.w	r1, r0, #4
 8012072:	b2c9      	uxtb	r1, r1
 8012074:	f240 7036 	movw	r0, #1846	; 0x736
 8012078:	f000 fba2 	bl	80127c0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801207c:	f641 0310 	movw	r3, #6160	; 0x1810
 8012080:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012088:	609a      	str	r2, [r3, #8]
}
 801208a:	e6b6      	b.n	8011dfa <RadioSetRxConfig+0x60>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801208c:	9b00      	ldr	r3, [sp, #0]
 801208e:	2b01      	cmp	r3, #1
 8012090:	d103      	bne.n	801209a <RadioSetRxConfig+0x300>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8012092:	2d0c      	cmp	r5, #12
 8012094:	d014      	beq.n	80120c0 <RadioSetRxConfig+0x326>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8012096:	2100      	movs	r1, #0
 8012098:	e7a7      	b.n	8011fea <RadioSetRxConfig+0x250>
 801209a:	2100      	movs	r1, #0
 801209c:	e7a5      	b.n	8011fea <RadioSetRxConfig+0x250>
                if( preambleLen < 12 )
 801209e:	f1ba 0f0c 	cmp.w	sl, #12
 80120a2:	bf38      	it	cc
 80120a4:	f04f 0a0c 	movcc.w	sl, #12
 80120a8:	e7ab      	b.n	8012002 <RadioSetRxConfig+0x268>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80120aa:	f240 7036 	movw	r0, #1846	; 0x736
 80120ae:	f000 fb98 	bl	80127e2 <SUBGRF_ReadRegister>
 80120b2:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80120b6:	f240 7036 	movw	r0, #1846	; 0x736
 80120ba:	f000 fb81 	bl	80127c0 <SUBGRF_WriteRegister>
 80120be:	e7dd      	b.n	801207c <RadioSetRxConfig+0x2e2>
 80120c0:	f641 0310 	movw	r3, #6160	; 0x1810
 80120c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80120c8:	2201      	movs	r2, #1
 80120ca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80120ce:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80120d0:	e797      	b.n	8012002 <RadioSetRxConfig+0x268>

080120d2 <RadioSend>:
{
 80120d2:	b570      	push	{r4, r5, r6, lr}
 80120d4:	b082      	sub	sp, #8
 80120d6:	4605      	mov	r5, r0
 80120d8:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80120da:	2300      	movs	r3, #0
 80120dc:	461a      	mov	r2, r3
 80120de:	f240 2101 	movw	r1, #513	; 0x201
 80120e2:	4608      	mov	r0, r1
 80120e4:	f000 fddc 	bl	8012ca0 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80120e8:	f641 0610 	movw	r6, #6160	; 0x1810
 80120ec:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80120f0:	2101      	movs	r1, #1
 80120f2:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 80120f6:	f001 f8c2 	bl	801327e <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80120fa:	7833      	ldrb	r3, [r6, #0]
 80120fc:	2b01      	cmp	r3, #1
 80120fe:	d103      	bne.n	8012108 <RadioSend+0x36>
 8012100:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8012104:	2b06      	cmp	r3, #6
 8012106:	d017      	beq.n	8012138 <RadioSend+0x66>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8012108:	f640 0089 	movw	r0, #2185	; 0x889
 801210c:	f000 fb69 	bl	80127e2 <SUBGRF_ReadRegister>
 8012110:	f040 0104 	orr.w	r1, r0, #4
 8012114:	b2c9      	uxtb	r1, r1
 8012116:	f640 0089 	movw	r0, #2185	; 0x889
 801211a:	f000 fb51 	bl	80127c0 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 801211e:	f641 0310 	movw	r3, #6160	; 0x1810
 8012122:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012126:	781b      	ldrb	r3, [r3, #0]
 8012128:	2b04      	cmp	r3, #4
 801212a:	f200 80ad 	bhi.w	8012288 <RadioSend+0x1b6>
 801212e:	e8df f003 	tbb	[pc, r3]
 8012132:	9ebd      	.short	0x9ebd
 8012134:	f2bd      	.short	0xf2bd
 8012136:	0e          	.byte	0x0e
 8012137:	00          	.byte	0x00
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8012138:	f640 0089 	movw	r0, #2185	; 0x889
 801213c:	f000 fb51 	bl	80127e2 <SUBGRF_ReadRegister>
 8012140:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8012144:	f640 0089 	movw	r0, #2185	; 0x889
 8012148:	f000 fb3a 	bl	80127c0 <SUBGRF_WriteRegister>
 801214c:	e7e7      	b.n	801211e <RadioSend+0x4c>
    uint8_t prevInt = 0;
 801214e:	2100      	movs	r1, #0
    for( i = 0; i < size; i++ )
 8012150:	2c00      	cmp	r4, #0
 8012152:	d049      	beq.n	80121e8 <RadioSend+0x116>
 8012154:	462b      	mov	r3, r5
 8012156:	f241 61f4 	movw	r1, #5876	; 0x16f4
 801215a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 801215e:	1966      	adds	r6, r4, r5
        outBuffer[i] = 0;
 8012160:	2000      	movs	r0, #0
        inBuffer[i] = ~inBuffer[i];
 8012162:	781a      	ldrb	r2, [r3, #0]
 8012164:	43d2      	mvns	r2, r2
 8012166:	f803 2b01 	strb.w	r2, [r3], #1
        outBuffer[i] = 0;
 801216a:	f801 0b01 	strb.w	r0, [r1], #1
    for( i = 0; i < size; i++ )
 801216e:	42b3      	cmp	r3, r6
 8012170:	d1f7      	bne.n	8012162 <RadioSend+0x90>
    for( i = 0; i < ( size * 8 ); i++ )
 8012172:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 8012176:	2100      	movs	r1, #0
 8012178:	460b      	mov	r3, r1
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801217a:	f241 60f4 	movw	r0, #5876	; 0x16f4
 801217e:	f2c2 0000 	movt	r0, #8192	; 0x2000
        index_bit = 7 - ( i % 8 );
 8012182:	425e      	negs	r6, r3
 8012184:	f003 0207 	and.w	r2, r3, #7
 8012188:	f006 0607 	and.w	r6, r6, #7
 801218c:	bf58      	it	pl
 801218e:	4272      	negpl	r2, r6
 8012190:	f1c2 0207 	rsb	r2, r2, #7
 8012194:	b2d2      	uxtb	r2, r2
        index_byte = i / 8;
 8012196:	469e      	mov	lr, r3
 8012198:	2b00      	cmp	r3, #0
 801219a:	bfb8      	it	lt
 801219c:	f103 0e07 	addlt.w	lr, r3, #7
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80121a0:	3301      	adds	r3, #1
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80121a2:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 80121a6:	f815 e00e 	ldrb.w	lr, [r5, lr]
 80121aa:	fa4e f202 	asr.w	r2, lr, r2
 80121ae:	f002 0201 	and.w	r2, r2, #1
        prevInt ^= currBit;
 80121b2:	4051      	eors	r1, r2
        index_byte_out = ( i + 1 ) / 8;
 80121b4:	469e      	mov	lr, r3
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	bfb8      	it	lt
 80121ba:	f103 0e07 	addlt.w	lr, r3, #7
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80121be:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80121c2:	425e      	negs	r6, r3
 80121c4:	f003 0207 	and.w	r2, r3, #7
 80121c8:	f006 0607 	and.w	r6, r6, #7
 80121cc:	bf58      	it	pl
 80121ce:	4272      	negpl	r2, r6
 80121d0:	f1c2 0207 	rsb	r2, r2, #7
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80121d4:	b2d2      	uxtb	r2, r2
 80121d6:	fa01 f202 	lsl.w	r2, r1, r2
 80121da:	f810 600e 	ldrb.w	r6, [r0, lr]
 80121de:	4332      	orrs	r2, r6
 80121e0:	f800 200e 	strb.w	r2, [r0, lr]
    for( i = 0; i < ( size * 8 ); i++ )
 80121e4:	459c      	cmp	ip, r3
 80121e6:	dccc      	bgt.n	8012182 <RadioSend+0xb0>
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80121e8:	f241 62f4 	movw	r2, #5876	; 0x16f4
 80121ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80121f0:	018b      	lsls	r3, r1, #6
 80121f2:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 80121f6:	fab1 f181 	clz	r1, r1
 80121fa:	0949      	lsrs	r1, r1, #5
 80121fc:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8012200:	5513      	strb	r3, [r2, r4]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8012202:	f641 0510 	movw	r5, #6160	; 0x1810
 8012206:	f2c2 0500 	movt	r5, #8192	; 0x2000
 801220a:	2302      	movs	r3, #2
 801220c:	73ab      	strb	r3, [r5, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801220e:	1c66      	adds	r6, r4, #1
 8012210:	b2f6      	uxtb	r6, r6
 8012212:	76ae      	strb	r6, [r5, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012214:	f105 000e 	add.w	r0, r5, #14
 8012218:	f000 ff10 	bl	801303c <SUBGRF_SetPacketParams>
    SUBGRF_WriteRegister( addr, data );
 801221c:	2100      	movs	r1, #0
 801221e:	20f1      	movs	r0, #241	; 0xf1
 8012220:	f000 face 	bl	80127c0 <SUBGRF_WriteRegister>
 8012224:	2100      	movs	r1, #0
 8012226:	20f0      	movs	r0, #240	; 0xf0
 8012228:	f000 faca 	bl	80127c0 <SUBGRF_WriteRegister>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801222c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801222e:	2b64      	cmp	r3, #100	; 0x64
 8012230:	f000 8081 	beq.w	8012336 <RadioSend+0x264>
    SUBGRF_WriteRegister( addr, data );
 8012234:	21e1      	movs	r1, #225	; 0xe1
 8012236:	20f3      	movs	r0, #243	; 0xf3
 8012238:	f000 fac2 	bl	80127c0 <SUBGRF_WriteRegister>
 801223c:	2104      	movs	r1, #4
 801223e:	20f2      	movs	r0, #242	; 0xf2
 8012240:	f000 fabe 	bl	80127c0 <SUBGRF_WriteRegister>
            uint16_t bitNum = ( size * 8 ) + 2;
 8012244:	00e1      	lsls	r1, r4, #3
 8012246:	1c8c      	adds	r4, r1, #2
    SUBGRF_WriteRegister( addr, data );
 8012248:	0a09      	lsrs	r1, r1, #8
 801224a:	20f4      	movs	r0, #244	; 0xf4
 801224c:	f000 fab8 	bl	80127c0 <SUBGRF_WriteRegister>
 8012250:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 8012254:	20f5      	movs	r0, #245	; 0xf5
 8012256:	f000 fab3 	bl	80127c0 <SUBGRF_WriteRegister>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801225a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801225e:	4631      	mov	r1, r6
 8012260:	f241 60f4 	movw	r0, #5876	; 0x16f4
 8012264:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8012268:	f000 fbd4 	bl	8012a14 <SUBGRF_SendPayload>
            break;
 801226c:	e00c      	b.n	8012288 <RadioSend+0x1b6>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801226e:	f641 0010 	movw	r0, #6160	; 0x1810
 8012272:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8012276:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012278:	300e      	adds	r0, #14
 801227a:	f000 fedf 	bl	801303c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801227e:	2200      	movs	r2, #0
 8012280:	4621      	mov	r1, r4
 8012282:	4628      	mov	r0, r5
 8012284:	f000 fbc6 	bl	8012a14 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8012288:	f641 0310 	movw	r3, #6160	; 0x1810
 801228c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012290:	f641 046c 	movw	r4, #6252	; 0x186c
 8012294:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8012298:	6859      	ldr	r1, [r3, #4]
 801229a:	4620      	mov	r0, r4
 801229c:	f001 fe61 	bl	8013f62 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80122a0:	4620      	mov	r0, r4
 80122a2:	f001 fe0e 	bl	8013ec2 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 80122a6:	2000      	movs	r0, #0
}
 80122a8:	b002      	add	sp, #8
 80122aa:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 80122ac:	f001 f8e4 	bl	8013478 <RFW_Is_Init>
 80122b0:	2801      	cmp	r0, #1
 80122b2:	d00d      	beq.n	80122d0 <RadioSend+0x1fe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80122b4:	f641 0010 	movw	r0, #6160	; 0x1810
 80122b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80122bc:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80122be:	300e      	adds	r0, #14
 80122c0:	f000 febc 	bl	801303c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80122c4:	2200      	movs	r2, #0
 80122c6:	4621      	mov	r1, r4
 80122c8:	4628      	mov	r0, r5
 80122ca:	f000 fba3 	bl	8012a14 <SUBGRF_SendPayload>
 80122ce:	e7db      	b.n	8012288 <RadioSend+0x1b6>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80122d0:	f10d 0207 	add.w	r2, sp, #7
 80122d4:	4621      	mov	r1, r4
 80122d6:	4628      	mov	r0, r5
 80122d8:	f001 f8d3 	bl	8013482 <RFW_TransmitInit>
 80122dc:	b980      	cbnz	r0, 8012300 <RadioSend+0x22e>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80122de:	f641 0010 	movw	r0, #6160	; 0x1810
 80122e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80122e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80122ea:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80122ec:	300e      	adds	r0, #14
 80122ee:	f000 fea5 	bl	801303c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80122f2:	2200      	movs	r2, #0
 80122f4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80122f8:	4628      	mov	r0, r5
 80122fa:	f000 fb8b 	bl	8012a14 <SUBGRF_SendPayload>
 80122fe:	e7c3      	b.n	8012288 <RadioSend+0x1b6>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8012300:	f245 2360 	movw	r3, #21088	; 0x5260
 8012304:	f6c0 0301 	movt	r3, #2049	; 0x801
 8012308:	2201      	movs	r2, #1
 801230a:	2100      	movs	r1, #0
 801230c:	2002      	movs	r0, #2
 801230e:	f001 ff8d 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8012312:	2003      	movs	r0, #3
 8012314:	e7c8      	b.n	80122a8 <RadioSend+0x1d6>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8012316:	f641 0010 	movw	r0, #6160	; 0x1810
 801231a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801231e:	2302      	movs	r3, #2
 8012320:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8012322:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012324:	300e      	adds	r0, #14
 8012326:	f000 fe89 	bl	801303c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801232a:	2200      	movs	r2, #0
 801232c:	4621      	mov	r1, r4
 801232e:	4628      	mov	r0, r5
 8012330:	f000 fb70 	bl	8012a14 <SUBGRF_SendPayload>
            break;
 8012334:	e7a8      	b.n	8012288 <RadioSend+0x1b6>
    SUBGRF_WriteRegister( addr, data );
 8012336:	2170      	movs	r1, #112	; 0x70
 8012338:	20f3      	movs	r0, #243	; 0xf3
 801233a:	f000 fa41 	bl	80127c0 <SUBGRF_WriteRegister>
 801233e:	211d      	movs	r1, #29
 8012340:	20f2      	movs	r0, #242	; 0xf2
 8012342:	f000 fa3d 	bl	80127c0 <SUBGRF_WriteRegister>
}
 8012346:	e77d      	b.n	8012244 <RadioSend+0x172>

08012348 <RadioIrqProcess>:
{
 8012348:	b530      	push	{r4, r5, lr}
 801234a:	b083      	sub	sp, #12
    uint8_t size = 0;
 801234c:	2300      	movs	r3, #0
 801234e:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 8012352:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 8012354:	f641 0310 	movw	r3, #6160	; 0x1810
 8012358:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801235c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8012360:	2b20      	cmp	r3, #32
 8012362:	d828      	bhi.n	80123b6 <RadioIrqProcess+0x6e>
 8012364:	2b00      	cmp	r3, #0
 8012366:	f000 817f 	beq.w	8012668 <RadioIrqProcess+0x320>
 801236a:	3b01      	subs	r3, #1
 801236c:	2b1f      	cmp	r3, #31
 801236e:	f200 817b 	bhi.w	8012668 <RadioIrqProcess+0x320>
 8012372:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012376:	006b      	.short	0x006b
 8012378:	01790089 	.word	0x01790089
 801237c:	01790126 	.word	0x01790126
 8012380:	01790179 	.word	0x01790179
 8012384:	01790160 	.word	0x01790160
 8012388:	01790179 	.word	0x01790179
 801238c:	01790179 	.word	0x01790179
 8012390:	01790179 	.word	0x01790179
 8012394:	01790170 	.word	0x01790170
 8012398:	01790179 	.word	0x01790179
 801239c:	01790179 	.word	0x01790179
 80123a0:	01790179 	.word	0x01790179
 80123a4:	01790179 	.word	0x01790179
 80123a8:	01790179 	.word	0x01790179
 80123ac:	01790179 	.word	0x01790179
 80123b0:	01790179 	.word	0x01790179
 80123b4:	017b      	.short	0x017b
 80123b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80123ba:	f000 80dd 	beq.w	8012578 <RadioIrqProcess+0x230>
 80123be:	d92d      	bls.n	801241c <RadioIrqProcess+0xd4>
 80123c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80123c4:	f040 8150 	bne.w	8012668 <RadioIrqProcess+0x320>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80123c8:	f245 2378 	movw	r3, #21112	; 0x5278
 80123cc:	f6c0 0301 	movt	r3, #2049	; 0x801
 80123d0:	2201      	movs	r2, #1
 80123d2:	2100      	movs	r1, #0
 80123d4:	2002      	movs	r0, #2
 80123d6:	f001 ff29 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80123da:	f000 f9eb 	bl	80127b4 <SUBGRF_GetOperatingMode>
 80123de:	2804      	cmp	r0, #4
 80123e0:	f000 80da 	beq.w	8012598 <RadioIrqProcess+0x250>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80123e4:	f000 f9e6 	bl	80127b4 <SUBGRF_GetOperatingMode>
 80123e8:	2805      	cmp	r0, #5
 80123ea:	f040 813d 	bne.w	8012668 <RadioIrqProcess+0x320>
            TimerStop( &RxTimeoutTimer );
 80123ee:	f241 70f8 	movw	r0, #6136	; 0x17f8
 80123f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80123f6:	f001 fcf9 	bl	8013dec <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80123fa:	2000      	movs	r0, #0
 80123fc:	f000 fada 	bl	80129b4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8012400:	f241 73f4 	movw	r3, #6132	; 0x17f4
 8012404:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	2b00      	cmp	r3, #0
 801240c:	f000 812c 	beq.w	8012668 <RadioIrqProcess+0x320>
 8012410:	68db      	ldr	r3, [r3, #12]
 8012412:	2b00      	cmp	r3, #0
 8012414:	f000 8128 	beq.w	8012668 <RadioIrqProcess+0x320>
                RadioEvents->RxTimeout( );
 8012418:	4798      	blx	r3
 801241a:	e125      	b.n	8012668 <RadioIrqProcess+0x320>
    switch( SubgRf.RadioIrq )
 801241c:	2b40      	cmp	r3, #64	; 0x40
 801241e:	f000 814a 	beq.w	80126b6 <RadioIrqProcess+0x36e>
 8012422:	2b80      	cmp	r3, #128	; 0x80
 8012424:	f040 8120 	bne.w	8012668 <RadioIrqProcess+0x320>
        SUBGRF_SetStandby( STDBY_RC );
 8012428:	2000      	movs	r0, #0
 801242a:	f000 fac3 	bl	80129b4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801242e:	f241 73f4 	movw	r3, #6132	; 0x17f4
 8012432:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	2b00      	cmp	r3, #0
 801243a:	f000 8115 	beq.w	8012668 <RadioIrqProcess+0x320>
 801243e:	699b      	ldr	r3, [r3, #24]
 8012440:	2b00      	cmp	r3, #0
 8012442:	f000 8111 	beq.w	8012668 <RadioIrqProcess+0x320>
            RadioEvents->CadDone( false );
 8012446:	2000      	movs	r0, #0
 8012448:	4798      	blx	r3
 801244a:	e10d      	b.n	8012668 <RadioIrqProcess+0x320>
        TimerStop( &TxTimeoutTimer );
 801244c:	f641 006c 	movw	r0, #6252	; 0x186c
 8012450:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8012454:	f001 fcca 	bl	8013dec <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8012458:	2000      	movs	r0, #0
 801245a:	f000 faab 	bl	80129b4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801245e:	f001 f80d 	bl	801347c <RFW_Is_LongPacketModeEnabled>
 8012462:	2801      	cmp	r0, #1
 8012464:	d00d      	beq.n	8012482 <RadioIrqProcess+0x13a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8012466:	f241 73f4 	movw	r3, #6132	; 0x17f4
 801246a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	2b00      	cmp	r3, #0
 8012472:	f000 80f9 	beq.w	8012668 <RadioIrqProcess+0x320>
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	2b00      	cmp	r3, #0
 801247a:	f000 80f5 	beq.w	8012668 <RadioIrqProcess+0x320>
            RadioEvents->TxDone( );
 801247e:	4798      	blx	r3
 8012480:	e0f2      	b.n	8012668 <RadioIrqProcess+0x320>
            RFW_DeInit_TxLongPacket( );
 8012482:	f001 f804 	bl	801348e <RFW_DeInit_TxLongPacket>
 8012486:	e7ee      	b.n	8012466 <RadioIrqProcess+0x11e>
        TimerStop( &RxTimeoutTimer );
 8012488:	f241 70f8 	movw	r0, #6136	; 0x17f8
 801248c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8012490:	f001 fcac 	bl	8013dec <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8012494:	f641 0310 	movw	r3, #6160	; 0x1810
 8012498:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801249c:	785b      	ldrb	r3, [r3, #1]
 801249e:	b393      	cbz	r3, 8012506 <RadioIrqProcess+0x1be>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80124a0:	22ff      	movs	r2, #255	; 0xff
 80124a2:	f10d 0107 	add.w	r1, sp, #7
 80124a6:	f241 60f4 	movw	r0, #5876	; 0x16f4
 80124aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80124ae:	f000 fe8c 	bl	80131ca <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80124b2:	f641 0034 	movw	r0, #6196	; 0x1834
 80124b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80124ba:	f000 fea0 	bl	80131fe <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80124be:	f241 73f4 	movw	r3, #6132	; 0x17f4
 80124c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	f000 80cd 	beq.w	8012668 <RadioIrqProcess+0x320>
 80124ce:	689c      	ldr	r4, [r3, #8]
 80124d0:	2c00      	cmp	r4, #0
 80124d2:	f000 80c9 	beq.w	8012668 <RadioIrqProcess+0x320>
            switch( SubgRf.PacketStatus.packetType )
 80124d6:	f641 0310 	movw	r3, #6160	; 0x1810
 80124da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80124de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80124e2:	2b01      	cmp	r3, #1
 80124e4:	d123      	bne.n	801252e <RadioIrqProcess+0x1e6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 80124e6:	f641 0210 	movw	r2, #6160	; 0x1810
 80124ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80124ee:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 80124f2:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 80124f6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80124fa:	f241 60f4 	movw	r0, #5876	; 0x16f4
 80124fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8012502:	47a0      	blx	r4
                break;
 8012504:	e0b0      	b.n	8012668 <RadioIrqProcess+0x320>
            SUBGRF_SetStandby( STDBY_RC );
 8012506:	2000      	movs	r0, #0
 8012508:	f000 fa54 	bl	80129b4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801250c:	2100      	movs	r1, #0
 801250e:	f640 1002 	movw	r0, #2306	; 0x902
 8012512:	f000 f955 	bl	80127c0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8012516:	f640 1044 	movw	r0, #2372	; 0x944
 801251a:	f000 f962 	bl	80127e2 <SUBGRF_ReadRegister>
 801251e:	f040 0102 	orr.w	r1, r0, #2
 8012522:	b2c9      	uxtb	r1, r1
 8012524:	f640 1044 	movw	r0, #2372	; 0x944
 8012528:	f000 f94a 	bl	80127c0 <SUBGRF_WriteRegister>
 801252c:	e7b8      	b.n	80124a0 <RadioIrqProcess+0x158>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801252e:	f641 0410 	movw	r4, #6160	; 0x1810
 8012532:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8012536:	4669      	mov	r1, sp
 8012538:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801253a:	f000 ff4f 	bl	80133dc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801253e:	9b00      	ldr	r3, [sp, #0]
 8012540:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8012544:	f644 52d3 	movw	r2, #19923	; 0x4dd3
 8012548:	f2c1 0262 	movt	r2, #4194	; 0x1062
 801254c:	fb82 1203 	smull	r1, r2, r2, r3
 8012550:	17db      	asrs	r3, r3, #31
 8012552:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8012556:	f241 72f4 	movw	r2, #6132	; 0x17f4
 801255a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 801255e:	6812      	ldr	r2, [r2, #0]
 8012560:	6895      	ldr	r5, [r2, #8]
 8012562:	b25b      	sxtb	r3, r3
 8012564:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 8012568:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801256c:	f241 60f4 	movw	r0, #5876	; 0x16f4
 8012570:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8012574:	47a8      	blx	r5
                break;
 8012576:	e077      	b.n	8012668 <RadioIrqProcess+0x320>
        SUBGRF_SetStandby( STDBY_RC );
 8012578:	2000      	movs	r0, #0
 801257a:	f000 fa1b 	bl	80129b4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801257e:	f241 73f4 	movw	r3, #6132	; 0x17f4
 8012582:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d06d      	beq.n	8012668 <RadioIrqProcess+0x320>
 801258c:	699b      	ldr	r3, [r3, #24]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d06a      	beq.n	8012668 <RadioIrqProcess+0x320>
            RadioEvents->CadDone( true );
 8012592:	2001      	movs	r0, #1
 8012594:	4798      	blx	r3
 8012596:	e067      	b.n	8012668 <RadioIrqProcess+0x320>
            TimerStop( &TxTimeoutTimer );
 8012598:	f641 006c 	movw	r0, #6252	; 0x186c
 801259c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80125a0:	f001 fc24 	bl	8013dec <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80125a4:	2000      	movs	r0, #0
 80125a6:	f000 fa05 	bl	80129b4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80125aa:	f241 73f4 	movw	r3, #6132	; 0x17f4
 80125ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d057      	beq.n	8012668 <RadioIrqProcess+0x320>
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d054      	beq.n	8012668 <RadioIrqProcess+0x320>
                RadioEvents->TxTimeout( );
 80125be:	4798      	blx	r3
 80125c0:	e052      	b.n	8012668 <RadioIrqProcess+0x320>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80125c2:	f245 238c 	movw	r3, #21132	; 0x528c
 80125c6:	f6c0 0301 	movt	r3, #2049	; 0x801
 80125ca:	2201      	movs	r2, #1
 80125cc:	2100      	movs	r1, #0
 80125ce:	2002      	movs	r0, #2
 80125d0:	f001 fe2c 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80125d4:	f641 0310 	movw	r3, #6160	; 0x1810
 80125d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80125dc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80125de:	2900      	cmp	r1, #0
 80125e0:	d042      	beq.n	8012668 <RadioIrqProcess+0x320>
    SUBGRF_WriteRegister( addr, data );
 80125e2:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80125e6:	f640 1003 	movw	r0, #2307	; 0x903
 80125ea:	f000 f8e9 	bl	80127c0 <SUBGRF_WriteRegister>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80125ee:	f641 0410 	movw	r4, #6160	; 0x1810
 80125f2:	f2c2 0400 	movt	r4, #8192	; 0x2000
    SUBGRF_WriteRegister( addr, data );
 80125f6:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80125fa:	f640 1004 	movw	r0, #2308	; 0x904
 80125fe:	f000 f8df 	bl	80127c0 <SUBGRF_WriteRegister>
 8012602:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8012606:	f640 1005 	movw	r0, #2309	; 0x905
 801260a:	f000 f8d9 	bl	80127c0 <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister( addr );
 801260e:	f640 1002 	movw	r0, #2306	; 0x902
 8012612:	f000 f8e6 	bl	80127e2 <SUBGRF_ReadRegister>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8012616:	f040 0101 	orr.w	r1, r0, #1
    SUBGRF_WriteRegister( addr, data );
 801261a:	b2c9      	uxtb	r1, r1
 801261c:	f640 1002 	movw	r0, #2306	; 0x902
 8012620:	f000 f8ce 	bl	80127c0 <SUBGRF_WriteRegister>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8012624:	2200      	movs	r2, #0
 8012626:	65a2      	str	r2, [r4, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8012628:	4613      	mov	r3, r2
 801262a:	f240 2162 	movw	r1, #610	; 0x262
 801262e:	4608      	mov	r0, r1
 8012630:	f000 fb36 	bl	8012ca0 <SUBGRF_SetDioIrqParams>
 8012634:	e018      	b.n	8012668 <RadioIrqProcess+0x320>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8012636:	f245 2398 	movw	r3, #21144	; 0x5298
 801263a:	f6c0 0301 	movt	r3, #2049	; 0x801
 801263e:	2201      	movs	r2, #1
 8012640:	2100      	movs	r1, #0
 8012642:	2002      	movs	r0, #2
 8012644:	f001 fdf2 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8012648:	f000 ff16 	bl	8013478 <RFW_Is_Init>
 801264c:	2801      	cmp	r0, #1
 801264e:	d10b      	bne.n	8012668 <RadioIrqProcess+0x320>
            RFW_ReceivePayload( );
 8012650:	f000 ff1e 	bl	8013490 <RFW_ReceivePayload>
 8012654:	e008      	b.n	8012668 <RadioIrqProcess+0x320>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8012656:	f245 23a4 	movw	r3, #21156	; 0x52a4
 801265a:	f6c0 0301 	movt	r3, #2049	; 0x801
 801265e:	2201      	movs	r2, #1
 8012660:	2100      	movs	r1, #0
 8012662:	2002      	movs	r0, #2
 8012664:	f001 fde2 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
}
 8012668:	b003      	add	sp, #12
 801266a:	bd30      	pop	{r4, r5, pc}
        TimerStop( &RxTimeoutTimer );
 801266c:	f241 70f8 	movw	r0, #6136	; 0x17f8
 8012670:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8012674:	f001 fbba 	bl	8013dec <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8012678:	f641 0310 	movw	r3, #6160	; 0x1810
 801267c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012680:	785b      	ldrb	r3, [r3, #1]
 8012682:	b1a3      	cbz	r3, 80126ae <RadioIrqProcess+0x366>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8012684:	f241 73f4 	movw	r3, #6132	; 0x17f4
 8012688:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d0ea      	beq.n	8012668 <RadioIrqProcess+0x320>
 8012692:	68db      	ldr	r3, [r3, #12]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d0e7      	beq.n	8012668 <RadioIrqProcess+0x320>
            RadioEvents->RxTimeout( );
 8012698:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801269a:	f245 23b0 	movw	r3, #21168	; 0x52b0
 801269e:	f6c0 0301 	movt	r3, #2049	; 0x801
 80126a2:	2201      	movs	r2, #1
 80126a4:	2100      	movs	r1, #0
 80126a6:	2002      	movs	r0, #2
 80126a8:	f001 fdc0 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
 80126ac:	e7dc      	b.n	8012668 <RadioIrqProcess+0x320>
            SUBGRF_SetStandby( STDBY_RC );
 80126ae:	2000      	movs	r0, #0
 80126b0:	f000 f980 	bl	80129b4 <SUBGRF_SetStandby>
 80126b4:	e7e6      	b.n	8012684 <RadioIrqProcess+0x33c>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80126b6:	f245 23bc 	movw	r3, #21180	; 0x52bc
 80126ba:	f6c0 0301 	movt	r3, #2049	; 0x801
 80126be:	2201      	movs	r2, #1
 80126c0:	2100      	movs	r1, #0
 80126c2:	2002      	movs	r0, #2
 80126c4:	f001 fdb2 	bl	801422c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80126c8:	f641 0310 	movw	r3, #6160	; 0x1810
 80126cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80126d0:	785b      	ldrb	r3, [r3, #1]
 80126d2:	b15b      	cbz	r3, 80126ec <RadioIrqProcess+0x3a4>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80126d4:	f241 73f4 	movw	r3, #6132	; 0x17f4
 80126d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d0c2      	beq.n	8012668 <RadioIrqProcess+0x320>
 80126e2:	691b      	ldr	r3, [r3, #16]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d0bf      	beq.n	8012668 <RadioIrqProcess+0x320>
            RadioEvents->RxError( );
 80126e8:	4798      	blx	r3
}
 80126ea:	e7bd      	b.n	8012668 <RadioIrqProcess+0x320>
            SUBGRF_SetStandby( STDBY_RC );
 80126ec:	2000      	movs	r0, #0
 80126ee:	f000 f961 	bl	80129b4 <SUBGRF_SetStandby>
 80126f2:	e7ef      	b.n	80126d4 <RadioIrqProcess+0x38c>

080126f4 <RadioOnDioIrq>:
{
 80126f4:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 80126f6:	f641 0310 	movw	r3, #6160	; 0x1810
 80126fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80126fe:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8012702:	f7ff fe21 	bl	8012348 <RadioIrqProcess>
}
 8012706:	bd08      	pop	{r3, pc}

08012708 <RadioTxPrbs>:
{
 8012708:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801270a:	f641 0310 	movw	r3, #6160	; 0x1810
 801270e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012712:	2101      	movs	r1, #1
 8012714:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8012718:	f000 fdb1 	bl	801327e <SUBGRF_SetSwitch>
    SUBGRF_WriteRegister( addr, data );
 801271c:	212d      	movs	r1, #45	; 0x2d
 801271e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8012722:	f000 f84d 	bl	80127c0 <SUBGRF_WriteRegister>
    SUBGRF_SetTxInfinitePreamble( );
 8012726:	f000 fa1b 	bl	8012b60 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801272a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801272e:	f2c0 000f 	movt	r0, #15
 8012732:	f000 f957 	bl	80129e4 <SUBGRF_SetTx>
}
 8012736:	bd08      	pop	{r3, pc}

08012738 <RadioIsChannelFree>:
{
 8012738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801273a:	b08b      	sub	sp, #44	; 0x2c
 801273c:	4604      	mov	r4, r0
 801273e:	460f      	mov	r7, r1
 8012740:	4616      	mov	r6, r2
 8012742:	461d      	mov	r5, r3
    RadioStandby( );
 8012744:	f7fe fdb1 	bl	80112aa <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8012748:	2000      	movs	r0, #0
 801274a:	f7fe fe5b 	bl	8011404 <RadioSetModem>
    SUBGRF_SetRfFrequency( freq );
 801274e:	4620      	mov	r0, r4
 8012750:	f000 fb19 	bl	8012d86 <SUBGRF_SetRfFrequency>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8012754:	2301      	movs	r3, #1
 8012756:	9309      	str	r3, [sp, #36]	; 0x24
 8012758:	2400      	movs	r4, #0
 801275a:	9408      	str	r4, [sp, #32]
 801275c:	9407      	str	r4, [sp, #28]
 801275e:	9406      	str	r4, [sp, #24]
 8012760:	9405      	str	r4, [sp, #20]
 8012762:	9404      	str	r4, [sp, #16]
 8012764:	9403      	str	r4, [sp, #12]
 8012766:	9402      	str	r4, [sp, #8]
 8012768:	2303      	movs	r3, #3
 801276a:	9301      	str	r3, [sp, #4]
 801276c:	9700      	str	r7, [sp, #0]
 801276e:	4623      	mov	r3, r4
 8012770:	f44f 7216 	mov.w	r2, #600	; 0x258
 8012774:	4639      	mov	r1, r7
 8012776:	4620      	mov	r0, r4
 8012778:	f7ff fb0f 	bl	8011d9a <RadioSetRxConfig>
    RadioRx( 0 );
 801277c:	4620      	mov	r0, r4
 801277e:	f7fe fdf7 	bl	8011370 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8012782:	f7fe fda8 	bl	80112d6 <RadioGetWakeupTime>
 8012786:	f7ef fd7b 	bl	8002280 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 801278a:	f001 fae5 	bl	8013d58 <UTIL_TIMER_GetCurrentTime>
 801278e:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8012790:	4620      	mov	r0, r4
 8012792:	f001 faeb 	bl	8013d6c <UTIL_TIMER_GetElapsedTime>
 8012796:	42a8      	cmp	r0, r5
 8012798:	d206      	bcs.n	80127a8 <RadioIsChannelFree+0x70>
    return SUBGRF_GetRssiInst( );
 801279a:	f000 fce2 	bl	8013162 <SUBGRF_GetRssiInst>
        if( rssi > rssiThresh )
 801279e:	b200      	sxth	r0, r0
 80127a0:	4286      	cmp	r6, r0
 80127a2:	daf5      	bge.n	8012790 <RadioIsChannelFree+0x58>
            status = false;
 80127a4:	2400      	movs	r4, #0
 80127a6:	e000      	b.n	80127aa <RadioIsChannelFree+0x72>
    bool status = true;
 80127a8:	2401      	movs	r4, #1
    RadioStandby( );
 80127aa:	f7fe fd7e 	bl	80112aa <RadioStandby>
}
 80127ae:	4620      	mov	r0, r4
 80127b0:	b00b      	add	sp, #44	; 0x2c
 80127b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080127b4 <SUBGRF_GetOperatingMode>:
    OperatingMode = MODE_STDBY_RC;
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
 80127b4:	f641 038a 	movw	r3, #6282	; 0x188a
 80127b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 80127bc:	7818      	ldrb	r0, [r3, #0]
 80127be:	4770      	bx	lr

080127c0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80127c0:	b500      	push	{lr}
 80127c2:	b083      	sub	sp, #12
 80127c4:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80127c8:	2301      	movs	r3, #1
 80127ca:	f10d 0207 	add.w	r2, sp, #7
 80127ce:	4601      	mov	r1, r0
 80127d0:	f240 306c 	movw	r0, #876	; 0x36c
 80127d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80127d8:	f7f4 fa53 	bl	8006c82 <HAL_SUBGHZ_WriteRegisters>
}
 80127dc:	b003      	add	sp, #12
 80127de:	f85d fb04 	ldr.w	pc, [sp], #4

080127e2 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80127e2:	b500      	push	{lr}
 80127e4:	b083      	sub	sp, #12
 80127e6:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80127e8:	2301      	movs	r3, #1
 80127ea:	f10d 0207 	add.w	r2, sp, #7
 80127ee:	f240 306c 	movw	r0, #876	; 0x36c
 80127f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80127f6:	f7f4 fa93 	bl	8006d20 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 80127fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80127fe:	b003      	add	sp, #12
 8012800:	f85d fb04 	ldr.w	pc, [sp], #4

08012804 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8012804:	b510      	push	{r4, lr}
 8012806:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8012808:	f7f6 fd31 	bl	800926e <RBI_IsDCDC>
 801280c:	2801      	cmp	r0, #1
 801280e:	d000      	beq.n	8012812 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8012810:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8012812:	f640 1023 	movw	r0, #2339	; 0x923
 8012816:	f7ff ffe4 	bl	80127e2 <SUBGRF_ReadRegister>
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801281a:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
 801281e:	4321      	orrs	r1, r4
 8012820:	f640 1023 	movw	r0, #2339	; 0x923
 8012824:	f7ff ffcc 	bl	80127c0 <SUBGRF_WriteRegister>
}
 8012828:	e7f2      	b.n	8012810 <Radio_SMPS_Set+0xc>

0801282a <SUBGRF_SetWhiteningSeed>:
    return PacketType;
 801282a:	f641 038b 	movw	r3, #6283	; 0x188b
 801282e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    switch( SUBGRF_GetPacketType( ) )
 8012832:	781b      	ldrb	r3, [r3, #0]
 8012834:	b103      	cbz	r3, 8012838 <SUBGRF_SetWhiteningSeed+0xe>
 8012836:	4770      	bx	lr
{
 8012838:	b510      	push	{r4, lr}
 801283a:	4604      	mov	r4, r0
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801283c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8012840:	f7ff ffcf 	bl	80127e2 <SUBGRF_ReadRegister>
 8012844:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8012848:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801284c:	4301      	orrs	r1, r0
 801284e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8012852:	f7ff ffb5 	bl	80127c0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8012856:	b2e1      	uxtb	r1, r4
 8012858:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801285c:	f7ff ffb0 	bl	80127c0 <SUBGRF_WriteRegister>
}
 8012860:	bd10      	pop	{r4, pc}

08012862 <SUBGRF_WriteRegisters>:
{
 8012862:	b510      	push	{r4, lr}
 8012864:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012866:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801286a:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801286c:	460a      	mov	r2, r1
 801286e:	4601      	mov	r1, r0
 8012870:	f240 306c 	movw	r0, #876	; 0x36c
 8012874:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8012878:	f7f4 fa03 	bl	8006c82 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801287c:	f384 8810 	msr	PRIMASK, r4
}
 8012880:	bd10      	pop	{r4, pc}

08012882 <SUBGRF_SetSyncWord>:
{
 8012882:	b508      	push	{r3, lr}
 8012884:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8012886:	2208      	movs	r2, #8
 8012888:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801288c:	f7ff ffe9 	bl	8012862 <SUBGRF_WriteRegisters>
}
 8012890:	2000      	movs	r0, #0
 8012892:	bd08      	pop	{r3, pc}

08012894 <SUBGRF_SetCrcSeed>:
{
 8012894:	b500      	push	{lr}
 8012896:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8012898:	0a03      	lsrs	r3, r0, #8
 801289a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801289e:	f88d 0005 	strb.w	r0, [sp, #5]
    return PacketType;
 80128a2:	f641 038b 	movw	r3, #6283	; 0x188b
 80128a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    switch( SUBGRF_GetPacketType( ) )
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	b113      	cbz	r3, 80128b4 <SUBGRF_SetCrcSeed+0x20>
}
 80128ae:	b003      	add	sp, #12
 80128b0:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80128b4:	2202      	movs	r2, #2
 80128b6:	a901      	add	r1, sp, #4
 80128b8:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80128bc:	f7ff ffd1 	bl	8012862 <SUBGRF_WriteRegisters>
}
 80128c0:	e7f5      	b.n	80128ae <SUBGRF_SetCrcSeed+0x1a>

080128c2 <SUBGRF_SetCrcPolynomial>:
{
 80128c2:	b500      	push	{lr}
 80128c4:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80128c6:	0a03      	lsrs	r3, r0, #8
 80128c8:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80128cc:	f88d 0005 	strb.w	r0, [sp, #5]
    return PacketType;
 80128d0:	f641 038b 	movw	r3, #6283	; 0x188b
 80128d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    switch( SUBGRF_GetPacketType( ) )
 80128d8:	781b      	ldrb	r3, [r3, #0]
 80128da:	b113      	cbz	r3, 80128e2 <SUBGRF_SetCrcPolynomial+0x20>
}
 80128dc:	b003      	add	sp, #12
 80128de:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80128e2:	2202      	movs	r2, #2
 80128e4:	a901      	add	r1, sp, #4
 80128e6:	f240 60be 	movw	r0, #1726	; 0x6be
 80128ea:	f7ff ffba 	bl	8012862 <SUBGRF_WriteRegisters>
}
 80128ee:	e7f5      	b.n	80128dc <SUBGRF_SetCrcPolynomial+0x1a>

080128f0 <SUBGRF_ReadRegisters>:
{
 80128f0:	b510      	push	{r4, lr}
 80128f2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128f4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80128f8:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80128fa:	460a      	mov	r2, r1
 80128fc:	4601      	mov	r1, r0
 80128fe:	f240 306c 	movw	r0, #876	; 0x36c
 8012902:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8012906:	f7f4 fa0b 	bl	8006d20 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801290a:	f384 8810 	msr	PRIMASK, r4
}
 801290e:	bd10      	pop	{r4, pc}

08012910 <SUBGRF_WriteBuffer>:
{
 8012910:	b510      	push	{r4, lr}
 8012912:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012914:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012918:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801291a:	460a      	mov	r2, r1
 801291c:	4601      	mov	r1, r0
 801291e:	f240 306c 	movw	r0, #876	; 0x36c
 8012922:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8012926:	f7f4 fb42 	bl	8006fae <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801292a:	f384 8810 	msr	PRIMASK, r4
}
 801292e:	bd10      	pop	{r4, pc}

08012930 <SUBGRF_SetPayload>:
{
 8012930:	b508      	push	{r3, lr}
 8012932:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8012934:	4601      	mov	r1, r0
 8012936:	2000      	movs	r0, #0
 8012938:	f7ff ffea 	bl	8012910 <SUBGRF_WriteBuffer>
}
 801293c:	bd08      	pop	{r3, pc}

0801293e <SUBGRF_ReadBuffer>:
{
 801293e:	b510      	push	{r4, lr}
 8012940:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012942:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012946:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8012948:	460a      	mov	r2, r1
 801294a:	4601      	mov	r1, r0
 801294c:	f240 306c 	movw	r0, #876	; 0x36c
 8012950:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8012954:	f7f4 fb74 	bl	8007040 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012958:	f384 8810 	msr	PRIMASK, r4
}
 801295c:	bd10      	pop	{r4, pc}

0801295e <SUBGRF_WriteCommand>:
{
 801295e:	b510      	push	{r4, lr}
 8012960:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012962:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012966:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8012968:	460a      	mov	r2, r1
 801296a:	4601      	mov	r1, r0
 801296c:	f240 306c 	movw	r0, #876	; 0x36c
 8012970:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8012974:	f7f4 fa21 	bl	8006dba <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012978:	f384 8810 	msr	PRIMASK, r4
}
 801297c:	bd10      	pop	{r4, pc}

0801297e <SUBGRF_SetSleep>:
{
 801297e:	b510      	push	{r4, lr}
 8012980:	b082      	sub	sp, #8
 8012982:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8012984:	2000      	movs	r0, #0
 8012986:	f7f6 fc66 	bl	8009256 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801298a:	2002      	movs	r0, #2
 801298c:	f7ff ff3a 	bl	8012804 <Radio_SMPS_Set>
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8012990:	f004 0407 	and.w	r4, r4, #7
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8012994:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8012998:	2201      	movs	r2, #1
 801299a:	f10d 0107 	add.w	r1, sp, #7
 801299e:	2084      	movs	r0, #132	; 0x84
 80129a0:	f7ff ffdd 	bl	801295e <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80129a4:	f641 038a 	movw	r3, #6282	; 0x188a
 80129a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80129ac:	2200      	movs	r2, #0
 80129ae:	701a      	strb	r2, [r3, #0]
}
 80129b0:	b002      	add	sp, #8
 80129b2:	bd10      	pop	{r4, pc}

080129b4 <SUBGRF_SetStandby>:
{
 80129b4:	b500      	push	{lr}
 80129b6:	b083      	sub	sp, #12
 80129b8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80129bc:	2201      	movs	r2, #1
 80129be:	f10d 0107 	add.w	r1, sp, #7
 80129c2:	2080      	movs	r0, #128	; 0x80
 80129c4:	f7ff ffcb 	bl	801295e <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80129c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
        OperatingMode = MODE_STDBY_XOSC;
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	bf0c      	ite	eq
 80129d0:	2201      	moveq	r2, #1
 80129d2:	2202      	movne	r2, #2
 80129d4:	f641 038a 	movw	r3, #6282	; 0x188a
 80129d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80129dc:	701a      	strb	r2, [r3, #0]
}
 80129de:	b003      	add	sp, #12
 80129e0:	f85d fb04 	ldr.w	pc, [sp], #4

080129e4 <SUBGRF_SetTx>:
{
 80129e4:	b500      	push	{lr}
 80129e6:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 80129e8:	f641 038a 	movw	r3, #6282	; 0x188a
 80129ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80129f0:	2204      	movs	r2, #4
 80129f2:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80129f4:	0c03      	lsrs	r3, r0, #16
 80129f6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80129fa:	0a03      	lsrs	r3, r0, #8
 80129fc:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8012a00:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8012a04:	2203      	movs	r2, #3
 8012a06:	a901      	add	r1, sp, #4
 8012a08:	2083      	movs	r0, #131	; 0x83
 8012a0a:	f7ff ffa8 	bl	801295e <SUBGRF_WriteCommand>
}
 8012a0e:	b003      	add	sp, #12
 8012a10:	f85d fb04 	ldr.w	pc, [sp], #4

08012a14 <SUBGRF_SendPayload>:
{
 8012a14:	b510      	push	{r4, lr}
 8012a16:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8012a18:	f7ff ff8a 	bl	8012930 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8012a1c:	4620      	mov	r0, r4
 8012a1e:	f7ff ffe1 	bl	80129e4 <SUBGRF_SetTx>
}
 8012a22:	bd10      	pop	{r4, pc}

08012a24 <SUBGRF_SetRx>:
{
 8012a24:	b500      	push	{lr}
 8012a26:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8012a28:	f641 038a 	movw	r3, #6282	; 0x188a
 8012a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012a30:	2205      	movs	r2, #5
 8012a32:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012a34:	0c03      	lsrs	r3, r0, #16
 8012a36:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012a3a:	0a03      	lsrs	r3, r0, #8
 8012a3c:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8012a40:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8012a44:	2203      	movs	r2, #3
 8012a46:	a901      	add	r1, sp, #4
 8012a48:	2082      	movs	r0, #130	; 0x82
 8012a4a:	f7ff ff88 	bl	801295e <SUBGRF_WriteCommand>
}
 8012a4e:	b003      	add	sp, #12
 8012a50:	f85d fb04 	ldr.w	pc, [sp], #4

08012a54 <SUBGRF_GetRandom>:
{
 8012a54:	b570      	push	{r4, r5, r6, lr}
 8012a56:	b082      	sub	sp, #8
    uint32_t number = 0;
 8012a58:	2600      	movs	r6, #0
 8012a5a:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8012a5c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8012a60:	f7ff febf 	bl	80127e2 <SUBGRF_ReadRegister>
 8012a64:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8012a66:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8012a6a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8012a6e:	f7ff fea7 	bl	80127c0 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8012a72:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8012a76:	f7ff feb4 	bl	80127e2 <SUBGRF_ReadRegister>
 8012a7a:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8012a7c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8012a80:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8012a84:	f7ff fe9c 	bl	80127c0 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8012a88:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8012a8c:	f7ff ffca 	bl	8012a24 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8012a90:	2204      	movs	r2, #4
 8012a92:	eb0d 0102 	add.w	r1, sp, r2
 8012a96:	f640 0019 	movw	r0, #2073	; 0x819
 8012a9a:	f7ff ff29 	bl	80128f0 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8012a9e:	4630      	mov	r0, r6
 8012aa0:	f7ff ff88 	bl	80129b4 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8012aa4:	4629      	mov	r1, r5
 8012aa6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8012aaa:	f7ff fe89 	bl	80127c0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8012aae:	4621      	mov	r1, r4
 8012ab0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8012ab4:	f7ff fe84 	bl	80127c0 <SUBGRF_WriteRegister>
}
 8012ab8:	9801      	ldr	r0, [sp, #4]
 8012aba:	b002      	add	sp, #8
 8012abc:	bd70      	pop	{r4, r5, r6, pc}

08012abe <SUBGRF_SetRxBoosted>:
{
 8012abe:	b510      	push	{r4, lr}
 8012ac0:	b082      	sub	sp, #8
 8012ac2:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8012ac4:	f641 038a 	movw	r3, #6282	; 0x188a
 8012ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012acc:	2205      	movs	r2, #5
 8012ace:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8012ad0:	2197      	movs	r1, #151	; 0x97
 8012ad2:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8012ad6:	f7ff fe73 	bl	80127c0 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012ada:	0c23      	lsrs	r3, r4, #16
 8012adc:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012ae0:	0a23      	lsrs	r3, r4, #8
 8012ae2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8012ae6:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8012aea:	2203      	movs	r2, #3
 8012aec:	a901      	add	r1, sp, #4
 8012aee:	2082      	movs	r0, #130	; 0x82
 8012af0:	f7ff ff35 	bl	801295e <SUBGRF_WriteCommand>
}
 8012af4:	b002      	add	sp, #8
 8012af6:	bd10      	pop	{r4, pc}

08012af8 <SUBGRF_SetRxDutyCycle>:
{
 8012af8:	b500      	push	{lr}
 8012afa:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8012afc:	0c03      	lsrs	r3, r0, #16
 8012afe:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8012b02:	0a03      	lsrs	r3, r0, #8
 8012b04:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8012b08:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8012b0c:	0c0b      	lsrs	r3, r1, #16
 8012b0e:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8012b12:	0a0b      	lsrs	r3, r1, #8
 8012b14:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8012b18:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8012b1c:	2206      	movs	r2, #6
 8012b1e:	4669      	mov	r1, sp
 8012b20:	2094      	movs	r0, #148	; 0x94
 8012b22:	f7ff ff1c 	bl	801295e <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8012b26:	f641 038a 	movw	r3, #6282	; 0x188a
 8012b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b2e:	2206      	movs	r2, #6
 8012b30:	701a      	strb	r2, [r3, #0]
}
 8012b32:	b003      	add	sp, #12
 8012b34:	f85d fb04 	ldr.w	pc, [sp], #4

08012b38 <SUBGRF_SetCad>:
{
 8012b38:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	4611      	mov	r1, r2
 8012b3e:	20c5      	movs	r0, #197	; 0xc5
 8012b40:	f7ff ff0d 	bl	801295e <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8012b44:	f641 038a 	movw	r3, #6282	; 0x188a
 8012b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b4c:	2207      	movs	r2, #7
 8012b4e:	701a      	strb	r2, [r3, #0]
}
 8012b50:	bd08      	pop	{r3, pc}

08012b52 <SUBGRF_SetTxContinuousWave>:
{
 8012b52:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8012b54:	2200      	movs	r2, #0
 8012b56:	4611      	mov	r1, r2
 8012b58:	20d1      	movs	r0, #209	; 0xd1
 8012b5a:	f7ff ff00 	bl	801295e <SUBGRF_WriteCommand>
}
 8012b5e:	bd08      	pop	{r3, pc}

08012b60 <SUBGRF_SetTxInfinitePreamble>:
{
 8012b60:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8012b62:	2200      	movs	r2, #0
 8012b64:	4611      	mov	r1, r2
 8012b66:	20d2      	movs	r0, #210	; 0xd2
 8012b68:	f7ff fef9 	bl	801295e <SUBGRF_WriteCommand>
}
 8012b6c:	bd08      	pop	{r3, pc}

08012b6e <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8012b6e:	b500      	push	{lr}
 8012b70:	b083      	sub	sp, #12
 8012b72:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8012b76:	2201      	movs	r2, #1
 8012b78:	f10d 0107 	add.w	r1, sp, #7
 8012b7c:	209f      	movs	r0, #159	; 0x9f
 8012b7e:	f7ff feee 	bl	801295e <SUBGRF_WriteCommand>
}
 8012b82:	b003      	add	sp, #12
 8012b84:	f85d fb04 	ldr.w	pc, [sp], #4

08012b88 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8012b88:	b500      	push	{lr}
 8012b8a:	b083      	sub	sp, #12
 8012b8c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8012b90:	2201      	movs	r2, #1
 8012b92:	f10d 0107 	add.w	r1, sp, #7
 8012b96:	20a0      	movs	r0, #160	; 0xa0
 8012b98:	f7ff fee1 	bl	801295e <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8012b9c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012ba0:	293f      	cmp	r1, #63	; 0x3f
 8012ba2:	d907      	bls.n	8012bb4 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        reg = exp + ( mant << 3 );
 8012ba4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8012ba8:	3101      	adds	r1, #1
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8012baa:	b2c9      	uxtb	r1, r1
 8012bac:	f240 7006 	movw	r0, #1798	; 0x706
 8012bb0:	f7ff fe06 	bl	80127c0 <SUBGRF_WriteRegister>
}
 8012bb4:	b003      	add	sp, #12
 8012bb6:	f85d fb04 	ldr.w	pc, [sp], #4

08012bba <SUBGRF_SetRegulatorMode>:
{
 8012bba:	b500      	push	{lr}
 8012bbc:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8012bbe:	f7f6 fb56 	bl	800926e <RBI_IsDCDC>
 8012bc2:	2801      	cmp	r0, #1
 8012bc4:	bf14      	ite	ne
 8012bc6:	2000      	movne	r0, #0
 8012bc8:	2001      	moveq	r0, #1
 8012bca:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8012bce:	2201      	movs	r2, #1
 8012bd0:	f10d 0107 	add.w	r1, sp, #7
 8012bd4:	2096      	movs	r0, #150	; 0x96
 8012bd6:	f7ff fec2 	bl	801295e <SUBGRF_WriteCommand>
}
 8012bda:	b003      	add	sp, #12
 8012bdc:	f85d fb04 	ldr.w	pc, [sp], #4

08012be0 <SUBGRF_Calibrate>:
{
 8012be0:	b500      	push	{lr}
 8012be2:	b083      	sub	sp, #12
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8012be4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8012be8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8012bec:	2201      	movs	r2, #1
 8012bee:	f10d 0107 	add.w	r1, sp, #7
 8012bf2:	2089      	movs	r0, #137	; 0x89
 8012bf4:	f7ff feb3 	bl	801295e <SUBGRF_WriteCommand>
}
 8012bf8:	b003      	add	sp, #12
 8012bfa:	f85d fb04 	ldr.w	pc, [sp], #4

08012bfe <SUBGRF_CalibrateImage>:
{
 8012bfe:	b500      	push	{lr}
 8012c00:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8012c02:	f44f 4369 	mov.w	r3, #59648	; 0xe900
 8012c06:	f2c3 53a4 	movt	r3, #13732	; 0x35a4
 8012c0a:	4298      	cmp	r0, r3
 8012c0c:	d81e      	bhi.n	8012c4c <SUBGRF_CalibrateImage+0x4e>
    else if( freq > 850000000 )
 8012c0e:	f64f 0380 	movw	r3, #63616	; 0xf880
 8012c12:	f2c3 23a9 	movt	r3, #12969	; 0x32a9
 8012c16:	4298      	cmp	r0, r3
 8012c18:	d826      	bhi.n	8012c68 <SUBGRF_CalibrateImage+0x6a>
    else if( freq > 770000000 )
 8012c1a:	f44f 4389 	mov.w	r3, #17536	; 0x4480
 8012c1e:	f6c2 53e5 	movt	r3, #11749	; 0x2de5
 8012c22:	4298      	cmp	r0, r3
 8012c24:	d823      	bhi.n	8012c6e <SUBGRF_CalibrateImage+0x70>
    else if( freq > 460000000 )
 8012c26:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8012c2a:	f6c1 336b 	movt	r3, #7019	; 0x1b6b
 8012c2e:	4298      	cmp	r0, r3
 8012c30:	d820      	bhi.n	8012c74 <SUBGRF_CalibrateImage+0x76>
    else if( freq > 425000000 )
 8012c32:	f64f 4240 	movw	r2, #64576	; 0xfc40
 8012c36:	f6c1 1254 	movt	r2, #6484	; 0x1954
 8012c3a:	4290      	cmp	r0, r2
 8012c3c:	bf94      	ite	ls
 8012c3e:	2329      	movls	r3, #41	; 0x29
 8012c40:	236b      	movhi	r3, #107	; 0x6b
 8012c42:	4290      	cmp	r0, r2
 8012c44:	bf94      	ite	ls
 8012c46:	202b      	movls	r0, #43	; 0x2b
 8012c48:	206f      	movhi	r0, #111	; 0x6f
 8012c4a:	e001      	b.n	8012c50 <SUBGRF_CalibrateImage+0x52>
 8012c4c:	23e1      	movs	r3, #225	; 0xe1
 8012c4e:	20e9      	movs	r0, #233	; 0xe9
        calFreq[0] = 0xE1;
 8012c50:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8012c54:	f88d 0005 	strb.w	r0, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8012c58:	2202      	movs	r2, #2
 8012c5a:	a901      	add	r1, sp, #4
 8012c5c:	2098      	movs	r0, #152	; 0x98
 8012c5e:	f7ff fe7e 	bl	801295e <SUBGRF_WriteCommand>
}
 8012c62:	b003      	add	sp, #12
 8012c64:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c68:	23d7      	movs	r3, #215	; 0xd7
 8012c6a:	20db      	movs	r0, #219	; 0xdb
 8012c6c:	e7f0      	b.n	8012c50 <SUBGRF_CalibrateImage+0x52>
 8012c6e:	23c1      	movs	r3, #193	; 0xc1
 8012c70:	20c5      	movs	r0, #197	; 0xc5
 8012c72:	e7ed      	b.n	8012c50 <SUBGRF_CalibrateImage+0x52>
 8012c74:	2375      	movs	r3, #117	; 0x75
 8012c76:	2081      	movs	r0, #129	; 0x81
 8012c78:	e7ea      	b.n	8012c50 <SUBGRF_CalibrateImage+0x52>

08012c7a <SUBGRF_SetPaConfig>:
{
 8012c7a:	b500      	push	{lr}
 8012c7c:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8012c7e:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8012c82:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8012c86:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8012c8a:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8012c8e:	2204      	movs	r2, #4
 8012c90:	eb0d 0102 	add.w	r1, sp, r2
 8012c94:	2095      	movs	r0, #149	; 0x95
 8012c96:	f7ff fe62 	bl	801295e <SUBGRF_WriteCommand>
}
 8012c9a:	b003      	add	sp, #12
 8012c9c:	f85d fb04 	ldr.w	pc, [sp], #4

08012ca0 <SUBGRF_SetDioIrqParams>:
{
 8012ca0:	b500      	push	{lr}
 8012ca2:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8012ca4:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8012ca8:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8012cac:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8012cb0:	0a08      	lsrs	r0, r1, #8
 8012cb2:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8012cb6:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8012cba:	0a11      	lsrs	r1, r2, #8
 8012cbc:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8012cc0:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8012cc4:	0a1a      	lsrs	r2, r3, #8
 8012cc6:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8012cca:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8012cce:	2208      	movs	r2, #8
 8012cd0:	4669      	mov	r1, sp
 8012cd2:	4610      	mov	r0, r2
 8012cd4:	f7ff fe43 	bl	801295e <SUBGRF_WriteCommand>
}
 8012cd8:	b003      	add	sp, #12
 8012cda:	f85d fb04 	ldr.w	pc, [sp], #4

08012cde <SUBGRF_SetTcxoMode>:
{
 8012cde:	b500      	push	{lr}
 8012ce0:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8012ce2:	f000 0007 	and.w	r0, r0, #7
 8012ce6:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012cea:	0c0b      	lsrs	r3, r1, #16
 8012cec:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012cf0:	0a0b      	lsrs	r3, r1, #8
 8012cf2:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8012cf6:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8012cfa:	2204      	movs	r2, #4
 8012cfc:	eb0d 0102 	add.w	r1, sp, r2
 8012d00:	2097      	movs	r0, #151	; 0x97
 8012d02:	f7ff fe2c 	bl	801295e <SUBGRF_WriteCommand>
}
 8012d06:	b003      	add	sp, #12
 8012d08:	f85d fb04 	ldr.w	pc, [sp], #4

08012d0c <SUBGRF_Init>:
{
 8012d0c:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8012d0e:	b120      	cbz	r0, 8012d1a <SUBGRF_Init+0xe>
        RadioOnDioIrqCb = dioIrq;
 8012d10:	f641 038c 	movw	r3, #6284	; 0x188c
 8012d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d18:	6018      	str	r0, [r3, #0]
    RADIO_INIT();
 8012d1a:	f7ef f999 	bl	8002050 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8012d1e:	2002      	movs	r0, #2
 8012d20:	f7ff fd70 	bl	8012804 <Radio_SMPS_Set>
    ImageCalibrated = false;
 8012d24:	f641 0388 	movw	r3, #6280	; 0x1888
 8012d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d2c:	2000      	movs	r0, #0
 8012d2e:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8012d30:	f7ff fe40 	bl	80129b4 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8012d34:	f7f6 fa97 	bl	8009266 <RBI_IsTCXO>
 8012d38:	2801      	cmp	r0, #1
 8012d3a:	d017      	beq.n	8012d6c <SUBGRF_Init+0x60>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8012d3c:	2120      	movs	r1, #32
 8012d3e:	f640 1011 	movw	r0, #2321	; 0x911
 8012d42:	f7ff fd3d 	bl	80127c0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8012d46:	2120      	movs	r1, #32
 8012d48:	f640 1012 	movw	r0, #2322	; 0x912
 8012d4c:	f7ff fd38 	bl	80127c0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8012d50:	210e      	movs	r1, #14
 8012d52:	f640 101f 	movw	r0, #2335	; 0x91f
 8012d56:	f7ff fd33 	bl	80127c0 <SUBGRF_WriteRegister>
    RBI_Init();
 8012d5a:	f7f6 fa78 	bl	800924e <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8012d5e:	f641 038a 	movw	r3, #6282	; 0x188a
 8012d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d66:	2201      	movs	r2, #1
 8012d68:	701a      	strb	r2, [r3, #0]
}
 8012d6a:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8012d6c:	2140      	movs	r1, #64	; 0x40
 8012d6e:	f7ff ffb6 	bl	8012cde <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8012d72:	2100      	movs	r1, #0
 8012d74:	f640 1011 	movw	r0, #2321	; 0x911
 8012d78:	f7ff fd22 	bl	80127c0 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8012d7c:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8012d80:	f7ff ff2e 	bl	8012be0 <SUBGRF_Calibrate>
 8012d84:	e7e4      	b.n	8012d50 <SUBGRF_Init+0x44>

08012d86 <SUBGRF_SetRfFrequency>:
{
 8012d86:	b510      	push	{r4, lr}
 8012d88:	b082      	sub	sp, #8
 8012d8a:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8012d8c:	f641 0388 	movw	r3, #6280	; 0x1888
 8012d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d94:	781b      	ldrb	r3, [r3, #0]
 8012d96:	b1db      	cbz	r3, 8012dd0 <SUBGRF_SetRfFrequency+0x4a>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8012d98:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8012d9c:	f2c0 12e8 	movt	r2, #488	; 0x1e8
 8012da0:	2300      	movs	r3, #0
 8012da2:	0660      	lsls	r0, r4, #25
 8012da4:	09e1      	lsrs	r1, r4, #7
 8012da6:	f7ed fff1 	bl	8000d8c <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8012daa:	0e03      	lsrs	r3, r0, #24
 8012dac:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8012db0:	0c03      	lsrs	r3, r0, #16
 8012db2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8012db6:	0a03      	lsrs	r3, r0, #8
 8012db8:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8012dbc:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8012dc0:	2204      	movs	r2, #4
 8012dc2:	eb0d 0102 	add.w	r1, sp, r2
 8012dc6:	2086      	movs	r0, #134	; 0x86
 8012dc8:	f7ff fdc9 	bl	801295e <SUBGRF_WriteCommand>
}
 8012dcc:	b002      	add	sp, #8
 8012dce:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8012dd0:	f7ff ff15 	bl	8012bfe <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8012dd4:	f641 0388 	movw	r3, #6280	; 0x1888
 8012dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ddc:	2201      	movs	r2, #1
 8012dde:	701a      	strb	r2, [r3, #0]
 8012de0:	e7da      	b.n	8012d98 <SUBGRF_SetRfFrequency+0x12>

08012de2 <SUBGRF_SetPacketType>:
{
 8012de2:	b500      	push	{lr}
 8012de4:	b083      	sub	sp, #12
 8012de6:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8012dea:	f641 038b 	movw	r3, #6283	; 0x188b
 8012dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012df2:	7018      	strb	r0, [r3, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8012df4:	b140      	cbz	r0, 8012e08 <SUBGRF_SetPacketType+0x26>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8012df6:	2201      	movs	r2, #1
 8012df8:	f10d 0107 	add.w	r1, sp, #7
 8012dfc:	208a      	movs	r0, #138	; 0x8a
 8012dfe:	f7ff fdae 	bl	801295e <SUBGRF_WriteCommand>
}
 8012e02:	b003      	add	sp, #12
 8012e04:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8012e08:	2100      	movs	r1, #0
 8012e0a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8012e0e:	f7ff fcd7 	bl	80127c0 <SUBGRF_WriteRegister>
 8012e12:	e7f0      	b.n	8012df6 <SUBGRF_SetPacketType+0x14>

08012e14 <SUBGRF_SetTxParams>:
{
 8012e14:	b570      	push	{r4, r5, r6, lr}
 8012e16:	b082      	sub	sp, #8
 8012e18:	460c      	mov	r4, r1
 8012e1a:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8012e1c:	2801      	cmp	r0, #1
 8012e1e:	d036      	beq.n	8012e8e <SUBGRF_SetTxParams+0x7a>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8012e20:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8012e24:	f7ff fcdd 	bl	80127e2 <SUBGRF_ReadRegister>
 8012e28:	f040 011e 	orr.w	r1, r0, #30
 8012e2c:	b2c9      	uxtb	r1, r1
 8012e2e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8012e32:	f7ff fcc5 	bl	80127c0 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8012e36:	2001      	movs	r0, #1
 8012e38:	f7f6 fa1d 	bl	8009276 <RBI_GetRFOMaxPowerConfig>
 8012e3c:	4605      	mov	r5, r0
        if (power > max_power)
 8012e3e:	4284      	cmp	r4, r0
            power = max_power;
 8012e40:	bfc8      	it	gt
 8012e42:	b244      	sxtbgt	r4, r0
        if (max_power == 20)
 8012e44:	2814      	cmp	r0, #20
 8012e46:	d052      	beq.n	8012eee <SUBGRF_SetTxParams+0xda>
        else if (max_power == 17)
 8012e48:	2811      	cmp	r0, #17
 8012e4a:	d059      	beq.n	8012f00 <SUBGRF_SetTxParams+0xec>
        else if (max_power == 14)
 8012e4c:	280e      	cmp	r0, #14
 8012e4e:	d060      	beq.n	8012f12 <SUBGRF_SetTxParams+0xfe>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8012e50:	2301      	movs	r3, #1
 8012e52:	2200      	movs	r2, #0
 8012e54:	2107      	movs	r1, #7
 8012e56:	2004      	movs	r0, #4
 8012e58:	f7ff ff0f 	bl	8012c7a <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8012e5c:	f1c5 0516 	rsb	r5, r5, #22
 8012e60:	4425      	add	r5, r4
 8012e62:	b26c      	sxtb	r4, r5
        if (power < -9)
 8012e64:	f06f 0308 	mvn.w	r3, #8
 8012e68:	429c      	cmp	r4, r3
 8012e6a:	bfb8      	it	lt
 8012e6c:	461c      	movlt	r4, r3
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8012e6e:	2138      	movs	r1, #56	; 0x38
 8012e70:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8012e74:	f7ff fca4 	bl	80127c0 <SUBGRF_WriteRegister>
    buf[0] = power;
 8012e78:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8012e7c:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8012e80:	2202      	movs	r2, #2
 8012e82:	a901      	add	r1, sp, #4
 8012e84:	208e      	movs	r0, #142	; 0x8e
 8012e86:	f7ff fd6a 	bl	801295e <SUBGRF_WriteCommand>
}
 8012e8a:	b002      	add	sp, #8
 8012e8c:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8012e8e:	2000      	movs	r0, #0
 8012e90:	f7f6 f9f1 	bl	8009276 <RBI_GetRFOMaxPowerConfig>
 8012e94:	4605      	mov	r5, r0
        if (power >  max_power)
 8012e96:	4284      	cmp	r4, r0
          power = max_power;
 8012e98:	bfc8      	it	gt
 8012e9a:	b244      	sxtbgt	r4, r0
        if (max_power == 14)
 8012e9c:	280e      	cmp	r0, #14
 8012e9e:	d016      	beq.n	8012ece <SUBGRF_SetTxParams+0xba>
        else if (max_power == 10)
 8012ea0:	280a      	cmp	r0, #10
 8012ea2:	d01b      	beq.n	8012edc <SUBGRF_SetTxParams+0xc8>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	461a      	mov	r2, r3
 8012ea8:	2100      	movs	r1, #0
 8012eaa:	2007      	movs	r0, #7
 8012eac:	f7ff fee5 	bl	8012c7a <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8012eb0:	f1c5 050e 	rsb	r5, r5, #14
 8012eb4:	4425      	add	r5, r4
 8012eb6:	b26c      	sxtb	r4, r5
        if (power < -17)
 8012eb8:	f06f 0310 	mvn.w	r3, #16
 8012ebc:	429c      	cmp	r4, r3
 8012ebe:	bfb8      	it	lt
 8012ec0:	461c      	movlt	r4, r3
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8012ec2:	2118      	movs	r1, #24
 8012ec4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8012ec8:	f7ff fc7a 	bl	80127c0 <SUBGRF_WriteRegister>
 8012ecc:	e7d4      	b.n	8012e78 <SUBGRF_SetTxParams+0x64>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8012ece:	2301      	movs	r3, #1
 8012ed0:	461a      	mov	r2, r3
 8012ed2:	2100      	movs	r1, #0
 8012ed4:	2004      	movs	r0, #4
 8012ed6:	f7ff fed0 	bl	8012c7a <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8012eda:	e7ed      	b.n	8012eb8 <SUBGRF_SetTxParams+0xa4>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8012edc:	2301      	movs	r3, #1
 8012ede:	461a      	mov	r2, r3
 8012ee0:	2100      	movs	r1, #0
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7ff fec9 	bl	8012c7a <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8012ee8:	3403      	adds	r4, #3
 8012eea:	b264      	sxtb	r4, r4
 8012eec:	e7e4      	b.n	8012eb8 <SUBGRF_SetTxParams+0xa4>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8012eee:	2301      	movs	r3, #1
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	2105      	movs	r1, #5
 8012ef4:	2003      	movs	r0, #3
 8012ef6:	f7ff fec0 	bl	8012c7a <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8012efa:	3402      	adds	r4, #2
 8012efc:	b264      	sxtb	r4, r4
 8012efe:	e7b1      	b.n	8012e64 <SUBGRF_SetTxParams+0x50>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8012f00:	2301      	movs	r3, #1
 8012f02:	2200      	movs	r2, #0
 8012f04:	2103      	movs	r1, #3
 8012f06:	2002      	movs	r0, #2
 8012f08:	f7ff feb7 	bl	8012c7a <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8012f0c:	3405      	adds	r4, #5
 8012f0e:	b264      	sxtb	r4, r4
 8012f10:	e7a8      	b.n	8012e64 <SUBGRF_SetTxParams+0x50>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8012f12:	2301      	movs	r3, #1
 8012f14:	2200      	movs	r2, #0
 8012f16:	2102      	movs	r1, #2
 8012f18:	4608      	mov	r0, r1
 8012f1a:	f7ff feae 	bl	8012c7a <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8012f1e:	e7a1      	b.n	8012e64 <SUBGRF_SetTxParams+0x50>

08012f20 <SUBGRF_SetModulationParams>:
{
 8012f20:	b510      	push	{r4, lr}
 8012f22:	b082      	sub	sp, #8
 8012f24:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8012f26:	f244 6368 	movw	r3, #18024	; 0x4668
 8012f2a:	f6c0 0301 	movt	r3, #2049	; 0x801
 8012f2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012f32:	ab02      	add	r3, sp, #8
 8012f34:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8012f38:	7820      	ldrb	r0, [r4, #0]
 8012f3a:	f641 038b 	movw	r3, #6283	; 0x188b
 8012f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	4283      	cmp	r3, r0
 8012f46:	d106      	bne.n	8012f56 <SUBGRF_SetModulationParams+0x36>
    switch( modulationParams->PacketType )
 8012f48:	7823      	ldrb	r3, [r4, #0]
 8012f4a:	2b03      	cmp	r3, #3
 8012f4c:	d831      	bhi.n	8012fb2 <SUBGRF_SetModulationParams+0x92>
 8012f4e:	e8df f003 	tbb	[pc, r3]
 8012f52:	4905      	.short	0x4905
 8012f54:	5b32      	.short	0x5b32
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8012f56:	f7ff ff44 	bl	8012de2 <SUBGRF_SetPacketType>
 8012f5a:	e7f5      	b.n	8012f48 <SUBGRF_SetModulationParams+0x28>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	f6c3 5309 	movt	r3, #15625	; 0x3d09
 8012f62:	6862      	ldr	r2, [r4, #4]
 8012f64:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012f68:	0c1a      	lsrs	r2, r3, #16
 8012f6a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8012f6e:	0a1a      	lsrs	r2, r3, #8
 8012f70:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8012f74:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8012f78:	7b23      	ldrb	r3, [r4, #12]
 8012f7a:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8012f7e:	7b63      	ldrb	r3, [r4, #13]
 8012f80:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8012f84:	68a1      	ldr	r1, [r4, #8]
 8012f86:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8012f8a:	f2c0 12e8 	movt	r2, #488	; 0x1e8
 8012f8e:	2300      	movs	r3, #0
 8012f90:	0648      	lsls	r0, r1, #25
 8012f92:	09c9      	lsrs	r1, r1, #7
 8012f94:	f7ed fefa 	bl	8000d8c <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8012f98:	0c03      	lsrs	r3, r0, #16
 8012f9a:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8012f9e:	0a03      	lsrs	r3, r0, #8
 8012fa0:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8012fa4:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012fa8:	2208      	movs	r2, #8
 8012faa:	4669      	mov	r1, sp
 8012fac:	208b      	movs	r0, #139	; 0x8b
 8012fae:	f7ff fcd6 	bl	801295e <SUBGRF_WriteCommand>
}
 8012fb2:	b002      	add	sp, #8
 8012fb4:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	f6c3 5309 	movt	r3, #15625	; 0x3d09
 8012fbc:	6922      	ldr	r2, [r4, #16]
 8012fbe:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012fc2:	0c1a      	lsrs	r2, r3, #16
 8012fc4:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8012fc8:	0a1a      	lsrs	r2, r3, #8
 8012fca:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8012fce:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8012fd2:	7d23      	ldrb	r3, [r4, #20]
 8012fd4:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012fd8:	2204      	movs	r2, #4
 8012fda:	4669      	mov	r1, sp
 8012fdc:	208b      	movs	r0, #139	; 0x8b
 8012fde:	f7ff fcbe 	bl	801295e <SUBGRF_WriteCommand>
        break;
 8012fe2:	e7e6      	b.n	8012fb2 <SUBGRF_SetModulationParams+0x92>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8012fe4:	7e23      	ldrb	r3, [r4, #24]
 8012fe6:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8012fea:	7e63      	ldrb	r3, [r4, #25]
 8012fec:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8012ff0:	7ea3      	ldrb	r3, [r4, #26]
 8012ff2:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8012ff6:	7ee3      	ldrb	r3, [r4, #27]
 8012ff8:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012ffc:	2204      	movs	r2, #4
 8012ffe:	4669      	mov	r1, sp
 8013000:	208b      	movs	r0, #139	; 0x8b
 8013002:	f7ff fcac 	bl	801295e <SUBGRF_WriteCommand>
        break;
 8013006:	e7d4      	b.n	8012fb2 <SUBGRF_SetModulationParams+0x92>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8013008:	2300      	movs	r3, #0
 801300a:	f6c3 5309 	movt	r3, #15625	; 0x3d09
 801300e:	6862      	ldr	r2, [r4, #4]
 8013010:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8013014:	0c1a      	lsrs	r2, r3, #16
 8013016:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801301a:	0a1a      	lsrs	r2, r3, #8
 801301c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8013020:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8013024:	7b23      	ldrb	r3, [r4, #12]
 8013026:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801302a:	7b63      	ldrb	r3, [r4, #13]
 801302c:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8013030:	2205      	movs	r2, #5
 8013032:	4669      	mov	r1, sp
 8013034:	208b      	movs	r0, #139	; 0x8b
 8013036:	f7ff fc92 	bl	801295e <SUBGRF_WriteCommand>
}
 801303a:	e7ba      	b.n	8012fb2 <SUBGRF_SetModulationParams+0x92>

0801303c <SUBGRF_SetPacketParams>:
{
 801303c:	b510      	push	{r4, lr}
 801303e:	b084      	sub	sp, #16
 8013040:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8013042:	ab01      	add	r3, sp, #4
 8013044:	f244 6270 	movw	r2, #18032	; 0x4670
 8013048:	f6c0 0201 	movt	r2, #2049	; 0x801
 801304c:	ca07      	ldmia	r2, {r0, r1, r2}
 801304e:	c303      	stmia	r3!, {r0, r1}
 8013050:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8013052:	7820      	ldrb	r0, [r4, #0]
 8013054:	f641 038b 	movw	r3, #6283	; 0x188b
 8013058:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801305c:	781b      	ldrb	r3, [r3, #0]
 801305e:	4283      	cmp	r3, r0
 8013060:	d106      	bne.n	8013070 <SUBGRF_SetPacketParams+0x34>
    switch( packetParams->PacketType )
 8013062:	7823      	ldrb	r3, [r4, #0]
 8013064:	2b03      	cmp	r3, #3
 8013066:	d82a      	bhi.n	80130be <SUBGRF_SetPacketParams+0x82>
 8013068:	e8df f003 	tbb	[pc, r3]
 801306c:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8013070:	f7ff feb7 	bl	8012de2 <SUBGRF_SetPacketType>
 8013074:	e7f5      	b.n	8013062 <SUBGRF_SetPacketParams+0x26>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8013076:	7a63      	ldrb	r3, [r4, #9]
 8013078:	2bf1      	cmp	r3, #241	; 0xf1
 801307a:	d022      	beq.n	80130c2 <SUBGRF_SetPacketParams+0x86>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801307c:	2bf2      	cmp	r3, #242	; 0xf2
 801307e:	d02a      	beq.n	80130d6 <SUBGRF_SetPacketParams+0x9a>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8013080:	8862      	ldrh	r2, [r4, #2]
 8013082:	0a11      	lsrs	r1, r2, #8
 8013084:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8013088:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801308c:	7922      	ldrb	r2, [r4, #4]
 801308e:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8013092:	7962      	ldrb	r2, [r4, #5]
 8013094:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8013098:	79a2      	ldrb	r2, [r4, #6]
 801309a:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801309e:	79e2      	ldrb	r2, [r4, #7]
 80130a0:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80130a4:	7a22      	ldrb	r2, [r4, #8]
 80130a6:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 80130aa:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80130ae:	7aa3      	ldrb	r3, [r4, #10]
 80130b0:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 80130b4:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80130b6:	a901      	add	r1, sp, #4
 80130b8:	208c      	movs	r0, #140	; 0x8c
 80130ba:	f7ff fc50 	bl	801295e <SUBGRF_WriteCommand>
}
 80130be:	b004      	add	sp, #16
 80130c0:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80130c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80130c6:	f7ff fbe5 	bl	8012894 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80130ca:	f248 0005 	movw	r0, #32773	; 0x8005
 80130ce:	f7ff fbf8 	bl	80128c2 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80130d2:	2302      	movs	r3, #2
 80130d4:	e7d4      	b.n	8013080 <SUBGRF_SetPacketParams+0x44>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80130d6:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80130da:	f7ff fbdb 	bl	8012894 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80130de:	f241 0021 	movw	r0, #4129	; 0x1021
 80130e2:	f7ff fbee 	bl	80128c2 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80130e6:	2306      	movs	r3, #6
 80130e8:	e7ca      	b.n	8013080 <SUBGRF_SetPacketParams+0x44>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80130ea:	7b23      	ldrb	r3, [r4, #12]
 80130ec:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 80130f0:	2201      	movs	r2, #1
        break;
 80130f2:	e7e0      	b.n	80130b6 <SUBGRF_SetPacketParams+0x7a>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80130f4:	89e3      	ldrh	r3, [r4, #14]
 80130f6:	0a1a      	lsrs	r2, r3, #8
 80130f8:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80130fc:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8013100:	7c22      	ldrb	r2, [r4, #16]
 8013102:	f641 0389 	movw	r3, #6281	; 0x1889
 8013106:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801310a:	701a      	strb	r2, [r3, #0]
 801310c:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8013110:	7c63      	ldrb	r3, [r4, #17]
 8013112:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8013116:	7ca3      	ldrb	r3, [r4, #18]
 8013118:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801311c:	7ce3      	ldrb	r3, [r4, #19]
 801311e:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8013122:	2206      	movs	r2, #6
        break;
 8013124:	e7c7      	b.n	80130b6 <SUBGRF_SetPacketParams+0x7a>

08013126 <SUBGRF_SetBufferBaseAddress>:
{
 8013126:	b500      	push	{lr}
 8013128:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 801312a:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 801312e:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8013132:	2202      	movs	r2, #2
 8013134:	a901      	add	r1, sp, #4
 8013136:	208f      	movs	r0, #143	; 0x8f
 8013138:	f7ff fc11 	bl	801295e <SUBGRF_WriteCommand>
}
 801313c:	b003      	add	sp, #12
 801313e:	f85d fb04 	ldr.w	pc, [sp], #4

08013142 <SUBGRF_ReadCommand>:
{
 8013142:	b510      	push	{r4, lr}
 8013144:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013146:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801314a:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801314c:	460a      	mov	r2, r1
 801314e:	4601      	mov	r1, r0
 8013150:	f240 306c 	movw	r0, #876	; 0x36c
 8013154:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8013158:	f7f3 fe81 	bl	8006e5e <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801315c:	f384 8810 	msr	PRIMASK, r4
}
 8013160:	bd10      	pop	{r4, pc}

08013162 <SUBGRF_GetRssiInst>:
{
 8013162:	b500      	push	{lr}
 8013164:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8013166:	2201      	movs	r2, #1
 8013168:	a901      	add	r1, sp, #4
 801316a:	2015      	movs	r0, #21
 801316c:	f7ff ffe9 	bl	8013142 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8013170:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8013174:	4240      	negs	r0, r0
}
 8013176:	1040      	asrs	r0, r0, #1
 8013178:	b003      	add	sp, #12
 801317a:	f85d fb04 	ldr.w	pc, [sp], #4

0801317e <SUBGRF_GetRxBufferStatus>:
{
 801317e:	b530      	push	{r4, r5, lr}
 8013180:	b083      	sub	sp, #12
 8013182:	4605      	mov	r5, r0
 8013184:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8013186:	2202      	movs	r2, #2
 8013188:	a901      	add	r1, sp, #4
 801318a:	2013      	movs	r0, #19
 801318c:	f7ff ffd9 	bl	8013142 <SUBGRF_ReadCommand>
    return PacketType;
 8013190:	f641 038b 	movw	r3, #6283	; 0x188b
 8013194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	2b01      	cmp	r3, #1
 801319c:	d007      	beq.n	80131ae <SUBGRF_GetRxBufferStatus+0x30>
        *payloadLength = status[0];
 801319e:	f89d 3004 	ldrb.w	r3, [sp, #4]
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80131a2:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 80131a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80131a8:	7023      	strb	r3, [r4, #0]
}
 80131aa:	b003      	add	sp, #12
 80131ac:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80131ae:	f641 0389 	movw	r3, #6281	; 0x1889
 80131b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80131b6:	781b      	ldrb	r3, [r3, #0]
 80131b8:	b2db      	uxtb	r3, r3
 80131ba:	2b01      	cmp	r3, #1
 80131bc:	d1ef      	bne.n	801319e <SUBGRF_GetRxBufferStatus+0x20>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80131be:	f240 7002 	movw	r0, #1794	; 0x702
 80131c2:	f7ff fb0e 	bl	80127e2 <SUBGRF_ReadRegister>
 80131c6:	4603      	mov	r3, r0
 80131c8:	e7eb      	b.n	80131a2 <SUBGRF_GetRxBufferStatus+0x24>

080131ca <SUBGRF_GetPayload>:
{
 80131ca:	b570      	push	{r4, r5, r6, lr}
 80131cc:	b082      	sub	sp, #8
 80131ce:	4606      	mov	r6, r0
 80131d0:	460c      	mov	r4, r1
 80131d2:	4615      	mov	r5, r2
    uint8_t offset = 0;
 80131d4:	2300      	movs	r3, #0
 80131d6:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 80131da:	f10d 0107 	add.w	r1, sp, #7
 80131de:	4620      	mov	r0, r4
 80131e0:	f7ff ffcd 	bl	801317e <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80131e4:	7822      	ldrb	r2, [r4, #0]
 80131e6:	42aa      	cmp	r2, r5
 80131e8:	d902      	bls.n	80131f0 <SUBGRF_GetPayload+0x26>
        return 1;
 80131ea:	2001      	movs	r0, #1
}
 80131ec:	b002      	add	sp, #8
 80131ee:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80131f0:	4631      	mov	r1, r6
 80131f2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80131f6:	f7ff fba2 	bl	801293e <SUBGRF_ReadBuffer>
    return 0;
 80131fa:	2000      	movs	r0, #0
 80131fc:	e7f6      	b.n	80131ec <SUBGRF_GetPayload+0x22>

080131fe <SUBGRF_GetPacketStatus>:
{
 80131fe:	b510      	push	{r4, lr}
 8013200:	b082      	sub	sp, #8
 8013202:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8013204:	2203      	movs	r2, #3
 8013206:	a901      	add	r1, sp, #4
 8013208:	2014      	movs	r0, #20
 801320a:	f7ff ff9a 	bl	8013142 <SUBGRF_ReadCommand>
    return PacketType;
 801320e:	f641 038b 	movw	r3, #6283	; 0x188b
 8013212:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013216:	781b      	ldrb	r3, [r3, #0]
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8013218:	7023      	strb	r3, [r4, #0]
    switch( pktStatus->packetType )
 801321a:	b14b      	cbz	r3, 8013230 <SUBGRF_GetPacketStatus+0x32>
 801321c:	2b01      	cmp	r3, #1
 801321e:	d018      	beq.n	8013252 <SUBGRF_GetPacketStatus+0x54>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8013220:	2214      	movs	r2, #20
 8013222:	2100      	movs	r1, #0
 8013224:	4620      	mov	r0, r4
 8013226:	f000 f9ad 	bl	8013584 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801322a:	230f      	movs	r3, #15
 801322c:	7023      	strb	r3, [r4, #0]
}
 801322e:	e00e      	b.n	801324e <SUBGRF_GetPacketStatus+0x50>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8013230:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013234:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8013236:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801323a:	425b      	negs	r3, r3
 801323c:	105b      	asrs	r3, r3, #1
 801323e:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8013240:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013244:	425b      	negs	r3, r3
 8013246:	105b      	asrs	r3, r3, #1
 8013248:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801324a:	2300      	movs	r3, #0
 801324c:	60a3      	str	r3, [r4, #8]
}
 801324e:	b002      	add	sp, #8
 8013250:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8013252:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013256:	425b      	negs	r3, r3
 8013258:	105b      	asrs	r3, r3, #1
 801325a:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801325c:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8013260:	3302      	adds	r3, #2
 8013262:	109b      	asrs	r3, r3, #2
 8013264:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8013266:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801326a:	425b      	negs	r3, r3
 801326c:	105b      	asrs	r3, r3, #1
 801326e:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8013270:	f641 0384 	movw	r3, #6276	; 0x1884
 8013274:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	6123      	str	r3, [r4, #16]
            break;
 801327c:	e7e7      	b.n	801324e <SUBGRF_GetPacketStatus+0x50>

0801327e <SUBGRF_SetSwitch>:
{
 801327e:	b508      	push	{r3, lr}
    if (rxtx == RFSWITCH_TX)
 8013280:	2901      	cmp	r1, #1
 8013282:	d003      	beq.n	801328c <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8013284:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8013286:	f7f5 ffe6 	bl	8009256 <RBI_ConfigRFSwitch>
}
 801328a:	bd08      	pop	{r3, pc}
 801328c:	4603      	mov	r3, r0
 801328e:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8013290:	2b01      	cmp	r3, #1
 8013292:	d004      	beq.n	801329e <SUBGRF_SetSwitch+0x20>
            state = RBI_SWITCH_RFO_HP;
 8013294:	2b02      	cmp	r3, #2
 8013296:	bf14      	ite	ne
 8013298:	4608      	movne	r0, r1
 801329a:	2003      	moveq	r0, #3
 801329c:	e7f3      	b.n	8013286 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801329e:	2004      	movs	r0, #4
 80132a0:	f7ff fab0 	bl	8012804 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 80132a4:	2002      	movs	r0, #2
 80132a6:	e7ee      	b.n	8013286 <SUBGRF_SetSwitch+0x8>

080132a8 <SUBGRF_SetRfTxPower>:
{
 80132a8:	b538      	push	{r3, r4, r5, lr}
 80132aa:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 80132ac:	f7f5 ffd7 	bl	800925e <RBI_GetTxConfig>
    switch (TxConfig)
 80132b0:	b150      	cbz	r0, 80132c8 <SUBGRF_SetRfTxPower+0x20>
 80132b2:	2802      	cmp	r0, #2
 80132b4:	bf14      	ite	ne
 80132b6:	2501      	movne	r5, #1
 80132b8:	2502      	moveq	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80132ba:	2202      	movs	r2, #2
 80132bc:	4621      	mov	r1, r4
 80132be:	4628      	mov	r0, r5
 80132c0:	f7ff fda8 	bl	8012e14 <SUBGRF_SetTxParams>
}
 80132c4:	4628      	mov	r0, r5
 80132c6:	bd38      	pop	{r3, r4, r5, pc}
                paSelect = RFO_LP;
 80132c8:	2c0f      	cmp	r4, #15
 80132ca:	bfcc      	ite	gt
 80132cc:	2502      	movgt	r5, #2
 80132ce:	2501      	movle	r5, #1
 80132d0:	e7f3      	b.n	80132ba <SUBGRF_SetRfTxPower+0x12>

080132d2 <SUBGRF_GetRadioWakeUpTime>:
}
 80132d2:	2001      	movs	r0, #1
 80132d4:	4770      	bx	lr

080132d6 <HAL_SUBGHZ_TxCpltCallback>:
{
 80132d6:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80132d8:	f641 038c 	movw	r3, #6284	; 0x188c
 80132dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	2001      	movs	r0, #1
 80132e4:	4798      	blx	r3
}
 80132e6:	bd08      	pop	{r3, pc}

080132e8 <HAL_SUBGHZ_RxCpltCallback>:
{
 80132e8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80132ea:	f641 038c 	movw	r3, #6284	; 0x188c
 80132ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	2002      	movs	r0, #2
 80132f6:	4798      	blx	r3
}
 80132f8:	bd08      	pop	{r3, pc}

080132fa <HAL_SUBGHZ_CRCErrorCallback>:
{
 80132fa:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80132fc:	f641 038c 	movw	r3, #6284	; 0x188c
 8013300:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	2040      	movs	r0, #64	; 0x40
 8013308:	4798      	blx	r3
}
 801330a:	bd08      	pop	{r3, pc}

0801330c <HAL_SUBGHZ_CADStatusCallback>:
{
 801330c:	b508      	push	{r3, lr}
    switch (cadstatus)
 801330e:	b111      	cbz	r1, 8013316 <HAL_SUBGHZ_CADStatusCallback+0xa>
 8013310:	2901      	cmp	r1, #1
 8013312:	d008      	beq.n	8013326 <HAL_SUBGHZ_CADStatusCallback+0x1a>
}
 8013314:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8013316:	f641 038c 	movw	r3, #6284	; 0x188c
 801331a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	2080      	movs	r0, #128	; 0x80
 8013322:	4798      	blx	r3
            break;
 8013324:	e7f6      	b.n	8013314 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8013326:	f641 038c 	movw	r3, #6284	; 0x188c
 801332a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	f44f 7080 	mov.w	r0, #256	; 0x100
 8013334:	4798      	blx	r3
}
 8013336:	e7ed      	b.n	8013314 <HAL_SUBGHZ_CADStatusCallback+0x8>

08013338 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8013338:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801333a:	f641 038c 	movw	r3, #6284	; 0x188c
 801333e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	f44f 7000 	mov.w	r0, #512	; 0x200
 8013348:	4798      	blx	r3
}
 801334a:	bd08      	pop	{r3, pc}

0801334c <HAL_SUBGHZ_HeaderErrorCallback>:
{
 801334c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801334e:	f641 038c 	movw	r3, #6284	; 0x188c
 8013352:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	2020      	movs	r0, #32
 801335a:	4798      	blx	r3
}
 801335c:	bd08      	pop	{r3, pc}

0801335e <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 801335e:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8013360:	f641 038c 	movw	r3, #6284	; 0x188c
 8013364:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	2004      	movs	r0, #4
 801336c:	4798      	blx	r3
}
 801336e:	bd08      	pop	{r3, pc}

08013370 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8013370:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8013372:	f641 038c 	movw	r3, #6284	; 0x188c
 8013376:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	2008      	movs	r0, #8
 801337e:	4798      	blx	r3
}
 8013380:	bd08      	pop	{r3, pc}

08013382 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8013382:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8013384:	f641 038c 	movw	r3, #6284	; 0x188c
 8013388:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	2010      	movs	r0, #16
 8013390:	4798      	blx	r3
}
 8013392:	bd08      	pop	{r3, pc}

08013394 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 8013394:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8013396:	f641 038c 	movw	r3, #6284	; 0x188c
 801339a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80133a4:	4798      	blx	r3
}
 80133a6:	bd08      	pop	{r3, pc}

080133a8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 80133a8:	4684      	mov	ip, r0
 80133aa:	b1a8      	cbz	r0, 80133d8 <SUBGRF_GetFskBandwidthRegValue+0x30>
 80133ac:	2300      	movs	r3, #0
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80133ae:	f245 315c 	movw	r1, #21340	; 0x535c
 80133b2:	f6c0 0101 	movt	r1, #2049	; 0x801
 80133b6:	4618      	mov	r0, r3
 80133b8:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80133bc:	4562      	cmp	r2, ip
 80133be:	d803      	bhi.n	80133c8 <SUBGRF_GetFskBandwidthRegValue+0x20>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80133c0:	3301      	adds	r3, #1
 80133c2:	2b16      	cmp	r3, #22
 80133c4:	d1f7      	bne.n	80133b6 <SUBGRF_GetFskBandwidthRegValue+0xe>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 80133c6:	e7fe      	b.n	80133c6 <SUBGRF_GetFskBandwidthRegValue+0x1e>
            return FskBandwidths[i].RegValue;
 80133c8:	f245 335c 	movw	r3, #21340	; 0x535c
 80133cc:	f6c0 0301 	movt	r3, #2049	; 0x801
 80133d0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80133d4:	7918      	ldrb	r0, [r3, #4]
 80133d6:	4770      	bx	lr
        return( 0x1F );
 80133d8:	201f      	movs	r0, #31
}
 80133da:	4770      	bx	lr

080133dc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80133dc:	b570      	push	{r4, r5, r6, lr}
 80133de:	b082      	sub	sp, #8
 80133e0:	4604      	mov	r4, r0
 80133e2:	460d      	mov	r5, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 80133e4:	f640 0304 	movw	r3, #2052	; 0x804
 80133e8:	f6c0 430a 	movt	r3, #3082	; 0xc0a
 80133ec:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 80133ee:	f640 0007 	movw	r0, #2055	; 0x807
 80133f2:	f7ff f9f6 	bl	80127e2 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80133f6:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 80133fa:	3308      	adds	r3, #8
 80133fc:	446b      	add	r3, sp
  uint8_t bandwidth_exp = reg & 0x7;
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 80133fe:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8013402:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8013406:	3301      	adds	r3, #1
 8013408:	409a      	lsls	r2, r3
 801340a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 801340e:	f2c0 13e8 	movt	r3, #488	; 0x1e8
 8013412:	fbb3 f3f2 	udiv	r3, r3, r2
  uint32_t cf_osr = cf_fs / bitRate;
 8013416:	fbb3 f0f4 	udiv	r0, r3, r4
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801341a:	2807      	cmp	r0, #7
 801341c:	d820      	bhi.n	8013460 <SUBGRF_GetCFO+0x84>
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 801341e:	0040      	lsls	r0, r0, #1
  {
    interp = 4;
 8013420:	2803      	cmp	r0, #3
 8013422:	bf8c      	ite	hi
 8013424:	2402      	movhi	r4, #2
 8013426:	2404      	movls	r4, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8013428:	fb03 f404 	mul.w	r4, r3, r4
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801342c:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8013430:	f7ff f9d7 	bl	80127e2 <SUBGRF_ReadRegister>
 8013434:	0206      	lsls	r6, r0, #8
 8013436:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801343a:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801343e:	f7ff f9d0 	bl	80127e2 <SUBGRF_ReadRegister>
 8013442:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8013444:	f410 6f00 	tst.w	r0, #2048	; 0x800
  {
    cfo_bin |= 0xFFFFF000;
 8013448:	bf1c      	itt	ne
 801344a:	ea6f 5000 	mvnne.w	r0, r0, lsl #20
 801344e:	ea6f 5010 	mvnne.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8013452:	0964      	lsrs	r4, r4, #5
 8013454:	fb00 f404 	mul.w	r4, r0, r4
 8013458:	11e4      	asrs	r4, r4, #7
 801345a:	602c      	str	r4, [r5, #0]
}
 801345c:	b002      	add	sp, #8
 801345e:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t interp = 1;
 8013460:	2401      	movs	r4, #1
 8013462:	e7e1      	b.n	8013428 <SUBGRF_GetCFO+0x4c>

08013464 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8013464:	f04f 30ff 	mov.w	r0, #4294967295
 8013468:	4770      	bx	lr

0801346a <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 801346a:	f04f 30ff 	mov.w	r0, #4294967295
 801346e:	4770      	bx	lr

08013470 <RFW_Init>:
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 8013470:	f04f 30ff 	mov.w	r0, #4294967295
 8013474:	4770      	bx	lr

08013476 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8013476:	4770      	bx	lr

08013478 <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8013478:	2000      	movs	r0, #0
 801347a:	4770      	bx	lr

0801347c <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 801347c:	2000      	movs	r0, #0
 801347e:	4770      	bx	lr

08013480 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8013480:	4770      	bx	lr

08013482 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 8013482:	f04f 30ff 	mov.w	r0, #4294967295
 8013486:	4770      	bx	lr

08013488 <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 8013488:	f04f 30ff 	mov.w	r0, #4294967295
 801348c:	4770      	bx	lr

0801348e <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801348e:	4770      	bx	lr

08013490 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8013490:	4770      	bx	lr

08013492 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8013492:	4770      	bx	lr

08013494 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8013494:	f641 0394 	movw	r3, #6292	; 0x1894
 8013498:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801349c:	2200      	movs	r2, #0
 801349e:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80134a0:	f641 0390 	movw	r3, #6288	; 0x1890
 80134a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80134a8:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80134aa:	4770      	bx	lr

080134ac <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80134ac:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80134b0:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80134b2:	b159      	cbz	r1, 80134cc <UTIL_LPM_SetStopMode+0x20>
 80134b4:	2901      	cmp	r1, #1
 80134b6:	d106      	bne.n	80134c6 <UTIL_LPM_SetStopMode+0x1a>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80134b8:	f641 0294 	movw	r2, #6292	; 0x1894
 80134bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80134c0:	6811      	ldr	r1, [r2, #0]
 80134c2:	4301      	orrs	r1, r0
 80134c4:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80134c6:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80134ca:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 80134cc:	f641 0294 	movw	r2, #6292	; 0x1894
 80134d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80134d4:	6811      	ldr	r1, [r2, #0]
 80134d6:	ea21 0100 	bic.w	r1, r1, r0
 80134da:	6011      	str	r1, [r2, #0]
      break;
 80134dc:	e7f3      	b.n	80134c6 <UTIL_LPM_SetStopMode+0x1a>

080134de <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80134de:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80134e2:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 80134e4:	b159      	cbz	r1, 80134fe <UTIL_LPM_SetOffMode+0x20>
 80134e6:	2901      	cmp	r1, #1
 80134e8:	d106      	bne.n	80134f8 <UTIL_LPM_SetOffMode+0x1a>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80134ea:	f641 0290 	movw	r2, #6288	; 0x1890
 80134ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80134f2:	6811      	ldr	r1, [r2, #0]
 80134f4:	4301      	orrs	r1, r0
 80134f6:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80134f8:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80134fc:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 80134fe:	f641 0290 	movw	r2, #6288	; 0x1890
 8013502:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8013506:	6811      	ldr	r1, [r2, #0]
 8013508:	ea21 0100 	bic.w	r1, r1, r0
 801350c:	6011      	str	r1, [r2, #0]
      break;
 801350e:	e7f3      	b.n	80134f8 <UTIL_LPM_SetOffMode+0x1a>

08013510 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8013510:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013512:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013516:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8013518:	f641 0394 	movw	r3, #6292	; 0x1894
 801351c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	b153      	cbz	r3, 801353a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8013524:	f244 657c 	movw	r5, #18044	; 0x467c
 8013528:	f6c0 0501 	movt	r5, #2049	; 0x801
 801352c:	682b      	ldr	r3, [r5, #0]
 801352e:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8013530:	686b      	ldr	r3, [r5, #4]
 8013532:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013534:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8013538:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801353a:	f641 0390 	movw	r3, #6288	; 0x1890
 801353e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	b143      	cbz	r3, 8013558 <UTIL_LPM_EnterLowPower+0x48>
        UTIL_PowerDriver.EnterStopMode( );
 8013546:	f244 657c 	movw	r5, #18044	; 0x467c
 801354a:	f6c0 0501 	movt	r5, #2049	; 0x801
 801354e:	68ab      	ldr	r3, [r5, #8]
 8013550:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8013552:	68eb      	ldr	r3, [r5, #12]
 8013554:	4798      	blx	r3
 8013556:	e7ed      	b.n	8013534 <UTIL_LPM_EnterLowPower+0x24>
      UTIL_PowerDriver.EnterOffMode( );
 8013558:	f244 657c 	movw	r5, #18044	; 0x467c
 801355c:	f6c0 0501 	movt	r5, #2049	; 0x801
 8013560:	692b      	ldr	r3, [r5, #16]
 8013562:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8013564:	696b      	ldr	r3, [r5, #20]
 8013566:	4798      	blx	r3
 8013568:	e7e4      	b.n	8013534 <UTIL_LPM_EnterLowPower+0x24>

0801356a <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 801356a:	1e53      	subs	r3, r2, #1
 801356c:	b29b      	uxth	r3, r3
 801356e:	b142      	cbz	r2, 8013582 <UTIL_MEM_cpy_8+0x18>
 8013570:	3801      	subs	r0, #1
 8013572:	3301      	adds	r3, #1
 8013574:	18ca      	adds	r2, r1, r3
    {
        *dst8++ = *src8++;
 8013576:	f811 3b01 	ldrb.w	r3, [r1], #1
 801357a:	f800 3f01 	strb.w	r3, [r0, #1]!
  while( size-- )
 801357e:	4291      	cmp	r1, r2
 8013580:	d1f9      	bne.n	8013576 <UTIL_MEM_cpy_8+0xc>
    }
}
 8013582:	4770      	bx	lr

08013584 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8013584:	1e53      	subs	r3, r2, #1
 8013586:	b29b      	uxth	r3, r3
 8013588:	b12a      	cbz	r2, 8013596 <UTIL_MEM_set_8+0x12>
 801358a:	3301      	adds	r3, #1
 801358c:	4403      	add	r3, r0
  {
    *dst8++ = value;
 801358e:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8013592:	4298      	cmp	r0, r3
 8013594:	d1fb      	bne.n	801358e <UTIL_MEM_set_8+0xa>
  }
}
 8013596:	4770      	bx	lr

08013598 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8013598:	b082      	sub	sp, #8
 801359a:	b082      	sub	sp, #8
 801359c:	f10d 0c08 	add.w	ip, sp, #8
 80135a0:	e90c 0006 	stmdb	ip, {r1, r2}
 80135a4:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 80135a6:	440b      	add	r3, r1
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80135a8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80135ac:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80135b0:	440a      	add	r2, r1
 80135b2:	b291      	uxth	r1, r2
 80135b4:	b212      	sxth	r2, r2
  if( c.SubSeconds >= 1000 )
 80135b6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80135ba:	db03      	blt.n	80135c4 <SysTimeAdd+0x2c>
  {
    c.Seconds++;
 80135bc:	3301      	adds	r3, #1
    c.SubSeconds -= 1000;
 80135be:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80135c2:	b20a      	sxth	r2, r1
  }
  return c;
 80135c4:	6003      	str	r3, [r0, #0]
 80135c6:	8082      	strh	r2, [r0, #4]
}
 80135c8:	b002      	add	sp, #8
 80135ca:	b002      	add	sp, #8
 80135cc:	4770      	bx	lr

080135ce <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80135ce:	b082      	sub	sp, #8
 80135d0:	b082      	sub	sp, #8
 80135d2:	f10d 0c08 	add.w	ip, sp, #8
 80135d6:	e90c 0006 	stmdb	ip, {r1, r2}
 80135da:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 80135dc:	1acb      	subs	r3, r1, r3
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80135de:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80135e2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80135e6:	1a52      	subs	r2, r2, r1
 80135e8:	b291      	uxth	r1, r2
 80135ea:	b212      	sxth	r2, r2
  if( c.SubSeconds < 0 )
 80135ec:	2a00      	cmp	r2, #0
 80135ee:	db04      	blt.n	80135fa <SysTimeSub+0x2c>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
 80135f0:	6003      	str	r3, [r0, #0]
 80135f2:	8082      	strh	r2, [r0, #4]
}
 80135f4:	b002      	add	sp, #8
 80135f6:	b002      	add	sp, #8
 80135f8:	4770      	bx	lr
    c.Seconds--;
 80135fa:	3b01      	subs	r3, #1
    c.SubSeconds += 1000;
 80135fc:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8013600:	b20a      	sxth	r2, r1
 8013602:	e7f5      	b.n	80135f0 <SysTimeSub+0x22>

08013604 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8013604:	b530      	push	{r4, r5, lr}
 8013606:	b085      	sub	sp, #20
 8013608:	466b      	mov	r3, sp
 801360a:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801360e:	2300      	movs	r3, #0
 8013610:	9302      	str	r3, [sp, #8]
 8013612:	f8ad 300c 	strh.w	r3, [sp, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8013616:	f244 7340 	movw	r3, #18240	; 0x4740
 801361a:	f6c0 0301 	movt	r3, #2049	; 0x801
 801361e:	691b      	ldr	r3, [r3, #16]
 8013620:	a803      	add	r0, sp, #12
 8013622:	4798      	blx	r3
 8013624:	9002      	str	r0, [sp, #8]
  c.Seconds = a.Seconds - b.Seconds;
 8013626:	9b00      	ldr	r3, [sp, #0]
 8013628:	1a18      	subs	r0, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801362a:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801362e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013632:	1ae4      	subs	r4, r4, r3
 8013634:	b2a3      	uxth	r3, r4
 8013636:	b224      	sxth	r4, r4
  if( c.SubSeconds < 0 )
 8013638:	2c00      	cmp	r4, #0
 801363a:	db0a      	blt.n	8013652 <SysTimeSet+0x4e>

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801363c:	f244 7540 	movw	r5, #18240	; 0x4740
 8013640:	f6c0 0501 	movt	r5, #2049	; 0x801
 8013644:	682b      	ldr	r3, [r5, #0]
 8013646:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8013648:	68ab      	ldr	r3, [r5, #8]
 801364a:	4620      	mov	r0, r4
 801364c:	4798      	blx	r3
}
 801364e:	b005      	add	sp, #20
 8013650:	bd30      	pop	{r4, r5, pc}
    c.Seconds--;
 8013652:	3801      	subs	r0, #1
    c.SubSeconds += 1000;
 8013654:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8013658:	b21c      	sxth	r4, r3
 801365a:	e7ef      	b.n	801363c <SysTimeSet+0x38>

0801365c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801365c:	b570      	push	{r4, r5, r6, lr}
 801365e:	b082      	sub	sp, #8
 8013660:	4605      	mov	r5, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8013662:	2300      	movs	r3, #0
 8013664:	9300      	str	r3, [sp, #0]
 8013666:	f8ad 3004 	strh.w	r3, [sp, #4]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801366a:	f244 7640 	movw	r6, #18240	; 0x4740
 801366e:	f6c0 0601 	movt	r6, #2049	; 0x801
 8013672:	6933      	ldr	r3, [r6, #16]
 8013674:	a801      	add	r0, sp, #4
 8013676:	4798      	blx	r3
 8013678:	9000      	str	r0, [sp, #0]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801367a:	68f3      	ldr	r3, [r6, #12]
 801367c:	4798      	blx	r3
 801367e:	4604      	mov	r4, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8013680:	6873      	ldr	r3, [r6, #4]
 8013682:	4798      	blx	r3
  c.Seconds = a.Seconds + b.Seconds;
 8013684:	9b00      	ldr	r3, [sp, #0]
 8013686:	4418      	add	r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8013688:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801368c:	4423      	add	r3, r4
 801368e:	b29a      	uxth	r2, r3
 8013690:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 8013692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013696:	db03      	blt.n	80136a0 <SysTimeGet+0x44>
    c.Seconds++;
 8013698:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 801369a:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 801369e:	b213      	sxth	r3, r2

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 80136a0:	6028      	str	r0, [r5, #0]
 80136a2:	80ab      	strh	r3, [r5, #4]
}
 80136a4:	4628      	mov	r0, r5
 80136a6:	b002      	add	sp, #8
 80136a8:	bd70      	pop	{r4, r5, r6, pc}

080136aa <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 80136aa:	b530      	push	{r4, r5, lr}
 80136ac:	b083      	sub	sp, #12
 80136ae:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80136b0:	2300      	movs	r3, #0
 80136b2:	9300      	str	r3, [sp, #0]
 80136b4:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80136b8:	466d      	mov	r5, sp
 80136ba:	f244 7340 	movw	r3, #18240	; 0x4740
 80136be:	f6c0 0301 	movt	r3, #2049	; 0x801
 80136c2:	691b      	ldr	r3, [r3, #16]
 80136c4:	a801      	add	r0, sp, #4
 80136c6:	4798      	blx	r3
 80136c8:	9000      	str	r0, [sp, #0]

  return calendarTime;
 80136ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80136ce:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80136d2:	4620      	mov	r0, r4
 80136d4:	b003      	add	sp, #12
 80136d6:	bd30      	pop	{r4, r5, pc}

080136d8 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 80136d8:	b530      	push	{r4, r5, lr}
 80136da:	b083      	sub	sp, #12
 80136dc:	ab02      	add	r3, sp, #8
 80136de:	e903 0003 	stmdb	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80136e2:	f244 7440 	movw	r4, #18240	; 0x4740
 80136e6:	f6c0 0401 	movt	r4, #2049	; 0x801
 80136ea:	68e3      	ldr	r3, [r4, #12]
 80136ec:	4798      	blx	r3
 80136ee:	4605      	mov	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80136f0:	6863      	ldr	r3, [r4, #4]
 80136f2:	4798      	blx	r3
  c.Seconds = a.Seconds - b.Seconds;
 80136f4:	9a00      	ldr	r2, [sp, #0]
 80136f6:	1a12      	subs	r2, r2, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80136f8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80136fc:	1b5b      	subs	r3, r3, r5
 80136fe:	b299      	uxth	r1, r3
 8013700:	b21b      	sxth	r3, r3
  if( c.SubSeconds < 0 )
 8013702:	2b00      	cmp	r3, #0
 8013704:	db05      	blt.n	8013712 <SysTimeToMs+0x3a>

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
}
 8013706:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801370a:	fb00 3002 	mla	r0, r0, r2, r3
 801370e:	b003      	add	sp, #12
 8013710:	bd30      	pop	{r4, r5, pc}
    c.Seconds--;
 8013712:	3a01      	subs	r2, #1
    c.SubSeconds += 1000;
 8013714:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8013718:	b20b      	sxth	r3, r1
 801371a:	e7f4      	b.n	8013706 <SysTimeToMs+0x2e>

0801371c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801371c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013720:	4606      	mov	r6, r0
  uint32_t seconds = timeMs / 1000;
 8013722:	f644 55d3 	movw	r5, #19923	; 0x4dd3
 8013726:	f2c1 0562 	movt	r5, #4194	; 0x1062
 801372a:	fba5 3501 	umull	r3, r5, r5, r1
 801372e:	09ad      	lsrs	r5, r5, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8013730:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 8013734:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013738:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 801373c:	b29c      	uxth	r4, r3
  SysTime_t DeltaTime = { 0 };

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801373e:	f244 7740 	movw	r7, #18240	; 0x4740
 8013742:	f6c0 0701 	movt	r7, #2049	; 0x801
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	4798      	blx	r3
 801374a:	4680      	mov	r8, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	4798      	blx	r3
  c.Seconds = a.Seconds + b.Seconds;
 8013750:	4428      	add	r0, r5
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8013752:	eb04 0308 	add.w	r3, r4, r8
 8013756:	b299      	uxth	r1, r3
 8013758:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 801375a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801375e:	db03      	blt.n	8013768 <SysTimeFromMs+0x4c>
    c.Seconds++;
 8013760:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 8013762:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8013766:	b20b      	sxth	r3, r1
  return c;
 8013768:	6030      	str	r0, [r6, #0]
 801376a:	80b3      	strh	r3, [r6, #4]
  return SysTimeAdd( sysTime, DeltaTime );
}
 801376c:	4630      	mov	r0, r6
 801376e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013772 <tiny_vsnprintf_like>:

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8013772:	2900      	cmp	r1, #0
 8013774:	f340 81a8 	ble.w	8013ac8 <tiny_vsnprintf_like+0x356>
{
 8013778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801377c:	b099      	sub	sp, #100	; 0x64
 801377e:	4682      	mov	sl, r0
 8013780:	4616      	mov	r6, r2
 8013782:	9302      	str	r3, [sp, #8]
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8013784:	4604      	mov	r4, r0
  {
    CHECK_STR_SIZE(buf, str, size);
 8013786:	f101 3bff 	add.w	fp, r1, #4294967295
  while (size-- > 0) ASSIGN_STR(' ');
 801378a:	2720      	movs	r7, #32
  char *dig = lower_digits;
 801378c:	f245 4314 	movw	r3, #21524	; 0x5414
 8013790:	f6c0 0301 	movt	r3, #2049	; 0x801
 8013794:	9304      	str	r3, [sp, #16]
  if (type & UPPERCASE)  dig = upper_digits;
 8013796:	f245 433c 	movw	r3, #21564	; 0x543c
 801379a:	f6c0 0301 	movt	r3, #2049	; 0x801
 801379e:	9305      	str	r3, [sp, #20]
 80137a0:	e02d      	b.n	80137fe <tiny_vsnprintf_like+0x8c>
    CHECK_STR_SIZE(buf, str, size);
 80137a2:	eba4 020a 	sub.w	r2, r4, sl
 80137a6:	455a      	cmp	r2, fp
 80137a8:	da2c      	bge.n	8013804 <tiny_vsnprintf_like+0x92>

    if (*fmt != '%')
 80137aa:	2b25      	cmp	r3, #37	; 0x25
 80137ac:	d124      	bne.n	80137f8 <tiny_vsnprintf_like+0x86>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 80137ae:	1c72      	adds	r2, r6, #1
    if (*fmt == '0')
 80137b0:	7871      	ldrb	r1, [r6, #1]
 80137b2:	2930      	cmp	r1, #48	; 0x30
 80137b4:	bf14      	ite	ne
 80137b6:	f04f 0c00 	movne.w	ip, #0
 80137ba:	f04f 0c01 	moveq.w	ip, #1
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 80137be:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80137c2:	b2db      	uxtb	r3, r3
 80137c4:	2b09      	cmp	r3, #9
 80137c6:	d924      	bls.n	8013812 <tiny_vsnprintf_like+0xa0>
#endif

    // Default base
    base = 10;

    switch (*fmt)
 80137c8:	f1a1 0358 	sub.w	r3, r1, #88	; 0x58
 80137cc:	2b20      	cmp	r3, #32
 80137ce:	f200 80bb 	bhi.w	8013948 <tiny_vsnprintf_like+0x1d6>
 80137d2:	e8df f003 	tbb	[pc, r3]
 80137d6:	b99c      	.short	0xb99c
 80137d8:	b9b9b9b9 	.word	0xb9b9b9b9
 80137dc:	b9b9b9b9 	.word	0xb9b9b9b9
 80137e0:	b9a65fb9 	.word	0xb9a65fb9
 80137e4:	a6b9b9b9 	.word	0xa6b9b9b9
 80137e8:	b9b9b9b9 	.word	0xb9b9b9b9
 80137ec:	b9b9b9b9 	.word	0xb9b9b9b9
 80137f0:	deb963b9 	.word	0xdeb963b9
 80137f4:	b9b9      	.short	0xb9b9
 80137f6:	59          	.byte	0x59
 80137f7:	00          	.byte	0x00
      *str++ = *fmt;
 80137f8:	f804 3b01 	strb.w	r3, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80137fc:	3601      	adds	r6, #1
 80137fe:	7833      	ldrb	r3, [r6, #0]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d1ce      	bne.n	80137a2 <tiny_vsnprintf_like+0x30>
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
 8013804:	2300      	movs	r3, #0
 8013806:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8013808:	eba4 000a 	sub.w	r0, r4, sl
}
 801380c:	b019      	add	sp, #100	; 0x64
 801380e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int i = 0;
 8013812:	2500      	movs	r5, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8013814:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8013818:	eb01 0345 	add.w	r3, r1, r5, lsl #1
 801381c:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8013820:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8013824:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8013828:	b2c0      	uxtb	r0, r0
 801382a:	2809      	cmp	r0, #9
 801382c:	d9f2      	bls.n	8013814 <tiny_vsnprintf_like+0xa2>
    switch (*fmt)
 801382e:	f1a1 0058 	sub.w	r0, r1, #88	; 0x58
 8013832:	2820      	cmp	r0, #32
 8013834:	f200 808a 	bhi.w	801394c <tiny_vsnprintf_like+0x1da>
 8013838:	e8df f000 	tbb	[pc, r0]
 801383c:	88888867 	.word	0x88888867
 8013840:	88888888 	.word	0x88888888
 8013844:	11888888 	.word	0x11888888
 8013848:	88888871 	.word	0x88888871
 801384c:	88887188 	.word	0x88887188
 8013850:	88888888 	.word	0x88888888
 8013854:	2e888888 	.word	0x2e888888
 8013858:	8888a988 	.word	0x8888a988
 801385c:	24          	.byte	0x24
 801385d:	00          	.byte	0x00
          while (--field_width > 0) *str++ = ' ';
 801385e:	2b31      	cmp	r3, #49	; 0x31
 8013860:	bfd8      	it	le
 8013862:	4623      	movle	r3, r4
 8013864:	dd05      	ble.n	8013872 <tiny_vsnprintf_like+0x100>
 8013866:	3b31      	subs	r3, #49	; 0x31
 8013868:	4423      	add	r3, r4
 801386a:	f804 7b01 	strb.w	r7, [r4], #1
 801386e:	429c      	cmp	r4, r3
 8013870:	d1fb      	bne.n	801386a <tiny_vsnprintf_like+0xf8>
        *str++ = (unsigned char) va_arg(args, int);
 8013872:	9902      	ldr	r1, [sp, #8]
 8013874:	461c      	mov	r4, r3
 8013876:	f851 3b04 	ldr.w	r3, [r1], #4
 801387a:	f804 3b01 	strb.w	r3, [r4], #1
 801387e:	9102      	str	r1, [sp, #8]
        continue;
 8013880:	4616      	mov	r6, r2
 8013882:	e7bb      	b.n	80137fc <tiny_vsnprintf_like+0x8a>
    switch (*fmt)
 8013884:	4616      	mov	r6, r2
 8013886:	e002      	b.n	801388e <tiny_vsnprintf_like+0x11c>
 8013888:	4616      	mov	r6, r2
 801388a:	f04f 35ff 	mov.w	r5, #4294967295
    return 0;
 801388e:	9401      	str	r4, [sp, #4]
        base = 16;
 8013890:	2410      	movs	r4, #16
 8013892:	e083      	b.n	801399c <tiny_vsnprintf_like+0x22a>
    switch (*fmt)
 8013894:	4623      	mov	r3, r4
 8013896:	e7ec      	b.n	8013872 <tiny_vsnprintf_like+0x100>
 8013898:	4616      	mov	r6, r2
 801389a:	e002      	b.n	80138a2 <tiny_vsnprintf_like+0x130>
 801389c:	4616      	mov	r6, r2
 801389e:	f04f 35ff 	mov.w	r5, #4294967295
        s = va_arg(args, char *);
 80138a2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80138a6:	f859 8b04 	ldr.w	r8, [r9], #4
        if (!s) s = "<NULL>";
 80138aa:	f1b8 0f00 	cmp.w	r8, #0
 80138ae:	f000 810d 	beq.w	8013acc <tiny_vsnprintf_like+0x35a>
        len = strlen(s);
 80138b2:	4640      	mov	r0, r8
 80138b4:	f7ec fc60 	bl	8000178 <strlen>
 80138b8:	4602      	mov	r2, r0
          while (len < field_width--) *str++ = ' ';
 80138ba:	f105 3cff 	add.w	ip, r5, #4294967295
 80138be:	42a8      	cmp	r0, r5
 80138c0:	da0f      	bge.n	80138e2 <tiny_vsnprintf_like+0x170>
        if (!s) s = "<NULL>";
 80138c2:	4621      	mov	r1, r4
 80138c4:	4660      	mov	r0, ip
          while (len < field_width--) *str++ = ' ';
 80138c6:	f801 7b01 	strb.w	r7, [r1], #1
 80138ca:	f1c1 0301 	rsb	r3, r1, #1
 80138ce:	4423      	add	r3, r4
 80138d0:	4463      	add	r3, ip
 80138d2:	429a      	cmp	r2, r3
 80138d4:	dbf7      	blt.n	80138c6 <tiny_vsnprintf_like+0x154>
 80138d6:	1c43      	adds	r3, r0, #1
 80138d8:	1a9b      	subs	r3, r3, r2
 80138da:	4562      	cmp	r2, ip
 80138dc:	bfc8      	it	gt
 80138de:	2301      	movgt	r3, #1
 80138e0:	441c      	add	r4, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 80138e2:	2a00      	cmp	r2, #0
 80138e4:	f340 80ed 	ble.w	8013ac2 <tiny_vsnprintf_like+0x350>
 80138e8:	1e61      	subs	r1, r4, #1
 80138ea:	f818 0b01 	ldrb.w	r0, [r8], #1
 80138ee:	460b      	mov	r3, r1
 80138f0:	f801 0f01 	strb.w	r0, [r1, #1]!
 80138f4:	3302      	adds	r3, #2
 80138f6:	1b1b      	subs	r3, r3, r4
 80138f8:	429a      	cmp	r2, r3
 80138fa:	dcf6      	bgt.n	80138ea <tiny_vsnprintf_like+0x178>
 80138fc:	2a00      	cmp	r2, #0
 80138fe:	bfd8      	it	le
 8013900:	2201      	movle	r2, #1
 8013902:	4414      	add	r4, r2
        s = va_arg(args, char *);
 8013904:	f8cd 9008 	str.w	r9, [sp, #8]
 8013908:	e778      	b.n	80137fc <tiny_vsnprintf_like+0x8a>
    switch (*fmt)
 801390a:	4616      	mov	r6, r2
 801390c:	e002      	b.n	8013914 <tiny_vsnprintf_like+0x1a2>
 801390e:	4616      	mov	r6, r2
 8013910:	f04f 35ff 	mov.w	r5, #4294967295
        flags |= UPPERCASE;
 8013914:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 8013918:	9401      	str	r4, [sp, #4]
        base = 16;
 801391a:	2410      	movs	r4, #16
 801391c:	e03e      	b.n	801399c <tiny_vsnprintf_like+0x22a>
    switch (*fmt)
 801391e:	4616      	mov	r6, r2
 8013920:	e002      	b.n	8013928 <tiny_vsnprintf_like+0x1b6>
 8013922:	4616      	mov	r6, r2
 8013924:	f04f 35ff 	mov.w	r5, #4294967295
        flags |= SIGN;
 8013928:	f04c 0c02 	orr.w	ip, ip, #2
      num = va_arg(args, int);
 801392c:	9902      	ldr	r1, [sp, #8]
 801392e:	f851 2b04 	ldr.w	r2, [r1], #4
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8013932:	eba4 030a 	sub.w	r3, r4, sl
 8013936:	ebab 0303 	sub.w	r3, fp, r3
 801393a:	9401      	str	r4, [sp, #4]
      num = va_arg(args, int);
 801393c:	9102      	str	r1, [sp, #8]
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801393e:	240a      	movs	r4, #10
 8013940:	2102      	movs	r1, #2
  char *dig = lower_digits;
 8013942:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013946:	e03a      	b.n	80139be <tiny_vsnprintf_like+0x24c>
    switch (*fmt)
 8013948:	f04f 35ff 	mov.w	r5, #4294967295
        if (*fmt != '%') *str++ = '%';
 801394c:	2925      	cmp	r1, #37	; 0x25
 801394e:	d00c      	beq.n	801396a <tiny_vsnprintf_like+0x1f8>
 8013950:	4621      	mov	r1, r4
 8013952:	2325      	movs	r3, #37	; 0x25
 8013954:	f801 3b01 	strb.w	r3, [r1], #1
 8013958:	9101      	str	r1, [sp, #4]
        CHECK_STR_SIZE(buf, str, size);
 801395a:	eba1 030a 	sub.w	r3, r1, sl
 801395e:	459b      	cmp	fp, r3
 8013960:	dc02      	bgt.n	8013968 <tiny_vsnprintf_like+0x1f6>
 8013962:	4616      	mov	r6, r2
    base = 10;
 8013964:	240a      	movs	r4, #10
 8013966:	e019      	b.n	801399c <tiny_vsnprintf_like+0x22a>
        if (*fmt != '%') *str++ = '%';
 8013968:	460c      	mov	r4, r1
        if (*fmt)
 801396a:	7813      	ldrb	r3, [r2, #0]
 801396c:	b16b      	cbz	r3, 801398a <tiny_vsnprintf_like+0x218>
          *str++ = *fmt;
 801396e:	4621      	mov	r1, r4
 8013970:	f801 3b01 	strb.w	r3, [r1], #1
 8013974:	9101      	str	r1, [sp, #4]
        CHECK_STR_SIZE(buf, str, size);
 8013976:	eba1 030a 	sub.w	r3, r1, sl
 801397a:	459b      	cmp	fp, r3
 801397c:	dc02      	bgt.n	8013984 <tiny_vsnprintf_like+0x212>
 801397e:	4616      	mov	r6, r2
    base = 10;
 8013980:	240a      	movs	r4, #10
    else if (flags & SIGN)
 8013982:	e00b      	b.n	801399c <tiny_vsnprintf_like+0x22a>
 8013984:	4616      	mov	r6, r2
          *str++ = *fmt;
 8013986:	460c      	mov	r4, r1
 8013988:	e738      	b.n	80137fc <tiny_vsnprintf_like+0x8a>
          --fmt;
 801398a:	1e56      	subs	r6, r2, #1
        CHECK_STR_SIZE(buf, str, size);
 801398c:	e736      	b.n	80137fc <tiny_vsnprintf_like+0x8a>
    switch (*fmt)
 801398e:	4616      	mov	r6, r2
 8013990:	e002      	b.n	8013998 <tiny_vsnprintf_like+0x226>
 8013992:	4616      	mov	r6, r2
 8013994:	f04f 35ff 	mov.w	r5, #4294967295
    else if (flags & SIGN)
 8013998:	9401      	str	r4, [sp, #4]
 801399a:	240a      	movs	r4, #10
      num = va_arg(args, unsigned int);
 801399c:	9802      	ldr	r0, [sp, #8]
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801399e:	9b01      	ldr	r3, [sp, #4]
 80139a0:	eba3 030a 	sub.w	r3, r3, sl
 80139a4:	ebab 0303 	sub.w	r3, fp, r3
 80139a8:	f850 2b04 	ldr.w	r2, [r0], #4
  if (type & UPPERCASE)  dig = upper_digits;
 80139ac:	f01c 0140 	ands.w	r1, ip, #64	; 0x40
      num = va_arg(args, unsigned int);
 80139b0:	9002      	str	r0, [sp, #8]
  if (type & UPPERCASE)  dig = upper_digits;
 80139b2:	bf1a      	itte	ne
 80139b4:	2100      	movne	r1, #0
 80139b6:	f8dd 8014 	ldrne.w	r8, [sp, #20]
  char *dig = lower_digits;
 80139ba:	f8dd 8010 	ldreq.w	r8, [sp, #16]
  c = (type & ZEROPAD) ? '0' : ' ';
 80139be:	f01c 0c01 	ands.w	ip, ip, #1
 80139c2:	bf14      	ite	ne
 80139c4:	f04f 0930 	movne.w	r9, #48	; 0x30
 80139c8:	f04f 0920 	moveq.w	r9, #32
  if (type & SIGN)
 80139cc:	b109      	cbz	r1, 80139d2 <tiny_vsnprintf_like+0x260>
    if (num < 0)
 80139ce:	2a00      	cmp	r2, #0
 80139d0:	db27      	blt.n	8013a22 <tiny_vsnprintf_like+0x2b0>
  if (num == 0)
 80139d2:	bb5a      	cbnz	r2, 8013a2c <tiny_vsnprintf_like+0x2ba>
    tmp[i++] = '0';
 80139d4:	f04f 0230 	mov.w	r2, #48	; 0x30
 80139d8:	f88d 201c 	strb.w	r2, [sp, #28]
 80139dc:	2200      	movs	r2, #0
 80139de:	9203      	str	r2, [sp, #12]
 80139e0:	2001      	movs	r0, #1
  if (i > precision) precision = i;
 80139e2:	ea40 71e0 	orr.w	r1, r0, r0, asr #31
  size -= precision;
 80139e6:	1a6d      	subs	r5, r5, r1
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80139e8:	f1bc 0f00 	cmp.w	ip, #0
 80139ec:	d030      	beq.n	8013a50 <tiny_vsnprintf_like+0x2de>
  if (sign) ASSIGN_STR(sign);
 80139ee:	9a03      	ldr	r2, [sp, #12]
 80139f0:	b132      	cbz	r2, 8013a00 <tiny_vsnprintf_like+0x28e>
 80139f2:	9c01      	ldr	r4, [sp, #4]
 80139f4:	f804 2b01 	strb.w	r2, [r4], #1
 80139f8:	3b01      	subs	r3, #1
 80139fa:	f43f aeff 	beq.w	80137fc <tiny_vsnprintf_like+0x8a>
 80139fe:	9401      	str	r4, [sp, #4]
 8013a00:	9a01      	ldr	r2, [sp, #4]
 8013a02:	4614      	mov	r4, r2
 8013a04:	f105 3cff 	add.w	ip, r5, #4294967295
 8013a08:	4494      	add	ip, r2
  while (size-- > 0) ASSIGN_STR(c);
 8013a0a:	4415      	add	r5, r2
 8013a0c:	46a0      	mov	r8, r4
 8013a0e:	ebac 0e04 	sub.w	lr, ip, r4
 8013a12:	1b2a      	subs	r2, r5, r4
 8013a14:	2a00      	cmp	r2, #0
 8013a16:	dd2f      	ble.n	8013a78 <tiny_vsnprintf_like+0x306>
 8013a18:	f804 9b01 	strb.w	r9, [r4], #1
 8013a1c:	3b01      	subs	r3, #1
 8013a1e:	d1f5      	bne.n	8013a0c <tiny_vsnprintf_like+0x29a>
 8013a20:	e6ec      	b.n	80137fc <tiny_vsnprintf_like+0x8a>
      num = -num;
 8013a22:	4252      	negs	r2, r2
      size--;
 8013a24:	3d01      	subs	r5, #1
      sign = '-';
 8013a26:	212d      	movs	r1, #45	; 0x2d
 8013a28:	9103      	str	r1, [sp, #12]
 8013a2a:	e001      	b.n	8013a30 <tiny_vsnprintf_like+0x2be>
 8013a2c:	2100      	movs	r1, #0
 8013a2e:	9103      	str	r1, [sp, #12]
    while (num != 0)
 8013a30:	f10d 0e1c 	add.w	lr, sp, #28
  i = 0;
 8013a34:	2000      	movs	r0, #0
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8013a36:	3001      	adds	r0, #1
 8013a38:	fbb2 f1f4 	udiv	r1, r2, r4
 8013a3c:	fb04 2211 	mls	r2, r4, r1, r2
 8013a40:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013a44:	f80e 2b01 	strb.w	r2, [lr], #1
      num = ((unsigned long) num) / (unsigned) base;
 8013a48:	460a      	mov	r2, r1
    while (num != 0)
 8013a4a:	2900      	cmp	r1, #0
 8013a4c:	d1f3      	bne.n	8013a36 <tiny_vsnprintf_like+0x2c4>
 8013a4e:	e7c8      	b.n	80139e2 <tiny_vsnprintf_like+0x270>
 8013a50:	9a01      	ldr	r2, [sp, #4]
 8013a52:	4614      	mov	r4, r2
 8013a54:	f102 3cff 	add.w	ip, r2, #4294967295
 8013a58:	44ac      	add	ip, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8013a5a:	eb02 0e05 	add.w	lr, r2, r5
 8013a5e:	ebac 0504 	sub.w	r5, ip, r4
 8013a62:	ebae 0204 	sub.w	r2, lr, r4
 8013a66:	2a00      	cmp	r2, #0
 8013a68:	dd04      	ble.n	8013a74 <tiny_vsnprintf_like+0x302>
 8013a6a:	f804 7b01 	strb.w	r7, [r4], #1
 8013a6e:	3b01      	subs	r3, #1
 8013a70:	d1f5      	bne.n	8013a5e <tiny_vsnprintf_like+0x2ec>
 8013a72:	e6c3      	b.n	80137fc <tiny_vsnprintf_like+0x8a>
 8013a74:	9401      	str	r4, [sp, #4]
 8013a76:	e7ba      	b.n	80139ee <tiny_vsnprintf_like+0x27c>
  while (i < precision--) ASSIGN_STR('0');
 8013a78:	4421      	add	r1, r4
 8013a7a:	4625      	mov	r5, r4
 8013a7c:	1b0a      	subs	r2, r1, r4
 8013a7e:	4282      	cmp	r2, r0
 8013a80:	dd06      	ble.n	8013a90 <tiny_vsnprintf_like+0x31e>
 8013a82:	f04f 0230 	mov.w	r2, #48	; 0x30
 8013a86:	f804 2b01 	strb.w	r2, [r4], #1
 8013a8a:	3b01      	subs	r3, #1
 8013a8c:	d1f5      	bne.n	8013a7a <tiny_vsnprintf_like+0x308>
 8013a8e:	e6b5      	b.n	80137fc <tiny_vsnprintf_like+0x8a>
 8013a90:	aa07      	add	r2, sp, #28
 8013a92:	1811      	adds	r1, r2, r0
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8013a94:	4405      	add	r5, r0
 8013a96:	1b2a      	subs	r2, r5, r4
 8013a98:	2a00      	cmp	r2, #0
 8013a9a:	dd06      	ble.n	8013aaa <tiny_vsnprintf_like+0x338>
 8013a9c:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
 8013aa0:	f804 2b01 	strb.w	r2, [r4], #1
 8013aa4:	3b01      	subs	r3, #1
 8013aa6:	d1f6      	bne.n	8013a96 <tiny_vsnprintf_like+0x324>
 8013aa8:	e6a8      	b.n	80137fc <tiny_vsnprintf_like+0x8a>
  while (size-- > 0) ASSIGN_STR(' ');
 8013aaa:	44a6      	add	lr, r4
 8013aac:	4423      	add	r3, r4
 8013aae:	ebae 0204 	sub.w	r2, lr, r4
 8013ab2:	2a00      	cmp	r2, #0
 8013ab4:	f77f aea2 	ble.w	80137fc <tiny_vsnprintf_like+0x8a>
 8013ab8:	f804 7b01 	strb.w	r7, [r4], #1
 8013abc:	429c      	cmp	r4, r3
 8013abe:	d1f6      	bne.n	8013aae <tiny_vsnprintf_like+0x33c>
 8013ac0:	e69c      	b.n	80137fc <tiny_vsnprintf_like+0x8a>
        s = va_arg(args, char *);
 8013ac2:	f8cd 9008 	str.w	r9, [sp, #8]
 8013ac6:	e699      	b.n	80137fc <tiny_vsnprintf_like+0x8a>
    return 0;
 8013ac8:	2000      	movs	r0, #0
}
 8013aca:	4770      	bx	lr
          while (len < field_width--) *str++ = ' ';
 8013acc:	f105 3cff 	add.w	ip, r5, #4294967295
 8013ad0:	2d06      	cmp	r5, #6
 8013ad2:	dd05      	ble.n	8013ae0 <tiny_vsnprintf_like+0x36e>
        len = strlen(s);
 8013ad4:	2206      	movs	r2, #6
        if (!s) s = "<NULL>";
 8013ad6:	f245 480c 	movw	r8, #21516	; 0x540c
 8013ada:	f6c0 0801 	movt	r8, #2049	; 0x801
 8013ade:	e6f0      	b.n	80138c2 <tiny_vsnprintf_like+0x150>
        len = strlen(s);
 8013ae0:	2206      	movs	r2, #6
        if (!s) s = "<NULL>";
 8013ae2:	f245 480c 	movw	r8, #21516	; 0x540c
 8013ae6:	f6c0 0801 	movt	r8, #2049	; 0x801
 8013aea:	e6fd      	b.n	80138e8 <tiny_vsnprintf_like+0x176>

08013aec <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013aec:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013af0:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8013af2:	f641 03bc 	movw	r3, #6332	; 0x18bc
 8013af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013afa:	681a      	ldr	r2, [r3, #0]
 8013afc:	4302      	orrs	r2, r0
 8013afe:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8013b00:	f641 03b4 	movw	r3, #6324	; 0x18b4
 8013b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013b08:	f853 2031 	ldr.w	r2, [r3, r1, lsl #3]
 8013b0c:	4302      	orrs	r2, r0
 8013b0e:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b12:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8013b16:	4770      	bx	lr

08013b18 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8013b18:	4770      	bx	lr

08013b1a <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8013b1a:	4770      	bx	lr

08013b1c <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8013b1c:	0c03      	lsrs	r3, r0, #16
 8013b1e:	041b      	lsls	r3, r3, #16
 8013b20:	b9c3      	cbnz	r3, 8013b54 <SEQ_BitPosition+0x38>
 8013b22:	0400      	lsls	r0, r0, #16
 8013b24:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8013b26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013b2a:	d102      	bne.n	8013b32 <SEQ_BitPosition+0x16>
 8013b2c:	3308      	adds	r3, #8
 8013b2e:	b2db      	uxtb	r3, r3
 8013b30:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8013b32:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013b36:	d102      	bne.n	8013b3e <SEQ_BitPosition+0x22>
 8013b38:	3304      	adds	r3, #4
 8013b3a:	b2db      	uxtb	r3, r3
 8013b3c:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];

  return (uint8_t)(31U-n);
 8013b3e:	f1c3 031f 	rsb	r3, r3, #31
  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8013b42:	f245 4264 	movw	r2, #21604	; 0x5464
 8013b46:	f6c0 0201 	movt	r2, #2049	; 0x801
 8013b4a:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 8013b4c:	5c12      	ldrb	r2, [r2, r0]
 8013b4e:	1a98      	subs	r0, r3, r2
}
 8013b50:	b2c0      	uxtb	r0, r0
 8013b52:	4770      	bx	lr
uint8_t n = 0U;
 8013b54:	2300      	movs	r3, #0
 8013b56:	e7e6      	b.n	8013b26 <SEQ_BitPosition+0xa>

08013b58 <UTIL_SEQ_Run>:
{
 8013b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  super_mask_backup = SuperMask;
 8013b5c:	f240 1314 	movw	r3, #276	; 0x114
 8013b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013b64:	f8d3 9000 	ldr.w	r9, [r3]
  SuperMask &= Mask_bm;
 8013b68:	ea09 0000 	and.w	r0, r9, r0
 8013b6c:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8013b6e:	f641 03bc 	movw	r3, #6332	; 0x18bc
 8013b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013b76:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8013b78:	f641 029c 	movw	r2, #6300	; 0x189c
 8013b7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8013b80:	6814      	ldr	r4, [r2, #0]
  local_taskmask = TaskMask;
 8013b82:	f240 1218 	movw	r2, #280	; 0x118
 8013b86:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8013b8a:	6811      	ldr	r1, [r2, #0]
  local_evtwaited =  EvtWaited;
 8013b8c:	f641 02a0 	movw	r2, #6304	; 0x18a0
 8013b90:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8013b94:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013b96:	400b      	ands	r3, r1
 8013b98:	4203      	tst	r3, r0
 8013b9a:	d068      	beq.n	8013c6e <UTIL_SEQ_Run+0x116>
 8013b9c:	ea14 0802 	ands.w	r8, r4, r2
 8013ba0:	d165      	bne.n	8013c6e <UTIL_SEQ_Run+0x116>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013ba2:	f641 05b4 	movw	r5, #6324	; 0x18b4
 8013ba6:	f2c2 0500 	movt	r5, #8192	; 0x2000
      counter++;
 8013baa:	2701      	movs	r7, #1
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8013bac:	f641 0698 	movw	r6, #6296	; 0x1898
 8013bb0:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8013bb4:	e047      	b.n	8013c46 <UTIL_SEQ_Run+0xee>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013bb6:	68ab      	ldr	r3, [r5, #8]
      counter++;
 8013bb8:	463b      	mov	r3, r7
 8013bba:	e04a      	b.n	8013c52 <UTIL_SEQ_Run+0xfa>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8013bbc:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8013bc0:	6863      	ldr	r3, [r4, #4]
 8013bc2:	4018      	ands	r0, r3
 8013bc4:	f7ff ffaa 	bl	8013b1c <SEQ_BitPosition>
 8013bc8:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8013bca:	6863      	ldr	r3, [r4, #4]
 8013bcc:	fa07 f000 	lsl.w	r0, r7, r0
 8013bd0:	ea23 0300 	bic.w	r3, r3, r0
 8013bd4:	6063      	str	r3, [r4, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013bd6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013bda:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8013bdc:	6833      	ldr	r3, [r6, #0]
 8013bde:	fa07 f303 	lsl.w	r3, r7, r3
 8013be2:	f641 04bc 	movw	r4, #6332	; 0x18bc
 8013be6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8013bea:	6822      	ldr	r2, [r4, #0]
 8013bec:	ea22 0203 	bic.w	r2, r2, r3
 8013bf0:	6022      	str	r2, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8013bf2:	682a      	ldr	r2, [r5, #0]
 8013bf4:	ea22 0303 	bic.w	r3, r2, r3
 8013bf8:	602b      	str	r3, [r5, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013bfa:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 8013bfe:	f641 03a4 	movw	r3, #6308	; 0x18a4
 8013c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c06:	6832      	ldr	r2, [r6, #0]
 8013c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c0c:	4798      	blx	r3
    local_taskset = TaskSet;
 8013c0e:	6823      	ldr	r3, [r4, #0]
    local_evtset = EvtSet;
 8013c10:	f641 029c 	movw	r2, #6300	; 0x189c
 8013c14:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8013c18:	f8d2 c000 	ldr.w	ip, [r2]
    local_taskmask = TaskMask;
 8013c1c:	f240 1218 	movw	r2, #280	; 0x118
 8013c20:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8013c24:	6811      	ldr	r1, [r2, #0]
    local_evtwaited = EvtWaited;
 8013c26:	f641 02a0 	movw	r2, #6304	; 0x18a0
 8013c2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8013c2e:	6814      	ldr	r4, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013c30:	f240 1214 	movw	r2, #276	; 0x114
 8013c34:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8013c38:	6810      	ldr	r0, [r2, #0]
 8013c3a:	400b      	ands	r3, r1
 8013c3c:	4203      	tst	r3, r0
 8013c3e:	d016      	beq.n	8013c6e <UTIL_SEQ_Run+0x116>
 8013c40:	ea1c 0f04 	tst.w	ip, r4
 8013c44:	d113      	bne.n	8013c6e <UTIL_SEQ_Run+0x116>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013c46:	682b      	ldr	r3, [r5, #0]
 8013c48:	ea00 0201 	and.w	r2, r0, r1
 8013c4c:	421a      	tst	r2, r3
 8013c4e:	d0b2      	beq.n	8013bb6 <UTIL_SEQ_Run+0x5e>
    counter = 0U;
 8013c50:	4643      	mov	r3, r8
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8013c52:	f855 0033 	ldr.w	r0, [r5, r3, lsl #3]
 8013c56:	4010      	ands	r0, r2
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8013c58:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8013c5c:	6852      	ldr	r2, [r2, #4]
 8013c5e:	4202      	tst	r2, r0
 8013c60:	d1ac      	bne.n	8013bbc <UTIL_SEQ_Run+0x64>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8013c62:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8013c66:	f04f 31ff 	mov.w	r1, #4294967295
 8013c6a:	6051      	str	r1, [r2, #4]
 8013c6c:	e7a6      	b.n	8013bbc <UTIL_SEQ_Run+0x64>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8013c6e:	f641 0398 	movw	r3, #6296	; 0x1898
 8013c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c76:	f04f 32ff 	mov.w	r2, #4294967295
 8013c7a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8013c7c:	f7ff ff4c 	bl	8013b18 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c80:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013c84:	b672      	cpsid	i
  local_taskset = TaskSet;
 8013c86:	f641 03bc 	movw	r3, #6332	; 0x18bc
 8013c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c8e:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8013c90:	f641 029c 	movw	r2, #6300	; 0x189c
 8013c94:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8013c98:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8013c9a:	f240 1218 	movw	r2, #280	; 0x118
 8013c9e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8013ca2:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8013ca4:	4013      	ands	r3, r2
 8013ca6:	f240 1214 	movw	r2, #276	; 0x114
 8013caa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8013cae:	6812      	ldr	r2, [r2, #0]
 8013cb0:	4213      	tst	r3, r2
 8013cb2:	d106      	bne.n	8013cc2 <UTIL_SEQ_Run+0x16a>
    if ((local_evtset & EvtWaited)== 0U)
 8013cb4:	f641 03a0 	movw	r3, #6304	; 0x18a0
 8013cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	420b      	tst	r3, r1
 8013cc0:	d00b      	beq.n	8013cda <UTIL_SEQ_Run+0x182>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013cc2:	f384 8810 	msr	PRIMASK, r4
  UTIL_SEQ_PostIdle( );
 8013cc6:	f7ff ff28 	bl	8013b1a <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8013cca:	f240 1314 	movw	r3, #276	; 0x114
 8013cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013cd2:	f8c3 9000 	str.w	r9, [r3]
}
 8013cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      UTIL_SEQ_Idle( );
 8013cda:	f7ee fa38 	bl	800214e <UTIL_SEQ_Idle>
 8013cde:	e7f0      	b.n	8013cc2 <UTIL_SEQ_Run+0x16a>

08013ce0 <UTIL_SEQ_RegTask>:
{
 8013ce0:	b538      	push	{r3, r4, r5, lr}
 8013ce2:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ce4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013ce8:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8013cea:	f7ff ff17 	bl	8013b1c <SEQ_BitPosition>
 8013cee:	f641 03a4 	movw	r3, #6308	; 0x18a4
 8013cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013cf6:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013cfa:	f385 8810 	msr	PRIMASK, r5
}
 8013cfe:	bd38      	pop	{r3, r4, r5, pc}

08013d00 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8013d00:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8013d02:	f641 03c0 	movw	r3, #6336	; 0x18c0
 8013d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8013d0e:	f244 7354 	movw	r3, #18260	; 0x4754
 8013d12:	f6c0 0301 	movt	r3, #2049	; 0x801
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	4798      	blx	r3
}
 8013d1a:	bd08      	pop	{r3, pc}

08013d1c <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8013d1c:	b1c0      	cbz	r0, 8013d50 <UTIL_TIMER_Create+0x34>
{
 8013d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d20:	4617      	mov	r7, r2
 8013d22:	461e      	mov	r6, r3
 8013d24:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8013d26:	b1ab      	cbz	r3, 8013d54 <UTIL_TIMER_Create+0x38>
  {
    TimerObject->Timestamp = 0U;
 8013d28:	2500      	movs	r5, #0
 8013d2a:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8013d2c:	f244 7354 	movw	r3, #18260	; 0x4754
 8013d30:	f6c0 0301 	movt	r3, #2049	; 0x801
 8013d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d36:	4608      	mov	r0, r1
 8013d38:	4798      	blx	r3
 8013d3a:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8013d3c:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8013d3e:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8013d40:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8013d42:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8013d44:	9b06      	ldr	r3, [sp, #24]
 8013d46:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8013d48:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8013d4a:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8013d4c:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8013d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8013d50:	2001      	movs	r0, #1
}
 8013d52:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8013d54:	2001      	movs	r0, #1
 8013d56:	e7fa      	b.n	8013d4e <UTIL_TIMER_Create+0x32>

08013d58 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8013d58:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8013d5a:	f244 7454 	movw	r4, #18260	; 0x4754
 8013d5e:	f6c0 0401 	movt	r4, #2049	; 0x801
 8013d62:	69e3      	ldr	r3, [r4, #28]
 8013d64:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8013d66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013d68:	4798      	blx	r3
}
 8013d6a:	bd10      	pop	{r4, pc}

08013d6c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8013d6c:	b570      	push	{r4, r5, r6, lr}
 8013d6e:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8013d70:	f244 7454 	movw	r4, #18260	; 0x4754
 8013d74:	f6c0 0401 	movt	r4, #2049	; 0x801
 8013d78:	69e3      	ldr	r3, [r4, #28]
 8013d7a:	4798      	blx	r3
 8013d7c:	4605      	mov	r5, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8013d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d80:	4630      	mov	r0, r6
 8013d82:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8013d84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013d86:	1a28      	subs	r0, r5, r0
 8013d88:	4798      	blx	r3
}
 8013d8a:	bd70      	pop	{r4, r5, r6, pc}

08013d8c <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8013d8c:	f641 03c0 	movw	r3, #6336	; 0x18c0
 8013d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d94:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8013d96:	b14b      	cbz	r3, 8013dac <TimerExists+0x20>
  {
    if( cur == TimerObject )
 8013d98:	4283      	cmp	r3, r0
 8013d9a:	d009      	beq.n	8013db0 <TimerExists+0x24>
    {
      return true;
    }
    cur = cur->Next;
 8013d9c:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8013d9e:	b11b      	cbz	r3, 8013da8 <TimerExists+0x1c>
    if( cur == TimerObject )
 8013da0:	4298      	cmp	r0, r3
 8013da2:	d1fb      	bne.n	8013d9c <TimerExists+0x10>
      return true;
 8013da4:	2001      	movs	r0, #1
  }
  return false;
}
 8013da6:	4770      	bx	lr
  return false;
 8013da8:	2000      	movs	r0, #0
 8013daa:	4770      	bx	lr
 8013dac:	2000      	movs	r0, #0
 8013dae:	4770      	bx	lr
      return true;
 8013db0:	2001      	movs	r0, #1
 8013db2:	4770      	bx	lr

08013db4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8013db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013db6:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8013db8:	f244 7554 	movw	r5, #18260	; 0x4754
 8013dbc:	f6c0 0501 	movt	r5, #2049	; 0x801
 8013dc0:	6a2b      	ldr	r3, [r5, #32]
 8013dc2:	4798      	blx	r3
 8013dc4:	4606      	mov	r6, r0
  TimerObject->IsPending = 1;
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8013dca:	6827      	ldr	r7, [r4, #0]
 8013dcc:	69ad      	ldr	r5, [r5, #24]
 8013dce:	47a8      	blx	r5
 8013dd0:	4430      	add	r0, r6
 8013dd2:	4287      	cmp	r7, r0
 8013dd4:	d202      	bcs.n	8013ddc <TimerSetTimeout+0x28>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8013dd6:	47a8      	blx	r5
 8013dd8:	4430      	add	r0, r6
 8013dda:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8013ddc:	f244 7354 	movw	r3, #18260	; 0x4754
 8013de0:	f6c0 0301 	movt	r3, #2049	; 0x801
 8013de4:	689b      	ldr	r3, [r3, #8]
 8013de6:	6820      	ldr	r0, [r4, #0]
 8013de8:	4798      	blx	r3
}
 8013dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013dec <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8013dec:	2800      	cmp	r0, #0
 8013dee:	d037      	beq.n	8013e60 <UTIL_TIMER_Stop+0x74>
{
 8013df0:	b510      	push	{r4, lr}
 8013df2:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013df4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013df8:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8013dfa:	f641 03c0 	movw	r3, #6336	; 0x18c0
 8013dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e02:	681b      	ldr	r3, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8013e04:	2101      	movs	r1, #1
 8013e06:	7281      	strb	r1, [r0, #10]
    if(NULL != TimerListHead)
 8013e08:	b15b      	cbz	r3, 8013e22 <UTIL_TIMER_Stop+0x36>
      TimerObject->IsRunning = 0U;
 8013e0a:	2100      	movs	r1, #0
 8013e0c:	7241      	strb	r1, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8013e0e:	4298      	cmp	r0, r3
 8013e10:	d00b      	beq.n	8013e2a <UTIL_TIMER_Stop+0x3e>
            cur = cur->Next;
 8013e12:	4619      	mov	r1, r3
 8013e14:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
 8013e16:	b123      	cbz	r3, 8013e22 <UTIL_TIMER_Stop+0x36>
          if( cur == TimerObject )
 8013e18:	429a      	cmp	r2, r3
 8013e1a:	d1fa      	bne.n	8013e12 <UTIL_TIMER_Stop+0x26>
            if( cur->Next != NULL )
 8013e1c:	695b      	ldr	r3, [r3, #20]
 8013e1e:	b1e3      	cbz	r3, 8013e5a <UTIL_TIMER_Stop+0x6e>
              prev->Next = cur;
 8013e20:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e22:	f384 8810 	msr	PRIMASK, r4
}
 8013e26:	2000      	movs	r0, #0
}
 8013e28:	bd10      	pop	{r4, pc}
          TimerListHead->IsPending = 0;
 8013e2a:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 8013e2c:	6958      	ldr	r0, [r3, #20]
 8013e2e:	b138      	cbz	r0, 8013e40 <UTIL_TIMER_Stop+0x54>
            TimerListHead = TimerListHead->Next;
 8013e30:	f641 03c0 	movw	r3, #6336	; 0x18c0
 8013e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e38:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8013e3a:	f7ff ffbb 	bl	8013db4 <TimerSetTimeout>
 8013e3e:	e7f0      	b.n	8013e22 <UTIL_TIMER_Stop+0x36>
            UTIL_TimerDriver.StopTimerEvt( );
 8013e40:	f244 7354 	movw	r3, #18260	; 0x4754
 8013e44:	f6c0 0301 	movt	r3, #2049	; 0x801
 8013e48:	68db      	ldr	r3, [r3, #12]
 8013e4a:	4798      	blx	r3
            TimerListHead = NULL;
 8013e4c:	f641 03c0 	movw	r3, #6336	; 0x18c0
 8013e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e54:	2200      	movs	r2, #0
 8013e56:	601a      	str	r2, [r3, #0]
 8013e58:	e7e3      	b.n	8013e22 <UTIL_TIMER_Stop+0x36>
              prev->Next = cur;
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	614b      	str	r3, [r1, #20]
 8013e5e:	e7e0      	b.n	8013e22 <UTIL_TIMER_Stop+0x36>
    ret = UTIL_TIMER_INVALID_PARAM;
 8013e60:	2001      	movs	r0, #1
}
 8013e62:	4770      	bx	lr

08013e64 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8013e64:	f641 03c0 	movw	r3, #6336	; 0x18c0
 8013e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e6c:	6819      	ldr	r1, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8013e6e:	694b      	ldr	r3, [r1, #20]

  while (cur->Next != NULL )
 8013e70:	b18b      	cbz	r3, 8013e96 <TimerInsertTimer+0x32>
{
 8013e72:	b410      	push	{r4}
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8013e74:	6804      	ldr	r4, [r0, #0]
 8013e76:	e000      	b.n	8013e7a <TimerInsertTimer+0x16>
    {
        cur = next;
        next = next->Next;
 8013e78:	4613      	mov	r3, r2
    if( TimerObject->Timestamp  > next->Timestamp )
 8013e7a:	681a      	ldr	r2, [r3, #0]
 8013e7c:	4294      	cmp	r4, r2
 8013e7e:	d906      	bls.n	8013e8e <TimerInsertTimer+0x2a>
        next = next->Next;
 8013e80:	695a      	ldr	r2, [r3, #20]
  while (cur->Next != NULL )
 8013e82:	4619      	mov	r1, r3
 8013e84:	2a00      	cmp	r2, #0
 8013e86:	d1f7      	bne.n	8013e78 <TimerInsertTimer+0x14>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 8013e88:	6158      	str	r0, [r3, #20]
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	e000      	b.n	8013e90 <TimerInsertTimer+0x2c>
        cur->Next = TimerObject;
 8013e8e:	6148      	str	r0, [r1, #20]
        TimerObject->Next = next;
 8013e90:	6143      	str	r3, [r0, #20]
  TimerObject->Next = NULL;
}
 8013e92:	bc10      	pop	{r4}
 8013e94:	4770      	bx	lr
  cur->Next = TimerObject;
 8013e96:	6148      	str	r0, [r1, #20]
 8013e98:	2300      	movs	r3, #0
        TimerObject->Next = next;
 8013e9a:	6143      	str	r3, [r0, #20]
 8013e9c:	4770      	bx	lr

08013e9e <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8013e9e:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8013ea0:	f641 03c0 	movw	r3, #6336	; 0x18c0
 8013ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013ea8:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8013eaa:	b10b      	cbz	r3, 8013eb0 <TimerInsertNewHeadTimer+0x12>
  {
    cur->IsPending = 0;
 8013eac:	2200      	movs	r2, #0
 8013eae:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8013eb0:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8013eb2:	f641 03c0 	movw	r3, #6336	; 0x18c0
 8013eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013eba:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8013ebc:	f7ff ff7a 	bl	8013db4 <TimerSetTimeout>
}
 8013ec0:	bd08      	pop	{r3, pc}

08013ec2 <UTIL_TIMER_Start>:
{
 8013ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8013ec4:	2800      	cmp	r0, #0
 8013ec6:	d045      	beq.n	8013f54 <UTIL_TIMER_Start+0x92>
 8013ec8:	4604      	mov	r4, r0
 8013eca:	f7ff ff5f 	bl	8013d8c <TimerExists>
 8013ece:	2800      	cmp	r0, #0
 8013ed0:	d143      	bne.n	8013f5a <UTIL_TIMER_Start+0x98>
 8013ed2:	7a65      	ldrb	r5, [r4, #9]
 8013ed4:	2d00      	cmp	r5, #0
 8013ed6:	d142      	bne.n	8013f5e <UTIL_TIMER_Start+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ed8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013edc:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8013ede:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8013ee0:	f244 7354 	movw	r3, #18260	; 0x4754
 8013ee4:	f6c0 0301 	movt	r3, #2049	; 0x801
 8013ee8:	6a1b      	ldr	r3, [r3, #32]
 8013eea:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 8013eec:	4287      	cmp	r7, r0
 8013eee:	bf38      	it	cc
 8013ef0:	4607      	movcc	r7, r0
 8013ef2:	6027      	str	r7, [r4, #0]
    TimerObject->IsPending = 0U;
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8013ef8:	2201      	movs	r2, #1
 8013efa:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8013efc:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8013efe:	f641 03c0 	movw	r3, #6336	; 0x18c0
 8013f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	b1b3      	cbz	r3, 8013f38 <UTIL_TIMER_Start+0x76>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8013f0a:	f244 7354 	movw	r3, #18260	; 0x4754
 8013f0e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8013f12:	699b      	ldr	r3, [r3, #24]
 8013f14:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8013f16:	6823      	ldr	r3, [r4, #0]
 8013f18:	4418      	add	r0, r3
 8013f1a:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8013f1c:	f641 03c0 	movw	r3, #6336	; 0x18c0
 8013f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	4298      	cmp	r0, r3
 8013f2a:	d20f      	bcs.n	8013f4c <UTIL_TIMER_Start+0x8a>
        TimerInsertNewHeadTimer( TimerObject);
 8013f2c:	4620      	mov	r0, r4
 8013f2e:	f7ff ffb6 	bl	8013e9e <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f32:	f386 8810 	msr	PRIMASK, r6
}
 8013f36:	e00e      	b.n	8013f56 <UTIL_TIMER_Start+0x94>
      UTIL_TimerDriver.SetTimerContext();
 8013f38:	f244 7354 	movw	r3, #18260	; 0x4754
 8013f3c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8013f40:	691b      	ldr	r3, [r3, #16]
 8013f42:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8013f44:	4620      	mov	r0, r4
 8013f46:	f7ff ffaa 	bl	8013e9e <TimerInsertNewHeadTimer>
 8013f4a:	e7f2      	b.n	8013f32 <UTIL_TIMER_Start+0x70>
        TimerInsertTimer( TimerObject);
 8013f4c:	4620      	mov	r0, r4
 8013f4e:	f7ff ff89 	bl	8013e64 <TimerInsertTimer>
 8013f52:	e7ee      	b.n	8013f32 <UTIL_TIMER_Start+0x70>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8013f54:	2501      	movs	r5, #1
}
 8013f56:	4628      	mov	r0, r5
 8013f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8013f5a:	2501      	movs	r5, #1
 8013f5c:	e7fb      	b.n	8013f56 <UTIL_TIMER_Start+0x94>
 8013f5e:	2501      	movs	r5, #1
 8013f60:	e7f9      	b.n	8013f56 <UTIL_TIMER_Start+0x94>

08013f62 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8013f62:	b1b0      	cbz	r0, 8013f92 <UTIL_TIMER_SetPeriod+0x30>
{
 8013f64:	b510      	push	{r4, lr}
 8013f66:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8013f68:	f244 7354 	movw	r3, #18260	; 0x4754
 8013f6c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8013f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f72:	4608      	mov	r0, r1
 8013f74:	4798      	blx	r3
 8013f76:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8013f78:	4620      	mov	r0, r4
 8013f7a:	f7ff ff07 	bl	8013d8c <TimerExists>
 8013f7e:	b908      	cbnz	r0, 8013f84 <UTIL_TIMER_SetPeriod+0x22>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8013f80:	2000      	movs	r0, #0
}
 8013f82:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8013f84:	4620      	mov	r0, r4
 8013f86:	f7ff ff31 	bl	8013dec <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8013f8a:	4620      	mov	r0, r4
 8013f8c:	f7ff ff99 	bl	8013ec2 <UTIL_TIMER_Start>
 8013f90:	e7f7      	b.n	8013f82 <UTIL_TIMER_SetPeriod+0x20>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8013f92:	2001      	movs	r0, #1
}
 8013f94:	4770      	bx	lr

08013f96 <UTIL_TIMER_IRQ_Handler>:
{
 8013f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f9a:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013f9e:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8013fa0:	f244 7554 	movw	r5, #18260	; 0x4754
 8013fa4:	f6c0 0501 	movt	r5, #2049	; 0x801
 8013fa8:	696b      	ldr	r3, [r5, #20]
 8013faa:	4798      	blx	r3
 8013fac:	4604      	mov	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8013fae:	692b      	ldr	r3, [r5, #16]
 8013fb0:	4798      	blx	r3
  if ( TimerListHead != NULL )
 8013fb2:	f641 03c0 	movw	r3, #6336	; 0x18c0
 8013fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	b15b      	cbz	r3, 8013fd6 <UTIL_TIMER_IRQ_Handler+0x40>
  DeltaContext = now  - old; /*intentional wrap around */
 8013fbe:	1b01      	subs	r1, r0, r4
        cur->Timestamp = 0;
 8013fc0:	2500      	movs	r5, #0
        cur->Timestamp -= DeltaContext;
 8013fc2:	1a20      	subs	r0, r4, r0
      if (cur->Timestamp > DeltaContext)
 8013fc4:	681a      	ldr	r2, [r3, #0]
 8013fc6:	428a      	cmp	r2, r1
        cur->Timestamp -= DeltaContext;
 8013fc8:	bf8c      	ite	hi
 8013fca:	1812      	addhi	r2, r2, r0
        cur->Timestamp = 0;
 8013fcc:	462a      	movls	r2, r5
 8013fce:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8013fd0:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d1f6      	bne.n	8013fc4 <UTIL_TIMER_IRQ_Handler+0x2e>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8013fd6:	f641 05c0 	movw	r5, #6336	; 0x18c0
 8013fda:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8013fde:	f244 7754 	movw	r7, #18260	; 0x4754
 8013fe2:	f6c0 0701 	movt	r7, #2049	; 0x801
      cur->IsPending = 0;
 8013fe6:	2600      	movs	r6, #0
 8013fe8:	e00b      	b.n	8014002 <UTIL_TIMER_IRQ_Handler+0x6c>
      cur = TimerListHead;
 8013fea:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 8013fec:	6963      	ldr	r3, [r4, #20]
 8013fee:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 8013ff0:	7226      	strb	r6, [r4, #8]
      cur->IsRunning = 0;
 8013ff2:	7266      	strb	r6, [r4, #9]
      cur->Callback(cur->argument);
 8013ff4:	68e3      	ldr	r3, [r4, #12]
 8013ff6:	6920      	ldr	r0, [r4, #16]
 8013ff8:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8013ffa:	8963      	ldrh	r3, [r4, #10]
 8013ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014000:	d014      	beq.n	801402c <UTIL_TIMER_IRQ_Handler+0x96>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8014002:	682b      	ldr	r3, [r5, #0]
 8014004:	b173      	cbz	r3, 8014024 <UTIL_TIMER_IRQ_Handler+0x8e>
 8014006:	681c      	ldr	r4, [r3, #0]
 8014008:	2c00      	cmp	r4, #0
 801400a:	d0ee      	beq.n	8013fea <UTIL_TIMER_IRQ_Handler+0x54>
 801400c:	69bb      	ldr	r3, [r7, #24]
 801400e:	4798      	blx	r3
 8014010:	4284      	cmp	r4, r0
 8014012:	d3ea      	bcc.n	8013fea <UTIL_TIMER_IRQ_Handler+0x54>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8014014:	f641 03c0 	movw	r3, #6336	; 0x18c0
 8014018:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801401c:	6818      	ldr	r0, [r3, #0]
 801401e:	b108      	cbz	r0, 8014024 <UTIL_TIMER_IRQ_Handler+0x8e>
 8014020:	7a03      	ldrb	r3, [r0, #8]
 8014022:	b13b      	cbz	r3, 8014034 <UTIL_TIMER_IRQ_Handler+0x9e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014024:	f388 8810 	msr	PRIMASK, r8
}
 8014028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (void)UTIL_TIMER_Start(cur);
 801402c:	4620      	mov	r0, r4
 801402e:	f7ff ff48 	bl	8013ec2 <UTIL_TIMER_Start>
 8014032:	e7d8      	b.n	8013fe6 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8014034:	f7ff febe 	bl	8013db4 <TimerSetTimeout>
 8014038:	e7f4      	b.n	8014024 <UTIL_TIMER_IRQ_Handler+0x8e>

0801403a <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801403a:	b500      	push	{lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801403c:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014040:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8014042:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 8014046:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801404a:	8a5a      	ldrh	r2, [r3, #18]
 801404c:	8a1b      	ldrh	r3, [r3, #16]
 801404e:	429a      	cmp	r2, r3
 8014050:	d015      	beq.n	801407e <TRACE_AllocateBufer+0x44>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8014052:	429a      	cmp	r2, r3
 8014054:	d927      	bls.n	80140a6 <TRACE_AllocateBufer+0x6c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8014056:	f5c2 6e80 	rsb	lr, r2, #1024	; 0x400
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801405a:	fa1f fe8e 	uxth.w	lr, lr
 801405e:	4586      	cmp	lr, r0
 8014060:	d825      	bhi.n	80140ae <TRACE_AllocateBufer+0x74>
 8014062:	4283      	cmp	r3, r0
 8014064:	d935      	bls.n	80140d2 <TRACE_AllocateBufer+0x98>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8014066:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 801406a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801406e:	f04f 0e01 	mov.w	lr, #1
 8014072:	f883 e002 	strb.w	lr, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8014076:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8014078:	2200      	movs	r2, #0
 801407a:	825a      	strh	r2, [r3, #18]
 801407c:	e017      	b.n	80140ae <TRACE_AllocateBufer+0x74>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801407e:	f5c2 6e80 	rsb	lr, r2, #1024	; 0x400
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8014082:	fa1f fe8e 	uxth.w	lr, lr
 8014086:	4570      	cmp	r0, lr
 8014088:	d311      	bcc.n	80140ae <TRACE_AllocateBufer+0x74>
 801408a:	4283      	cmp	r3, r0
 801408c:	d91e      	bls.n	80140cc <TRACE_AllocateBufer+0x92>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801408e:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 8014092:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014096:	f04f 0e01 	mov.w	lr, #1
 801409a:	f883 e002 	strb.w	lr, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801409e:	801a      	strh	r2, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 80140a0:	2200      	movs	r2, #0
 80140a2:	825a      	strh	r2, [r3, #18]
 80140a4:	e003      	b.n	80140ae <TRACE_AllocateBufer+0x74>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80140a6:	1a9b      	subs	r3, r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80140a8:	b29b      	uxth	r3, r3
 80140aa:	4283      	cmp	r3, r0
 80140ac:	d914      	bls.n	80140d8 <TRACE_AllocateBufer+0x9e>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80140ae:	f641 42c4 	movw	r2, #7364	; 0x1cc4
 80140b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80140b6:	8a53      	ldrh	r3, [r2, #18]
 80140b8:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80140ba:	4403      	add	r3, r0
 80140bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80140c0:	8253      	strh	r3, [r2, #18]
    ret = 0;
 80140c2:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80140c4:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 80140c8:	f85d fb04 	ldr.w	pc, [sp], #4
  int16_t ret = -1;
 80140cc:	f04f 30ff 	mov.w	r0, #4294967295
 80140d0:	e7f8      	b.n	80140c4 <TRACE_AllocateBufer+0x8a>
 80140d2:	f04f 30ff 	mov.w	r0, #4294967295
 80140d6:	e7f5      	b.n	80140c4 <TRACE_AllocateBufer+0x8a>
 80140d8:	f04f 30ff 	mov.w	r0, #4294967295
 80140dc:	e7f2      	b.n	80140c4 <TRACE_AllocateBufer+0x8a>

080140de <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80140de:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80140e2:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 80140e4:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 80140e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80140ec:	8ada      	ldrh	r2, [r3, #22]
 80140ee:	3201      	adds	r2, #1
 80140f0:	82da      	strh	r2, [r3, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80140f2:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80140f6:	4770      	bx	lr

080140f8 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80140f8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80140fc:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 80140fe:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 8014102:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014106:	8ada      	ldrh	r2, [r3, #22]
 8014108:	3a01      	subs	r2, #1
 801410a:	82da      	strh	r2, [r3, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801410c:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8014110:	4770      	bx	lr

08014112 <UTIL_ADV_TRACE_Init>:
{
 8014112:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8014114:	2218      	movs	r2, #24
 8014116:	2100      	movs	r1, #0
 8014118:	f641 40c4 	movw	r0, #7364	; 0x1cc4
 801411c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8014120:	f7ff fa30 	bl	8013584 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8014124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014128:	2100      	movs	r1, #0
 801412a:	f641 00c4 	movw	r0, #6340	; 0x18c4
 801412e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8014132:	f7ff fa27 	bl	8013584 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8014136:	f244 7380 	movw	r3, #18304	; 0x4780
 801413a:	f6c0 0301 	movt	r3, #2049	; 0x801
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	f244 300b 	movw	r0, #17163	; 0x430b
 8014144:	f6c0 0001 	movt	r0, #2049	; 0x801
 8014148:	4798      	blx	r3
}
 801414a:	bd08      	pop	{r3, pc}

0801414c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801414c:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 8014150:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014154:	6058      	str	r0, [r3, #4]
}
 8014156:	4770      	bx	lr

08014158 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8014158:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 801415c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014160:	7218      	strb	r0, [r3, #8]
}
 8014162:	4770      	bx	lr

08014164 <TRACE_Send>:
{
 8014164:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014166:	f3ef 8310 	mrs	r3, PRIMASK
 801416a:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 801416c:	b672      	cpsid	i
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801416e:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 8014172:	f2c2 0300 	movt	r3, #8192	; 0x2000
  if(TRACE_IsLocked() == 0u)
 8014176:	8adb      	ldrh	r3, [r3, #22]
 8014178:	b11b      	cbz	r3, 8014182 <TRACE_Send+0x1e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801417a:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801417e:	2000      	movs	r0, #0
}
 8014180:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8014182:	f7ff ffac 	bl	80140de <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8014186:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 801418a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801418e:	8a19      	ldrh	r1, [r3, #16]
 8014190:	8a5a      	ldrh	r2, [r3, #18]
 8014192:	4291      	cmp	r1, r2
 8014194:	d044      	beq.n	8014220 <TRACE_Send+0xbc>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8014196:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 801419a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801419e:	789b      	ldrb	r3, [r3, #2]
 80141a0:	2b01      	cmp	r3, #1
 80141a2:	d024      	beq.n	80141ee <TRACE_Send+0x8a>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80141a4:	b963      	cbnz	r3, 80141c0 <TRACE_Send+0x5c>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80141a6:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 80141aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80141ae:	8a1b      	ldrh	r3, [r3, #16]
 80141b0:	429a      	cmp	r2, r3
 80141b2:	d92d      	bls.n	8014210 <TRACE_Send+0xac>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80141b4:	f641 41c4 	movw	r1, #7364	; 0x1cc4
 80141b8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80141bc:	1ad2      	subs	r2, r2, r3
 80141be:	828a      	strh	r2, [r1, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80141c0:	f641 03c4 	movw	r3, #6340	; 0x18c4
 80141c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80141c8:	f641 46c4 	movw	r6, #7364	; 0x1cc4
 80141cc:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80141d0:	8a32      	ldrh	r2, [r6, #16]
 80141d2:	189d      	adds	r5, r3, r2
 80141d4:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 80141d8:	f7ee f838 	bl	800224c <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80141dc:	f244 7380 	movw	r3, #18304	; 0x4780
 80141e0:	f6c0 0301 	movt	r3, #2049	; 0x801
 80141e4:	68db      	ldr	r3, [r3, #12]
 80141e6:	8ab1      	ldrh	r1, [r6, #20]
 80141e8:	4628      	mov	r0, r5
 80141ea:	4798      	blx	r3
 80141ec:	e7c8      	b.n	8014180 <TRACE_Send+0x1c>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80141ee:	f641 40c4 	movw	r0, #7364	; 0x1cc4
 80141f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80141f6:	8803      	ldrh	r3, [r0, #0]
 80141f8:	1a5b      	subs	r3, r3, r1
 80141fa:	b29b      	uxth	r3, r3
 80141fc:	8283      	strh	r3, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80141fe:	2102      	movs	r1, #2
 8014200:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8014202:	2100      	movs	r1, #0
 8014204:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8014206:	2b00      	cmp	r3, #0
 8014208:	d1da      	bne.n	80141c0 <TRACE_Send+0x5c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801420a:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801420c:	8201      	strh	r1, [r0, #16]
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801420e:	e7ca      	b.n	80141a6 <TRACE_Send+0x42>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8014210:	f641 42c4 	movw	r2, #7364	; 0x1cc4
 8014214:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8014218:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801421c:	8293      	strh	r3, [r2, #20]
 801421e:	e7cf      	b.n	80141c0 <TRACE_Send+0x5c>
      TRACE_UnLock();
 8014220:	f7ff ff6a 	bl	80140f8 <TRACE_UnLock>
 8014224:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8014228:	2000      	movs	r0, #0
}
 801422a:	e7a9      	b.n	8014180 <TRACE_Send+0x1c>

0801422c <UTIL_ADV_TRACE_COND_FSend>:
{
 801422c:	b408      	push	{r3}
 801422e:	b530      	push	{r4, r5, lr}
 8014230:	b086      	sub	sp, #24
 8014232:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8014234:	2300      	movs	r3, #0
 8014236:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801423a:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 801423e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014242:	7a1b      	ldrb	r3, [r3, #8]
 8014244:	4283      	cmp	r3, r0
 8014246:	d35a      	bcc.n	80142fe <UTIL_ADV_TRACE_COND_FSend+0xd2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8014248:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 801424c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014250:	68db      	ldr	r3, [r3, #12]
 8014252:	4399      	bics	r1, r3
 8014254:	d156      	bne.n	8014304 <UTIL_ADV_TRACE_COND_FSend+0xd8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8014256:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 801425a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801425e:	685b      	ldr	r3, [r3, #4]
 8014260:	b123      	cbz	r3, 801426c <UTIL_ADV_TRACE_COND_FSend+0x40>
 8014262:	b11a      	cbz	r2, 801426c <UTIL_ADV_TRACE_COND_FSend+0x40>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8014264:	f10d 0102 	add.w	r1, sp, #2
 8014268:	a801      	add	r0, sp, #4
 801426a:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 801426c:	ab0a      	add	r3, sp, #40	; 0x28
 801426e:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8014270:	4622      	mov	r2, r4
 8014272:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014276:	f641 40dc 	movw	r0, #7388	; 0x1cdc
 801427a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801427e:	f7ff fa78 	bl	8013772 <tiny_vsnprintf_like>
 8014282:	4605      	mov	r5, r0
  TRACE_Lock();
 8014284:	f7ff ff2b 	bl	80140de <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8014288:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801428c:	18e8      	adds	r0, r5, r3
 801428e:	4669      	mov	r1, sp
 8014290:	b280      	uxth	r0, r0
 8014292:	f7ff fed2 	bl	801403a <TRACE_AllocateBufer>
 8014296:	f1b0 3fff 	cmp.w	r0, #4294967295
 801429a:	d02b      	beq.n	80142f4 <UTIL_ADV_TRACE_COND_FSend+0xc8>
    for (idx = 0u; idx < timestamp_size; idx++)
 801429c:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80142a0:	b190      	cbz	r0, 80142c8 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 80142a2:	f8bd 3000 	ldrh.w	r3, [sp]
 80142a6:	aa01      	add	r2, sp, #4
 80142a8:	4418      	add	r0, r3
 80142aa:	b280      	uxth	r0, r0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 80142ac:	f641 0cc4 	movw	ip, #6340	; 0x18c4
 80142b0:	f2c2 0c00 	movt	ip, #8192	; 0x2000
 80142b4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80142b8:	f80c 1003 	strb.w	r1, [ip, r3]
      writepos = writepos + 1u;
 80142bc:	3301      	adds	r3, #1
 80142be:	b29b      	uxth	r3, r3
    for (idx = 0u; idx < timestamp_size; idx++)
 80142c0:	4283      	cmp	r3, r0
 80142c2:	d1f7      	bne.n	80142b4 <UTIL_ADV_TRACE_COND_FSend+0x88>
 80142c4:	f8ad 3000 	strh.w	r3, [sp]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80142c8:	f641 00c4 	movw	r0, #6340	; 0x18c4
 80142cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80142d0:	f8bd 5000 	ldrh.w	r5, [sp]
 80142d4:	9b05      	ldr	r3, [sp, #20]
 80142d6:	4622      	mov	r2, r4
 80142d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80142dc:	4428      	add	r0, r5
 80142de:	f7ff fa48 	bl	8013772 <tiny_vsnprintf_like>
    TRACE_UnLock();
 80142e2:	f7ff ff09 	bl	80140f8 <TRACE_UnLock>
    return TRACE_Send();
 80142e6:	f7ff ff3d 	bl	8014164 <TRACE_Send>
}
 80142ea:	b006      	add	sp, #24
 80142ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80142f0:	b001      	add	sp, #4
 80142f2:	4770      	bx	lr
  TRACE_UnLock();
 80142f4:	f7ff ff00 	bl	80140f8 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 80142f8:	f06f 0002 	mvn.w	r0, #2
 80142fc:	e7f5      	b.n	80142ea <UTIL_ADV_TRACE_COND_FSend+0xbe>
    return UTIL_ADV_TRACE_GIVEUP;
 80142fe:	f06f 0004 	mvn.w	r0, #4
 8014302:	e7f2      	b.n	80142ea <UTIL_ADV_TRACE_COND_FSend+0xbe>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8014304:	f06f 0005 	mvn.w	r0, #5
 8014308:	e7ef      	b.n	80142ea <UTIL_ADV_TRACE_COND_FSend+0xbe>

0801430a <TRACE_TxCpltCallback>:
{
 801430a:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801430c:	f3ef 8310 	mrs	r3, PRIMASK
 8014310:	469c      	mov	ip, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8014312:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8014314:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 8014318:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801431c:	789b      	ldrb	r3, [r3, #2]
 801431e:	2b02      	cmp	r3, #2
 8014320:	d01e      	beq.n	8014360 <TRACE_TxCpltCallback+0x56>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8014322:	f641 42c4 	movw	r2, #7364	; 0x1cc4
 8014326:	f2c2 0200 	movt	r2, #8192	; 0x2000
 801432a:	8a13      	ldrh	r3, [r2, #16]
 801432c:	8a92      	ldrh	r2, [r2, #20]
 801432e:	4413      	add	r3, r2
 8014330:	f3c3 0309 	ubfx	r3, r3, #0, #10
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8014334:	f641 42c4 	movw	r2, #7364	; 0x1cc4
 8014338:	f2c2 0200 	movt	r2, #8192	; 0x2000
 801433c:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801433e:	8a51      	ldrh	r1, [r2, #18]
 8014340:	4299      	cmp	r1, r3
 8014342:	d006      	beq.n	8014352 <TRACE_TxCpltCallback+0x48>
 8014344:	f641 42c4 	movw	r2, #7364	; 0x1cc4
 8014348:	f2c2 0200 	movt	r2, #8192	; 0x2000
 801434c:	8ad2      	ldrh	r2, [r2, #22]
 801434e:	2a01      	cmp	r2, #1
 8014350:	d00d      	beq.n	801436e <TRACE_TxCpltCallback+0x64>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014352:	f38c 8810 	msr	PRIMASK, ip
    UTIL_ADV_TRACE_PostSendHook();
 8014356:	f7ed ff7f 	bl	8002258 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801435a:	f7ff fecd 	bl	80140f8 <TRACE_UnLock>
}
 801435e:	bd08      	pop	{r3, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8014360:	f641 42c4 	movw	r2, #7364	; 0x1cc4
 8014364:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8014368:	2300      	movs	r3, #0
 801436a:	7093      	strb	r3, [r2, #2]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 801436c:	e7e2      	b.n	8014334 <TRACE_TxCpltCallback+0x2a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801436e:	f641 42c4 	movw	r2, #7364	; 0x1cc4
 8014372:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8014376:	7892      	ldrb	r2, [r2, #2]
 8014378:	2a01      	cmp	r2, #1
 801437a:	d024      	beq.n	80143c6 <TRACE_TxCpltCallback+0xbc>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801437c:	b97a      	cbnz	r2, 801439e <TRACE_TxCpltCallback+0x94>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801437e:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 8014382:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014386:	8a1b      	ldrh	r3, [r3, #16]
 8014388:	4299      	cmp	r1, r3
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801438a:	f641 42c4 	movw	r2, #7364	; 0x1cc4
 801438e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8014392:	bf87      	ittee	hi
 8014394:	1ac9      	subhi	r1, r1, r3
 8014396:	8291      	strhhi	r1, [r2, #20]
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8014398:	f5c3 6380 	rsbls	r3, r3, #1024	; 0x400
 801439c:	8293      	strhls	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801439e:	f641 00c4 	movw	r0, #6340	; 0x18c4
 80143a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80143a6:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 80143aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80143ae:	8a1a      	ldrh	r2, [r3, #16]
 80143b0:	4410      	add	r0, r2
 80143b2:	f38c 8810 	msr	PRIMASK, ip
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80143b6:	f244 7280 	movw	r2, #18304	; 0x4780
 80143ba:	f6c0 0201 	movt	r2, #2049	; 0x801
 80143be:	68d2      	ldr	r2, [r2, #12]
 80143c0:	8a99      	ldrh	r1, [r3, #20]
 80143c2:	4790      	blx	r2
 80143c4:	e7cb      	b.n	801435e <TRACE_TxCpltCallback+0x54>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80143c6:	f641 40c4 	movw	r0, #7364	; 0x1cc4
 80143ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80143ce:	8802      	ldrh	r2, [r0, #0]
 80143d0:	1ad3      	subs	r3, r2, r3
 80143d2:	b29b      	uxth	r3, r3
 80143d4:	8283      	strh	r3, [r0, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80143d6:	2202      	movs	r2, #2
 80143d8:	7082      	strb	r2, [r0, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 80143da:	2200      	movs	r2, #0
 80143dc:	8002      	strh	r2, [r0, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d1dd      	bne.n	801439e <TRACE_TxCpltCallback+0x94>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80143e2:	7082      	strb	r2, [r0, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 80143e4:	8202      	strh	r2, [r0, #16]
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80143e6:	e7ca      	b.n	801437e <TRACE_TxCpltCallback+0x74>

080143e8 <memset>:
 80143e8:	4402      	add	r2, r0
 80143ea:	4603      	mov	r3, r0
 80143ec:	4293      	cmp	r3, r2
 80143ee:	d100      	bne.n	80143f2 <memset+0xa>
 80143f0:	4770      	bx	lr
 80143f2:	f803 1b01 	strb.w	r1, [r3], #1
 80143f6:	e7f9      	b.n	80143ec <memset+0x4>

080143f8 <__libc_init_array>:
 80143f8:	b570      	push	{r4, r5, r6, lr}
 80143fa:	4d0d      	ldr	r5, [pc, #52]	; (8014430 <__libc_init_array+0x38>)
 80143fc:	4c0d      	ldr	r4, [pc, #52]	; (8014434 <__libc_init_array+0x3c>)
 80143fe:	1b64      	subs	r4, r4, r5
 8014400:	10a4      	asrs	r4, r4, #2
 8014402:	2600      	movs	r6, #0
 8014404:	42a6      	cmp	r6, r4
 8014406:	d109      	bne.n	801441c <__libc_init_array+0x24>
 8014408:	4d0b      	ldr	r5, [pc, #44]	; (8014438 <__libc_init_array+0x40>)
 801440a:	4c0c      	ldr	r4, [pc, #48]	; (801443c <__libc_init_array+0x44>)
 801440c:	f000 f900 	bl	8014610 <_init>
 8014410:	1b64      	subs	r4, r4, r5
 8014412:	10a4      	asrs	r4, r4, #2
 8014414:	2600      	movs	r6, #0
 8014416:	42a6      	cmp	r6, r4
 8014418:	d105      	bne.n	8014426 <__libc_init_array+0x2e>
 801441a:	bd70      	pop	{r4, r5, r6, pc}
 801441c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014420:	4798      	blx	r3
 8014422:	3601      	adds	r6, #1
 8014424:	e7ee      	b.n	8014404 <__libc_init_array+0xc>
 8014426:	f855 3b04 	ldr.w	r3, [r5], #4
 801442a:	4798      	blx	r3
 801442c:	3601      	adds	r6, #1
 801442e:	e7f2      	b.n	8014416 <__libc_init_array+0x1e>
 8014430:	08015554 	.word	0x08015554
 8014434:	08015554 	.word	0x08015554
 8014438:	08015554 	.word	0x08015554
 801443c:	0801555c 	.word	0x0801555c

08014440 <__retarget_lock_acquire_recursive>:
 8014440:	4770      	bx	lr

08014442 <__retarget_lock_release_recursive>:
 8014442:	4770      	bx	lr

08014444 <register_fini>:
 8014444:	4b02      	ldr	r3, [pc, #8]	; (8014450 <register_fini+0xc>)
 8014446:	b113      	cbz	r3, 801444e <register_fini+0xa>
 8014448:	4802      	ldr	r0, [pc, #8]	; (8014454 <register_fini+0x10>)
 801444a:	f000 b805 	b.w	8014458 <atexit>
 801444e:	4770      	bx	lr
 8014450:	00000000 	.word	0x00000000
 8014454:	08014465 	.word	0x08014465

08014458 <atexit>:
 8014458:	2300      	movs	r3, #0
 801445a:	4601      	mov	r1, r0
 801445c:	461a      	mov	r2, r3
 801445e:	4618      	mov	r0, r3
 8014460:	f000 b814 	b.w	801448c <__register_exitproc>

08014464 <__libc_fini_array>:
 8014464:	b538      	push	{r3, r4, r5, lr}
 8014466:	4d07      	ldr	r5, [pc, #28]	; (8014484 <__libc_fini_array+0x20>)
 8014468:	4c07      	ldr	r4, [pc, #28]	; (8014488 <__libc_fini_array+0x24>)
 801446a:	1b64      	subs	r4, r4, r5
 801446c:	10a4      	asrs	r4, r4, #2
 801446e:	b91c      	cbnz	r4, 8014478 <__libc_fini_array+0x14>
 8014470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014474:	f000 b8d2 	b.w	801461c <_fini>
 8014478:	3c01      	subs	r4, #1
 801447a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801447e:	4798      	blx	r3
 8014480:	e7f5      	b.n	801446e <__libc_fini_array+0xa>
 8014482:	bf00      	nop
 8014484:	0801555c 	.word	0x0801555c
 8014488:	08015560 	.word	0x08015560

0801448c <__register_exitproc>:
 801448c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014490:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8014500 <__register_exitproc+0x74>
 8014494:	4606      	mov	r6, r0
 8014496:	f8da 0000 	ldr.w	r0, [sl]
 801449a:	4698      	mov	r8, r3
 801449c:	460f      	mov	r7, r1
 801449e:	4691      	mov	r9, r2
 80144a0:	f7ff ffce 	bl	8014440 <__retarget_lock_acquire_recursive>
 80144a4:	4b17      	ldr	r3, [pc, #92]	; (8014504 <__register_exitproc+0x78>)
 80144a6:	681c      	ldr	r4, [r3, #0]
 80144a8:	b90c      	cbnz	r4, 80144ae <__register_exitproc+0x22>
 80144aa:	4c17      	ldr	r4, [pc, #92]	; (8014508 <__register_exitproc+0x7c>)
 80144ac:	601c      	str	r4, [r3, #0]
 80144ae:	6865      	ldr	r5, [r4, #4]
 80144b0:	f8da 0000 	ldr.w	r0, [sl]
 80144b4:	2d1f      	cmp	r5, #31
 80144b6:	dd05      	ble.n	80144c4 <__register_exitproc+0x38>
 80144b8:	f7ff ffc3 	bl	8014442 <__retarget_lock_release_recursive>
 80144bc:	f04f 30ff 	mov.w	r0, #4294967295
 80144c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144c4:	b19e      	cbz	r6, 80144ee <__register_exitproc+0x62>
 80144c6:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80144ca:	2201      	movs	r2, #1
 80144cc:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80144d0:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 80144d4:	40aa      	lsls	r2, r5
 80144d6:	4313      	orrs	r3, r2
 80144d8:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 80144dc:	2e02      	cmp	r6, #2
 80144de:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80144e2:	bf02      	ittt	eq
 80144e4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80144e8:	4313      	orreq	r3, r2
 80144ea:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 80144ee:	1c6b      	adds	r3, r5, #1
 80144f0:	3502      	adds	r5, #2
 80144f2:	6063      	str	r3, [r4, #4]
 80144f4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80144f8:	f7ff ffa3 	bl	8014442 <__retarget_lock_release_recursive>
 80144fc:	2000      	movs	r0, #0
 80144fe:	e7df      	b.n	80144c0 <__register_exitproc+0x34>
 8014500:	2000011c 	.word	0x2000011c
 8014504:	20001ee0 	.word	0x20001ee0
 8014508:	20001ee4 	.word	0x20001ee4
 801450c:	00000000 	.word	0x00000000

08014510 <floor>:
 8014510:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014518:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801451c:	2e13      	cmp	r6, #19
 801451e:	460b      	mov	r3, r1
 8014520:	4607      	mov	r7, r0
 8014522:	460c      	mov	r4, r1
 8014524:	4605      	mov	r5, r0
 8014526:	dc32      	bgt.n	801458e <floor+0x7e>
 8014528:	2e00      	cmp	r6, #0
 801452a:	da14      	bge.n	8014556 <floor+0x46>
 801452c:	a334      	add	r3, pc, #208	; (adr r3, 8014600 <floor+0xf0>)
 801452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014532:	f7eb fe2f 	bl	8000194 <__adddf3>
 8014536:	2200      	movs	r2, #0
 8014538:	2300      	movs	r3, #0
 801453a:	f7ec fa71 	bl	8000a20 <__aeabi_dcmpgt>
 801453e:	b138      	cbz	r0, 8014550 <floor+0x40>
 8014540:	2c00      	cmp	r4, #0
 8014542:	da56      	bge.n	80145f2 <floor+0xe2>
 8014544:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8014548:	4325      	orrs	r5, r4
 801454a:	d055      	beq.n	80145f8 <floor+0xe8>
 801454c:	4c2e      	ldr	r4, [pc, #184]	; (8014608 <floor+0xf8>)
 801454e:	2500      	movs	r5, #0
 8014550:	4623      	mov	r3, r4
 8014552:	462f      	mov	r7, r5
 8014554:	e025      	b.n	80145a2 <floor+0x92>
 8014556:	4a2d      	ldr	r2, [pc, #180]	; (801460c <floor+0xfc>)
 8014558:	fa42 f806 	asr.w	r8, r2, r6
 801455c:	ea01 0208 	and.w	r2, r1, r8
 8014560:	4302      	orrs	r2, r0
 8014562:	d01e      	beq.n	80145a2 <floor+0x92>
 8014564:	a326      	add	r3, pc, #152	; (adr r3, 8014600 <floor+0xf0>)
 8014566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801456a:	f7eb fe13 	bl	8000194 <__adddf3>
 801456e:	2200      	movs	r2, #0
 8014570:	2300      	movs	r3, #0
 8014572:	f7ec fa55 	bl	8000a20 <__aeabi_dcmpgt>
 8014576:	2800      	cmp	r0, #0
 8014578:	d0ea      	beq.n	8014550 <floor+0x40>
 801457a:	2c00      	cmp	r4, #0
 801457c:	bfbe      	ittt	lt
 801457e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014582:	4133      	asrlt	r3, r6
 8014584:	18e4      	addlt	r4, r4, r3
 8014586:	ea24 0408 	bic.w	r4, r4, r8
 801458a:	2500      	movs	r5, #0
 801458c:	e7e0      	b.n	8014550 <floor+0x40>
 801458e:	2e33      	cmp	r6, #51	; 0x33
 8014590:	dd0b      	ble.n	80145aa <floor+0x9a>
 8014592:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014596:	d104      	bne.n	80145a2 <floor+0x92>
 8014598:	4602      	mov	r2, r0
 801459a:	f7eb fdfb 	bl	8000194 <__adddf3>
 801459e:	4607      	mov	r7, r0
 80145a0:	460b      	mov	r3, r1
 80145a2:	4638      	mov	r0, r7
 80145a4:	4619      	mov	r1, r3
 80145a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145aa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80145ae:	f04f 38ff 	mov.w	r8, #4294967295
 80145b2:	fa28 f802 	lsr.w	r8, r8, r2
 80145b6:	ea10 0f08 	tst.w	r0, r8
 80145ba:	d0f2      	beq.n	80145a2 <floor+0x92>
 80145bc:	a310      	add	r3, pc, #64	; (adr r3, 8014600 <floor+0xf0>)
 80145be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c2:	f7eb fde7 	bl	8000194 <__adddf3>
 80145c6:	2200      	movs	r2, #0
 80145c8:	2300      	movs	r3, #0
 80145ca:	f7ec fa29 	bl	8000a20 <__aeabi_dcmpgt>
 80145ce:	2800      	cmp	r0, #0
 80145d0:	d0be      	beq.n	8014550 <floor+0x40>
 80145d2:	2c00      	cmp	r4, #0
 80145d4:	da0a      	bge.n	80145ec <floor+0xdc>
 80145d6:	2e14      	cmp	r6, #20
 80145d8:	d101      	bne.n	80145de <floor+0xce>
 80145da:	3401      	adds	r4, #1
 80145dc:	e006      	b.n	80145ec <floor+0xdc>
 80145de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80145e2:	2301      	movs	r3, #1
 80145e4:	40b3      	lsls	r3, r6
 80145e6:	441d      	add	r5, r3
 80145e8:	42af      	cmp	r7, r5
 80145ea:	d8f6      	bhi.n	80145da <floor+0xca>
 80145ec:	ea25 0508 	bic.w	r5, r5, r8
 80145f0:	e7ae      	b.n	8014550 <floor+0x40>
 80145f2:	2500      	movs	r5, #0
 80145f4:	462c      	mov	r4, r5
 80145f6:	e7ab      	b.n	8014550 <floor+0x40>
 80145f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80145fc:	e7a8      	b.n	8014550 <floor+0x40>
 80145fe:	bf00      	nop
 8014600:	8800759c 	.word	0x8800759c
 8014604:	7e37e43c 	.word	0x7e37e43c
 8014608:	bff00000 	.word	0xbff00000
 801460c:	000fffff 	.word	0x000fffff

08014610 <_init>:
 8014610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014612:	bf00      	nop
 8014614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014616:	bc08      	pop	{r3}
 8014618:	469e      	mov	lr, r3
 801461a:	4770      	bx	lr

0801461c <_fini>:
 801461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801461e:	bf00      	nop
 8014620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014622:	bc08      	pop	{r3}
 8014624:	469e      	mov	lr, r3
 8014626:	4770      	bx	lr
